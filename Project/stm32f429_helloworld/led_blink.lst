
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000028  20000000  08007e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  5 .bss          000000b4  20000028  20000028  00020028  2**2
                  ALLOC
  6 ._user_heap_stack 00000600  200000dc  200000dc  00020028  2**0
                  ALLOC
  7 .ARM.attributes 0000002f  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  8 .debug_line   0000580e  00000000  00000000  00020057  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d77b  00000000  00000000  00025865  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e2f  00000000  00000000  00032fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000820  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002380  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008d22  00000000  00000000  000379b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000324f  00000000  00000000  000406d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000038  00000000  00000000  00043921  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000018ac  00000000  00000000  0004395c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	080001c1 	stmdaeq	r0, {r0, r6, r7, r8}
 8000008:	0800030d 	stmdaeq	r0, {r0, r2, r3, r8, r9}
 800000c:	08000311 	stmdaeq	r0, {r0, r4, r8, r9}
 8000010:	08000315 	stmdaeq	r0, {r0, r2, r4, r8, r9}
 8000014:	08000319 	stmdaeq	r0, {r0, r3, r4, r8, r9}
 8000018:	0800031d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9}
	...
 800002c:	08000321 	stmdaeq	r0, {r0, r5, r8, r9}
 8000030:	08000325 	stmdaeq	r0, {r0, r2, r5, r8, r9}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000329 	stmdaeq	r0, {r0, r3, r5, r8, r9}
 800003c:	0800032d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9}
 8000040:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000044:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000048:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800004c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000050:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000054:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000058:	08000331 	stmdaeq	r0, {r0, r4, r5, r8, r9}
 800005c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000060:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000064:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000068:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800006c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000070:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000074:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000078:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800007c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000080:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000084:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000088:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800008c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000090:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000094:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000098:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800009c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000a0:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000a4:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000a8:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000ac:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000b0:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000b4:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000b8:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000bc:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000c0:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000c4:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000c8:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000cc:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000d0:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000d4:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000d8:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000dc:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000e0:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000e4:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000e8:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000ec:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000f0:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000f4:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000f8:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80000fc:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000100:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000104:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000108:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800010c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000110:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000114:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000118:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800011c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000120:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000124:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000128:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800012c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000130:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000134:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000138:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800013c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000140:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000144:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000148:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800014c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000150:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000154:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000158:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800015c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000160:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000164:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000168:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800016c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000170:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000174:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000178:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800017c:	00000000 	andeq	r0, r0, r0
 8000180:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000184:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000188:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800018c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000190:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000194:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 8000198:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 800019c:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80001a0:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80001a4:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}
 80001a8:	0800020d 	stmdaeq	r0, {r0, r2, r3, r9}

Disassembly of section .text:

080001ac <Reset_Handler-0x14>:
 80001ac:	08007e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp, lr}
 80001b0:	20000000 	andcs	r0, r0, r0
 80001b4:	20000028 	andcs	r0, r0, r8, lsr #32
 80001b8:	20000028 	andcs	r0, r0, r8, lsr #32
 80001bc:	200000dc 	ldrdcs	r0, [r0], -ip

080001c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80001c0:	f8df d030 	ldr.w	sp, [pc, #48]	; 80001f4 <LoopFillZerobss+0x10>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001c6:	e003      	b.n	80001d0 <LoopCopyDataInit>

080001c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001c8:	4b0b      	ldr	r3, [pc, #44]	; (80001f8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80001ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001ce:	3104      	adds	r1, #4

080001d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d0:	480a      	ldr	r0, [pc, #40]	; (80001fc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80001d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001d8:	d3f6      	bcc.n	80001c8 <CopyDataInit>
  ldr  r2, =_sbss
 80001da:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80001dc:	e002      	b.n	80001e4 <LoopFillZerobss>

080001de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001e0:	f842 3b04 	str.w	r3, [r2], #4

080001e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80001e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001e8:	d3f9      	bcc.n	80001de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001ea:	f000 f8a5 	bl	8000338 <SystemInit>
/* Call static constructors */
/*  bl __libc_init_array*/
/* Call the application's entry point.*/
  bl  main
 80001ee:	f000 f80f 	bl	8000210 <main>
  bx  lr    
 80001f2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80001f4:	20030000 	andcs	r0, r3, r0
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80001f8:	08007e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp, lr}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001fc:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 8000200:	20000028 	andcs	r0, r0, r8, lsr #32
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000204:	20000028 	andcs	r0, r0, r8, lsr #32
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000208:	200000dc 	ldrdcs	r0, [r0], -ip

0800020c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800020c:	e7fe      	b.n	800020c <ADC_IRQHandler>
	...

08000210 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b094      	sub	sp, #80	; 0x50
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000214:	f000 f924 	bl	8000460 <HAL_Init>

  /* Configure LED3 and LED4 */
  BSP_LED_Init(LED3);
 8000218:	2000      	movs	r0, #0
 800021a:	f007 f861 	bl	80072e0 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 800021e:	2001      	movs	r0, #1
 8000220:	f007 f85e 	bl	80072e0 <BSP_LED_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000224:	4c32      	ldr	r4, [pc, #200]	; (80002f0 <main+0xe0>)
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000226:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <main+0xe4>)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000228:	2100      	movs	r1, #0
 800022a:	9101      	str	r1, [sp, #4]
 800022c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800022e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000232:	6422      	str	r2, [r4, #64]	; 0x40
 8000234:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000236:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800023a:	9201      	str	r2, [sp, #4]
 800023c:	9a01      	ldr	r2, [sp, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800023e:	9102      	str	r1, [sp, #8]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800024e:	9302      	str	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000258:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 360;
 800025a:	f44f 72b4 	mov.w	r2, #360	; 0x168
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800025e:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	a808      	add	r0, sp, #32
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	960f      	str	r6, [sp, #60]	; 0x3c
  __HAL_RCC_PWR_CLK_ENABLE();
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000264:	f8dd e008 	ldr.w	lr, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	970e      	str	r7, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800026e:	9712      	str	r7, [sp, #72]	; 0x48
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000270:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000272:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000274:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f004 fb7b 	bl	8004970 <HAL_RCC_OscConfig>
 800027a:	4606      	mov	r6, r0
 800027c:	2800      	cmp	r0, #0
 800027e:	d132      	bne.n	80002e6 <main+0xd6>
  {
    Error_Handler();
  }

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 8000280:	f004 ffec 	bl	800525c <HAL_PWREx_EnableOverDrive>
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000284:	f04f 0e0f 	mov.w	lr, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000288:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800028c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000290:	a803      	add	r0, sp, #12
 8000292:	2105      	movs	r1, #5
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	9605      	str	r6, [sp, #20]
  HAL_PWREx_EnableOverDrive();
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	9704      	str	r7, [sp, #16]
  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000298:	f8cd e00c 	str.w	lr, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800029c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800029e:	9307      	str	r3, [sp, #28]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002a0:	f004 fd8e 	bl	8004dc0 <HAL_RCC_ClockConfig>
 80002a4:	4606      	mov	r6, r0
 80002a6:	b9d0      	cbnz	r0, 80002de <main+0xce>
static void EXTILine0_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a8:	9003      	str	r0, [sp, #12]
 80002aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  
  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <main+0xe8>)
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Pin = GPIO_PIN_0;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002ae:	4813      	ldr	r0, [pc, #76]	; (80002fc <main+0xec>)
static void EXTILine0_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6323      	str	r3, [r4, #48]	; 0x30
 80002b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  
  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80002b8:	9209      	str	r2, [sp, #36]	; 0x24
static void EXTILine0_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ba:	f003 0301 	and.w	r3, r3, #1
  
  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Pin = GPIO_PIN_0;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002be:	a908      	add	r1, sp, #32
static void EXTILine0_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	9303      	str	r3, [sp, #12]
 80002c2:	9b03      	ldr	r3, [sp, #12]
  
  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80002c4:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 80002c6:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002c8:	f000 fac0 	bl	800084c <HAL_GPIO_Init>

  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80002cc:	2006      	movs	r0, #6
 80002ce:	4639      	mov	r1, r7
 80002d0:	4632      	mov	r2, r6
 80002d2:	f000 f995 	bl	8000600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002d6:	2006      	movs	r0, #6
 80002d8:	f000 f9c8 	bl	800066c <HAL_NVIC_EnableIRQ>
  EXTILine0_Config();
  
  /* Infinite loop */
  while (1)
  {
  }
 80002dc:	e7fe      	b.n	80002dc <main+0xcc>
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 80002de:	4628      	mov	r0, r5
 80002e0:	f007 f83a 	bl	8007358 <BSP_LED_On>
 80002e4:	e7fe      	b.n	80002e4 <main+0xd4>
 80002e6:	4628      	mov	r0, r5
 80002e8:	f007 f836 	bl	8007358 <BSP_LED_On>
 80002ec:	e7fe      	b.n	80002ec <main+0xdc>
 80002ee:	bf00      	nop
 80002f0:	40023800 	andmi	r3, r2, r0, lsl #16
 80002f4:	40007000 	andmi	r7, r0, r0
 80002f8:	10210000 	eorne	r0, r1, r0
 80002fc:	40020000 	andmi	r0, r2, r0

08000300 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == KEY_BUTTON_PIN)
 8000300:	2801      	cmp	r0, #1
 8000302:	d000      	beq.n	8000306 <HAL_GPIO_EXTI_Callback+0x6>
 8000304:	4770      	bx	lr
  {
    /* Toggle LED3 */
    BSP_LED_Toggle(LED3);
 8000306:	2000      	movs	r0, #0
 8000308:	f007 b842 	b.w	8007390 <BSP_LED_Toggle>

0800030c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000310:	e7fe      	b.n	8000310 <HardFault_Handler>
 8000312:	bf00      	nop

08000314 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000314:	e7fe      	b.n	8000314 <MemManage_Handler>
 8000316:	bf00      	nop

08000318 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000318:	e7fe      	b.n	8000318 <BusFault_Handler>
 800031a:	bf00      	nop

0800031c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800031c:	e7fe      	b.n	800031c <UsageFault_Handler>
 800031e:	bf00      	nop

08000320 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop

08000324 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop

08000328 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop

0800032c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800032c:	f000 b8b2 	b.w	8000494 <HAL_IncTick>

08000330 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8000330:	2001      	movs	r0, #1
 8000332:	f000 bca1 	b.w	8000c78 <HAL_GPIO_EXTI_IRQHandler>
 8000336:	bf00      	nop

08000338 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000338:	4910      	ldr	r1, [pc, #64]	; (800037c <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <SystemInit+0x48>)
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800033c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8000340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000344:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000346:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800034a:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800034c:	4c0d      	ldr	r4, [pc, #52]	; (8000384 <SystemInit+0x4c>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800034e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000350:	f042 0201 	orr.w	r2, r2, #1
 8000354:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000356:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800035e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000362:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000364:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000366:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000368:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800036c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000370:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000372:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000374:	608c      	str	r4, [r1, #8]
#endif
}
 8000376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	e000ed00 	and	lr, r0, r0, lsl #26
 8000380:	40023800 	andmi	r3, r2, r0, lsl #16
 8000384:	24003010 	strcs	r3, [r0], #-16

08000388 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000388:	4818      	ldr	r0, [pc, #96]	; (80003ec <SystemCoreClockUpdate+0x64>)
 800038a:	6883      	ldr	r3, [r0, #8]
 800038c:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000390:	2b04      	cmp	r3, #4
 8000392:	d029      	beq.n	80003e8 <SystemCoreClockUpdate+0x60>
 8000394:	2b08      	cmp	r3, #8
 8000396:	d00a      	beq.n	80003ae <SystemCoreClockUpdate+0x26>
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <SystemCoreClockUpdate+0x64>)
 800039c:	4815      	ldr	r0, [pc, #84]	; (80003f4 <SystemCoreClockUpdate+0x6c>)
 800039e:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003a0:	4915      	ldr	r1, [pc, #84]	; (80003f8 <SystemCoreClockUpdate+0x70>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80003a6:	5c82      	ldrb	r2, [r0, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003a8:	40d3      	lsrs	r3, r2
 80003aa:	600b      	str	r3, [r1, #0]
 80003ac:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003ae:	6843      	ldr	r3, [r0, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003b0:	6841      	ldr	r1, [r0, #4]
      
      if (pllsource != 0)
 80003b2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003b6:	6843      	ldr	r3, [r0, #4]
 80003b8:	bf18      	it	ne
 80003ba:	4810      	ldrne	r0, [pc, #64]	; (80003fc <SystemCoreClockUpdate+0x74>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003bc:	f001 023f 	and.w	r2, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003c0:	bf0c      	ite	eq
 80003c2:	490b      	ldreq	r1, [pc, #44]	; (80003f0 <SystemCoreClockUpdate+0x68>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003c4:	fbb0 f1f2 	udivne	r1, r0, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003c8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80003cc:	bf08      	it	eq
 80003ce:	fbb1 f1f2 	udiveq	r1, r1, r2
 80003d2:	fb01 f203 	mul.w	r2, r1, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <SystemCoreClockUpdate+0x64>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80003de:	3301      	adds	r3, #1
 80003e0:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80003e2:	fbb2 f3f3 	udiv	r3, r2, r3
      break;
 80003e6:	e7d8      	b.n	800039a <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <SystemCoreClockUpdate+0x74>)
 80003ea:	e7d6      	b.n	800039a <SystemCoreClockUpdate+0x12>
 80003ec:	40023800 	andmi	r3, r2, r0, lsl #16
 80003f0:	00f42400 	rscseq	r2, r4, r0, lsl #8
 80003f4:	20000000 	andcs	r0, r0, r0
 80003f8:	20000010 	andcs	r0, r0, r0, lsl r0
 80003fc:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08000400 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop

08000404 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000408:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_DeInit+0x28>)
 800040c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 8000410:	2400      	movs	r4, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000412:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000414:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000416:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000418:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800041a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800041c:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800041e:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000420:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000422:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000424:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000426:	f7ff ffed 	bl	8000404 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 800042a:	4620      	mov	r0, r4
 800042c:	bd10      	pop	{r4, pc}
 800042e:	bf00      	nop
 8000430:	40023800 	andmi	r3, r2, r0, lsl #16

08000434 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <HAL_InitTick+0x24>)
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <HAL_InitTick+0x28>)
 8000438:	681b      	ldr	r3, [r3, #0]
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800043a:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800043c:	fba2 2303 	umull	r2, r3, r2, r3
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000440:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000442:	0998      	lsrs	r0, r3, #6
 8000444:	f000 f93c 	bl	80006c0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000448:	4621      	mov	r1, r4
 800044a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800044e:	2200      	movs	r2, #0
 8000450:	f000 f8d6 	bl	8000600 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000454:	2000      	movs	r0, #0
 8000456:	bd10      	pop	{r4, pc}
 8000458:	20000010 	andcs	r0, r0, r0, lsl r0
 800045c:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08000460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000460:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <HAL_Init+0x30>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800046a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000472:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800047a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800047c:	2003      	movs	r0, #3
 800047e:	f000 f8ad 	bl	80005dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000482:	200f      	movs	r0, #15
 8000484:	f7ff ffd6 	bl	8000434 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000488:	f7ff ffba 	bl	8000400 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800048c:	2000      	movs	r0, #0
 800048e:	bd08      	pop	{r3, pc}
 8000490:	40023c00 	andmi	r3, r2, r0, lsl #24

08000494 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000494:	4a02      	ldr	r2, [pc, #8]	; (80004a0 <HAL_IncTick+0xc>)
 8000496:	6813      	ldr	r3, [r2, #0]
 8000498:	3301      	adds	r3, #1
 800049a:	6013      	str	r3, [r2, #0]
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000028 	andcs	r0, r0, r8, lsr #32

080004a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <HAL_GetTick+0x8>)
 80004a6:	6818      	ldr	r0, [r3, #0]
}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000028 	andcs	r0, r0, r8, lsr #32

080004b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80004b0:	b510      	push	{r4, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80004b6:	f7ff fff5 	bl	80004a4 <HAL_GetTick>
 80004ba:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80004bc:	f7ff fff2 	bl	80004a4 <HAL_GetTick>
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	1b00      	subs	r0, r0, r4
 80004c4:	4298      	cmp	r0, r3
 80004c6:	d3f9      	bcc.n	80004bc <HAL_Delay+0xc>
  {
  }
}
 80004c8:	b002      	add	sp, #8
 80004ca:	bd10      	pop	{r4, pc}

080004cc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80004cc:	4a02      	ldr	r2, [pc, #8]	; (80004d8 <HAL_SuspendTick+0xc>)
 80004ce:	6813      	ldr	r3, [r2, #0]
 80004d0:	f023 0302 	bic.w	r3, r3, #2
 80004d4:	6013      	str	r3, [r2, #0]
 80004d6:	4770      	bx	lr
 80004d8:	e000e010 	and	lr, r0, r0, lsl r0

080004dc <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80004dc:	4a02      	ldr	r2, [pc, #8]	; (80004e8 <HAL_ResumeTick+0xc>)
 80004de:	6813      	ldr	r3, [r2, #0]
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	4770      	bx	lr
 80004e8:	e000e010 	and	lr, r0, r0, lsl r0

080004ec <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F4xx_HAL_VERSION;
}
 80004ec:	4800      	ldr	r0, [pc, #0]	; (80004f0 <HAL_GetHalVersion+0x4>)
 80004ee:	4770      	bx	lr
 80004f0:	01050200 	mrseq	r0, SP_usr

080004f4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80004f4:	4b01      	ldr	r3, [pc, #4]	; (80004fc <HAL_GetREVID+0x8>)
 80004f6:	6818      	ldr	r0, [r3, #0]
}
 80004f8:	0c00      	lsrs	r0, r0, #16
 80004fa:	4770      	bx	lr
 80004fc:	e0042000 	and	r2, r4, r0

08000500 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <HAL_GetDEVID+0xc>)
 8000502:	6818      	ldr	r0, [r3, #0]
}
 8000504:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e0042000 	and	r2, r4, r0

08000510 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000510:	4a02      	ldr	r2, [pc, #8]	; (800051c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8000512:	6853      	ldr	r3, [r2, #4]
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6053      	str	r3, [r2, #4]
 800051a:	4770      	bx	lr
 800051c:	e0042000 	and	r2, r4, r0

08000520 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000520:	4a02      	ldr	r2, [pc, #8]	; (800052c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8000522:	6853      	ldr	r3, [r2, #4]
 8000524:	f023 0301 	bic.w	r3, r3, #1
 8000528:	6053      	str	r3, [r2, #4]
 800052a:	4770      	bx	lr
 800052c:	e0042000 	and	r2, r4, r0

08000530 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000530:	4a02      	ldr	r2, [pc, #8]	; (800053c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8000532:	6853      	ldr	r3, [r2, #4]
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	6053      	str	r3, [r2, #4]
 800053a:	4770      	bx	lr
 800053c:	e0042000 	and	r2, r4, r0

08000540 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000540:	4a02      	ldr	r2, [pc, #8]	; (800054c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8000542:	6853      	ldr	r3, [r2, #4]
 8000544:	f023 0302 	bic.w	r3, r3, #2
 8000548:	6053      	str	r3, [r2, #4]
 800054a:	4770      	bx	lr
 800054c:	e0042000 	and	r2, r4, r0

08000550 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000550:	4a02      	ldr	r2, [pc, #8]	; (800055c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8000552:	6853      	ldr	r3, [r2, #4]
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6053      	str	r3, [r2, #4]
 800055a:	4770      	bx	lr
 800055c:	e0042000 	and	r2, r4, r0

08000560 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000560:	4a02      	ldr	r2, [pc, #8]	; (800056c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8000562:	6853      	ldr	r3, [r2, #4]
 8000564:	f023 0304 	bic.w	r3, r3, #4
 8000568:	6053      	str	r3, [r2, #4]
 800056a:	4770      	bx	lr
 800056c:	e0042000 	and	r2, r4, r0

08000570 <HAL_EnableCompensationCell>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000570:	2101      	movs	r1, #1
 8000572:	fa91 f2a1 	rbit	r2, r1
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8000576:	4b03      	ldr	r3, [pc, #12]	; (8000584 <HAL_EnableCompensationCell+0x14>)
 8000578:	fab2 f282 	clz	r2, r2
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	6019      	str	r1, [r3, #0]
 8000582:	4770      	bx	lr
 8000584:	1089c100 	addne	ip, r9, r0, lsl #2

08000588 <HAL_DisableCompensationCell>:
 8000588:	2201      	movs	r2, #1
 800058a:	fa92 f2a2 	rbit	r2, r2
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_DisableCompensationCell+0x18>)
 8000590:	fab2 f282 	clz	r2, r2
 8000594:	4413      	add	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	1089c100 	addne	ip, r9, r0, lsl #2

080005a4 <HAL_EnableMemorySwappingBank>:
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	fa93 f3a3 	rbit	r3, r3
  *
  * @retval None
  */
void HAL_EnableMemorySwappingBank(void)
{
  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)ENABLE;
 80005ac:	fab3 f383 	clz	r3, r3
 80005b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80005b4:	f503 231c 	add.w	r3, r3, #638976	; 0x9c000
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	4770      	bx	lr

080005c0 <HAL_DisableMemorySwappingBank>:
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	fa93 f3a3 	rbit	r3, r3
  * @retval None
  */
void HAL_DisableMemorySwappingBank(void)
{

  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)DISABLE;
 80005c8:	fab3 f383 	clz	r3, r3
 80005cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80005d0:	f503 231c 	add.w	r3, r3, #638976	; 0x9c000
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	4770      	bx	lr

080005dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005de:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	400b      	ands	r3, r1
 80005e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ea:	f000 0007 	and.w	r0, r0, #7
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80005f2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80005f6:	60d3      	str	r3, [r2, #12]
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	and	lr, r0, r0, lsl #26

08000600 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_NVIC_SetPriority+0x64>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000608:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060a:	f1c3 0507 	rsb	r5, r3, #7
 800060e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000610:	f103 0404 	add.w	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000614:	bf28      	it	cs
 8000616:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000618:	2c06      	cmp	r4, #6
 800061a:	d917      	bls.n	800064c <HAL_NVIC_SetPriority+0x4c>
 800061c:	3b03      	subs	r3, #3
 800061e:	2401      	movs	r4, #1
 8000620:	409c      	lsls	r4, r3
 8000622:	3c01      	subs	r4, #1
 8000624:	4022      	ands	r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000626:	2401      	movs	r4, #1
 8000628:	40ac      	lsls	r4, r5
 800062a:	3c01      	subs	r4, #1
 800062c:	4021      	ands	r1, r4
 800062e:	4099      	lsls	r1, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000630:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000632:	ea42 0201 	orr.w	r2, r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000636:	db0c      	blt.n	8000652 <HAL_NVIC_SetPriority+0x52>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800063c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000648:	bc30      	pop	{r4, r5}
 800064a:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064c:	2200      	movs	r2, #0
 800064e:	4613      	mov	r3, r2
 8000650:	e7e9      	b.n	8000626 <HAL_NVIC_SetPriority+0x26>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_NVIC_SetPriority+0x68>)
 8000654:	f000 000f 	and.w	r0, r0, #15
 8000658:	0112      	lsls	r2, r2, #4
 800065a:	4403      	add	r3, r0
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	761a      	strb	r2, [r3, #24]
 8000660:	bc30      	pop	{r4, r5}
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	and	lr, r0, r0, lsl #26
 8000668:	e000ecfc 	strd	lr, [r0], -ip

0800066c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800066c:	f000 011f 	and.w	r1, r0, #31
 8000670:	2301      	movs	r3, #1
 8000672:	0940      	lsrs	r0, r0, #5
 8000674:	4a02      	ldr	r2, [pc, #8]	; (8000680 <HAL_NVIC_EnableIRQ+0x14>)
 8000676:	408b      	lsls	r3, r1
 8000678:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e100 	and	lr, r0, r0, lsl #2

08000684 <HAL_NVIC_DisableIRQ>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000684:	0943      	lsrs	r3, r0, #5
 8000686:	3320      	adds	r3, #32
 8000688:	f000 001f 	and.w	r0, r0, #31
 800068c:	2201      	movs	r2, #1
 800068e:	4902      	ldr	r1, [pc, #8]	; (8000698 <HAL_NVIC_DisableIRQ+0x14>)
 8000690:	4082      	lsls	r2, r0
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000696:	4770      	bx	lr
 8000698:	e000e100 	and	lr, r0, r0, lsl #2

0800069c <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006a0:	4905      	ldr	r1, [pc, #20]	; (80006b8 <HAL_NVIC_SystemReset+0x1c>)
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006a4:	68ca      	ldr	r2, [r1, #12]
 80006a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60cb      	str	r3, [r1, #12]
 80006ae:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006b2:	bf00      	nop
 80006b4:	e7fd      	b.n	80006b2 <HAL_NVIC_SystemReset+0x16>
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	and	lr, r0, r0, lsl #26
 80006bc:	05fa0004 	ldrbeq	r0, [sl, #4]!

080006c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	3801      	subs	r0, #1
 80006c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c6:	d20e      	bcs.n	80006e6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ca:	b410      	push	{r4}
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	4c08      	ldr	r4, [pc, #32]	; (80006f0 <HAL_SYSTICK_Config+0x30>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	20f0      	movs	r0, #240	; 0xf0
 80006d2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006da:	4610      	mov	r0, r2
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006de:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80006e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006e4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80006e6:	2001      	movs	r0, #1
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e010 	and	lr, r0, r0, lsl r0
 80006f0:	e000ed00 	and	lr, r0, r0, lsl #26

080006f4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80006f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80006f8:	4d14      	ldr	r5, [pc, #80]	; (800074c <HAL_MPU_ConfigRegion+0x58>)
 80006fa:	7843      	ldrb	r3, [r0, #1]
 80006fc:	60ab      	str	r3, [r5, #8]

  if ((MPU_Init->Enable) != RESET)
 80006fe:	7803      	ldrb	r3, [r0, #0]
 8000700:	b91b      	cbnz	r3, 800070a <HAL_MPU_ConfigRegion+0x16>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00U;
 8000702:	60eb      	str	r3, [r5, #12]
    MPU->RASR = 0x00U;
 8000704:	612b      	str	r3, [r5, #16]
 8000706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800070a:	6843      	ldr	r3, [r0, #4]
 800070c:	60eb      	str	r3, [r5, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800070e:	7ac6      	ldrb	r6, [r0, #11]
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000710:	f890 800c 	ldrb.w	r8, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000714:	7b42      	ldrb	r2, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000716:	7bc3      	ldrb	r3, [r0, #15]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000718:	7804      	ldrb	r4, [r0, #0]
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800071a:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800071c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000720:	f890 e009 	ldrb.w	lr, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000724:	7a07      	ldrb	r7, [r0, #8]
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000726:	0630      	lsls	r0, r6, #24
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000728:	ea40 7008 	orr.w	r0, r0, r8, lsl #28
 800072c:	4320      	orrs	r0, r4
 800072e:	ea40 41c1 	orr.w	r1, r0, r1, lsl #19
 8000732:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8000736:	ea41 424c 	orr.w	r2, r1, ip, lsl #17
 800073a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800073e:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000742:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000746:	612b      	str	r3, [r5, #16]
 8000748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800074c:	e000ed90 	mul	r0, r0, sp

08000750 <HAL_NVIC_GetPriorityGrouping>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <HAL_NVIC_GetPriorityGrouping+0xc>)
 8000752:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8000754:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	and	lr, r0, r0, lsl #26

08000760 <HAL_NVIC_GetPriority>:
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) < 0)
 8000760:	2800      	cmp	r0, #0
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000762:	b470      	push	{r4, r5, r6}
 8000764:	db23      	blt.n	80007ae <HAL_NVIC_GetPriority+0x4e>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000766:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800076a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800076e:	f890 4300 	ldrb.w	r4, [r0, #768]	; 0x300
 8000772:	0924      	lsrs	r4, r4, #4
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	f001 0107 	and.w	r1, r1, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	f1c1 0607 	rsb	r6, r1, #7
 800077c:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	f101 0004 	add.w	r0, r1, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000782:	bf28      	it	cs
 8000784:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	2806      	cmp	r0, #6
 8000788:	d90e      	bls.n	80007a8 <HAL_NVIC_GetPriority+0x48>
 800078a:	3903      	subs	r1, #3
 800078c:	2501      	movs	r5, #1
 800078e:	408d      	lsls	r5, r1
 8000790:	3d01      	subs	r5, #1
 8000792:	4025      	ands	r5, r4

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000794:	2001      	movs	r0, #1
 8000796:	40b0      	lsls	r0, r6
 8000798:	40cc      	lsrs	r4, r1
 800079a:	3801      	subs	r0, #1
 800079c:	ea04 0100 	and.w	r1, r4, r0
 80007a0:	6011      	str	r1, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80007a2:	601d      	str	r5, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 80007a4:	bc70      	pop	{r4, r5, r6}
 80007a6:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a8:	2500      	movs	r5, #0
 80007aa:	4629      	mov	r1, r5
 80007ac:	e7f2      	b.n	8000794 <HAL_NVIC_GetPriority+0x34>
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) < 0)
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80007ae:	4c03      	ldr	r4, [pc, #12]	; (80007bc <HAL_NVIC_GetPriority+0x5c>)
 80007b0:	f000 000f 	and.w	r0, r0, #15
 80007b4:	4404      	add	r4, r0
 80007b6:	7e24      	ldrb	r4, [r4, #24]
 80007b8:	0924      	lsrs	r4, r4, #4
 80007ba:	e7db      	b.n	8000774 <HAL_NVIC_GetPriority+0x14>
 80007bc:	e000ecfc 	strd	lr, [r0], -ip

080007c0 <HAL_NVIC_SetPendingIRQ>:
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007c0:	0943      	lsrs	r3, r0, #5
 80007c2:	3340      	adds	r3, #64	; 0x40
 80007c4:	f000 001f 	and.w	r0, r0, #31
 80007c8:	2201      	movs	r2, #1
 80007ca:	4902      	ldr	r1, [pc, #8]	; (80007d4 <HAL_NVIC_SetPendingIRQ+0x14>)
 80007cc:	4082      	lsls	r2, r0
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	and	lr, r0, r0, lsl #2

080007d8 <HAL_NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80007d8:	0943      	lsrs	r3, r0, #5
 80007da:	3340      	adds	r3, #64	; 0x40
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_NVIC_GetPendingIRQ+0x18>)
 80007de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e2:	f000 031f 	and.w	r3, r0, #31
 80007e6:	fa22 f003 	lsr.w	r0, r2, r3
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 80007ea:	f000 0001 	and.w	r0, r0, #1
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	and	lr, r0, r0, lsl #2

080007f4 <HAL_NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007f4:	0943      	lsrs	r3, r0, #5
 80007f6:	3360      	adds	r3, #96	; 0x60
 80007f8:	f000 001f 	and.w	r0, r0, #31
 80007fc:	2201      	movs	r2, #1
 80007fe:	4902      	ldr	r1, [pc, #8]	; (8000808 <HAL_NVIC_ClearPendingIRQ+0x14>)
 8000800:	4082      	lsls	r2, r0
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000806:	4770      	bx	lr
 8000808:	e000e100 	and	lr, r0, r0, lsl #2

0800080c <HAL_NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800080c:	0943      	lsrs	r3, r0, #5
 800080e:	3380      	adds	r3, #128	; 0x80
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_NVIC_GetActive+0x18>)
 8000812:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000816:	f000 031f 	and.w	r3, r0, #31
 800081a:	fa22 f003 	lsr.w	r0, r2, r3
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 800081e:	f000 0001 	and.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	e000e100 	and	lr, r0, r0, lsl #2

08000828 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800082a:	6813      	ldr	r3, [r2, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800082c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800082e:	bf0c      	ite	eq
 8000830:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000834:	f023 0304 	bicne.w	r3, r3, #4
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	4770      	bx	lr
 800083c:	e000e010 	and	lr, r0, r0, lsl r0

08000840 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000844:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000846:	f7ff fffb 	bl	8000840 <HAL_SYSTICK_Callback>
 800084a:	bd08      	pop	{r3, pc}

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000850:	b085      	sub	sp, #20
 8000852:	680f      	ldr	r7, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000854:	f8df e25c 	ldr.w	lr, [pc, #604]	; 8000ab4 <HAL_GPIO_Init+0x268>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000858:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8000ab8 <HAL_GPIO_Init+0x26c>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800085c:	4e8e      	ldr	r6, [pc, #568]	; (8000a98 <HAL_GPIO_Init+0x24c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800085e:	9701      	str	r7, [sp, #4]
 8000860:	2300      	movs	r3, #0
 8000862:	e003      	b.n	800086c <HAL_GPIO_Init+0x20>
 8000864:	3301      	adds	r3, #1
 8000866:	2b10      	cmp	r3, #16
 8000868:	f000 80aa 	beq.w	80009c0 <HAL_GPIO_Init+0x174>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800086c:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086e:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000870:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	4014      	ands	r4, r2

    if(iocurrent == ioposition)
 8000874:	4294      	cmp	r4, r2
 8000876:	d1f5      	bne.n	8000864 <HAL_GPIO_Init+0x18>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000878:	684d      	ldr	r5, [r1, #4]
 800087a:	f025 0a10 	bic.w	sl, r5, #16
 800087e:	f1ba 0f02 	cmp.w	sl, #2
 8000882:	f000 80a0 	beq.w	80009c6 <HAL_GPIO_Init+0x17a>
 8000886:	ea4f 0943 	mov.w	r9, r3, lsl #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800088a:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800088c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000890:	fa02 f209 	lsl.w	r2, r2, r9
 8000894:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000896:	f005 0803 	and.w	r8, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800089a:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800089e:	fa08 f809 	lsl.w	r8, r8, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a6:	ea4b 0808 	orr.w	r8, fp, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008aa:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80008ae:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b2:	f240 80b1 	bls.w	8000a18 <HAL_GPIO_Init+0x1cc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008ba:	688f      	ldr	r7, [r1, #8]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008bc:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008c0:	fa07 f809 	lsl.w	r8, r7, r9
 80008c4:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->PUPDR = temp;
 80008c8:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ca:	00ea      	lsls	r2, r5, #3
 80008cc:	d5ca      	bpl.n	8000864 <HAL_GPIO_Init+0x18>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	f04f 0a00 	mov.w	sl, #0
 80008d2:	f8cd a00c 	str.w	sl, [sp, #12]
 80008d6:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
 80008da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008de:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
 80008e2:	f8de 8044 	ldr.w	r8, [lr, #68]	; 0x44
 80008e6:	f023 0203 	bic.w	r2, r3, #3
 80008ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80008ee:	f408 4880 	and.w	r8, r8, #16384	; 0x4000
 80008f2:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80008f6:	f8cd 800c 	str.w	r8, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80008fa:	f003 0803 	and.w	r8, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	f8dd 900c 	ldr.w	r9, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000902:	f8d2 b008 	ldr.w	fp, [r2, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000906:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800090a:	f04f 090f 	mov.w	r9, #15
 800090e:	fa09 f908 	lsl.w	r9, r9, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000912:	4560      	cmp	r0, ip
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000914:	ea2b 0909 	bic.w	r9, fp, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000918:	d02b      	beq.n	8000972 <HAL_GPIO_Init+0x126>
 800091a:	4f60      	ldr	r7, [pc, #384]	; (8000a9c <HAL_GPIO_Init+0x250>)
 800091c:	42b8      	cmp	r0, r7
 800091e:	f000 8093 	beq.w	8000a48 <HAL_GPIO_Init+0x1fc>
 8000922:	4f5f      	ldr	r7, [pc, #380]	; (8000aa0 <HAL_GPIO_Init+0x254>)
 8000924:	42b8      	cmp	r0, r7
 8000926:	f000 8094 	beq.w	8000a52 <HAL_GPIO_Init+0x206>
 800092a:	4f5e      	ldr	r7, [pc, #376]	; (8000aa4 <HAL_GPIO_Init+0x258>)
 800092c:	42b8      	cmp	r0, r7
 800092e:	f000 8095 	beq.w	8000a5c <HAL_GPIO_Init+0x210>
 8000932:	4f5d      	ldr	r7, [pc, #372]	; (8000aa8 <HAL_GPIO_Init+0x25c>)
 8000934:	42b8      	cmp	r0, r7
 8000936:	f000 8096 	beq.w	8000a66 <HAL_GPIO_Init+0x21a>
 800093a:	4f5c      	ldr	r7, [pc, #368]	; (8000aac <HAL_GPIO_Init+0x260>)
 800093c:	42b8      	cmp	r0, r7
 800093e:	f000 8097 	beq.w	8000a70 <HAL_GPIO_Init+0x224>
 8000942:	4f5b      	ldr	r7, [pc, #364]	; (8000ab0 <HAL_GPIO_Init+0x264>)
 8000944:	42b8      	cmp	r0, r7
 8000946:	f000 8098 	beq.w	8000a7a <HAL_GPIO_Init+0x22e>
 800094a:	f8df a170 	ldr.w	sl, [pc, #368]	; 8000abc <HAL_GPIO_Init+0x270>
 800094e:	4550      	cmp	r0, sl
 8000950:	f000 8098 	beq.w	8000a84 <HAL_GPIO_Init+0x238>
 8000954:	f8df a168 	ldr.w	sl, [pc, #360]	; 8000ac0 <HAL_GPIO_Init+0x274>
 8000958:	4550      	cmp	r0, sl
 800095a:	f000 8098 	beq.w	8000a8e <HAL_GPIO_Init+0x242>
 800095e:	f8df a164 	ldr.w	sl, [pc, #356]	; 8000ac4 <HAL_GPIO_Init+0x278>
 8000962:	4550      	cmp	r0, sl
 8000964:	bf0c      	ite	eq
 8000966:	f04f 0a09 	moveq.w	sl, #9
 800096a:	f04f 0a0a 	movne.w	sl, #10
 800096e:	fa0a fa08 	lsl.w	sl, sl, r8
 8000972:	ea4a 0a09 	orr.w	sl, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000976:	f8c2 a008 	str.w	sl, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800097a:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800097c:	ea6f 0804 	mvn.w	r8, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000980:	03ef      	lsls	r7, r5, #15
        {
          temp |= iocurrent;
 8000982:	bf4c      	ite	mi
 8000984:	4322      	orrmi	r2, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000986:	ea08 0202 	andpl.w	r2, r8, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800098a:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 800098c:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800098e:	03af      	lsls	r7, r5, #14
        {
          temp |= iocurrent;
 8000990:	bf4c      	ite	mi
 8000992:	4322      	orrmi	r2, r4
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000994:	ea08 0202 	andpl.w	r2, r8, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000998:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800099a:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800099c:	02ef      	lsls	r7, r5, #11
        {
          temp |= iocurrent;
 800099e:	bf4c      	ite	mi
 80009a0:	4322      	orrmi	r2, r4
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80009a2:	ea08 0202 	andpl.w	r2, r8, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80009a6:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80009a8:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009aa:	02ad      	lsls	r5, r5, #10
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009ac:	f103 0301 	add.w	r3, r3, #1
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80009b0:	bf54      	ite	pl
 80009b2:	ea08 0402 	andpl.w	r4, r8, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80009b6:	4314      	orrmi	r4, r2
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009b8:	2b10      	cmp	r3, #16
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80009ba:	60f4      	str	r4, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009bc:	f47f af56 	bne.w	800086c <HAL_GPIO_Init+0x20>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80009c0:	b005      	add	sp, #20
 80009c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009c6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80009ca:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80009ce:	f003 0807 	and.w	r8, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009d2:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80009d6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80009da:	f04f 0a0f 	mov.w	sl, #15
 80009de:	fa0a fa08 	lsl.w	sl, sl, r8
 80009e2:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80009e6:	690a      	ldr	r2, [r1, #16]
 80009e8:	fa02 f208 	lsl.w	r2, r2, r8
 80009ec:	ea4a 0202 	orr.w	r2, sl, r2
        GPIOx->AFR[position >> 3U] = temp;
 80009f0:	f8c9 2020 	str.w	r2, [r9, #32]
 80009f4:	ea4f 0943 	mov.w	r9, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009f8:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009fa:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009fe:	fa02 f209 	lsl.w	r2, r2, r9
 8000a02:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a04:	f005 0803 	and.w	r8, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a08:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a0c:	fa08 f809 	lsl.w	r8, r8, r9
 8000a10:	ea4a 0808 	orr.w	r8, sl, r8
      GPIOx->MODER = temp;
 8000a14:	f8c0 8000 	str.w	r8, [r0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a18:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a1c:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a1e:	ea02 0a08 	and.w	sl, r2, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a22:	fa07 f809 	lsl.w	r8, r7, r9
 8000a26:	ea4a 0808 	orr.w	r8, sl, r8
        GPIOx->OSPEEDR = temp;
 8000a2a:	f8c0 8008 	str.w	r8, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a32:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a36:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3a:	fa08 f803 	lsl.w	r8, r8, r3
 8000a3e:	ea4a 0808 	orr.w	r8, sl, r8
        GPIOx->OTYPER = temp;
 8000a42:	f8c0 8004 	str.w	r8, [r0, #4]
 8000a46:	e736      	b.n	80008b6 <HAL_GPIO_Init+0x6a>
 8000a48:	f04f 0a01 	mov.w	sl, #1
 8000a4c:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a50:	e78f      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a52:	f04f 0a02 	mov.w	sl, #2
 8000a56:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a5a:	e78a      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a5c:	f04f 0a03 	mov.w	sl, #3
 8000a60:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a64:	e785      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a66:	f04f 0a04 	mov.w	sl, #4
 8000a6a:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a6e:	e780      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a70:	f04f 0a05 	mov.w	sl, #5
 8000a74:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a78:	e77b      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a7a:	f04f 0a06 	mov.w	sl, #6
 8000a7e:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a82:	e776      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a84:	f04f 0a07 	mov.w	sl, #7
 8000a88:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a8c:	e771      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a8e:	f04f 0a08 	mov.w	sl, #8
 8000a92:	fa0a fa08 	lsl.w	sl, sl, r8
 8000a96:	e76c      	b.n	8000972 <HAL_GPIO_Init+0x126>
 8000a98:	40013c00 	andmi	r3, r1, r0, lsl #24
 8000a9c:	40020400 	andmi	r0, r2, r0, lsl #8
 8000aa0:	40020800 	andmi	r0, r2, r0, lsl #16
 8000aa4:	40020c00 	andmi	r0, r2, r0, lsl #24
 8000aa8:	40021000 	andmi	r1, r2, r0
 8000aac:	40021400 	andmi	r1, r2, r0, lsl #8
 8000ab0:	40021800 	andmi	r1, r2, r0, lsl #16
 8000ab4:	40023800 	andmi	r3, r2, r0, lsl #16
 8000ab8:	40020000 	andmi	r0, r2, r0
 8000abc:	40021c00 	andmi	r1, r2, r0, lsl #24
 8000ac0:	40022000 	andmi	r2, r2, r0
 8000ac4:	40022400 	andmi	r2, r2, r0, lsl #8

08000ac8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000acc:	f8df c150 	ldr.w	ip, [pc, #336]	; 8000c20 <HAL_GPIO_DeInit+0x158>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000ad0:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8000c24 <HAL_GPIO_DeInit+0x15c>
 8000ad4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8000c28 <HAL_GPIO_DeInit+0x160>
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000ad8:	468b      	mov	fp, r1

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_DeInit+0x1c>
 8000ade:	3301      	adds	r3, #1
 8000ae0:	2b10      	cmp	r3, #16
 8000ae2:	d071      	beq.n	8000bc8 <HAL_GPIO_DeInit+0x100>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000ae4:	2401      	movs	r4, #1
 8000ae6:	fa04 f103 	lsl.w	r1, r4, r3
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8000aea:	ea01 020b 	and.w	r2, r1, fp

    if(iocurrent == ioposition)
 8000aee:	428a      	cmp	r2, r1
 8000af0:	d1f5      	bne.n	8000ade <HAL_GPIO_DeInit+0x16>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000af2:	f04f 0e03 	mov.w	lr, #3
 8000af6:	fa03 f104 	lsl.w	r1, r3, r4
 8000afa:	6805      	ldr	r5, [r0, #0]
 8000afc:	fa0e f601 	lsl.w	r6, lr, r1
 8000b00:	43f6      	mvns	r6, r6

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000b02:	fa23 f10e 	lsr.w	r1, r3, lr

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b06:	4035      	ands	r5, r6
 8000b08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000b0c:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000b0e:	f003 0707 	and.w	r7, r3, #7
 8000b12:	f8d1 a020 	ldr.w	sl, [r1, #32]
 8000b16:	250f      	movs	r5, #15
 8000b18:	00bf      	lsls	r7, r7, #2
 8000b1a:	fa05 f707 	lsl.w	r7, r5, r7
 8000b1e:	ea2a 0707 	bic.w	r7, sl, r7
 8000b22:	620f      	str	r7, [r1, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b24:	6881      	ldr	r1, [r0, #8]
 8000b26:	4031      	ands	r1, r6
 8000b28:	6081      	str	r1, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2a:	6841      	ldr	r1, [r0, #4]
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	4011      	ands	r1, r2
 8000b30:	6041      	str	r1, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b32:	68c7      	ldr	r7, [r0, #12]
 8000b34:	f023 0103 	bic.w	r1, r3, #3
 8000b38:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000b3c:	403e      	ands	r6, r7
 8000b3e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8000b42:	60c6      	str	r6, [r0, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b44:	ea03 070e 	and.w	r7, r3, lr

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000b48:	688e      	ldr	r6, [r1, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b4a:	00bf      	lsls	r7, r7, #2
 8000b4c:	40bd      	lsls	r5, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000b4e:	4540      	cmp	r0, r8
      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b50:	ea06 0605 	and.w	r6, r6, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000b54:	d03d      	beq.n	8000bd2 <HAL_GPIO_DeInit+0x10a>
 8000b56:	4548      	cmp	r0, r9
 8000b58:	d039      	beq.n	8000bce <HAL_GPIO_DeInit+0x106>
 8000b5a:	4c29      	ldr	r4, [pc, #164]	; (8000c00 <HAL_GPIO_DeInit+0x138>)
 8000b5c:	42a0      	cmp	r0, r4
 8000b5e:	d03a      	beq.n	8000bd6 <HAL_GPIO_DeInit+0x10e>
 8000b60:	4c28      	ldr	r4, [pc, #160]	; (8000c04 <HAL_GPIO_DeInit+0x13c>)
 8000b62:	42a0      	cmp	r0, r4
 8000b64:	d03a      	beq.n	8000bdc <HAL_GPIO_DeInit+0x114>
 8000b66:	4c28      	ldr	r4, [pc, #160]	; (8000c08 <HAL_GPIO_DeInit+0x140>)
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d03a      	beq.n	8000be2 <HAL_GPIO_DeInit+0x11a>
 8000b6c:	4c27      	ldr	r4, [pc, #156]	; (8000c0c <HAL_GPIO_DeInit+0x144>)
 8000b6e:	42a0      	cmp	r0, r4
 8000b70:	d03a      	beq.n	8000be8 <HAL_GPIO_DeInit+0x120>
 8000b72:	4c27      	ldr	r4, [pc, #156]	; (8000c10 <HAL_GPIO_DeInit+0x148>)
 8000b74:	42a0      	cmp	r0, r4
 8000b76:	d03a      	beq.n	8000bee <HAL_GPIO_DeInit+0x126>
 8000b78:	4c26      	ldr	r4, [pc, #152]	; (8000c14 <HAL_GPIO_DeInit+0x14c>)
 8000b7a:	42a0      	cmp	r0, r4
 8000b7c:	d03a      	beq.n	8000bf4 <HAL_GPIO_DeInit+0x12c>
 8000b7e:	4c26      	ldr	r4, [pc, #152]	; (8000c18 <HAL_GPIO_DeInit+0x150>)
 8000b80:	42a0      	cmp	r0, r4
 8000b82:	d03a      	beq.n	8000bfa <HAL_GPIO_DeInit+0x132>
 8000b84:	4c25      	ldr	r4, [pc, #148]	; (8000c1c <HAL_GPIO_DeInit+0x154>)
 8000b86:	42a0      	cmp	r0, r4
 8000b88:	d020      	beq.n	8000bcc <HAL_GPIO_DeInit+0x104>
 8000b8a:	240a      	movs	r4, #10
 8000b8c:	40bc      	lsls	r4, r7
 8000b8e:	42a6      	cmp	r6, r4
 8000b90:	d1a5      	bne.n	8000ade <HAL_GPIO_DeInit+0x16>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000b92:	688c      	ldr	r4, [r1, #8]
 8000b94:	ea24 0505 	bic.w	r5, r4, r5
 8000b98:	608d      	str	r5, [r1, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000b9a:	f8dc 1000 	ldr.w	r1, [ip]
 8000b9e:	4011      	ands	r1, r2
 8000ba0:	f8cc 1000 	str.w	r1, [ip]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000ba4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8000ba8:	4011      	ands	r1, r2
 8000baa:	f8cc 1004 	str.w	r1, [ip, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000bae:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8000bb2:	4011      	ands	r1, r2
 8000bb4:	f8cc 1008 	str.w	r1, [ip, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000bb8:	f8dc 100c 	ldr.w	r1, [ip, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bbc:	3301      	adds	r3, #1
        EXTI->IMR &= ~((uint32_t)iocurrent);
        EXTI->EMR &= ~((uint32_t)iocurrent);
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000bbe:	400a      	ands	r2, r1

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc0:	2b10      	cmp	r3, #16
        EXTI->IMR &= ~((uint32_t)iocurrent);
        EXTI->EMR &= ~((uint32_t)iocurrent);
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000bc2:	f8cc 200c 	str.w	r2, [ip, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc6:	d18d      	bne.n	8000ae4 <HAL_GPIO_DeInit+0x1c>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
  }
}
 8000bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bcc:	2409      	movs	r4, #9
 8000bce:	40bc      	lsls	r4, r7
 8000bd0:	e7dd      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000bd2:	2400      	movs	r4, #0
 8000bd4:	e7db      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000bd6:	2402      	movs	r4, #2
 8000bd8:	40bc      	lsls	r4, r7
 8000bda:	e7d8      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000bdc:	fa0e f407 	lsl.w	r4, lr, r7
 8000be0:	e7d5      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000be2:	2404      	movs	r4, #4
 8000be4:	40bc      	lsls	r4, r7
 8000be6:	e7d2      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000be8:	2405      	movs	r4, #5
 8000bea:	40bc      	lsls	r4, r7
 8000bec:	e7cf      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000bee:	2406      	movs	r4, #6
 8000bf0:	40bc      	lsls	r4, r7
 8000bf2:	e7cc      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000bf4:	2407      	movs	r4, #7
 8000bf6:	40bc      	lsls	r4, r7
 8000bf8:	e7c9      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000bfa:	2408      	movs	r4, #8
 8000bfc:	40bc      	lsls	r4, r7
 8000bfe:	e7c6      	b.n	8000b8e <HAL_GPIO_DeInit+0xc6>
 8000c00:	40020800 	andmi	r0, r2, r0, lsl #16
 8000c04:	40020c00 	andmi	r0, r2, r0, lsl #24
 8000c08:	40021000 	andmi	r1, r2, r0
 8000c0c:	40021400 	andmi	r1, r2, r0, lsl #8
 8000c10:	40021800 	andmi	r1, r2, r0, lsl #16
 8000c14:	40021c00 	andmi	r1, r2, r0, lsl #24
 8000c18:	40022000 	andmi	r2, r2, r0
 8000c1c:	40022400 	andmi	r2, r2, r0, lsl #8
 8000c20:	40013c00 	andmi	r3, r1, r0, lsl #24
 8000c24:	40020000 	andmi	r0, r2, r0
 8000c28:	40020400 	andmi	r0, r2, r0, lsl #8

08000c2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c2c:	6903      	ldr	r3, [r0, #16]
 8000c2e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c30:	bf14      	ite	ne
 8000c32:	2001      	movne	r0, #1
 8000c34:	2000      	moveq	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c38:	b902      	cbnz	r2, 8000c3c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c3a:	0409      	lsls	r1, r1, #16
 8000c3c:	6181      	str	r1, [r0, #24]
 8000c3e:	4770      	bx	lr

08000c40 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000c40:	6943      	ldr	r3, [r0, #20]
 8000c42:	4059      	eors	r1, r3
 8000c44:	6141      	str	r1, [r0, #20]
 8000c46:	4770      	bx	lr

08000c48 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8000c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8000c50:	9b01      	ldr	r3, [sp, #4]
 8000c52:	430b      	orrs	r3, r1
 8000c54:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000c56:	9b01      	ldr	r3, [sp, #4]
 8000c58:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8000c5a:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000c5c:	9b01      	ldr	r3, [sp, #4]
 8000c5e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000c60:	69c3      	ldr	r3, [r0, #28]
 8000c62:	9301      	str	r3, [sp, #4]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8000c64:	69c0      	ldr	r0, [r0, #28]
 8000c66:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 8000c6a:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8000c6e:	b002      	add	sp, #8
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000c7a:	6951      	ldr	r1, [r2, #20]
 8000c7c:	4208      	tst	r0, r1
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c7e:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c80:	d002      	beq.n	8000c88 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c82:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c84:	f7ff fb3c 	bl	8000300 <HAL_GPIO_EXTI_Callback>
 8000c88:	bd08      	pop	{r3, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40013c00 	andmi	r3, r1, r0, lsl #24

08000c90 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	4616      	mov	r6, r2
 8000c98:	1c69      	adds	r1, r5, #1
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	d003      	beq.n	8000ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x16>
 8000c9e:	e008      	b.n	8000cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x22>
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	0552      	lsls	r2, r2, #21
 8000ca4:	d41c      	bmi.n	8000ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x50>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ca6:	6958      	ldr	r0, [r3, #20]
 8000ca8:	43c0      	mvns	r0, r0
 8000caa:	f010 0002 	ands.w	r0, r0, #2
 8000cae:	d1f7      	bne.n	8000ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x10>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8000cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000cb2:	6958      	ldr	r0, [r3, #20]
 8000cb4:	43c0      	mvns	r0, r0
 8000cb6:	f010 0002 	ands.w	r0, r0, #2
 8000cba:	d0f9      	beq.n	8000cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x20>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cbc:	695a      	ldr	r2, [r3, #20]
 8000cbe:	0550      	lsls	r0, r2, #21
 8000cc0:	d40e      	bmi.n	8000ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x50>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000cc2:	b125      	cbz	r5, 8000cce <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x3e>
 8000cc4:	f7ff fbee 	bl	80004a4 <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	4285      	cmp	r5, r0
 8000ccc:	d2e4      	bcs.n	8000c98 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9+0x8>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000cce:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000cd0:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000cd2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000cd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000cd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT;
 8000cdc:	2003      	movs	r0, #3
 8000cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ce0:	681a      	ldr	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ce2:	2100      	movs	r1, #0
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ce4:	f46f 6780 	mvn.w	r7, #1024	; 0x400
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000cec:	2604      	movs	r6, #4
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8000cee:	2520      	movs	r5, #32
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000cf0:	601a      	str	r2, [r3, #0]
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cf4:	615f      	str	r7, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000cf6:	6426      	str	r6, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000cf8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8000cfc:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000cfe:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8000d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d08:	4605      	mov	r5, r0
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d0a:	6800      	ldr	r0, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000d0c:	b082      	sub	sp, #8
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d0e:	6806      	ldr	r6, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000d10:	9c08      	ldr	r4, [sp, #32]
 8000d12:	4688      	mov	r8, r1
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d14:	f446 7180 	orr.w	r1, r6, #256	; 0x100
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000d18:	461f      	mov	r7, r3
 8000d1a:	4616      	mov	r6, r2
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d1c:	6001      	str	r1, [r0, #0]
 8000d1e:	1c62      	adds	r2, r4, #1
 8000d20:	d140      	bne.n	8000da4 <I2C_RequestMemoryWrite+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000d22:	6943      	ldr	r3, [r0, #20]
 8000d24:	07db      	lsls	r3, r3, #31
 8000d26:	d5fc      	bpl.n	8000d22 <I2C_RequestMemoryWrite+0x1e>
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d28:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8000d2c:	6101      	str	r1, [r0, #16]
 8000d2e:	1c63      	adds	r3, r4, #1
 8000d30:	d014      	beq.n	8000d5c <I2C_RequestMemoryWrite+0x58>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d32:	6943      	ldr	r3, [r0, #20]
 8000d34:	079b      	lsls	r3, r3, #30
 8000d36:	d414      	bmi.n	8000d62 <I2C_RequestMemoryWrite+0x5e>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d38:	6943      	ldr	r3, [r0, #20]
 8000d3a:	055a      	lsls	r2, r3, #21
 8000d3c:	d43e      	bmi.n	8000dbc <I2C_RequestMemoryWrite+0xb8>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	f000 8097 	beq.w	8000e72 <I2C_RequestMemoryWrite+0x16e>
 8000d44:	f7ff fbae 	bl	80004a4 <HAL_GetTick>
 8000d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d4a:	1ac0      	subs	r0, r0, r3
 8000d4c:	4284      	cmp	r4, r0
 8000d4e:	f0c0 8090 	bcc.w	8000e72 <I2C_RequestMemoryWrite+0x16e>
 8000d52:	6828      	ldr	r0, [r5, #0]
 8000d54:	e7eb      	b.n	8000d2e <I2C_RequestMemoryWrite+0x2a>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d56:	6943      	ldr	r3, [r0, #20]
 8000d58:	055a      	lsls	r2, r3, #21
 8000d5a:	d42f      	bmi.n	8000dbc <I2C_RequestMemoryWrite+0xb8>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d5c:	6943      	ldr	r3, [r0, #20]
 8000d5e:	0799      	lsls	r1, r3, #30
 8000d60:	d5f9      	bpl.n	8000d56 <I2C_RequestMemoryWrite+0x52>
      return HAL_TIMEOUT;
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d62:	2300      	movs	r3, #0
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	6943      	ldr	r3, [r0, #20]
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	6983      	ldr	r3, [r0, #24]
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	9b01      	ldr	r3, [sp, #4]
 8000d70:	1c62      	adds	r2, r4, #1
 8000d72:	d167      	bne.n	8000e44 <I2C_RequestMemoryWrite+0x140>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d74:	4602      	mov	r2, r0
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d76:	6943      	ldr	r3, [r0, #20]
 8000d78:	061b      	lsls	r3, r3, #24
 8000d7a:	d44a      	bmi.n	8000e12 <I2C_RequestMemoryWrite+0x10e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d7c:	6943      	ldr	r3, [r0, #20]
 8000d7e:	0559      	lsls	r1, r3, #21
 8000d80:	d5f9      	bpl.n	8000d76 <I2C_RequestMemoryWrite+0x72>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8000d82:	2300      	movs	r3, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d84:	f46f 6480 	mvn.w	r4, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000d88:	2104      	movs	r1, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000d8a:	2220      	movs	r2, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d8c:	6144      	str	r4, [r0, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000d8e:	6429      	str	r1, [r5, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d90:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8000d94:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8000d96:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d9a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d030      	beq.n	8000e02 <I2C_RequestMemoryWrite+0xfe>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	e020      	b.n	8000de6 <I2C_RequestMemoryWrite+0xe2>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000da4:	6943      	ldr	r3, [r0, #20]
 8000da6:	07d9      	lsls	r1, r3, #31
 8000da8:	d4be      	bmi.n	8000d28 <I2C_RequestMemoryWrite+0x24>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000daa:	b1fc      	cbz	r4, 8000dec <I2C_RequestMemoryWrite+0xe8>
 8000dac:	f7ff fb7a 	bl	80004a4 <HAL_GetTick>
 8000db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000db2:	1ac0      	subs	r0, r0, r3
 8000db4:	4284      	cmp	r4, r0
 8000db6:	d319      	bcc.n	8000dec <I2C_RequestMemoryWrite+0xe8>
 8000db8:	6828      	ldr	r0, [r5, #0]
 8000dba:	e7b0      	b.n	8000d1e <I2C_RequestMemoryWrite+0x1a>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000dbc:	6803      	ldr	r3, [r0, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8000dbe:	2200      	movs	r2, #0
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dc0:	f46f 6680 	mvn.w	r6, #1024	; 0x400
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dc8:	2404      	movs	r4, #4
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8000dca:	2120      	movs	r1, #32
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000dcc:	6003      	str	r3, [r0, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dce:	6146      	str	r6, [r0, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dd0:	642c      	str	r4, [r5, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000dd2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8000dd6:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000dd8:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ddc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf0c      	ite	eq
 8000de2:	2001      	moveq	r0, #1
 8000de4:	2003      	movne	r0, #3
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
  }

  return HAL_OK;
}
 8000de6:	b002      	add	sp, #8
 8000de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000dec:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000dee:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000df0:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000df2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000df6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
    return HAL_TIMEOUT;
 8000dfa:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8000e00:	e7f1      	b.n	8000de6 <I2C_RequestMemoryWrite+0xe2>
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e02:	682a      	ldr	r2, [r5, #0]
 8000e04:	6813      	ldr	r3, [r2, #0]
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	e7ea      	b.n	8000de6 <I2C_RequestMemoryWrite+0xe2>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e10:	4602      	mov	r2, r0
      return HAL_TIMEOUT;
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e12:	2f01      	cmp	r7, #1
 8000e14:	d029      	beq.n	8000e6a <I2C_RequestMemoryWrite+0x166>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000e16:	0a33      	lsrs	r3, r6, #8
 8000e18:	6103      	str	r3, [r0, #16]
 8000e1a:	1c67      	adds	r7, r4, #1
 8000e1c:	d131      	bne.n	8000e82 <I2C_RequestMemoryWrite+0x17e>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e1e:	6953      	ldr	r3, [r2, #20]
 8000e20:	0618      	lsls	r0, r3, #24
 8000e22:	d41e      	bmi.n	8000e62 <I2C_RequestMemoryWrite+0x15e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e24:	6953      	ldr	r3, [r2, #20]
 8000e26:	0559      	lsls	r1, r3, #21
 8000e28:	d5f9      	bpl.n	8000e1e <I2C_RequestMemoryWrite+0x11a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e2a:	2300      	movs	r3, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e2c:	f46f 6480 	mvn.w	r4, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e30:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000e32:	2120      	movs	r1, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e34:	6154      	str	r4, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e36:	6428      	str	r0, [r5, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e38:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e3c:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8000e3e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 8000e42:	e7aa      	b.n	8000d9a <I2C_RequestMemoryWrite+0x96>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e44:	6943      	ldr	r3, [r0, #20]
 8000e46:	061a      	lsls	r2, r3, #24
 8000e48:	d4e2      	bmi.n	8000e10 <I2C_RequestMemoryWrite+0x10c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e4a:	6943      	ldr	r3, [r0, #20]
 8000e4c:	0559      	lsls	r1, r3, #21
 8000e4e:	d498      	bmi.n	8000d82 <I2C_RequestMemoryWrite+0x7e>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e50:	b334      	cbz	r4, 8000ea0 <I2C_RequestMemoryWrite+0x19c>
 8000e52:	f7ff fb27 	bl	80004a4 <HAL_GetTick>
 8000e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e58:	1ac0      	subs	r0, r0, r3
 8000e5a:	4284      	cmp	r4, r0
 8000e5c:	d320      	bcc.n	8000ea0 <I2C_RequestMemoryWrite+0x19c>
 8000e5e:	6828      	ldr	r0, [r5, #0]
 8000e60:	e786      	b.n	8000d70 <I2C_RequestMemoryWrite+0x6c>
        return HAL_TIMEOUT;
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e62:	b2f6      	uxtb	r6, r6
 8000e64:	6116      	str	r6, [r2, #16]
  }

  return HAL_OK;
 8000e66:	2000      	movs	r0, #0
 8000e68:	e7bd      	b.n	8000de6 <I2C_RequestMemoryWrite+0xe2>

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e6a:	b2f6      	uxtb	r6, r6
 8000e6c:	6106      	str	r6, [r0, #16]

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
  }

  return HAL_OK;
 8000e6e:	2000      	movs	r0, #0
 8000e70:	e7b9      	b.n	8000de6 <I2C_RequestMemoryWrite+0xe2>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e72:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000e74:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e76:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e78:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000e7c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
 8000e80:	e7ac      	b.n	8000ddc <I2C_RequestMemoryWrite+0xd8>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e82:	6953      	ldr	r3, [r2, #20]
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	d4ec      	bmi.n	8000e62 <I2C_RequestMemoryWrite+0x15e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e88:	6953      	ldr	r3, [r2, #20]
 8000e8a:	055b      	lsls	r3, r3, #21
 8000e8c:	d4cd      	bmi.n	8000e2a <I2C_RequestMemoryWrite+0x126>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e8e:	b13c      	cbz	r4, 8000ea0 <I2C_RequestMemoryWrite+0x19c>
 8000e90:	f7ff fb08 	bl	80004a4 <HAL_GetTick>
 8000e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e96:	1ac0      	subs	r0, r0, r3
 8000e98:	4284      	cmp	r4, r0
 8000e9a:	d301      	bcc.n	8000ea0 <I2C_RequestMemoryWrite+0x19c>
 8000e9c:	682a      	ldr	r2, [r5, #0]
 8000e9e:	e7bc      	b.n	8000e1a <I2C_RequestMemoryWrite+0x116>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ea0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ea2:	2200      	movs	r2, #0
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000ea8:	2120      	movs	r1, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000eaa:	642b      	str	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000eac:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 8000eb0:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000eb2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 8000eb6:	e770      	b.n	8000d9a <I2C_RequestMemoryWrite+0x96>

08000eb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000eb8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8000ebc:	4605      	mov	r5, r0
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000ebe:	6800      	ldr	r0, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000ec0:	4689      	mov	r9, r1
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000ec2:	6801      	ldr	r1, [r0, #0]
 8000ec4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000ec8:	6001      	str	r1, [r0, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000eca:	6801      	ldr	r1, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000ecc:	b082      	sub	sp, #8
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000ece:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000ed2:	9c08      	ldr	r4, [sp, #32]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000ed4:	6001      	str	r1, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000ed6:	4616      	mov	r6, r2
 8000ed8:	461f      	mov	r7, r3
 8000eda:	1c63      	adds	r3, r4, #1
 8000edc:	d134      	bne.n	8000f48 <I2C_RequestMemoryRead+0x90>
 8000ede:	4602      	mov	r2, r0
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000ee0:	6943      	ldr	r3, [r0, #20]
 8000ee2:	07d9      	lsls	r1, r3, #31
 8000ee4:	d5fc      	bpl.n	8000ee0 <I2C_RequestMemoryRead+0x28>
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ee6:	fa5f f989 	uxtb.w	r9, r9
 8000eea:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8000eee:	6103      	str	r3, [r0, #16]
 8000ef0:	1c61      	adds	r1, r4, #1
 8000ef2:	d135      	bne.n	8000f60 <I2C_RequestMemoryRead+0xa8>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	e002      	b.n	8000efe <I2C_RequestMemoryRead+0x46>
 8000ef8:	6953      	ldr	r3, [r2, #20]
 8000efa:	0558      	lsls	r0, r3, #21
 8000efc:	d443      	bmi.n	8000f86 <I2C_RequestMemoryRead+0xce>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	079b      	lsls	r3, r3, #30
 8000f02:	d5f9      	bpl.n	8000ef8 <I2C_RequestMemoryRead+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f04:	2300      	movs	r3, #0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	6953      	ldr	r3, [r2, #20]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	6993      	ldr	r3, [r2, #24]
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	1c63      	adds	r3, r4, #1
 8000f14:	d17b      	bne.n	800100e <I2C_RequestMemoryRead+0x156>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f16:	694b      	ldr	r3, [r1, #20]
 8000f18:	0618      	lsls	r0, r3, #24
 8000f1a:	d45d      	bmi.n	8000fd8 <I2C_RequestMemoryRead+0x120>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f1c:	694b      	ldr	r3, [r1, #20]
 8000f1e:	055a      	lsls	r2, r3, #21
 8000f20:	d5f9      	bpl.n	8000f16 <I2C_RequestMemoryRead+0x5e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8000f22:	2300      	movs	r3, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f24:	f46f 6480 	mvn.w	r4, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000f28:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000f2a:	2220      	movs	r2, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f2c:	614c      	str	r4, [r1, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000f2e:	6428      	str	r0, [r5, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f30:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8000f34:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8000f36:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f3a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d042      	beq.n	8000fc6 <I2C_RequestMemoryRead+0x10e>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8000f40:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 8000f42:	b002      	add	sp, #8
 8000f44:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000f48:	6943      	ldr	r3, [r0, #20]
 8000f4a:	07db      	lsls	r3, r3, #31
 8000f4c:	d442      	bmi.n	8000fd4 <I2C_RequestMemoryRead+0x11c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f4e:	b37c      	cbz	r4, 8000fb0 <I2C_RequestMemoryRead+0xf8>
 8000f50:	f7ff faa8 	bl	80004a4 <HAL_GetTick>
 8000f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f56:	1ac0      	subs	r0, r0, r3
 8000f58:	4284      	cmp	r4, r0
 8000f5a:	d329      	bcc.n	8000fb0 <I2C_RequestMemoryRead+0xf8>
 8000f5c:	6828      	ldr	r0, [r5, #0]
 8000f5e:	e7bc      	b.n	8000eda <I2C_RequestMemoryRead+0x22>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000f60:	6953      	ldr	r3, [r2, #20]
 8000f62:	0799      	lsls	r1, r3, #30
 8000f64:	f100 80ba 	bmi.w	80010dc <I2C_RequestMemoryRead+0x224>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f68:	6953      	ldr	r3, [r2, #20]
 8000f6a:	0558      	lsls	r0, r3, #21
 8000f6c:	d40b      	bmi.n	8000f86 <I2C_RequestMemoryRead+0xce>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f6e:	2c00      	cmp	r4, #0
 8000f70:	f000 809d 	beq.w	80010ae <I2C_RequestMemoryRead+0x1f6>
 8000f74:	f7ff fa96 	bl	80004a4 <HAL_GetTick>
 8000f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f7a:	1ac0      	subs	r0, r0, r3
 8000f7c:	4284      	cmp	r4, r0
 8000f7e:	f0c0 8096 	bcc.w	80010ae <I2C_RequestMemoryRead+0x1f6>
 8000f82:	682a      	ldr	r2, [r5, #0]
 8000f84:	e7b4      	b.n	8000ef0 <I2C_RequestMemoryRead+0x38>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f86:	6813      	ldr	r3, [r2, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8000f88:	2100      	movs	r1, #0
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f8a:	f46f 6680 	mvn.w	r6, #1024	; 0x400
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000f92:	2404      	movs	r4, #4
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8000f94:	2020      	movs	r0, #32
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f96:	6013      	str	r3, [r2, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f98:	6156      	str	r6, [r2, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000f9a:	642c      	str	r4, [r5, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f9c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8000fa0:	6329      	str	r1, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000fa2:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fa6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d1c9      	bne.n	8000f40 <I2C_RequestMemoryRead+0x88>
    {
      return HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
 8000fae:	e7c8      	b.n	8000f42 <I2C_RequestMemoryRead+0x8a>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000fb0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000fb2:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000fb4:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000fb6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000fba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
    return HAL_TIMEOUT;
 8000fbe:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8000fc4:	e7bd      	b.n	8000f42 <I2C_RequestMemoryRead+0x8a>
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000fc6:	682a      	ldr	r2, [r5, #0]
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	e7b6      	b.n	8000f42 <I2C_RequestMemoryRead+0x8a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	e786      	b.n	8000ee6 <I2C_RequestMemoryRead+0x2e>
      return HAL_TIMEOUT;
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fd8:	2f01      	cmp	r7, #1
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fda:	460b      	mov	r3, r1
      return HAL_TIMEOUT;
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fdc:	d127      	bne.n	800102e <I2C_RequestMemoryRead+0x176>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000fde:	b2f6      	uxtb	r6, r6
 8000fe0:	610e      	str	r6, [r1, #16]
 8000fe2:	1c61      	adds	r1, r4, #1
 8000fe4:	d12e      	bne.n	8001044 <I2C_RequestMemoryRead+0x18c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fe6:	4619      	mov	r1, r3
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	0612      	lsls	r2, r2, #24
 8000fec:	d43e      	bmi.n	800106c <I2C_RequestMemoryRead+0x1b4>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	0557      	lsls	r7, r2, #21
 8000ff2:	d5f9      	bpl.n	8000fe8 <I2C_RequestMemoryRead+0x130>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8000ff4:	2200      	movs	r2, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ff6:	f46f 6480 	mvn.w	r4, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000ffa:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000ffc:	2120      	movs	r1, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ffe:	615c      	str	r4, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001000:	6428      	str	r0, [r5, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001002:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001006:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001008:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 800100c:	e795      	b.n	8000f3a <I2C_RequestMemoryRead+0x82>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800100e:	694b      	ldr	r3, [r1, #20]
 8001010:	061b      	lsls	r3, r3, #24
 8001012:	d4e1      	bmi.n	8000fd8 <I2C_RequestMemoryRead+0x120>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001014:	694b      	ldr	r3, [r1, #20]
 8001016:	055a      	lsls	r2, r3, #21
 8001018:	d483      	bmi.n	8000f22 <I2C_RequestMemoryRead+0x6a>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800101a:	2c00      	cmp	r4, #0
 800101c:	d060      	beq.n	80010e0 <I2C_RequestMemoryRead+0x228>
 800101e:	f7ff fa41 	bl	80004a4 <HAL_GetTick>
 8001022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001024:	1ac0      	subs	r0, r0, r3
 8001026:	4284      	cmp	r4, r0
 8001028:	d35a      	bcc.n	80010e0 <I2C_RequestMemoryRead+0x228>
 800102a:	6829      	ldr	r1, [r5, #0]
 800102c:	e771      	b.n	8000f12 <I2C_RequestMemoryRead+0x5a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800102e:	0a32      	lsrs	r2, r6, #8
 8001030:	610a      	str	r2, [r1, #16]
 8001032:	1c60      	adds	r0, r4, #1
 8001034:	d143      	bne.n	80010be <I2C_RequestMemoryRead+0x206>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	0611      	lsls	r1, r2, #24
 800103a:	d413      	bmi.n	8001064 <I2C_RequestMemoryRead+0x1ac>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	0552      	lsls	r2, r2, #21
 8001040:	d4d8      	bmi.n	8000ff4 <I2C_RequestMemoryRead+0x13c>
 8001042:	e7f8      	b.n	8001036 <I2C_RequestMemoryRead+0x17e>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	0616      	lsls	r6, r2, #24
 8001048:	d40f      	bmi.n	800106a <I2C_RequestMemoryRead+0x1b2>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	0550      	lsls	r0, r2, #21
 800104e:	d4d1      	bmi.n	8000ff4 <I2C_RequestMemoryRead+0x13c>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001050:	2c00      	cmp	r4, #0
 8001052:	d045      	beq.n	80010e0 <I2C_RequestMemoryRead+0x228>
 8001054:	f7ff fa26 	bl	80004a4 <HAL_GetTick>
 8001058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800105a:	1ac0      	subs	r0, r0, r3
 800105c:	4284      	cmp	r4, r0
 800105e:	d33f      	bcc.n	80010e0 <I2C_RequestMemoryRead+0x228>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	e7be      	b.n	8000fe2 <I2C_RequestMemoryRead+0x12a>
        return HAL_TIMEOUT;
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001064:	b2f6      	uxtb	r6, r6
 8001066:	611e      	str	r6, [r3, #16]
 8001068:	e7bb      	b.n	8000fe2 <I2C_RequestMemoryRead+0x12a>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800106a:	4619      	mov	r1, r3
      return HAL_TIMEOUT;
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	1c60      	adds	r0, r4, #1
 8001076:	d10d      	bne.n	8001094 <I2C_RequestMemoryRead+0x1dc>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001078:	694b      	ldr	r3, [r1, #20]
 800107a:	07da      	lsls	r2, r3, #31
 800107c:	d5fc      	bpl.n	8001078 <I2C_RequestMemoryRead+0x1c0>
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800107e:	f049 0301 	orr.w	r3, r9, #1
 8001082:	610b      	str	r3, [r1, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001086:	4621      	mov	r1, r4
 8001088:	4628      	mov	r0, r5
 800108a:	f7ff fe01 	bl	8000c90 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9>
 800108e:	2800      	cmp	r0, #0
 8001090:	d189      	bne.n	8000fa6 <I2C_RequestMemoryRead+0xee>
 8001092:	e756      	b.n	8000f42 <I2C_RequestMemoryRead+0x8a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001094:	694b      	ldr	r3, [r1, #20]
 8001096:	07db      	lsls	r3, r3, #31
 8001098:	d4f1      	bmi.n	800107e <I2C_RequestMemoryRead+0x1c6>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800109a:	2c00      	cmp	r4, #0
 800109c:	d088      	beq.n	8000fb0 <I2C_RequestMemoryRead+0xf8>
 800109e:	f7ff fa01 	bl	80004a4 <HAL_GetTick>
 80010a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	4284      	cmp	r4, r0
 80010a8:	d382      	bcc.n	8000fb0 <I2C_RequestMemoryRead+0xf8>
 80010aa:	6829      	ldr	r1, [r5, #0]
 80010ac:	e7e2      	b.n	8001074 <I2C_RequestMemoryRead+0x1bc>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80010ae:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80010b0:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80010b2:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010b4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80010b8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
 80010bc:	e773      	b.n	8000fa6 <I2C_RequestMemoryRead+0xee>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	0617      	lsls	r7, r2, #24
 80010c2:	d4cf      	bmi.n	8001064 <I2C_RequestMemoryRead+0x1ac>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	0557      	lsls	r7, r2, #21
 80010c8:	d494      	bmi.n	8000ff4 <I2C_RequestMemoryRead+0x13c>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80010ca:	b14c      	cbz	r4, 80010e0 <I2C_RequestMemoryRead+0x228>
 80010cc:	f7ff f9ea 	bl	80004a4 <HAL_GetTick>
 80010d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010d2:	1ac0      	subs	r0, r0, r3
 80010d4:	4284      	cmp	r4, r0
 80010d6:	d303      	bcc.n	80010e0 <I2C_RequestMemoryRead+0x228>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	e7aa      	b.n	8001032 <I2C_RequestMemoryRead+0x17a>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010dc:	4611      	mov	r1, r2
 80010de:	e711      	b.n	8000f04 <I2C_RequestMemoryRead+0x4c>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80010e2:	2200      	movs	r2, #0
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010e4:	f043 0320 	orr.w	r3, r3, #32
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80010e8:	2120      	movs	r1, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010ea:	642b      	str	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010ec:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 80010f0:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80010f2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 80010f6:	e720      	b.n	8000f3a <I2C_RequestMemoryRead+0x82>

080010f8 <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <HAL_I2C_Init>:
{
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d06c      	beq.n	80011da <HAL_I2C_Init+0xde>
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001102:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001106:	4604      	mov	r4, r0
 8001108:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800110c:	2b00      	cmp	r3, #0
 800110e:	d04f      	beq.n	80011b0 <HAL_I2C_Init+0xb4>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001110:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001112:	4d33      	ldr	r5, [pc, #204]	; (80011e0 <HAL_I2C_Init+0xe4>)
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001114:	2324      	movs	r3, #36	; 0x24
 8001116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111a:	6813      	ldr	r3, [r2, #0]
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001122:	f003 ff09 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_I2C_Init+0xe8>)
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001128:	6861      	ldr	r1, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800112a:	6823      	ldr	r3, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800112c:	fba2 6200 	umull	r6, r2, r2, r0
 8001130:	0c92      	lsrs	r2, r2, #18
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001132:	42a9      	cmp	r1, r5
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001136:	d826      	bhi.n	8001186 <HAL_I2C_Init+0x8a>

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001138:	0049      	lsls	r1, r1, #1
 800113a:	fbb0 f0f1 	udiv	r0, r0, r1
 800113e:	f3c0 010b 	ubfx	r1, r0, #0, #12
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001142:	3201      	adds	r2, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001144:	2903      	cmp	r1, #3
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001146:	621a      	str	r2, [r3, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001148:	bf98      	it	ls
 800114a:	2004      	movls	r0, #4
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800114c:	f104 0110 	add.w	r1, r4, #16
 8001150:	c946      	ldmia	r1, {r1, r2, r6}
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001152:	69e5      	ldr	r5, [r4, #28]
 8001154:	f8d4 e020 	ldr.w	lr, [r4, #32]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001158:	68e7      	ldr	r7, [r4, #12]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800115a:	61d8      	str	r0, [r3, #28]
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800115c:	4339      	orrs	r1, r7
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800115e:	ea4e 0005 	orr.w	r0, lr, r5
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001162:	4332      	orrs	r2, r6
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001164:	6018      	str	r0, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001166:	6099      	str	r1, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001168:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800116a:	6819      	ldr	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116c:	2200      	movs	r2, #0
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800116e:	f041 0101 	orr.w	r1, r1, #1

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8001172:	2520      	movs	r5, #32
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001174:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8001176:	4610      	mov	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001178:	6422      	str	r2, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800117a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800117e:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001180:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e

  return HAL_OK;
 8001184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001186:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800118a:	4f17      	ldr	r7, [pc, #92]	; (80011e8 <HAL_I2C_Init+0xec>)

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800118c:	68a6      	ldr	r6, [r4, #8]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800118e:	fb05 f202 	mul.w	r2, r5, r2
 8001192:	fba7 5202 	umull	r5, r2, r7, r2
 8001196:	0992      	lsrs	r2, r2, #6
 8001198:	3201      	adds	r2, #1
 800119a:	621a      	str	r2, [r3, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800119c:	b96e      	cbnz	r6, 80011ba <HAL_I2C_Init+0xbe>
 800119e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80011a2:	fbb0 f0f1 	udiv	r0, r0, r1
 80011a6:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80011aa:	b99a      	cbnz	r2, 80011d4 <HAL_I2C_Init+0xd8>
 80011ac:	2001      	movs	r0, #1
 80011ae:	e7cd      	b.n	800114c <HAL_I2C_Init+0x50>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011b4:	f7ff ffa0 	bl	80010f8 <HAL_I2C_MspInit>
 80011b8:	e7aa      	b.n	8001110 <HAL_I2C_Init+0x14>
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80011be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80011c2:	fbb0 f0f1 	udiv	r0, r0, r1
 80011c6:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d0ee      	beq.n	80011ac <HAL_I2C_Init+0xb0>
 80011ce:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80011d2:	e7bb      	b.n	800114c <HAL_I2C_Init+0x50>
 80011d4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80011d8:	e7b8      	b.n	800114c <HAL_I2C_Init+0x50>
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	000186a0 	andeq	r8, r1, r0, lsr #13
 80011e4:	431bde83 	tstmi	fp, #2096	; 0x830
 80011e8:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

080011ec <HAL_I2C_MspDeInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <HAL_I2C_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80011f0:	b1b0      	cbz	r0, 8001220 <HAL_I2C_DeInit+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80011f2:	6802      	ldr	r2, [r0, #0]
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f4:	2324      	movs	r3, #36	; 0x24
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80011f6:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	4604      	mov	r4, r0
 8001204:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001206:	f7ff fff1 	bl	80011ec <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode          = HAL_I2C_MODE_NONE;

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800120e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001212:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->Mode          = HAL_I2C_MODE_NONE;

  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8001216:	4618      	mov	r0, r3
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
  hi2c->State         = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
 8001218:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800121a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 800121e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
 8001222:	4770      	bx	lr

08001224 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001228:	4604      	mov	r4, r0
 800122a:	b083      	sub	sp, #12
 800122c:	461e      	mov	r6, r3
 800122e:	4688      	mov	r8, r1
 8001230:	4617      	mov	r7, r2
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001232:	f7ff f937 	bl	80004a4 <HAL_GetTick>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001236:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800123a:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800123c:	4681      	mov	r9, r0

  if(hi2c->State == HAL_I2C_STATE_READY)
 800123e:	d00a      	beq.n	8001256 <HAL_I2C_Master_Transmit+0x32>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001240:	2002      	movs	r0, #2
  }
}
 8001242:	b003      	add	sp, #12
 8001244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001248:	f7ff f92c 	bl	80004a4 <HAL_GetTick>
 800124c:	ebc9 0000 	rsb	r0, r9, r0
 8001250:	2819      	cmp	r0, #25
 8001252:	f200 80ab 	bhi.w	80013ac <HAL_I2C_Master_Transmit+0x188>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	6993      	ldr	r3, [r2, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	f013 0502 	ands.w	r5, r3, #2
 8001260:	d0f2      	beq.n	8001248 <HAL_I2C_Master_Transmit+0x24>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001262:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001266:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001268:	4611      	mov	r1, r2
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800126a:	d0e9      	beq.n	8001240 <HAL_I2C_Master_Transmit+0x1c>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800126c:	6813      	ldr	r3, [r2, #0]
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800126e:	2001      	movs	r0, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001270:	07db      	lsls	r3, r3, #31
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001272:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001276:	d402      	bmi.n	800127e <HAL_I2C_Master_Transmit+0x5a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001278:	6813      	ldr	r3, [r2, #0]
 800127a:	4303      	orrs	r3, r0
 800127c:	6013      	str	r3, [r2, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800127e:	6813      	ldr	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001280:	48a2      	ldr	r0, [pc, #648]	; (800150c <HAL_I2C_Master_Transmit+0x2e8>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001286:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800128a:	f04f 0e10 	mov.w	lr, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800128e:	2500      	movs	r5, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001290:	6013      	str	r3, [r2, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001292:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001296:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129a:	6425      	str	r5, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 800129c:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800129e:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80012a0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012a4:	6267      	str	r7, [r4, #36]	; 0x24
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80012a6:	2b04      	cmp	r3, #4

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 80012a8:	8520      	strh	r0, [r4, #40]	; 0x28
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80012aa:	f000 80bd 	beq.w	8001428 <HAL_I2C_Master_Transmit+0x204>
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	f000 80ba 	beq.w	8001428 <HAL_I2C_Master_Transmit+0x204>
 80012b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80012b8:	f000 80b6 	beq.w	8001428 <HAL_I2C_Master_Transmit+0x204>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80012bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012be:	2b12      	cmp	r3, #18
 80012c0:	f000 80b2 	beq.w	8001428 <HAL_I2C_Master_Transmit+0x204>
 80012c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012c6:	3301      	adds	r3, #1
 80012c8:	f040 809e 	bne.w	8001408 <HAL_I2C_Master_Transmit+0x1e4>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80012cc:	694b      	ldr	r3, [r1, #20]
 80012ce:	07df      	lsls	r7, r3, #31
 80012d0:	d5fc      	bpl.n	80012cc <HAL_I2C_Master_Transmit+0xa8>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012d2:	6923      	ldr	r3, [r4, #16]
 80012d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012d8:	f040 80d3 	bne.w	8001482 <HAL_I2C_Master_Transmit+0x25e>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012dc:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 80012e0:	610b      	str	r3, [r1, #16]
 80012e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012e4:	3301      	adds	r3, #1
 80012e6:	f040 80ec 	bne.w	80014c2 <HAL_I2C_Master_Transmit+0x29e>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012ea:	460b      	mov	r3, r1
 80012ec:	e003      	b.n	80012f6 <HAL_I2C_Master_Transmit+0xd2>
 80012ee:	694a      	ldr	r2, [r1, #20]
 80012f0:	0552      	lsls	r2, r2, #21
 80012f2:	f100 809e 	bmi.w	8001432 <HAL_I2C_Master_Transmit+0x20e>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012f6:	694a      	ldr	r2, [r1, #20]
 80012f8:	0790      	lsls	r0, r2, #30
 80012fa:	d5f8      	bpl.n	80012ee <HAL_I2C_Master_Transmit+0xca>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012fc:	2200      	movs	r2, #0
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	694a      	ldr	r2, [r1, #20]
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	698a      	ldr	r2, [r1, #24]
 8001306:	9201      	str	r2, [sp, #4]
 8001308:	9a01      	ldr	r2, [sp, #4]

    while(hi2c->XferSize > 0U)
 800130a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800130c:	2a00      	cmp	r2, #0
 800130e:	f000 80ab 	beq.w	8001468 <HAL_I2C_Master_Transmit+0x244>
 8001312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001314:	3201      	adds	r2, #1
 8001316:	d153      	bne.n	80013c0 <HAL_I2C_Master_Transmit+0x19c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	0610      	lsls	r0, r2, #24
 800131c:	d414      	bmi.n	8001348 <HAL_I2C_Master_Transmit+0x124>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	0551      	lsls	r1, r2, #21
 8001322:	d5f9      	bpl.n	8001318 <HAL_I2C_Master_Transmit+0xf4>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001324:	2200      	movs	r2, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001326:	f46f 6580 	mvn.w	r5, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800132a:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800132c:	2120      	movs	r1, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800132e:	615d      	str	r5, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001330:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001332:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001336:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001338:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800133c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800133e:	2b04      	cmp	r3, #4
 8001340:	f000 80f0 	beq.w	8001524 <HAL_I2C_Master_Transmit+0x300>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8001344:	2003      	movs	r0, #3
 8001346:	e77c      	b.n	8001242 <HAL_I2C_Master_Transmit+0x1e>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001348:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
      hi2c->XferSize--;
 800134a:	8d25      	ldrh	r5, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800134c:	1c41      	adds	r1, r0, #1
 800134e:	6261      	str	r1, [r4, #36]	; 0x24
 8001350:	7801      	ldrb	r1, [r0, #0]
 8001352:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 8001354:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001356:	3901      	subs	r1, #1
 8001358:	b289      	uxth	r1, r1
 800135a:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 800135c:	6959      	ldr	r1, [r3, #20]
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
      hi2c->XferSize--;
 800135e:	1e6f      	subs	r7, r5, #1
 8001360:	8527      	strh	r7, [r4, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001362:	074f      	lsls	r7, r1, #29
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001364:	461a      	mov	r2, r3
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
      hi2c->XferSize--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001366:	d50a      	bpl.n	800137e <HAL_I2C_Master_Transmit+0x15a>
 8001368:	b14e      	cbz	r6, 800137e <HAL_I2C_Master_Transmit+0x15a>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800136a:	1c81      	adds	r1, r0, #2
 800136c:	6261      	str	r1, [r4, #36]	; 0x24
 800136e:	7841      	ldrb	r1, [r0, #1]
 8001370:	6119      	str	r1, [r3, #16]
        hi2c->XferCount--;
 8001372:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001374:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001376:	3d02      	subs	r5, #2

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferCount--;
 8001378:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800137a:	8525      	strh	r5, [r4, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferCount--;
 800137c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800137e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001380:	3301      	adds	r3, #1
 8001382:	d12f      	bne.n	80013e4 <HAL_I2C_Master_Transmit+0x1c0>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001384:	4613      	mov	r3, r2
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001386:	6951      	ldr	r1, [r2, #20]
 8001388:	0748      	lsls	r0, r1, #29
 800138a:	d4be      	bmi.n	800130a <HAL_I2C_Master_Transmit+0xe6>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800138c:	6951      	ldr	r1, [r2, #20]
 800138e:	0549      	lsls	r1, r1, #21
 8001390:	d5f9      	bpl.n	8001386 <HAL_I2C_Master_Transmit+0x162>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001392:	2300      	movs	r3, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001394:	f46f 6580 	mvn.w	r5, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001398:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800139a:	2120      	movs	r1, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800139c:	6155      	str	r5, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800139e:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 80013a4:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80013a6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80013aa:	e7c7      	b.n	800133c <HAL_I2C_Master_Transmit+0x118>
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80013ac:	2320      	movs	r3, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80013ae:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013b0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80013b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 80013b8:	2002      	movs	r0, #2
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ba:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 80013be:	e740      	b.n	8001242 <HAL_I2C_Master_Transmit+0x1e>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	0612      	lsls	r2, r2, #24
 80013c4:	d4c0      	bmi.n	8001348 <HAL_I2C_Master_Transmit+0x124>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	0555      	lsls	r5, r2, #21
 80013ca:	d4ab      	bmi.n	8001324 <HAL_I2C_Master_Transmit+0x100>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d06b      	beq.n	80014aa <HAL_I2C_Master_Transmit+0x286>
 80013d2:	f7ff f867 	bl	80004a4 <HAL_GetTick>
 80013d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013d8:	ebc9 0000 	rsb	r0, r9, r0
 80013dc:	4283      	cmp	r3, r0
 80013de:	d364      	bcc.n	80014aa <HAL_I2C_Master_Transmit+0x286>
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	e796      	b.n	8001312 <HAL_I2C_Master_Transmit+0xee>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013e4:	6953      	ldr	r3, [r2, #20]
 80013e6:	075b      	lsls	r3, r3, #29
 80013e8:	d47c      	bmi.n	80014e4 <HAL_I2C_Master_Transmit+0x2c0>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013ea:	6953      	ldr	r3, [r2, #20]
 80013ec:	055d      	lsls	r5, r3, #21
 80013ee:	d4d0      	bmi.n	8001392 <HAL_I2C_Master_Transmit+0x16e>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d059      	beq.n	80014aa <HAL_I2C_Master_Transmit+0x286>
 80013f6:	f7ff f855 	bl	80004a4 <HAL_GetTick>
 80013fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013fc:	ebc9 0000 	rsb	r0, r9, r0
 8001400:	4283      	cmp	r3, r0
 8001402:	d352      	bcc.n	80014aa <HAL_I2C_Master_Transmit+0x286>
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	e7ba      	b.n	800137e <HAL_I2C_Master_Transmit+0x15a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001408:	694b      	ldr	r3, [r1, #20]
 800140a:	07dd      	lsls	r5, r3, #31
 800140c:	f53f af61 	bmi.w	80012d2 <HAL_I2C_Master_Transmit+0xae>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001412:	2b00      	cmp	r3, #0
 8001414:	d07c      	beq.n	8001510 <HAL_I2C_Master_Transmit+0x2ec>
 8001416:	f7ff f845 	bl	80004a4 <HAL_GetTick>
 800141a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800141c:	ebc9 0000 	rsb	r0, r9, r0
 8001420:	4283      	cmp	r3, r0
 8001422:	d375      	bcc.n	8001510 <HAL_I2C_Master_Transmit+0x2ec>
 8001424:	6821      	ldr	r1, [r4, #0]
 8001426:	e74d      	b.n	80012c4 <HAL_I2C_Master_Transmit+0xa0>
    hi2c->Instance->CR1 |= I2C_CR1_START;
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e748      	b.n	80012c4 <HAL_I2C_Master_Transmit+0xa0>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001432:	680b      	ldr	r3, [r1, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8001434:	2200      	movs	r2, #0
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001436:	f46f 6680 	mvn.w	r6, #1024	; 0x400
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800143a:	f443 7300 	orr.w	r3, r3, #512	; 0x200

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800143e:	2504      	movs	r5, #4
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001440:	2020      	movs	r0, #32
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001442:	600b      	str	r3, [r1, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001444:	614e      	str	r6, [r1, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001446:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001448:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 800144c:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800144e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001452:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001456:	2b04      	cmp	r3, #4
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->XferSize    = hi2c->XferCount;

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001460:	f47f af70 	bne.w	8001344 <HAL_I2C_Master_Transmit+0x120>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
          return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e6ec      	b.n	8001242 <HAL_I2C_Master_Transmit+0x1e>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001468:	6819      	ldr	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800146a:	2520      	movs	r5, #32
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800146c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001470:	6019      	str	r1, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001472:	4610      	mov	r0, r2
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;

    hi2c->State = HAL_I2C_STATE_READY;
 8001474:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001478:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001480:	e6df      	b.n	8001242 <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001482:	f408 7340 	and.w	r3, r8, #768	; 0x300
 8001486:	11db      	asrs	r3, r3, #7
 8001488:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800148c:	610b      	str	r3, [r1, #16]
 800148e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001490:	3301      	adds	r3, #1
 8001492:	d003      	beq.n	800149c <HAL_I2C_Master_Transmit+0x278>
 8001494:	e028      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x2c4>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001496:	694b      	ldr	r3, [r1, #20]
 8001498:	055b      	lsls	r3, r3, #21
 800149a:	d4ca      	bmi.n	8001432 <HAL_I2C_Master_Transmit+0x20e>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800149c:	694b      	ldr	r3, [r1, #20]
 800149e:	071a      	lsls	r2, r3, #28
 80014a0:	d5f9      	bpl.n	8001496 <HAL_I2C_Master_Transmit+0x272>
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014a2:	fa5f f388 	uxtb.w	r3, r8
 80014a6:	610b      	str	r3, [r1, #16]
 80014a8:	e71b      	b.n	80012e2 <HAL_I2C_Master_Transmit+0xbe>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80014ac:	2200      	movs	r2, #0
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ae:	f043 0320 	orr.w	r3, r3, #32
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80014b2:	2120      	movs	r1, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014b4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014b6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 80014ba:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80014bc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80014c0:	e73c      	b.n	800133c <HAL_I2C_Master_Transmit+0x118>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014c2:	694b      	ldr	r3, [r1, #20]
 80014c4:	079f      	lsls	r7, r3, #30
 80014c6:	d43b      	bmi.n	8001540 <HAL_I2C_Master_Transmit+0x31c>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014c8:	694b      	ldr	r3, [r1, #20]
 80014ca:	055d      	lsls	r5, r3, #21
 80014cc:	d4b1      	bmi.n	8001432 <HAL_I2C_Master_Transmit+0x20e>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014d0:	b373      	cbz	r3, 8001530 <HAL_I2C_Master_Transmit+0x30c>
 80014d2:	f7fe ffe7 	bl	80004a4 <HAL_GetTick>
 80014d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014d8:	ebc9 0000 	rsb	r0, r9, r0
 80014dc:	4283      	cmp	r3, r0
 80014de:	d327      	bcc.n	8001530 <HAL_I2C_Master_Transmit+0x30c>
 80014e0:	6821      	ldr	r1, [r4, #0]
 80014e2:	e6fe      	b.n	80012e2 <HAL_I2C_Master_Transmit+0xbe>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014e4:	4613      	mov	r3, r2
 80014e6:	e710      	b.n	800130a <HAL_I2C_Master_Transmit+0xe6>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014e8:	694b      	ldr	r3, [r1, #20]
 80014ea:	071f      	lsls	r7, r3, #28
 80014ec:	d4d9      	bmi.n	80014a2 <HAL_I2C_Master_Transmit+0x27e>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014ee:	694b      	ldr	r3, [r1, #20]
 80014f0:	0558      	lsls	r0, r3, #21
 80014f2:	d49e      	bmi.n	8001432 <HAL_I2C_Master_Transmit+0x20e>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014f6:	b1db      	cbz	r3, 8001530 <HAL_I2C_Master_Transmit+0x30c>
 80014f8:	f7fe ffd4 	bl	80004a4 <HAL_GetTick>
 80014fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014fe:	ebc9 0000 	rsb	r0, r9, r0
 8001502:	4283      	cmp	r3, r0
 8001504:	d314      	bcc.n	8001530 <HAL_I2C_Master_Transmit+0x30c>
 8001506:	6821      	ldr	r1, [r4, #0]
 8001508:	e7c1      	b.n	800148e <HAL_I2C_Master_Transmit+0x26a>
 800150a:	bf00      	nop
 800150c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001510:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001512:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001514:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001516:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 800151a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800151e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001522:	e797      	b.n	8001454 <HAL_I2C_Master_Transmit+0x230>
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	6813      	ldr	r3, [r2, #0]
 8001528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e799      	b.n	8001464 <HAL_I2C_Master_Transmit+0x240>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001530:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001532:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001534:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001536:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 800153a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800153e:	e788      	b.n	8001452 <HAL_I2C_Master_Transmit+0x22e>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001540:	460b      	mov	r3, r1
 8001542:	e6db      	b.n	80012fc <HAL_I2C_Master_Transmit+0xd8>

08001544 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001548:	4682      	mov	sl, r0
 800154a:	b086      	sub	sp, #24
 800154c:	4698      	mov	r8, r3
 800154e:	4689      	mov	r9, r1
 8001550:	4617      	mov	r7, r2
 8001552:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001554:	f7fe ffa6 	bl	80004a4 <HAL_GetTick>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001558:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 800155c:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800155e:	4606      	mov	r6, r0

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001560:	d009      	beq.n	8001576 <HAL_I2C_Master_Receive+0x32>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001562:	2002      	movs	r0, #2
  }
}
 8001564:	b006      	add	sp, #24
 8001566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800156a:	f7fe ff9b 	bl	80004a4 <HAL_GetTick>
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2819      	cmp	r0, #25
 8001572:	f200 812a 	bhi.w	80017ca <HAL_I2C_Master_Receive+0x286>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001576:	f8da 2000 	ldr.w	r2, [sl]
 800157a:	6993      	ldr	r3, [r2, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	f013 0402 	ands.w	r4, r3, #2
 8001582:	d0f2      	beq.n	800156a <HAL_I2C_Master_Receive+0x26>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001584:	f89a 303c 	ldrb.w	r3, [sl, #60]	; 0x3c
 8001588:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800158a:	4611      	mov	r1, r2
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158c:	d0e9      	beq.n	8001562 <HAL_I2C_Master_Receive+0x1e>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800158e:	6813      	ldr	r3, [r2, #0]
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001590:	2001      	movs	r0, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001592:	07db      	lsls	r3, r3, #31
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001594:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001598:	d402      	bmi.n	80015a0 <HAL_I2C_Master_Receive+0x5c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	4303      	orrs	r3, r0
 800159e:	6013      	str	r3, [r2, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80015a0:	6813      	ldr	r3, [r2, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a2:	48ba      	ldr	r0, [pc, #744]	; (800188c <HAL_I2C_Master_Receive+0x348>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80015a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015a8:	2400      	movs	r4, #0
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80015aa:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015ae:	f04f 0e10 	mov.w	lr, #16
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80015b2:	6013      	str	r3, [r2, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80015b4:	f88a c03d 	strb.w	ip, [sl, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015b8:	f88a e03e 	strb.w	lr, [sl, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015bc:	f8ca 4040 	str.w	r4, [sl, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 80015c0:	f8aa 802a 	strh.w	r8, [sl, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c4:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015c8:	f8ba 402a 	ldrh.w	r4, [sl, #42]	; 0x2a
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015cc:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80015d0:	6813      	ldr	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015d2:	f8ca 7024 	str.w	r7, [sl, #36]	; 0x24
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80015d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015da:	2804      	cmp	r0, #4

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 80015dc:	f8aa 4028 	strh.w	r4, [sl, #40]	; 0x28
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80015e0:	6013      	str	r3, [r2, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015e2:	f000 814d 	beq.w	8001880 <HAL_I2C_Master_Receive+0x33c>
 80015e6:	2801      	cmp	r0, #1
 80015e8:	f000 814a 	beq.w	8001880 <HAL_I2C_Master_Receive+0x33c>
 80015ec:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80015f0:	f000 8146 	beq.w	8001880 <HAL_I2C_Master_Receive+0x33c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80015f4:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80015f8:	2b11      	cmp	r3, #17
 80015fa:	f000 8141 	beq.w	8001880 <HAL_I2C_Master_Receive+0x33c>
 80015fe:	1c6c      	adds	r4, r5, #1
 8001600:	f040 812e 	bne.w	8001860 <HAL_I2C_Master_Receive+0x31c>
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001604:	460a      	mov	r2, r1
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001606:	694b      	ldr	r3, [r1, #20]
 8001608:	07d8      	lsls	r0, r3, #31
 800160a:	d5fc      	bpl.n	8001606 <HAL_I2C_Master_Receive+0xc2>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800160c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001614:	f040 815c 	bne.w	80018d0 <HAL_I2C_Master_Receive+0x38c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001618:	f049 0301 	orr.w	r3, r9, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	610b      	str	r3, [r1, #16]
 8001620:	1c6f      	adds	r7, r5, #1
 8001622:	d004      	beq.n	800162e <HAL_I2C_Master_Receive+0xea>
 8001624:	e19b      	b.n	800195e <HAL_I2C_Master_Receive+0x41a>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001626:	6953      	ldr	r3, [r2, #20]
 8001628:	0558      	lsls	r0, r3, #21
 800162a:	f100 8175 	bmi.w	8001918 <HAL_I2C_Master_Receive+0x3d4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800162e:	6953      	ldr	r3, [r2, #20]
 8001630:	079c      	lsls	r4, r3, #30
 8001632:	d5f8      	bpl.n	8001626 <HAL_I2C_Master_Receive+0xe2>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(hi2c->XferSize == 0U)
 8001634:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	f040 812f 	bne.w	800189c <HAL_I2C_Master_Receive+0x358>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	6951      	ldr	r1, [r2, #20]
 8001642:	9101      	str	r1, [sp, #4]
 8001644:	6991      	ldr	r1, [r2, #24]
 8001646:	9101      	str	r1, [sp, #4]
 8001648:	9901      	ldr	r1, [sp, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800164a:	6811      	ldr	r1, [r2, #0]
 800164c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001650:	6011      	str	r1, [r2, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(hi2c->XferSize > 0U)
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8133 	beq.w	80018be <HAL_I2C_Master_Receive+0x37a>
    {
      if(hi2c->XferSize <= 3U)
 8001658:	2b03      	cmp	r3, #3
 800165a:	f200 8086 	bhi.w	800176a <HAL_I2C_Master_Receive+0x226>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 800165e:	2b01      	cmp	r3, #1
 8001660:	f000 80e7 	beq.w	8001832 <HAL_I2C_Master_Receive+0x2ee>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
          hi2c->XferCount--;
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001664:	2b02      	cmp	r3, #2
 8001666:	d058      	beq.n	800171a <HAL_I2C_Master_Receive+0x1d6>
 8001668:	1c6f      	adds	r7, r5, #1
 800166a:	f8da 2000 	ldr.w	r2, [sl]
 800166e:	d15c      	bne.n	800172a <HAL_I2C_Master_Receive+0x1e6>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001670:	6953      	ldr	r3, [r2, #20]
 8001672:	075c      	lsls	r4, r3, #29
 8001674:	d5fc      	bpl.n	8001670 <HAL_I2C_Master_Receive+0x12c>
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001676:	6813      	ldr	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001678:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800167c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001680:	6013      	str	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001682:	6913      	ldr	r3, [r2, #16]
 8001684:	1c4a      	adds	r2, r1, #1
 8001686:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800168a:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
          hi2c->XferCount--;
 800168c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8001690:	f8ba 2028 	ldrh.w	r2, [sl, #40]	; 0x28
          hi2c->XferCount--;
 8001694:	3b01      	subs	r3, #1
 8001696:	b29b      	uxth	r3, r3
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8001698:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800169a:	f8aa 302a 	strh.w	r3, [sl, #42]	; 0x2a
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 800169e:	f8aa 2028 	strh.w	r2, [sl, #40]	; 0x28
 80016a2:	1c69      	adds	r1, r5, #1
 80016a4:	f8da 2000 	ldr.w	r2, [sl]
 80016a8:	d154      	bne.n	8001754 <HAL_I2C_Master_Receive+0x210>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80016aa:	6953      	ldr	r3, [r2, #20]
 80016ac:	075b      	lsls	r3, r3, #29
 80016ae:	d5fc      	bpl.n	80016aa <HAL_I2C_Master_Receive+0x166>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016b0:	6813      	ldr	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016b2:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016bc:	6913      	ldr	r3, [r2, #16]
 80016be:	1c4a      	adds	r2, r1, #1
 80016c0:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 80016c4:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
          hi2c->XferCount--;
 80016c6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 80016ca:	f8ba 2028 	ldrh.w	r2, [sl, #40]	; 0x28
          hi2c->XferCount--;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016ce:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80016d2:	f8da 1000 	ldr.w	r1, [sl]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
          hi2c->XferCount--;
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f8aa 302a 	strh.w	r3, [sl, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016de:	6909      	ldr	r1, [r1, #16]
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 80016e0:	1e53      	subs	r3, r2, #1
          hi2c->XferCount--;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016e2:	1c42      	adds	r2, r0, #1
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 80016e4:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
          hi2c->XferCount--;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016e8:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 80016ec:	7001      	strb	r1, [r0, #0]

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 80016ee:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
          hi2c->XferCount--;
 80016f2:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 80016f6:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 80016f8:	3a01      	subs	r2, #1

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 80016fa:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80016fc:	b292      	uxth	r2, r2

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 80016fe:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
          hi2c->XferCount--;
 8001702:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
 8001706:	e7a4      	b.n	8001652 <HAL_I2C_Master_Receive+0x10e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001708:	6953      	ldr	r3, [r2, #20]
 800170a:	075b      	lsls	r3, r3, #29
 800170c:	d4d0      	bmi.n	80016b0 <HAL_I2C_Master_Receive+0x16c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800170e:	b1ad      	cbz	r5, 800173c <HAL_I2C_Master_Receive+0x1f8>
 8001710:	f7fe fec8 	bl	80004a4 <HAL_GetTick>
 8001714:	1b80      	subs	r0, r0, r6
 8001716:	4285      	cmp	r5, r0
 8001718:	d310      	bcc.n	800173c <HAL_I2C_Master_Receive+0x1f8>
 800171a:	1c68      	adds	r0, r5, #1
 800171c:	f8da 2000 	ldr.w	r2, [sl]
 8001720:	d1f2      	bne.n	8001708 <HAL_I2C_Master_Receive+0x1c4>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001722:	6953      	ldr	r3, [r2, #20]
 8001724:	0759      	lsls	r1, r3, #29
 8001726:	d5fc      	bpl.n	8001722 <HAL_I2C_Master_Receive+0x1de>
 8001728:	e7c2      	b.n	80016b0 <HAL_I2C_Master_Receive+0x16c>
 800172a:	6953      	ldr	r3, [r2, #20]
 800172c:	0758      	lsls	r0, r3, #29
 800172e:	d4a2      	bmi.n	8001676 <HAL_I2C_Master_Receive+0x132>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001730:	b125      	cbz	r5, 800173c <HAL_I2C_Master_Receive+0x1f8>
 8001732:	f7fe feb7 	bl	80004a4 <HAL_GetTick>
 8001736:	1b80      	subs	r0, r0, r6
 8001738:	4285      	cmp	r5, r0
 800173a:	d295      	bcs.n	8001668 <HAL_I2C_Master_Receive+0x124>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800173c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800173e:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001740:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001744:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001748:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
          hi2c->XferCount--;

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
          {
            return HAL_TIMEOUT;
 800174c:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800174e:	f88a 303e 	strb.w	r3, [sl, #62]	; 0x3e
 8001752:	e707      	b.n	8001564 <HAL_I2C_Master_Receive+0x20>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001754:	6953      	ldr	r3, [r2, #20]
 8001756:	075f      	lsls	r7, r3, #29
 8001758:	d4aa      	bmi.n	80016b0 <HAL_I2C_Master_Receive+0x16c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800175a:	2d00      	cmp	r5, #0
 800175c:	d0ee      	beq.n	800173c <HAL_I2C_Master_Receive+0x1f8>
 800175e:	f7fe fea1 	bl	80004a4 <HAL_GetTick>
 8001762:	1b80      	subs	r0, r0, r6
 8001764:	4285      	cmp	r5, r0
 8001766:	d29c      	bcs.n	80016a2 <HAL_I2C_Master_Receive+0x15e>
 8001768:	e7e8      	b.n	800173c <HAL_I2C_Master_Receive+0x1f8>
 800176a:	b945      	cbnz	r5, 800177e <HAL_I2C_Master_Receive+0x23a>
 800176c:	e038      	b.n	80017e0 <HAL_I2C_Master_Receive+0x29c>
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	06d0      	lsls	r0, r2, #27
 8001772:	d450      	bmi.n	8001816 <HAL_I2C_Master_Receive+0x2d2>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001774:	f7fe fe96 	bl	80004a4 <HAL_GetTick>
 8001778:	1b80      	subs	r0, r0, r6
 800177a:	4285      	cmp	r5, r0
 800177c:	d338      	bcc.n	80017f0 <HAL_I2C_Master_Receive+0x2ac>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800177e:	f8da 3000 	ldr.w	r3, [sl]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	0654      	lsls	r4, r2, #25
 8001786:	d5f2      	bpl.n	800176e <HAL_I2C_Master_Receive+0x22a>
            return HAL_ERROR;
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001788:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	1c51      	adds	r1, r2, #1
 8001790:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
 8001794:	7013      	strb	r3, [r2, #0]
        hi2c->XferSize--;
        hi2c->XferCount--;
 8001796:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800179a:	f8da 1000 	ldr.w	r1, [sl]
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        hi2c->XferSize--;
 800179e:	f8ba 2028 	ldrh.w	r2, [sl, #40]	; 0x28
        hi2c->XferCount--;
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f8aa 302a 	strh.w	r3, [sl, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017aa:	6948      	ldr	r0, [r1, #20]
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        hi2c->XferSize--;
 80017ac:	1e53      	subs	r3, r2, #1
 80017ae:	b29b      	uxth	r3, r3
        hi2c->XferCount--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017b0:	0742      	lsls	r2, r0, #29
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        hi2c->XferSize--;
 80017b2:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
        hi2c->XferCount--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017b6:	f57f af4c 	bpl.w	8001652 <HAL_I2C_Master_Receive+0x10e>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017ba:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80017be:	690a      	ldr	r2, [r1, #16]
 80017c0:	1c59      	adds	r1, r3, #1
 80017c2:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e791      	b.n	80016ee <HAL_I2C_Master_Receive+0x1aa>
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80017ca:	2320      	movs	r3, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80017cc:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d0:	f88a 403c 	strb.w	r4, [sl, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80017d4:	f88a 303d 	strb.w	r3, [sl, #61]	; 0x3d
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 80017d8:	2002      	movs	r0, #2
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017da:	f88a 403e 	strb.w	r4, [sl, #62]	; 0x3e
 80017de:	e6c1      	b.n	8001564 <HAL_I2C_Master_Receive+0x20>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017e0:	f8da 3000 	ldr.w	r3, [sl]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	0651      	lsls	r1, r2, #25
 80017e8:	d4ce      	bmi.n	8001788 <HAL_I2C_Master_Receive+0x244>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	06d5      	lsls	r5, r2, #27
 80017ee:	d412      	bmi.n	8001816 <HAL_I2C_Master_Receive+0x2d2>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f0:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80017f4:	2220      	movs	r2, #32
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f6:	4313      	orrs	r3, r2
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017f8:	2100      	movs	r1, #0
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017fa:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017fe:	f88a 103c 	strb.w	r1, [sl, #60]	; 0x3c

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      hi2c->State= HAL_I2C_STATE_READY;
 8001802:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
        if(hi2c->XferSize == 1U)
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001806:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800180a:	2b20      	cmp	r3, #32
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Master_Receive+0x2ce>
            {
              return HAL_TIMEOUT;
            }
            else
            {
              return HAL_ERROR;
 800180e:	2001      	movs	r0, #1
 8001810:	e6a8      	b.n	8001564 <HAL_I2C_Master_Receive+0x20>
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
            {
              return HAL_TIMEOUT;
 8001812:	2003      	movs	r0, #3
 8001814:	e6a6      	b.n	8001564 <HAL_I2C_Master_Receive+0x20>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001816:	2200      	movs	r2, #0
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001818:	f06f 0010 	mvn.w	r0, #16

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 800181c:	2120      	movs	r1, #32
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800181e:	6158      	str	r0, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001820:	f8ca 2040 	str.w	r2, [sl, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001824:	f88a 203c 	strb.w	r2, [sl, #60]	; 0x3c
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
 8001828:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800182c:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
 8001830:	e7e9      	b.n	8001806 <HAL_I2C_Master_Receive+0x2c2>
 8001832:	b945      	cbnz	r5, 8001846 <HAL_I2C_Master_Receive+0x302>
 8001834:	e02c      	b.n	8001890 <HAL_I2C_Master_Receive+0x34c>
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	06d7      	lsls	r7, r2, #27
 800183a:	d4ec      	bmi.n	8001816 <HAL_I2C_Master_Receive+0x2d2>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800183c:	f7fe fe32 	bl	80004a4 <HAL_GetTick>
 8001840:	1b80      	subs	r0, r0, r6
 8001842:	4285      	cmp	r5, r0
 8001844:	d3d4      	bcc.n	80017f0 <HAL_I2C_Master_Receive+0x2ac>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001846:	f8da 3000 	ldr.w	r3, [sl]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	0652      	lsls	r2, r2, #25
 800184e:	d5f2      	bpl.n	8001836 <HAL_I2C_Master_Receive+0x2f2>
              return HAL_ERROR;
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001850:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	1c51      	adds	r1, r2, #1
 8001858:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
 800185c:	7013      	strb	r3, [r2, #0]
 800185e:	e746      	b.n	80016ee <HAL_I2C_Master_Receive+0x1aa>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001860:	694b      	ldr	r3, [r1, #20]
 8001862:	07db      	lsls	r3, r3, #31
 8001864:	f100 80ba 	bmi.w	80019dc <HAL_I2C_Master_Receive+0x498>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001868:	2d00      	cmp	r5, #0
 800186a:	f000 809d 	beq.w	80019a8 <HAL_I2C_Master_Receive+0x464>
 800186e:	f7fe fe19 	bl	80004a4 <HAL_GetTick>
 8001872:	1b80      	subs	r0, r0, r6
 8001874:	4285      	cmp	r5, r0
 8001876:	f0c0 8097 	bcc.w	80019a8 <HAL_I2C_Master_Receive+0x464>
 800187a:	f8da 1000 	ldr.w	r1, [sl]
 800187e:	e6be      	b.n	80015fe <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->CR1 |= I2C_CR1_START;
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001880:	6813      	ldr	r3, [r2, #0]
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e6b9      	b.n	80015fe <HAL_I2C_Master_Receive+0xba>
 800188a:	bf00      	nop
 800188c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001890:	f8da 3000 	ldr.w	r3, [sl]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	0654      	lsls	r4, r2, #25
 8001898:	d5a7      	bpl.n	80017ea <HAL_I2C_Master_Receive+0x2a6>
 800189a:	e7d9      	b.n	8001850 <HAL_I2C_Master_Receive+0x30c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 1U)
 800189c:	2b01      	cmp	r3, #1
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800189e:	6811      	ldr	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 1U)
 80018a0:	d073      	beq.n	800198a <HAL_I2C_Master_Receive+0x446>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 2U)
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	f000 808b 	beq.w	80019be <HAL_I2C_Master_Receive+0x47a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80018a8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ac:	2000      	movs	r0, #0
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80018ae:	6011      	str	r1, [r2, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b0:	9004      	str	r0, [sp, #16]
 80018b2:	6951      	ldr	r1, [r2, #20]
 80018b4:	9104      	str	r1, [sp, #16]
 80018b6:	6992      	ldr	r2, [r2, #24]
 80018b8:	9204      	str	r2, [sp, #16]
 80018ba:	9a04      	ldr	r2, [sp, #16]
 80018bc:	e6c9      	b.n	8001652 <HAL_I2C_Master_Receive+0x10e>
          hi2c->XferCount--;
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018be:	2220      	movs	r2, #32
 80018c0:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c

    return HAL_OK;
 80018c8:	4618      	mov	r0, r3
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ca:	f88a 303e 	strb.w	r3, [sl, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 80018ce:	e649      	b.n	8001564 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018d0:	f409 7440 	and.w	r4, r9, #768	; 0x300
 80018d4:	09e4      	lsrs	r4, r4, #7
 80018d6:	f044 03f0 	orr.w	r3, r4, #240	; 0xf0
 80018da:	610b      	str	r3, [r1, #16]
 80018dc:	1c68      	adds	r0, r5, #1
 80018de:	d003      	beq.n	80018e8 <HAL_I2C_Master_Receive+0x3a4>
 80018e0:	e02d      	b.n	800193e <HAL_I2C_Master_Receive+0x3fa>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018e2:	6953      	ldr	r3, [r2, #20]
 80018e4:	055b      	lsls	r3, r3, #21
 80018e6:	d417      	bmi.n	8001918 <HAL_I2C_Master_Receive+0x3d4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018e8:	6953      	ldr	r3, [r2, #20]
 80018ea:	0719      	lsls	r1, r3, #28
 80018ec:	d5f9      	bpl.n	80018e2 <HAL_I2C_Master_Receive+0x39e>
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018ee:	fa5f f389 	uxtb.w	r3, r9
 80018f2:	6113      	str	r3, [r2, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018f4:	4650      	mov	r0, sl
 80018f6:	4629      	mov	r1, r5
 80018f8:	4632      	mov	r2, r6
 80018fa:	f7ff f9c9 	bl	8000c90 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.9>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d06e      	beq.n	80019e0 <HAL_I2C_Master_Receive+0x49c>
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001902:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001906:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800190a:	2b04      	cmp	r3, #4
 800190c:	d038      	beq.n	8001980 <HAL_I2C_Master_Receive+0x43c>
        return HAL_ERROR;
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800190e:	2300      	movs	r3, #0
 8001910:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001914:	2003      	movs	r0, #3
 8001916:	e625      	b.n	8001564 <HAL_I2C_Master_Receive+0x20>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001918:	6813      	ldr	r3, [r2, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 800191a:	2100      	movs	r1, #0
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800191c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001920:	f443 7300 	orr.w	r3, r3, #512	; 0x200

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001924:	2404      	movs	r4, #4
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001926:	2020      	movs	r0, #32
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001928:	6013      	str	r3, [r2, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800192a:	6155      	str	r5, [r2, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800192c:	f8ca 4040 	str.w	r4, [sl, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001930:	f88a 103c 	strb.w	r1, [sl, #60]	; 0x3c

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8001934:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001938:	f88a 003d 	strb.w	r0, [sl, #61]	; 0x3d
 800193c:	e7e1      	b.n	8001902 <HAL_I2C_Master_Receive+0x3be>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800193e:	6953      	ldr	r3, [r2, #20]
 8001940:	071f      	lsls	r7, r3, #28
 8001942:	d4d4      	bmi.n	80018ee <HAL_I2C_Master_Receive+0x3aa>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001944:	6953      	ldr	r3, [r2, #20]
 8001946:	055f      	lsls	r7, r3, #21
 8001948:	d4e6      	bmi.n	8001918 <HAL_I2C_Master_Receive+0x3d4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800194a:	2d00      	cmp	r5, #0
 800194c:	d06b      	beq.n	8001a26 <HAL_I2C_Master_Receive+0x4e2>
 800194e:	f7fe fda9 	bl	80004a4 <HAL_GetTick>
 8001952:	1b80      	subs	r0, r0, r6
 8001954:	4285      	cmp	r5, r0
 8001956:	d366      	bcc.n	8001a26 <HAL_I2C_Master_Receive+0x4e2>
 8001958:	f8da 2000 	ldr.w	r2, [sl]
 800195c:	e7be      	b.n	80018dc <HAL_I2C_Master_Receive+0x398>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800195e:	6953      	ldr	r3, [r2, #20]
 8001960:	0799      	lsls	r1, r3, #30
 8001962:	f53f ae67 	bmi.w	8001634 <HAL_I2C_Master_Receive+0xf0>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001966:	6953      	ldr	r3, [r2, #20]
 8001968:	055b      	lsls	r3, r3, #21
 800196a:	d4d5      	bmi.n	8001918 <HAL_I2C_Master_Receive+0x3d4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800196c:	2d00      	cmp	r5, #0
 800196e:	d05a      	beq.n	8001a26 <HAL_I2C_Master_Receive+0x4e2>
 8001970:	f7fe fd98 	bl	80004a4 <HAL_GetTick>
 8001974:	1b80      	subs	r0, r0, r6
 8001976:	4285      	cmp	r5, r0
 8001978:	d355      	bcc.n	8001a26 <HAL_I2C_Master_Receive+0x4e2>
 800197a:	f8da 2000 	ldr.w	r2, [sl]
 800197e:	e64f      	b.n	8001620 <HAL_I2C_Master_Receive+0xdc>
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001980:	2300      	movs	r3, #0
 8001982:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c
        return HAL_ERROR;
 8001986:	2001      	movs	r0, #1
 8001988:	e5ec      	b.n	8001564 <HAL_I2C_Master_Receive+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 1U)
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800198a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	2000      	movs	r0, #0
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 1U)
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001990:	6011      	str	r1, [r2, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001992:	9002      	str	r0, [sp, #8]
 8001994:	6951      	ldr	r1, [r2, #20]
 8001996:	9102      	str	r1, [sp, #8]
 8001998:	6991      	ldr	r1, [r2, #24]
 800199a:	9102      	str	r1, [sp, #8]
 800199c:	9902      	ldr	r1, [sp, #8]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800199e:	6811      	ldr	r1, [r2, #0]
 80019a0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	e654      	b.n	8001652 <HAL_I2C_Master_Receive+0x10e>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80019a8:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80019aa:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80019ac:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b0:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80019b4:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	f88a 303e 	strb.w	r3, [sl, #62]	; 0x3e
 80019bc:	e7a3      	b.n	8001906 <HAL_I2C_Master_Receive+0x3c2>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 2U)
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80019c2:	6011      	str	r1, [r2, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80019c4:	6811      	ldr	r1, [r2, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c6:	2000      	movs	r0, #0
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80019c8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80019cc:	6011      	str	r1, [r2, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ce:	9003      	str	r0, [sp, #12]
 80019d0:	6951      	ldr	r1, [r2, #20]
 80019d2:	9103      	str	r1, [sp, #12]
 80019d4:	6992      	ldr	r2, [r2, #24]
 80019d6:	9203      	str	r2, [sp, #12]
 80019d8:	9a03      	ldr	r2, [sp, #12]
 80019da:	e63a      	b.n	8001652 <HAL_I2C_Master_Receive+0x10e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80019dc:	460a      	mov	r2, r1
 80019de:	e615      	b.n	800160c <HAL_I2C_Master_Receive+0xc8>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e0:	f8da 3000 	ldr.w	r3, [sl]
 80019e4:	9005      	str	r0, [sp, #20]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	9205      	str	r2, [sp, #20]
 80019ea:	699a      	ldr	r2, [r3, #24]
 80019ec:	9205      	str	r2, [sp, #20]
 80019ee:	9a05      	ldr	r2, [sp, #20]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	1c68      	adds	r0, r5, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_I2C_Master_Receive+0x4c8>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	07d1      	lsls	r1, r2, #31
 8001a00:	d5fc      	bpl.n	80019fc <HAL_I2C_Master_Receive+0x4b8>
    {
      return HAL_TIMEOUT;
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a02:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001a06:	461a      	mov	r2, r3
    {
      return HAL_TIMEOUT;
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a08:	611c      	str	r4, [r3, #16]
 8001a0a:	e609      	b.n	8001620 <HAL_I2C_Master_Receive+0xdc>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	07d2      	lsls	r2, r2, #31
 8001a10:	d4f7      	bmi.n	8001a02 <HAL_I2C_Master_Receive+0x4be>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	d0c8      	beq.n	80019a8 <HAL_I2C_Master_Receive+0x464>
 8001a16:	f7fe fd45 	bl	80004a4 <HAL_GetTick>
 8001a1a:	1b80      	subs	r0, r0, r6
 8001a1c:	4285      	cmp	r5, r0
 8001a1e:	d3c3      	bcc.n	80019a8 <HAL_I2C_Master_Receive+0x464>
 8001a20:	f8da 3000 	ldr.w	r3, [sl]
 8001a24:	e7e8      	b.n	80019f8 <HAL_I2C_Master_Receive+0x4b4>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001a28:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a2a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a2e:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001a32:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
 8001a36:	e764      	b.n	8001902 <HAL_I2C_Master_Receive+0x3be>

08001a38 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	b082      	sub	sp, #8
 8001a40:	461d      	mov	r5, r3
 8001a42:	460e      	mov	r6, r1
 8001a44:	4617      	mov	r7, r2
  uint32_t tickstart = 0x00U;
  
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a46:	f7fe fd2d 	bl	80004a4 <HAL_GetTick>
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a4a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	d003      	beq.n	8001a5a <HAL_I2C_Slave_Transmit+0x22>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a52:	2002      	movs	r0, #2
  }
}
 8001a54:	b002      	add	sp, #8
 8001a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 8001a5a:	2e00      	cmp	r6, #0
 8001a5c:	d059      	beq.n	8001b12 <HAL_I2C_Slave_Transmit+0xda>
 8001a5e:	2f00      	cmp	r7, #0
 8001a60:	d057      	beq.n	8001b12 <HAL_I2C_Slave_Transmit+0xda>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a62:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d0f3      	beq.n	8001a52 <HAL_I2C_Slave_Transmit+0x1a>
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a6a:	6821      	ldr	r1, [r4, #0]
 8001a6c:	680b      	ldr	r3, [r1, #0]
 8001a6e:	4680      	mov	r8, r0
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a70:	2201      	movs	r2, #1
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a72:	07d8      	lsls	r0, r3, #31
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a74:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a78:	d402      	bmi.n	8001a80 <HAL_I2C_Slave_Transmit+0x48>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a7a:	680b      	ldr	r3, [r1, #0]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a80:	680b      	ldr	r3, [r1, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a82:	4a6b      	ldr	r2, [pc, #428]	; (8001c30 <HAL_I2C_Slave_Transmit+0x1f8>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a88:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001a8c:	f04f 0e20 	mov.w	lr, #32
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a90:	2000      	movs	r0, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a92:	600b      	str	r3, [r1, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a94:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001a98:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a9c:	6420      	str	r0, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001a9e:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aa0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001aa2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001aa4:	680b      	ldr	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aa6:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8001aac:	8522      	strh	r2, [r4, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	1c6b      	adds	r3, r5, #1
 8001ab2:	f040 80a2 	bne.w	8001bfa <HAL_I2C_Slave_Transmit+0x1c2>
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab6:	460b      	mov	r3, r1
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001ab8:	694a      	ldr	r2, [r1, #20]
 8001aba:	0797      	lsls	r7, r2, #30
 8001abc:	d5fc      	bpl.n	8001ab8 <HAL_I2C_Slave_Transmit+0x80>
    {
      return HAL_TIMEOUT;
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	9200      	str	r2, [sp, #0]
 8001ac2:	694a      	ldr	r2, [r1, #20]
 8001ac4:	9200      	str	r2, [sp, #0]

    /* If 10bit addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac6:	6922      	ldr	r2, [r4, #16]
    {
      return HAL_TIMEOUT;
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac8:	6988      	ldr	r0, [r1, #24]
 8001aca:	9000      	str	r0, [sp, #0]

    /* If 10bit addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001acc:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
    {
      return HAL_TIMEOUT;
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad0:	9800      	ldr	r0, [sp, #0]

    /* If 10bit addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ad2:	d04d      	beq.n	8001b70 <HAL_I2C_Slave_Transmit+0x138>
 8001ad4:	8d22      	ldrh	r2, [r4, #40]	; 0x28

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(hi2c->XferSize > 0U)
 8001ad6:	b352      	cbz	r2, 8001b2e <HAL_I2C_Slave_Transmit+0xf6>
 8001ad8:	1c68      	adds	r0, r5, #1
 8001ada:	d173      	bne.n	8001bc4 <HAL_I2C_Slave_Transmit+0x18c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	0611      	lsls	r1, r2, #24
 8001ae0:	d454      	bmi.n	8001b8c <HAL_I2C_Slave_Transmit+0x154>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	0552      	lsls	r2, r2, #21
 8001ae6:	d5f9      	bpl.n	8001adc <HAL_I2C_Slave_Transmit+0xa4>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ae8:	2200      	movs	r2, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aea:	f46f 6580 	mvn.w	r5, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001aee:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001af0:	2120      	movs	r1, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af2:	615d      	str	r5, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001af4:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001afa:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001afc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b06:	601a      	str	r2, [r3, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Slave_Transmit+0xda>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8001b0e:	2003      	movs	r0, #3
 8001b10:	e7a0      	b.n	8001a54 <HAL_I2C_Slave_Transmit+0x1c>
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
 8001b14:	e79e      	b.n	8001a54 <HAL_I2C_Slave_Transmit+0x1c>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	0552      	lsls	r2, r2, #21
 8001b1a:	d40d      	bmi.n	8001b38 <HAL_I2C_Slave_Transmit+0x100>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b1c:	2d00      	cmp	r5, #0
 8001b1e:	d078      	beq.n	8001c12 <HAL_I2C_Slave_Transmit+0x1da>
 8001b20:	f7fe fcc0 	bl	80004a4 <HAL_GetTick>
 8001b24:	ebc8 0000 	rsb	r0, r8, r0
 8001b28:	4285      	cmp	r5, r0
 8001b2a:	d372      	bcc.n	8001c12 <HAL_I2C_Slave_Transmit+0x1da>
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	1c68      	adds	r0, r5, #1
 8001b30:	d1f1      	bne.n	8001b16 <HAL_I2C_Slave_Transmit+0xde>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	0551      	lsls	r1, r2, #21
 8001b36:	d5fc      	bpl.n	8001b32 <HAL_I2C_Slave_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b3c:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b3e:	6819      	ldr	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b40:	2520      	movs	r5, #32

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b42:	4011      	ands	r1, r2

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	2200      	movs	r2, #0

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b46:	6019      	str	r1, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001b48:	4610      	mov	r0, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001b56:	e77d      	b.n	8001a54 <HAL_I2C_Slave_Transmit+0x1c>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001b58:	694b      	ldr	r3, [r1, #20]
 8001b5a:	079f      	lsls	r7, r3, #30
 8001b5c:	d466      	bmi.n	8001c2c <HAL_I2C_Slave_Transmit+0x1f4>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d057      	beq.n	8001c12 <HAL_I2C_Slave_Transmit+0x1da>
 8001b62:	f7fe fc9f 	bl	80004a4 <HAL_GetTick>
 8001b66:	ebc8 0000 	rsb	r0, r8, r0
 8001b6a:	4285      	cmp	r5, r0
 8001b6c:	d351      	bcc.n	8001c12 <HAL_I2C_Slave_Transmit+0x1da>
 8001b6e:	6821      	ldr	r1, [r4, #0]
 8001b70:	1c68      	adds	r0, r5, #1
 8001b72:	d1f1      	bne.n	8001b58 <HAL_I2C_Slave_Transmit+0x120>

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* If 10bit addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b74:	460b      	mov	r3, r1
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001b76:	694a      	ldr	r2, [r1, #20]
 8001b78:	0792      	lsls	r2, r2, #30
 8001b7a:	d5fc      	bpl.n	8001b76 <HAL_I2C_Slave_Transmit+0x13e>
      {
        return HAL_TIMEOUT;
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	9201      	str	r2, [sp, #4]
 8001b80:	694a      	ldr	r2, [r1, #20]
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	698a      	ldr	r2, [r1, #24]
 8001b86:	9201      	str	r2, [sp, #4]
 8001b88:	9a01      	ldr	r2, [sp, #4]
 8001b8a:	e7a3      	b.n	8001ad4 <HAL_I2C_Slave_Transmit+0x9c>
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
      hi2c->XferSize--;
 8001b8e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b90:	1c4a      	adds	r2, r1, #1
 8001b92:	6262      	str	r2, [r4, #36]	; 0x24
 8001b94:	780a      	ldrb	r2, [r1, #0]
 8001b96:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001b98:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001ba0:	695e      	ldr	r6, [r3, #20]
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
      hi2c->XferSize--;
 8001ba2:	1e42      	subs	r2, r0, #1
 8001ba4:	b292      	uxth	r2, r2

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001ba6:	0776      	lsls	r6, r6, #29
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
      hi2c->XferSize--;
 8001ba8:	8522      	strh	r2, [r4, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001baa:	d594      	bpl.n	8001ad6 <HAL_I2C_Slave_Transmit+0x9e>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001bac:	1c8a      	adds	r2, r1, #2
 8001bae:	6262      	str	r2, [r4, #36]	; 0x24
 8001bb0:	784a      	ldrb	r2, [r1, #1]
 8001bb2:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001bb4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001bb6:	1e82      	subs	r2, r0, #2

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferCount--;
 8001bb8:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8001bba:	b292      	uxth	r2, r2

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferCount--;
 8001bbc:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8001bbe:	8522      	strh	r2, [r4, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferCount--;
 8001bc0:	8561      	strh	r1, [r4, #42]	; 0x2a
 8001bc2:	e788      	b.n	8001ad6 <HAL_I2C_Slave_Transmit+0x9e>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	0617      	lsls	r7, r2, #24
 8001bc8:	d4e0      	bmi.n	8001b8c <HAL_I2C_Slave_Transmit+0x154>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	0556      	lsls	r6, r2, #21
 8001bce:	d48b      	bmi.n	8001ae8 <HAL_I2C_Slave_Transmit+0xb0>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bd0:	b13d      	cbz	r5, 8001be2 <HAL_I2C_Slave_Transmit+0x1aa>
 8001bd2:	f7fe fc67 	bl	80004a4 <HAL_GetTick>
 8001bd6:	ebc8 0000 	rsb	r0, r8, r0
 8001bda:	4285      	cmp	r5, r0
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	f4bf af7b 	bcs.w	8001ad8 <HAL_I2C_Slave_Transmit+0xa0>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001be4:	2100      	movs	r1, #0
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	f042 0220 	orr.w	r2, r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001bea:	2020      	movs	r0, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	6422      	str	r2, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bee:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bf2:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001bf4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8001bf8:	e782      	b.n	8001b00 <HAL_I2C_Slave_Transmit+0xc8>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001bfa:	694b      	ldr	r3, [r1, #20]
 8001bfc:	079e      	lsls	r6, r3, #30
 8001bfe:	d413      	bmi.n	8001c28 <HAL_I2C_Slave_Transmit+0x1f0>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c00:	b13d      	cbz	r5, 8001c12 <HAL_I2C_Slave_Transmit+0x1da>
 8001c02:	f7fe fc4f 	bl	80004a4 <HAL_GetTick>
 8001c06:	ebc8 0000 	rsb	r0, r8, r0
 8001c0a:	4285      	cmp	r5, r0
 8001c0c:	d301      	bcc.n	8001c12 <HAL_I2C_Slave_Transmit+0x1da>
 8001c0e:	6821      	ldr	r1, [r4, #0]
 8001c10:	e74e      	b.n	8001ab0 <HAL_I2C_Slave_Transmit+0x78>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c12:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001c14:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c16:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001c1c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    }

    /* Wait until AF flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
 8001c20:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001c26:	e715      	b.n	8001a54 <HAL_I2C_Slave_Transmit+0x1c>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001c28:	460b      	mov	r3, r1
 8001c2a:	e748      	b.n	8001abe <HAL_I2C_Slave_Transmit+0x86>
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e7a5      	b.n	8001b7c <HAL_I2C_Slave_Transmit+0x144>
 8001c30:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08001c34 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c38:	4604      	mov	r4, r0
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	460f      	mov	r7, r1
 8001c40:	4690      	mov	r8, r2
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c42:	f7fe fc2f 	bl	80004a4 <HAL_GetTick>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d003      	beq.n	8001c56 <HAL_I2C_Slave_Receive+0x22>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001c4e:	2002      	movs	r0, #2
  }
}
 8001c50:	b003      	add	sp, #12
 8001c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 8001c56:	2f00      	cmp	r7, #0
 8001c58:	d06d      	beq.n	8001d36 <HAL_I2C_Slave_Receive+0x102>
 8001c5a:	f1b8 0f00 	cmp.w	r8, #0
 8001c5e:	d06a      	beq.n	8001d36 <HAL_I2C_Slave_Receive+0x102>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c60:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d0f2      	beq.n	8001c4e <HAL_I2C_Slave_Receive+0x1a>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	6811      	ldr	r1, [r2, #0]
 8001c6c:	4606      	mov	r6, r0
 8001c6e:	07c9      	lsls	r1, r1, #31
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c70:	f04f 0001 	mov.w	r0, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c74:	4613      	mov	r3, r2
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c76:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c7a:	d402      	bmi.n	8001c82 <HAL_I2C_Slave_Receive+0x4e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c7c:	6811      	ldr	r1, [r2, #0]
 8001c7e:	4301      	orrs	r1, r0
 8001c80:	6011      	str	r1, [r2, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c82:	6811      	ldr	r1, [r2, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c84:	4875      	ldr	r0, [pc, #468]	; (8001e5c <HAL_I2C_Slave_Receive+0x228>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c86:	f421 6100 	bic.w	r1, r1, #2048	; 0x800

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c8a:	f04f 0922 	mov.w	r9, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001c8e:	f04f 0c20 	mov.w	ip, #32
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c92:	f04f 0e00 	mov.w	lr, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c96:	6011      	str	r1, [r2, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c98:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001c9c:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ca0:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001ca4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca8:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001caa:	8d60      	ldrh	r0, [r4, #42]	; 0x2a

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cac:	6811      	ldr	r1, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cae:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cb0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8001cb4:	8520      	strh	r0, [r4, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cb6:	6011      	str	r1, [r2, #0]
 8001cb8:	1c68      	adds	r0, r5, #1
 8001cba:	d159      	bne.n	8001d70 <HAL_I2C_Slave_Receive+0x13c>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001cbc:	6951      	ldr	r1, [r2, #20]
 8001cbe:	0789      	lsls	r1, r1, #30
 8001cc0:	d5fc      	bpl.n	8001cbc <HAL_I2C_Slave_Receive+0x88>
    {
      return HAL_TIMEOUT;
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	9100      	str	r1, [sp, #0]
 8001cc6:	6951      	ldr	r1, [r2, #20]
 8001cc8:	9100      	str	r1, [sp, #0]
 8001cca:	6991      	ldr	r1, [r2, #24]
 8001ccc:	9100      	str	r1, [sp, #0]
 8001cce:	9900      	ldr	r1, [sp, #0]
 8001cd0:	8d21      	ldrh	r1, [r4, #40]	; 0x28

    while(hi2c->XferSize > 0U)
 8001cd2:	2900      	cmp	r1, #0
 8001cd4:	d068      	beq.n	8001da8 <HAL_I2C_Slave_Receive+0x174>
 8001cd6:	b94d      	cbnz	r5, 8001cec <HAL_I2C_Slave_Receive+0xb8>
 8001cd8:	e02f      	b.n	8001d3a <HAL_I2C_Slave_Receive+0x106>
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	06d0      	lsls	r0, r2, #27
 8001cde:	d454      	bmi.n	8001d8a <HAL_I2C_Slave_Receive+0x156>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ce0:	f7fe fbe0 	bl	80004a4 <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	4285      	cmp	r5, r0
 8001ce8:	d35c      	bcc.n	8001da4 <HAL_I2C_Slave_Receive+0x170>
 8001cea:	6823      	ldr	r3, [r4, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	0657      	lsls	r7, r2, #25
 8001cf0:	d5f3      	bpl.n	8001cda <HAL_I2C_Slave_Receive+0xa6>
          return HAL_ERROR;
        }
      }

      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	1c51      	adds	r1, r2, #1
 8001cf8:	6261      	str	r1, [r4, #36]	; 0x24
 8001cfa:	7013      	strb	r3, [r2, #0]
      hi2c->XferSize--;
      hi2c->XferCount--;
 8001cfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001cfe:	6823      	ldr	r3, [r4, #0]
        }
      }

      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferSize--;
 8001d00:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001d02:	3a01      	subs	r2, #1
 8001d04:	b292      	uxth	r2, r2
 8001d06:	8562      	strh	r2, [r4, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001d08:	6958      	ldr	r0, [r3, #20]
        }
      }

      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferSize--;
 8001d0a:	3901      	subs	r1, #1
 8001d0c:	b289      	uxth	r1, r1
      hi2c->XferCount--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001d0e:	0740      	lsls	r0, r0, #29
        }
      }

      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferSize--;
 8001d10:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001d12:	461a      	mov	r2, r3
 8001d14:	d5dd      	bpl.n	8001cd2 <HAL_I2C_Slave_Receive+0x9e>
      {
        /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	1c51      	adds	r1, r2, #1
 8001d1c:	6261      	str	r1, [r4, #36]	; 0x24
 8001d1e:	7013      	strb	r3, [r2, #0]
      hi2c->XferSize--;
 8001d20:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001d22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d24:	6823      	ldr	r3, [r4, #0]

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferSize--;
 8001d26:	3901      	subs	r1, #1
      hi2c->XferCount--;
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	b292      	uxth	r2, r2

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferSize--;
 8001d2c:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8001d2e:	8562      	strh	r2, [r4, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
      {
        /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferSize--;
 8001d30:	8521      	strh	r1, [r4, #40]	; 0x28
 8001d32:	461a      	mov	r2, r3
 8001d34:	e7cd      	b.n	8001cd2 <HAL_I2C_Slave_Receive+0x9e>

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 8001d36:	2001      	movs	r0, #1
 8001d38:	e78a      	b.n	8001c50 <HAL_I2C_Slave_Receive+0x1c>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d3a:	6951      	ldr	r1, [r2, #20]
 8001d3c:	0649      	lsls	r1, r1, #25
 8001d3e:	d4d8      	bmi.n	8001cf2 <HAL_I2C_Slave_Receive+0xbe>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d40:	6951      	ldr	r1, [r2, #20]
 8001d42:	06c8      	lsls	r0, r1, #27
 8001d44:	d421      	bmi.n	8001d8a <HAL_I2C_Slave_Receive+0x156>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001d48:	2120      	movs	r1, #32
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d4a:	430b      	orrs	r3, r1
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d4c:	2000      	movs	r0, #0
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d4e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d50:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      hi2c->State= HAL_I2C_STATE_READY;
 8001d54:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d5e:	6013      	str	r3, [r2, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
        {
          return HAL_TIMEOUT;
        }
        else
        {
          return HAL_ERROR;
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	bf0c      	ite	eq
 8001d66:	2003      	moveq	r0, #3
 8001d68:	2001      	movne	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001d6a:	b003      	add	sp, #12
 8001d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001d70:	6951      	ldr	r1, [r2, #20]
 8001d72:	078f      	lsls	r7, r1, #30
 8001d74:	d4a5      	bmi.n	8001cc2 <HAL_I2C_Slave_Receive+0x8e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001d76:	2d00      	cmp	r5, #0
 8001d78:	d050      	beq.n	8001e1c <HAL_I2C_Slave_Receive+0x1e8>
 8001d7a:	f7fe fb93 	bl	80004a4 <HAL_GetTick>
 8001d7e:	1b80      	subs	r0, r0, r6
 8001d80:	4285      	cmp	r5, r0
 8001d82:	d34b      	bcc.n	8001e1c <HAL_I2C_Slave_Receive+0x1e8>
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	e796      	b.n	8001cb8 <HAL_I2C_Slave_Receive+0x84>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8a:	2100      	movs	r1, #0
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d8c:	f06f 0210 	mvn.w	r2, #16

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001d90:	2020      	movs	r0, #32
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d92:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	6421      	str	r1, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d96:	461a      	mov	r2, r3
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d98:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d9a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001d9e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8001da2:	e7d9      	b.n	8001d58 <HAL_I2C_Slave_Receive+0x124>
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	e7ce      	b.n	8001d46 <HAL_I2C_Slave_Receive+0x112>
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	d042      	beq.n	8001e32 <HAL_I2C_Slave_Receive+0x1fe>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	06d2      	lsls	r2, r2, #27
 8001db0:	d41e      	bmi.n	8001df0 <HAL_I2C_Slave_Receive+0x1bc>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	0557      	lsls	r7, r2, #21
 8001db6:	d514      	bpl.n	8001de2 <HAL_I2C_Slave_Receive+0x1ae>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001db8:	2200      	movs	r2, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dba:	f46f 6580 	mvn.w	r5, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dbe:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001dc0:	2120      	movs	r1, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc2:	615d      	str	r5, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dc4:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dca:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001dcc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d

    /* Wait until STOP flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd6:	601a      	str	r2, [r3, #0]

      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d0ab      	beq.n	8001d36 <HAL_I2C_Slave_Receive+0x102>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 8001dde:	2003      	movs	r0, #3
 8001de0:	e736      	b.n	8001c50 <HAL_I2C_Slave_Receive+0x1c>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001de2:	f7fe fb5f 	bl	80004a4 <HAL_GetTick>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	4285      	cmp	r5, r0
 8001dea:	d335      	bcc.n	8001e58 <HAL_I2C_Slave_Receive+0x224>
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	e7dd      	b.n	8001dac <HAL_I2C_Slave_Receive+0x178>
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001df0:	2200      	movs	r2, #0
 8001df2:	9201      	str	r2, [sp, #4]
 8001df4:	6959      	ldr	r1, [r3, #20]
 8001df6:	9101      	str	r1, [sp, #4]
 8001df8:	6819      	ldr	r1, [r3, #0]
 8001dfa:	f041 0101 	orr.w	r1, r1, #1
 8001dfe:	6019      	str	r1, [r3, #0]
 8001e00:	9901      	ldr	r1, [sp, #4]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e02:	6819      	ldr	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	2520      	movs	r5, #32

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001e0a:	6019      	str	r1, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001e0c:	4610      	mov	r0, r2
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001e1a:	e719      	b.n	8001c50 <HAL_I2C_Slave_Receive+0x1c>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e1c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001e1e:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e20:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001e26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Instance->CR1 |= I2C_CR1_ACK;

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
 8001e2a:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001e30:	e70e      	b.n	8001c50 <HAL_I2C_Slave_Receive+0x1c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e32:	6951      	ldr	r1, [r2, #20]
 8001e34:	06cd      	lsls	r5, r1, #27
 8001e36:	d4db      	bmi.n	8001df0 <HAL_I2C_Slave_Receive+0x1bc>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e38:	6951      	ldr	r1, [r2, #20]
 8001e3a:	0549      	lsls	r1, r1, #21
 8001e3c:	d4bc      	bmi.n	8001db8 <HAL_I2C_Slave_Receive+0x184>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e40:	2000      	movs	r0, #0
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e42:	f041 0120 	orr.w	r1, r1, #32
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001e46:	2520      	movs	r5, #32
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	6421      	str	r1, [r4, #64]	; 0x40
 8001e4a:	4613      	mov	r3, r2
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e4c:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e4e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001e52:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8001e56:	e7bb      	b.n	8001dd0 <HAL_I2C_Slave_Receive+0x19c>
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	e7f0      	b.n	8001e3e <HAL_I2C_Slave_Receive+0x20a>
 8001e5c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08001e60 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8001e64:	2400      	movs	r4, #0
 8001e66:	9401      	str	r4, [sp, #4]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e68:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001e6c:	2c20      	cmp	r4, #32
 8001e6e:	d002      	beq.n	8001e76 <HAL_I2C_Master_Transmit_IT+0x16>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e70:	2002      	movs	r0, #2
  }
}
 8001e72:	b003      	add	sp, #12
 8001e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8001e76:	4c26      	ldr	r4, [pc, #152]	; (8001f10 <HAL_I2C_Master_Transmit_IT+0xb0>)
 8001e78:	4d26      	ldr	r5, [pc, #152]	; (8001f14 <HAL_I2C_Master_Transmit_IT+0xb4>)
 8001e7a:	6824      	ldr	r4, [r4, #0]
 8001e7c:	08e4      	lsrs	r4, r4, #3
 8001e7e:	fba5 5404 	umull	r5, r4, r5, r4
 8001e82:	0a24      	lsrs	r4, r4, #8
 8001e84:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001e88:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001e8c:	9401      	str	r4, [sp, #4]
 8001e8e:	e003      	b.n	8001e98 <HAL_I2C_Master_Transmit_IT+0x38>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT;
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001e90:	6804      	ldr	r4, [r0, #0]
 8001e92:	69a5      	ldr	r5, [r4, #24]
 8001e94:	07ae      	lsls	r6, r5, #30
 8001e96:	d50c      	bpl.n	8001eb2 <HAL_I2C_Master_Transmit_IT+0x52>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 8001e98:	9c01      	ldr	r4, [sp, #4]
 8001e9a:	1e65      	subs	r5, r4, #1
 8001e9c:	9501      	str	r5, [sp, #4]
 8001e9e:	2c00      	cmp	r4, #0
 8001ea0:	d1f6      	bne.n	8001e90 <HAL_I2C_Master_Transmit_IT+0x30>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001ea2:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ea4:	6304      	str	r4, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001eaa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT;
 8001eae:	2003      	movs	r0, #3
 8001eb0:	e7df      	b.n	8001e72 <HAL_I2C_Master_Transmit_IT+0x12>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8001eb6:	2d01      	cmp	r5, #1
 8001eb8:	d0da      	beq.n	8001e70 <HAL_I2C_Master_Transmit_IT+0x10>
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eba:	6825      	ldr	r5, [r4, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	2601      	movs	r6, #1
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ebe:	07ed      	lsls	r5, r5, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec0:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ec4:	d402      	bmi.n	8001ecc <HAL_I2C_Master_Transmit_IT+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ec6:	6825      	ldr	r5, [r4, #0]
 8001ec8:	4335      	orrs	r5, r6
 8001eca:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ecc:	6826      	ldr	r6, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ece:	4f12      	ldr	r7, [pc, #72]	; (8001f18 <HAL_I2C_Master_Transmit_IT+0xb8>)
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed0:	2500      	movs	r5, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ed2:	f426 6600 	bic.w	r6, r6, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed6:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001eda:	f04f 0e10 	mov.w	lr, #16
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ede:	6026      	str	r6, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ee0:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ee4:	f880 e03e 	strb.w	lr, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	6405      	str	r5, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001eea:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eec:	62c7      	str	r7, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001eee:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
    hi2c->Devaddress  = DevAddress;
 8001ef0:	6441      	str	r1, [r0, #68]	; 0x44

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ef2:	6823      	ldr	r3, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef4:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
    hi2c->Devaddress  = DevAddress;

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8001efa:	8506      	strh	r6, [r0, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001efc:	6023      	str	r3, [r4, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001efe:	6863      	ldr	r3, [r4, #4]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f00:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f04:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700

    return HAL_OK;
 8001f08:	4628      	mov	r0, r5

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f0a:	6063      	str	r3, [r4, #4]

    return HAL_OK;
 8001f0c:	e7b1      	b.n	8001e72 <HAL_I2C_Master_Transmit_IT+0x12>
 8001f0e:	bf00      	nop
 8001f10:	20000010 	andcs	r0, r0, r0, lsl r0
 8001f14:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 8001f18:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08001f1c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8001f20:	2400      	movs	r4, #0
 8001f22:	9401      	str	r4, [sp, #4]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001f28:	2c20      	cmp	r4, #32
 8001f2a:	d002      	beq.n	8001f32 <HAL_I2C_Master_Receive_IT+0x16>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2002      	movs	r0, #2
  }
}
 8001f2e:	b003      	add	sp, #12
 8001f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8001f32:	4c28      	ldr	r4, [pc, #160]	; (8001fd4 <HAL_I2C_Master_Receive_IT+0xb8>)
 8001f34:	4d28      	ldr	r5, [pc, #160]	; (8001fd8 <HAL_I2C_Master_Receive_IT+0xbc>)
 8001f36:	6824      	ldr	r4, [r4, #0]
 8001f38:	08e4      	lsrs	r4, r4, #3
 8001f3a:	fba5 5404 	umull	r5, r4, r5, r4
 8001f3e:	0a24      	lsrs	r4, r4, #8
 8001f40:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001f44:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001f48:	9401      	str	r4, [sp, #4]
 8001f4a:	e003      	b.n	8001f54 <HAL_I2C_Master_Receive_IT+0x38>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001f4c:	6804      	ldr	r4, [r0, #0]
 8001f4e:	69a5      	ldr	r5, [r4, #24]
 8001f50:	07ae      	lsls	r6, r5, #30
 8001f52:	d50c      	bpl.n	8001f6e <HAL_I2C_Master_Receive_IT+0x52>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 8001f54:	9c01      	ldr	r4, [sp, #4]
 8001f56:	1e65      	subs	r5, r4, #1
 8001f58:	9501      	str	r5, [sp, #4]
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d1f6      	bne.n	8001f4c <HAL_I2C_Master_Receive_IT+0x30>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001f5e:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f60:	6304      	str	r4, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f62:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001f66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	e7df      	b.n	8001f2e <HAL_I2C_Master_Receive_IT+0x12>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8001f72:	2d01      	cmp	r5, #1
 8001f74:	d0da      	beq.n	8001f2c <HAL_I2C_Master_Receive_IT+0x10>
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f76:	6825      	ldr	r5, [r4, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f78:	2601      	movs	r6, #1
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7a:	07ed      	lsls	r5, r5, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7c:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f80:	d402      	bmi.n	8001f88 <HAL_I2C_Master_Receive_IT+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f82:	6825      	ldr	r5, [r4, #0]
 8001f84:	4335      	orrs	r5, r6
 8001f86:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f88:	6826      	ldr	r6, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f8a:	4f14      	ldr	r7, [pc, #80]	; (8001fdc <HAL_I2C_Master_Receive_IT+0xc0>)
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	2500      	movs	r5, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f8e:	f426 6600 	bic.w	r6, r6, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f92:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f96:	f04f 0e10 	mov.w	lr, #16
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f9a:	6026      	str	r6, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f9c:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fa0:	f880 e03e 	strb.w	lr, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa4:	6405      	str	r5, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001fa6:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa8:	62c7      	str	r7, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001faa:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
    hi2c->Devaddress  = DevAddress;
 8001fac:	6441      	str	r1, [r0, #68]	; 0x44

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001fae:	6823      	ldr	r3, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb0:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
    hi2c->Devaddress  = DevAddress;

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8001fb6:	8506      	strh	r6, [r0, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001fb8:	6023      	str	r3, [r4, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6023      	str	r3, [r4, #0]
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc2:	6863      	ldr	r3, [r4, #4]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700

    return HAL_OK;
 8001fcc:	4628      	mov	r0, r5
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fce:	6063      	str	r3, [r4, #4]

    return HAL_OK;
 8001fd0:	e7ad      	b.n	8001f2e <HAL_I2C_Master_Receive_IT+0x12>
 8001fd2:	bf00      	nop
 8001fd4:	20000010 	andcs	r0, r0, r0, lsl r0
 8001fd8:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 8001fdc:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08001fe0 <HAL_I2C_Master_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	b083      	sub	sp, #12
  __IO uint32_t Prev_State = 0x00U;
 8001fe4:	2400      	movs	r4, #0
 8001fe6:	9400      	str	r4, [sp, #0]
  __IO uint32_t count      = 0x00U;
 8001fe8:	9401      	str	r4, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001fee:	2c20      	cmp	r4, #32
 8001ff0:	d002      	beq.n	8001ff8 <HAL_I2C_Master_Sequential_Transmit_IT+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2002      	movs	r0, #2
  }
}
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8001ff8:	9c08      	ldr	r4, [sp, #32]
 8001ffa:	2c04      	cmp	r4, #4
 8001ffc:	d03b      	beq.n	8002076 <HAL_I2C_Master_Sequential_Transmit_IT+0x96>
 8001ffe:	2c01      	cmp	r4, #1
 8002000:	d039      	beq.n	8002076 <HAL_I2C_Master_Sequential_Transmit_IT+0x96>
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002002:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002006:	2c01      	cmp	r4, #1
 8002008:	d0f3      	beq.n	8001ff2 <HAL_I2C_Master_Sequential_Transmit_IT+0x12>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200a:	6804      	ldr	r4, [r0, #0]
 800200c:	6825      	ldr	r5, [r4, #0]
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200e:	2601      	movs	r6, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002010:	07ed      	lsls	r5, r5, #31
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002016:	d402      	bmi.n	800201e <HAL_I2C_Master_Sequential_Transmit_IT+0x3e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002018:	6825      	ldr	r5, [r4, #0]
 800201a:	4335      	orrs	r5, r6
 800201c:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800201e:	6825      	ldr	r5, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002020:	f04f 0e21 	mov.w	lr, #33	; 0x21
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002024:	f425 6500 	bic.w	r5, r5, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002028:	2710      	movs	r7, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202a:	2600      	movs	r6, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800202c:	6025      	str	r5, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800202e:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002032:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002036:	6406      	str	r6, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002038:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800203a:	9b08      	ldr	r3, [sp, #32]
 800203c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800203e:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
    hi2c->Devaddress  = DevAddress;
 8002040:	6441      	str	r1, [r0, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8002042:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002044:	9300      	str	r3, [sp, #0]
    
    /* Generate Start */    
    if((Prev_State == I2C_STATE_MASTER_BUSY_RX) || (Prev_State == I2C_STATE_NONE))
 8002046:	9b00      	ldr	r3, [sp, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002048:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->Devaddress  = DevAddress;

    Prev_State = hi2c->PreviousState;
    
    /* Generate Start */    
    if((Prev_State == I2C_STATE_MASTER_BUSY_RX) || (Prev_State == I2C_STATE_NONE))
 800204a:	2b12      	cmp	r3, #18

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = XferOptions;
    hi2c->XferSize    = hi2c->XferCount;
 800204c:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;

    Prev_State = hi2c->PreviousState;
    
    /* Generate Start */    
    if((Prev_State == I2C_STATE_MASTER_BUSY_RX) || (Prev_State == I2C_STATE_NONE))
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Master_Sequential_Transmit_IT+0x74>
 8002050:	9b00      	ldr	r3, [sp, #0]
 8002052:	b93b      	cbnz	r3, 8002064 <HAL_I2C_Master_Sequential_Transmit_IT+0x84>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8002054:	9b08      	ldr	r3, [sp, #32]
 8002056:	2b04      	cmp	r3, #4
 8002058:	d02b      	beq.n	80020b2 <HAL_I2C_Master_Sequential_Transmit_IT+0xd2>
 800205a:	2b01      	cmp	r3, #1
 800205c:	d029      	beq.n	80020b2 <HAL_I2C_Master_Sequential_Transmit_IT+0xd2>
      {
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
      else if(Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800205e:	9b00      	ldr	r3, [sp, #0]
 8002060:	2b12      	cmp	r3, #18
 8002062:	d026      	beq.n	80020b2 <HAL_I2C_Master_Sequential_Transmit_IT+0xd2>
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002064:	6862      	ldr	r2, [r4, #4]
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002066:	2300      	movs	r3, #0
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002068:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

    return HAL_OK;
 8002070:	4618      	mov	r0, r3
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002072:	6062      	str	r2, [r4, #4]

    return HAL_OK;
 8002074:	e7be      	b.n	8001ff4 <HAL_I2C_Master_Sequential_Transmit_IT+0x14>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8002076:	4c11      	ldr	r4, [pc, #68]	; (80020bc <HAL_I2C_Master_Sequential_Transmit_IT+0xdc>)
 8002078:	4d11      	ldr	r5, [pc, #68]	; (80020c0 <HAL_I2C_Master_Sequential_Transmit_IT+0xe0>)
 800207a:	6824      	ldr	r4, [r4, #0]
 800207c:	08e4      	lsrs	r4, r4, #3
 800207e:	fba5 5404 	umull	r5, r4, r5, r4
 8002082:	0a24      	lsrs	r4, r4, #8
 8002084:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002088:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800208c:	9401      	str	r4, [sp, #4]
 800208e:	e003      	b.n	8002098 <HAL_I2C_Master_Sequential_Transmit_IT+0xb8>
          __HAL_UNLOCK(hi2c);
          
          return HAL_TIMEOUT; 
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002090:	6804      	ldr	r4, [r0, #0]
 8002092:	69a4      	ldr	r4, [r4, #24]
 8002094:	07a6      	lsls	r6, r4, #30
 8002096:	d5b4      	bpl.n	8002002 <HAL_I2C_Master_Sequential_Transmit_IT+0x22>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
      do
      {
        if(count-- == 0U)
 8002098:	9c01      	ldr	r4, [sp, #4]
 800209a:	1e65      	subs	r5, r4, #1
 800209c:	9501      	str	r5, [sp, #4]
 800209e:	2c00      	cmp	r4, #0
 80020a0:	d1f6      	bne.n	8002090 <HAL_I2C_Master_Sequential_Transmit_IT+0xb0>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
          hi2c->State= HAL_I2C_STATE_READY;
 80020a2:	2320      	movs	r3, #32
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
      do
      {
        if(count-- == 0U)
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 80020a4:	6304      	str	r4, [r0, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
      do
      {
        if(count-- == 0U)
        {
          hi2c->PreviousState = I2C_STATE_NONE;
          hi2c->State= HAL_I2C_STATE_READY;
 80020aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          
          return HAL_TIMEOUT; 
 80020ae:	2003      	movs	r0, #3
 80020b0:	e7a0      	b.n	8001ff4 <HAL_I2C_Master_Sequential_Transmit_IT+0x14>
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
      else if(Prev_State == I2C_STATE_MASTER_BUSY_RX)
      {
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6023      	str	r3, [r4, #0]
 80020ba:	e7d3      	b.n	8002064 <HAL_I2C_Master_Sequential_Transmit_IT+0x84>
 80020bc:	20000010 	andcs	r0, r0, r0, lsl r0
 80020c0:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589

080020c4 <HAL_I2C_Master_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80020c8:	2400      	movs	r4, #0
 80020ca:	9401      	str	r4, [sp, #4]
    
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80020cc:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80020d0:	2c20      	cmp	r4, #32
 80020d2:	d002      	beq.n	80020da <HAL_I2C_Master_Sequential_Receive_IT+0x16>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2002      	movs	r0, #2
  }
}
 80020d6:	b003      	add	sp, #12
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80020da:	9c08      	ldr	r4, [sp, #32]
 80020dc:	2c04      	cmp	r4, #4
 80020de:	d03c      	beq.n	800215a <HAL_I2C_Master_Sequential_Receive_IT+0x96>
 80020e0:	2c01      	cmp	r4, #1
 80020e2:	d03a      	beq.n	800215a <HAL_I2C_Master_Sequential_Receive_IT+0x96>
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e4:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80020e8:	2c01      	cmp	r4, #1
 80020ea:	d0f3      	beq.n	80020d4 <HAL_I2C_Master_Sequential_Receive_IT+0x10>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ec:	6804      	ldr	r4, [r0, #0]
 80020ee:	6825      	ldr	r5, [r4, #0]
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f0:	2601      	movs	r6, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f2:	07ed      	lsls	r5, r5, #31
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f4:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f8:	d402      	bmi.n	8002100 <HAL_I2C_Master_Sequential_Receive_IT+0x3c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020fa:	6825      	ldr	r5, [r4, #0]
 80020fc:	4335      	orrs	r5, r6
 80020fe:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002100:	6825      	ldr	r5, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002102:	f04f 0e22 	mov.w	lr, #34	; 0x22
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002106:	f425 6500 	bic.w	r5, r5, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800210a:	2710      	movs	r7, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	2600      	movs	r6, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800210e:	6025      	str	r5, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002110:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002114:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	6406      	str	r6, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferCount = Size;
 800211a:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800211c:	9b08      	ldr	r3, [sp, #32]
 800211e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002120:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
    hi2c->Devaddress = DevAddress;
 8002122:	6441      	str	r1, [r0, #68]	; 0x44
    
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 8002124:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8002126:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferOptions = XferOptions;
    hi2c->XferSize    = hi2c->XferCount;
    hi2c->Devaddress = DevAddress;
    
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 8002128:	2b11      	cmp	r3, #17

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferCount = Size;
    hi2c->XferOptions = XferOptions;
    hi2c->XferSize    = hi2c->XferCount;
 800212a:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->Devaddress = DevAddress;
    
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Sequential_Receive_IT+0x6e>
 800212e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002130:	b953      	cbnz	r3, 8002148 <HAL_I2C_Master_Sequential_Receive_IT+0x84>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME)  || (XferOptions == I2C_NO_OPTION_FRAME))
 8002132:	9b08      	ldr	r3, [sp, #32]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d02e      	beq.n	8002196 <HAL_I2C_Master_Sequential_Receive_IT+0xd2>
 8002138:	2b01      	cmp	r3, #1
 800213a:	d02c      	beq.n	8002196 <HAL_I2C_Master_Sequential_Receive_IT+0xd2>
 800213c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002140:	d029      	beq.n	8002196 <HAL_I2C_Master_Sequential_Receive_IT+0xd2>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
        
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
      else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002142:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002144:	2b11      	cmp	r3, #17
 8002146:	d026      	beq.n	8002196 <HAL_I2C_Master_Sequential_Receive_IT+0xd2>
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002148:	6862      	ldr	r2, [r4, #4]
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214a:	2300      	movs	r3, #0
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800214c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

    return HAL_OK;
 8002154:	4618      	mov	r0, r3
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002156:	6062      	str	r2, [r4, #4]

    return HAL_OK;
 8002158:	e7bd      	b.n	80020d6 <HAL_I2C_Master_Sequential_Receive_IT+0x12>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 800215a:	4c13      	ldr	r4, [pc, #76]	; (80021a8 <HAL_I2C_Master_Sequential_Receive_IT+0xe4>)
 800215c:	4d13      	ldr	r5, [pc, #76]	; (80021ac <HAL_I2C_Master_Sequential_Receive_IT+0xe8>)
 800215e:	6824      	ldr	r4, [r4, #0]
 8002160:	08e4      	lsrs	r4, r4, #3
 8002162:	fba5 5404 	umull	r5, r4, r5, r4
 8002166:	0a24      	lsrs	r4, r4, #8
 8002168:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800216c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002170:	9401      	str	r4, [sp, #4]
 8002172:	e003      	b.n	800217c <HAL_I2C_Master_Sequential_Receive_IT+0xb8>
          __HAL_UNLOCK(hi2c);

          return HAL_TIMEOUT; 
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002174:	6804      	ldr	r4, [r0, #0]
 8002176:	69a4      	ldr	r4, [r4, #24]
 8002178:	07a6      	lsls	r6, r4, #30
 800217a:	d5b3      	bpl.n	80020e4 <HAL_I2C_Master_Sequential_Receive_IT+0x20>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
      do
      {
        if(count-- == 0U)
 800217c:	9c01      	ldr	r4, [sp, #4]
 800217e:	1e65      	subs	r5, r4, #1
 8002180:	9501      	str	r5, [sp, #4]
 8002182:	2c00      	cmp	r4, #0
 8002184:	d1f6      	bne.n	8002174 <HAL_I2C_Master_Sequential_Receive_IT+0xb0>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
          hi2c->State= HAL_I2C_STATE_READY;
 8002186:	2320      	movs	r3, #32
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
      do
      {
        if(count-- == 0U)
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 8002188:	6304      	str	r4, [r0, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800218a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
      do
      {
        if(count-- == 0U)
        {
          hi2c->PreviousState = I2C_STATE_NONE;
          hi2c->State= HAL_I2C_STATE_READY;
 800218e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);

          return HAL_TIMEOUT; 
 8002192:	2003      	movs	r0, #3
 8002194:	e79f      	b.n	80020d6 <HAL_I2C_Master_Sequential_Receive_IT+0x12>
        hi2c->Instance->CR1 |= I2C_CR1_START;
      }
      else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219c:	6023      	str	r3, [r4, #0]
        
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6023      	str	r3, [r4, #0]
 80021a6:	e7cf      	b.n	8002148 <HAL_I2C_Master_Sequential_Receive_IT+0x84>
 80021a8:	20000010 	andcs	r0, r0, r0, lsl r0
 80021ac:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589

080021b0 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d002      	beq.n	80021c6 <HAL_I2C_Slave_Transmit_IT+0x16>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2002      	movs	r0, #2
  }
}
 80021c2:	b003      	add	sp, #12
 80021c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 80021c6:	b1f1      	cbz	r1, 8002206 <HAL_I2C_Slave_Transmit_IT+0x56>
 80021c8:	b1ea      	cbz	r2, 8002206 <HAL_I2C_Slave_Transmit_IT+0x56>
    {
      return  HAL_ERROR;
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_I2C_Slave_Transmit_IT+0xb4>)
 80021cc:	4c26      	ldr	r4, [pc, #152]	; (8002268 <HAL_I2C_Slave_Transmit_IT+0xb8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	fba4 4303 	umull	r4, r3, r4, r3
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	e003      	b.n	80021ec <HAL_I2C_Slave_Transmit_IT+0x3c>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80021e4:	6803      	ldr	r3, [r0, #0]
 80021e6:	699c      	ldr	r4, [r3, #24]
 80021e8:	07a5      	lsls	r5, r4, #30
 80021ea:	d50e      	bpl.n	800220a <HAL_I2C_Slave_Transmit_IT+0x5a>

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 80021ec:	9b01      	ldr	r3, [sp, #4]
 80021ee:	1e5c      	subs	r4, r3, #1
 80021f0:	9401      	str	r4, [sp, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f6      	bne.n	80021e4 <HAL_I2C_Slave_Transmit_IT+0x34>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80021f6:	2220      	movs	r2, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80021f8:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80021fe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 8002202:	2003      	movs	r0, #3
 8002204:	e7dd      	b.n	80021c2 <HAL_I2C_Slave_Transmit_IT+0x12>

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002206:	2001      	movs	r0, #1
 8002208:	e7db      	b.n	80021c2 <HAL_I2C_Slave_Transmit_IT+0x12>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800220e:	2c01      	cmp	r4, #1
 8002210:	d0d6      	beq.n	80021c0 <HAL_I2C_Slave_Transmit_IT+0x10>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002212:	681c      	ldr	r4, [r3, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002214:	2501      	movs	r5, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002216:	07e4      	lsls	r4, r4, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002218:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221c:	d402      	bmi.n	8002224 <HAL_I2C_Slave_Transmit_IT+0x74>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800221e:	681c      	ldr	r4, [r3, #0]
 8002220:	432c      	orrs	r4, r5
 8002222:	601c      	str	r4, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002224:	681d      	ldr	r5, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002226:	4e11      	ldr	r6, [pc, #68]	; (800226c <HAL_I2C_Slave_Transmit_IT+0xbc>)
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	2400      	movs	r4, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800222a:	f425 6500 	bic.w	r5, r5, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800222e:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002232:	2720      	movs	r7, #32
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002234:	601d      	str	r5, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002236:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800223a:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223e:	6404      	str	r4, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002240:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002242:	62c6      	str	r6, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002244:	8d45      	ldrh	r5, [r0, #42]	; 0x2a

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002246:	681a      	ldr	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002248:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800224a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 800224e:	8505      	strh	r5, [r0, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002250:	601a      	str	r2, [r3, #0]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002252:	685a      	ldr	r2, [r3, #4]

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002258:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700

    return HAL_OK;
 800225c:	4620      	mov	r0, r4
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800225e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002260:	e7af      	b.n	80021c2 <HAL_I2C_Slave_Transmit_IT+0x12>
 8002262:	bf00      	nop
 8002264:	20000010 	andcs	r0, r0, r0, lsl r0
 8002268:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 800226c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08002270 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002272:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	9301      	str	r3, [sp, #4]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002278:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800227c:	2b20      	cmp	r3, #32
 800227e:	d002      	beq.n	8002286 <HAL_I2C_Slave_Receive_IT+0x16>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002280:	2002      	movs	r0, #2
  }
}
 8002282:	b003      	add	sp, #12
 8002284:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 8002286:	b1f1      	cbz	r1, 80022c6 <HAL_I2C_Slave_Receive_IT+0x56>
 8002288:	b1ea      	cbz	r2, 80022c6 <HAL_I2C_Slave_Receive_IT+0x56>
    {
      return  HAL_ERROR;
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_I2C_Slave_Receive_IT+0xb0>)
 800228c:	4c25      	ldr	r4, [pc, #148]	; (8002324 <HAL_I2C_Slave_Receive_IT+0xb4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	fba4 4303 	umull	r4, r3, r4, r3
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800229c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	e003      	b.n	80022ac <HAL_I2C_Slave_Receive_IT+0x3c>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80022a4:	6803      	ldr	r3, [r0, #0]
 80022a6:	699c      	ldr	r4, [r3, #24]
 80022a8:	07a5      	lsls	r5, r4, #30
 80022aa:	d50e      	bpl.n	80022ca <HAL_I2C_Slave_Receive_IT+0x5a>

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 80022ac:	9b01      	ldr	r3, [sp, #4]
 80022ae:	1e5c      	subs	r4, r3, #1
 80022b0:	9401      	str	r4, [sp, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f6      	bne.n	80022a4 <HAL_I2C_Slave_Receive_IT+0x34>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80022b6:	2220      	movs	r2, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80022b8:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80022be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 80022c2:	2003      	movs	r0, #3
 80022c4:	e7dd      	b.n	8002282 <HAL_I2C_Slave_Receive_IT+0x12>

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
 80022c8:	e7db      	b.n	8002282 <HAL_I2C_Slave_Receive_IT+0x12>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ca:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80022ce:	2c01      	cmp	r4, #1
 80022d0:	d0d6      	beq.n	8002280 <HAL_I2C_Slave_Receive_IT+0x10>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d2:	681c      	ldr	r4, [r3, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d4:	2501      	movs	r5, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d6:	07e4      	lsls	r4, r4, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d8:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022dc:	d402      	bmi.n	80022e4 <HAL_I2C_Slave_Receive_IT+0x74>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022de:	681c      	ldr	r4, [r3, #0]
 80022e0:	432c      	orrs	r4, r5
 80022e2:	601c      	str	r4, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022e4:	681d      	ldr	r5, [r3, #0]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e6:	4e10      	ldr	r6, [pc, #64]	; (8002328 <HAL_I2C_Slave_Receive_IT+0xb8>)
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	2400      	movs	r4, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022ea:	f425 6500 	bic.w	r5, r5, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022ee:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80022f2:	2720      	movs	r7, #32
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022f4:	601d      	str	r5, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022f6:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80022fa:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fe:	6404      	str	r4, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
 8002300:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002302:	62c6      	str	r6, [r0, #44]	; 0x2c

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002304:	681d      	ldr	r5, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8002306:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002308:	f445 6180 	orr.w	r1, r5, #1024	; 0x400
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
 800230c:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800230e:	6019      	str	r1, [r3, #0]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002310:	685a      	ldr	r2, [r3, #4]

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002316:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700

    return HAL_OK;
 800231a:	4620      	mov	r0, r4
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800231c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800231e:	e7b0      	b.n	8002282 <HAL_I2C_Slave_Receive_IT+0x12>
 8002320:	20000010 	andcs	r0, r0, r0, lsl r0
 8002324:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 8002328:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

0800232c <HAL_I2C_Slave_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 800232e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8002332:	2c28      	cmp	r4, #40	; 0x28
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002334:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8002336:	d002      	beq.n	800233e <HAL_I2C_Slave_Sequential_Transmit_IT+0x12>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002338:	2002      	movs	r0, #2
  }
}
 800233a:	b003      	add	sp, #12
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    if((pData == NULL) || (Size == 0U))
 800233e:	2900      	cmp	r1, #0
 8002340:	d02f      	beq.n	80023a2 <HAL_I2C_Slave_Sequential_Transmit_IT+0x76>
 8002342:	2a00      	cmp	r2, #0
 8002344:	d02d      	beq.n	80023a2 <HAL_I2C_Slave_Sequential_Transmit_IT+0x76>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002346:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800234a:	2c01      	cmp	r4, #1
 800234c:	d0f4      	beq.n	8002338 <HAL_I2C_Slave_Sequential_Transmit_IT+0xc>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234e:	6805      	ldr	r5, [r0, #0]
 8002350:	682c      	ldr	r4, [r5, #0]
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002352:	2601      	movs	r6, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002354:	07e4      	lsls	r4, r4, #31
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002356:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800235a:	d402      	bmi.n	8002362 <HAL_I2C_Slave_Sequential_Transmit_IT+0x36>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235c:	682c      	ldr	r4, [r5, #0]
 800235e:	4334      	orrs	r4, r6
 8002360:	602c      	str	r4, [r5, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002362:	682e      	ldr	r6, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002364:	2400      	movs	r4, #0
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002366:	f04f 0e29 	mov.w	lr, #41	; 0x29
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800236a:	f426 6600 	bic.w	r6, r6, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800236e:	2720      	movs	r7, #32
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002370:	602e      	str	r6, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002372:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002376:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237a:	6404      	str	r4, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 800237c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800237e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002380:	8d42      	ldrh	r2, [r0, #42]	; 0x2a

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	9401      	str	r4, [sp, #4]
 8002384:	696b      	ldr	r3, [r5, #20]
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	69ab      	ldr	r3, [r5, #24]
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	9b01      	ldr	r3, [sp, #4]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800238e:	686b      	ldr	r3, [r5, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002390:	6241      	str	r1, [r0, #36]	; 0x24
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = XferOptions;
    hi2c->XferSize    = hi2c->XferCount;
 8002396:	8502      	strh	r2, [r0, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

    return HAL_OK;
 800239c:	4620      	mov	r0, r4
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800239e:	606b      	str	r3, [r5, #4]

    return HAL_OK;
 80023a0:	e7cb      	b.n	800233a <HAL_I2C_Slave_Sequential_Transmit_IT+0xe>

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
 80023a4:	e7c9      	b.n	800233a <HAL_I2C_Slave_Sequential_Transmit_IT+0xe>
 80023a6:	bf00      	nop

080023a8 <HAL_I2C_Slave_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80023a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 80023aa:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80023ae:	2c28      	cmp	r4, #40	; 0x28
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80023b0:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 80023b2:	d002      	beq.n	80023ba <HAL_I2C_Slave_Sequential_Receive_IT+0x12>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2002      	movs	r0, #2
  }
}
 80023b6:	b003      	add	sp, #12
 80023b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    if((pData == NULL) || (Size == 0U))
 80023ba:	2900      	cmp	r1, #0
 80023bc:	d02f      	beq.n	800241e <HAL_I2C_Slave_Sequential_Receive_IT+0x76>
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d02d      	beq.n	800241e <HAL_I2C_Slave_Sequential_Receive_IT+0x76>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c2:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80023c6:	2c01      	cmp	r4, #1
 80023c8:	d0f4      	beq.n	80023b4 <HAL_I2C_Slave_Sequential_Receive_IT+0xc>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ca:	6805      	ldr	r5, [r0, #0]
 80023cc:	682c      	ldr	r4, [r5, #0]
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ce:	2601      	movs	r6, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d0:	07e4      	lsls	r4, r4, #31
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d6:	d402      	bmi.n	80023de <HAL_I2C_Slave_Sequential_Receive_IT+0x36>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d8:	682c      	ldr	r4, [r5, #0]
 80023da:	4334      	orrs	r4, r6
 80023dc:	602c      	str	r4, [r5, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80023de:	682e      	ldr	r6, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	2400      	movs	r4, #0
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80023e2:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80023e6:	f426 6600 	bic.w	r6, r6, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80023ea:	2720      	movs	r7, #32
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80023ec:	602e      	str	r6, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80023ee:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80023f2:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f6:	6404      	str	r4, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr   = pData;
    hi2c->XferCount   = Size;
 80023f8:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80023fa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80023fc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	9401      	str	r4, [sp, #4]
 8002400:	696b      	ldr	r3, [r5, #20]
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	69ab      	ldr	r3, [r5, #24]
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	9b01      	ldr	r3, [sp, #4]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800240a:	686b      	ldr	r3, [r5, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr   = pData;
 800240c:	6241      	str	r1, [r0, #36]	; 0x24
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800240e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700

    /* Prepare transfer parameters */
    hi2c->pBuffPtr   = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = XferOptions;
    hi2c->XferSize    = hi2c->XferCount;
 8002412:	8502      	strh	r2, [r0, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

    return HAL_OK;
 8002418:	4620      	mov	r0, r4
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241a:	606b      	str	r3, [r5, #4]

    return HAL_OK;
 800241c:	e7cb      	b.n	80023b6 <HAL_I2C_Slave_Sequential_Receive_IT+0xe>

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e7c9      	b.n	80023b6 <HAL_I2C_Slave_Sequential_Receive_IT+0xe>
 8002422:	bf00      	nop

08002424 <HAL_I2C_EnableListen_IT>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002424:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002428:	2b20      	cmp	r3, #32
 800242a:	d001      	beq.n	8002430 <HAL_I2C_EnableListen_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800242c:	2002      	movs	r0, #2
  }
}
 800242e:	4770      	bx	lr
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002430:	2228      	movs	r2, #40	; 0x28
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002432:	6803      	ldr	r3, [r0, #0]
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002434:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	07d2      	lsls	r2, r2, #31
 800243c:	d403      	bmi.n	8002446 <HAL_I2C_EnableListen_IT+0x22>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800244c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002454:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002456:	2000      	movs	r0, #0
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <HAL_I2C_DisableListen_IT>:
{
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 800245c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002460:	2b28      	cmp	r3, #40	; 0x28
 8002462:	d001      	beq.n	8002468 <HAL_I2C_DisableListen_IT+0xc>
  
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002464:	2002      	movs	r0, #2
 8002466:	4770      	bx	lr
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8002468:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800246c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002470:	6801      	ldr	r1, [r0, #0]
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8002472:	f003 0303 	and.w	r3, r3, #3
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002476:	b410      	push	{r4}

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8002478:	431a      	orrs	r2, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	2420      	movs	r4, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	2300      	movs	r3, #0

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800247e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002480:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002488:	680a      	ldr	r2, [r1, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800248a:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800248e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002492:	600a      	str	r2, [r1, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002494:	684a      	ldr	r2, [r1, #4]
 8002496:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  
    return HAL_OK;
 800249a:	4618      	mov	r0, r3

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800249c:	604a      	str	r2, [r1, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800249e:	4770      	bx	lr

080024a0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80024a6:	2000      	movs	r0, #0
 80024a8:	9001      	str	r0, [sp, #4]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80024aa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80024ae:	2820      	cmp	r0, #32
 80024b0:	d002      	beq.n	80024b8 <HAL_I2C_Master_Transmit_DMA+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2002      	movs	r0, #2
  }
}
 80024b4:	b003      	add	sp, #12
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80024b8:	483b      	ldr	r0, [pc, #236]	; (80025a8 <HAL_I2C_Master_Transmit_DMA+0x108>)
 80024ba:	4d3c      	ldr	r5, [pc, #240]	; (80025ac <HAL_I2C_Master_Transmit_DMA+0x10c>)
 80024bc:	6800      	ldr	r0, [r0, #0]
 80024be:	08c0      	lsrs	r0, r0, #3
 80024c0:	fba5 5000 	umull	r5, r0, r5, r0
 80024c4:	0a00      	lsrs	r0, r0, #8
 80024c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024ce:	9001      	str	r0, [sp, #4]
 80024d0:	e003      	b.n	80024da <HAL_I2C_Master_Transmit_DMA+0x3a>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80024d2:	6825      	ldr	r5, [r4, #0]
 80024d4:	69a8      	ldr	r0, [r5, #24]
 80024d6:	0786      	lsls	r6, r0, #30
 80024d8:	d50c      	bpl.n	80024f4 <HAL_I2C_Master_Transmit_DMA+0x54>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 80024da:	9801      	ldr	r0, [sp, #4]
 80024dc:	1e45      	subs	r5, r0, #1
 80024de:	9501      	str	r5, [sp, #4]
 80024e0:	2800      	cmp	r0, #0
 80024e2:	d1f6      	bne.n	80024d2 <HAL_I2C_Master_Transmit_DMA+0x32>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80024e4:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80024ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 80024f0:	2003      	movs	r0, #3
 80024f2:	e7df      	b.n	80024b4 <HAL_I2C_Master_Transmit_DMA+0x14>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80024f8:	2801      	cmp	r0, #1
 80024fa:	d0da      	beq.n	80024b2 <HAL_I2C_Master_Transmit_DMA+0x12>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024fc:	6828      	ldr	r0, [r5, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	2601      	movs	r6, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002500:	07c0      	lsls	r0, r0, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002502:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002506:	d402      	bmi.n	800250e <HAL_I2C_Master_Transmit_DMA+0x6e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002508:	6828      	ldr	r0, [r5, #0]
 800250a:	4330      	orrs	r0, r6
 800250c:	6028      	str	r0, [r5, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800250e:	6828      	ldr	r0, [r5, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002510:	4f27      	ldr	r7, [pc, #156]	; (80025b0 <HAL_I2C_Master_Transmit_DMA+0x110>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002512:	f420 6000 	bic.w	r0, r0, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002516:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800251a:	f04f 0e10 	mov.w	lr, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251e:	2600      	movs	r6, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002520:	6028      	str	r0, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002522:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002526:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252a:	6426      	str	r6, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 800252c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252e:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002532:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8002534:	b298      	uxth	r0, r3
 8002536:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8002538:	6461      	str	r1, [r4, #68]	; 0x44

    if(hi2c->XferSize > 0U)
 800253a:	4603      	mov	r3, r0
 800253c:	b970      	cbnz	r0, 800255c <HAL_I2C_Master_Transmit_DMA+0xbc>
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800253e:	682a      	ldr	r2, [r5, #0]
 8002540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002544:	602a      	str	r2, [r5, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002546:	682a      	ldr	r2, [r5, #0]
 8002548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800254c:	602a      	str	r2, [r5, #0]
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

     /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800254e:	686a      	ldr	r2, [r5, #4]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002550:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

     /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002554:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002558:	606a      	str	r2, [r5, #4]
 800255a:	e7ab      	b.n	80024b4 <HAL_I2C_Master_Transmit_DMA+0x14>
    hi2c->Devaddress  = DevAddress;

    if(hi2c->XferSize > 0U)
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800255c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800255e:	f8df e058 	ldr.w	lr, [pc, #88]	; 80025b8 <HAL_I2C_Master_Transmit_DMA+0x118>

      /* Set the DMA error callback */      
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002562:	4f14      	ldr	r7, [pc, #80]	; (80025b4 <HAL_I2C_Master_Transmit_DMA+0x114>)

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002564:	6406      	str	r6, [r0, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmatx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002566:	4611      	mov	r1, r2
      /* Set the DMA error callback */      
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002568:	6446      	str	r6, [r0, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmatx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800256a:	f105 0210 	add.w	r2, r5, #16
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
      hi2c->hdmatx->XferM1CpltCallback = NULL;
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800256e:	6486      	str	r6, [r0, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8002570:	6506      	str	r6, [r0, #80]	; 0x50
    hi2c->Devaddress  = DevAddress;

    if(hi2c->XferSize > 0U)
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002572:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c

      /* Set the DMA error callback */      
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002576:	64c7      	str	r7, [r0, #76]	; 0x4c
      hi2c->hdmatx->XferM1CpltCallback = NULL;
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmatx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002578:	f001 ff08 	bl	800438c <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002584:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258c:	601a      	str	r2, [r3, #0]
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800258e:	685a      	ldr	r2, [r3, #4]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002590:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002594:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002598:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800

     /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
    }

    return HAL_OK;
 80025a0:	4630      	mov	r0, r6

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	e786      	b.n	80024b4 <HAL_I2C_Master_Transmit_DMA+0x14>
 80025a6:	bf00      	nop
 80025a8:	20000010 	andcs	r0, r0, r0, lsl r0
 80025ac:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 80025b0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 80025b4:	08003461 	stmdaeq	r0, {r0, r5, r6, sl, ip, sp}
 80025b8:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}

080025bc <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	b083      	sub	sp, #12
 80025c0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80025c2:	2000      	movs	r0, #0
 80025c4:	9001      	str	r0, [sp, #4]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80025c6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80025ca:	2820      	cmp	r0, #32
 80025cc:	d002      	beq.n	80025d4 <HAL_I2C_Master_Receive_DMA+0x18>
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80025ce:	2002      	movs	r0, #2
  }
}
 80025d0:	b003      	add	sp, #12
 80025d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80025d4:	483a      	ldr	r0, [pc, #232]	; (80026c0 <HAL_I2C_Master_Receive_DMA+0x104>)
 80025d6:	4d3b      	ldr	r5, [pc, #236]	; (80026c4 <HAL_I2C_Master_Receive_DMA+0x108>)
 80025d8:	6800      	ldr	r0, [r0, #0]
 80025da:	08c0      	lsrs	r0, r0, #3
 80025dc:	fba5 5000 	umull	r5, r0, r5, r0
 80025e0:	0a00      	lsrs	r0, r0, #8
 80025e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ea:	9001      	str	r0, [sp, #4]
 80025ec:	e003      	b.n	80025f6 <HAL_I2C_Master_Receive_DMA+0x3a>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80025ee:	6825      	ldr	r5, [r4, #0]
 80025f0:	69a8      	ldr	r0, [r5, #24]
 80025f2:	0786      	lsls	r6, r0, #30
 80025f4:	d50c      	bpl.n	8002610 <HAL_I2C_Master_Receive_DMA+0x54>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 80025f6:	9801      	ldr	r0, [sp, #4]
 80025f8:	1e45      	subs	r5, r0, #1
 80025fa:	9501      	str	r5, [sp, #4]
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d1f6      	bne.n	80025ee <HAL_I2C_Master_Receive_DMA+0x32>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002600:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002602:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002604:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002608:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 800260c:	2003      	movs	r0, #3
 800260e:	e7df      	b.n	80025d0 <HAL_I2C_Master_Receive_DMA+0x14>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002610:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8002614:	2801      	cmp	r0, #1
 8002616:	d0da      	beq.n	80025ce <HAL_I2C_Master_Receive_DMA+0x12>
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002618:	6828      	ldr	r0, [r5, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261a:	2601      	movs	r6, #1
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800261c:	07c0      	lsls	r0, r0, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002622:	d402      	bmi.n	800262a <HAL_I2C_Master_Receive_DMA+0x6e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002624:	6828      	ldr	r0, [r5, #0]
 8002626:	4330      	orrs	r0, r6
 8002628:	6028      	str	r0, [r5, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800262a:	6828      	ldr	r0, [r5, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262c:	4f26      	ldr	r7, [pc, #152]	; (80026c8 <HAL_I2C_Master_Receive_DMA+0x10c>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800262e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002632:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002636:	f04f 0e10 	mov.w	lr, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263a:	2600      	movs	r6, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800263c:	6028      	str	r0, [r5, #0]
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800263e:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002642:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002646:	6426      	str	r6, [r4, #64]	; 0x40
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002648:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800264a:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800264c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8002650:	b298      	uxth	r0, r3
 8002652:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8002654:	6461      	str	r1, [r4, #68]	; 0x44
    
    if(hi2c->XferSize > 0U)
 8002656:	4603      	mov	r3, r0
 8002658:	b970      	cbnz	r0, 8002678 <HAL_I2C_Master_Receive_DMA+0xbc>
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800265a:	682a      	ldr	r2, [r5, #0]
 800265c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002660:	602a      	str	r2, [r5, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002662:	682a      	ldr	r2, [r5, #0]
 8002664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002668:	602a      	str	r2, [r5, #0]
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800266a:	686a      	ldr	r2, [r5, #4]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800266c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002670:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002674:	606a      	str	r2, [r5, #4]
 8002676:	e7ab      	b.n	80025d0 <HAL_I2C_Master_Receive_DMA+0x14>
    hi2c->Devaddress  = DevAddress;
    
    if(hi2c->XferSize > 0U)
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002678:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800267a:	f8df e054 	ldr.w	lr, [pc, #84]	; 80026d0 <HAL_I2C_Master_Receive_DMA+0x114>

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800267e:	4f13      	ldr	r7, [pc, #76]	; (80026cc <HAL_I2C_Master_Receive_DMA+0x110>)

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002680:	6406      	str	r6, [r0, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002682:	f105 0110 	add.w	r1, r5, #16
      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002686:	6446      	str	r6, [r0, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002688:	6486      	str	r6, [r0, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800268a:	6506      	str	r6, [r0, #80]	; 0x50
    hi2c->Devaddress  = DevAddress;
    
    if(hi2c->XferSize > 0U)
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800268c:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002690:	64c7      	str	r7, [r0, #76]	; 0x4c
      hi2c->hdmarx->XferM1CpltCallback = NULL;
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002692:	f001 fe7b 	bl	800438c <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800269e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a6:	601a      	str	r2, [r3, #0]
      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026a8:	685a      	ldr	r2, [r3, #4]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026aa:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026ae:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80026b2:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
    }
    
    return HAL_OK;
 80026ba:	4630      	mov	r0, r6

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e787      	b.n	80025d0 <HAL_I2C_Master_Receive_DMA+0x14>
 80026c0:	20000010 	andcs	r0, r0, r0, lsl r0
 80026c4:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 80026c8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 80026cc:	08003461 	stmdaeq	r0, {r0, r5, r6, sl, ip, sp}
 80026d0:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}

080026d4 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80026d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026d8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	9301      	str	r3, [sp, #4]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80026de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026e2:	2b20      	cmp	r3, #32
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80026e4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	d003      	beq.n	80026f0 <HAL_I2C_Slave_Transmit_DMA+0x1c>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2002      	movs	r0, #2
  }
}
 80026ea:	b002      	add	sp, #8
 80026ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  __IO uint32_t count = 0U;
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 80026f0:	b1f1      	cbz	r1, 8002730 <HAL_I2C_Slave_Transmit_DMA+0x5c>
 80026f2:	b1ea      	cbz	r2, 8002730 <HAL_I2C_Slave_Transmit_DMA+0x5c>
    {
      return  HAL_ERROR;
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_I2C_Slave_Transmit_DMA+0xe8>)
 80026f6:	4832      	ldr	r0, [pc, #200]	; (80027c0 <HAL_I2C_Slave_Transmit_DMA+0xec>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	08db      	lsrs	r3, r3, #3
 80026fc:	fba0 0303 	umull	r0, r3, r0, r3
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002706:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	e003      	b.n	8002716 <HAL_I2C_Slave_Transmit_DMA+0x42>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	6998      	ldr	r0, [r3, #24]
 8002712:	0785      	lsls	r5, r0, #30
 8002714:	d50e      	bpl.n	8002734 <HAL_I2C_Slave_Transmit_DMA+0x60>

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 8002716:	9b01      	ldr	r3, [sp, #4]
 8002718:	1e58      	subs	r0, r3, #1
 800271a:	9001      	str	r0, [sp, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f6      	bne.n	800270e <HAL_I2C_Slave_Transmit_DMA+0x3a>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002720:	2220      	movs	r2, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002724:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002728:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 800272c:	2003      	movs	r0, #3
 800272e:	e7dc      	b.n	80026ea <HAL_I2C_Slave_Transmit_DMA+0x16>
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002730:	2001      	movs	r0, #1
 8002732:	e7da      	b.n	80026ea <HAL_I2C_Slave_Transmit_DMA+0x16>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002734:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8002738:	2801      	cmp	r0, #1
 800273a:	d0d5      	beq.n	80026e8 <HAL_I2C_Slave_Transmit_DMA+0x14>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800273c:	6818      	ldr	r0, [r3, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273e:	2501      	movs	r5, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002740:	07c0      	lsls	r0, r0, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002742:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002746:	d402      	bmi.n	800274e <HAL_I2C_Slave_Transmit_DMA+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	4328      	orrs	r0, r5
 800274c:	6018      	str	r0, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800274e:	681d      	ldr	r5, [r3, #0]
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002750:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002752:	f8df c074 	ldr.w	ip, [pc, #116]	; 80027c8 <HAL_I2C_Slave_Transmit_DMA+0xf4>
    hi2c->XferSize    = hi2c->XferCount;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002756:	f8df e074 	ldr.w	lr, [pc, #116]	; 80027cc <HAL_I2C_Slave_Transmit_DMA+0xf8>
    
    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800275a:	4f1a      	ldr	r7, [pc, #104]	; (80027c4 <HAL_I2C_Slave_Transmit_DMA+0xf0>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800275c:	461e      	mov	r6, r3
 800275e:	f425 6300 	bic.w	r3, r5, #2048	; 0x800
 8002762:	f846 3b10 	str.w	r3, [r6], #16

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002766:	2500      	movs	r5, #0

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002768:	2320      	movs	r3, #32
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800276a:	f04f 0821 	mov.w	r8, #33	; 0x21
 800276e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002772:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002776:	6425      	str	r5, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002778:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277a:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800277e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002780:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8002782:	b29b      	uxth	r3, r3
 8002784:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->hdmatx->XferM1CpltCallback = NULL;
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
    hi2c->hdmatx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002786:	4632      	mov	r2, r6
    
    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002788:	6405      	str	r5, [r0, #64]	; 0x40
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 800278a:	6445      	str	r5, [r0, #68]	; 0x44
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800278c:	6485      	str	r5, [r0, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 800278e:	6505      	str	r5, [r0, #80]	; 0x50
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002790:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002794:	64c7      	str	r7, [r0, #76]	; 0x4c
    hi2c->hdmatx->XferM1CpltCallback = NULL;
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
    hi2c->hdmatx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002796:	f001 fdf9 	bl	800438c <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027a2:	601a      	str	r2, [r3, #0]

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027a4:	685a      	ldr	r2, [r3, #4]

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80027ae:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800

    return HAL_OK;
 80027b6:	4628      	mov	r0, r5
                process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80027b8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80027ba:	e796      	b.n	80026ea <HAL_I2C_Slave_Transmit_DMA+0x16>
 80027bc:	20000010 	andcs	r0, r0, r0, lsl r0
 80027c0:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 80027c4:	08003461 	stmdaeq	r0, {r0, r5, r6, sl, ip, sp}
 80027c8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 80027cc:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}

080027d0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80027d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	9301      	str	r3, [sp, #4]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80027da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027de:	2b20      	cmp	r3, #32
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80027e0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 80027e2:	d003      	beq.n	80027ec <HAL_I2C_Slave_Receive_DMA+0x1c>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2002      	movs	r0, #2
  }
}
 80027e6:	b002      	add	sp, #8
 80027e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ec:	460e      	mov	r6, r1
{
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 80027ee:	b1f1      	cbz	r1, 800282e <HAL_I2C_Slave_Receive_DMA+0x5e>
 80027f0:	b1ea      	cbz	r2, 800282e <HAL_I2C_Slave_Receive_DMA+0x5e>
    {
      return  HAL_ERROR;
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_I2C_Slave_Receive_DMA+0xe8>)
 80027f4:	4931      	ldr	r1, [pc, #196]	; (80028bc <HAL_I2C_Slave_Receive_DMA+0xec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	fba1 1303 	umull	r1, r3, r1, r3
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	e003      	b.n	8002814 <HAL_I2C_Slave_Receive_DMA+0x44>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800280c:	6821      	ldr	r1, [r4, #0]
 800280e:	698b      	ldr	r3, [r1, #24]
 8002810:	0798      	lsls	r0, r3, #30
 8002812:	d50e      	bpl.n	8002832 <HAL_I2C_Slave_Receive_DMA+0x62>

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	1e59      	subs	r1, r3, #1
 8002818:	9101      	str	r1, [sp, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f6      	bne.n	800280c <HAL_I2C_Slave_Receive_DMA+0x3c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 800281e:	2220      	movs	r2, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002820:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002822:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002826:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 800282a:	2003      	movs	r0, #3
 800282c:	e7db      	b.n	80027e6 <HAL_I2C_Slave_Receive_DMA+0x16>

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e7d9      	b.n	80027e6 <HAL_I2C_Slave_Receive_DMA+0x16>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002832:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d0d4      	beq.n	80027e4 <HAL_I2C_Slave_Receive_DMA+0x14>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283a:	680b      	ldr	r3, [r1, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283c:	2001      	movs	r0, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283e:	07db      	lsls	r3, r3, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002840:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002844:	d402      	bmi.n	800284c <HAL_I2C_Slave_Receive_DMA+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002846:	680b      	ldr	r3, [r1, #0]
 8002848:	4303      	orrs	r3, r0
 800284a:	600b      	str	r3, [r1, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800284c:	680b      	ldr	r3, [r1, #0]
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800284e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002850:	f8df c070 	ldr.w	ip, [pc, #112]	; 80028c4 <HAL_I2C_Slave_Receive_DMA+0xf4>
    hi2c->XferSize    = hi2c->XferCount;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002854:	f8df e070 	ldr.w	lr, [pc, #112]	; 80028c8 <HAL_I2C_Slave_Receive_DMA+0xf8>

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002858:	4f19      	ldr	r7, [pc, #100]	; (80028c0 <HAL_I2C_Slave_Receive_DMA+0xf0>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800285a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800285e:	f841 3b10 	str.w	r3, [r1], #16

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002862:	2500      	movs	r5, #0

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002864:	2320      	movs	r3, #32
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002866:	f04f 0822 	mov.w	r8, #34	; 0x22
 800286a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800286e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002872:	6425      	str	r5, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002874:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002876:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800287a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800287c:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 800287e:	b29b      	uxth	r3, r3
 8002880:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->hdmarx->XferM1CpltCallback = NULL;
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
    hi2c->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002882:	4632      	mov	r2, r6

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002884:	6405      	str	r5, [r0, #64]	; 0x40
    hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002886:	6445      	str	r5, [r0, #68]	; 0x44
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002888:	6485      	str	r5, [r0, #72]	; 0x48
    hi2c->hdmarx->XferAbortCallback = NULL;
 800288a:	6505      	str	r5, [r0, #80]	; 0x50
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800288c:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002890:	64c7      	str	r7, [r0, #76]	; 0x4c
    hi2c->hdmarx->XferM1CpltCallback = NULL;
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
    hi2c->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002892:	f001 fd7b 	bl	800438c <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800289e:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028a0:	685a      	ldr	r2, [r3, #4]

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80028aa:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800

    return HAL_OK;
 80028b2:	4628      	mov	r0, r5
              process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80028b4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80028b6:	e796      	b.n	80027e6 <HAL_I2C_Slave_Receive_DMA+0x16>
 80028b8:	20000010 	andcs	r0, r0, r0, lsl r0
 80028bc:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 80028c0:	08003461 	stmdaeq	r0, {r0, r5, r6, sl, ip, sp}
 80028c4:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 80028c8:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}

080028cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d0:	4605      	mov	r5, r0
 80028d2:	b082      	sub	sp, #8
 80028d4:	4698      	mov	r8, r3
 80028d6:	460e      	mov	r6, r1
 80028d8:	4617      	mov	r7, r2
 80028da:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028de:	f7fd fde1 	bl	80004a4 <HAL_GetTick>
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80028e6:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028e8:	4682      	mov	sl, r0
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80028ea:	d00b      	beq.n	8002904 <HAL_I2C_Mem_Write+0x38>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2602      	movs	r6, #2
  }
}
 80028ee:	4630      	mov	r0, r6
 80028f0:	b002      	add	sp, #8
 80028f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80028f6:	f7fd fdd5 	bl	80004a4 <HAL_GetTick>
 80028fa:	ebca 0000 	rsb	r0, sl, r0
 80028fe:	2819      	cmp	r0, #25
 8002900:	f200 808b 	bhi.w	8002a1a <HAL_I2C_Mem_Write+0x14e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002904:	682a      	ldr	r2, [r5, #0]
 8002906:	6993      	ldr	r3, [r2, #24]
 8002908:	43db      	mvns	r3, r3
 800290a:	f013 0402 	ands.w	r4, r3, #2
 800290e:	d0f2      	beq.n	80028f6 <HAL_I2C_Mem_Write+0x2a>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d0e9      	beq.n	80028ec <HAL_I2C_Mem_Write+0x20>
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002918:	6813      	ldr	r3, [r2, #0]
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	2101      	movs	r1, #1
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291c:	07db      	lsls	r3, r3, #31
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291e:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002922:	d402      	bmi.n	800292a <HAL_I2C_Mem_Write+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002924:	6813      	ldr	r3, [r2, #0]
 8002926:	430b      	orrs	r3, r1
 8002928:	6013      	str	r3, [r2, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800292a:	6813      	ldr	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292c:	495b      	ldr	r1, [pc, #364]	; (8002a9c <HAL_I2C_Mem_Write+0x1d0>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800292e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002932:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002936:	2040      	movs	r0, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	2400      	movs	r4, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800293a:	6013      	str	r3, [r2, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800293c:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002940:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	642c      	str	r4, [r5, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002946:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800294a:	62e9      	str	r1, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294c:	4631      	mov	r1, r6
 800294e:	9e0c      	ldr	r6, [sp, #48]	; 0x30

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8002950:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002954:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002956:	463a      	mov	r2, r7
 8002958:	e88d 0440 	stmia.w	sp, {r6, sl}
 800295c:	4643      	mov	r3, r8

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 800295e:	8528      	strh	r0, [r5, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002960:	4628      	mov	r0, r5
 8002962:	f7fe f9cf 	bl	8000d04 <I2C_RequestMemoryWrite>
 8002966:	4606      	mov	r6, r0
 8002968:	2800      	cmp	r0, #0
 800296a:	d171      	bne.n	8002a50 <HAL_I2C_Mem_Write+0x184>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    while(hi2c->XferSize > 0U)
 8002970:	2a00      	cmp	r2, #0
 8002972:	d02a      	beq.n	80029ca <HAL_I2C_Mem_Write+0xfe>
 8002974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002976:	3201      	adds	r2, #1
 8002978:	d159      	bne.n	8002a2e <HAL_I2C_Mem_Write+0x162>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	0610      	lsls	r0, r2, #24
 800297e:	d42e      	bmi.n	80029de <HAL_I2C_Mem_Write+0x112>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	0551      	lsls	r1, r2, #21
 8002984:	d5f9      	bpl.n	800297a <HAL_I2C_Mem_Write+0xae>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8002986:	2200      	movs	r2, #0
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002988:	f46f 6480 	mvn.w	r4, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800298c:	2004      	movs	r0, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800298e:	2120      	movs	r1, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002990:	615c      	str	r4, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002992:	6428      	str	r0, [r5, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002994:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8002998:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800299a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d075      	beq.n	8002a90 <HAL_I2C_Mem_Write+0x1c4>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 80029a4:	2603      	movs	r6, #3
 80029a6:	e7a2      	b.n	80028ee <HAL_I2C_Mem_Write+0x22>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	0752      	lsls	r2, r2, #29
 80029ac:	d457      	bmi.n	8002a5e <HAL_I2C_Mem_Write+0x192>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	0554      	lsls	r4, r2, #21
 80029b2:	d4e8      	bmi.n	8002986 <HAL_I2C_Mem_Write+0xba>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80029b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d05e      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x1ac>
 80029ba:	f7fd fd73 	bl	80004a4 <HAL_GetTick>
 80029be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029c0:	ebca 0000 	rsb	r0, sl, r0
 80029c4:	4283      	cmp	r3, r0
 80029c6:	d357      	bcc.n	8002a78 <HAL_I2C_Mem_Write+0x1ac>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80029cc:	3201      	adds	r2, #1
 80029ce:	d1eb      	bne.n	80029a8 <HAL_I2C_Mem_Write+0xdc>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	0750      	lsls	r0, r2, #29
 80029d4:	d443      	bmi.n	8002a5e <HAL_I2C_Mem_Write+0x192>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	0551      	lsls	r1, r2, #21
 80029da:	d4d4      	bmi.n	8002986 <HAL_I2C_Mem_Write+0xba>
 80029dc:	e7f8      	b.n	80029d0 <HAL_I2C_Mem_Write+0x104>
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029de:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80029e0:	8d2c      	ldrh	r4, [r5, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029e2:	1c42      	adds	r2, r0, #1
 80029e4:	626a      	str	r2, [r5, #36]	; 0x24
 80029e6:	7802      	ldrb	r2, [r0, #0]
 80029e8:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
      hi2c->XferCount--;
 80029ea:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 80029ec:	3901      	subs	r1, #1
 80029ee:	b289      	uxth	r1, r1
 80029f0:	8569      	strh	r1, [r5, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029f2:	6959      	ldr	r1, [r3, #20]
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferSize--;
 80029f4:	1e62      	subs	r2, r4, #1
 80029f6:	b292      	uxth	r2, r2
      hi2c->XferCount--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029f8:	074f      	lsls	r7, r1, #29
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferSize--;
 80029fa:	852a      	strh	r2, [r5, #40]	; 0x28
      hi2c->XferCount--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029fc:	d5b8      	bpl.n	8002970 <HAL_I2C_Mem_Write+0xa4>
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	d0e3      	beq.n	80029ca <HAL_I2C_Mem_Write+0xfe>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002a02:	1c82      	adds	r2, r0, #2
 8002a04:	626a      	str	r2, [r5, #36]	; 0x24
 8002a06:	7842      	ldrb	r2, [r0, #1]
 8002a08:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
        hi2c->XferCount--;
 8002a0a:	8d69      	ldrh	r1, [r5, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferSize--;
 8002a0c:	1ea2      	subs	r2, r4, #2
        hi2c->XferCount--;
 8002a0e:	3901      	subs	r1, #1

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferSize--;
 8002a10:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8002a12:	b289      	uxth	r1, r1

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferSize--;
 8002a14:	852a      	strh	r2, [r5, #40]	; 0x28
        hi2c->XferCount--;
 8002a16:	8569      	strh	r1, [r5, #42]	; 0x2a
 8002a18:	e7aa      	b.n	8002970 <HAL_I2C_Mem_Write+0xa4>
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002a1a:	2320      	movs	r3, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a1c:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1e:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002a22:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8002a26:	2602      	movs	r6, #2
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
 8002a2c:	e75f      	b.n	80028ee <HAL_I2C_Mem_Write+0x22>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	0612      	lsls	r2, r2, #24
 8002a32:	d4d4      	bmi.n	80029de <HAL_I2C_Mem_Write+0x112>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	0554      	lsls	r4, r2, #21
 8002a38:	d4a5      	bmi.n	8002986 <HAL_I2C_Mem_Write+0xba>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a3c:	b1e3      	cbz	r3, 8002a78 <HAL_I2C_Mem_Write+0x1ac>
 8002a3e:	f7fd fd31 	bl	80004a4 <HAL_GetTick>
 8002a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a44:	ebca 0000 	rsb	r0, sl, r0
 8002a48:	4283      	cmp	r3, r0
 8002a4a:	d315      	bcc.n	8002a78 <HAL_I2C_Mem_Write+0x1ac>
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	e791      	b.n	8002974 <HAL_I2C_Mem_Write+0xa8>
    hi2c->XferSize    = hi2c->XferCount;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a50:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a52:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hi2c->XferSize    = hi2c->XferCount;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d1a4      	bne.n	80029a4 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
        return HAL_ERROR;
 8002a5a:	2601      	movs	r6, #1
 8002a5c:	e747      	b.n	80028ee <HAL_I2C_Mem_Write+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a5e:	681a      	ldr	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	2100      	movs	r1, #0
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;

    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	2020      	movs	r0, #32
        return HAL_TIMEOUT;
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6e:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8002a76:	e73a      	b.n	80028ee <HAL_I2C_Mem_Write+0x22>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a78:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a7a:	2200      	movs	r2, #0
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	f043 0320 	orr.w	r3, r3, #32
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002a80:	2120      	movs	r1, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a82:	642b      	str	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a84:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a88:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002a8a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 8002a8e:	e786      	b.n	800299e <HAL_I2C_Mem_Write+0xd2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a90:	682a      	ldr	r2, [r5, #0]
 8002a92:	6813      	ldr	r3, [r2, #0]
 8002a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e7de      	b.n	8002a5a <HAL_I2C_Mem_Write+0x18e>
 8002a9c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08002aa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa4:	4682      	mov	sl, r0
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	4699      	mov	r9, r3
 8002aaa:	460f      	mov	r7, r1
 8002aac:	4690      	mov	r8, r2
 8002aae:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
 8002ab2:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab4:	f7fd fcf6 	bl	80004a4 <HAL_GetTick>
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002ab8:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 8002abc:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002abe:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002ac0:	d009      	beq.n	8002ad6 <HAL_I2C_Mem_Read+0x36>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2702      	movs	r7, #2
  }
}
 8002ac4:	4638      	mov	r0, r7
 8002ac6:	b007      	add	sp, #28
 8002ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002acc:	f7fd fcea 	bl	80004a4 <HAL_GetTick>
 8002ad0:	1b00      	subs	r0, r0, r4
 8002ad2:	2819      	cmp	r0, #25
 8002ad4:	d841      	bhi.n	8002b5a <HAL_I2C_Mem_Read+0xba>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002ad6:	f8da 2000 	ldr.w	r2, [sl]
 8002ada:	6993      	ldr	r3, [r2, #24]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	f013 0b02 	ands.w	fp, r3, #2
 8002ae2:	d0f3      	beq.n	8002acc <HAL_I2C_Mem_Read+0x2c>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae4:	f89a 303c 	ldrb.w	r3, [sl, #60]	; 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d0ea      	beq.n	8002ac2 <HAL_I2C_Mem_Read+0x22>
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aec:	6813      	ldr	r3, [r2, #0]
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aee:	2101      	movs	r1, #1
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af0:	07d8      	lsls	r0, r3, #31
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af2:	f88a 103c 	strb.w	r1, [sl, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af6:	d402      	bmi.n	8002afe <HAL_I2C_Mem_Read+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af8:	6813      	ldr	r3, [r2, #0]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	6013      	str	r3, [r2, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002afe:	6813      	ldr	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b00:	49b5      	ldr	r1, [pc, #724]	; (8002dd8 <HAL_I2C_Mem_Read+0x338>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b06:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b0a:	2040      	movs	r0, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	f04f 0b00 	mov.w	fp, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b10:	6013      	str	r3, [r2, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b12:	f88a e03d 	strb.w	lr, [sl, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b16:	f88a 003e 	strb.w	r0, [sl, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1a:	f8ca b040 	str.w	fp, [sl, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002b1e:	f8aa 602a 	strh.w	r6, [sl, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b22:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002b26:	f8ba 002a 	ldrh.w	r0, [sl, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b2c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b30:	4639      	mov	r1, r7
 8002b32:	9500      	str	r5, [sp, #0]
 8002b34:	9401      	str	r4, [sp, #4]
 8002b36:	4642      	mov	r2, r8

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8002b38:	f8aa 0028 	strh.w	r0, [sl, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	4650      	mov	r0, sl
 8002b40:	f7fe f9ba 	bl	8000eb8 <I2C_RequestMemoryRead>
 8002b44:	4607      	mov	r7, r0
 8002b46:	b198      	cbz	r0, 8002b70 <HAL_I2C_Mem_Read+0xd0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b48:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4c:	f88a b03c 	strb.w	fp, [sl, #60]	; 0x3c
    hi2c->XferSize    = hi2c->XferCount;

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	f000 80f2 	beq.w	8002d3a <HAL_I2C_Mem_Read+0x29a>
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
            {
              return HAL_TIMEOUT;
 8002b56:	2703      	movs	r7, #3
 8002b58:	e7b4      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x24>
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002b5a:	2320      	movs	r3, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b5c:	f8ca b030 	str.w	fp, [sl, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b60:	f88a b03c 	strb.w	fp, [sl, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002b64:	f88a 303d 	strb.w	r3, [sl, #61]	; 0x3d
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8002b68:	2702      	movs	r7, #2
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6a:	f88a b03e 	strb.w	fp, [sl, #62]	; 0x3e
 8002b6e:	e7a9      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x24>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(hi2c->XferSize == 0U)
 8002b70:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b74:	f8da 2000 	ldr.w	r2, [sl]
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(hi2c->XferSize == 0U)
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 810b 	bne.w	8002d94 <HAL_I2C_Mem_Read+0x2f4>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	6951      	ldr	r1, [r2, #20]
 8002b82:	9102      	str	r1, [sp, #8]
 8002b84:	6991      	ldr	r1, [r2, #24]
 8002b86:	9102      	str	r1, [sp, #8]
 8002b88:	9902      	ldr	r1, [sp, #8]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b8a:	6811      	ldr	r1, [r2, #0]
 8002b8c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002b90:	6011      	str	r1, [r2, #0]
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(hi2c->XferSize > 0U)
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8109 	beq.w	8002daa <HAL_I2C_Mem_Read+0x30a>
    {
      if(hi2c->XferSize <= 3U)
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	f200 8086 	bhi.w	8002caa <HAL_I2C_Mem_Read+0x20a>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	f000 80db 	beq.w	8002d5a <HAL_I2C_Mem_Read+0x2ba>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
          hi2c->XferCount--;
        }
        /* Two bytes */
        else if(Size == 2U)
 8002ba4:	2e02      	cmp	r6, #2
 8002ba6:	d058      	beq.n	8002c5a <HAL_I2C_Mem_Read+0x1ba>
 8002ba8:	1c69      	adds	r1, r5, #1
 8002baa:	f8da 2000 	ldr.w	r2, [sl]
 8002bae:	d15c      	bne.n	8002c6a <HAL_I2C_Mem_Read+0x1ca>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002bb0:	6953      	ldr	r3, [r2, #20]
 8002bb2:	075b      	lsls	r3, r3, #29
 8002bb4:	d5fc      	bpl.n	8002bb0 <HAL_I2C_Mem_Read+0x110>
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002bb6:	6813      	ldr	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bb8:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc0:	6013      	str	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bc2:	6913      	ldr	r3, [r2, #16]
 8002bc4:	1c4a      	adds	r2, r1, #1
 8002bc6:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 8002bca:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
          hi2c->XferCount--;
 8002bcc:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002bd0:	f8ba 2028 	ldrh.w	r2, [sl, #40]	; 0x28
          hi2c->XferCount--;
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29b      	uxth	r3, r3
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002bd8:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002bda:	f8aa 302a 	strh.w	r3, [sl, #42]	; 0x2a
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002bde:	f8aa 2028 	strh.w	r2, [sl, #40]	; 0x28
 8002be2:	1c69      	adds	r1, r5, #1
 8002be4:	f8da 2000 	ldr.w	r2, [sl]
 8002be8:	d154      	bne.n	8002c94 <HAL_I2C_Mem_Read+0x1f4>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002bea:	6953      	ldr	r3, [r2, #20]
 8002bec:	075b      	lsls	r3, r3, #29
 8002bee:	d5fc      	bpl.n	8002bea <HAL_I2C_Mem_Read+0x14a>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002bf0:	6813      	ldr	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bf2:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfa:	6013      	str	r3, [r2, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bfc:	6913      	ldr	r3, [r2, #16]
 8002bfe:	1c4a      	adds	r2, r1, #1
 8002c00:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 8002c04:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
          hi2c->XferCount--;
 8002c06:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002c0a:	f8ba 1028 	ldrh.w	r1, [sl, #40]	; 0x28
          hi2c->XferCount--;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c0e:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8002c12:	f8da 2000 	ldr.w	r2, [sl]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
          hi2c->XferCount--;
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f8aa 302a 	strh.w	r3, [sl, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c1e:	6912      	ldr	r2, [r2, #16]
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002c20:	1e4b      	subs	r3, r1, #1
          hi2c->XferCount--;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c22:	1c41      	adds	r1, r0, #1
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002c24:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
          hi2c->XferCount--;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c28:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
 8002c2c:	7002      	strb	r2, [r0, #0]

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002c2e:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
          hi2c->XferCount--;
 8002c32:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002c36:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8002c38:	3a01      	subs	r2, #1

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002c3a:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8002c3c:	b292      	uxth	r2, r2

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 8002c3e:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
          hi2c->XferCount--;
 8002c42:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
 8002c46:	e7a4      	b.n	8002b92 <HAL_I2C_Mem_Read+0xf2>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002c48:	6953      	ldr	r3, [r2, #20]
 8002c4a:	0758      	lsls	r0, r3, #29
 8002c4c:	d4d0      	bmi.n	8002bf0 <HAL_I2C_Mem_Read+0x150>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c4e:	b1ad      	cbz	r5, 8002c7c <HAL_I2C_Mem_Read+0x1dc>
 8002c50:	f7fd fc28 	bl	80004a4 <HAL_GetTick>
 8002c54:	1b00      	subs	r0, r0, r4
 8002c56:	4285      	cmp	r5, r0
 8002c58:	d310      	bcc.n	8002c7c <HAL_I2C_Mem_Read+0x1dc>
 8002c5a:	1c69      	adds	r1, r5, #1
 8002c5c:	f8da 2000 	ldr.w	r2, [sl]
 8002c60:	d1f2      	bne.n	8002c48 <HAL_I2C_Mem_Read+0x1a8>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002c62:	6953      	ldr	r3, [r2, #20]
 8002c64:	075b      	lsls	r3, r3, #29
 8002c66:	d5fc      	bpl.n	8002c62 <HAL_I2C_Mem_Read+0x1c2>
 8002c68:	e7c2      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x150>
 8002c6a:	6953      	ldr	r3, [r2, #20]
 8002c6c:	0758      	lsls	r0, r3, #29
 8002c6e:	d4a2      	bmi.n	8002bb6 <HAL_I2C_Mem_Read+0x116>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c70:	b125      	cbz	r5, 8002c7c <HAL_I2C_Mem_Read+0x1dc>
 8002c72:	f7fd fc17 	bl	80004a4 <HAL_GetTick>
 8002c76:	1b00      	subs	r0, r0, r4
 8002c78:	4285      	cmp	r5, r0
 8002c7a:	d295      	bcs.n	8002ba8 <HAL_I2C_Mem_Read+0x108>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c7c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002c7e:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c80:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c84:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002c88:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
          hi2c->XferCount--;

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
          {
            return HAL_TIMEOUT;
 8002c8c:	2703      	movs	r7, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8e:	f88a 303e 	strb.w	r3, [sl, #62]	; 0x3e
 8002c92:	e717      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x24>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002c94:	6953      	ldr	r3, [r2, #20]
 8002c96:	0758      	lsls	r0, r3, #29
 8002c98:	d4aa      	bmi.n	8002bf0 <HAL_I2C_Mem_Read+0x150>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c9a:	2d00      	cmp	r5, #0
 8002c9c:	d0ee      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x1dc>
 8002c9e:	f7fd fc01 	bl	80004a4 <HAL_GetTick>
 8002ca2:	1b00      	subs	r0, r0, r4
 8002ca4:	4285      	cmp	r5, r0
 8002ca6:	d29c      	bcs.n	8002be2 <HAL_I2C_Mem_Read+0x142>
 8002ca8:	e7e8      	b.n	8002c7c <HAL_I2C_Mem_Read+0x1dc>
 8002caa:	b945      	cbnz	r5, 8002cbe <HAL_I2C_Mem_Read+0x21e>
 8002cac:	e02d      	b.n	8002d0a <HAL_I2C_Mem_Read+0x26a>
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	06d0      	lsls	r0, r2, #27
 8002cb2:	d444      	bmi.n	8002d3e <HAL_I2C_Mem_Read+0x29e>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002cb4:	f7fd fbf6 	bl	80004a4 <HAL_GetTick>
 8002cb8:	1b00      	subs	r0, r0, r4
 8002cba:	4285      	cmp	r5, r0
 8002cbc:	d32d      	bcc.n	8002d1a <HAL_I2C_Mem_Read+0x27a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cbe:	f8da 3000 	ldr.w	r3, [sl]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	0652      	lsls	r2, r2, #25
 8002cc6:	d5f2      	bpl.n	8002cae <HAL_I2C_Mem_Read+0x20e>
            return HAL_ERROR;
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002cc8:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	1c51      	adds	r1, r2, #1
 8002cd0:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
 8002cd4:	7013      	strb	r3, [r2, #0]
        hi2c->XferSize--;
        hi2c->XferCount--;
 8002cd6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cda:	f8da 1000 	ldr.w	r1, [sl]
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        hi2c->XferSize--;
 8002cde:	f8ba 2028 	ldrh.w	r2, [sl, #40]	; 0x28
        hi2c->XferCount--;
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f8aa 302a 	strh.w	r3, [sl, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cea:	6948      	ldr	r0, [r1, #20]
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        hi2c->XferSize--;
 8002cec:	1e53      	subs	r3, r2, #1
 8002cee:	b29b      	uxth	r3, r3
        hi2c->XferCount--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cf0:	0742      	lsls	r2, r0, #29
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        hi2c->XferSize--;
 8002cf2:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
        hi2c->XferCount--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cf6:	f57f af4c 	bpl.w	8002b92 <HAL_I2C_Mem_Read+0xf2>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002cfa:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8002cfe:	690a      	ldr	r2, [r1, #16]
 8002d00:	1c59      	adds	r1, r3, #1
 8002d02:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e791      	b.n	8002c2e <HAL_I2C_Mem_Read+0x18e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d0a:	f8da 3000 	ldr.w	r3, [sl]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	0651      	lsls	r1, r2, #25
 8002d12:	d4d9      	bmi.n	8002cc8 <HAL_I2C_Mem_Read+0x228>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	06d1      	lsls	r1, r2, #27
 8002d18:	d411      	bmi.n	8002d3e <HAL_I2C_Mem_Read+0x29e>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002d1e:	2220      	movs	r2, #32
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	4313      	orrs	r3, r2
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d22:	2100      	movs	r1, #0
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d28:	f88a 103c 	strb.w	r1, [sl, #60]	; 0x3c

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      hi2c->State= HAL_I2C_STATE_READY;
 8002d2c:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
        if(hi2c->XferSize== 1U)
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002d30:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	f43f af0e 	beq.w	8002b56 <HAL_I2C_Mem_Read+0xb6>
            {
              return HAL_TIMEOUT;
            }
            else
            {
              return HAL_ERROR;
 8002d3a:	2701      	movs	r7, #1
 8002d3c:	e6c2      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x24>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3e:	2200      	movs	r2, #0
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d40:	f06f 0010 	mvn.w	r0, #16

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8002d44:	2120      	movs	r1, #32
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d46:	6158      	str	r0, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d48:	f8ca 2040 	str.w	r2, [sl, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d4c:	f88a 203c 	strb.w	r2, [sl, #60]	; 0x3c
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d50:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002d54:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
 8002d58:	e7ea      	b.n	8002d30 <HAL_I2C_Mem_Read+0x290>
 8002d5a:	b945      	cbnz	r5, 8002d6e <HAL_I2C_Mem_Read+0x2ce>
 8002d5c:	e014      	b.n	8002d88 <HAL_I2C_Mem_Read+0x2e8>
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	06d2      	lsls	r2, r2, #27
 8002d62:	d4ec      	bmi.n	8002d3e <HAL_I2C_Mem_Read+0x29e>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d64:	f7fd fb9e 	bl	80004a4 <HAL_GetTick>
 8002d68:	1b00      	subs	r0, r0, r4
 8002d6a:	4285      	cmp	r5, r0
 8002d6c:	d3d5      	bcc.n	8002d1a <HAL_I2C_Mem_Read+0x27a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d6e:	f8da 3000 	ldr.w	r3, [sl]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	0651      	lsls	r1, r2, #25
 8002d76:	d5f2      	bpl.n	8002d5e <HAL_I2C_Mem_Read+0x2be>
              return HAL_ERROR;
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002d78:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	1c51      	adds	r1, r2, #1
 8002d80:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
 8002d84:	7013      	strb	r3, [r2, #0]
 8002d86:	e752      	b.n	8002c2e <HAL_I2C_Mem_Read+0x18e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d88:	f8da 3000 	ldr.w	r3, [sl]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	0650      	lsls	r0, r2, #25
 8002d90:	d5c0      	bpl.n	8002d14 <HAL_I2C_Mem_Read+0x274>
 8002d92:	e7f1      	b.n	8002d78 <HAL_I2C_Mem_Read+0x2d8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 1U)
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d010      	beq.n	8002dba <HAL_I2C_Mem_Read+0x31a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 2U)
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d01f      	beq.n	8002ddc <HAL_I2C_Mem_Read+0x33c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9c:	9005      	str	r0, [sp, #20]
 8002d9e:	6951      	ldr	r1, [r2, #20]
 8002da0:	9105      	str	r1, [sp, #20]
 8002da2:	6992      	ldr	r2, [r2, #24]
 8002da4:	9205      	str	r2, [sp, #20]
 8002da6:	9a05      	ldr	r2, [sp, #20]
 8002da8:	e6f3      	b.n	8002b92 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferCount--;
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	2220      	movs	r2, #32
 8002dac:	f88a 203d 	strb.w	r2, [sl, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	f88a 303c 	strb.w	r3, [sl, #60]	; 0x3c
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	f88a 303e 	strb.w	r3, [sl, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8002db8:	e684      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x24>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 1U)
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002dba:	6811      	ldr	r1, [r2, #0]
 8002dbc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002dc0:	6011      	str	r1, [r2, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc2:	9003      	str	r0, [sp, #12]
 8002dc4:	6951      	ldr	r1, [r2, #20]
 8002dc6:	9103      	str	r1, [sp, #12]
 8002dc8:	6991      	ldr	r1, [r2, #24]
 8002dca:	9103      	str	r1, [sp, #12]
 8002dcc:	9903      	ldr	r1, [sp, #12]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002dce:	6811      	ldr	r1, [r2, #0]
 8002dd0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	e6dc      	b.n	8002b92 <HAL_I2C_Mem_Read+0xf2>
 8002dd8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
    }
    else if(hi2c->XferSize == 2U)
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002ddc:	6811      	ldr	r1, [r2, #0]
 8002dde:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002de2:	6011      	str	r1, [r2, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002de4:	6811      	ldr	r1, [r2, #0]
 8002de6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002dea:	6011      	str	r1, [r2, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dec:	9004      	str	r0, [sp, #16]
 8002dee:	6951      	ldr	r1, [r2, #20]
 8002df0:	9104      	str	r1, [sp, #16]
 8002df2:	6992      	ldr	r2, [r2, #24]
 8002df4:	9204      	str	r2, [sp, #16]
 8002df6:	9a04      	ldr	r2, [sp, #16]
 8002df8:	e6cb      	b.n	8002b92 <HAL_I2C_Mem_Read+0xf2>
 8002dfa:	bf00      	nop

08002dfc <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002e02:	2400      	movs	r4, #0
 8002e04:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002e0a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  __IO uint32_t count = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	2c20      	cmp	r4, #32
 8002e10:	d003      	beq.n	8002e1a <HAL_I2C_Mem_Write_IT+0x1e>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2002      	movs	r0, #2
  }
}
 8002e14:	b002      	add	sp, #8
 8002e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8002e1a:	4c28      	ldr	r4, [pc, #160]	; (8002ebc <HAL_I2C_Mem_Write_IT+0xc0>)
 8002e1c:	4d28      	ldr	r5, [pc, #160]	; (8002ec0 <HAL_I2C_Mem_Write_IT+0xc4>)
 8002e1e:	6824      	ldr	r4, [r4, #0]
 8002e20:	08e4      	lsrs	r4, r4, #3
 8002e22:	fba5 5404 	umull	r5, r4, r5, r4
 8002e26:	0a24      	lsrs	r4, r4, #8
 8002e28:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002e2c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002e30:	9401      	str	r4, [sp, #4]
 8002e32:	e003      	b.n	8002e3c <HAL_I2C_Mem_Write_IT+0x40>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e34:	6804      	ldr	r4, [r0, #0]
 8002e36:	69a5      	ldr	r5, [r4, #24]
 8002e38:	07af      	lsls	r7, r5, #30
 8002e3a:	d50c      	bpl.n	8002e56 <HAL_I2C_Mem_Write_IT+0x5a>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 8002e3c:	9c01      	ldr	r4, [sp, #4]
 8002e3e:	1e65      	subs	r5, r4, #1
 8002e40:	9501      	str	r5, [sp, #4]
 8002e42:	2c00      	cmp	r4, #0
 8002e44:	d1f6      	bne.n	8002e34 <HAL_I2C_Mem_Write_IT+0x38>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002e46:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e48:	6304      	str	r4, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002e4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 8002e52:	2003      	movs	r0, #3
 8002e54:	e7de      	b.n	8002e14 <HAL_I2C_Mem_Write_IT+0x18>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e56:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8002e5a:	2d01      	cmp	r5, #1
 8002e5c:	d0d9      	beq.n	8002e12 <HAL_I2C_Mem_Write_IT+0x16>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e5e:	6825      	ldr	r5, [r4, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e60:	2701      	movs	r7, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e62:	07ed      	lsls	r5, r5, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e64:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e68:	d402      	bmi.n	8002e70 <HAL_I2C_Mem_Write_IT+0x74>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6a:	6825      	ldr	r5, [r4, #0]
 8002e6c:	433d      	orrs	r5, r7
 8002e6e:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e70:	6827      	ldr	r7, [r4, #0]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e72:	f8df e050 	ldr.w	lr, [pc, #80]	; 8002ec4 <HAL_I2C_Mem_Write_IT+0xc8>
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e76:	2500      	movs	r5, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e78:	f427 6700 	bic.w	r7, r7, #2048	; 0x800

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8002e7c:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8002e80:	f04f 0c40 	mov.w	ip, #64	; 0x40
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e84:	6027      	str	r7, [r4, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8002e86:	f880 803d 	strb.w	r8, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8002e8a:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8e:	6405      	str	r5, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
 8002e90:	8546      	strh	r6, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e92:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 8002e96:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 8002e98:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 8002e9a:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount = 0U;
 8002e9c:	6505      	str	r5, [r0, #80]	; 0x50

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e9e:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8002ea0:	9a08      	ldr	r2, [sp, #32]
 8002ea2:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->Memaddress = MemAddress;
    hi2c->MemaddSize = MemAddSize;
    hi2c->EventCount = 0U;

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
 8002ea8:	8506      	strh	r6, [r0, #40]	; 0x28
    hi2c->Memaddress = MemAddress;
    hi2c->MemaddSize = MemAddSize;
    hi2c->EventCount = 0U;

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002eaa:	6023      	str	r3, [r4, #0]
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eac:	6863      	ldr	r3, [r4, #4]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eae:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700

    return HAL_OK;
 8002eb6:	4628      	mov	r0, r5
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eb8:	6063      	str	r3, [r4, #4]

    return HAL_OK;
 8002eba:	e7ab      	b.n	8002e14 <HAL_I2C_Mem_Write_IT+0x18>
 8002ebc:	20000010 	andcs	r0, r0, r0, lsl r0
 8002ec0:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 8002ec4:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08002ec8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ecc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002ece:	2400      	movs	r4, #0
 8002ed0:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002ed6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  __IO uint32_t count = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	2c20      	cmp	r4, #32
 8002edc:	d003      	beq.n	8002ee6 <HAL_I2C_Mem_Read_IT+0x1e>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2002      	movs	r0, #2
  }
}
 8002ee0:	b002      	add	sp, #8
 8002ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8002ee6:	4c2c      	ldr	r4, [pc, #176]	; (8002f98 <HAL_I2C_Mem_Read_IT+0xd0>)
 8002ee8:	4d2c      	ldr	r5, [pc, #176]	; (8002f9c <HAL_I2C_Mem_Read_IT+0xd4>)
 8002eea:	6824      	ldr	r4, [r4, #0]
 8002eec:	08e4      	lsrs	r4, r4, #3
 8002eee:	fba5 5404 	umull	r5, r4, r5, r4
 8002ef2:	0a24      	lsrs	r4, r4, #8
 8002ef4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002ef8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002efc:	9401      	str	r4, [sp, #4]
 8002efe:	e003      	b.n	8002f08 <HAL_I2C_Mem_Read_IT+0x40>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002f00:	6804      	ldr	r4, [r0, #0]
 8002f02:	69a5      	ldr	r5, [r4, #24]
 8002f04:	07af      	lsls	r7, r5, #30
 8002f06:	d50c      	bpl.n	8002f22 <HAL_I2C_Mem_Read_IT+0x5a>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 8002f08:	9c01      	ldr	r4, [sp, #4]
 8002f0a:	1e65      	subs	r5, r4, #1
 8002f0c:	9501      	str	r5, [sp, #4]
 8002f0e:	2c00      	cmp	r4, #0
 8002f10:	d1f6      	bne.n	8002f00 <HAL_I2C_Mem_Read_IT+0x38>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002f12:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f14:	6304      	str	r4, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002f1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 8002f1e:	2003      	movs	r0, #3
 8002f20:	e7de      	b.n	8002ee0 <HAL_I2C_Mem_Read_IT+0x18>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f22:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8002f26:	2d01      	cmp	r5, #1
 8002f28:	d0d9      	beq.n	8002ede <HAL_I2C_Mem_Read_IT+0x16>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2a:	6825      	ldr	r5, [r4, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2c:	2701      	movs	r7, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2e:	07ed      	lsls	r5, r5, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f30:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f34:	d402      	bmi.n	8002f3c <HAL_I2C_Mem_Read_IT+0x74>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f36:	6825      	ldr	r5, [r4, #0]
 8002f38:	433d      	orrs	r5, r7
 8002f3a:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f3c:	6827      	ldr	r7, [r4, #0]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3e:	f8df e060 	ldr.w	lr, [pc, #96]	; 8002fa0 <HAL_I2C_Mem_Read_IT+0xd8>
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f42:	2500      	movs	r5, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f44:	f427 6700 	bic.w	r7, r7, #2048	; 0x800

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8002f48:	f04f 0822 	mov.w	r8, #34	; 0x22
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8002f4c:	f04f 0c40 	mov.w	ip, #64	; 0x40
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f50:	6027      	str	r7, [r4, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8002f52:	f880 803d 	strb.w	r8, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8002f56:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5a:	6405      	str	r5, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
 8002f5c:	8546      	strh	r6, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5e:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 8002f62:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 8002f64:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 8002f66:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount = 0U;
 8002f68:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002f6a:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8002f6c:	9a08      	ldr	r2, [sp, #32]
 8002f6e:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->Memaddress = MemAddress;
    hi2c->MemaddSize = MemAddSize;
    hi2c->EventCount = 0U;

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
 8002f74:	8506      	strh	r6, [r0, #40]	; 0x28
    hi2c->Memaddress = MemAddress;
    hi2c->MemaddSize = MemAddSize;
    hi2c->EventCount = 0U;

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002f76:	6023      	str	r3, [r4, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6023      	str	r3, [r4, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f80:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

    if(hi2c->XferSize > 0U)
 8002f84:	b12e      	cbz	r6, 8002f92 <HAL_I2C_Mem_Read_IT+0xca>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      
      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    }
    return HAL_OK;
 8002f8c:	4628      	mov	r0, r5
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      
      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f8e:	6063      	str	r3, [r4, #4]
 8002f90:	e7a6      	b.n	8002ee0 <HAL_I2C_Mem_Read_IT+0x18>
    }
    return HAL_OK;
 8002f92:	4630      	mov	r0, r6
 8002f94:	e7a4      	b.n	8002ee0 <HAL_I2C_Mem_Read_IT+0x18>
 8002f96:	bf00      	nop
 8002f98:	20000010 	andcs	r0, r0, r0, lsl r0
 8002f9c:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 8002fa0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08002fa4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa8:	4604      	mov	r4, r0
 8002faa:	b084      	sub	sp, #16
  __IO uint32_t count = 0U;
 8002fac:	2000      	movs	r0, #0
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002fae:	461e      	mov	r6, r3
 8002fb0:	4688      	mov	r8, r1
 8002fb2:	4617      	mov	r7, r2
  __IO uint32_t count = 0U;
 8002fb4:	9002      	str	r0, [sp, #8]
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002fb6:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  __IO uint32_t count = 0U;

  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fba:	f7fd fa73 	bl	80004a4 <HAL_GetTick>
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d003      	beq.n	8002fce <HAL_I2C_Mem_Write_DMA+0x2a>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2002      	movs	r0, #2
  }
}
 8002fc8:	b004      	add	sp, #16
 8002fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_I2C_Mem_Write_DMA+0x124>)
 8002fd0:	4a3e      	ldr	r2, [pc, #248]	; (80030cc <HAL_I2C_Mem_Write_DMA+0x128>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fe0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fe4:	4681      	mov	r9, r0
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	e003      	b.n	8002ff2 <HAL_I2C_Mem_Write_DMA+0x4e>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002fea:	6822      	ldr	r2, [r4, #0]
 8002fec:	6993      	ldr	r3, [r2, #24]
 8002fee:	0799      	lsls	r1, r3, #30
 8002ff0:	d50c      	bpl.n	800300c <HAL_I2C_Mem_Write_DMA+0x68>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 8002ff2:	9b02      	ldr	r3, [sp, #8]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	9202      	str	r2, [sp, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f6      	bne.n	8002fea <HAL_I2C_Mem_Write_DMA+0x46>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8002ffc:	2220      	movs	r2, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ffe:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003000:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8003004:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 8003008:	2003      	movs	r0, #3
 800300a:	e7dd      	b.n	8002fc8 <HAL_I2C_Mem_Write_DMA+0x24>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d0d8      	beq.n	8002fc6 <HAL_I2C_Mem_Write_DMA+0x22>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	6813      	ldr	r3, [r2, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	2101      	movs	r1, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003018:	07db      	lsls	r3, r3, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301e:	d402      	bmi.n	8003026 <HAL_I2C_Mem_Write_DMA+0x82>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003020:	6813      	ldr	r3, [r2, #0]
 8003022:	430b      	orrs	r3, r1
 8003024:	6013      	str	r3, [r2, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003026:	6813      	ldr	r3, [r2, #0]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003028:	4929      	ldr	r1, [pc, #164]	; (80030d0 <HAL_I2C_Mem_Write_DMA+0x12c>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800302a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800302e:	6013      	str	r3, [r2, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003030:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003034:	2040      	movs	r0, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003036:	f04f 0a00 	mov.w	sl, #0

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 800303a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800303c:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8003040:	6263      	str	r3, [r4, #36]	; 0x24

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003042:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
 8003046:	8525      	strh	r5, [r4, #40]	; 0x28
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
 800304c:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800304e:	62e1      	str	r1, [r4, #44]	; 0x2c

    if(hi2c->XferSize > 0U)
 8003050:	b90d      	cbnz	r5, 8003056 <HAL_I2C_Mem_Write_DMA+0xb2>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
    }
    return HAL_OK;
 8003052:	4628      	mov	r0, r5
 8003054:	e7b8      	b.n	8002fc8 <HAL_I2C_Mem_Write_DMA+0x24>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

    if(hi2c->XferSize > 0U)
    {    
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003056:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003058:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80030d8 <HAL_I2C_Mem_Write_DMA+0x134>

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800305c:	491d      	ldr	r1, [pc, #116]	; (80030d4 <HAL_I2C_Mem_Write_DMA+0x130>)
 800305e:	64c1      	str	r1, [r0, #76]	; 0x4c
      hi2c->hdmatx->XferM1CpltCallback = NULL;
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmatx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003060:	3210      	adds	r2, #16
 8003062:	462b      	mov	r3, r5
 8003064:	990c      	ldr	r1, [sp, #48]	; 0x30

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003066:	f8c0 a040 	str.w	sl, [r0, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800306a:	f8c0 a044 	str.w	sl, [r0, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800306e:	f8c0 a048 	str.w	sl, [r0, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003072:	f8c0 a050 	str.w	sl, [r0, #80]	; 0x50
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

    if(hi2c->XferSize > 0U)
    {    
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003076:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
      hi2c->hdmatx->XferM1CpltCallback = NULL;
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmatx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800307a:	f001 f987 	bl	800438c <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800307e:	2023      	movs	r0, #35	; 0x23
 8003080:	9000      	str	r0, [sp, #0]
 8003082:	f8cd 9004 	str.w	r9, [sp, #4]
 8003086:	4641      	mov	r1, r8
 8003088:	463a      	mov	r2, r7
 800308a:	4633      	mov	r3, r6
 800308c:	4620      	mov	r0, r4
 800308e:	f7fd fe39 	bl	8000d04 <I2C_RequestMemoryWrite>
 8003092:	b138      	cbz	r0, 80030a4 <HAL_I2C_Mem_Write_DMA+0x100>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003094:	6c23      	ldr	r3, [r4, #64]	; 0x40
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003096:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309a:	2b04      	cmp	r3, #4
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_ERROR;
 800309c:	bf0c      	ite	eq
 800309e:	2001      	moveq	r0, #1
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
 80030a0:	2003      	movne	r0, #3
 80030a2:	e791      	b.n	8002fc8 <HAL_I2C_Mem_Write_DMA+0x24>
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	9003      	str	r0, [sp, #12]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	9203      	str	r2, [sp, #12]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	9203      	str	r2, [sp, #12]
 80030b0:	9a03      	ldr	r2, [sp, #12]
      
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80030b2:	685a      	ldr	r2, [r3, #4]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	e77f      	b.n	8002fc8 <HAL_I2C_Mem_Write_DMA+0x24>
 80030c8:	20000010 	andcs	r0, r0, r0, lsl r0
 80030cc:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 80030d0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 80030d4:	08003461 	stmdaeq	r0, {r0, r5, r6, sl, ip, sp}
 80030d8:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}

080030dc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80030dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030e0:	b087      	sub	sp, #28
 80030e2:	4604      	mov	r4, r0
 80030e4:	461e      	mov	r6, r3
 80030e6:	4688      	mov	r8, r1
 80030e8:	4617      	mov	r7, r2
 80030ea:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ee:	f7fd f9d9 	bl	80004a4 <HAL_GetTick>

  __IO uint32_t count = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d003      	beq.n	8003106 <HAL_I2C_Mem_Read_DMA+0x2a>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2002      	movs	r0, #2
  }
}
 8003100:	b007      	add	sp, #28
 8003102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8003106:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_I2C_Mem_Read_DMA+0x174>)
 8003108:	4a52      	ldr	r2, [pc, #328]	; (8003254 <HAL_I2C_Mem_Read_DMA+0x178>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003118:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800311c:	4681      	mov	r9, r0
 800311e:	9303      	str	r3, [sp, #12]
 8003120:	e003      	b.n	800312a <HAL_I2C_Mem_Read_DMA+0x4e>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003122:	6821      	ldr	r1, [r4, #0]
 8003124:	698b      	ldr	r3, [r1, #24]
 8003126:	079a      	lsls	r2, r3, #30
 8003128:	d50c      	bpl.n	8003144 <HAL_I2C_Mem_Read_DMA+0x68>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	9203      	str	r2, [sp, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f6      	bne.n	8003122 <HAL_I2C_Mem_Read_DMA+0x46>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8003134:	2220      	movs	r2, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003136:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003138:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 800313c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 8003140:	2003      	movs	r0, #3
 8003142:	e7dd      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x24>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003144:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d0d8      	beq.n	80030fe <HAL_I2C_Mem_Read_DMA+0x22>

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800314c:	680b      	ldr	r3, [r1, #0]
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	2201      	movs	r2, #1

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003150:	07db      	lsls	r3, r3, #31
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003152:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003156:	d402      	bmi.n	800315e <HAL_I2C_Mem_Read_DMA+0x82>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003158:	680b      	ldr	r3, [r1, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800315e:	680b      	ldr	r3, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003160:	483d      	ldr	r0, [pc, #244]	; (8003258 <HAL_I2C_Mem_Read_DMA+0x17c>)
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003166:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800316a:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316e:	2200      	movs	r2, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003170:	600b      	str	r3, [r1, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003172:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003176:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317a:	6422      	str	r2, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
    hi2c->XferCount = Size;
 800317c:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317e:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8003182:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003184:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferSize    = hi2c->XferCount;
 8003186:	b29b      	uxth	r3, r3
 8003188:	8523      	strh	r3, [r4, #40]	; 0x28

    if(hi2c->XferSize > 0U)
 800318a:	2b00      	cmp	r3, #0
 800318c:	d035      	beq.n	80031fa <HAL_I2C_Mem_Read_DMA+0x11e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800318e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003190:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 800325c <HAL_I2C_Mem_Read_DMA+0x180>

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003194:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8003260 <HAL_I2C_Mem_Read_DMA+0x184>

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003198:	6402      	str	r2, [r0, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800319a:	3110      	adds	r1, #16
      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800319c:	6442      	str	r2, [r0, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800319e:	6482      	str	r2, [r0, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80031a0:	6502      	str	r2, [r0, #80]	; 0x50
    hi2c->XferSize    = hi2c->XferCount;

    if(hi2c->XferSize > 0U)
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80031a2:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferM1CpltCallback = NULL;
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80031a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80031a8:	f8c0 e04c 	str.w	lr, [r0, #76]	; 0x4c
      hi2c->hdmarx->XferM1CpltCallback = NULL;
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
      hi2c->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80031ac:	f001 f8ee 	bl	800438c <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80031b0:	2023      	movs	r0, #35	; 0x23
 80031b2:	9000      	str	r0, [sp, #0]
 80031b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80031b8:	4641      	mov	r1, r8
 80031ba:	463a      	mov	r2, r7
 80031bc:	4633      	mov	r3, r6
 80031be:	4620      	mov	r0, r4
 80031c0:	f7fd fe7a 	bl	8000eb8 <I2C_RequestMemoryRead>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d134      	bne.n	8003232 <HAL_I2C_Mem_Read_DMA+0x156>
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
        }
      }

      if(Size == 1U)
 80031c8:	2d01      	cmp	r5, #1
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80031ca:	6823      	ldr	r3, [r4, #0]
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
        }
      }

      if(Size == 1U)
 80031cc:	d03b      	beq.n	8003246 <HAL_I2C_Mem_Read_DMA+0x16a>
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
      }
      else
      {
        /* Enable Last DMA bit */
        hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d4:	605a      	str	r2, [r3, #4]
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	2100      	movs	r1, #0
 80031d8:	9104      	str	r1, [sp, #16]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	9204      	str	r2, [sp, #16]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	9204      	str	r2, [sp, #16]
 80031e2:	9a04      	ldr	r2, [sp, #16]

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80031e4:	685a      	ldr	r2, [r3, #4]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80031ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ee:	605a      	str	r2, [r3, #4]
      
     /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	e782      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x24>
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80031fa:	2023      	movs	r0, #35	; 0x23
 80031fc:	9000      	str	r0, [sp, #0]
 80031fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8003202:	4641      	mov	r1, r8
 8003204:	463a      	mov	r2, r7
 8003206:	4633      	mov	r3, r6
 8003208:	4620      	mov	r0, r4
 800320a:	f7fd fe55 	bl	8000eb8 <I2C_RequestMemoryRead>
 800320e:	b980      	cbnz	r0, 8003232 <HAL_I2C_Mem_Read_DMA+0x156>
          return HAL_TIMEOUT;
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	9005      	str	r0, [sp, #20]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	9205      	str	r2, [sp, #20]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	9205      	str	r2, [sp, #20]
 800321c:	9a05      	ldr	r2, [sp, #20]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800321e:	681a      	ldr	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003220:	2120      	movs	r1, #32

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003226:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003228:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      hi2c->State = HAL_I2C_STATE_READY;
 800322c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8003230:	e766      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x24>
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003234:	2b04      	cmp	r3, #4
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800323e:	bf0c      	ite	eq
 8003240:	2001      	moveq	r0, #1
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
 8003242:	2003      	movne	r0, #3
 8003244:	e75c      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x24>
      }

      if(Size == 1U)
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e7c2      	b.n	80031d6 <HAL_I2C_Mem_Read_DMA+0xfa>
 8003250:	20000010 	andcs	r0, r0, r0, lsl r0
 8003254:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
 8003258:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 800325c:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}
 8003260:	08003461 	stmdaeq	r0, {r0, r5, r6, sl, ip, sp}

08003264 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003268:	4605      	mov	r5, r0
 800326a:	b083      	sub	sp, #12
 800326c:	461f      	mov	r7, r3
 800326e:	4689      	mov	r9, r1
 8003270:	4692      	mov	sl, r2
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003272:	f7fd f917 	bl	80004a4 <HAL_GetTick>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003276:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800327a:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;

  /* Get tick */
  tickstart = HAL_GetTick();
 800327c:	4606      	mov	r6, r0

  if(hi2c->State == HAL_I2C_STATE_READY)
 800327e:	d009      	beq.n	8003294 <HAL_I2C_IsDeviceReady+0x30>

    return HAL_ERROR;
  }
  else
  {
    return HAL_BUSY;
 8003280:	2002      	movs	r0, #2
  }
}
 8003282:	b003      	add	sp, #12
 8003284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003288:	f7fd f90c 	bl	80004a4 <HAL_GetTick>
 800328c:	1b80      	subs	r0, r0, r6
 800328e:	2819      	cmp	r0, #25
 8003290:	f200 809f 	bhi.w	80033d2 <HAL_I2C_IsDeviceReady+0x16e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	43d2      	mvns	r2, r2
 800329a:	f012 0402 	ands.w	r4, r2, #2
 800329e:	d0f3      	beq.n	8003288 <HAL_I2C_IsDeviceReady+0x24>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a0:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80032a4:	2a01      	cmp	r2, #1
 80032a6:	d0eb      	beq.n	8003280 <HAL_I2C_IsDeviceReady+0x1c>
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a8:	681a      	ldr	r2, [r3, #0]
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032aa:	2101      	movs	r1, #1
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ac:	07d0      	lsls	r0, r2, #31
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ae:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032b2:	d402      	bmi.n	80032ba <HAL_I2C_IsDeviceReady+0x56>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032ba:	681a      	ldr	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032bc:	485e      	ldr	r0, [pc, #376]	; (8003438 <HAL_I2C_IsDeviceReady+0x1d4>)

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032be:	2100      	movs	r1, #0
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	2424      	movs	r4, #36	; 0x24
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032c6:	601a      	str	r2, [r3, #0]
      {
        return HAL_TIMEOUT;
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032c8:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d0:	468b      	mov	fp, r1

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d2:	6429      	str	r1, [r5, #64]	; 0x40
      tmp3 = hi2c->State;
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032d4:	f04f 08a0 	mov.w	r8, #160	; 0xa0
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d8:	62e8      	str	r0, [r5, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	1c7a      	adds	r2, r7, #1
 80032e4:	d160      	bne.n	80033a8 <HAL_I2C_IsDeviceReady+0x144>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	07d6      	lsls	r6, r2, #31
 80032ea:	d5fc      	bpl.n	80032e6 <HAL_I2C_IsDeviceReady+0x82>
      {
        return HAL_TIMEOUT;
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ec:	f8c3 9010 	str.w	r9, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032f0:	f7fd f8d8 	bl	80004a4 <HAL_GetTick>

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032f4:	682b      	ldr	r3, [r5, #0]
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032f6:	4606      	mov	r6, r0

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032f8:	6958      	ldr	r0, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032fa:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 80032fc:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8003300:	0784      	lsls	r4, r0, #30
      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003302:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      tmp3 = hi2c->State;
 8003306:	b2c9      	uxtb	r1, r1
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8003308:	d412      	bmi.n	8003330 <HAL_I2C_IsDeviceReady+0xcc>
 800330a:	b98a      	cbnz	r2, 8003330 <HAL_I2C_IsDeviceReady+0xcc>
 800330c:	29a0      	cmp	r1, #160	; 0xa0
 800330e:	d00f      	beq.n	8003330 <HAL_I2C_IsDeviceReady+0xcc>
 8003310:	b11f      	cbz	r7, 800331a <HAL_I2C_IsDeviceReady+0xb6>
 8003312:	e037      	b.n	8003384 <HAL_I2C_IsDeviceReady+0x120>
 8003314:	b962      	cbnz	r2, 8003330 <HAL_I2C_IsDeviceReady+0xcc>
 8003316:	29a0      	cmp	r1, #160	; 0xa0
 8003318:	d00a      	beq.n	8003330 <HAL_I2C_IsDeviceReady+0xcc>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800331a:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800331e:	6958      	ldr	r0, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003320:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8003322:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
      tickstart = HAL_GetTick();

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
      tmp3 = hi2c->State;
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8003326:	0780      	lsls	r0, r0, #30
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003328:	f402 6280 	and.w	r2, r2, #1024	; 0x400
        tmp3 = hi2c->State;
 800332c:	b2c9      	uxtb	r1, r1
      tickstart = HAL_GetTick();

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
      tmp3 = hi2c->State;
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800332e:	d5f1      	bpl.n	8003314 <HAL_I2C_IsDeviceReady+0xb0>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
        tmp3 = hi2c->State;
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003330:	2220      	movs	r2, #32
 8003332:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	f012 0f02 	tst.w	r2, #2
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800333c:	681a      	ldr	r2, [r3, #0]
      }

      hi2c->State = HAL_I2C_STATE_READY;

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800333e:	d15d      	bne.n	80033fc <HAL_I2C_IsDeviceReady+0x198>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	f46f 6180 	mvn.w	r1, #1024	; 0x400
        return HAL_OK;
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003348:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334a:	6159      	str	r1, [r3, #20]
 800334c:	e005      	b.n	800335a <HAL_I2C_IsDeviceReady+0xf6>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800334e:	f7fd f8a9 	bl	80004a4 <HAL_GetTick>
 8003352:	1b80      	subs	r0, r0, r6
 8003354:	2819      	cmp	r0, #25
 8003356:	d832      	bhi.n	80033be <HAL_I2C_IsDeviceReady+0x15a>
 8003358:	682b      	ldr	r3, [r5, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800335a:	699c      	ldr	r4, [r3, #24]
 800335c:	43e4      	mvns	r4, r4
 800335e:	f014 0402 	ands.w	r4, r4, #2
 8003362:	d0f4      	beq.n	800334e <HAL_I2C_IsDeviceReady+0xea>
 8003364:	f10b 0b01 	add.w	fp, fp, #1
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }
      }
    }while(I2C_Trials++ < Trials);
 8003368:	45d3      	cmp	fp, sl
 800336a:	d3b6      	bcc.n	80032da <HAL_I2C_IsDeviceReady+0x76>

    hi2c->State = HAL_I2C_STATE_READY;
 800336c:	2220      	movs	r2, #32

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
        }
      }
    }while(I2C_Trials++ < Trials);

    hi2c->State = HAL_I2C_STATE_READY;
 8003370:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003374:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c

    return HAL_ERROR;
 8003378:	2001      	movs	r0, #1
 800337a:	e782      	b.n	8003282 <HAL_I2C_IsDeviceReady+0x1e>
      tickstart = HAL_GetTick();

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
      tmp3 = hi2c->State;
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800337c:	2a00      	cmp	r2, #0
 800337e:	d1d7      	bne.n	8003330 <HAL_I2C_IsDeviceReady+0xcc>
 8003380:	29a0      	cmp	r1, #160	; 0xa0
 8003382:	d0d5      	beq.n	8003330 <HAL_I2C_IsDeviceReady+0xcc>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003384:	f7fd f88e 	bl	80004a4 <HAL_GetTick>
 8003388:	1b80      	subs	r0, r0, r6
 800338a:	4287      	cmp	r7, r0
 800338c:	682b      	ldr	r3, [r5, #0]
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800338e:	bf38      	it	cc
 8003390:	f885 803d 	strbcc.w	r8, [r5, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003394:	6958      	ldr	r0, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003396:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8003398:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
      tickstart = HAL_GetTick();

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
      tmp3 = hi2c->State;
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800339c:	0780      	lsls	r0, r0, #30
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800339e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
        tmp3 = hi2c->State;
 80033a2:	b2c9      	uxtb	r1, r1
      tickstart = HAL_GetTick();

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
      tmp3 = hi2c->State;
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80033a4:	d4c4      	bmi.n	8003330 <HAL_I2C_IsDeviceReady+0xcc>
 80033a6:	e7e9      	b.n	800337c <HAL_I2C_IsDeviceReady+0x118>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	07d4      	lsls	r4, r2, #31
 80033ac:	d49e      	bmi.n	80032ec <HAL_I2C_IsDeviceReady+0x88>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80033ae:	b1d7      	cbz	r7, 80033e6 <HAL_I2C_IsDeviceReady+0x182>
 80033b0:	f7fd f878 	bl	80004a4 <HAL_GetTick>
 80033b4:	1b80      	subs	r0, r0, r6
 80033b6:	4287      	cmp	r7, r0
 80033b8:	d315      	bcc.n	80033e6 <HAL_I2C_IsDeviceReady+0x182>
 80033ba:	682b      	ldr	r3, [r5, #0]
 80033bc:	e791      	b.n	80032e2 <HAL_I2C_IsDeviceReady+0x7e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80033be:	2320      	movs	r3, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80033c0:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c2:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80033c6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
 80033ca:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
 80033d0:	e757      	b.n	8003282 <HAL_I2C_IsDeviceReady+0x1e>
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80033d2:	2320      	movs	r3, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80033d4:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d6:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80033da:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 80033de:	2002      	movs	r0, #2
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
 80033e4:	e74d      	b.n	8003282 <HAL_I2C_IsDeviceReady+0x1e>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80033e8:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80033f0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Instance->CR1 |= I2C_CR1_START;

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
      {
        return HAL_TIMEOUT;
 80033f4:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 80033fa:	e742      	b.n	8003282 <HAL_I2C_IsDeviceReady+0x1e>

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80033fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003400:	2100      	movs	r1, #0

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003402:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003404:	9101      	str	r1, [sp, #4]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	9201      	str	r2, [sp, #4]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	9201      	str	r2, [sp, #4]
 800340e:	9a01      	ldr	r2, [sp, #4]
 8003410:	e005      	b.n	800341e <HAL_I2C_IsDeviceReady+0x1ba>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003412:	f7fd f847 	bl	80004a4 <HAL_GetTick>
 8003416:	1b80      	subs	r0, r0, r6
 8003418:	2819      	cmp	r0, #25
 800341a:	d8d0      	bhi.n	80033be <HAL_I2C_IsDeviceReady+0x15a>
 800341c:	682b      	ldr	r3, [r5, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	43db      	mvns	r3, r3
 8003422:	f013 0402 	ands.w	r4, r3, #2
 8003426:	d0f4      	beq.n	8003412 <HAL_I2C_IsDeviceReady+0x1ae>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003428:	2320      	movs	r3, #32

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342a:	2000      	movs	r0, #0
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800342c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003430:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c

        return HAL_OK;
 8003434:	e725      	b.n	8003282 <HAL_I2C_IsDeviceReady+0x1e>
 8003436:	bf00      	nop
 8003438:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

0800343c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop

08003444 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop

08003448 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop

0800344c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop

08003458 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <I2C_DMAError>:
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003460:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003462:	6801      	ldr	r1, [r0, #0]
 8003464:	680b      	ldr	r3, [r1, #0]
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003466:	b510      	push	{r4, lr}
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

  hi2c->XferCount = 0U;
 8003468:	2200      	movs	r2, #0
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800346a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

  hi2c->XferCount = 0U;

  hi2c->State = HAL_I2C_STATE_READY;
 800346e:	2420      	movs	r4, #32
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003470:	600b      	str	r3, [r1, #0]

  hi2c->XferCount = 0U;
 8003472:	8542      	strh	r2, [r0, #42]	; 0x2a

  hi2c->State = HAL_I2C_STATE_READY;
 8003474:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e

  hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800347c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800347e:	f043 0310 	orr.w	r3, r3, #16
 8003482:	6403      	str	r3, [r0, #64]	; 0x40

  HAL_I2C_ErrorCallback(hi2c);
 8003484:	f7ff ffea 	bl	800345c <HAL_I2C_ErrorCallback>
 8003488:	bd10      	pop	{r4, pc}
 800348a:	bf00      	nop

0800348c <I2C_DMAXferCplt>:
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800348c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800348e:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003490:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  uint32_t CurrentMode  = hi2c->Mode;
 8003494:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003498:	b2db      	uxtb	r3, r3
  uint32_t CurrentMode  = hi2c->Mode;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 800349a:	2b21      	cmp	r3, #33	; 0x21
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
  uint32_t CurrentMode  = hi2c->Mode;
 800349c:	b2d2      	uxtb	r2, r2

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 800349e:	d024      	beq.n	80034ea <I2C_DMAXferCplt+0x5e>
 80034a0:	2b22      	cmp	r3, #34	; 0x22
 80034a2:	d020      	beq.n	80034e6 <I2C_DMAXferCplt+0x5a>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
  }
  else
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80034a4:	6803      	ldr	r3, [r0, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ac:	601a      	str	r2, [r3, #0]
    
    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b4:	601a      	str	r2, [r3, #0]
    
    /* Disable Last DMA */
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034bc:	605a      	str	r2, [r3, #4]
    
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034be:	685a      	ldr	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 80034c0:	2100      	movs	r1, #0
    
    /* Disable Last DMA */
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
    
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 80034c8:	8541      	strh	r1, [r0, #42]	; 0x2a

    /* Check if Errors has been detected during transfer */
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80034cc:	b9e3      	cbnz	r3, 8003508 <I2C_DMAXferCplt+0x7c>
    {
      HAL_I2C_ErrorCallback(hi2c);
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	2220      	movs	r2, #32
 80034d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80034dc:	2a40      	cmp	r2, #64	; 0x40
 80034de:	d010      	beq.n	8003502 <I2C_DMAXferCplt+0x76>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;

        HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e0:	f7ff ffae 	bl	8003440 <HAL_I2C_MasterRxCpltCallback>
 80034e4:	bd08      	pop	{r3, pc}
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
  uint32_t CurrentMode  = hi2c->Mode;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 80034e6:	2a20      	cmp	r2, #32
 80034e8:	d1dc      	bne.n	80034a4 <I2C_DMAXferCplt+0x18>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 80034ee:	2100      	movs	r1, #0
  uint32_t CurrentMode  = hi2c->Mode;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f4:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 80034f6:	8541      	strh	r1, [r0, #42]	; 0x2a
    
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	bd08      	pop	{r3, pc}

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;

        HAL_I2C_MemRxCpltCallback(hi2c);
 8003502:	f7ff ffa9 	bl	8003458 <HAL_I2C_MemRxCpltCallback>
 8003506:	bd08      	pop	{r3, pc}
    hi2c->XferCount = 0U;

    /* Check if Errors has been detected during transfer */
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
    {
      HAL_I2C_ErrorCallback(hi2c);
 8003508:	f7ff ffa8 	bl	800345c <HAL_I2C_ErrorCallback>
 800350c:	bd08      	pop	{r3, pc}
 800350e:	bf00      	nop

08003510 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop

08003514 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003514:	b538      	push	{r3, r4, r5, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003516:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800351a:	3b29      	subs	r3, #41	; 0x29
 800351c:	2b01      	cmp	r3, #1
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800351e:	4604      	mov	r4, r0
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003520:	d94d      	bls.n	80035be <I2C_ITError+0xaa>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8003522:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003526:	2b60      	cmp	r3, #96	; 0x60
 8003528:	6803      	ldr	r3, [r0, #0]
 800352a:	d005      	beq.n	8003538 <I2C_ITError+0x24>
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	0515      	lsls	r5, r2, #20
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003530:	bf5c      	itt	pl
 8003532:	2220      	movpl	r2, #32
 8003534:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003538:	2200      	movs	r2, #0
 800353a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003546:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800354e:	d013      	beq.n	8003578 <I2C_ITError+0x64>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003550:	685a      	ldr	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003552:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003558:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800355a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800355e:	2b01      	cmp	r3, #1
 8003560:	d034      	beq.n	80035cc <I2C_ITError+0xb8>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <I2C_ITError+0x134>)
 8003564:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003566:	f000 ff9b 	bl	80044a0 <HAL_DMA_Abort_IT>
 800356a:	2800      	cmp	r0, #0
 800356c:	d15f      	bne.n	800362e <I2C_ITError+0x11a>
    HAL_I2C_ErrorCallback(hi2c);
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 800356e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003572:	2b28      	cmp	r3, #40	; 0x28
 8003574:	d013      	beq.n	800359e <I2C_ITError+0x8a>
 8003576:	bd38      	pop	{r3, r4, r5, pc}
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8003578:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800357c:	2960      	cmp	r1, #96	; 0x60
 800357e:	d041      	beq.n	8003604 <I2C_ITError+0xf0>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	0652      	lsls	r2, r2, #25
 8003584:	d504      	bpl.n	8003590 <I2C_ITError+0x7c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003586:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	1c51      	adds	r1, r2, #1
 800358c:	6261      	str	r1, [r4, #36]	; 0x24
 800358e:	7013      	strb	r3, [r2, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff ff63 	bl	800345c <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8003596:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800359a:	2b28      	cmp	r3, #40	; 0x28
 800359c:	d1eb      	bne.n	8003576 <I2C_ITError+0x62>
 800359e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a0:	075b      	lsls	r3, r3, #29
 80035a2:	d5e8      	bpl.n	8003576 <I2C_ITError+0x62>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <I2C_ITError+0x138>)
 80035a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	2220      	movs	r2, #32
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80035ae:	4620      	mov	r0, r4
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80035b8:	f7ff ff4a 	bl	8003450 <HAL_I2C_ListenCpltCallback>
 80035bc:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t CurrentState = hi2c->State;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035c0:	2228      	movs	r2, #40	; 0x28
  uint32_t CurrentState = hi2c->State;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035c2:	6303      	str	r3, [r0, #48]	; 0x30
 80035c4:	6803      	ldr	r3, [r0, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 80035ca:	e7b9      	b.n	8003540 <I2C_ITError+0x2c>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <I2C_ITError+0x134>)
 80035d0:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035d2:	f000 ff65 	bl	80044a0 <HAL_DMA_Abort_IT>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d0c9      	beq.n	800356e <I2C_ITError+0x5a>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	0650      	lsls	r0, r2, #25
 80035e0:	d505      	bpl.n	80035ee <I2C_ITError+0xda>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80035e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	1c51      	adds	r1, r2, #1
 80035e8:	6261      	str	r1, [r4, #36]	; 0x24
 80035ea:	7013      	strb	r3, [r2, #0]
 80035ec:	6823      	ldr	r3, [r4, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035ee:	681a      	ldr	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035f2:	f022 0201 	bic.w	r2, r2, #1

        hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	2120      	movs	r1, #32
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);

        hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003600:	4798      	blx	r3
 8003602:	e7b4      	b.n	800356e <I2C_ITError+0x5a>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	2120      	movs	r1, #32
 8003606:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360a:	6422      	str	r2, [r4, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	0651      	lsls	r1, r2, #25
 8003610:	d505      	bpl.n	800361e <I2C_ITError+0x10a>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003612:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	1c51      	adds	r1, r2, #1
 8003618:	6261      	str	r1, [r4, #36]	; 0x24
 800361a:	7013      	strb	r3, [r2, #0]
 800361c:	6823      	ldr	r3, [r4, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff ff72 	bl	8003510 <HAL_I2C_AbortCpltCallback>
 800362c:	e79f      	b.n	800356e <I2C_ITError+0x5a>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800362e:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003630:	6b60      	ldr	r0, [r4, #52]	; 0x34
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003632:	6813      	ldr	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003634:	6d01      	ldr	r1, [r0, #80]	; 0x50
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003636:	f023 0301 	bic.w	r3, r3, #1

        hi2c->State = HAL_I2C_STATE_READY;
 800363a:	2520      	movs	r5, #32
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800363c:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800363e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003642:	4788      	blx	r1
 8003644:	e793      	b.n	800356e <I2C_ITError+0x5a>
 8003646:	bf00      	nop
 8003648:	08003e71 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, fp, ip, sp}
 800364c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

08003650 <HAL_I2C_Master_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
  /* Abort Master transfer during Receive or Transmit process    */
  if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003650:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003654:	2a10      	cmp	r2, #16
 8003656:	d001      	beq.n	800365c <HAL_I2C_Master_Abort_IT+0xc>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 8003658:	2001      	movs	r0, #1
 800365a:	4770      	bx	lr
{
  /* Abort Master transfer during Receive or Transmit process    */
  if(hi2c->Mode == HAL_I2C_MODE_MASTER)
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003660:	2a01      	cmp	r2, #1
 8003662:	d101      	bne.n	8003668 <HAL_I2C_Master_Abort_IT+0x18>
 8003664:	2002      	movs	r0, #2
 8003666:	4770      	bx	lr
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shift at right before call interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8003668:	b510      	push	{r4, lr}

    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_ABORT;

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800366a:	6802      	ldr	r2, [r0, #0]
  if(hi2c->Mode == HAL_I2C_MODE_MASTER)
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);

    hi2c->PreviousState = I2C_STATE_NONE;
 800366c:	2400      	movs	r4, #0
    hi2c->State = HAL_I2C_STATE_ABORT;
 800366e:	2160      	movs	r1, #96	; 0x60
  if(hi2c->Mode == HAL_I2C_MODE_MASTER)
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);

    hi2c->PreviousState = I2C_STATE_NONE;
 8003670:	6304      	str	r4, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8003672:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003676:	6811      	ldr	r1, [r2, #0]
 8003678:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800367c:	6011      	str	r1, [r2, #0]

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800367e:	6811      	ldr	r1, [r2, #0]
 8003680:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003684:	6011      	str	r1, [r2, #0]

    hi2c->XferCount = 0U;
 8003686:	8544      	strh	r4, [r0, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003688:	6851      	ldr	r1, [r2, #4]
 800368a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800368e:	6051      	str	r1, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003694:	f7ff ff3e 	bl	8003514 <I2C_ITError>

    return HAL_OK;
 8003698:	4620      	mov	r0, r4
 800369a:	bd10      	pop	{r4, pc}

0800369c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800369e:	6803      	ldr	r3, [r0, #0]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036a0:	4604      	mov	r4, r0
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036a2:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036a4:	695a      	ldr	r2, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 80036a6:	6858      	ldr	r0, [r3, #4]

  uint32_t CurrentMode  = hi2c->Mode;
 80036a8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80036ac:	b2c9      	uxtb	r1, r1

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036ae:	2910      	cmp	r1, #16
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b08d      	sub	sp, #52	; 0x34
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);

  uint32_t CurrentMode  = hi2c->Mode;

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036b2:	f000 808f 	beq.w	80037d4 <HAL_I2C_EV_IRQHandler+0x138>
 80036b6:	2940      	cmp	r1, #64	; 0x40
 80036b8:	f000 808c 	beq.w	80037d4 <HAL_I2C_EV_IRQHandler+0x138>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80036bc:	498e      	ldr	r1, [pc, #568]	; (80038f8 <HAL_I2C_EV_IRQHandler+0x25c>)
 80036be:	4011      	ands	r1, r2
 80036c0:	b319      	cbz	r1, 800370a <HAL_I2C_EV_IRQHandler+0x6e>
 80036c2:	0581      	lsls	r1, r0, #22
 80036c4:	f100 821d 	bmi.w	8003b02 <HAL_I2C_EV_IRQHandler+0x466>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Slave_STOPF(hi2c);
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80036c8:	498c      	ldr	r1, [pc, #560]	; (80038fc <HAL_I2C_EV_IRQHandler+0x260>)
 80036ca:	4029      	ands	r1, r5
 80036cc:	2900      	cmp	r1, #0
 80036ce:	f000 80f9 	beq.w	80038c4 <HAL_I2C_EV_IRQHandler+0x228>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80036d2:	498b      	ldr	r1, [pc, #556]	; (8003900 <HAL_I2C_EV_IRQHandler+0x264>)
 80036d4:	4011      	ands	r1, r2
 80036d6:	2900      	cmp	r1, #0
 80036d8:	f040 81ce 	bne.w	8003a78 <HAL_I2C_EV_IRQHandler+0x3dc>
      {
        I2C_SlaveTransmit_TXE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80036dc:	4989      	ldr	r1, [pc, #548]	; (8003904 <HAL_I2C_EV_IRQHandler+0x268>)
 80036de:	4011      	ands	r1, r2
 80036e0:	2900      	cmp	r1, #0
 80036e2:	f000 808b 	beq.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 80036e6:	0580      	lsls	r0, r0, #22
 80036e8:	f140 8088 	bpl.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 80036ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80036ee:	b292      	uxth	r2, r2
 80036f0:	2a00      	cmp	r2, #0
 80036f2:	f000 8083 	beq.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80036f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036f8:	1c51      	adds	r1, r2, #1
 80036fa:	6261      	str	r1, [r4, #36]	; 0x24
 80036fc:	7812      	ldrb	r2, [r2, #0]
 80036fe:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8003700:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003702:	3b01      	subs	r3, #1
 8003704:	b29b      	uxth	r3, r3
 8003706:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003708:	e078      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Slave_ADDR(hi2c);
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800370a:	4e7f      	ldr	r6, [pc, #508]	; (8003908 <HAL_I2C_EV_IRQHandler+0x26c>)
 800370c:	4016      	ands	r6, r2
 800370e:	2e00      	cmp	r6, #0
 8003710:	d0da      	beq.n	80036c8 <HAL_I2C_EV_IRQHandler+0x2c>
 8003712:	0586      	lsls	r6, r0, #22
 8003714:	d5d8      	bpl.n	80036c8 <HAL_I2C_EV_IRQHandler+0x2c>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003716:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800371a:	6858      	ldr	r0, [r3, #4]
 800371c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003720:	6058      	str	r0, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003722:	910b      	str	r1, [sp, #44]	; 0x2c
 8003724:	6959      	ldr	r1, [r3, #20]
 8003726:	910b      	str	r1, [sp, #44]	; 0x2c
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	f041 0101 	orr.w	r1, r1, #1
 800372e:	6019      	str	r1, [r3, #0]
 8003730:	990b      	ldr	r1, [sp, #44]	; 0x2c

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003738:	6019      	str	r1, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	0508      	lsls	r0, r1, #20
 800373e:	461f      	mov	r7, r3
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003740:	b2d2      	uxtb	r2, r2

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003742:	d50e      	bpl.n	8003762 <HAL_I2C_EV_IRQHandler+0xc6>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003744:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003748:	2922      	cmp	r1, #34	; 0x22
 800374a:	f000 825c 	beq.w	8003c06 <HAL_I2C_EV_IRQHandler+0x56a>
 800374e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003752:	292a      	cmp	r1, #42	; 0x2a
 8003754:	f000 8257 	beq.w	8003c06 <HAL_I2C_EV_IRQHandler+0x56a>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800375a:	6809      	ldr	r1, [r1, #0]
 800375c:	6849      	ldr	r1, [r1, #4]
 800375e:	b289      	uxth	r1, r1
 8003760:	8561      	strh	r1, [r4, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8003762:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003764:	b289      	uxth	r1, r1
 8003766:	b1e1      	cbz	r1, 80037a2 <HAL_I2C_EV_IRQHandler+0x106>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003768:	6959      	ldr	r1, [r3, #20]
 800376a:	0749      	lsls	r1, r1, #29
 800376c:	d509      	bpl.n	8003782 <HAL_I2C_EV_IRQHandler+0xe6>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800376e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	1c48      	adds	r0, r1, #1
 8003774:	6260      	str	r0, [r4, #36]	; 0x24
 8003776:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8003778:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800377a:	6827      	ldr	r7, [r4, #0]
 800377c:	3b01      	subs	r3, #1
 800377e:	b29b      	uxth	r3, r3
 8003780:	8563      	strh	r3, [r4, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	065e      	lsls	r6, r3, #25
 8003786:	d508      	bpl.n	800379a <HAL_I2C_EV_IRQHandler+0xfe>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800378a:	6939      	ldr	r1, [r7, #16]
 800378c:	1c58      	adds	r0, r3, #1
 800378e:	6260      	str	r0, [r4, #36]	; 0x24
 8003790:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 8003792:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003794:	3b01      	subs	r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	8563      	strh	r3, [r4, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800379a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6423      	str	r3, [r4, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f040 8241 	bne.w	8003c2c <HAL_I2C_EV_IRQHandler+0x590>
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80037aa:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80037ae:	2902      	cmp	r1, #2
 80037b0:	f240 81f4 	bls.w	8003b9c <HAL_I2C_EV_IRQHandler+0x500>
      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037b6:	2b22      	cmp	r3, #34	; 0x22
 80037b8:	d001      	beq.n	80037be <HAL_I2C_EV_IRQHandler+0x122>
 80037ba:	2a22      	cmp	r2, #34	; 0x22
 80037bc:	d11e      	bne.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	2220      	movs	r2, #32
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037c4:	4620      	mov	r0, r4
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037ce:	f7ff fe3b 	bl	8003448 <HAL_I2C_SlaveRxCpltCallback>
 80037d2:	e013      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80037d4:	f012 1f01 	tst.w	r2, #65537	; 0x10001
 80037d8:	d012      	beq.n	8003800 <HAL_I2C_EV_IRQHandler+0x164>
 80037da:	0586      	lsls	r6, r0, #22
 80037dc:	f100 817a 	bmi.w	8003ad4 <HAL_I2C_EV_IRQHandler+0x438>
    {
      I2C_Master_ADDR(hi2c);
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80037e0:	4946      	ldr	r1, [pc, #280]	; (80038fc <HAL_I2C_EV_IRQHandler+0x260>)
 80037e2:	4029      	ands	r1, r5
 80037e4:	b1c9      	cbz	r1, 800381a <HAL_I2C_EV_IRQHandler+0x17e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80037e6:	4946      	ldr	r1, [pc, #280]	; (8003900 <HAL_I2C_EV_IRQHandler+0x264>)
 80037e8:	4011      	ands	r1, r2
 80037ea:	2900      	cmp	r1, #0
 80037ec:	f040 80df 	bne.w	80039ae <HAL_I2C_EV_IRQHandler+0x312>
      {
        I2C_MasterTransmit_TXE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80037f0:	4944      	ldr	r1, [pc, #272]	; (8003904 <HAL_I2C_EV_IRQHandler+0x268>)
 80037f2:	4011      	ands	r1, r2
 80037f4:	b111      	cbz	r1, 80037fc <HAL_I2C_EV_IRQHandler+0x160>
 80037f6:	0586      	lsls	r6, r0, #22
 80037f8:	f100 819d 	bmi.w	8003b36 <HAL_I2C_EV_IRQHandler+0x49a>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 80037fc:	b00d      	add	sp, #52	; 0x34
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Master_SB(hi2c);
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003800:	4942      	ldr	r1, [pc, #264]	; (800390c <HAL_I2C_EV_IRQHandler+0x270>)
 8003802:	4011      	ands	r1, r2
 8003804:	2900      	cmp	r1, #0
 8003806:	d044      	beq.n	8003892 <HAL_I2C_EV_IRQHandler+0x1f6>
 8003808:	0581      	lsls	r1, r0, #22
 800380a:	d5e9      	bpl.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800380c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800380e:	b2c9      	uxtb	r1, r1
 8003810:	6119      	str	r1, [r3, #16]
    {
      I2C_Master_ADDR(hi2c);
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8003812:	493a      	ldr	r1, [pc, #232]	; (80038fc <HAL_I2C_EV_IRQHandler+0x260>)
 8003814:	4029      	ands	r1, r5
 8003816:	2900      	cmp	r1, #0
 8003818:	d1e5      	bne.n	80037e6 <HAL_I2C_EV_IRQHandler+0x14a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800381a:	493d      	ldr	r1, [pc, #244]	; (8003910 <HAL_I2C_EV_IRQHandler+0x274>)
 800381c:	4011      	ands	r1, r2
 800381e:	2900      	cmp	r1, #0
 8003820:	d078      	beq.n	8003914 <HAL_I2C_EV_IRQHandler+0x278>
 8003822:	0545      	lsls	r5, r0, #21
 8003824:	d576      	bpl.n	8003914 <HAL_I2C_EV_IRQHandler+0x278>
 8003826:	4937      	ldr	r1, [pc, #220]	; (8003904 <HAL_I2C_EV_IRQHandler+0x268>)
 8003828:	4011      	ands	r1, r2
 800382a:	2900      	cmp	r1, #0
 800382c:	d177      	bne.n	800391e <HAL_I2C_EV_IRQHandler+0x282>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800382e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003832:	2a22      	cmp	r2, #34	; 0x22
 8003834:	d1e2      	bne.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  {
    uint32_t tmp = 0U;
    
    tmp = hi2c->XferCount;
 8003836:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003838:	b292      	uxth	r2, r2
    if(tmp > 3U)
 800383a:	2a03      	cmp	r2, #3
 800383c:	d851      	bhi.n	80038e2 <HAL_I2C_EV_IRQHandler+0x246>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferCount--;
    }
    else if((tmp == 2U) || (tmp == 3U))
 800383e:	3a02      	subs	r2, #2
 8003840:	2a01      	cmp	r2, #1
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003842:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferCount--;
    }
    else if((tmp == 2U) || (tmp == 3U))
 8003844:	f240 8221 	bls.w	8003c8a <HAL_I2C_EV_IRQHandler+0x5ee>
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003848:	2a02      	cmp	r2, #2
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800384a:	681a      	ldr	r2, [r3, #0]

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800384c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800384e:	bf14      	ite	ne
 8003850:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003854:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 8003858:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003860:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	1c4a      	adds	r2, r1, #1
 8003866:	6262      	str	r2, [r4, #36]	; 0x24
 8003868:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 800386a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800386c:	3b01      	subs	r3, #1
 800386e:	b29b      	uxth	r3, r3

      hi2c->State = HAL_I2C_STATE_READY;
 8003870:	2220      	movs	r2, #32
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferCount--;
 8003872:	8563      	strh	r3, [r4, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 8003874:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003878:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	f040 808d 	bne.w	800399c <HAL_I2C_EV_IRQHandler+0x300>

    hi2c->State = HAL_I2C_STATE_READY;
    
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
    {
      hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	2300      	movs	r3, #0
 8003884:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;

      HAL_I2C_MemRxCpltCallback(hi2c);
 8003886:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
    
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
    {
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 800388c:	f7ff fde4 	bl	8003458 <HAL_I2C_MemRxCpltCallback>
 8003890:	e7b4      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Master_ADD10(hi2c);
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003892:	4e19      	ldr	r6, [pc, #100]	; (80038f8 <HAL_I2C_EV_IRQHandler+0x25c>)
 8003894:	4016      	ands	r6, r2
 8003896:	2e00      	cmp	r6, #0
 8003898:	d0a2      	beq.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
 800389a:	0587      	lsls	r7, r0, #22
 800389c:	d5a0      	bpl.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 800389e:	f894 603e 	ldrb.w	r6, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038a2:	f8d4 e02c 	ldr.w	lr, [r4, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80038a6:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038aa:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 80038ae:	2f22      	cmp	r7, #34	; 0x22
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 80038b0:	b2f6      	uxtb	r6, r6
  uint32_t CurrentXferOptions = hi2c->XferOptions;
  uint32_t Prev_State         = hi2c->PreviousState;

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038b2:	f000 818b 	beq.w	8003bcc <HAL_I2C_EV_IRQHandler+0x530>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	910a      	str	r1, [sp, #40]	; 0x28
 80038b8:	6959      	ldr	r1, [r3, #20]
 80038ba:	910a      	str	r1, [sp, #40]	; 0x28
 80038bc:	6999      	ldr	r1, [r3, #24]
 80038be:	910a      	str	r1, [sp, #40]	; 0x28
 80038c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80038c2:	e78d      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80038c4:	4912      	ldr	r1, [pc, #72]	; (8003910 <HAL_I2C_EV_IRQHandler+0x274>)
 80038c6:	4011      	ands	r1, r2
 80038c8:	2900      	cmp	r1, #0
 80038ca:	f040 80a6 	bne.w	8003a1a <HAL_I2C_EV_IRQHandler+0x37e>
      {
        I2C_SlaveReceive_RXNE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80038ce:	490d      	ldr	r1, [pc, #52]	; (8003904 <HAL_I2C_EV_IRQHandler+0x268>)
 80038d0:	4011      	ands	r1, r2
 80038d2:	2900      	cmp	r1, #0
 80038d4:	d092      	beq.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 80038d6:	0582      	lsls	r2, r0, #22
 80038d8:	d590      	bpl.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 80038da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038dc:	b292      	uxth	r2, r2
 80038de:	2a00      	cmp	r2, #0
 80038e0:	d08c      	beq.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80038e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	1c51      	adds	r1, r2, #1
 80038e8:	6261      	str	r1, [r4, #36]	; 0x24
 80038ea:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80038ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80038f4:	e782      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 80038f6:	bf00      	nop
 80038f8:	00010002 	andeq	r0, r1, r2
 80038fc:	00100004 	andseq	r0, r0, r4
 8003900:	00010080 	andeq	r0, r1, r0, lsl #1
 8003904:	00010004 	andeq	r0, r1, r4
 8003908:	00010010 	andeq	r0, r1, r0, lsl r0
 800390c:	00010008 	andeq	r0, r1, r8
 8003910:	00010040 	andeq	r0, r1, r0, asr #32
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
      {
        I2C_MasterReceive_RXNE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003914:	49ab      	ldr	r1, [pc, #684]	; (8003bc4 <HAL_I2C_EV_IRQHandler+0x528>)
 8003916:	4011      	ands	r1, r2
 8003918:	2900      	cmp	r1, #0
 800391a:	f43f af6f 	beq.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 800391e:	0580      	lsls	r0, r0, #22
 8003920:	f57f af6c 	bpl.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003924:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  if(hi2c->XferCount == 3U)
 8003926:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003928:	b292      	uxth	r2, r2
 800392a:	2a03      	cmp	r2, #3
 800392c:	f000 8171 	beq.w	8003c12 <HAL_I2C_EV_IRQHandler+0x576>

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;
  }
  else if(hi2c->XferCount == 2U)
 8003930:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003932:	b292      	uxth	r2, r2
 8003934:	2a02      	cmp	r2, #2
 8003936:	d1d4      	bne.n	80038e2 <HAL_I2C_EV_IRQHandler+0x246>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003938:	2904      	cmp	r1, #4
 800393a:	f000 8185 	beq.w	8003c48 <HAL_I2C_EV_IRQHandler+0x5ac>
 800393e:	2908      	cmp	r1, #8
 8003940:	f000 8182 	beq.w	8003c48 <HAL_I2C_EV_IRQHandler+0x5ac>
 8003944:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003948:	f000 817e 	beq.w	8003c48 <HAL_I2C_EV_IRQHandler+0x5ac>
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800394c:	681a      	ldr	r2, [r3, #0]
  else if(hi2c->XferCount == 2U)
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 800394e:	2902      	cmp	r1, #2
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003950:	bf14      	ite	ne
 8003952:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003956:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 800395a:	601a      	str	r2, [r3, #0]
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800395c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	1c51      	adds	r1, r2, #1
 8003962:	6261      	str	r1, [r4, #36]	; 0x24
 8003964:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003968:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800396a:	6821      	ldr	r1, [r4, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;
 800396c:	3b01      	subs	r3, #1
 800396e:	b29b      	uxth	r3, r3
 8003970:	8563      	strh	r3, [r4, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003972:	690b      	ldr	r3, [r1, #16]
 8003974:	1c51      	adds	r1, r2, #1
 8003976:	6261      	str	r1, [r4, #36]	; 0x24
 8003978:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 800397a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800397c:	6822      	ldr	r2, [r4, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;
 800397e:	3b01      	subs	r3, #1
 8003980:	b29b      	uxth	r3, r3
 8003982:	8563      	strh	r3, [r4, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003984:	6853      	ldr	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	2120      	movs	r1, #32
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003992:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	f43f af73 	beq.w	8003882 <HAL_I2C_EV_IRQHandler+0x1e6>

      HAL_I2C_MemRxCpltCallback(hi2c);
    }
    else
    {
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800399c:	2212      	movs	r2, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	2300      	movs	r3, #0

      HAL_I2C_MemRxCpltCallback(hi2c);
    }
    else
    {
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039a0:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;

      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039a2:	4620      	mov	r0, r4
      HAL_I2C_MemRxCpltCallback(hi2c);
    }
    else
    {
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039a8:	f7ff fd4a 	bl	8003440 <HAL_I2C_MasterRxCpltCallback>
 80039ac:	e726      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80039ae:	0547      	lsls	r7, r0, #21
 80039b0:	f57f af1e 	bpl.w	80037f0 <HAL_I2C_EV_IRQHandler+0x154>
 80039b4:	4983      	ldr	r1, [pc, #524]	; (8003bc4 <HAL_I2C_EV_IRQHandler+0x528>)
 80039b6:	4011      	ands	r1, r2
 80039b8:	2900      	cmp	r1, #0
 80039ba:	f47f af1c 	bne.w	80037f6 <HAL_I2C_EV_IRQHandler+0x15a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 80039be:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentMode        = hi2c->Mode;
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039c2:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
  uint32_t CurrentMode        = hi2c->Mode;
 80039c4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 80039ca:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 80039cc:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	f040 8136 	bne.w	8003c40 <HAL_I2C_EV_IRQHandler+0x5a4>
 80039d4:	2a21      	cmp	r2, #33	; 0x21
 80039d6:	f000 8175 	beq.w	8003cc4 <HAL_I2C_EV_IRQHandler+0x628>
        hi2c->Mode = HAL_I2C_MODE_NONE;
        HAL_I2C_MasterTxCpltCallback(hi2c);
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039da:	2940      	cmp	r1, #64	; 0x40
 80039dc:	f47f af0e 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039e0:	2a22      	cmp	r2, #34	; 0x22
 80039e2:	f47f af0b 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  {
    if(hi2c->XferCount == 0U)
 80039e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039e8:	b292      	uxth	r2, r2
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	f000 8158 	beq.w	8003ca0 <HAL_I2C_EV_IRQHandler+0x604>
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80039f0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80039f4:	2a40      	cmp	r2, #64	; 0x40
 80039f6:	f47f ae7e 	bne.w	80036f6 <HAL_I2C_EV_IRQHandler+0x5a>
      {
        if(hi2c->EventCount == 0)
 80039fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	f040 8200 	bne.w	8003e02 <HAL_I2C_EV_IRQHandler+0x766>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003a04:	2a01      	cmp	r2, #1
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
      {
        if(hi2c->EventCount == 0)
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a08:	f000 821f 	beq.w	8003e4a <HAL_I2C_EV_IRQHandler+0x7ae>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a10:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 8003a12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a14:	3301      	adds	r3, #1
 8003a16:	6523      	str	r3, [r4, #80]	; 0x50
 8003a18:	e6f0      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8003a1a:	0541      	lsls	r1, r0, #21
 8003a1c:	f57f af57 	bpl.w	80038ce <HAL_I2C_EV_IRQHandler+0x232>
 8003a20:	4968      	ldr	r1, [pc, #416]	; (8003bc4 <HAL_I2C_EV_IRQHandler+0x528>)
 8003a22:	4011      	ands	r1, r2
 8003a24:	2900      	cmp	r1, #0
 8003a26:	f47f af56 	bne.w	80038d6 <HAL_I2C_EV_IRQHandler+0x23a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003a2a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d

  if(hi2c->XferCount != 0U)
 8003a2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a30:	b292      	uxth	r2, r2
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003a32:	b2c9      	uxtb	r1, r1

  if(hi2c->XferCount != 0U)
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	f43f aee1 	beq.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003a3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	1c50      	adds	r0, r2, #1
 8003a40:	6260      	str	r0, [r4, #36]	; 0x24
 8003a42:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003a44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	8563      	strh	r3, [r4, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f47f aed3 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 8003a56:	292a      	cmp	r1, #42	; 0x2a
 8003a58:	f47f aed0 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	6853      	ldr	r3, [r2, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a60:	2522      	movs	r5, #34	; 0x22
    hi2c->XferCount--;

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a66:	2128      	movs	r1, #40	; 0x28
    hi2c->XferCount--;

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a68:	6053      	str	r3, [r2, #4]
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
      hi2c->State = HAL_I2C_STATE_LISTEN;

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a6a:	4620      	mov	r0, r4
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a6c:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a6e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a72:	f7ff fce9 	bl	8003448 <HAL_I2C_SlaveRxCpltCallback>
 8003a76:	e6c1      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8003a78:	0545      	lsls	r5, r0, #21
 8003a7a:	f57f ae2f 	bpl.w	80036dc <HAL_I2C_EV_IRQHandler+0x40>
 8003a7e:	4951      	ldr	r1, [pc, #324]	; (8003bc4 <HAL_I2C_EV_IRQHandler+0x528>)
 8003a80:	4011      	ands	r1, r2
 8003a82:	2900      	cmp	r1, #0
 8003a84:	f47f ae2f 	bne.w	80036e6 <HAL_I2C_EV_IRQHandler+0x4a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003a88:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d

  if(hi2c->XferCount != 0U)
 8003a8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a8e:	b292      	uxth	r2, r2
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003a90:	b2c9      	uxtb	r1, r1

  if(hi2c->XferCount != 0U)
 8003a92:	2a00      	cmp	r2, #0
 8003a94:	f43f aeb2 	beq.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003a98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a9a:	1c50      	adds	r0, r2, #1
 8003a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8003aa2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	b292      	uxth	r2, r2
 8003aa8:	8562      	strh	r2, [r4, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003aac:	b292      	uxth	r2, r2
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	f47f aea4 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 8003ab4:	2929      	cmp	r1, #41	; 0x29
 8003ab6:	f47f aea1 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aba:	685a      	ldr	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003abc:	2521      	movs	r5, #33	; 0x21
    hi2c->XferCount--;

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac2:	2128      	movs	r1, #40	; 0x28
    hi2c->XferCount--;

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ac4:	605a      	str	r2, [r3, #4]
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
      hi2c->State = HAL_I2C_STATE_LISTEN;
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ac6:	4620      	mov	r0, r4
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ac8:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ace:	f7ff fcb9 	bl	8003444 <HAL_I2C_SlaveTxCpltCallback>
 8003ad2:	e693      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8003ad8:	2940      	cmp	r1, #64	; 0x40
 8003ada:	d057      	beq.n	8003b8c <HAL_I2C_EV_IRQHandler+0x4f0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003adc:	6921      	ldr	r1, [r4, #16]
 8003ade:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003ae2:	d01c      	beq.n	8003b1e <HAL_I2C_EV_IRQHandler+0x482>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8003ae4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	d064      	beq.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x518>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if(hi2c->EventCount == 1U)
 8003aea:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003aec:	2901      	cmp	r1, #1
 8003aee:	f47f ae77 	bne.w	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003af2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003af4:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003af8:	11c9      	asrs	r1, r1, #7
 8003afa:	f041 01f1 	orr.w	r1, r1, #241	; 0xf1
 8003afe:	6119      	str	r1, [r3, #16]
 8003b00:	e66e      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
{
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8003b02:	6999      	ldr	r1, [r3, #24]
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8003b04:	699b      	ldr	r3, [r3, #24]
{
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8003b06:	f081 0104 	eor.w	r1, r1, #4
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8003b0a:	061f      	lsls	r7, r3, #24
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b0c:	f3c1 0180 	ubfx	r1, r1, #2, #1
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8003b10:	bf54      	ite	pl
 8003b12:	89a2      	ldrhpl	r2, [r4, #12]
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8003b14:	8b22      	ldrhmi	r2, [r4, #24]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b16:	4620      	mov	r0, r4
 8003b18:	f7ff fc98 	bl	800344c <HAL_I2C_AddrCallback>
 8003b1c:	e66e      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8003b1e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003b22:	2921      	cmp	r1, #33	; 0x21
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b24:	6c61      	ldr	r1, [r4, #68]	; 0x44
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b26:	bf16      	itet	ne
 8003b28:	f041 0101 	orrne.w	r1, r1, #1
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b2c:	f001 01fe 	andeq.w	r1, r1, #254	; 0xfe
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b30:	b2c9      	uxtbne	r1, r1
 8003b32:	6119      	str	r1, [r3, #16]
 8003b34:	e654      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b38:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003b3c:	2a21      	cmp	r2, #33	; 0x21
 8003b3e:	f47f ae5d 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  {    
    if(hi2c->XferCount != 0U)
 8003b42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b44:	b292      	uxth	r2, r2
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	f47f add5 	bne.w	80036f6 <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->XferCount--;
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b4c:	2904      	cmp	r1, #4
 8003b4e:	d005      	beq.n	8003b5c <HAL_I2C_EV_IRQHandler+0x4c0>
 8003b50:	2908      	cmp	r1, #8
 8003b52:	d003      	beq.n	8003b5c <HAL_I2C_EV_IRQHandler+0x4c0>
 8003b54:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003b58:	f040 80a7 	bne.w	8003caa <HAL_I2C_EV_IRQHandler+0x60e>
        HAL_I2C_MasterTxCpltCallback(hi2c);
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b62:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b64:	681a      	ldr	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	2100      	movs	r1, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	2020      	movs	r0, #32
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b70:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b76:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
        
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State = HAL_I2C_STATE_READY;
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b80:	4620      	mov	r0, r4
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
        
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State = HAL_I2C_STATE_READY;
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b82:	f000 80bc 	beq.w	8003cfe <HAL_I2C_EV_IRQHandler+0x662>
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
        hi2c->Mode = HAL_I2C_MODE_NONE;
        hi2c->State = HAL_I2C_STATE_READY;
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b86:	f7ff fc59 	bl	800343c <HAL_I2C_MasterTxCpltCallback>
 8003b8a:	e637      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
  {
    if(hi2c->EventCount == 0U)
 8003b8c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	d150      	bne.n	8003c34 <HAL_I2C_EV_IRQHandler+0x598>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b94:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8003b98:	6119      	str	r1, [r3, #16]
 8003b9a:	e621      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_I2C_EV_IRQHandler+0x52c>)
 8003b9e:	62e2      	str	r2, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	2220      	movs	r2, #32
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ba2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ba4:	4620      	mov	r0, r4
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 8003bae:	f7ff fc4f 	bl	8003450 <HAL_I2C_ListenCpltCallback>
 8003bb2:	e623      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    else
    {
      if(hi2c->EventCount == 0U)
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003bb6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003bba:	11c9      	asrs	r1, r1, #7
 8003bbc:	f041 01f0 	orr.w	r1, r1, #240	; 0xf0
 8003bc0:	6119      	str	r1, [r3, #16]
 8003bc2:	e60d      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
 8003bc4:	00010004 	andeq	r0, r1, r4
 8003bc8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
  uint32_t CurrentXferOptions = hi2c->XferOptions;
  uint32_t Prev_State         = hi2c->PreviousState;

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bcc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003bce:	b911      	cbnz	r1, 8003bd6 <HAL_I2C_EV_IRQHandler+0x53a>
 8003bd0:	2e40      	cmp	r6, #64	; 0x40
 8003bd2:	f000 80b4 	beq.w	8003d3e <HAL_I2C_EV_IRQHandler+0x6a2>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bd6:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8003bd8:	b926      	cbnz	r6, 8003be4 <HAL_I2C_EV_IRQHandler+0x548>
 8003bda:	6921      	ldr	r1, [r4, #16]
 8003bdc:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003be0:	f000 80b4 	beq.w	8003d4c <HAL_I2C_EV_IRQHandler+0x6b0>
      
      hi2c->EventCount++;
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8003be4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003be6:	b289      	uxth	r1, r1
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d132      	bne.n	8003c52 <HAL_I2C_EV_IRQHandler+0x5b6>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bec:	9103      	str	r1, [sp, #12]
 8003bee:	6959      	ldr	r1, [r3, #20]
 8003bf0:	9103      	str	r1, [sp, #12]
 8003bf2:	6999      	ldr	r1, [r3, #24]
 8003bf4:	9103      	str	r1, [sp, #12]
 8003bf6:	9903      	ldr	r1, [sp, #12]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003bfe:	6019      	str	r1, [r3, #0]
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c00:	2100      	movs	r1, #0
 8003c02:	6521      	str	r1, [r4, #80]	; 0x50
 8003c04:	e5ec      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c08:	6809      	ldr	r1, [r1, #0]
 8003c0a:	6849      	ldr	r1, [r1, #4]
 8003c0c:	b289      	uxth	r1, r1
 8003c0e:	8561      	strh	r1, [r4, #42]	; 0x2a
 8003c10:	e5a7      	b.n	8003762 <HAL_I2C_EV_IRQHandler+0xc6>
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if(hi2c->XferCount == 3U)
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c12:	2904      	cmp	r1, #4
 8003c14:	d005      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0x586>
 8003c16:	2908      	cmp	r1, #8
 8003c18:	d003      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0x586>
 8003c1a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003c1e:	f47f ae60 	bne.w	80038e2 <HAL_I2C_EV_IRQHandler+0x246>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e65a      	b.n	80038e2 <HAL_I2C_EV_IRQHandler+0x246>
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff fc71 	bl	8003514 <I2C_ITError>
 8003c32:	e5e3      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c36:	f041 0101 	orr.w	r1, r1, #1
 8003c3a:	b2c9      	uxtb	r1, r1
 8003c3c:	6119      	str	r1, [r3, #16]
 8003c3e:	e5cf      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
        hi2c->Mode = HAL_I2C_MODE_NONE;
        HAL_I2C_MasterTxCpltCallback(hi2c);
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c40:	2a21      	cmp	r2, #33	; 0x21
 8003c42:	f47f aeca 	bne.w	80039da <HAL_I2C_EV_IRQHandler+0x33e>
 8003c46:	e6ce      	b.n	80039e6 <HAL_I2C_EV_IRQHandler+0x34a>
      }
    }
    else
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e684      	b.n	800395c <HAL_I2C_EV_IRQHandler+0x2c0>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
      }
      else if(hi2c->XferCount == 1U)   
 8003c52:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003c54:	b289      	uxth	r1, r1
 8003c56:	2901      	cmp	r1, #1
 8003c58:	d054      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0x668>
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
        }
      }
      else if(hi2c->XferCount == 2U)
 8003c5a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003c5c:	b289      	uxth	r1, r1
 8003c5e:	2902      	cmp	r1, #2
 8003c60:	f000 8082 	beq.w	8003d68 <HAL_I2C_EV_IRQHandler+0x6cc>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003c6a:	6019      	str	r1, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	0509      	lsls	r1, r1, #20
 8003c70:	d503      	bpl.n	8003c7a <HAL_I2C_EV_IRQHandler+0x5de>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003c78:	6059      	str	r1, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	9109      	str	r1, [sp, #36]	; 0x24
 8003c7e:	6959      	ldr	r1, [r3, #20]
 8003c80:	9109      	str	r1, [sp, #36]	; 0x24
 8003c82:	6999      	ldr	r1, [r3, #24]
 8003c84:	9109      	str	r1, [sp, #36]	; 0x24
 8003c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c88:	e7ba      	b.n	8003c00 <HAL_I2C_EV_IRQHandler+0x564>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferCount--;
    }
    else if((tmp == 2U) || (tmp == 3U))
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003c8a:	2a02      	cmp	r2, #2
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003c8c:	681a      	ldr	r2, [r3, #0]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferCount--;
    }
    else if((tmp == 2U) || (tmp == 3U))
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003c8e:	f000 80cd 	beq.w	8003e2c <HAL_I2C_EV_IRQHandler+0x790>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	601a      	str	r2, [r3, #0]
        
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c9e:	601a      	str	r2, [r3, #0]
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
      }
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	e5a8      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003caa:	6859      	ldr	r1, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cac:	2611      	movs	r6, #17
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cae:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
        hi2c->Mode = HAL_I2C_MODE_NONE;
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	2520      	movs	r5, #32
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb4:	6059      	str	r1, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
        hi2c->Mode = HAL_I2C_MODE_NONE;
        hi2c->State = HAL_I2C_STATE_READY;
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cb6:	4620      	mov	r0, r4
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cb8:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8003cc2:	e760      	b.n	8003b86 <HAL_I2C_EV_IRQHandler+0x4ea>
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cc4:	2804      	cmp	r0, #4
 8003cc6:	d005      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x638>
 8003cc8:	2808      	cmp	r0, #8
 8003cca:	d003      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x638>
 8003ccc:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003cd0:	f040 8088 	bne.w	8003de4 <HAL_I2C_EV_IRQHandler+0x748>
      HAL_I2C_MasterTxCpltCallback(hi2c);
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cda:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003cdc:	6819      	ldr	r1, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003ce0:	2020      	movs	r0, #32
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003ce2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003ce6:	6019      	str	r1, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce8:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cee:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003cf8:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_STOP;

      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cfa:	f47f af44 	bne.w	8003b86 <HAL_I2C_EV_IRQHandler+0x4ea>
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cfe:	f7ff fba9 	bl	8003454 <HAL_I2C_MemTxCpltCallback>
 8003d02:	e57b      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
      }
      else if(hi2c->XferCount == 1U)   
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d04:	f51e 3f80 	cmn.w	lr, #65536	; 0x10000
 8003d08:	d058      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x720>
            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d0a:	f1be 0f04 	cmp.w	lr, #4
 8003d0e:	d045      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x700>
 8003d10:	f1be 0f08 	cmp.w	lr, #8
 8003d14:	d042      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x700>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8003d16:	f1bc 0f12 	cmp.w	ip, #18
 8003d1a:	d03f      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x700>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003d1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d1e:	2902      	cmp	r1, #2
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	bf14      	ite	ne
 8003d24:	f421 6180 	bicne.w	r1, r1, #1024	; 0x400
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003d28:	f441 6180 	orreq.w	r1, r1, #1024	; 0x400
 8003d2c:	6019      	str	r1, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	9106      	str	r1, [sp, #24]
 8003d32:	6959      	ldr	r1, [r3, #20]
 8003d34:	9106      	str	r1, [sp, #24]
 8003d36:	6999      	ldr	r1, [r3, #24]
 8003d38:	9106      	str	r1, [sp, #24]
 8003d3a:	9906      	ldr	r1, [sp, #24]
 8003d3c:	e760      	b.n	8003c00 <HAL_I2C_EV_IRQHandler+0x564>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	9101      	str	r1, [sp, #4]
 8003d40:	6959      	ldr	r1, [r3, #20]
 8003d42:	9101      	str	r1, [sp, #4]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	9101      	str	r1, [sp, #4]
 8003d48:	9901      	ldr	r1, [sp, #4]
 8003d4a:	e549      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4c:	9602      	str	r6, [sp, #8]
 8003d4e:	6959      	ldr	r1, [r3, #20]
 8003d50:	9102      	str	r1, [sp, #8]
 8003d52:	6999      	ldr	r1, [r3, #24]
 8003d54:	9102      	str	r1, [sp, #8]
 8003d56:	9902      	ldr	r1, [sp, #8]
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003d5e:	6019      	str	r1, [r3, #0]
      
      hi2c->EventCount++;
 8003d60:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003d62:	3101      	adds	r1, #1
 8003d64:	6521      	str	r1, [r4, #80]	; 0x50
 8003d66:	e53b      	b.n	80037e0 <HAL_I2C_EV_IRQHandler+0x144>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
        }
      }
      else if(hi2c->XferCount == 2U)
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003d68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d6a:	2902      	cmp	r1, #2
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d6c:	6819      	ldr	r1, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
        }
      }
      else if(hi2c->XferCount == 2U)
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003d6e:	d059      	beq.n	8003e24 <HAL_I2C_EV_IRQHandler+0x788>
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d70:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003d74:	6019      	str	r1, [r3, #0]
          
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003d7c:	6019      	str	r1, [r3, #0]
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	050e      	lsls	r6, r1, #20
 8003d82:	d503      	bpl.n	8003d8c <HAL_I2C_EV_IRQHandler+0x6f0>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003d8a:	6059      	str	r1, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	9108      	str	r1, [sp, #32]
 8003d90:	6959      	ldr	r1, [r3, #20]
 8003d92:	9108      	str	r1, [sp, #32]
 8003d94:	6999      	ldr	r1, [r3, #24]
 8003d96:	9108      	str	r1, [sp, #32]
 8003d98:	9908      	ldr	r1, [sp, #32]
 8003d9a:	e731      	b.n	8003c00 <HAL_I2C_EV_IRQHandler+0x564>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d9c:	6819      	ldr	r1, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2600      	movs	r6, #0
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003da0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003da4:	6019      	str	r1, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da6:	9607      	str	r6, [sp, #28]
 8003da8:	6959      	ldr	r1, [r3, #20]
 8003daa:	9107      	str	r1, [sp, #28]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	9107      	str	r1, [sp, #28]
 8003db0:	9907      	ldr	r1, [sp, #28]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003db8:	6019      	str	r1, [r3, #0]
 8003dba:	e721      	b.n	8003c00 <HAL_I2C_EV_IRQHandler+0x564>
      else if(hi2c->XferCount == 1U)   
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003dc2:	6019      	str	r1, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 8003dca:	d033      	beq.n	8003e34 <HAL_I2C_EV_IRQHandler+0x798>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003dcc:	6819      	ldr	r1, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2600      	movs	r6, #0
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003dd0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003dd4:	6019      	str	r1, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd6:	9604      	str	r6, [sp, #16]
 8003dd8:	6959      	ldr	r1, [r3, #20]
 8003dda:	9104      	str	r1, [sp, #16]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	9104      	str	r1, [sp, #16]
 8003de0:	9904      	ldr	r1, [sp, #16]
 8003de2:	e70d      	b.n	8003c00 <HAL_I2C_EV_IRQHandler+0x564>
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de4:	685a      	ldr	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003de6:	2611      	movs	r6, #17
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
      hi2c->Mode = HAL_I2C_MODE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	2120      	movs	r1, #32
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
      hi2c->Mode = HAL_I2C_MODE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003df0:	4620      	mov	r0, r4
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003df2:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfc:	f7ff fb1e 	bl	800343c <HAL_I2C_MasterTxCpltCallback>
 8003e00:	e4fc      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
            
            hi2c->EventCount++;
          }
        }
        else if(hi2c->EventCount == 1)
 8003e02:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e04:	2a01      	cmp	r2, #1
 8003e06:	d026      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x7ba>
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
          
          hi2c->EventCount++;
        }
        else if(hi2c->EventCount == 2)
 8003e08:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e0a:	2a02      	cmp	r2, #2
 8003e0c:	f47f acf6 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e10:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003e14:	2a22      	cmp	r2, #34	; 0x22
 8003e16:	d025      	beq.n	8003e64 <HAL_I2C_EV_IRQHandler+0x7c8>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e18:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003e1c:	2a21      	cmp	r2, #33	; 0x21
 8003e1e:	f47f aced 	bne.w	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 8003e22:	e468      	b.n	80036f6 <HAL_I2C_EV_IRQHandler+0x5a>
          hi2c->Instance->CR1 |= I2C_CR1_POS;
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003e24:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003e28:	6019      	str	r1, [r3, #0]
 8003e2a:	e7a8      	b.n	8003d7e <HAL_I2C_EV_IRQHandler+0x6e2>
        hi2c->Instance->CR1 |= I2C_CR1_POS;
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e735      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x604>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e34:	9105      	str	r1, [sp, #20]
 8003e36:	6959      	ldr	r1, [r3, #20]
 8003e38:	9105      	str	r1, [sp, #20]
 8003e3a:	6999      	ldr	r1, [r3, #24]
 8003e3c:	9105      	str	r1, [sp, #20]
 8003e3e:	9905      	ldr	r1, [sp, #20]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003e46:	6019      	str	r1, [r3, #0]
 8003e48:	e6da      	b.n	8003c00 <HAL_I2C_EV_IRQHandler+0x564>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 8003e4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e50:	3302      	adds	r3, #2
 8003e52:	6523      	str	r3, [r4, #80]	; 0x50
 8003e54:	e4d2      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
          }
        }
        else if(hi2c->EventCount == 1)
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 8003e5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e5e:	3301      	adds	r3, #1
 8003e60:	6523      	str	r3, [r4, #80]	; 0x50
 8003e62:	e4cb      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
        else if(hi2c->EventCount == 2)
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e4c6      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x160>
 8003e6e:	bf00      	nop

08003e70 <I2C_DMAAbort>:
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e70:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003e72:	6802      	ldr	r2, [r0, #0]
 8003e74:	6811      	ldr	r1, [r2, #0]
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e76:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003e78:	f421 6180 	bic.w	r1, r1, #1024	; 0x400

  hi2c->XferCount = 0U;
 8003e7c:	2300      	movs	r3, #0

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003e7e:	6b45      	ldr	r5, [r0, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003e80:	6b84      	ldr	r4, [r0, #56]	; 0x38
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003e82:	6011      	str	r1, [r2, #0]

  hi2c->XferCount = 0U;
 8003e84:	8543      	strh	r3, [r0, #42]	; 0x2a
  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
  hi2c->hdmarx->XferAbortCallback = NULL;

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8003e86:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003e8a:	652b      	str	r3, [r5, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8003e8c:	2960      	cmp	r1, #96	; 0x60
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	f04f 0120 	mov.w	r1, #32

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003e92:	6523      	str	r3, [r4, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e98:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
  hi2c->hdmarx->XferAbortCallback = NULL;

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8003e9c:	d006      	beq.n	8003eac <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 8003ea6:	f7ff fad9 	bl	800345c <HAL_I2C_ErrorCallback>
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	6403      	str	r3, [r0, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eb6:	f7ff fb2b 	bl	8003510 <HAL_I2C_AbortCpltCallback>
 8003eba:	bd38      	pop	{r3, r4, r5, pc}

08003ebc <HAL_I2C_ER_IRQHandler>:
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ebc:	6803      	ldr	r3, [r0, #0]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003ebe:	4aa2      	ldr	r2, [pc, #648]	; (8004148 <HAL_I2C_ER_IRQHandler+0x28c>)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ec2:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ec4:	6859      	ldr	r1, [r3, #4]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003ec6:	402a      	ands	r2, r5
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	4604      	mov	r4, r0
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	d034      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x7c>
 8003ece:	05ce      	lsls	r6, r1, #23
 8003ed0:	f140 808f 	bpl.w	8003ff2 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003ed4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003ed6:	f415 3f81 	tst.w	r5, #66048	; 0x10200
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eda:	f46f 7080 	mvn.w	r0, #256	; 0x100
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	6422      	str	r2, [r4, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ee4:	6158      	str	r0, [r3, #20]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003ee6:	d033      	beq.n	8003f50 <HAL_I2C_ER_IRQHandler+0x94>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003ee8:	6c22      	ldr	r2, [r4, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eea:	f46f 7000 	mvn.w	r0, #512	; 0x200
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003eee:	f042 0202 	orr.w	r2, r2, #2
    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003ef2:	f415 3f82 	tst.w	r5, #66560	; 0x10400
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003ef6:	6422      	str	r2, [r4, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ef8:	6158      	str	r0, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003efa:	d02c      	beq.n	8003f56 <HAL_I2C_ER_IRQHandler+0x9a>
  {
    tmp1 = hi2c->Mode;
 8003efc:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8003f00:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8003f02:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8003f06:	6b26      	ldr	r6, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f08:	2820      	cmp	r0, #32

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
  {
    tmp1 = hi2c->Mode;
    tmp2 = hi2c->XferCount;
 8003f0a:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 8003f0c:	b2c9      	uxtb	r1, r1
    tmp4 = hi2c->PreviousState;
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f0e:	f000 80a0 	beq.w	8004052 <HAL_I2C_ER_IRQHandler+0x196>
    {
      I2C_Slave_AF(hi2c);
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f14:	f042 0204 	orr.w	r2, r2, #4
 8003f18:	6422      	str	r2, [r4, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003f1a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003f1e:	2a10      	cmp	r2, #16
 8003f20:	f000 808b 	beq.w	800403a <HAL_I2C_ER_IRQHandler+0x17e>
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f28:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003f2a:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8003f2e:	f040 8082 	bne.w	8004036 <HAL_I2C_ER_IRQHandler+0x17a>
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f34:	b9f3      	cbnz	r3, 8003f74 <HAL_I2C_ER_IRQHandler+0xb8>
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003f38:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 8003f3c:	d002      	beq.n	8003f44 <HAL_I2C_ER_IRQHandler+0x88>
 8003f3e:	05c8      	lsls	r0, r1, #23
 8003f40:	d4d2      	bmi.n	8003ee8 <HAL_I2C_ER_IRQHandler+0x2c>
 8003f42:	e7f6      	b.n	8003f32 <HAL_I2C_ER_IRQHandler+0x76>
    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003f44:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 8003f48:	d005      	beq.n	8003f56 <HAL_I2C_ER_IRQHandler+0x9a>
 8003f4a:	05ca      	lsls	r2, r1, #23
 8003f4c:	d4d6      	bmi.n	8003efc <HAL_I2C_ER_IRQHandler+0x40>
 8003f4e:	e7f0      	b.n	8003f32 <HAL_I2C_ER_IRQHandler+0x76>
 8003f50:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 8003f54:	d1d2      	bne.n	8003efc <HAL_I2C_ER_IRQHandler+0x40>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003f56:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8003f5a:	d0ea      	beq.n	8003f32 <HAL_I2C_ER_IRQHandler+0x76>
 8003f5c:	05ce      	lsls	r6, r1, #23
 8003f5e:	d5e8      	bpl.n	8003f32 <HAL_I2C_ER_IRQHandler+0x76>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f60:	6c22      	ldr	r2, [r4, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f62:	f46f 6100 	mvn.w	r1, #2048	; 0x800
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f66:	f042 0208 	orr.w	r2, r2, #8
 8003f6a:	6422      	str	r2, [r4, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f6c:	6159      	str	r1, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0e0      	beq.n	8003f36 <HAL_I2C_ER_IRQHandler+0x7a>
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003f74:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f78:	3b29      	subs	r3, #41	; 0x29
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d962      	bls.n	8004044 <HAL_I2C_ER_IRQHandler+0x188>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8003f7e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003f82:	2b60      	cmp	r3, #96	; 0x60
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	d005      	beq.n	8003f94 <HAL_I2C_ER_IRQHandler+0xd8>
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	0515      	lsls	r5, r2, #20
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	bf5c      	itt	pl
 8003f8e:	2220      	movpl	r2, #32
 8003f90:	f884 203d 	strbpl.w	r2, [r4, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f94:	2200      	movs	r2, #0
 8003f96:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003faa:	d129      	bne.n	8004000 <HAL_I2C_ER_IRQHandler+0x144>
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8003fac:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003fb0:	2960      	cmp	r1, #96	; 0x60
 8003fb2:	d07d      	beq.n	80040b0 <HAL_I2C_ER_IRQHandler+0x1f4>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	0652      	lsls	r2, r2, #25
 8003fb8:	d504      	bpl.n	8003fc4 <HAL_I2C_ER_IRQHandler+0x108>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003fba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	1c51      	adds	r1, r2, #1
 8003fc0:	6261      	str	r1, [r4, #36]	; 0x24
 8003fc2:	7013      	strb	r3, [r2, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f7ff fa49 	bl	800345c <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8003fca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003fce:	2b28      	cmp	r3, #40	; 0x28
 8003fd0:	d1b1      	bne.n	8003f36 <HAL_I2C_ER_IRQHandler+0x7a>
 8003fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fd4:	075b      	lsls	r3, r3, #29
 8003fd6:	d5ae      	bpl.n	8003f36 <HAL_I2C_ER_IRQHandler+0x7a>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd8:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_I2C_ER_IRQHandler+0x290>)
 8003fda:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	2220      	movs	r2, #32
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fe2:	4620      	mov	r0, r4
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fec:	f7ff fa30 	bl	8003450 <HAL_I2C_ListenCpltCallback>
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003ff2:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 8003ff6:	d19c      	bne.n	8003f32 <HAL_I2C_ER_IRQHandler+0x76>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003ff8:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8003ffc:	d099      	beq.n	8003f32 <HAL_I2C_ER_IRQHandler+0x76>
 8003ffe:	e7ad      	b.n	8003f5c <HAL_I2C_ER_IRQHandler+0xa0>
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004000:	685a      	ldr	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004002:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004008:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800400a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800400e:	2b01      	cmp	r3, #1
 8004010:	d063      	beq.n	80040da <HAL_I2C_ER_IRQHandler+0x21e>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004012:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <HAL_I2C_ER_IRQHandler+0x294>)
 8004014:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004016:	f000 fa43 	bl	80044a0 <HAL_DMA_Abort_IT>
 800401a:	2800      	cmp	r0, #0
 800401c:	d0d5      	beq.n	8003fca <HAL_I2C_ER_IRQHandler+0x10e>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800401e:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004020:	6b60      	ldr	r0, [r4, #52]	; 0x34
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004022:	6813      	ldr	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004024:	6d01      	ldr	r1, [r0, #80]	; 0x50
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004026:	f023 0301 	bic.w	r3, r3, #1

        hi2c->State = HAL_I2C_STATE_READY;
 800402a:	2520      	movs	r5, #32
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800402c:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800402e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004032:	4788      	blx	r1
 8004034:	e7c9      	b.n	8003fca <HAL_I2C_ER_IRQHandler+0x10e>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	e792      	b.n	8003f60 <HAL_I2C_ER_IRQHandler+0xa4>

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e76f      	b.n	8003f24 <HAL_I2C_ER_IRQHandler+0x68>
  uint32_t CurrentState = hi2c->State;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004044:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004046:	2228      	movs	r2, #40	; 0x28
  uint32_t CurrentState = hi2c->State;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	6323      	str	r3, [r4, #48]	; 0x30
 800404a:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800404c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8004050:	e7a4      	b.n	8003f9c <HAL_I2C_ER_IRQHandler+0xe0>
  {
    tmp1 = hi2c->Mode;
    tmp2 = hi2c->XferCount;
    tmp3 = hi2c->State;
    tmp4 = hi2c->PreviousState;
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004052:	2a00      	cmp	r2, #0
 8004054:	f47f af5d 	bne.w	8003f12 <HAL_I2C_ER_IRQHandler+0x56>
 8004058:	f001 02f7 	and.w	r2, r1, #247	; 0xf7
 800405c:	2a21      	cmp	r2, #33	; 0x21
 800405e:	d005      	beq.n	800406c <HAL_I2C_ER_IRQHandler+0x1b0>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004060:	2928      	cmp	r1, #40	; 0x28
 8004062:	f47f af56 	bne.w	8003f12 <HAL_I2C_ER_IRQHandler+0x56>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004066:	2e21      	cmp	r6, #33	; 0x21
 8004068:	f47f af53 	bne.w	8003f12 <HAL_I2C_ER_IRQHandler+0x56>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 800406c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004070:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004072:	2904      	cmp	r1, #4
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8004074:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004076:	d04d      	beq.n	8004114 <HAL_I2C_ER_IRQHandler+0x258>
 8004078:	2908      	cmp	r1, #8
 800407a:	d04b      	beq.n	8004114 <HAL_I2C_ER_IRQHandler+0x258>
    hi2c->Mode = HAL_I2C_MODE_NONE;
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 800407c:	2a21      	cmp	r2, #33	; 0x21
 800407e:	f47f af51 	bne.w	8003f24 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004082:	4932      	ldr	r1, [pc, #200]	; (800414c <HAL_I2C_ER_IRQHandler+0x290>)
 8004084:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	2020      	movs	r0, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	2100      	movs	r1, #0
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800408a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004094:	685a      	ldr	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800409a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409e:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a0:	6159      	str	r1, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	400a      	ands	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7ff f9cb 	bl	8003444 <HAL_I2C_SlaveTxCpltCallback>
 80040ae:	e73c      	b.n	8003f2a <HAL_I2C_ER_IRQHandler+0x6e>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	2120      	movs	r1, #32
 80040b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b6:	6422      	str	r2, [r4, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	0651      	lsls	r1, r2, #25
 80040bc:	d505      	bpl.n	80040ca <HAL_I2C_ER_IRQHandler+0x20e>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80040be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	1c51      	adds	r1, r2, #1
 80040c4:	6261      	str	r1, [r4, #36]	; 0x24
 80040c6:	7013      	strb	r3, [r2, #0]
 80040c8:	6823      	ldr	r3, [r4, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7ff fa1c 	bl	8003510 <HAL_I2C_AbortCpltCallback>
 80040d8:	e777      	b.n	8003fca <HAL_I2C_ER_IRQHandler+0x10e>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_I2C_ER_IRQHandler+0x294>)
 80040de:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040e0:	f000 f9de 	bl	80044a0 <HAL_DMA_Abort_IT>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	f43f af70 	beq.w	8003fca <HAL_I2C_ER_IRQHandler+0x10e>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	0650      	lsls	r0, r2, #25
 80040f0:	d505      	bpl.n	80040fe <HAL_I2C_ER_IRQHandler+0x242>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80040f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	1c51      	adds	r1, r2, #1
 80040f8:	6261      	str	r1, [r4, #36]	; 0x24
 80040fa:	7013      	strb	r3, [r2, #0]
 80040fc:	6823      	ldr	r3, [r4, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040fe:	681a      	ldr	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004100:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004102:	f022 0201 	bic.w	r2, r2, #1

        hi2c->State = HAL_I2C_STATE_READY;
 8004106:	2120      	movs	r1, #32
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004108:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800410a:	6d03      	ldr	r3, [r0, #80]	; 0x50
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);

        hi2c->State = HAL_I2C_STATE_READY;
 800410c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004110:	4798      	blx	r3
 8004112:	e75a      	b.n	8003fca <HAL_I2C_ER_IRQHandler+0x10e>
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004114:	2a28      	cmp	r2, #40	; 0x28
 8004116:	d1b1      	bne.n	800407c <HAL_I2C_ER_IRQHandler+0x1c0>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004118:	4a0c      	ldr	r2, [pc, #48]	; (800414c <HAL_I2C_ER_IRQHandler+0x290>)
 800411a:	62e2      	str	r2, [r4, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800411c:	685a      	ldr	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004126:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004128:	6159      	str	r1, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800412a:	681a      	ldr	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800412c:	2100      	movs	r1, #0

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400

    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8004132:	2620      	movs	r6, #32

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004134:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8004136:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

    hi2c->PreviousState = I2C_STATE_NONE;
 8004138:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800413a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8004142:	f7ff f985 	bl	8003450 <HAL_I2C_ListenCpltCallback>
 8004146:	e6f0      	b.n	8003f2a <HAL_I2C_ER_IRQHandler+0x6e>
 8004148:	00010100 	andeq	r0, r1, r0, lsl #2
 800414c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 8004150:	08003e71 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, fp, ip, sp}

08004154 <HAL_I2C_GetState>:
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  /* Return I2C handle state */
  return hi2c->State;
 8004154:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop

0800415c <HAL_I2C_GetMode>:
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
  return hi2c->Mode;
 800415c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop

08004164 <HAL_I2C_GetError>:
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
  return hi2c->ErrorCode;
 8004164:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8004166:	4770      	bx	lr

08004168 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004168:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 800416c:	4607      	mov	r7, r0
 800416e:	b082      	sub	sp, #8
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004170:	f7fc f998 	bl	80004a4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004174:	2f00      	cmp	r7, #0
 8004176:	d07c      	beq.n	8004272 <HAL_DMA_Init+0x10a>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004178:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800417a:	683b      	ldr	r3, [r7, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800417c:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004180:	681a      	ldr	r2, [r3, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004182:	2100      	movs	r1, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004184:	f022 0201 	bic.w	r2, r2, #1
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004188:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
 800418c:	4604      	mov	r4, r0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800418e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004190:	e005      	b.n	800419e <HAL_DMA_Init+0x36>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004192:	f7fc f987 	bl	80004a4 <HAL_GetTick>
 8004196:	1b00      	subs	r0, r0, r4
 8004198:	2805      	cmp	r0, #5
 800419a:	d844      	bhi.n	8004226 <HAL_DMA_Init+0xbe>
 800419c:	683b      	ldr	r3, [r7, #0]
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	07d1      	lsls	r1, r2, #31
 80041a2:	d4f6      	bmi.n	8004192 <HAL_DMA_Init+0x2a>
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	9201      	str	r2, [sp, #4]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a8:	687e      	ldr	r6, [r7, #4]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	68fd      	ldr	r5, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ae:	693c      	ldr	r4, [r7, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b0:	f8d7 c018 	ldr.w	ip, [r7, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 80041b4:	6a39      	ldr	r1, [r7, #32]
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041b6:	f8d3 a000 	ldr.w	sl, [r3]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041ba:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80042b4 <HAL_DMA_Init+0x14c>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041be:	6a78      	ldr	r0, [r7, #36]	; 0x24
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c0:	4316      	orrs	r6, r2
 80041c2:	4335      	orrs	r5, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c4:	9a01      	ldr	r2, [sp, #4]
 80041c6:	432c      	orrs	r4, r5
 80041c8:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ca:	69fc      	ldr	r4, [r7, #28]
 80041cc:	ea42 020c 	orr.w	r2, r2, ip
 80041d0:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d2:	4311      	orrs	r1, r2
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041d4:	ea0a 0e0e 	and.w	lr, sl, lr
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d8:	2804      	cmp	r0, #4
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041da:	ea41 010e 	orr.w	r1, r1, lr
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041de:	d02b      	beq.n	8004238 <HAL_DMA_Init+0xd0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041e0:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041e2:	6959      	ldr	r1, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041e4:	f021 0107 	bic.w	r1, r1, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041e8:	4301      	orrs	r1, r0
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4c2f      	ldr	r4, [pc, #188]	; (80042ac <HAL_DMA_Init+0x144>)
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041ee:	6159      	str	r1, [r3, #20]
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041f0:	3a10      	subs	r2, #16
 80041f2:	fba4 1202 	umull	r1, r2, r4, r2
 80041f6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041f8:	482d      	ldr	r0, [pc, #180]	; (80042b0 <HAL_DMA_Init+0x148>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041fe:	5c81      	ldrb	r1, [r0, r2]
 8004200:	65f9      	str	r1, [r7, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004202:	f023 0303 	bic.w	r3, r3, #3
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
 8004206:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004208:	bf88      	it	hi
 800420a:	3304      	addhi	r3, #4
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420c:	223f      	movs	r2, #63	; 0x3f
 800420e:	408a      	lsls	r2, r1

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004210:	2401      	movs	r4, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004212:	2100      	movs	r1, #0
 8004214:	65bb      	str	r3, [r7, #88]	; 0x58
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
 8004216:	4608      	mov	r0, r1
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004218:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421a:	6579      	str	r1, [r7, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800421c:	f887 4035 	strb.w	r4, [r7, #53]	; 0x35

  return HAL_OK;
}
 8004220:	b002      	add	sp, #8
 8004222:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004226:	2303      	movs	r3, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004228:	2220      	movs	r2, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
      
      return HAL_TIMEOUT;
 800422a:	4618      	mov	r0, r3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422c:	657a      	str	r2, [r7, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800422e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8004232:	b002      	add	sp, #8
 8004234:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004238:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800423a:	6b3a      	ldr	r2, [r7, #48]	; 0x30

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800423c:	6ab8      	ldr	r0, [r7, #40]	; 0x28

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800423e:	4322      	orrs	r2, r4
 8004240:	4311      	orrs	r1, r2
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004242:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	f040 0104 	orr.w	r1, r0, #4

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800424a:	f022 0207 	bic.w	r2, r2, #7

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800424e:	4311      	orrs	r1, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004250:	f1bc 0f00 	cmp.w	ip, #0
 8004254:	d111      	bne.n	800427a <HAL_DMA_Init+0x112>
  {
    switch (tmp)
 8004256:	2801      	cmp	r0, #1
 8004258:	d024      	beq.n	80042a4 <HAL_DMA_Init+0x13c>
 800425a:	d301      	bcc.n	8004260 <HAL_DMA_Init+0xf8>
 800425c:	2802      	cmp	r0, #2
 800425e:	d1c4      	bne.n	80041ea <HAL_DMA_Init+0x82>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004260:	01e2      	lsls	r2, r4, #7
 8004262:	d5c2      	bpl.n	80041ea <HAL_DMA_Init+0x82>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004264:	2301      	movs	r3, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004266:	2240      	movs	r2, #64	; 0x40
 8004268:	657a      	str	r2, [r7, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
      
      return HAL_ERROR; 
 800426a:	4618      	mov	r0, r3
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800426c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      
      return HAL_ERROR; 
 8004270:	e7d6      	b.n	8004220 <HAL_DMA_Init+0xb8>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004272:	2001      	movs	r0, #1
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8004274:	b002      	add	sp, #8
 8004276:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800427a:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 800427e:	d004      	beq.n	800428a <HAL_DMA_Init+0x122>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004280:	2802      	cmp	r0, #2
 8004282:	d9ef      	bls.n	8004264 <HAL_DMA_Init+0xfc>
 8004284:	2803      	cmp	r0, #3
 8004286:	d1b0      	bne.n	80041ea <HAL_DMA_Init+0x82>
 8004288:	e7ea      	b.n	8004260 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
  {
    switch (tmp)
 800428a:	2803      	cmp	r0, #3
 800428c:	d8ad      	bhi.n	80041ea <HAL_DMA_Init+0x82>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <HAL_DMA_Init+0x12c>)
 8004290:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8004294:	08004265 	stmdaeq	r0, {r0, r2, r5, r6, r9, lr}
 8004298:	08004261 	stmdaeq	r0, {r0, r5, r6, r9, lr}
 800429c:	08004265 	stmdaeq	r0, {r0, r2, r5, r6, r9, lr}
 80042a0:	080042a5 	stmdaeq	r0, {r0, r2, r5, r7, r9, lr}
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a4:	f1b4 7fc0 	cmp.w	r4, #25165824	; 0x1800000
 80042a8:	d19f      	bne.n	80041ea <HAL_DMA_Init+0x82>
 80042aa:	e7db      	b.n	8004264 <HAL_DMA_Init+0xfc>
 80042ac:	aaaaaaab 	bge	6aaed60 <_Min_Stack_Size+0x6aae960>
 80042b0:	08007e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, sp, lr}
 80042b4:	f010803f 			; <UNDEFINED> instruction: 0xf010803f

080042b8 <HAL_DMA_DeInit>:
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042b8:	4602      	mov	r2, r0
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d031      	beq.n	8004322 <HAL_DMA_DeInit+0x6a>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80042be:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d02a      	beq.n	800431e <HAL_DMA_DeInit+0x66>
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042c8:	6803      	ldr	r3, [r0, #0]
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042ca:	4817      	ldr	r0, [pc, #92]	; (8004328 <HAL_DMA_DeInit+0x70>)
 80042cc:	b2d9      	uxtb	r1, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042ce:	b470      	push	{r4, r5, r6}
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042d0:	3910      	subs	r1, #16
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042d2:	681c      	ldr	r4, [r3, #0]
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042d4:	4d15      	ldr	r5, [pc, #84]	; (800432c <HAL_DMA_DeInit+0x74>)
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042d6:	fba0 0101 	umull	r0, r1, r0, r1
 80042da:	0909      	lsrs	r1, r1, #4

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80042dc:	2000      	movs	r0, #0
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042de:	f024 0401 	bic.w	r4, r4, #1
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80042e2:	2621      	movs	r6, #33	; 0x21
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042e4:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80042e6:	6018      	str	r0, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80042e8:	6058      	str	r0, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80042ea:	6098      	str	r0, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80042ec:	60d8      	str	r0, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80042ee:	6118      	str	r0, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80042f0:	615e      	str	r6, [r3, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042f6:	5c6d      	ldrb	r5, [r5, r1]
 80042f8:	65d5      	str	r5, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042fa:	f023 0303 	bic.w	r3, r3, #3
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
 80042fe:	2903      	cmp	r1, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004300:	bf88      	it	hi
 8004302:	3304      	addhi	r3, #4
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004304:	243f      	movs	r4, #63	; 0x3f

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004306:	2100      	movs	r1, #0
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004308:	40ac      	lsls	r4, r5
 800430a:	6593      	str	r3, [r2, #88]	; 0x58
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 800430c:	4608      	mov	r0, r1
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800430e:	609c      	str	r4, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004310:	6551      	str	r1, [r2, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004312:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004316:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 800431a:	bc70      	pop	{r4, r5, r6}
 800431c:	4770      	bx	lr
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
  {
    /* Return error status */
    return HAL_BUSY;
 800431e:	4618      	mov	r0, r3
 8004320:	4770      	bx	lr
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004322:	2001      	movs	r0, #1
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	aaaaaaab 	bge	6aaeddc <_Min_Stack_Size+0x6aae9dc>
 800432c:	08007e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, sp, lr}

08004330 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004330:	b470      	push	{r4, r5, r6}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004332:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004336:	2c01      	cmp	r4, #1
 8004338:	d00c      	beq.n	8004354 <HAL_DMA_Start+0x24>

  if(HAL_DMA_STATE_READY == hdma->State)
 800433a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800433e:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8004340:	42ac      	cmp	r4, r5
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004342:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004346:	d008      	beq.n	800435a <HAL_DMA_Start+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004348:	2300      	movs	r3, #0
 800434a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
  } 
  return status; 
}
 800434e:	bc70      	pop	{r4, r5, r6}
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Return error status */
    status = HAL_BUSY;
 8004350:	2002      	movs	r0, #2
  } 
  return status; 
}
 8004352:	4770      	bx	lr
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004354:	2002      	movs	r0, #2
    
    /* Return error status */
    status = HAL_BUSY;
  } 
  return status; 
}
 8004356:	bc70      	pop	{r4, r5, r6}
 8004358:	4770      	bx	lr
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800435a:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800435c:	2602      	movs	r6, #2
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004360:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004364:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004366:	6825      	ldr	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004368:	6886      	ldr	r6, [r0, #8]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800436a:	f425 2080 	bic.w	r0, r5, #262144	; 0x40000

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800436e:	2e40      	cmp	r6, #64	; 0x40
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004370:	6020      	str	r0, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004372:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004374:	bf0b      	itete	eq
 8004376:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004378:	60a1      	strne	r1, [r4, #8]
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800437a:	60e1      	streq	r1, [r4, #12]
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800437c:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2000      	movs	r0, #0
    
    /* Return error status */
    status = HAL_BUSY;
  } 
  return status; 
}
 8004388:	bc70      	pop	{r4, r5, r6}
 800438a:	4770      	bx	lr

0800438c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800438c:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800438e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004392:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004394:	2c01      	cmp	r4, #1
 8004396:	d00c      	beq.n	80043b2 <HAL_DMA_Start_IT+0x26>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004398:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800439c:	2601      	movs	r6, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800439e:	42b4      	cmp	r4, r6
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043a0:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043a4:	d008      	beq.n	80043b8 <HAL_DMA_Start_IT+0x2c>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043a6:	2300      	movs	r3, #0
 80043a8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 80043ac:	bcf0      	pop	{r4, r5, r6, r7}
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
    
    /* Return error status */
    status = HAL_BUSY;
 80043ae:	2002      	movs	r0, #2
  }
  
  return status;
}
 80043b0:	4770      	bx	lr
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043b2:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 80043b4:	bcf0      	pop	{r4, r5, r6, r7}
 80043b6:	4770      	bx	lr
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043b8:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043ba:	2702      	movs	r7, #2
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043bc:	2600      	movs	r6, #0
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043be:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c2:	6546      	str	r6, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043c4:	6826      	ldr	r6, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043c6:	6887      	ldr	r7, [r0, #8]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043c8:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043cc:	2f40      	cmp	r7, #64	; 0x40
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043ce:	6026      	str	r6, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043d0:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043d2:	bf0a      	itet	eq
 80043d4:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80043d6:	60a1      	strne	r1, [r4, #8]
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043d8:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043da:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80043dc:	bf18      	it	ne
 80043de:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e0:	233f      	movs	r3, #63	; 0x3f
 80043e2:	408b      	lsls	r3, r1
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
    hdma->Instance->FCR |= DMA_IT_FE;
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e6:	60ab      	str	r3, [r5, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	f043 0316 	orr.w	r3, r3, #22
 80043ee:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80043f0:	6963      	ldr	r3, [r4, #20]
 80043f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f6:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043f8:	b11a      	cbz	r2, 8004402 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f043 0308 	orr.w	r3, r3, #8
 8004400:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	2000      	movs	r0, #0
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 800440c:	bcf0      	pop	{r4, r5, r6, r7}
 800440e:	4770      	bx	lr

08004410 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004414:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004416:	f7fc f845 	bl	80004a4 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800441a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800441e:	2b02      	cmp	r3, #2
 8004420:	d006      	beq.n	8004430 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004422:	2280      	movs	r2, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004424:	2300      	movs	r3, #0
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004426:	6562      	str	r2, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 800442c:	2001      	movs	r0, #1
 800442e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004430:	6823      	ldr	r3, [r4, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004432:	6c21      	ldr	r1, [r4, #64]	; 0x40
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f022 0216 	bic.w	r2, r2, #22
 800443a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004442:	4605      	mov	r5, r0
 8004444:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004446:	b331      	cbz	r1, 8004496 <HAL_DMA_Abort+0x86>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f022 0208 	bic.w	r2, r2, #8
 800444e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004458:	e005      	b.n	8004466 <HAL_DMA_Abort+0x56>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800445a:	f7fc f823 	bl	80004a4 <HAL_GetTick>
 800445e:	1b40      	subs	r0, r0, r5
 8004460:	2805      	cmp	r0, #5
 8004462:	d80f      	bhi.n	8004484 <HAL_DMA_Abort+0x74>
 8004464:	6823      	ldr	r3, [r4, #0]
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f013 0301 	ands.w	r3, r3, #1
 800446c:	d1f5      	bne.n	800445a <HAL_DMA_Abort+0x4a>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800446e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004470:	223f      	movs	r2, #63	; 0x3f
 8004472:	408a      	lsls	r2, r1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004474:	2101      	movs	r1, #1
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004476:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
  }
  return HAL_OK;
 8004478:	4618      	mov	r0, r3
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800447e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8004482:	bd70      	pop	{r4, r5, r6, pc}
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004484:	2220      	movs	r2, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004486:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004488:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800448a:	6562      	str	r2, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800448c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004490:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004494:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
    hdma->Instance->FCR &= ~(DMA_IT_FE);
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004496:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004498:	2a00      	cmp	r2, #0
 800449a:	d1d5      	bne.n	8004448 <HAL_DMA_Abort+0x38>
 800449c:	e7d8      	b.n	8004450 <HAL_DMA_Abort+0x40>
 800449e:	bf00      	nop

080044a0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044a0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d003      	beq.n	80044b0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80044ac:	2001      	movs	r0, #1
 80044ae:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b0:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044b2:	2305      	movs	r3, #5
 80044b4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044c0:	2000      	movs	r0, #0
}
 80044c2:	4770      	bx	lr

080044c4 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	4604      	mov	r4, r0
 80044ca:	b083      	sub	sp, #12
 80044cc:	4615      	mov	r5, r2
 80044ce:	9101      	str	r1, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK; 
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80044d0:	f7fb ffe8 	bl	80004a4 <HAL_GetTick>
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044d4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d008      	beq.n	80044ee <HAL_DMA_PollForTransfer+0x2a>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80044de:	2300      	movs	r3, #0
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e0:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80044e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80044e6:	2001      	movs	r0, #1
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
  }
  
  return status;
}
 80044e8:	b003      	add	sp, #12
 80044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_UNLOCK(hdma);
    return HAL_ERROR;
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	05de      	lsls	r6, r3, #23
 80044f4:	d45c      	bmi.n	80045b0 <HAL_DMA_PollForTransfer+0xec>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80044f6:	9b01      	ldr	r3, [sp, #4]
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80044fa:	4606      	mov	r6, r0
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d052      	beq.n	80045a6 <HAL_DMA_PollForTransfer+0xe2>
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004500:	f04f 0b10 	mov.w	fp, #16
 8004504:	fa0b fb02 	lsl.w	fp, fp, r2
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004508:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800450c:	1c69      	adds	r1, r5, #1
  tmpisr = regs->ISR;
 800450e:	f8da 3000 	ldr.w	r3, [sl]
 8004512:	d064      	beq.n	80045de <HAL_DMA_PollForTransfer+0x11a>
 8004514:	2d00      	cmp	r5, #0
 8004516:	d052      	beq.n	80045be <HAL_DMA_PollForTransfer+0xfa>
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004518:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80046d8 <HAL_DMA_PollForTransfer+0x214>
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800451c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046dc <HAL_DMA_PollForTransfer+0x218>
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004520:	2708      	movs	r7, #8
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8004522:	ea13 0f0b 	tst.w	r3, fp
 8004526:	d130      	bne.n	800458a <HAL_DMA_PollForTransfer+0xc6>
 8004528:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800452a:	07db      	lsls	r3, r3, #31
 800452c:	d42d      	bmi.n	800458a <HAL_DMA_PollForTransfer+0xc6>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800452e:	f7fb ffb9 	bl	80004a4 <HAL_GetTick>
 8004532:	1b80      	subs	r0, r0, r6
 8004534:	4285      	cmp	r5, r0
 8004536:	d348      	bcc.n	80045ca <HAL_DMA_PollForTransfer+0x106>
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004538:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 800453a:	f8da 3000 	ldr.w	r3, [sl]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800453e:	fa07 fe02 	lsl.w	lr, r7, r2
 8004542:	ea1e 0f03 	tst.w	lr, r3
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004546:	fa09 f002 	lsl.w	r0, r9, r2
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800454a:	fa08 f102 	lsl.w	r1, r8, r2
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800454e:	d007      	beq.n	8004560 <HAL_DMA_PollForTransfer+0x9c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004550:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 8004554:	f04c 0c01 	orr.w	ip, ip, #1
 8004558:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800455c:	f8ca e008 	str.w	lr, [sl, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004560:	4218      	tst	r0, r3
 8004562:	d007      	beq.n	8004574 <HAL_DMA_PollForTransfer+0xb0>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004564:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
 8004568:	f04e 0e02 	orr.w	lr, lr, #2
 800456c:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004570:	f8ca 0008 	str.w	r0, [sl, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004574:	4219      	tst	r1, r3
 8004576:	d0d4      	beq.n	8004522 <HAL_DMA_PollForTransfer+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004578:	6d60      	ldr	r0, [r4, #84]	; 0x54
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800457a:	ea13 0f0b 	tst.w	r3, fp
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800457e:	f040 0004 	orr.w	r0, r0, #4
 8004582:	6560      	str	r0, [r4, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004584:	f8ca 1008 	str.w	r1, [sl, #8]
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8004588:	d0ce      	beq.n	8004528 <HAL_DMA_PollForTransfer+0x64>
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800458a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800458c:	b113      	cbz	r3, 8004594 <HAL_DMA_PollForTransfer+0xd0>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800458e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004590:	07d9      	lsls	r1, r3, #31
 8004592:	d45a      	bmi.n	800464a <HAL_DMA_PollForTransfer+0x186>
   }

  }

  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8004594:	9b01      	ldr	r3, [sp, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04b      	beq.n	8004632 <HAL_DMA_PollForTransfer+0x16e>
    hdma->State = HAL_DMA_STATE_READY;
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 800459a:	2310      	movs	r3, #16
 800459c:	4093      	lsls	r3, r2
 800459e:	f8ca 3008 	str.w	r3, [sl, #8]
  }
  
  return status;
 80045a2:	2000      	movs	r0, #0
 80045a4:	e7a0      	b.n	80044e8 <HAL_DMA_PollForTransfer+0x24>
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045a6:	f04f 0b20 	mov.w	fp, #32
 80045aa:	fa0b fb02 	lsl.w	fp, fp, r2
 80045ae:	e7ab      	b.n	8004508 <HAL_DMA_PollForTransfer+0x44>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80045b0:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 80045b4:	2001      	movs	r0, #1
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80045b6:	6563      	str	r3, [r4, #84]	; 0x54
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
  }
  
  return status;
}
 80045b8:	b003      	add	sp, #12
 80045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80045be:	ea1b 0f03 	tst.w	fp, r3
 80045c2:	d1e2      	bne.n	800458a <HAL_DMA_PollForTransfer+0xc6>
 80045c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045c6:	07d8      	lsls	r0, r3, #31
 80045c8:	d4df      	bmi.n	800458a <HAL_DMA_PollForTransfer+0xc6>
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ca:	2120      	movs	r1, #32

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045cc:	2200      	movs	r2, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ce:	2301      	movs	r3, #1
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045d0:	6561      	str	r1, [r4, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80045da:	2003      	movs	r0, #3
 80045dc:	e784      	b.n	80044e8 <HAL_DMA_PollForTransfer+0x24>
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045de:	4e3e      	ldr	r6, [pc, #248]	; (80046d8 <HAL_DMA_PollForTransfer+0x214>)
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045e0:	4d3e      	ldr	r5, [pc, #248]	; (80046dc <HAL_DMA_PollForTransfer+0x218>)
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045e2:	2008      	movs	r0, #8
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045e4:	4096      	lsls	r6, r2
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045e6:	4095      	lsls	r5, r2
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045e8:	4090      	lsls	r0, r2
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80045ea:	ea13 0f0b 	tst.w	r3, fp
 80045ee:	d1cc      	bne.n	800458a <HAL_DMA_PollForTransfer+0xc6>
 80045f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045f2:	07df      	lsls	r7, r3, #31
 80045f4:	d4c9      	bmi.n	800458a <HAL_DMA_PollForTransfer+0xc6>
        return HAL_TIMEOUT;
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 80045f6:	f8da 3000 	ldr.w	r3, [sl]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045fa:	4218      	tst	r0, r3
 80045fc:	d005      	beq.n	800460a <HAL_DMA_PollForTransfer+0x146>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004600:	f041 0101 	orr.w	r1, r1, #1
 8004604:	6561      	str	r1, [r4, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004606:	f8ca 0008 	str.w	r0, [sl, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800460a:	421e      	tst	r6, r3
 800460c:	d005      	beq.n	800461a <HAL_DMA_PollForTransfer+0x156>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800460e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004610:	f041 0102 	orr.w	r1, r1, #2
 8004614:	6561      	str	r1, [r4, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004616:	f8ca 6008 	str.w	r6, [sl, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800461a:	421d      	tst	r5, r3
 800461c:	d0e5      	beq.n	80045ea <HAL_DMA_PollForTransfer+0x126>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800461e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8004620:	ea13 0f0b 	tst.w	r3, fp
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004624:	f041 0104 	orr.w	r1, r1, #4
 8004628:	6561      	str	r1, [r4, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800462a:	f8ca 5008 	str.w	r5, [sl, #8]
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800462e:	d0df      	beq.n	80045f0 <HAL_DMA_PollForTransfer+0x12c>
 8004630:	e7ab      	b.n	800458a <HAL_DMA_PollForTransfer+0xc6>

  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8004632:	2330      	movs	r3, #48	; 0x30
 8004634:	4093      	lsls	r3, r2
 8004636:	f8ca 3008 	str.w	r3, [sl, #8]
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
  }
  
  return status;
 800463a:	9b01      	ldr	r3, [sp, #4]
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 8004640:	2201      	movs	r2, #1
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
  }
  
  return status;
 8004642:	4618      	mov	r0, r3
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    hdma->State = HAL_DMA_STATE_READY;
 8004644:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8004648:	e74e      	b.n	80044e8 <HAL_DMA_PollForTransfer+0x24>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800464a:	6da6      	ldr	r6, [r4, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800464c:	f7fb ff2a 	bl	80004a4 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004650:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004654:	2b02      	cmp	r3, #2
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  
  uint32_t tickstart = HAL_GetTick();
 8004656:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004658:	d00e      	beq.n	8004678 <HAL_DMA_PollForTransfer+0x1b4>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800465e:	6563      	str	r3, [r4, #84]	; 0x54
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      HAL_DMA_Abort(hdma);
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8004660:	2330      	movs	r3, #48	; 0x30
 8004662:	4093      	lsls	r3, r2
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004664:	2100      	movs	r1, #0

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8004666:	2201      	movs	r2, #1
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      HAL_DMA_Abort(hdma);
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8004668:	f8ca 3008 	str.w	r3, [sl, #8]
      __HAL_UNLOCK(hdma);

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;

      return HAL_ERROR;
 800466c:	4610      	mov	r0, r2
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800466e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8004672:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35

      return HAL_ERROR;
 8004676:	e737      	b.n	80044e8 <HAL_DMA_PollForTransfer+0x24>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004678:	6823      	ldr	r3, [r4, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800467a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	f022 0216 	bic.w	r2, r2, #22
 8004682:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800468a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800468c:	b301      	cbz	r1, 80046d0 <HAL_DMA_PollForTransfer+0x20c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	f022 0208 	bic.w	r2, r2, #8
 8004694:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e005      	b.n	80046ac <HAL_DMA_PollForTransfer+0x1e8>
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a0:	f7fb ff00 	bl	80004a4 <HAL_GetTick>
 80046a4:	1b40      	subs	r0, r0, r5
 80046a6:	2805      	cmp	r0, #5
 80046a8:	d80b      	bhi.n	80046c2 <HAL_DMA_PollForTransfer+0x1fe>
 80046aa:	6823      	ldr	r3, [r4, #0]
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	07db      	lsls	r3, r3, #31
 80046b0:	d4f6      	bmi.n	80046a0 <HAL_DMA_PollForTransfer+0x1dc>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80046b4:	233f      	movs	r3, #63	; 0x3f
 80046b6:	4093      	lsls	r3, r2
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046b8:	2101      	movs	r1, #1
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ba:	60b3      	str	r3, [r6, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046bc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 80046c0:	e7ce      	b.n	8004660 <HAL_DMA_PollForTransfer+0x19c>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c2:	2220      	movs	r2, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c6:	6562      	str	r2, [r4, #84]	; 0x54
 80046c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80046ce:	e7c7      	b.n	8004660 <HAL_DMA_PollForTransfer+0x19c>
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
    hdma->Instance->FCR &= ~(DMA_IT_FE);
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80046d2:	2a00      	cmp	r2, #0
 80046d4:	d1db      	bne.n	800468e <HAL_DMA_PollForTransfer+0x1ca>
 80046d6:	e7de      	b.n	8004696 <HAL_DMA_PollForTransfer+0x1d2>
 80046d8:	00800001 	addeq	r0, r0, r1
 80046dc:	00800004 	addeq	r0, r0, r4

080046e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e2:	b083      	sub	sp, #12
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80046e4:	2300      	movs	r3, #0
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80046e8:	9301      	str	r3, [sp, #4]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 80046ec:	683d      	ldr	r5, [r7, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80046ee:	4962      	ldr	r1, [pc, #392]	; (8004878 <HAL_DMA_IRQHandler+0x198>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f0:	2208      	movs	r2, #8
 80046f2:	409a      	lsls	r2, r3
 80046f4:	422a      	tst	r2, r5
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046f6:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80046f8:	680e      	ldr	r6, [r1, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046fa:	d003      	beq.n	8004704 <HAL_DMA_IRQHandler+0x24>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046fc:	6801      	ldr	r1, [r0, #0]
 80046fe:	6808      	ldr	r0, [r1, #0]
 8004700:	0740      	lsls	r0, r0, #29
 8004702:	d476      	bmi.n	80047f2 <HAL_DMA_IRQHandler+0x112>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004704:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_DMA_IRQHandler+0x19c>)
 8004706:	409a      	lsls	r2, r3
 8004708:	422a      	tst	r2, r5
 800470a:	d003      	beq.n	8004714 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800470c:	6821      	ldr	r1, [r4, #0]
 800470e:	6949      	ldr	r1, [r1, #20]
 8004710:	0608      	lsls	r0, r1, #24
 8004712:	d468      	bmi.n	80047e6 <HAL_DMA_IRQHandler+0x106>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004714:	4a5a      	ldr	r2, [pc, #360]	; (8004880 <HAL_DMA_IRQHandler+0x1a0>)
 8004716:	409a      	lsls	r2, r3
 8004718:	422a      	tst	r2, r5
 800471a:	d003      	beq.n	8004724 <HAL_DMA_IRQHandler+0x44>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800471c:	6821      	ldr	r1, [r4, #0]
 800471e:	6809      	ldr	r1, [r1, #0]
 8004720:	0789      	lsls	r1, r1, #30
 8004722:	d45a      	bmi.n	80047da <HAL_DMA_IRQHandler+0xfa>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004724:	2210      	movs	r2, #16
 8004726:	409a      	lsls	r2, r3
 8004728:	422a      	tst	r2, r5
 800472a:	d003      	beq.n	8004734 <HAL_DMA_IRQHandler+0x54>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800472c:	6821      	ldr	r1, [r4, #0]
 800472e:	6808      	ldr	r0, [r1, #0]
 8004730:	0700      	lsls	r0, r0, #28
 8004732:	d43f      	bmi.n	80047b4 <HAL_DMA_IRQHandler+0xd4>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004734:	2220      	movs	r2, #32
 8004736:	409a      	lsls	r2, r3
 8004738:	422a      	tst	r2, r5
 800473a:	d003      	beq.n	8004744 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800473c:	6821      	ldr	r1, [r4, #0]
 800473e:	6808      	ldr	r0, [r1, #0]
 8004740:	06c0      	lsls	r0, r0, #27
 8004742:	d425      	bmi.n	8004790 <HAL_DMA_IRQHandler+0xb0>
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004744:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004746:	b30b      	cbz	r3, 800478c <HAL_DMA_IRQHandler+0xac>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004748:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800474a:	07da      	lsls	r2, r3, #31
 800474c:	d51a      	bpl.n	8004784 <HAL_DMA_IRQHandler+0xa4>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800474e:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004750:	6821      	ldr	r1, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004752:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004756:	680b      	ldr	r3, [r1, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8004758:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <HAL_DMA_IRQHandler+0x1a4>)
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800475a:	f023 0301 	bic.w	r3, r3, #1
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 800475e:	fba2 0206 	umull	r0, r2, r2, r6
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004762:	600b      	str	r3, [r1, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8004764:	0a92      	lsrs	r2, r2, #10
 8004766:	e002      	b.n	800476e <HAL_DMA_IRQHandler+0x8e>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004768:	680b      	ldr	r3, [r1, #0]
 800476a:	07db      	lsls	r3, r3, #31
 800476c:	d504      	bpl.n	8004778 <HAL_DMA_IRQHandler+0x98>
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	3301      	adds	r3, #1
 8004772:	429a      	cmp	r2, r3
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	d2f7      	bcs.n	8004768 <HAL_DMA_IRQHandler+0x88>
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004778:	2200      	movs	r2, #0

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800477a:	2301      	movs	r3, #1
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800477c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004780:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004784:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004786:	b10b      	cbz	r3, 800478c <HAL_DMA_IRQHandler+0xac>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004788:	4620      	mov	r0, r4
 800478a:	4798      	blx	r3
    }
  }
}
 800478c:	b003      	add	sp, #12
 800478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004790:	60ba      	str	r2, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004792:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004796:	2a05      	cmp	r2, #5
 8004798:	d03b      	beq.n	8004812 <HAL_DMA_IRQHandler+0x132>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800479a:	680b      	ldr	r3, [r1, #0]
 800479c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047a0:	680b      	ldr	r3, [r1, #0]
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047a2:	d054      	beq.n	800484e <HAL_DMA_IRQHandler+0x16e>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047a4:	0319      	lsls	r1, r3, #12
 80047a6:	d55f      	bpl.n	8004868 <HAL_DMA_IRQHandler+0x188>

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
        }

        if(hdma->XferCpltCallback != NULL)
 80047a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ca      	beq.n	8004744 <HAL_DMA_IRQHandler+0x64>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047ae:	4620      	mov	r0, r4
 80047b0:	4798      	blx	r3
 80047b2:	e7c7      	b.n	8004744 <HAL_DMA_IRQHandler+0x64>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047b4:	60ba      	str	r2, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047b6:	680a      	ldr	r2, [r1, #0]
 80047b8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047bc:	680a      	ldr	r2, [r1, #0]
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047be:	d122      	bne.n	8004806 <HAL_DMA_IRQHandler+0x126>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047c0:	05d2      	lsls	r2, r2, #23
 80047c2:	d403      	bmi.n	80047cc <HAL_DMA_IRQHandler+0xec>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047c4:	680a      	ldr	r2, [r1, #0]
 80047c6:	f022 0208 	bic.w	r2, r2, #8
 80047ca:	600a      	str	r2, [r1, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d0b0      	beq.n	8004734 <HAL_DMA_IRQHandler+0x54>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047d2:	4620      	mov	r0, r4
 80047d4:	4790      	blx	r2
 80047d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047d8:	e7ac      	b.n	8004734 <HAL_DMA_IRQHandler+0x54>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047da:	60ba      	str	r2, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80047de:	f042 0204 	orr.w	r2, r2, #4
 80047e2:	6562      	str	r2, [r4, #84]	; 0x54
 80047e4:	e79e      	b.n	8004724 <HAL_DMA_IRQHandler+0x44>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047e6:	60ba      	str	r2, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80047ea:	f042 0202 	orr.w	r2, r2, #2
 80047ee:	6562      	str	r2, [r4, #84]	; 0x54
 80047f0:	e790      	b.n	8004714 <HAL_DMA_IRQHandler+0x34>
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047f2:	6808      	ldr	r0, [r1, #0]
 80047f4:	f020 0004 	bic.w	r0, r0, #4
 80047f8:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047fa:	60ba      	str	r2, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	6562      	str	r2, [r4, #84]	; 0x54
 8004804:	e77e      	b.n	8004704 <HAL_DMA_IRQHandler+0x24>
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004806:	0311      	lsls	r1, r2, #12
 8004808:	d5e0      	bpl.n	80047cc <HAL_DMA_IRQHandler+0xec>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800480a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800480c:	2a00      	cmp	r2, #0
 800480e:	d1e0      	bne.n	80047d2 <HAL_DMA_IRQHandler+0xf2>
 8004810:	e790      	b.n	8004734 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004812:	680a      	ldr	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004814:	6c20      	ldr	r0, [r4, #64]	; 0x40
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004816:	f022 0216 	bic.w	r2, r2, #22
 800481a:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800481c:	694a      	ldr	r2, [r1, #20]
 800481e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004822:	614a      	str	r2, [r1, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004824:	b320      	cbz	r0, 8004870 <HAL_DMA_IRQHandler+0x190>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004826:	680a      	ldr	r2, [r1, #0]
 8004828:	f022 0208 	bic.w	r2, r2, #8
 800482c:	600a      	str	r2, [r1, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482e:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;

        if(hdma->XferAbortCallback != NULL)
 8004830:	6d21      	ldr	r1, [r4, #80]	; 0x50
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004832:	fa02 f303 	lsl.w	r3, r2, r3

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004836:	2000      	movs	r0, #0

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004838:	2201      	movs	r2, #1
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800483a:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800483c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004840:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004844:	2900      	cmp	r1, #0
 8004846:	d0a1      	beq.n	800478c <HAL_DMA_IRQHandler+0xac>
        {
          hdma->XferAbortCallback(hdma);
 8004848:	4620      	mov	r0, r4
 800484a:	4788      	blx	r1
 800484c:	e79e      	b.n	800478c <HAL_DMA_IRQHandler+0xac>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800484e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004852:	d1a9      	bne.n	80047a8 <HAL_DMA_IRQHandler+0xc8>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004854:	680a      	ldr	r2, [r1, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004856:	2001      	movs	r0, #1
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004858:	f022 0210 	bic.w	r2, r2, #16
 800485c:	600a      	str	r2, [r1, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800485e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004862:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8004866:	e79f      	b.n	80047a8 <HAL_DMA_IRQHandler+0xc8>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004868:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800486a:	2b00      	cmp	r3, #0
 800486c:	d19f      	bne.n	80047ae <HAL_DMA_IRQHandler+0xce>
 800486e:	e769      	b.n	8004744 <HAL_DMA_IRQHandler+0x64>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
        hdma->Instance->FCR &= ~(DMA_IT_FE);
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004870:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004872:	2a00      	cmp	r2, #0
 8004874:	d1d7      	bne.n	8004826 <HAL_DMA_IRQHandler+0x146>
 8004876:	e7da      	b.n	800482e <HAL_DMA_IRQHandler+0x14e>
 8004878:	20000010 	andcs	r0, r0, r0, lsl r0
 800487c:	00800001 	addeq	r0, r0, r1
 8004880:	00800004 	addeq	r0, r0, r4
 8004884:	1b4e81b5 	blne	93a4f60 <_siccmram+0x139d0b4>

08004888 <HAL_DMA_RegisterCallback>:
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8004888:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800488c:	2b01      	cmp	r3, #1
  * @param  pCallback:            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800488e:	b410      	push	{r4}
 8004890:	4604      	mov	r4, r0

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8004892:	d00d      	beq.n	80048b0 <HAL_DMA_RegisterCallback+0x28>

  if(HAL_DMA_STATE_READY == hdma->State)
 8004894:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8004898:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800489a:	4298      	cmp	r0, r3
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 800489c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80048a0:	d00a      	beq.n	80048b8 <HAL_DMA_RegisterCallback+0x30>
    /* Return error status */
    status =  HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048a2:	2200      	movs	r2, #0
  
  return status;
 80048a4:	4618      	mov	r0, r3
    /* Return error status */
    status =  HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048a6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  
  return status;
}
 80048aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ae:	4770      	bx	lr
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 80048b0:	2002      	movs	r0, #2

  /* Release Lock */
  __HAL_UNLOCK(hdma);
  
  return status;
}
 80048b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b6:	4770      	bx	lr
  /* Process locked */
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
 80048b8:	2905      	cmp	r1, #5
 80048ba:	d816      	bhi.n	80048ea <HAL_DMA_RegisterCallback+0x62>
 80048bc:	e8df f001 	tbb	[pc, r1]
 80048c0:	090c0f12 	stmdbeq	ip, {r1, r4, r8, r9, sl, fp}
 80048c4:	65220306 	strvs	r0, [r2, #-774]!	; 0xfffffcfa
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
      hdma->XferErrorCallback = pCallback;
      break;

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
      break;
 80048ca:	e7ea      	b.n	80048a2 <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80048cc:	64e2      	str	r2, [r4, #76]	; 0x4c
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
      hdma->XferM1HalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
      break;
 80048d0:	e7e7      	b.n	80048a2 <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80048d2:	64a2      	str	r2, [r4, #72]	; 0x48
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
      hdma->XferM1CpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
      break;
 80048d6:	e7e4      	b.n	80048a2 <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80048d8:	6462      	str	r2, [r4, #68]	; 0x44
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
      hdma->XferHalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
      break;
 80048dc:	e7e1      	b.n	80048a2 <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80048de:	6422      	str	r2, [r4, #64]	; 0x40
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
      hdma->XferCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
      break;
 80048e2:	e7de      	b.n	80048a2 <HAL_DMA_RegisterCallback+0x1a>
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80048e4:	63e2      	str	r2, [r4, #60]	; 0x3c
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
  {
    switch (CallbackID)
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
      break;
 80048e8:	e7db      	b.n	80048a2 <HAL_DMA_RegisterCallback+0x1a>
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e7d9      	b.n	80048a2 <HAL_DMA_RegisterCallback+0x1a>
 80048ee:	bf00      	nop

080048f0 <HAL_DMA_UnRegisterCallback>:
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80048f0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80048f4:	2b01      	cmp	r3, #1
  * @param  CallbackID:           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80048f6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80048f8:	d00b      	beq.n	8004912 <HAL_DMA_UnRegisterCallback+0x22>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048fa:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80048fe:	2301      	movs	r3, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004900:	4298      	cmp	r0, r3
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004902:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004906:	d006      	beq.n	8004916 <HAL_DMA_UnRegisterCallback+0x26>
  {
    status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004908:	2100      	movs	r1, #0
  
  return status;
 800490a:	4618      	mov	r0, r3
  {
    status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800490c:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
  
  return status;
 8004910:	4770      	bx	lr
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004912:	2002      	movs	r0, #2
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
  
  return status;
}
 8004914:	4770      	bx	lr
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
 8004916:	2906      	cmp	r1, #6
 8004918:	d81f      	bhi.n	800495a <HAL_DMA_UnRegisterCallback+0x6a>
 800491a:	e8df f001 	tbb	[pc, r1]
 800491e:	1215181b 	andsne	r1, r5, #1769472	; 0x1b0000
 8004922:	00040c0f 	andeq	r0, r4, pc, lsl #24
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
      break; 
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	63d3      	str	r3, [r2, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 800492a:	6413      	str	r3, [r2, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 800492c:	6453      	str	r3, [r2, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 800492e:	6493      	str	r3, [r2, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8004930:	64d3      	str	r3, [r2, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8004932:	6513      	str	r3, [r2, #80]	; 0x50
      break; 
 8004934:	e7e8      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	6513      	str	r3, [r2, #80]	; 0x50
      break; 
 800493a:	e7e5      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 800493c:	2300      	movs	r3, #0
 800493e:	64d3      	str	r3, [r2, #76]	; 0x4c
      break;
 8004940:	e7e2      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	6493      	str	r3, [r2, #72]	; 0x48
      break;
 8004946:	e7df      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800494c:	e7dc      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004952:	e7d9      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8004958:	e7d6      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
      hdma->XferErrorCallback = NULL;
      hdma->XferAbortCallback = NULL;
      break; 
      
    default:
      status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e7d4      	b.n	8004908 <HAL_DMA_UnRegisterCallback+0x18>
 800495e:	bf00      	nop

08004960 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8004960:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop

08004968 <HAL_DMA_GetError>:
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
  return hdma->ErrorCode;
 8004968:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800496a:	4770      	bx	lr

0800496c <HAL_RCC_DeInit>:
  *            - Peripheral clocks  
  *            - LSI, LSE and RTC clocks 
  * @retval None
  */
__weak void HAL_RCC_DeInit(void)
{}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop

08004970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004972:	6803      	ldr	r3, [r0, #0]
 8004974:	07dd      	lsls	r5, r3, #31
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004976:	b083      	sub	sp, #12
 8004978:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497a:	d522      	bpl.n	80049c2 <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800497c:	49ab      	ldr	r1, [pc, #684]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 800497e:	688a      	ldr	r2, [r1, #8]
 8004980:	f002 020c 	and.w	r2, r2, #12
 8004984:	2a04      	cmp	r2, #4
 8004986:	f000 80ea 	beq.w	8004b5e <HAL_RCC_OscConfig+0x1ee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800498a:	688a      	ldr	r2, [r1, #8]
 800498c:	f002 020c 	and.w	r2, r2, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004990:	2a08      	cmp	r2, #8
 8004992:	f000 80e0 	beq.w	8004b56 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004996:	4ba6      	ldr	r3, [pc, #664]	; (8004c30 <HAL_RCC_OscConfig+0x2c0>)
 8004998:	7922      	ldrb	r2, [r4, #4]
 800499a:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800499c:	6863      	ldr	r3, [r4, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80cb 	beq.w	8004b3a <HAL_RCC_OscConfig+0x1ca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fb fd7e 	bl	80004a4 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a8:	4da0      	ldr	r5, [pc, #640]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ac:	e005      	b.n	80049ba <HAL_RCC_OscConfig+0x4a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ae:	f7fb fd79 	bl	80004a4 <HAL_GetTick>
 80049b2:	1b80      	subs	r0, r0, r6
 80049b4:	2864      	cmp	r0, #100	; 0x64
 80049b6:	f200 809f 	bhi.w	8004af8 <HAL_RCC_OscConfig+0x188>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	039a      	lsls	r2, r3, #14
 80049be:	d5f6      	bpl.n	80049ae <HAL_RCC_OscConfig+0x3e>
 80049c0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c2:	079f      	lsls	r7, r3, #30
 80049c4:	d52d      	bpl.n	8004a22 <HAL_RCC_OscConfig+0xb2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	4a99      	ldr	r2, [pc, #612]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 80049c8:	6891      	ldr	r1, [r2, #8]
 80049ca:	f011 0f0c 	tst.w	r1, #12
 80049ce:	f000 809a 	beq.w	8004b06 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d2:	6891      	ldr	r1, [r2, #8]
 80049d4:	f001 010c 	and.w	r1, r1, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d8:	2908      	cmp	r1, #8
 80049da:	f000 8090 	beq.w	8004afe <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80d7 	beq.w	8004b94 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e6:	4b93      	ldr	r3, [pc, #588]	; (8004c34 <HAL_RCC_OscConfig+0x2c4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e8:	4d90      	ldr	r5, [pc, #576]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fb fd59 	bl	80004a4 <HAL_GetTick>
 80049f2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	e004      	b.n	8004a00 <HAL_RCC_OscConfig+0x90>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f6:	f7fb fd55 	bl	80004a4 <HAL_GetTick>
 80049fa:	1b80      	subs	r0, r0, r6
 80049fc:	2802      	cmp	r0, #2
 80049fe:	d87b      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	4a8a      	ldr	r2, [pc, #552]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 8004a04:	0798      	lsls	r0, r3, #30
 8004a06:	d5f6      	bpl.n	80049f6 <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a08:	6811      	ldr	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	20f8      	movs	r0, #248	; 0xf8
 8004a0c:	fa90 f0a0 	rbit	r0, r0
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	fab0 f080 	clz	r0, r0
 8004a16:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8004a1a:	4083      	lsls	r3, r0
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	6823      	ldr	r3, [r4, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a22:	071a      	lsls	r2, r3, #28
 8004a24:	d420      	bmi.n	8004a68 <HAL_RCC_OscConfig+0xf8>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a26:	0759      	lsls	r1, r3, #29
 8004a28:	d434      	bmi.n	8004a94 <HAL_RCC_OscConfig+0x124>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a2a:	69a2      	ldr	r2, [r4, #24]
 8004a2c:	b1ca      	cbz	r2, 8004a62 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2e:	4b7f      	ldr	r3, [pc, #508]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 8004a30:	6899      	ldr	r1, [r3, #8]
 8004a32:	f001 010c 	and.w	r1, r1, #12
 8004a36:	2908      	cmp	r1, #8
 8004a38:	d06c      	beq.n	8004b14 <HAL_RCC_OscConfig+0x1a4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3a:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3c:	4a7e      	ldr	r2, [pc, #504]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	6011      	str	r1, [r2, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a44:	f000 80b7 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x246>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a48:	461c      	mov	r4, r3
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fb fd2b 	bl	80004a4 <HAL_GetTick>
 8004a4e:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a50:	e004      	b.n	8004a5c <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a52:	f7fb fd27 	bl	80004a4 <HAL_GetTick>
 8004a56:	1b40      	subs	r0, r0, r5
 8004a58:	2802      	cmp	r0, #2
 8004a5a:	d84d      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	019b      	lsls	r3, r3, #6
 8004a60:	d4f7      	bmi.n	8004a52 <HAL_RCC_OscConfig+0xe2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004a62:	2000      	movs	r0, #0
}
 8004a64:	b003      	add	sp, #12
 8004a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a68:	6963      	ldr	r3, [r4, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d055      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6e:	4b73      	ldr	r3, [pc, #460]	; (8004c3c <HAL_RCC_OscConfig+0x2cc>)
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a70:	4d6e      	ldr	r5, [pc, #440]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fb fd15 	bl	80004a4 <HAL_GetTick>
 8004a7a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7c:	e004      	b.n	8004a88 <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fb fd11 	bl	80004a4 <HAL_GetTick>
 8004a82:	1b80      	subs	r0, r0, r6
 8004a84:	2802      	cmp	r0, #2
 8004a86:	d837      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004a8a:	079f      	lsls	r7, r3, #30
 8004a8c:	d5f7      	bpl.n	8004a7e <HAL_RCC_OscConfig+0x10e>
 8004a8e:	6823      	ldr	r3, [r4, #0]
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a90:	0759      	lsls	r1, r3, #29
 8004a92:	d5ca      	bpl.n	8004a2a <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a94:	4b65      	ldr	r3, [pc, #404]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a96:	4d6a      	ldr	r5, [pc, #424]	; (8004c40 <HAL_RCC_OscConfig+0x2d0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a98:	2200      	movs	r2, #0
 8004a9a:	9201      	str	r2, [sp, #4]
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004ab6:	f7fb fcf5 	bl	80004a4 <HAL_GetTick>
 8004aba:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004abc:	e004      	b.n	8004ac8 <HAL_RCC_OscConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fb fcf1 	bl	80004a4 <HAL_GetTick>
 8004ac2:	1b80      	subs	r0, r0, r6
 8004ac4:	2802      	cmp	r0, #2
 8004ac6:	d817      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	05da      	lsls	r2, r3, #23
 8004acc:	d5f7      	bpl.n	8004abe <HAL_RCC_OscConfig+0x14e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ace:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <HAL_RCC_OscConfig+0x2d4>)
 8004ad0:	7a22      	ldrb	r2, [r4, #8]
 8004ad2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad4:	68a3      	ldr	r3, [r4, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80c0 	beq.w	8004c5c <HAL_RCC_OscConfig+0x2ec>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fb fce2 	bl	80004a4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	4d52      	ldr	r5, [pc, #328]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f241 3688 	movw	r6, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004aea:	079b      	lsls	r3, r3, #30
 8004aec:	d49d      	bmi.n	8004a2a <HAL_RCC_OscConfig+0xba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f7fb fcd9 	bl	80004a4 <HAL_GetTick>
 8004af2:	1bc0      	subs	r0, r0, r7
 8004af4:	42b0      	cmp	r0, r6
 8004af6:	d9f7      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x178>
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004af8:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8004afa:	b003      	add	sp, #12
 8004afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004afe:	6852      	ldr	r2, [r2, #4]
 8004b00:	0256      	lsls	r6, r2, #9
 8004b02:	f53f af6c 	bmi.w	80049de <HAL_RCC_OscConfig+0x6e>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b06:	4a49      	ldr	r2, [pc, #292]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	0795      	lsls	r5, r2, #30
 8004b0c:	d531      	bpl.n	8004b72 <HAL_RCC_OscConfig+0x202>
 8004b0e:	68e2      	ldr	r2, [r4, #12]
 8004b10:	2a01      	cmp	r2, #1
 8004b12:	d02e      	beq.n	8004b72 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8004b14:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8004b16:	b003      	add	sp, #12
 8004b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1a:	4a48      	ldr	r2, [pc, #288]	; (8004c3c <HAL_RCC_OscConfig+0x2cc>)
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	4d43      	ldr	r5, [pc, #268]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fb fcc0 	bl	80004a4 <HAL_GetTick>
 8004b24:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b26:	e004      	b.n	8004b32 <HAL_RCC_OscConfig+0x1c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fb fcbc 	bl	80004a4 <HAL_GetTick>
 8004b2c:	1b80      	subs	r0, r0, r6
 8004b2e:	2802      	cmp	r0, #2
 8004b30:	d8e2      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b32:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b34:	0798      	lsls	r0, r3, #30
 8004b36:	d4f7      	bmi.n	8004b28 <HAL_RCC_OscConfig+0x1b8>
 8004b38:	e7a9      	b.n	8004a8e <HAL_RCC_OscConfig+0x11e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fb fcb3 	bl	80004a4 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3e:	4d3b      	ldr	r5, [pc, #236]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b42:	e004      	b.n	8004b4e <HAL_RCC_OscConfig+0x1de>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fb fcae 	bl	80004a4 <HAL_GetTick>
 8004b48:	1b80      	subs	r0, r0, r6
 8004b4a:	2864      	cmp	r0, #100	; 0x64
 8004b4c:	d8d4      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	039b      	lsls	r3, r3, #14
 8004b52:	d4f7      	bmi.n	8004b44 <HAL_RCC_OscConfig+0x1d4>
 8004b54:	e734      	b.n	80049c0 <HAL_RCC_OscConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b56:	684a      	ldr	r2, [r1, #4]
 8004b58:	0250      	lsls	r0, r2, #9
 8004b5a:	f57f af1c 	bpl.w	8004996 <HAL_RCC_OscConfig+0x26>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5e:	4a33      	ldr	r2, [pc, #204]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	0391      	lsls	r1, r2, #14
 8004b64:	f57f af2d 	bpl.w	80049c2 <HAL_RCC_OscConfig+0x52>
 8004b68:	6862      	ldr	r2, [r4, #4]
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	f47f af29 	bne.w	80049c2 <HAL_RCC_OscConfig+0x52>
 8004b70:	e7d0      	b.n	8004b14 <HAL_RCC_OscConfig+0x1a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4d2e      	ldr	r5, [pc, #184]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 8004b74:	20f8      	movs	r0, #248	; 0xf8
 8004b76:	6829      	ldr	r1, [r5, #0]
 8004b78:	fa90 f0a0 	rbit	r0, r0
 8004b7c:	6922      	ldr	r2, [r4, #16]
 8004b7e:	fab0 f080 	clz	r0, r0
 8004b82:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8004b86:	4082      	lsls	r2, r0
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	602a      	str	r2, [r5, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8c:	071a      	lsls	r2, r3, #28
 8004b8e:	f57f af4a 	bpl.w	8004a26 <HAL_RCC_OscConfig+0xb6>
 8004b92:	e769      	b.n	8004a68 <HAL_RCC_OscConfig+0xf8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b94:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <HAL_RCC_OscConfig+0x2c4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	4d25      	ldr	r5, [pc, #148]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fb fc83 	bl	80004a4 <HAL_GetTick>
 8004b9e:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba0:	e004      	b.n	8004bac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba2:	f7fb fc7f 	bl	80004a4 <HAL_GetTick>
 8004ba6:	1b80      	subs	r0, r0, r6
 8004ba8:	2802      	cmp	r0, #2
 8004baa:	d8a5      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	0799      	lsls	r1, r3, #30
 8004bb0:	d4f7      	bmi.n	8004ba2 <HAL_RCC_OscConfig+0x232>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	e735      	b.n	8004a22 <HAL_RCC_OscConfig+0xb2>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb6:	461d      	mov	r5, r3
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fb fc74 	bl	80004a4 <HAL_GetTick>
 8004bbc:	4606      	mov	r6, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	e004      	b.n	8004bca <HAL_RCC_OscConfig+0x25a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fb fc70 	bl	80004a4 <HAL_GetTick>
 8004bc4:	1b80      	subs	r0, r0, r6
 8004bc6:	2802      	cmp	r0, #2
 8004bc8:	d896      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x188>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bca:	682b      	ldr	r3, [r5, #0]
 8004bcc:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_RCC_OscConfig+0x2bc>)
 8004bce:	0199      	lsls	r1, r3, #6
 8004bd0:	d4f6      	bmi.n	8004bc0 <HAL_RCC_OscConfig+0x250>
 8004bd2:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8004bd6:	fa97 f7a7 	rbit	r7, r7
 8004bda:	f44f 3640 	mov.w	r6, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bde:	fab7 f787 	clz	r7, r7
 8004be2:	fa96 f6a6 	rbit	r6, r6
 8004be6:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8004bea:	fab6 f686 	clz	r6, r6
 8004bee:	fa90 f0a0 	rbit	r0, r0
 8004bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bf4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004bf6:	f8d4 c020 	ldr.w	ip, [r4, #32]
 8004bfa:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8004bfe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c00:	fab0 f080 	clz	r0, r0
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	fa05 f407 	lsl.w	r4, r5, r7
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	ea4c 050e 	orr.w	r5, ip, lr
 8004c10:	432c      	orrs	r4, r5
 8004c12:	40b3      	lsls	r3, r6
 8004c14:	4081      	lsls	r1, r0
 8004c16:	4323      	orrs	r3, r4
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c18:	4807      	ldr	r0, [pc, #28]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1a:	430b      	orrs	r3, r1
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c1c:	2101      	movs	r1, #1
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1e:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c20:	6001      	str	r1, [r0, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	4614      	mov	r4, r2
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fb fc3e 	bl	80004a4 <HAL_GetTick>
 8004c28:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2a:	e013      	b.n	8004c54 <HAL_RCC_OscConfig+0x2e4>
 8004c2c:	40023800 	andmi	r3, r2, r0, lsl #16
 8004c30:	40023802 	andmi	r3, r2, r2, lsl #16
 8004c34:	42470000 	submi	r0, r7, #0
 8004c38:	42470060 	submi	r0, r7, #96	; 0x60
 8004c3c:	42470e80 	submi	r0, r7, #128, 28	; 0x800
 8004c40:	40007000 	andmi	r7, r0, r0
 8004c44:	40023870 	andmi	r3, r2, r0, ror r8
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c48:	f7fb fc2c 	bl	80004a4 <HAL_GetTick>
 8004c4c:	1b40      	subs	r0, r0, r5
 8004c4e:	2802      	cmp	r0, #2
 8004c50:	f63f af52 	bhi.w	8004af8 <HAL_RCC_OscConfig+0x188>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	019a      	lsls	r2, r3, #6
 8004c58:	d5f6      	bpl.n	8004c48 <HAL_RCC_OscConfig+0x2d8>
 8004c5a:	e702      	b.n	8004a62 <HAL_RCC_OscConfig+0xf2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fb fc22 	bl	80004a4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c60:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <HAL_RCC_OscConfig+0x30c>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c64:	f241 3688 	movw	r6, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c6a:	0798      	lsls	r0, r3, #30
 8004c6c:	f57f aedd 	bpl.w	8004a2a <HAL_RCC_OscConfig+0xba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c70:	f7fb fc18 	bl	80004a4 <HAL_GetTick>
 8004c74:	1bc0      	subs	r0, r0, r7
 8004c76:	42b0      	cmp	r0, r6
 8004c78:	d9f6      	bls.n	8004c68 <HAL_RCC_OscConfig+0x2f8>
 8004c7a:	e73d      	b.n	8004af8 <HAL_RCC_OscConfig+0x188>
 8004c7c:	40023800 	andmi	r3, r2, r0, lsl #16

08004c80 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004c80:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004c82:	4603      	mov	r3, r0
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004c84:	b089      	sub	sp, #36	; 0x24
 8004c86:	460d      	mov	r5, r1
 8004c88:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004c8a:	b318      	cbz	r0, 8004cd4 <HAL_RCC_MCOConfig+0x54>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8004c8c:	4c23      	ldr	r4, [pc, #140]	; (8004d1c <HAL_RCC_MCOConfig+0x9c>)
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004c8e:	4824      	ldr	r0, [pc, #144]	; (8004d20 <HAL_RCC_MCOConfig+0xa0>)
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8004c90:	2300      	movs	r3, #0
 8004c92:	9302      	str	r3, [sp, #8]
 8004c94:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c96:	f041 0104 	orr.w	r1, r1, #4
 8004c9a:	6321      	str	r1, [r4, #48]	; 0x30
 8004c9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9e:	9305      	str	r3, [sp, #20]
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8004ca0:	f001 0104 	and.w	r1, r1, #4
 8004ca4:	9102      	str	r1, [sp, #8]
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004ca6:	f44f 7e00 	mov.w	lr, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004caa:	2203      	movs	r2, #3
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cac:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004cae:	a903      	add	r1, sp, #12
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004cb0:	9307      	str	r3, [sp, #28]
    __MCO2_CLK_ENABLE();
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb2:	9206      	str	r2, [sp, #24]
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8004cb4:	f8dd c008 	ldr.w	ip, [sp, #8]
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004cb8:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004cbe:	f7fb fdc5 	bl	800084c <HAL_GPIO_Init>
    
    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004cc2:	68a3      	ldr	r3, [r4, #8]
 8004cc4:	ea45 02c6 	orr.w	r2, r5, r6, lsl #3
 8004cc8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	60a2      	str	r2, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004cd0:	b009      	add	sp, #36	; 0x24
 8004cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004cd4:	4c11      	ldr	r4, [pc, #68]	; (8004d1c <HAL_RCC_MCOConfig+0x9c>)
 8004cd6:	9001      	str	r0, [sp, #4]
 8004cd8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004cda:	4812      	ldr	r0, [pc, #72]	; (8004d24 <HAL_RCC_MCOConfig+0xa4>)
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004cdc:	f042 0201 	orr.w	r2, r2, #1
 8004ce0:	6322      	str	r2, [r4, #48]	; 0x30
 8004ce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	9305      	str	r3, [sp, #20]
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004ce6:	f002 0201 	and.w	r2, r2, #1
 8004cea:	9201      	str	r2, [sp, #4]
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004cec:	f44f 7e80 	mov.w	lr, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf0:	2203      	movs	r2, #3
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004cf4:	a903      	add	r1, sp, #12
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004cf6:	9307      	str	r3, [sp, #28]
    __MCO1_CLK_ENABLE();
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf8:	9206      	str	r2, [sp, #24]
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004cfa:	f8dd c004 	ldr.w	ip, [sp, #4]
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004cfe:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d02:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004d04:	f7fb fda2 	bl	800084c <HAL_GPIO_Init>
    
    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004d08:	68a3      	ldr	r3, [r4, #8]
 8004d0a:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8004d0e:	ea46 0203 	orr.w	r2, r6, r3
 8004d12:	4315      	orrs	r5, r2
 8004d14:	60a5      	str	r5, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004d16:	b009      	add	sp, #36	; 0x24
 8004d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	andmi	r3, r2, r0, lsl #16
 8004d20:	40020800 	andmi	r0, r2, r0, lsl #16
 8004d24:	40020000 	andmi	r0, r2, r0

08004d28 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004d28:	4b01      	ldr	r3, [pc, #4]	; (8004d30 <HAL_RCC_EnableCSS+0x8>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	4770      	bx	lr
 8004d30:	4247004c 	submi	r0, r7, #76	; 0x4c

08004d34 <HAL_RCC_DisableCSS>:
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <HAL_RCC_DisableCSS+0x8>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	4770      	bx	lr
 8004d3c:	4247004c 	submi	r0, r7, #76	; 0x4c

08004d40 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	491c      	ldr	r1, [pc, #112]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x74>)
 8004d42:	688b      	ldr	r3, [r1, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d031      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x70>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d12d      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x6c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d50:	684a      	ldr	r2, [r1, #4]
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d52:	b430      	push	{r4, r5}
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d54:	684d      	ldr	r5, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d56:	f002 043f 	and.w	r4, r2, #63	; 0x3f
 8004d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004d5e:	684a      	ldr	r2, [r1, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d60:	0269      	lsls	r1, r5, #9
 8004d62:	fa93 f3a3 	rbit	r3, r3
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004d66:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8004d6a:	ea00 0002 	and.w	r0, r0, r2
 8004d6e:	bf4a      	itet	mi
 8004d70:	4911      	ldrmi	r1, [pc, #68]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x78>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004d72:	4a12      	ldrpl	r2, [pc, #72]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x7c>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004d74:	fbb1 f2f4 	udivmi	r2, r1, r4
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8004d78:	490e      	ldr	r1, [pc, #56]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x74>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	fa20 f003 	lsr.w	r0, r0, r3
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004d82:	bf58      	it	pl
 8004d84:	fbb2 f2f4 	udivpl	r2, r2, r4
 8004d88:	fb02 f300 	mul.w	r3, r2, r0
 8004d8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8004d90:	6848      	ldr	r0, [r1, #4]
 8004d92:	fa92 f2a2 	rbit	r2, r2
 8004d96:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8004d9a:	fab2 f282 	clz	r2, r2
 8004d9e:	40d0      	lsrs	r0, r2
 8004da0:	3001      	adds	r0, #1
 8004da2:	0040      	lsls	r0, r0, #1
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004da4:	bc30      	pop	{r4, r5}
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
      
      sysclockfreq = pllvco/pllp;
 8004da6:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004daa:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dac:	4803      	ldr	r0, [pc, #12]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x7c>)
 8004dae:	4770      	bx	lr
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x78>)
 8004db2:	4770      	bx	lr
 8004db4:	40023800 	andmi	r3, r2, r0, lsl #16
 8004db8:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8004dbc:	00f42400 	rscseq	r2, r4, r0, lsl #8

08004dc0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004dc0:	4a56      	ldr	r2, [pc, #344]	; (8004f1c <HAL_RCC_ClockConfig+0x15c>)
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4606      	mov	r6, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004dd2:	d209      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x28>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd4:	b2cb      	uxtb	r3, r1
 8004dd6:	7013      	strb	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dd8:	6813      	ldr	r3, [r2, #0]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	428b      	cmp	r3, r1
 8004de0:	d002      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x28>
    {
      return HAL_ERROR;
 8004de2:	2001      	movs	r0, #1
 8004de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	6833      	ldr	r3, [r6, #0]
 8004dea:	079a      	lsls	r2, r3, #30
 8004dec:	d506      	bpl.n	8004dfc <HAL_RCC_ClockConfig+0x3c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dee:	484c      	ldr	r0, [pc, #304]	; (8004f20 <HAL_RCC_ClockConfig+0x160>)
 8004df0:	68b2      	ldr	r2, [r6, #8]
 8004df2:	6881      	ldr	r1, [r0, #8]
 8004df4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	6082      	str	r2, [r0, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfc:	07df      	lsls	r7, r3, #31
 8004dfe:	d526      	bpl.n	8004e4e <HAL_RCC_ClockConfig+0x8e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e00:	6873      	ldr	r3, [r6, #4]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	f000 8084 	beq.w	8004f10 <HAL_RCC_ClockConfig+0x150>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004e08:	1e9a      	subs	r2, r3, #2
 8004e0a:	2a01      	cmp	r2, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0c:	4a44      	ldr	r2, [pc, #272]	; (8004f20 <HAL_RCC_ClockConfig+0x160>)
 8004e0e:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004e10:	d978      	bls.n	8004f04 <HAL_RCC_ClockConfig+0x144>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e12:	0791      	lsls	r1, r2, #30
 8004e14:	d5e5      	bpl.n	8004de2 <HAL_RCC_ClockConfig+0x22>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e16:	4d42      	ldr	r5, [pc, #264]	; (8004f20 <HAL_RCC_ClockConfig+0x160>)
 8004e18:	68aa      	ldr	r2, [r5, #8]
 8004e1a:	f022 0203 	bic.w	r2, r2, #3
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60ab      	str	r3, [r5, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e22:	f7fb fb3f 	bl	80004a4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e26:	6873      	ldr	r3, [r6, #4]
 8004e28:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e30:	d04c      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d055      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x122>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d105      	bne.n	8004e46 <HAL_RCC_ClockConfig+0x86>
 8004e3a:	e05d      	b.n	8004ef8 <HAL_RCC_ClockConfig+0x138>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	f7fb fb32 	bl	80004a4 <HAL_GetTick>
 8004e40:	1bc0      	subs	r0, r0, r7
 8004e42:	4540      	cmp	r0, r8
 8004e44:	d861      	bhi.n	8004f0a <HAL_RCC_ClockConfig+0x14a>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e46:	68ab      	ldr	r3, [r5, #8]
 8004e48:	f013 0f0c 	tst.w	r3, #12
 8004e4c:	d1f6      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x7c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004e4e:	4a33      	ldr	r2, [pc, #204]	; (8004f1c <HAL_RCC_ClockConfig+0x15c>)
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d206      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0xa8>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	b2e3      	uxtb	r3, r4
 8004e5c:	7013      	strb	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	d1bc      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x22>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	6833      	ldr	r3, [r6, #0]
 8004e6a:	075a      	lsls	r2, r3, #29
 8004e6c:	d506      	bpl.n	8004e7c <HAL_RCC_ClockConfig+0xbc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e6e:	482c      	ldr	r0, [pc, #176]	; (8004f20 <HAL_RCC_ClockConfig+0x160>)
 8004e70:	68f2      	ldr	r2, [r6, #12]
 8004e72:	6881      	ldr	r1, [r0, #8]
 8004e74:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	6082      	str	r2, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	d507      	bpl.n	8004e90 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e80:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <HAL_RCC_ClockConfig+0x160>)
 8004e82:	6931      	ldr	r1, [r6, #16]
 8004e84:	6893      	ldr	r3, [r2, #8]
 8004e86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e8e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004e90:	f7ff ff56 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004e94:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <HAL_RCC_ClockConfig+0x160>)
 8004e96:	4601      	mov	r1, r0
 8004e98:	22f0      	movs	r2, #240	; 0xf0
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	fa92 f2a2 	rbit	r2, r2
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea4:	fab2 f282 	clz	r2, r2
 8004ea8:	4d1e      	ldr	r5, [pc, #120]	; (8004f24 <HAL_RCC_ClockConfig+0x164>)
 8004eaa:	4c1f      	ldr	r4, [pc, #124]	; (8004f28 <HAL_RCC_ClockConfig+0x168>)
 8004eac:	40d3      	lsrs	r3, r2

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004eae:	200f      	movs	r0, #15
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004eb0:	5ceb      	ldrb	r3, [r5, r3]
 8004eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8004eb6:	6023      	str	r3, [r4, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004eb8:	f7fb fabc 	bl	8000434 <HAL_InitTick>
  
  return HAL_OK;
 8004ebc:	2000      	movs	r0, #0
}
 8004ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec2:	f7fb faef 	bl	80004a4 <HAL_GetTick>
 8004ec6:	1bc0      	subs	r0, r0, r7
 8004ec8:	4540      	cmp	r0, r8
 8004eca:	d81e      	bhi.n	8004f0a <HAL_RCC_ClockConfig+0x14a>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ecc:	68ab      	ldr	r3, [r5, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d1f5      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0x102>
 8004ed6:	e7ba      	b.n	8004e4e <HAL_RCC_ClockConfig+0x8e>
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fb fae4 	bl	80004a4 <HAL_GetTick>
 8004edc:	1bc0      	subs	r0, r0, r7
 8004ede:	4540      	cmp	r0, r8
 8004ee0:	d813      	bhi.n	8004f0a <HAL_RCC_ClockConfig+0x14a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee2:	68ab      	ldr	r3, [r5, #8]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d1f5      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x118>
 8004eec:	e7af      	b.n	8004e4e <HAL_RCC_ClockConfig+0x8e>
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eee:	f7fb fad9 	bl	80004a4 <HAL_GetTick>
 8004ef2:	1bc0      	subs	r0, r0, r7
 8004ef4:	4540      	cmp	r0, r8
 8004ef6:	d808      	bhi.n	8004f0a <HAL_RCC_ClockConfig+0x14a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004ef8:	68ab      	ldr	r3, [r5, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d1f5      	bne.n	8004eee <HAL_RCC_ClockConfig+0x12e>
 8004f02:	e7a4      	b.n	8004e4e <HAL_RCC_ClockConfig+0x8e>
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f04:	0190      	lsls	r0, r2, #6
 8004f06:	d486      	bmi.n	8004e16 <HAL_RCC_ClockConfig+0x56>
 8004f08:	e76b      	b.n	8004de2 <HAL_RCC_ClockConfig+0x22>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f10:	4a03      	ldr	r2, [pc, #12]	; (8004f20 <HAL_RCC_ClockConfig+0x160>)
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	0395      	lsls	r5, r2, #14
 8004f16:	f53f af7e 	bmi.w	8004e16 <HAL_RCC_ClockConfig+0x56>
 8004f1a:	e762      	b.n	8004de2 <HAL_RCC_ClockConfig+0x22>
 8004f1c:	40023c00 	andmi	r3, r2, r0, lsl #24
 8004f20:	40023800 	andmi	r3, r2, r0, lsl #16
 8004f24:	08007e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8004f28:	20000010 	andcs	r0, r0, r0, lsl r0

08004f2c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004f2c:	4b01      	ldr	r3, [pc, #4]	; (8004f34 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000010 	andcs	r0, r0, r0, lsl r0

08004f38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f3a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	fa92 f2a2 	rbit	r2, r2
 8004f44:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004f48:	fab2 f282 	clz	r2, r2
 8004f4c:	4904      	ldr	r1, [pc, #16]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x28>)
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004f4e:	4805      	ldr	r0, [pc, #20]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x2c>)
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004f50:	40d3      	lsrs	r3, r2
 8004f52:	6800      	ldr	r0, [r0, #0]
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
}
 8004f56:	40d8      	lsrs	r0, r3
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	andmi	r3, r2, r0, lsl #16
 8004f60:	08007e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8004f64:	20000010 	andcs	r0, r0, r0, lsl r0

08004f68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004f68:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	fa92 f2a2 	rbit	r2, r2
 8004f74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f78:	fab2 f282 	clz	r2, r2
 8004f7c:	4904      	ldr	r1, [pc, #16]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x28>)
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004f7e:	4805      	ldr	r0, [pc, #20]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x2c>)
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004f80:	40d3      	lsrs	r3, r2
 8004f82:	6800      	ldr	r0, [r0, #0]
 8004f84:	5ccb      	ldrb	r3, [r1, r3]
} 
 8004f86:	40d8      	lsrs	r0, r3
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	andmi	r3, r2, r0, lsl #16
 8004f90:	08007e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8004f94:	20000010 	andcs	r0, r0, r0, lsl r0

08004f98 <HAL_RCC_GetOscConfig>:
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8004f98:	220f      	movs	r2, #15
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8004f9a:	4b33      	ldr	r3, [pc, #204]	; (8005068 <HAL_RCC_GetOscConfig+0xd0>)
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8004f9c:	6002      	str	r2, [r0, #0]
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	0352      	lsls	r2, r2, #13
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa2:	b410      	push	{r4}
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8004fa4:	d551      	bpl.n	800504a <HAL_RCC_GetOscConfig+0xb2>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8004fa6:	2305      	movs	r3, #5
 8004fa8:	6043      	str	r3, [r0, #4]
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8004faa:	492f      	ldr	r1, [pc, #188]	; (8005068 <HAL_RCC_GetOscConfig+0xd0>)
 8004fac:	680b      	ldr	r3, [r1, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	60c3      	str	r3, [r0, #12]
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8004fb4:	680b      	ldr	r3, [r1, #0]
 8004fb6:	22f8      	movs	r2, #248	; 0xf8
 8004fb8:	fa92 f2a2 	rbit	r2, r2
 8004fbc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8004fc0:	fab2 f282 	clz	r2, r2
 8004fc4:	40d3      	lsrs	r3, r2
 8004fc6:	6103      	str	r3, [r0, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8004fc8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004fca:	075b      	lsls	r3, r3, #29
 8004fcc:	d544      	bpl.n	8005058 <HAL_RCC_GetOscConfig+0xc0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8004fce:	2305      	movs	r3, #5
 8004fd0:	6083      	str	r3, [r0, #8]
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8004fd2:	4a25      	ldr	r2, [pc, #148]	; (8005068 <HAL_RCC_GetOscConfig+0xd0>)
 8004fd4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	6143      	str	r3, [r0, #20]
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
  }
  
  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8004fdc:	6813      	ldr	r3, [r2, #0]
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8004fde:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004fe2:	bf14      	ite	ne
 8004fe4:	2302      	movne	r3, #2
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	6183      	str	r3, [r0, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004fea:	6853      	ldr	r3, [r2, #4]
 8004fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff0:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8004ff2:	6853      	ldr	r3, [r2, #4]
 8004ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff8:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004ffa:	6854      	ldr	r4, [r2, #4]
 8004ffc:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005000:	fa91 f1a1 	rbit	r1, r1
 8005004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005008:	4023      	ands	r3, r4
 800500a:	fab1 f181 	clz	r1, r1
 800500e:	40cb      	lsrs	r3, r1
 8005010:	6243      	str	r3, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
 8005012:	6853      	ldr	r3, [r2, #4]
 8005014:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8005018:	fa91 f1a1 	rbit	r1, r1
 800501c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005020:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fab1 f181 	clz	r1, r1
 800502a:	40cb      	lsrs	r3, r1
 800502c:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
 800502e:	6853      	ldr	r3, [r2, #4]
 8005030:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005034:	fa92 f2a2 	rbit	r2, r2
 8005038:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800503c:	fab2 f282 	clz	r2, r2
 8005040:	40d3      	lsrs	r3, r2
 8005042:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8005044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005048:	4770      	bx	lr
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8005050:	bf18      	it	ne
 8005052:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8005054:	6043      	str	r3, [r0, #4]
 8005056:	e7a8      	b.n	8004faa <HAL_RCC_GetOscConfig+0x12>
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8005058:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800505a:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800505e:	bf18      	it	ne
 8005060:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8005062:	6083      	str	r3, [r0, #8]
 8005064:	e7b5      	b.n	8004fd2 <HAL_RCC_GetOscConfig+0x3a>
 8005066:	bf00      	nop
 8005068:	40023800 	andmi	r3, r2, r0, lsl #16

0800506c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <HAL_RCC_GetClockConfig+0x3c>)
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800506e:	220f      	movs	r2, #15
 8005070:	6002      	str	r2, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	f002 0203 	and.w	r2, r2, #3
 8005078:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005080:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005088:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005090:	b410      	push	{r4}
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005092:	08db      	lsrs	r3, r3, #3
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005094:	4c05      	ldr	r4, [pc, #20]	; (80050ac <HAL_RCC_GetClockConfig+0x40>)
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005096:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005098:	6823      	ldr	r3, [r4, #0]
}
 800509a:	f85d 4b04 	ldr.w	r4, [sp], #4
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	600b      	str	r3, [r1, #0]
}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023800 	andmi	r3, r2, r0, lsl #16
 80050ac:	40023c00 	andmi	r3, r2, r0, lsl #24

080050b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80050b4:	b508      	push	{r3, lr}
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_NMI_IRQHandler+0x18>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	d504      	bpl.n	80050c8 <HAL_RCC_NMI_IRQHandler+0x14>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80050be:	f7ff fff7 	bl	80050b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80050c2:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80050c4:	2280      	movs	r2, #128	; 0x80
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	bd08      	pop	{r3, pc}
 80050ca:	bf00      	nop
 80050cc:	40023800 	andmi	r3, r2, r0, lsl #16
 80050d0:	4002380e 	andmi	r3, r2, lr, lsl #16

080050d4 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050da:	fa92 f2a2 	rbit	r2, r2
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_PWREx_EnableBkUpReg+0x3c>)
 80050e0:	fab2 f282 	clz	r2, r2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050ec:	f7fb f9da 	bl	80004a4 <HAL_GetTick>

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80050f0:	4c08      	ldr	r4, [pc, #32]	; (8005114 <HAL_PWREx_EnableBkUpReg+0x40>)
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f2:	4605      	mov	r5, r0

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80050f4:	e005      	b.n	8005102 <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80050f6:	f7fb f9d5 	bl	80004a4 <HAL_GetTick>
 80050fa:	1b40      	subs	r0, r0, r5
 80050fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005100:	d804      	bhi.n	800510c <HAL_PWREx_EnableBkUpReg+0x38>

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	071b      	lsls	r3, r3, #28
 8005106:	d5f6      	bpl.n	80050f6 <HAL_PWREx_EnableBkUpReg+0x22>
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
 8005108:	2000      	movs	r0, #0
 800510a:	bd38      	pop	{r3, r4, r5, pc}
  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
 800510c:	2003      	movs	r0, #3
    } 
  }
  return HAL_OK;
}
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	10838020 	addne	r8, r3, r0, lsr #32
 8005114:	40007000 	andmi	r7, r0, r0

08005118 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800511e:	fa92 f2a2 	rbit	r2, r2
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_PWREx_DisableBkUpReg+0x3c>)
 8005124:	fab2 f282 	clz	r2, r2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005130:	f7fb f9b8 	bl	80004a4 <HAL_GetTick>

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8005134:	4c08      	ldr	r4, [pc, #32]	; (8005158 <HAL_PWREx_DisableBkUpReg+0x40>)
  uint32_t tickstart = 0U;

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005136:	4605      	mov	r5, r0

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8005138:	e005      	b.n	8005146 <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 800513a:	f7fb f9b3 	bl	80004a4 <HAL_GetTick>
 800513e:	1b40      	subs	r0, r0, r5
 8005140:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005144:	d804      	bhi.n	8005150 <HAL_PWREx_DisableBkUpReg+0x38>

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8005146:	6860      	ldr	r0, [r4, #4]
 8005148:	f010 0008 	ands.w	r0, r0, #8
 800514c:	d1f5      	bne.n	800513a <HAL_PWREx_DisableBkUpReg+0x22>
 800514e:	bd38      	pop	{r3, r4, r5, pc}
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
 8005150:	2003      	movs	r0, #3
    } 
  }
  return HAL_OK;
}
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	10838020 	addne	r8, r3, r0, lsr #32
 8005158:	40007000 	andmi	r7, r0, r0

0800515c <HAL_PWREx_EnableFlashPowerDown>:
 800515c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005160:	fa93 f3a3 	rbit	r3, r3
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8005164:	fab3 f383 	clz	r3, r3
 8005168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800516c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	4770      	bx	lr

08005178 <HAL_PWREx_DisableFlashPowerDown>:
 8005178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800517c:	fa93 f3a3 	rbit	r3, r3
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005188:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	4770      	bx	lr

08005194 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR & PWR_CR_VOS);
 8005194:	4b02      	ldr	r3, [pc, #8]	; (80051a0 <HAL_PWREx_GetVoltageRange+0xc>)
 8005196:	6818      	ldr	r0, [r3, #0]
}
 8005198:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40007000 	andmi	r7, r0, r0

080051a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051a8:	4c29      	ldr	r4, [pc, #164]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	9200      	str	r2, [sp, #0]
 80051ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6423      	str	r3, [r4, #64]	; 0x40
 80051b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	9b00      	ldr	r3, [sp, #0]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051c0:	68a3      	ldr	r3, [r4, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d03e      	beq.n	8005248 <HAL_PWREx_ControlVoltageScaling+0xa4>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	4606      	mov	r6, r0
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
 80051d0:	f7fb f968 	bl	80004a4 <HAL_GetTick>
 80051d4:	4605      	mov	r5, r0
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d6:	e004      	b.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0x3e>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d8:	f7fb f964 	bl	80004a4 <HAL_GetTick>
 80051dc:	1b40      	subs	r0, r0, r5
 80051de:	2802      	cmp	r0, #2
 80051e0:	d82f      	bhi.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x9e>
    __HAL_RCC_PLL_DISABLE();
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80051e8:	d1f6      	bne.n	80051d8 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 80051ea:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	6813      	ldr	r3, [r2, #0]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
 80051f0:	4918      	ldr	r1, [pc, #96]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0xb0>)
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	4c17      	ldr	r4, [pc, #92]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xac>)
        return HAL_TIMEOUT;
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 80051f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80051f8:	431e      	orrs	r6, r3
 80051fa:	6016      	str	r6, [r2, #0]
 80051fc:	6813      	ldr	r3, [r2, #0]
 80051fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005202:	9301      	str	r3, [sp, #4]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
 8005204:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8005206:	9a01      	ldr	r2, [sp, #4]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
 8005208:	600b      	str	r3, [r1, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800520a:	f7fb f94b 	bl	80004a4 <HAL_GetTick>
 800520e:	4605      	mov	r5, r0
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005210:	e004      	b.n	800521c <HAL_PWREx_ControlVoltageScaling+0x78>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005212:	f7fb f947 	bl	80004a4 <HAL_GetTick>
 8005216:	1b40      	subs	r0, r0, r5
 8005218:	2802      	cmp	r0, #2
 800521a:	d812      	bhi.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x9e>
    __HAL_RCC_PLL_ENABLE();
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	019a      	lsls	r2, r3, #6
 8005220:	d5f7      	bpl.n	8005212 <HAL_PWREx_ControlVoltageScaling+0x6e>
        return HAL_TIMEOUT;
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005222:	f7fb f93f 	bl	80004a4 <HAL_GetTick>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8005226:	4c0c      	ldr	r4, [pc, #48]	; (8005258 <HAL_PWREx_ControlVoltageScaling+0xb4>)
        return HAL_TIMEOUT;
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005228:	4605      	mov	r5, r0
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 800522a:	e005      	b.n	8005238 <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 800522c:	f7fb f93a 	bl	80004a4 <HAL_GetTick>
 8005230:	1b40      	subs	r0, r0, r5
 8005232:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005236:	d804      	bhi.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x9e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8005238:	6863      	ldr	r3, [r4, #4]
 800523a:	045b      	lsls	r3, r3, #17
 800523c:	d5f6      	bpl.n	800522c <HAL_PWREx_ControlVoltageScaling+0x88>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800523e:	2000      	movs	r0, #0
 8005240:	e000      	b.n	8005244 <HAL_PWREx_ControlVoltageScaling+0xa0>
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8005242:	2003      	movs	r0, #3
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8005244:	b002      	add	sp, #8
 8005246:	bd70      	pop	{r4, r5, r6, pc}
      } 
    }
  }
  else
  {
    return HAL_ERROR;
 8005248:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800524a:	b002      	add	sp, #8
 800524c:	bd70      	pop	{r4, r5, r6, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	andmi	r3, r2, r0, lsl #16
 8005254:	42470060 	submi	r0, r7, #96	; 0x60
 8005258:	40007000 	andmi	r7, r0, r0

0800525c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800525c:	b530      	push	{r4, r5, lr}
 800525e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005260:	4b23      	ldr	r3, [pc, #140]	; (80052f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005262:	2200      	movs	r2, #0
 8005264:	9201      	str	r2, [sp, #4]
 8005266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005268:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	9b01      	ldr	r3, [sp, #4]
 8005278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800527c:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005280:	fab3 f383 	clz	r3, r3
 8005284:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005288:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005292:	f7fb f907 	bl	80004a4 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005296:	4c17      	ldr	r4, [pc, #92]	; (80052f4 <HAL_PWREx_EnableOverDrive+0x98>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 8005298:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800529a:	e005      	b.n	80052a8 <HAL_PWREx_EnableOverDrive+0x4c>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800529c:	f7fb f902 	bl	80004a4 <HAL_GetTick>
 80052a0:	1b40      	subs	r0, r0, r5
 80052a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80052a6:	d820      	bhi.n	80052ea <HAL_PWREx_EnableOverDrive+0x8e>
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	03da      	lsls	r2, r3, #15
 80052ac:	d5f6      	bpl.n	800529c <HAL_PWREx_EnableOverDrive+0x40>
 80052ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052b2:	fa93 f3a3 	rbit	r3, r3
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052b6:	fab3 f383 	clz	r3, r3
 80052ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052be:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052c8:	f7fb f8ec 	bl	80004a4 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052cc:	4c09      	ldr	r4, [pc, #36]	; (80052f4 <HAL_PWREx_EnableOverDrive+0x98>)
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 80052ce:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052d0:	e005      	b.n	80052de <HAL_PWREx_EnableOverDrive+0x82>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052d2:	f7fb f8e7 	bl	80004a4 <HAL_GetTick>
 80052d6:	1b40      	subs	r0, r0, r5
 80052d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80052dc:	d805      	bhi.n	80052ea <HAL_PWREx_EnableOverDrive+0x8e>
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052de:	6863      	ldr	r3, [r4, #4]
 80052e0:	039b      	lsls	r3, r3, #14
 80052e2:	d5f6      	bpl.n	80052d2 <HAL_PWREx_EnableOverDrive+0x76>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80052e4:	2000      	movs	r0, #0
}
 80052e6:	b003      	add	sp, #12
 80052e8:	bd30      	pop	{r4, r5, pc}

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
 80052ea:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80052ec:	b003      	add	sp, #12
 80052ee:	bd30      	pop	{r4, r5, pc}
 80052f0:	40023800 	andmi	r3, r2, r0, lsl #16
 80052f4:	40007000 	andmi	r7, r0, r0

080052f8 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
 80052f8:	b530      	push	{r4, r5, lr}
 80052fa:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <HAL_PWREx_DisableOverDrive+0x94>)
 80052fe:	2100      	movs	r1, #0
 8005300:	9101      	str	r1, [sp, #4]
 8005302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005304:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005318:	fa93 f3a3 	rbit	r3, r3
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005324:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8005328:	009b      	lsls	r3, r3, #2
  
  /* Get tick */
  tickstart = HAL_GetTick();
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800532a:	4c19      	ldr	r4, [pc, #100]	; (8005390 <HAL_PWREx_DisableOverDrive+0x98>)
  uint32_t tickstart = 0U;
  
  __HAL_RCC_PWR_CLK_ENABLE();
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
 800532c:	6019      	str	r1, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800532e:	f7fb f8b9 	bl	80004a4 <HAL_GetTick>
 8005332:	4605      	mov	r5, r0
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005334:	e005      	b.n	8005342 <HAL_PWREx_DisableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005336:	f7fb f8b5 	bl	80004a4 <HAL_GetTick>
 800533a:	1b40      	subs	r0, r0, r5
 800533c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005340:	d820      	bhi.n	8005384 <HAL_PWREx_DisableOverDrive+0x8c>
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
  
  /* Get tick */
  tickstart = HAL_GetTick();
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8005348:	d1f5      	bne.n	8005336 <HAL_PWREx_DisableOverDrive+0x3e>
 800534a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800534e:	fa92 f2a2 	rbit	r2, r2
      return HAL_TIMEOUT;
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
 8005352:	fab2 f282 	clz	r2, r2
 8005356:	f102 5284 	add.w	r2, r2, #276824064	; 0x10800000
 800535a:	f502 3260 	add.w	r2, r2, #229376	; 0x38000
 800535e:	0092      	lsls	r2, r2, #2

  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005360:	4c0b      	ldr	r4, [pc, #44]	; (8005390 <HAL_PWREx_DisableOverDrive+0x98>)
      return HAL_TIMEOUT;
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
 8005362:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005364:	f7fb f89e 	bl	80004a4 <HAL_GetTick>
 8005368:	4605      	mov	r5, r0

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800536a:	e005      	b.n	8005378 <HAL_PWREx_DisableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800536c:	f7fb f89a 	bl	80004a4 <HAL_GetTick>
 8005370:	1b40      	subs	r0, r0, r5
 8005372:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005376:	d805      	bhi.n	8005384 <HAL_PWREx_DisableOverDrive+0x8c>
  __HAL_PWR_OVERDRIVE_DISABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005378:	6860      	ldr	r0, [r4, #4]
 800537a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800537e:	d1f5      	bne.n	800536c <HAL_PWREx_DisableOverDrive+0x74>
      return HAL_TIMEOUT;
    }
  }
  
  return HAL_OK;
}
 8005380:	b003      	add	sp, #12
 8005382:	bd30      	pop	{r4, r5, pc}
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
 8005384:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }
  
  return HAL_OK;
}
 8005386:	b003      	add	sp, #12
 8005388:	bd30      	pop	{r4, r5, pc}
 800538a:	bf00      	nop
 800538c:	40023800 	andmi	r3, r2, r0, lsl #16
 8005390:	40007000 	andmi	r7, r0, r0

08005394 <HAL_PWREx_EnterUnderDriveSTOPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005396:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005398:	4b21      	ldr	r3, [pc, #132]	; (8005420 <HAL_PWREx_EnterUnderDriveSTOPMode+0x8c>)
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
 800539a:	4c22      	ldr	r4, [pc, #136]	; (8005424 <HAL_PWREx_EnterUnderDriveSTOPMode+0x90>)
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800539c:	2200      	movs	r2, #0
 800539e:	9201      	str	r2, [sp, #4]
 80053a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	9b01      	ldr	r3, [sp, #4]
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
 80053b2:	6863      	ldr	r3, [r4, #4]
 80053b4:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80053b8:	6063      	str	r3, [r4, #4]
  
  /* Enable the Under-drive */ 
  __HAL_PWR_UNDERDRIVE_ENABLE();
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80053c0:	6023      	str	r3, [r4, #0]
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80053c2:	4606      	mov	r6, r0
 80053c4:	460d      	mov	r5, r1
  
  /* Enable the Under-drive */ 
  __HAL_PWR_UNDERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 80053c6:	f7fb f86d 	bl	80004a4 <HAL_GetTick>
 80053ca:	4607      	mov	r7, r0

  /* Wait for UnderDrive mode is ready */
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
 80053cc:	e005      	b.n	80053da <HAL_PWREx_EnterUnderDriveSTOPMode+0x46>
  {
    if((HAL_GetTick() - tickstart) > PWR_UDERDRIVE_TIMEOUT_VALUE)
 80053ce:	f7fb f869 	bl	80004a4 <HAL_GetTick>
 80053d2:	1bc0      	subs	r0, r0, r7
 80053d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80053d8:	d81d      	bhi.n	8005416 <HAL_PWREx_EnterUnderDriveSTOPMode+0x82>

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait for UnderDrive mode is ready */
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	4a11      	ldr	r2, [pc, #68]	; (8005424 <HAL_PWREx_EnterUnderDriveSTOPMode+0x90>)
 80053de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80053e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053e6:	d0f2      	beq.n	80053ce <HAL_PWREx_EnterUnderDriveSTOPMode+0x3a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg1 = PWR->CR;
 80053e8:	6813      	ldr	r3, [r2, #0]
  
  /* Store the new value */
  PWR->CR = tmpreg1;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80053ea:	490f      	ldr	r1, [pc, #60]	; (8005428 <HAL_PWREx_EnterUnderDriveSTOPMode+0x94>)
  }
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg1 = PWR->CR;
  /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
  tmpreg1 &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS | PWR_CR_LPUDS | PWR_CR_MRUDS);
 80053ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053f0:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg1 |= Regulator;
 80053f4:	431e      	orrs	r6, r3
  
  /* Store the new value */
  PWR->CR = tmpreg1;
 80053f6:	6016      	str	r6, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80053f8:	690b      	ldr	r3, [r1, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
 80053fa:	2d01      	cmp	r5, #1
  
  /* Store the new value */
  PWR->CR = tmpreg1;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	610b      	str	r3, [r1, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
 8005402:	d00b      	beq.n	800541c <HAL_PWREx_EnterUnderDriveSTOPMode+0x88>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8005404:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <HAL_PWREx_EnterUnderDriveSTOPMode+0x94>)
 8005408:	6913      	ldr	r3, [r2, #16]

  return HAL_OK;  
 800540a:	2000      	movs	r0, #0
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800540c:	f023 0304 	bic.w	r3, r3, #4
 8005410:	6113      	str	r3, [r2, #16]

  return HAL_OK;  
}
 8005412:	b003      	add	sp, #12
 8005414:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Wait for UnderDrive mode is ready */
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
  {
    if((HAL_GetTick() - tickstart) > PWR_UDERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
 8005416:	2003      	movs	r0, #3
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);

  return HAL_OK;  
}
 8005418:	b003      	add	sp, #12
 800541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800541c:	bf30      	wfi
 800541e:	e7f2      	b.n	8005406 <HAL_PWREx_EnterUnderDriveSTOPMode+0x72>
 8005420:	40023800 	andmi	r3, r2, r0, lsl #16
 8005424:	40007000 	andmi	r7, r0, r0
 8005428:	e000ed00 	and	lr, r0, r0, lsl #26

0800542c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop

08005430 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005430:	2800      	cmp	r0, #0
 8005432:	d055      	beq.n	80054e0 <HAL_SPI_Init+0xb0>
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8005438:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800543c:	b082      	sub	sp, #8
 800543e:	4680      	mov	r8, r0
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8005440:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005444:	2b00      	cmp	r3, #0
 8005446:	d046      	beq.n	80054d6 <HAL_SPI_Init+0xa6>
 8005448:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800544c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005456:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800545a:	f8d8 5010 	ldr.w	r5, [r8, #16]
 800545e:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8005462:	f8d8 101c 	ldr.w	r1, [r8, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005466:	f8d8 0000 	ldr.w	r0, [r8]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800546a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800546e:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
 8005472:	431f      	orrs	r7, r3
 8005474:	433e      	orrs	r6, r7
 8005476:	4335      	orrs	r5, r6
 8005478:	432c      	orrs	r4, r5
 800547a:	9b01      	ldr	r3, [sp, #4]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800547c:	2502      	movs	r5, #2
 800547e:	f888 5051 	strb.w	r5, [r8, #81]	; 0x51
 8005482:	4321      	orrs	r1, r4
 8005484:	430b      	orrs	r3, r1

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005486:	6801      	ldr	r1, [r0, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005488:	f402 7e00 	and.w	lr, r2, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800548c:	0c14      	lsrs	r4, r2, #16
 800548e:	ea43 030c 	orr.w	r3, r3, ip
 8005492:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005496:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800549a:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800549e:	f004 0404 	and.w	r4, r4, #4
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80054a6:	6001      	str	r1, [r0, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80054a8:	ea44 0202 	orr.w	r2, r4, r2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054ac:	6003      	str	r3, [r0, #0]
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80054ae:	bf08      	it	eq
 80054b0:	f8d8 302c 	ldreq.w	r3, [r8, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80054b4:	6042      	str	r2, [r0, #4]
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80054b6:	bf08      	it	eq
 80054b8:	6103      	streq	r3, [r0, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054ba:	69c3      	ldr	r3, [r0, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054bc:	2200      	movs	r2, #0
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054c2:	61c3      	str	r3, [r0, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80054c4:	2101      	movs	r1, #1

  return HAL_OK;
 80054c6:	4610      	mov	r0, r2
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054c8:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054cc:	f888 1051 	strb.w	r1, [r8, #81]	; 0x51

  return HAL_OK;
}
 80054d0:	b002      	add	sp, #8
 80054d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054d6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054da:	f7ff ffa7 	bl	800542c <HAL_SPI_MspInit>
 80054de:	e7b3      	b.n	8005448 <HAL_SPI_Init+0x18>
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 80054e0:	2001      	movs	r0, #1
 80054e2:	4770      	bx	lr

080054e4 <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop

080054e8 <HAL_SPI_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80054e8:	b190      	cbz	r0, 8005510 <HAL_SPI_DeInit+0x28>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80054ea:	6802      	ldr	r2, [r0, #0]
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ec:	2302      	movs	r3, #2
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80054ee:	b510      	push	{r4, lr}
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80054f0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80054f4:	6813      	ldr	r3, [r2, #0]
 80054f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fa:	4604      	mov	r4, r0
 80054fc:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80054fe:	f7ff fff1 	bl	80054e4 <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005502:	2000      	movs	r0, #0
 8005504:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005506:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_RESET;
 800550a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
 800550e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8005510:	2001      	movs	r0, #1
 8005512:	4770      	bx	lr

08005514 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005518:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800551a:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800551e:	2801      	cmp	r0, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005520:	b082      	sub	sp, #8

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	d103      	bne.n	800552c <HAL_SPI_Transmit+0x18>
 8005524:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8005526:	b002      	add	sp, #8
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800552e:	2301      	movs	r3, #1
 8005530:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8005534:	460d      	mov	r5, r1
 8005536:	4617      	mov	r7, r2

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fa ffb4 	bl	80004a4 <HAL_GetTick>
 800553c:	4680      	mov	r8, r0

  if(hspi->State != HAL_SPI_STATE_READY)
 800553e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005542:	b2c0      	uxtb	r0, r0
 8005544:	2801      	cmp	r0, #1
 8005546:	d009      	beq.n	800555c <HAL_SPI_Transmit+0x48>
  {
    errorcode = HAL_BUSY;
 8005548:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800554a:	2201      	movs	r2, #1
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800554c:	2300      	movs	r3, #0
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800554e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005552:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 8005556:	b002      	add	sp, #8
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL ) || (Size == 0U))
 800555c:	2d00      	cmp	r5, #0
 800555e:	d0f4      	beq.n	800554a <HAL_SPI_Transmit+0x36>
 8005560:	2f00      	cmp	r7, #0
 8005562:	d0f2      	beq.n	800554a <HAL_SPI_Transmit+0x36>
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005564:	68a2      	ldr	r2, [r4, #8]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005566:	6325      	str	r5, [r4, #48]	; 0x30
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005568:	2300      	movs	r3, #0
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800556e:	f04f 0103 	mov.w	r1, #3
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 8005572:	6822      	ldr	r2, [r4, #0]
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005574:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005578:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 800557a:	86e7      	strh	r7, [r4, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;
 800557c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800557e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005580:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
 8005582:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005584:	6423      	str	r3, [r4, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 8005586:	bf08      	it	eq
 8005588:	6813      	ldreq	r3, [r2, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 800558a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 800558c:	bf04      	itt	eq
 800558e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8005592:	6013      	streq	r3, [r2, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559a:	f000 80f4 	beq.w	8005786 <HAL_SPI_Transmit+0x272>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	0659      	lsls	r1, r3, #25
 80055a2:	d403      	bmi.n	80055ac <HAL_SPI_Transmit+0x98>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a4:	6813      	ldr	r3, [r2, #0]
 80055a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055aa:	6013      	str	r3, [r2, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ac:	68e3      	ldr	r3, [r4, #12]
 80055ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80055b2:	6863      	ldr	r3, [r4, #4]
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055b4:	f000 809a 	beq.w	80056ec <HAL_SPI_Transmit+0x1d8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 808e 	beq.w	80056da <HAL_SPI_Transmit+0x1c6>
 80055be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	f000 8089 	beq.w	80056da <HAL_SPI_Transmit+0x1c6>
 80055c8:	1c73      	adds	r3, r6, #1
 80055ca:	d02f      	beq.n	800562c <HAL_SPI_Transmit+0x118>
 80055cc:	2e00      	cmp	r6, #0
 80055ce:	d041      	beq.n	8005654 <HAL_SPI_Transmit+0x140>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 80055d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	b16b      	cbz	r3, 80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055d6:	6893      	ldr	r3, [r2, #8]
 80055d8:	079f      	lsls	r7, r3, #30
 80055da:	d44f      	bmi.n	800567c <HAL_SPI_Transmit+0x168>
        hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80055dc:	f7fa ff62 	bl	80004a4 <HAL_GetTick>
 80055e0:	ebc8 0000 	rsb	r0, r8, r0
 80055e4:	4286      	cmp	r6, r0
 80055e6:	d976      	bls.n	80056d6 <HAL_SPI_Transmit+0x1c2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 80055e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f1      	bne.n	80055d6 <HAL_SPI_Transmit+0xc2>
 80055f2:	1c73      	adds	r3, r6, #1
 80055f4:	d14b      	bne.n	800568e <HAL_SPI_Transmit+0x17a>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80055f6:	6893      	ldr	r3, [r2, #8]
 80055f8:	079f      	lsls	r7, r3, #30
 80055fa:	d5fc      	bpl.n	80055f6 <HAL_SPI_Transmit+0xe2>
 80055fc:	1c70      	adds	r0, r6, #1
 80055fe:	f040 80d4 	bne.w	80057aa <HAL_SPI_Transmit+0x296>
 8005602:	6893      	ldr	r3, [r2, #8]
 8005604:	0619      	lsls	r1, r3, #24
 8005606:	d4fc      	bmi.n	8005602 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    goto error;
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	b92b      	cbnz	r3, 8005618 <HAL_SPI_Transmit+0x104>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	68d3      	ldr	r3, [r2, #12]
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	6893      	ldr	r3, [r2, #8]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	9b01      	ldr	r3, [sp, #4]
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800561a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561e:	f000 80ef 	beq.w	8005800 <HAL_SPI_Transmit+0x2ec>
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005622:	6d60      	ldr	r0, [r4, #84]	; 0x54
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8005624:	3000      	adds	r0, #0
 8005626:	bf18      	it	ne
 8005628:	2001      	movne	r0, #1
 800562a:	e78e      	b.n	800554a <HAL_SPI_Transmit+0x36>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 800562c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800562e:	b29b      	uxth	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0de      	beq.n	80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005634:	6893      	ldr	r3, [r2, #8]
 8005636:	0798      	lsls	r0, r3, #30
 8005638:	d5f8      	bpl.n	800562c <HAL_SPI_Transmit+0x118>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800563a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800563e:	7313      	strb	r3, [r2, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 8005640:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	3b01      	subs	r3, #1
 8005646:	b29b      	uxth	r3, r3
 8005648:	86e3      	strh	r3, [r4, #54]	; 0x36
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 800564a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_SPI_Transmit+0x120>
 8005652:	e7ce      	b.n	80055f2 <HAL_SPI_Transmit+0xde>
 8005654:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0ca      	beq.n	80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800565c:	6893      	ldr	r3, [r2, #8]
 800565e:	0799      	lsls	r1, r3, #30
 8005660:	d539      	bpl.n	80056d6 <HAL_SPI_Transmit+0x1c2>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8005662:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005666:	7313      	strb	r3, [r2, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 8005668:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	3b01      	subs	r3, #1
 800566e:	b29b      	uxth	r3, r3
 8005670:	86e3      	strh	r3, [r4, #54]	; 0x36
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 8005672:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_SPI_Transmit+0x148>
 800567a:	e7ba      	b.n	80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800567c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005680:	7313      	strb	r3, [r2, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 8005682:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	3b01      	subs	r3, #1
 8005688:	b29b      	uxth	r3, r3
 800568a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800568c:	e7a0      	b.n	80055d0 <HAL_SPI_Transmit+0xbc>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800568e:	6893      	ldr	r3, [r2, #8]
 8005690:	079d      	lsls	r5, r3, #30
 8005692:	d4b3      	bmi.n	80055fc <HAL_SPI_Transmit+0xe8>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005694:	b136      	cbz	r6, 80056a4 <HAL_SPI_Transmit+0x190>
 8005696:	f7fa ff05 	bl	80004a4 <HAL_GetTick>
 800569a:	ebc8 0000 	rsb	r0, r8, r0
 800569e:	4286      	cmp	r6, r0
 80056a0:	6822      	ldr	r2, [r4, #0]
 80056a2:	d8a6      	bhi.n	80055f2 <HAL_SPI_Transmit+0xde>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056a4:	6853      	ldr	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a6:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056a8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b0:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056b2:	f000 80aa 	beq.w	800580a <HAL_SPI_Transmit+0x2f6>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056bc:	d108      	bne.n	80056d0 <HAL_SPI_Transmit+0x1bc>
        {
          SPI_RESET_CRC(hspi);
 80056be:	6811      	ldr	r1, [r2, #0]
 80056c0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80056c4:	400b      	ands	r3, r1
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	6813      	ldr	r3, [r2, #0]
 80056ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056ce:	6013      	str	r3, [r2, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_TIMEOUT;
 80056d6:	2003      	movs	r0, #3
 80056d8:	e737      	b.n	800554a <HAL_SPI_Transmit+0x36>
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80056da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056de:	7313      	strb	r3, [r2, #12]
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
 80056e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80056ea:	e76d      	b.n	80055c8 <HAL_SPI_Transmit+0xb4>
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d054      	beq.n	800579a <HAL_SPI_Transmit+0x286>
 80056f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d050      	beq.n	800579a <HAL_SPI_Transmit+0x286>
 80056f8:	1c73      	adds	r3, r6, #1
 80056fa:	d014      	beq.n	8005726 <HAL_SPI_Transmit+0x212>
 80056fc:	b33e      	cbz	r6, 800574e <HAL_SPI_Transmit+0x23a>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	f43f af75 	beq.w	80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005708:	6893      	ldr	r3, [r2, #8]
 800570a:	079f      	lsls	r7, r3, #30
 800570c:	d433      	bmi.n	8005776 <HAL_SPI_Transmit+0x262>
          hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800570e:	f7fa fec9 	bl	80004a4 <HAL_GetTick>
 8005712:	ebc8 0000 	rsb	r0, r8, r0
 8005716:	4286      	cmp	r6, r0
 8005718:	d9dd      	bls.n	80056d6 <HAL_SPI_Transmit+0x1c2>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800571a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f1      	bne.n	8005708 <HAL_SPI_Transmit+0x1f4>
 8005724:	e765      	b.n	80055f2 <HAL_SPI_Transmit+0xde>
 8005726:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	f43f af61 	beq.w	80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005730:	6893      	ldr	r3, [r2, #8]
 8005732:	0798      	lsls	r0, r3, #30
 8005734:	d5f7      	bpl.n	8005726 <HAL_SPI_Transmit+0x212>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8005736:	f835 3b02 	ldrh.w	r3, [r5], #2
 800573a:	60d3      	str	r3, [r2, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 800573c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800573e:	3b01      	subs	r3, #1
 8005740:	b29b      	uxth	r3, r3
 8005742:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005744:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f1      	bne.n	8005730 <HAL_SPI_Transmit+0x21c>
 800574c:	e751      	b.n	80055f2 <HAL_SPI_Transmit+0xde>
 800574e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	f43f af4d 	beq.w	80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005758:	6893      	ldr	r3, [r2, #8]
 800575a:	0799      	lsls	r1, r3, #30
 800575c:	d5bb      	bpl.n	80056d6 <HAL_SPI_Transmit+0x1c2>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800575e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005762:	60d3      	str	r3, [r2, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 8005764:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005766:	3b01      	subs	r3, #1
 8005768:	b29b      	uxth	r3, r3
 800576a:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800576c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f1      	bne.n	8005758 <HAL_SPI_Transmit+0x244>
 8005774:	e73d      	b.n	80055f2 <HAL_SPI_Transmit+0xde>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8005776:	f835 3b02 	ldrh.w	r3, [r5], #2
 800577a:	60d3      	str	r3, [r2, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 800577c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800577e:	3b01      	subs	r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005784:	e7bb      	b.n	80056fe <HAL_SPI_Transmit+0x1ea>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8005786:	6811      	ldr	r1, [r2, #0]
 8005788:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800578c:	400b      	ands	r3, r1
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	6813      	ldr	r3, [r2, #0]
 8005792:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e701      	b.n	800559e <HAL_SPI_Transmit+0x8a>
  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800579a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800579e:	60d3      	str	r3, [r2, #12]
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
 80057a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80057a8:	e7a6      	b.n	80056f8 <HAL_SPI_Transmit+0x1e4>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80057aa:	6893      	ldr	r3, [r2, #8]
 80057ac:	061b      	lsls	r3, r3, #24
 80057ae:	f57f af2b 	bpl.w	8005608 <HAL_SPI_Transmit+0xf4>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80057b2:	b13e      	cbz	r6, 80057c4 <HAL_SPI_Transmit+0x2b0>
 80057b4:	f7fa fe76 	bl	80004a4 <HAL_GetTick>
 80057b8:	ebc8 0000 	rsb	r0, r8, r0
 80057bc:	4286      	cmp	r6, r0
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	f63f af1c 	bhi.w	80055fc <HAL_SPI_Transmit+0xe8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c4:	6853      	ldr	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c6:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057cc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057d0:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057d2:	d027      	beq.n	8005824 <HAL_SPI_Transmit+0x310>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057da:	d108      	bne.n	80057ee <HAL_SPI_Transmit+0x2da>
        {
          SPI_RESET_CRC(hspi);
 80057dc:	6811      	ldr	r1, [r2, #0]
 80057de:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80057e2:	400b      	ands	r3, r1
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057ec:	6013      	str	r3, [r2, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80057ee:	2001      	movs	r0, #1
 80057f0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f6:	2220      	movs	r2, #32
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f8:	4313      	orrs	r3, r2
 80057fa:	6563      	str	r3, [r4, #84]	; 0x54
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057fc:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 80057fe:	e6a4      	b.n	800554a <HAL_SPI_Transmit+0x36>
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005800:	6813      	ldr	r3, [r2, #0]
 8005802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e70b      	b.n	8005622 <HAL_SPI_Transmit+0x10e>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800580a:	68a3      	ldr	r3, [r4, #8]
 800580c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005810:	d003      	beq.n	800581a <HAL_SPI_Transmit+0x306>
 8005812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005816:	f47f af4e 	bne.w	80056b6 <HAL_SPI_Transmit+0x1a2>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800581a:	6813      	ldr	r3, [r2, #0]
 800581c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e748      	b.n	80056b6 <HAL_SPI_Transmit+0x1a2>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005824:	68a3      	ldr	r3, [r4, #8]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Transmit+0x31e>
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005830:	d1d0      	bne.n	80057d4 <HAL_SPI_Transmit+0x2c0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e7cb      	b.n	80057d4 <HAL_SPI_Transmit+0x2c0>

0800583c <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800583c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005840:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005842:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b083      	sub	sp, #12
  uint32_t tmp = 0U, tmp1 = 0U;
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8005848:	2500      	movs	r5, #0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800584a:	2801      	cmp	r0, #1
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tmp = 0U, tmp1 = 0U;
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 800584c:	f8ad 5002 	strh.w	r5, [sp, #2]
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8005850:	9e0a      	ldr	r6, [sp, #40]	; 0x28

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005852:	d103      	bne.n	800585c <HAL_SPI_TransmitReceive+0x20>
 8005854:	2002      	movs	r0, #2
  
error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8005856:	b003      	add	sp, #12
 8005858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800585c:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800585e:	2201      	movs	r2, #1
 8005860:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8005864:	460d      	mov	r5, r1
 8005866:	4699      	mov	r9, r3

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005868:	f7fa fe1c 	bl	80004a4 <HAL_GetTick>
  
  tmp  = hspi->State;
 800586c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8005870:	6861      	ldr	r1, [r4, #4]
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
  
  tmp  = hspi->State;
 8005872:	b2d2      	uxtb	r2, r2
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8005874:	2a01      	cmp	r2, #1

  /* Process Locked */
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005876:	4607      	mov	r7, r0
  
  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8005878:	d012      	beq.n	80058a0 <HAL_SPI_TransmitReceive+0x64>
 800587a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800587e:	d00a      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x5a>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005880:	2502      	movs	r5, #2
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8005882:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005884:	2300      	movs	r3, #0
  return errorcode;
 8005886:	4628      	mov	r0, r5
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8005888:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800588c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 8005890:	b003      	add	sp, #12
 8005892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  
  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f1      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x44>
 800589c:	2a04      	cmp	r2, #4
 800589e:	d1ef      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x44>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	d076      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x156>
 80058a4:	f1b8 0f00 	cmp.w	r8, #0
 80058a8:	d073      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x156>
 80058aa:	f1b9 0f00 	cmp.w	r9, #0
 80058ae:	d070      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x156>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80058b0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058b4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80058b8:	2b01      	cmp	r3, #1
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058ba:	bf04      	itt	eq
 80058bc:	2305      	moveq	r3, #5
 80058be:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
 80058c4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c8:	2200      	movs	r2, #0
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ce:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058d0:	6325      	str	r5, [r4, #48]	; 0x30
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 80058d2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;
 80058d6:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058da:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058dc:	6462      	str	r2, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
 80058de:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 80058e2:	6823      	ldr	r3, [r4, #0]
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058e4:	f000 80d2 	beq.w	8005a8c <HAL_SPI_TransmitReceive+0x250>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	0650      	lsls	r0, r2, #25
 80058ec:	d403      	bmi.n	80058f6 <HAL_SPI_TransmitReceive+0xba>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058f6:	68e2      	ldr	r2, [r4, #12]
 80058f8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80058fc:	d04b      	beq.n	8005996 <HAL_SPI_TransmitReceive+0x15a>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80058fe:	2900      	cmp	r1, #0
 8005900:	f000 8097 	beq.w	8005a32 <HAL_SPI_TransmitReceive+0x1f6>
 8005904:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005906:	b292      	uxth	r2, r2
 8005908:	2a01      	cmp	r2, #1
 800590a:	f000 8092 	beq.w	8005a32 <HAL_SPI_TransmitReceive+0x1f6>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800590e:	f04f 0901 	mov.w	r9, #1
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005912:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005914:	b29b      	uxth	r3, r3
 8005916:	b91b      	cbnz	r3, 8005920 <HAL_SPI_TransmitReceive+0xe4>
 8005918:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d04c      	beq.n	80059ba <HAL_SPI_TransmitReceive+0x17e>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005920:	f1b9 0f00 	cmp.w	r9, #0
 8005924:	d01a      	beq.n	800595c <HAL_SPI_TransmitReceive+0x120>
 8005926:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d07b      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x1ea>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	0791      	lsls	r1, r2, #30
 8005934:	d577      	bpl.n	8005a26 <HAL_SPI_TransmitReceive+0x1ea>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005936:	782a      	ldrb	r2, [r5, #0]
 8005938:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800593a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800593c:	3b01      	subs	r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	86e3      	strh	r3, [r4, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005942:	f8b4 9036 	ldrh.w	r9, [r4, #54]	; 0x36
 8005946:	fa1f f389 	uxth.w	r3, r9
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800594a:	3501      	adds	r5, #1
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800594c:	2b00      	cmp	r3, #0
 800594e:	d16d      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x1f0>
 8005950:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005952:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005956:	f000 80df 	beq.w	8005b18 <HAL_SPI_TransmitReceive+0x2dc>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800595a:	4699      	mov	r9, r3
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800595c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800595e:	b29b      	uxth	r3, r3
 8005960:	b173      	cbz	r3, 8005980 <HAL_SPI_TransmitReceive+0x144>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	07d2      	lsls	r2, r2, #31
 8005968:	d50a      	bpl.n	8005980 <HAL_SPI_TransmitReceive+0x144>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f888 3000 	strb.w	r3, [r8]
        hspi->RxXferCount--;
 8005970:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005972:	3b01      	subs	r3, #1
 8005974:	b29b      	uxth	r3, r3
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8005976:	f108 0801 	add.w	r8, r8, #1
        hspi->RxXferCount--;
 800597a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800597c:	f04f 0901 	mov.w	r9, #1
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005980:	1c70      	adds	r0, r6, #1
 8005982:	d0c6      	beq.n	8005912 <HAL_SPI_TransmitReceive+0xd6>
 8005984:	f7fa fd8e 	bl	80004a4 <HAL_GetTick>
 8005988:	1bc0      	subs	r0, r0, r7
 800598a:	4286      	cmp	r6, r0
 800598c:	d8c1      	bhi.n	8005912 <HAL_SPI_TransmitReceive+0xd6>
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      errorcode = HAL_TIMEOUT;
 800598e:	2503      	movs	r5, #3
      goto error;
 8005990:	e777      	b.n	8005882 <HAL_SPI_TransmitReceive+0x46>
    goto error;
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 8005992:	2501      	movs	r5, #1
 8005994:	e775      	b.n	8005882 <HAL_SPI_TransmitReceive+0x46>
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005996:	2900      	cmp	r1, #0
 8005998:	f000 80c7 	beq.w	8005b2a <HAL_SPI_TransmitReceive+0x2ee>
 800599c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800599e:	b292      	uxth	r2, r2
 80059a0:	2a01      	cmp	r2, #1
 80059a2:	f000 80c2 	beq.w	8005b2a <HAL_SPI_TransmitReceive+0x2ee>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80059a6:	f04f 0901 	mov.w	r9, #1
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d176      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x264>
 80059b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d172      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x264>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c0:	d023      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x1ce>
 80059c2:	6822      	ldr	r2, [r4, #0]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80059c4:	6890      	ldr	r0, [r2, #8]
 80059c6:	f010 0010 	ands.w	r0, r0, #16
 80059ca:	f000 80ac 	beq.w	8005b26 <HAL_SPI_TransmitReceive+0x2ea>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80059ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80059d0:	f64f 71ef 	movw	r1, #65519	; 0xffef
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	6563      	str	r3, [r4, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);

    errorcode = HAL_ERROR;
 80059da:	2501      	movs	r5, #1
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80059dc:	6091      	str	r1, [r2, #8]
 80059de:	1c70      	adds	r0, r6, #1
 80059e0:	d12f      	bne.n	8005a42 <HAL_SPI_TransmitReceive+0x206>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80059e2:	6893      	ldr	r3, [r2, #8]
 80059e4:	0799      	lsls	r1, r3, #30
 80059e6:	d5fc      	bpl.n	80059e2 <HAL_SPI_TransmitReceive+0x1a6>
 80059e8:	1c70      	adds	r0, r6, #1
 80059ea:	f040 80a6 	bne.w	8005b3a <HAL_SPI_TransmitReceive+0x2fe>
 80059ee:	6893      	ldr	r3, [r2, #8]
 80059f0:	0619      	lsls	r1, r3, #24
 80059f2:	d4fc      	bmi.n	80059ee <HAL_SPI_TransmitReceive+0x1b2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    goto error;
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059f4:	68a3      	ldr	r3, [r4, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f47f af43 	bne.w	8005882 <HAL_SPI_TransmitReceive+0x46>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	68d3      	ldr	r3, [r2, #12]
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	6893      	ldr	r3, [r2, #8]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	e73b      	b.n	8005882 <HAL_SPI_TransmitReceive+0x46>
 8005a0a:	1c71      	adds	r1, r6, #1
 8005a0c:	6822      	ldr	r2, [r4, #0]
 8005a0e:	f040 80c5 	bne.w	8005b9c <HAL_SPI_TransmitReceive+0x360>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005a12:	6893      	ldr	r3, [r2, #8]
 8005a14:	07db      	lsls	r3, r3, #31
 8005a16:	d5fc      	bpl.n	8005a12 <HAL_SPI_TransmitReceive+0x1d6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      errorcode = HAL_TIMEOUT;
      goto error;
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8005a18:	68d3      	ldr	r3, [r2, #12]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f8ad 3002 	strh.w	r3, [sp, #2]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8005a20:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005a24:	e7ce      	b.n	80059c4 <HAL_SPI_TransmitReceive+0x188>
 8005a26:	f04f 0901 	mov.w	r9, #1
 8005a2a:	e797      	b.n	800595c <HAL_SPI_TransmitReceive+0x120>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005a2c:	f04f 0900 	mov.w	r9, #0
 8005a30:	e794      	b.n	800595c <HAL_SPI_TransmitReceive+0x120>
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8005a32:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005a36:	731a      	strb	r2, [r3, #12]
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
 8005a38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005a40:	e765      	b.n	800590e <HAL_SPI_TransmitReceive+0xd2>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005a42:	6893      	ldr	r3, [r2, #8]
 8005a44:	079b      	lsls	r3, r3, #30
 8005a46:	d4cf      	bmi.n	80059e8 <HAL_SPI_TransmitReceive+0x1ac>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005a48:	b12e      	cbz	r6, 8005a56 <HAL_SPI_TransmitReceive+0x21a>
 8005a4a:	f7fa fd2b 	bl	80004a4 <HAL_GetTick>
 8005a4e:	1bc0      	subs	r0, r0, r7
 8005a50:	4286      	cmp	r6, r0
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	d8c3      	bhi.n	80059de <HAL_SPI_TransmitReceive+0x1a2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a56:	6853      	ldr	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a58:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a5a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a5e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a62:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a64:	f000 80c3 	beq.w	8005bee <HAL_SPI_TransmitReceive+0x3b2>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6e:	d108      	bne.n	8005a82 <HAL_SPI_TransmitReceive+0x246>
        {
          SPI_RESET_CRC(hspi);
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005a76:	400b      	ands	r3, r1
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a80:	6013      	str	r3, [r2, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_TIMEOUT;
 8005a88:	2503      	movs	r5, #3
 8005a8a:	e6fa      	b.n	8005882 <HAL_SPI_TransmitReceive+0x46>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8005a92:	4002      	ands	r2, r0
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e723      	b.n	80058e8 <HAL_SPI_TransmitReceive+0xac>
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005aa0:	f1b9 0f00 	cmp.w	r9, #0
 8005aa4:	d018      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x29c>
 8005aa6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02e      	beq.n	8005b0c <HAL_SPI_TransmitReceive+0x2d0>
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	6893      	ldr	r3, [r2, #8]
 8005ab2:	0799      	lsls	r1, r3, #30
 8005ab4:	d52a      	bpl.n	8005b0c <HAL_SPI_TransmitReceive+0x2d0>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005ab6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005aba:	60d3      	str	r3, [r2, #12]
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
 8005abc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	86e3      	strh	r3, [r4, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005ac4:	f8b4 9036 	ldrh.w	r9, [r4, #54]	; 0x36
 8005ac8:	fa1f f389 	uxth.w	r3, r9
 8005acc:	bb0b      	cbnz	r3, 8005b12 <HAL_SPI_TransmitReceive+0x2d6>
 8005ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ad0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005ad4:	d05c      	beq.n	8005b90 <HAL_SPI_TransmitReceive+0x354>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005ad6:	4699      	mov	r9, r3
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005ad8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b163      	cbz	r3, 8005af8 <HAL_SPI_TransmitReceive+0x2bc>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	07d2      	lsls	r2, r2, #31
 8005ae4:	d508      	bpl.n	8005af8 <HAL_SPI_TransmitReceive+0x2bc>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f828 3b02 	strh.w	r3, [r8], #2
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
 8005aec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005af4:	f04f 0901 	mov.w	r9, #1
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005af8:	1c70      	adds	r0, r6, #1
 8005afa:	f43f af56 	beq.w	80059aa <HAL_SPI_TransmitReceive+0x16e>
 8005afe:	f7fa fcd1 	bl	80004a4 <HAL_GetTick>
 8005b02:	1bc0      	subs	r0, r0, r7
 8005b04:	4286      	cmp	r6, r0
 8005b06:	f63f af50 	bhi.w	80059aa <HAL_SPI_TransmitReceive+0x16e>
 8005b0a:	e740      	b.n	800598e <HAL_SPI_TransmitReceive+0x152>
 8005b0c:	f04f 0901 	mov.w	r9, #1
 8005b10:	e7e2      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x29c>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005b12:	f04f 0900 	mov.w	r9, #0
 8005b16:	e7df      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x29c>

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b18:	6821      	ldr	r1, [r4, #0]
 8005b1a:	680a      	ldr	r2, [r1, #0]
 8005b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005b20:	4699      	mov	r9, r3

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b22:	600a      	str	r2, [r1, #0]
 8005b24:	e71a      	b.n	800595c <HAL_SPI_TransmitReceive+0x120>
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b26:	4605      	mov	r5, r0
 8005b28:	e759      	b.n	80059de <HAL_SPI_TransmitReceive+0x1a2>
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8005b2a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005b2e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
 8005b30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005b38:	e735      	b.n	80059a6 <HAL_SPI_TransmitReceive+0x16a>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005b3a:	6893      	ldr	r3, [r2, #8]
 8005b3c:	061b      	lsls	r3, r3, #24
 8005b3e:	f57f af59 	bpl.w	80059f4 <HAL_SPI_TransmitReceive+0x1b8>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005b42:	b136      	cbz	r6, 8005b52 <HAL_SPI_TransmitReceive+0x316>
 8005b44:	f7fa fcae 	bl	80004a4 <HAL_GetTick>
 8005b48:	1bc0      	subs	r0, r0, r7
 8005b4a:	4286      	cmp	r6, r0
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	f63f af4b 	bhi.w	80059e8 <HAL_SPI_TransmitReceive+0x1ac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b52:	6853      	ldr	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b54:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b56:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b5a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b5e:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b60:	d052      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x3cc>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b68:	d108      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x340>
        {
          SPI_RESET_CRC(hspi);
 8005b6a:	6811      	ldr	r1, [r2, #0]
 8005b6c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005b70:	400b      	ands	r3, r1
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	6813      	ldr	r3, [r2, #0]
 8005b76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b7a:	6013      	str	r3, [r2, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b84:	2220      	movs	r2, #32
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b86:	4313      	orrs	r3, r2
 8005b88:	6563      	str	r3, [r4, #84]	; 0x54
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
 8005b8a:	4605      	mov	r5, r0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8c:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8005b8e:	e678      	b.n	8005882 <HAL_SPI_TransmitReceive+0x46>

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005b96:	4699      	mov	r9, r3

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b98:	6011      	str	r1, [r2, #0]
 8005b9a:	e79d      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x29c>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005b9c:	6893      	ldr	r3, [r2, #8]
 8005b9e:	07dd      	lsls	r5, r3, #31
 8005ba0:	f53f af3a 	bmi.w	8005a18 <HAL_SPI_TransmitReceive+0x1dc>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005ba4:	b136      	cbz	r6, 8005bb4 <HAL_SPI_TransmitReceive+0x378>
 8005ba6:	f7fa fc7d 	bl	80004a4 <HAL_GetTick>
 8005baa:	1bc0      	subs	r0, r0, r7
 8005bac:	4286      	cmp	r6, r0
 8005bae:	f63f af2c 	bhi.w	8005a0a <HAL_SPI_TransmitReceive+0x1ce>
 8005bb2:	6822      	ldr	r2, [r4, #0]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb4:	6853      	ldr	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb6:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bbc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc0:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bc2:	d02d      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x3e4>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bca:	d108      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x3a2>
        {
          SPI_RESET_CRC(hspi);
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005bd2:	400b      	ands	r3, r1
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bdc:	6013      	str	r3, [r2, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005be6:	f043 0302 	orr.w	r3, r3, #2
 8005bea:	6563      	str	r3, [r4, #84]	; 0x54
 8005bec:	e6cf      	b.n	800598e <HAL_SPI_TransmitReceive+0x152>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bee:	68a3      	ldr	r3, [r4, #8]
 8005bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf4:	d003      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x3c2>
 8005bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfa:	f47f af35 	bne.w	8005a68 <HAL_SPI_TransmitReceive+0x22c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e72f      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x22c>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c08:	68a3      	ldr	r3, [r4, #8]
 8005c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0e:	d002      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x3da>
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c14:	d1a5      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x326>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c16:	6813      	ldr	r3, [r2, #0]
 8005c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e7a0      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x326>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c20:	68a3      	ldr	r3, [r4, #8]
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	d002      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x3f2>
 8005c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2c:	d1ca      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x388>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e7c5      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x388>

08005c38 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c3c:	6845      	ldr	r5, [r0, #4]
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3e:	b084      	sub	sp, #16
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
 8005c40:	2600      	movs	r6, #0
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c42:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
 8005c46:	f8ad 600e 	strh.w	r6, [sp, #14]
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	461f      	mov	r7, r3
 8005c50:	460e      	mov	r6, r1
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c52:	d01c      	beq.n	8005c8e <HAL_SPI_Receive+0x56>
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c54:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8005c58:	2901      	cmp	r1, #1
 8005c5a:	d103      	bne.n	8005c64 <HAL_SPI_Receive+0x2c>
 8005c5c:	2002      	movs	r0, #2

error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8005c5e:	b004      	add	sp, #16
 8005c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c64:	2301      	movs	r3, #1
 8005c66:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c6a:	f7fa fc1b 	bl	80004a4 <HAL_GetTick>
 8005c6e:	4605      	mov	r5, r0

  if(hspi->State != HAL_SPI_STATE_READY)
 8005c70:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005c74:	b2c0      	uxtb	r0, r0
 8005c76:	2801      	cmp	r0, #1
 8005c78:	d015      	beq.n	8005ca6 <HAL_SPI_Receive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c7a:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005c7c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005c7e:	2300      	movs	r3, #0
  {
    errorcode = HAL_ERROR;
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005c80:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c84:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 8005c88:	b004      	add	sp, #16
 8005c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c8e:	6883      	ldr	r3, [r0, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1df      	bne.n	8005c54 <HAL_SPI_Receive+0x1c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c94:	2504      	movs	r5, #4
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8005c96:	9700      	str	r7, [sp, #0]
 8005c98:	460a      	mov	r2, r1
 8005c9a:	4643      	mov	r3, r8
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c9c:	f880 5051 	strb.w	r5, [r0, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8005ca0:	f7ff fdcc 	bl	800583c <HAL_SPI_TransmitReceive>
 8005ca4:	e7db      	b.n	8005c5e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL ) || (Size == 0U))
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d0e8      	beq.n	8005c7c <HAL_SPI_Receive+0x44>
 8005caa:	f1b8 0f00 	cmp.w	r8, #0
 8005cae:	d0e5      	beq.n	8005c7c <HAL_SPI_Receive+0x44>
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cb2:	63a6      	str	r6, [r4, #56]	; 0x38
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb4:	2300      	movs	r3, #0
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cb6:	2204      	movs	r2, #4
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cb8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cbc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
 8005cc0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cc6:	6323      	str	r3, [r4, #48]	; 0x30
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 8005cc8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
  hspi->TxXferSize  = 0U;
 8005ccc:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
  hspi->RxISR       = NULL;
 8005cce:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cd0:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
  hspi->TxXferSize  = 0U;
  hspi->TxXferCount = 0U;
 8005cd2:	86e3      	strh	r3, [r4, #54]	; 0x36

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8005cd4:	6822      	ldr	r2, [r4, #0]
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd6:	f000 80d7 	beq.w	8005e88 <HAL_SPI_Receive+0x250>
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce0:	f000 80cd 	beq.w	8005e7e <HAL_SPI_Receive+0x246>
  {
    SPI_1LINE_RX(hspi);
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	065b      	lsls	r3, r3, #25
 8005ce8:	d403      	bmi.n	8005cf2 <HAL_SPI_Receive+0xba>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	6013      	str	r3, [r2, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05b      	beq.n	8005db0 <HAL_SPI_Receive+0x178>
 8005cf8:	1c78      	adds	r0, r7, #1
 8005cfa:	d02b      	beq.n	8005d54 <HAL_SPI_Receive+0x11c>
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	d03c      	beq.n	8005d7a <HAL_SPI_Receive+0x142>
    }
  }
  else
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005d00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	b16b      	cbz	r3, 8005d22 <HAL_SPI_Receive+0xea>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d06:	6893      	ldr	r3, [r2, #8]
 8005d08:	07db      	lsls	r3, r3, #31
 8005d0a:	d449      	bmi.n	8005da0 <HAL_SPI_Receive+0x168>
        hspi->RxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005d0c:	f7fa fbca 	bl	80004a4 <HAL_GetTick>
 8005d10:	1b40      	subs	r0, r0, r5
 8005d12:	4287      	cmp	r7, r0
 8005d14:	f240 80b1 	bls.w	8005e7a <HAL_SPI_Receive+0x242>
    }
  }
  else
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005d18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f1      	bne.n	8005d06 <HAL_SPI_Receive+0xce>
 8005d22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d24:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005d28:	f000 80c9 	beq.w	8005ebe <HAL_SPI_Receive+0x286>
    /* To avoid GCC warning */
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d2c:	6863      	ldr	r3, [r4, #4]
 8005d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d32:	f000 80b7 	beq.w	8005ea4 <HAL_SPI_Receive+0x26c>
    __HAL_SPI_DISABLE(hspi);
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005d36:	6893      	ldr	r3, [r2, #8]
 8005d38:	06db      	lsls	r3, r3, #27
 8005d3a:	d506      	bpl.n	8005d4a <HAL_SPI_Receive+0x112>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005d3e:	f64f 71ef 	movw	r1, #65519	; 0xffef

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005d42:	f043 0302 	orr.w	r3, r3, #2
 8005d46:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005d48:	6091      	str	r1, [r2, #8]
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8005d4c:	3000      	adds	r0, #0
 8005d4e:	bf18      	it	ne
 8005d50:	2001      	movne	r0, #1
 8005d52:	e793      	b.n	8005c7c <HAL_SPI_Receive+0x44>
    }
  }
  else
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005d54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0e3      	beq.n	8005d24 <HAL_SPI_Receive+0xec>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d5c:	6893      	ldr	r3, [r2, #8]
 8005d5e:	07d8      	lsls	r0, r3, #31
 8005d60:	d5f8      	bpl.n	8005d54 <HAL_SPI_Receive+0x11c>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8005d62:	68d3      	ldr	r3, [r2, #12]
 8005d64:	f826 3b02 	strh.w	r3, [r6], #2
        pData += sizeof(uint16_t);
        hspi->RxXferCount--;
 8005d68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    }
  }
  else
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005d70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f1      	bne.n	8005d5c <HAL_SPI_Receive+0x124>
 8005d78:	e7d4      	b.n	8005d24 <HAL_SPI_Receive+0xec>
 8005d7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0d0      	beq.n	8005d24 <HAL_SPI_Receive+0xec>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d82:	6893      	ldr	r3, [r2, #8]
 8005d84:	07db      	lsls	r3, r3, #31
 8005d86:	d578      	bpl.n	8005e7a <HAL_SPI_Receive+0x242>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8005d88:	68d3      	ldr	r3, [r2, #12]
 8005d8a:	f826 3b02 	strh.w	r3, [r6], #2
        pData += sizeof(uint16_t);
        hspi->RxXferCount--;
 8005d8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	87e3      	strh	r3, [r4, #62]	; 0x3e
    }
  }
  else
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005d96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f1      	bne.n	8005d82 <HAL_SPI_Receive+0x14a>
 8005d9e:	e7c1      	b.n	8005d24 <HAL_SPI_Receive+0xec>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8005da0:	68d3      	ldr	r3, [r2, #12]
 8005da2:	f826 3b02 	strh.w	r3, [r6], #2
        pData += sizeof(uint16_t);
        hspi->RxXferCount--;
 8005da6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005dae:	e7a7      	b.n	8005d00 <HAL_SPI_Receive+0xc8>
 8005db0:	1c79      	adds	r1, r7, #1
 8005db2:	d013      	beq.n	8005ddc <HAL_SPI_Receive+0x1a4>
 8005db4:	2f00      	cmp	r7, #0
 8005db6:	d025      	beq.n	8005e04 <HAL_SPI_Receive+0x1cc>

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005db8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0b0      	beq.n	8005d22 <HAL_SPI_Receive+0xea>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dc0:	6893      	ldr	r3, [r2, #8]
 8005dc2:	07db      	lsls	r3, r3, #31
 8005dc4:	d432      	bmi.n	8005e2c <HAL_SPI_Receive+0x1f4>
        hspi->RxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005dc6:	f7fa fb6d 	bl	80004a4 <HAL_GetTick>
 8005dca:	1b40      	subs	r0, r0, r5
 8005dcc:	4287      	cmp	r7, r0
 8005dce:	d954      	bls.n	8005e7a <HAL_SPI_Receive+0x242>

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005dd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f2      	bne.n	8005dc0 <HAL_SPI_Receive+0x188>
 8005dda:	e7a2      	b.n	8005d22 <HAL_SPI_Receive+0xea>
 8005ddc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d09e      	beq.n	8005d22 <HAL_SPI_Receive+0xea>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005de4:	6893      	ldr	r3, [r2, #8]
 8005de6:	07d8      	lsls	r0, r3, #31
 8005de8:	d5f8      	bpl.n	8005ddc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8005dea:	7b13      	ldrb	r3, [r2, #12]
 8005dec:	f806 3b01 	strb.w	r3, [r6], #1
        pData += sizeof(uint8_t);
        hspi->RxXferCount--;
 8005df0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	87e3      	strh	r3, [r4, #62]	; 0x3e

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005dfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_SPI_Receive+0x1ac>
 8005e02:	e78e      	b.n	8005d22 <HAL_SPI_Receive+0xea>
 8005e04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d08a      	beq.n	8005d22 <HAL_SPI_Receive+0xea>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e0c:	6893      	ldr	r3, [r2, #8]
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d533      	bpl.n	8005e7a <HAL_SPI_Receive+0x242>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8005e12:	7b13      	ldrb	r3, [r2, #12]
 8005e14:	f806 3b01 	strb.w	r3, [r6], #1
        pData += sizeof(uint8_t);
        hspi->RxXferCount--;
 8005e18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	87e3      	strh	r3, [r4, #62]	; 0x3e

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005e22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_SPI_Receive+0x1d4>
 8005e2a:	e77a      	b.n	8005d22 <HAL_SPI_Receive+0xea>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8005e2c:	7b13      	ldrb	r3, [r2, #12]
 8005e2e:	f806 3b01 	strb.w	r3, [r6], #1
        pData += sizeof(uint8_t);
        hspi->RxXferCount--;
 8005e32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e34:	6822      	ldr	r2, [r4, #0]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005e3c:	e7bc      	b.n	8005db8 <HAL_SPI_Receive+0x180>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005e3e:	6893      	ldr	r3, [r2, #8]
 8005e40:	07d9      	lsls	r1, r3, #31
 8005e42:	d451      	bmi.n	8005ee8 <HAL_SPI_Receive+0x2b0>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005e44:	b12f      	cbz	r7, 8005e52 <HAL_SPI_Receive+0x21a>
 8005e46:	f7fa fb2d 	bl	80004a4 <HAL_GetTick>
 8005e4a:	1b40      	subs	r0, r0, r5
 8005e4c:	4287      	cmp	r7, r0
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	d845      	bhi.n	8005ede <HAL_SPI_Receive+0x2a6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e52:	6853      	ldr	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e54:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e56:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e5a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e5e:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e60:	f000 8086 	beq.w	8005f70 <HAL_SPI_Receive+0x338>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	d077      	beq.n	8005f5c <HAL_SPI_Receive+0x324>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    }

    /* Wait the CRC data */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005e72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e74:	f043 0302 	orr.w	r3, r3, #2
 8005e78:	6563      	str	r3, [r4, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8005e7a:	2003      	movs	r0, #3
      goto error;
 8005e7c:	e6fe      	b.n	8005c7c <HAL_SPI_Receive+0x44>
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_RX(hspi);
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e72d      	b.n	8005ce4 <HAL_SPI_Receive+0xac>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8005e88:	6810      	ldr	r0, [r2, #0]
 8005e8a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005e8e:	4003      	ands	r3, r0
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e98:	6013      	str	r3, [r2, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005e9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005ea2:	e71a      	b.n	8005cda <HAL_SPI_Receive+0xa2>
    /* To avoid GCC warning */
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eaa:	d003      	beq.n	8005eb4 <HAL_SPI_Receive+0x27c>
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb0:	f47f af41 	bne.w	8005d36 <HAL_SPI_Receive+0xfe>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eb4:	6813      	ldr	r3, [r2, #0]
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	e73b      	b.n	8005d36 <HAL_SPI_Receive+0xfe>
#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	1c78      	adds	r0, r7, #1
 8005ec8:	d115      	bne.n	8005ef6 <HAL_SPI_Receive+0x2be>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005eca:	6893      	ldr	r3, [r2, #8]
 8005ecc:	07d9      	lsls	r1, r3, #31
 8005ece:	d5fc      	bpl.n	8005eca <HAL_SPI_Receive+0x292>
      errorcode = HAL_TIMEOUT;
      goto error;
    }

    /* Receive last data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ed0:	68e3      	ldr	r3, [r4, #12]
 8005ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed6:	d032      	beq.n	8005f3e <HAL_SPI_Receive+0x306>
      *((uint16_t*)pData) = hspi->Instance->DR;
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ed8:	7b13      	ldrb	r3, [r2, #12]
 8005eda:	7033      	strb	r3, [r6, #0]
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	1c7e      	adds	r6, r7, #1
 8005ee0:	d1ad      	bne.n	8005e3e <HAL_SPI_Receive+0x206>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005ee2:	6893      	ldr	r3, [r2, #8]
 8005ee4:	07d8      	lsls	r0, r3, #31
 8005ee6:	d5fc      	bpl.n	8005ee2 <HAL_SPI_Receive+0x2aa>
      errorcode = HAL_TIMEOUT;
      goto error;
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = hspi->Instance->DR;
 8005ee8:	68d3      	ldr	r3, [r2, #12]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8005ef0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005ef4:	e71a      	b.n	8005d2c <HAL_SPI_Receive+0xf4>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005ef6:	6893      	ldr	r3, [r2, #8]
 8005ef8:	07db      	lsls	r3, r3, #31
 8005efa:	d4e9      	bmi.n	8005ed0 <HAL_SPI_Receive+0x298>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005efc:	b12f      	cbz	r7, 8005f0a <HAL_SPI_Receive+0x2d2>
 8005efe:	f7fa fad1 	bl	80004a4 <HAL_GetTick>
 8005f02:	1b40      	subs	r0, r0, r5
 8005f04:	4287      	cmp	r7, r0
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	d8dd      	bhi.n	8005ec6 <HAL_SPI_Receive+0x28e>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f0a:	6853      	ldr	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f0c:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f0e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f12:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f16:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f18:	d014      	beq.n	8005f44 <HAL_SPI_Receive+0x30c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f20:	d108      	bne.n	8005f34 <HAL_SPI_Receive+0x2fc>
        {
          SPI_RESET_CRC(hspi);
 8005f22:	6811      	ldr	r1, [r2, #0]
 8005f24:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005f28:	400b      	ands	r3, r1
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	6813      	ldr	r3, [r2, #0]
 8005f2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f32:	6013      	str	r3, [r2, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

    /* Read the latest data */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005f3a:	2003      	movs	r0, #3
 8005f3c:	e69e      	b.n	8005c7c <HAL_SPI_Receive+0x44>
    }

    /* Receive last data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
    {
      *((uint16_t*)pData) = hspi->Instance->DR;
 8005f3e:	68d3      	ldr	r3, [r2, #12]
 8005f40:	8033      	strh	r3, [r6, #0]
 8005f42:	e7cc      	b.n	8005ede <HAL_SPI_Receive+0x2a6>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f44:	68a3      	ldr	r3, [r4, #8]
 8005f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_Receive+0x31a>
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f50:	d1e3      	bne.n	8005f1a <HAL_SPI_Receive+0x2e2>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e7de      	b.n	8005f1a <HAL_SPI_Receive+0x2e2>
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
        {
          SPI_RESET_CRC(hspi);
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005f62:	400b      	ands	r3, r1
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	6813      	ldr	r3, [r2, #0]
 8005f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e77d      	b.n	8005e6c <HAL_SPI_Receive+0x234>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f70:	68a3      	ldr	r3, [r4, #8]
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f76:	d003      	beq.n	8005f80 <HAL_SPI_Receive+0x348>
 8005f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7c:	f47f af72 	bne.w	8005e64 <HAL_SPI_Receive+0x22c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f80:	6813      	ldr	r3, [r2, #0]
 8005f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e76c      	b.n	8005e64 <HAL_SPI_Receive+0x22c>
 8005f8a:	bf00      	nop

08005f8c <HAL_SPI_Transmit_IT>:

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f8c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005f90:	2b01      	cmp	r3, #1
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005f92:	b4f0      	push	{r4, r5, r6, r7}
 8005f94:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f96:	d00f      	beq.n	8005fb8 <HAL_SPI_Transmit_IT+0x2c>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  if((pData == NULL) || (Size == 0U))
 8005f9e:	b129      	cbz	r1, 8005fac <HAL_SPI_Transmit_IT+0x20>
 8005fa0:	b122      	cbz	r2, 8005fac <HAL_SPI_Transmit_IT+0x20>
  {
    errorcode = HAL_ERROR;
    goto error;
  }

  if(hspi->State != HAL_SPI_STATE_READY)
 8005fa2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d009      	beq.n	8005fbe <HAL_SPI_Transmit_IT+0x32>
  {
    errorcode = HAL_BUSY;
 8005faa:	2302      	movs	r3, #2
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
  }

error :
  __HAL_UNLOCK(hspi);
 8005fac:	2200      	movs	r2, #0
  return errorcode;
 8005fae:	4618      	mov	r0, r3
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
  }

error :
  __HAL_UNLOCK(hspi);
 8005fb0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  return errorcode;
}
 8005fb4:	bcf0      	pop	{r4, r5, r6, r7}
 8005fb6:	4770      	bx	lr

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb8:	2002      	movs	r0, #2
  }

error :
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8005fba:	bcf0      	pop	{r4, r5, r6, r7}
 8005fbc:	4770      	bx	lr
  {
    hspi->TxISR = SPI_TxISR_16BIT;
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005fbe:	4823      	ldr	r0, [pc, #140]	; (800604c <HAL_SPI_Transmit_IT+0xc0>)
 8005fc0:	4f23      	ldr	r7, [pc, #140]	; (8006050 <HAL_SPI_Transmit_IT+0xc4>)
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc2:	68a5      	ldr	r5, [r4, #8]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fc4:	6321      	str	r1, [r4, #48]	; 0x30
  {
    hspi->TxISR = SPI_TxISR_16BIT;
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005fc6:	68e1      	ldr	r1, [r4, #12]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 8005fc8:	86a2      	strh	r2, [r4, #52]	; 0x34
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fca:	2300      	movs	r3, #0
  {
    hspi->TxISR = SPI_TxISR_16BIT;
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005fcc:	4299      	cmp	r1, r3
 8005fce:	bf14      	ite	ne
 8005fd0:	4601      	movne	r1, r0
 8005fd2:	4639      	moveq	r1, r7
    errorcode = HAL_BUSY;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fd4:	2603      	movs	r6, #3
  {
    hspi->TxISR = SPI_TxISR_8BIT;
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    errorcode = HAL_BUSY;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fda:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fde:	63a3      	str	r3, [r4, #56]	; 0x38
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 8005fe2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 8005fe4:	86e2      	strh	r2, [r4, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;
  hspi->RxISR       = NULL;
 8005fe6:	6423      	str	r3, [r4, #64]	; 0x40
 8005fe8:	6461      	str	r1, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;
 8005fea:	87e3      	strh	r3, [r4, #62]	; 0x3e
  {
    hspi->TxISR = SPI_TxISR_8BIT;
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fec:	d017      	beq.n	800601e <HAL_SPI_Transmit_IT+0x92>
    SPI_1LINE_TX(hspi);
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	d01b      	beq.n	8006030 <HAL_SPI_Transmit_IT+0xa4>
  {
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ff8:	b165      	cbz	r5, 8006014 <HAL_SPI_Transmit_IT+0x88>
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
  }
  else
  {
    /* Enable TXE and ERR interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005ffa:	6853      	ldr	r3, [r2, #4]
 8005ffc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8006000:	6053      	str	r3, [r2, #4]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006002:	6813      	ldr	r3, [r2, #0]
 8006004:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006008:	d11e      	bne.n	8006048 <HAL_SPI_Transmit_IT+0xbc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800600a:	6811      	ldr	r1, [r2, #0]
 800600c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006010:	6011      	str	r1, [r2, #0]
 8006012:	e7cb      	b.n	8005fac <HAL_SPI_Transmit_IT+0x20>
#endif /* USE_SPI_CRC */

  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
  {
    /* Enable TXE interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
 8006014:	6853      	ldr	r3, [r2, #4]
 8006016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601a:	6053      	str	r3, [r2, #4]
 800601c:	e7f1      	b.n	8006002 <HAL_SPI_Transmit_IT+0x76>
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 800601e:	6822      	ldr	r2, [r4, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006020:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 8006022:	6813      	ldr	r3, [r2, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006024:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 8006028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800602c:	6013      	str	r3, [r2, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800602e:	d1e4      	bne.n	8005ffa <HAL_SPI_Transmit_IT+0x6e>
  {
    SPI_RESET_CRC(hspi);
 8006030:	6811      	ldr	r1, [r2, #0]
 8006032:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8006036:	400b      	ands	r3, r1
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	6813      	ldr	r3, [r2, #0]
 800603c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006040:	6013      	str	r3, [r2, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006042:	2d00      	cmp	r5, #0
 8006044:	d1d9      	bne.n	8005ffa <HAL_SPI_Transmit_IT+0x6e>
 8006046:	e7e5      	b.n	8006014 <HAL_SPI_Transmit_IT+0x88>
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e7af      	b.n	8005fac <HAL_SPI_Transmit_IT+0x20>
 800604c:	0800680d 	stmdaeq	r0, {r0, r2, r3, fp, sp, lr}
 8006050:	080067d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, sp, lr}

08006054 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006054:	b4f0      	push	{r4, r5, r6, r7}
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006056:	6884      	ldr	r4, [r0, #8]
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006058:	4603      	mov	r3, r0
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800605a:	b91c      	cbnz	r4, 8006064 <HAL_SPI_Receive_IT+0x10>
 800605c:	6840      	ldr	r0, [r0, #4]
 800605e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8006062:	d014      	beq.n	800608e <HAL_SPI_Receive_IT+0x3a>
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006064:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 8006068:	2801      	cmp	r0, #1
 800606a:	d00d      	beq.n	8006088 <HAL_SPI_Receive_IT+0x34>

  if(hspi->State != HAL_SPI_STATE_READY)
 800606c:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006070:	2501      	movs	r5, #1

  if(hspi->State != HAL_SPI_STATE_READY)
 8006072:	b2c0      	uxtb	r0, r0
 8006074:	42a8      	cmp	r0, r5
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006076:	f883 5050 	strb.w	r5, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 800607a:	d04b      	beq.n	8006114 <HAL_SPI_Receive_IT+0xc0>
  {
    errorcode = HAL_BUSY;
 800607c:	2002      	movs	r0, #2
    __HAL_SPI_ENABLE(hspi);
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
}
 8006084:	bcf0      	pop	{r4, r5, r6, r7}
 8006086:	4770      	bx	lr

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006088:	2002      	movs	r0, #2

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 800608a:	bcf0      	pop	{r4, r5, r6, r7}
 800608c:	4770      	bx	lr

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800608e:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
{
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006092:	2404      	movs	r4, #4

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006094:	2801      	cmp	r0, #1
{
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006096:	f883 4051 	strb.w	r4, [r3, #81]	; 0x51

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800609a:	d0f5      	beq.n	8006088 <HAL_SPI_Receive_IT+0x34>

  tmp  = hspi->State;
 800609c:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80060a0:	2401      	movs	r4, #1

  tmp  = hspi->State;
 80060a2:	b2c0      	uxtb	r0, r0
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80060a4:	42a0      	cmp	r0, r4

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80060a6:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80060aa:	d001      	beq.n	80060b0 <HAL_SPI_Receive_IT+0x5c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80060ac:	2804      	cmp	r0, #4
 80060ae:	d1e5      	bne.n	800607c <HAL_SPI_Receive_IT+0x28>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d06d      	beq.n	8006190 <HAL_SPI_Receive_IT+0x13c>
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	d06b      	beq.n	8006190 <HAL_SPI_Receive_IT+0x13c>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80060b8:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 80060bc:	68df      	ldr	r7, [r3, #12]
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80060be:	4e3a      	ldr	r6, [pc, #232]	; (80061a8 <HAL_SPI_Receive_IT+0x154>)
 80060c0:	4d3a      	ldr	r5, [pc, #232]	; (80061ac <HAL_SPI_Receive_IT+0x158>)
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
 80060c2:	869a      	strh	r2, [r3, #52]	; 0x34
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80060c4:	2801      	cmp	r0, #1
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060c6:	bf04      	itt	eq
 80060c8:	2005      	moveq	r0, #5
 80060ca:	f883 0051 	strbeq.w	r0, [r3, #81]	; 0x51
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80060ce:	2f00      	cmp	r7, #0
 80060d0:	4837      	ldr	r0, [pc, #220]	; (80061b0 <HAL_SPI_Receive_IT+0x15c>)
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferSize  = Size;
 80060d2:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80060d4:	bf08      	it	eq
 80060d6:	4630      	moveq	r0, r6
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d8:	f04f 0600 	mov.w	r6, #0
 80060dc:	655e      	str	r6, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 80060de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 80060e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80060e4:	4c33      	ldr	r4, [pc, #204]	; (80061b4 <HAL_SPI_Receive_IT+0x160>)
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060e6:	6319      	str	r1, [r3, #48]	; 0x30
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80060e8:	bf08      	it	eq
 80060ea:	462c      	moveq	r4, r5
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060f0:	6399      	str	r1, [r3, #56]	; 0x38
 80060f2:	645c      	str	r4, [r3, #68]	; 0x44
 80060f4:	6418      	str	r0, [r3, #64]	; 0x40

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 80060f6:	6819      	ldr	r1, [r3, #0]
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060f8:	d04c      	beq.n	8006194 <HAL_SPI_Receive_IT+0x140>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060fa:	684a      	ldr	r2, [r1, #4]
 80060fc:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006100:	604a      	str	r2, [r1, #4]

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006102:	680a      	ldr	r2, [r1, #0]
 8006104:	f012 0040 	ands.w	r0, r2, #64	; 0x40
 8006108:	d136      	bne.n	8006178 <HAL_SPI_Receive_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800610a:	680a      	ldr	r2, [r1, #0]
 800610c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006110:	600a      	str	r2, [r1, #0]
 8006112:	e7b4      	b.n	800607e <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL) || (Size == 0U))
 8006114:	2900      	cmp	r1, #0
 8006116:	d0b2      	beq.n	800607e <HAL_SPI_Receive_IT+0x2a>
 8006118:	2a00      	cmp	r2, #0
 800611a:	d0b0      	beq.n	800607e <HAL_SPI_Receive_IT+0x2a>
  hspi->TxXferSize  = 0U;
  hspi->TxXferCount = 0U;
  hspi->TxISR       = NULL;

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 800611c:	68d8      	ldr	r0, [r3, #12]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800611e:	6399      	str	r1, [r3, #56]	; 0x38
  {
    hspi->RxISR = SPI_RxISR_16BIT;
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8006120:	4d25      	ldr	r5, [pc, #148]	; (80061b8 <HAL_SPI_Receive_IT+0x164>)
 8006122:	4f26      	ldr	r7, [pc, #152]	; (80061bc <HAL_SPI_Receive_IT+0x168>)

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
 8006124:	879a      	strh	r2, [r3, #60]	; 0x3c
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006126:	2100      	movs	r1, #0
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006128:	2604      	movs	r6, #4
 800612a:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800612e:	6559      	str	r1, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 8006130:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_RX(hspi);
 8006132:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
  hspi->TxXferSize  = 0U;
  hspi->TxXferCount = 0U;
 8006134:	86d9      	strh	r1, [r3, #54]	; 0x36
  {
    hspi->RxISR = SPI_RxISR_16BIT;
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8006136:	4288      	cmp	r0, r1
 8006138:	bf14      	ite	ne
 800613a:	4628      	movne	r0, r5
 800613c:	4638      	moveq	r0, r7
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006142:	6319      	str	r1, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006144:	8699      	strh	r1, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
  hspi->TxISR       = NULL;
 8006146:	6459      	str	r1, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_RX(hspi);
 8006148:	bf08      	it	eq
 800614a:	6811      	ldreq	r1, [r2, #0]
 800614c:	6418      	str	r0, [r3, #64]	; 0x40
 800614e:	bf04      	itt	eq
 8006150:	f421 4180 	biceq.w	r1, r1, #16384	; 0x4000
 8006154:	6011      	streq	r1, [r2, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006156:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006158:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800615c:	d00e      	beq.n	800617c <HAL_SPI_Receive_IT+0x128>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800615e:	6851      	ldr	r1, [r2, #4]
 8006160:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8006164:	6051      	str	r1, [r2, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006166:	6810      	ldr	r0, [r2, #0]
 8006168:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800616c:	d104      	bne.n	8006178 <HAL_SPI_Receive_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800616e:	6811      	ldr	r1, [r2, #0]
 8006170:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	e782      	b.n	800607e <HAL_SPI_Receive_IT+0x2a>
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006178:	2000      	movs	r0, #0
 800617a:	e780      	b.n	800607e <HAL_SPI_Receive_IT+0x2a>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 800617c:	6810      	ldr	r0, [r2, #0]
 800617e:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8006182:	4001      	ands	r1, r0
 8006184:	6011      	str	r1, [r2, #0]
 8006186:	6811      	ldr	r1, [r2, #0]
 8006188:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	e7e6      	b.n	800615e <HAL_SPI_Receive_IT+0x10a>
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 8006190:	2001      	movs	r0, #1
 8006192:	e774      	b.n	800607e <HAL_SPI_Receive_IT+0x2a>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8006194:	6808      	ldr	r0, [r1, #0]
 8006196:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 800619a:	4002      	ands	r2, r0
 800619c:	600a      	str	r2, [r1, #0]
 800619e:	680a      	ldr	r2, [r1, #0]
 80061a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a4:	600a      	str	r2, [r1, #0]
 80061a6:	e7a8      	b.n	80060fa <HAL_SPI_Receive_IT+0xa6>
 80061a8:	08006a95 	stmdaeq	r0, {r0, r2, r4, r7, r9, fp, sp, lr}
 80061ac:	08006a39 	stmdaeq	r0, {r0, r3, r4, r5, r9, fp, sp, lr}
 80061b0:	08006b6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, sp, lr}
 80061b4:	08006b15 	stmdaeq	r0, {r0, r2, r4, r8, r9, fp, sp, lr}
 80061b8:	08006841 	stmdaeq	r0, {r0, r6, fp, sp, lr}
 80061bc:	08007155 	stmdaeq	r0, {r0, r2, r4, r6, r8, ip, sp, lr}

080061c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size: amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80061c0:	b4f0      	push	{r4, r5, r6, r7}
 80061c2:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80061c4:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80061c8:	2801      	cmp	r0, #1
 80061ca:	d011      	beq.n	80061f0 <HAL_SPI_TransmitReceive_IT+0x30>

  tmp  = hspi->State;
 80061cc:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 80061d0:	6866      	ldr	r6, [r4, #4]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80061d2:	2501      	movs	r5, #1

  tmp  = hspi->State;
 80061d4:	b2c0      	uxtb	r0, r0
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80061d6:	42a8      	cmp	r0, r5

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80061d8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80061dc:	d010      	beq.n	8006200 <HAL_SPI_TransmitReceive_IT+0x40>
 80061de:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 80061e2:	d008      	beq.n	80061f6 <HAL_SPI_TransmitReceive_IT+0x36>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80061e4:	2002      	movs	r0, #2
    __HAL_SPI_ENABLE(hspi);
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061e6:	2300      	movs	r3, #0
 80061e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 80061ec:	bcf0      	pop	{r4, r5, r6, r7}
 80061ee:	4770      	bx	lr

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80061f0:	2002      	movs	r0, #2

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80061f2:	bcf0      	pop	{r4, r5, r6, r7}
 80061f4:	4770      	bx	lr

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80061f6:	68a5      	ldr	r5, [r4, #8]
 80061f8:	2d00      	cmp	r5, #0
 80061fa:	d1f3      	bne.n	80061e4 <HAL_SPI_TransmitReceive_IT+0x24>
 80061fc:	2804      	cmp	r0, #4
 80061fe:	d1f1      	bne.n	80061e4 <HAL_SPI_TransmitReceive_IT+0x24>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8006200:	2900      	cmp	r1, #0
 8006202:	d032      	beq.n	800626a <HAL_SPI_TransmitReceive_IT+0xaa>
 8006204:	2a00      	cmp	r2, #0
 8006206:	d030      	beq.n	800626a <HAL_SPI_TransmitReceive_IT+0xaa>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d02e      	beq.n	800626a <HAL_SPI_TransmitReceive_IT+0xaa>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800620c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006210:	6321      	str	r1, [r4, #48]	; 0x30
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8006212:	2801      	cmp	r0, #1
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006214:	68e1      	ldr	r1, [r4, #12]
 8006216:	4f1c      	ldr	r7, [pc, #112]	; (8006288 <HAL_SPI_TransmitReceive_IT+0xc8>)
 8006218:	4e1c      	ldr	r6, [pc, #112]	; (800628c <HAL_SPI_TransmitReceive_IT+0xcc>)
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
 800621a:	86a3      	strh	r3, [r4, #52]	; 0x34
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800621c:	bf04      	itt	eq
 800621e:	2005      	moveq	r0, #5
 8006220:	f884 0051 	strbeq.w	r0, [r4, #81]	; 0x51
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006224:	481a      	ldr	r0, [pc, #104]	; (8006290 <HAL_SPI_TransmitReceive_IT+0xd0>)
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferSize  = Size;
 8006226:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006228:	2900      	cmp	r1, #0
 800622a:	bf18      	it	ne
 800622c:	4601      	movne	r1, r0
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800622e:	f04f 0000 	mov.w	r0, #0
 8006232:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 8006234:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 8006236:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006238:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800623a:	4d16      	ldr	r5, [pc, #88]	; (8006294 <HAL_SPI_TransmitReceive_IT+0xd4>)
  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800623c:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800623e:	bf04      	itt	eq
 8006240:	463d      	moveq	r5, r7
 8006242:	4631      	moveq	r1, r6
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006248:	6465      	str	r5, [r4, #68]	; 0x44
 800624a:	6421      	str	r1, [r4, #64]	; 0x40
  {
    SPI_RESET_CRC(hspi);
 800624c:	6823      	ldr	r3, [r4, #0]
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800624e:	d010      	beq.n	8006272 <HAL_SPI_TransmitReceive_IT+0xb2>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006256:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800625e:	d106      	bne.n	800626e <HAL_SPI_TransmitReceive_IT+0xae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e7bd      	b.n	80061e6 <HAL_SPI_TransmitReceive_IT+0x26>
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 800626a:	2001      	movs	r0, #1
 800626c:	e7bb      	b.n	80061e6 <HAL_SPI_TransmitReceive_IT+0x26>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
  uint32_t tmp = 0U, tmp1 = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800626e:	2000      	movs	r0, #0
 8006270:	e7b9      	b.n	80061e6 <HAL_SPI_TransmitReceive_IT+0x26>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8006278:	400a      	ands	r2, r1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	e7e4      	b.n	8006250 <HAL_SPI_TransmitReceive_IT+0x90>
 8006286:	bf00      	nop
 8006288:	08006a39 	stmdaeq	r0, {r0, r3, r4, r5, r9, fp, sp, lr}
 800628c:	08006a95 	stmdaeq	r0, {r0, r2, r4, r7, r9, fp, sp, lr}
 8006290:	08006b6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, sp, lr}
 8006294:	08006b15 	stmdaeq	r0, {r0, r2, r4, r8, r9, fp, sp, lr}

08006298 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800629a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800629e:	2b01      	cmp	r3, #1
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80062a0:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062a2:	d00c      	beq.n	80062be <HAL_SPI_Transmit_DMA+0x26>

  if(hspi->State != HAL_SPI_STATE_READY)
 80062a4:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062a8:	2301      	movs	r3, #1

  if(hspi->State != HAL_SPI_STATE_READY)
 80062aa:	b2c0      	uxtb	r0, r0
 80062ac:	4298      	cmp	r0, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 80062b2:	d006      	beq.n	80062c2 <HAL_SPI_Transmit_DMA+0x2a>
  {
    errorcode = HAL_BUSY;
 80062b4:	2002      	movs	r0, #2
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062b6:	2300      	movs	r3, #0
 80062b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80062bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062be:	2002      	movs	r0, #2

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL) || (Size == 0U))
 80062c2:	2900      	cmp	r1, #0
 80062c4:	d0f7      	beq.n	80062b6 <HAL_SPI_Transmit_DMA+0x1e>
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d0f5      	beq.n	80062b6 <HAL_SPI_Transmit_DMA+0x1e>
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ca:	2300      	movs	r3, #0
  hspi->RxISR       = NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062cc:	68a0      	ldr	r0, [r4, #8]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 80062ce:	86a2      	strh	r2, [r4, #52]	; 0x34
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062d0:	2503      	movs	r5, #3
 80062d2:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 80062d8:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80062da:	6822      	ldr	r2, [r4, #0]
  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;
 80062dc:	87e3      	strh	r3, [r4, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062e2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxISR       = NULL;
 80062e4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062e6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062e8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80062ea:	bf08      	it	eq
 80062ec:	6813      	ldreq	r3, [r2, #0]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062ee:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80062f0:	bf04      	itt	eq
 80062f2:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80062f6:	6013      	streq	r3, [r2, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fe:	d01f      	beq.n	8006340 <HAL_SPI_Transmit_DMA+0xa8>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006300:	6ca0      	ldr	r0, [r4, #72]	; 0x48

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006302:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006304:	4d13      	ldr	r5, [pc, #76]	; (8006354 <HAL_SPI_Transmit_DMA+0xbc>)
 8006306:	6405      	str	r5, [r0, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006308:	4f13      	ldr	r7, [pc, #76]	; (8006358 <HAL_SPI_Transmit_DMA+0xc0>)

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800630a:	4e14      	ldr	r6, [pc, #80]	; (800635c <HAL_SPI_Transmit_DMA+0xc4>)

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800630c:	63c7      	str	r7, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800630e:	2500      	movs	r5, #0

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006310:	320c      	adds	r2, #12
 8006312:	b29b      	uxth	r3, r3

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006314:	64c6      	str	r6, [r0, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006316:	6505      	str	r5, [r0, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006318:	f7fe f838 	bl	800438c <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	0652      	lsls	r2, r2, #25
 8006322:	d403      	bmi.n	800632c <HAL_SPI_Transmit_DMA+0x94>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800632a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	f042 0220 	orr.w	r2, r2, #32
 8006332:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	f042 0202 	orr.w	r2, r2, #2
 800633a:	605a      	str	r2, [r3, #4]
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;
 800633c:	2000      	movs	r0, #0
 800633e:	e7ba      	b.n	80062b6 <HAL_SPI_Transmit_DMA+0x1e>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8006340:	6810      	ldr	r0, [r2, #0]
 8006342:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8006346:	4003      	ands	r3, r0
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e7d5      	b.n	8006300 <HAL_SPI_Transmit_DMA+0x68>
 8006354:	080066b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, sp, lr}
 8006358:	08006c0d 	stmdaeq	r0, {r0, r2, r3, sl, fp, sp, lr}
 800635c:	08006be9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, fp, sp, lr}

08006360 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8006362:	6883      	ldr	r3, [r0, #8]
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006364:	4604      	mov	r4, r0
 8006366:	460d      	mov	r5, r1
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8006368:	b91b      	cbnz	r3, 8006372 <HAL_SPI_Receive_DMA+0x12>
 800636a:	6841      	ldr	r1, [r0, #4]
 800636c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8006370:	d012      	beq.n	8006398 <HAL_SPI_Receive_DMA+0x38>
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006372:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8006376:	2901      	cmp	r1, #1
 8006378:	d00c      	beq.n	8006394 <HAL_SPI_Receive_DMA+0x34>

  if(hspi->State != HAL_SPI_STATE_READY)
 800637a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800637e:	2101      	movs	r1, #1

  if(hspi->State != HAL_SPI_STATE_READY)
 8006380:	b2c0      	uxtb	r0, r0
 8006382:	4288      	cmp	r0, r1
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006384:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8006388:	d06b      	beq.n	8006462 <HAL_SPI_Receive_DMA+0x102>
  {
    errorcode = HAL_BUSY;
 800638a:	2002      	movs	r0, #2
  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800638c:	2300      	movs	r3, #0
 800638e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8006392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006394:	2002      	movs	r0, #2
 8006396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006398:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800639c:	2104      	movs	r1, #4

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800639e:	2b01      	cmp	r3, #1
{
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063a0:	f880 1051 	strb.w	r1, [r0, #81]	; 0x51

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80063a4:	d0f6      	beq.n	8006394 <HAL_SPI_Receive_DMA+0x34>

  tmp  = hspi->State;
 80063a6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80063aa:	2101      	movs	r1, #1

  tmp  = hspi->State;
 80063ac:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
  if(!((tmp == HAL_SPI_STATE_READY) ||
 80063ae:	428b      	cmp	r3, r1

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80063b0:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  if(!((tmp == HAL_SPI_STATE_READY) ||
 80063b4:	d001      	beq.n	80063ba <HAL_SPI_Receive_DMA+0x5a>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d1e7      	bne.n	800638a <HAL_SPI_Receive_DMA+0x2a>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	f000 809b 	beq.w	80064f6 <HAL_SPI_Receive_DMA+0x196>
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	f000 8098 	beq.w	80064f6 <HAL_SPI_Receive_DMA+0x196>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80063c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 80063cc:	6325      	str	r5, [r4, #48]	; 0x30
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80063ce:	2b01      	cmp	r3, #1
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063d0:	bf04      	itt	eq
 80063d2:	2305      	moveq	r3, #5
 80063d4:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063d8:	2300      	movs	r3, #0
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063da:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063de:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
  hspi->TxXferSize  = Size;
 80063e0:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063e2:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 80063e4:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063e6:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063e8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063ea:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 80063ec:	87e2      	strh	r2, [r4, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 80063ee:	6821      	ldr	r1, [r4, #0]
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063f0:	f000 8083 	beq.w	80064fa <HAL_SPI_Receive_DMA+0x19a>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063f4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80063f8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063fa:	2b04      	cmp	r3, #4
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80063fc:	bf0b      	itete	eq
 80063fe:	4b44      	ldreq	r3, [pc, #272]	; (8006510 <HAL_SPI_Receive_DMA+0x1b0>)
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006400:	4b44      	ldrne	r3, [pc, #272]	; (8006514 <HAL_SPI_Receive_DMA+0x1b4>)

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006402:	4a45      	ldreq	r2, [pc, #276]	; (8006518 <HAL_SPI_Receive_DMA+0x1b8>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006404:	4a45      	ldrne	r2, [pc, #276]	; (800651c <HAL_SPI_Receive_DMA+0x1bc>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006406:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8006408:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800640a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800640c:	2600      	movs	r6, #0
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800640e:	4a44      	ldr	r2, [pc, #272]	; (8006520 <HAL_SPI_Receive_DMA+0x1c0>)
 8006410:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8006412:	310c      	adds	r1, #12
 8006414:	462a      	mov	r2, r5
 8006416:	b29b      	uxth	r3, r3

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006418:	6506      	str	r6, [r0, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800641a:	f7fd ffb7 	bl	800438c <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800641e:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006420:	6b21      	ldr	r1, [r4, #48]	; 0x30

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006422:	6853      	ldr	r3, [r2, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006424:	6ca0      	ldr	r0, [r4, #72]	; 0x48

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800642c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800642e:	6406      	str	r6, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006430:	320c      	adds	r2, #12
 8006432:	b29b      	uxth	r3, r3
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006434:	63c6      	str	r6, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006436:	64c6      	str	r6, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006438:	6506      	str	r6, [r0, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800643a:	f7fd ffa7 	bl	800438c <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	0651      	lsls	r1, r2, #25
 8006444:	d403      	bmi.n	800644e <HAL_SPI_Receive_DMA+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	f042 0220 	orr.w	r2, r2, #32
 8006454:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	f042 0202 	orr.w	r2, r2, #2
 800645c:	605a      	str	r2, [r3, #4]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
  uint32_t tmp = 0U, tmp1 = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800645e:	2000      	movs	r0, #0
 8006460:	e794      	b.n	800638c <HAL_SPI_Receive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL) || (Size == 0U))
 8006462:	2d00      	cmp	r5, #0
 8006464:	d092      	beq.n	800638c <HAL_SPI_Receive_DMA+0x2c>
 8006466:	2a00      	cmp	r2, #0
 8006468:	d090      	beq.n	800638c <HAL_SPI_Receive_DMA+0x2c>
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800646a:	2100      	movs	r1, #0
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800646c:	2004      	movs	r0, #4
 800646e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006472:	6421      	str	r1, [r4, #64]	; 0x40
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006474:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;
 8006476:	6461      	str	r1, [r4, #68]	; 0x44
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 8006478:	87e2      	strh	r2, [r4, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;
  hspi->TxXferSize  = 0U;
 800647a:	86a1      	strh	r1, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800647c:	86e1      	strh	r1, [r4, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_RX(hspi);
 800647e:	6821      	ldr	r1, [r4, #0]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006480:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxISR       = NULL;
  hspi->TxXferSize  = 0U;
  hspi->TxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  {
    SPI_1LINE_RX(hspi);
 8006486:	bf08      	it	eq
 8006488:	680b      	ldreq	r3, [r1, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
 800648a:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_RX(hspi);
 800648c:	bf04      	itt	eq
 800648e:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 8006492:	600b      	streq	r3, [r1, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006494:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649a:	d022      	beq.n	80064e2 <HAL_SPI_Receive_DMA+0x182>

 /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800649c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800649e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80064a0:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <HAL_SPI_Receive_DMA+0x1b8>)

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80064a2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006510 <HAL_SPI_Receive_DMA+0x1b0>

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80064a6:	4f1e      	ldr	r7, [pc, #120]	; (8006520 <HAL_SPI_Receive_DMA+0x1c0>)
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80064a8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;

 /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80064aa:	2600      	movs	r6, #0

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80064ac:	462a      	mov	r2, r5
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	310c      	adds	r1, #12

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80064b2:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80064b6:	64c7      	str	r7, [r0, #76]	; 0x4c

 /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80064b8:	6506      	str	r6, [r0, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80064ba:	f7fd ff67 	bl	800438c <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	0652      	lsls	r2, r2, #25
 80064c4:	d403      	bmi.n	80064ce <HAL_SPI_Receive_DMA+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064cc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	f042 0220 	orr.w	r2, r2, #32
 80064d4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	605a      	str	r2, [r3, #4]
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064de:	2000      	movs	r0, #0
 80064e0:	e754      	b.n	800638c <HAL_SPI_Receive_DMA+0x2c>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 80064e2:	680a      	ldr	r2, [r1, #0]
 80064e4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80064e8:	4013      	ands	r3, r2
 80064ea:	600b      	str	r3, [r1, #0]
 80064ec:	680b      	ldr	r3, [r1, #0]
 80064ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064f2:	600b      	str	r3, [r1, #0]
 80064f4:	e7d2      	b.n	800649c <HAL_SPI_Receive_DMA+0x13c>
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 80064f6:	2001      	movs	r0, #1
 80064f8:	e748      	b.n	800638c <HAL_SPI_Receive_DMA+0x2c>

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 80064fa:	680a      	ldr	r2, [r1, #0]
 80064fc:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8006500:	4013      	ands	r3, r2
 8006502:	600b      	str	r3, [r1, #0]
 8006504:	680b      	ldr	r3, [r1, #0]
 8006506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800650a:	600b      	str	r3, [r1, #0]
 800650c:	e772      	b.n	80063f4 <HAL_SPI_Receive_DMA+0x94>
 800650e:	bf00      	nop
 8006510:	08006cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, sp, lr}
 8006514:	08006de1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, fp, sp, lr}
 8006518:	080066c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, sp, lr}
 800651c:	080066d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, sp, lr}
 8006520:	08006be9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, fp, sp, lr}

08006524 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006528:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800652c:	2801      	cmp	r0, #1
 800652e:	d010      	beq.n	8006552 <HAL_SPI_TransmitReceive_DMA+0x2e>

  tmp  = hspi->State;
 8006530:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8006534:	6866      	ldr	r6, [r4, #4]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006536:	2501      	movs	r5, #1

  tmp  = hspi->State;
 8006538:	b2c0      	uxtb	r0, r0
  tmp1 = hspi->Init.Mode;
  if(!((tmp == HAL_SPI_STATE_READY) ||
 800653a:	42a8      	cmp	r0, r5

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800653c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  if(!((tmp == HAL_SPI_STATE_READY) ||
 8006540:	d00e      	beq.n	8006560 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006542:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 8006546:	d006      	beq.n	8006556 <HAL_SPI_TransmitReceive_DMA+0x32>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006548:	2002      	movs	r0, #2
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800654a:	2300      	movs	r3, #0
 800654c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006550:	bd70      	pop	{r4, r5, r6, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006552:	2002      	movs	r0, #2

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8006554:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hspi);

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  if(!((tmp == HAL_SPI_STATE_READY) ||
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8006556:	68a5      	ldr	r5, [r4, #8]
 8006558:	2d00      	cmp	r5, #0
 800655a:	d1f5      	bne.n	8006548 <HAL_SPI_TransmitReceive_DMA+0x24>
 800655c:	2804      	cmp	r0, #4
 800655e:	d1f3      	bne.n	8006548 <HAL_SPI_TransmitReceive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8006560:	2900      	cmp	r1, #0
 8006562:	d04f      	beq.n	8006604 <HAL_SPI_TransmitReceive_DMA+0xe0>
 8006564:	2a00      	cmp	r2, #0
 8006566:	d04d      	beq.n	8006604 <HAL_SPI_TransmitReceive_DMA+0xe0>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d04b      	beq.n	8006604 <HAL_SPI_TransmitReceive_DMA+0xe0>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800656c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 8006570:	6321      	str	r1, [r4, #48]	; 0x30
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8006572:	2801      	cmp	r0, #1
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006574:	bf04      	itt	eq
 8006576:	2005      	moveq	r0, #5
 8006578:	f884 0051 	strbeq.w	r0, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800657c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
  hspi->TxXferSize  = Size;
 800657e:	86a3      	strh	r3, [r4, #52]	; 0x34
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006580:	2100      	movs	r1, #0
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006582:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006586:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006588:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800658a:	6461      	str	r1, [r4, #68]	; 0x44

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 800658c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 800658e:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006590:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006592:	87e3      	strh	r3, [r4, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 8006594:	6821      	ldr	r1, [r4, #0]
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006596:	d03a      	beq.n	800660e <HAL_SPI_TransmitReceive_DMA+0xea>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006598:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800659c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 800659e:	2b04      	cmp	r3, #4
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80065a0:	bf07      	ittee	eq
 80065a2:	4d20      	ldreq	r5, [pc, #128]	; (8006624 <HAL_SPI_TransmitReceive_DMA+0x100>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80065a4:	4b20      	ldreq	r3, [pc, #128]	; (8006628 <HAL_SPI_TransmitReceive_DMA+0x104>)
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80065a6:	4d21      	ldrne	r5, [pc, #132]	; (800662c <HAL_SPI_TransmitReceive_DMA+0x108>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80065a8:	4b21      	ldrne	r3, [pc, #132]	; (8006630 <HAL_SPI_TransmitReceive_DMA+0x10c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80065aa:	6405      	str	r5, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80065ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80065ae:	4d21      	ldr	r5, [pc, #132]	; (8006634 <HAL_SPI_TransmitReceive_DMA+0x110>)

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80065b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80065b2:	64c5      	str	r5, [r0, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80065b4:	2500      	movs	r5, #0

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80065b6:	310c      	adds	r1, #12
 80065b8:	b29b      	uxth	r3, r3

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80065ba:	6505      	str	r5, [r0, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80065bc:	f7fd fee6 	bl	800438c <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065c0:	6822      	ldr	r2, [r4, #0]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80065c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065c4:	6853      	ldr	r3, [r2, #4]
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80065c6:	6b21      	ldr	r1, [r4, #48]	; 0x30

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80065ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80065d0:	6405      	str	r5, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80065d2:	320c      	adds	r2, #12
 80065d4:	b29b      	uxth	r3, r3
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
  hspi->hdmatx->XferCpltCallback     = NULL;
 80065d6:	63c5      	str	r5, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80065d8:	64c5      	str	r5, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80065da:	6505      	str	r5, [r0, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80065dc:	f7fd fed6 	bl	800438c <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	0652      	lsls	r2, r2, #25
 80065e6:	d403      	bmi.n	80065f0 <HAL_SPI_TransmitReceive_DMA+0xcc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	f042 0220 	orr.w	r2, r2, #32
 80065f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	f042 0202 	orr.w	r2, r2, #2
 80065fe:	605a      	str	r2, [r3, #4]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
  uint32_t tmp = 0U, tmp1 = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006600:	2000      	movs	r0, #0
 8006602:	e7a2      	b.n	800654a <HAL_SPI_TransmitReceive_DMA+0x26>
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006604:	2300      	movs	r3, #0
    goto error;
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 8006606:	2001      	movs	r0, #1
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006608:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800660c:	bd70      	pop	{r4, r5, r6, pc}

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    SPI_RESET_CRC(hspi);
 800660e:	6808      	ldr	r0, [r1, #0]
 8006610:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8006614:	4003      	ands	r3, r0
 8006616:	600b      	str	r3, [r1, #0]
 8006618:	680b      	ldr	r3, [r1, #0]
 800661a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800661e:	600b      	str	r3, [r1, #0]
 8006620:	e7ba      	b.n	8006598 <HAL_SPI_TransmitReceive_DMA+0x74>
 8006622:	bf00      	nop
 8006624:	080066c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, sp, lr}
 8006628:	08006cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, sp, lr}
 800662c:	080066d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, sp, lr}
 8006630:	08006de1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, fp, sp, lr}
 8006634:	08006be9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, fp, sp, lr}

08006638 <HAL_SPI_DMAPause>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
  /* Process Locked */
  __HAL_LOCK(hspi);
 8006638:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 800663c:	2a01      	cmp	r2, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 800663e:	4603      	mov	r3, r0
  /* Process Locked */
  __HAL_LOCK(hspi);
 8006640:	d009      	beq.n	8006656 <HAL_SPI_DMAPause+0x1e>

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006642:	6800      	ldr	r0, [r0, #0]
 8006644:	6842      	ldr	r2, [r0, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006646:	2100      	movs	r1, #0
{
  /* Process Locked */
  __HAL_LOCK(hspi);

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006648:	f022 0203 	bic.w	r2, r2, #3
 800664c:	6042      	str	r2, [r0, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
 800664e:	4608      	mov	r0, r1

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006650:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50

  return HAL_OK;
 8006654:	4770      	bx	lr
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
  /* Process Locked */
  __HAL_LOCK(hspi);
 8006656:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
}
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop

0800665c <HAL_SPI_DMAResume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
  /* Process Locked */
  __HAL_LOCK(hspi);
 800665c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8006660:	2a01      	cmp	r2, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8006662:	4603      	mov	r3, r0
  /* Process Locked */
  __HAL_LOCK(hspi);
 8006664:	d009      	beq.n	800667a <HAL_SPI_DMAResume+0x1e>

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006666:	6800      	ldr	r0, [r0, #0]
 8006668:	6842      	ldr	r2, [r0, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800666a:	2100      	movs	r1, #0
{
  /* Process Locked */
  __HAL_LOCK(hspi);

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800666c:	f042 0203 	orr.w	r2, r2, #3
 8006670:	6042      	str	r2, [r0, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
 8006672:	4608      	mov	r0, r1

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006674:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50

  return HAL_OK;
 8006678:	4770      	bx	lr
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
  /* Process Locked */
  __HAL_LOCK(hspi);
 800667a:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
}
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop

08006680 <HAL_SPI_DMAStop>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8006680:	b510      	push	{r4, lr}
 8006682:	4604      	mov	r4, r0
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream */
  if(hspi->hdmatx != NULL)
 8006684:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006686:	b108      	cbz	r0, 800668c <HAL_SPI_DMAStop+0xc>
  {
    HAL_DMA_Abort(hspi->hdmatx);
 8006688:	f7fd fec2 	bl	8004410 <HAL_DMA_Abort>
  }
  /* Abort the SPI DMA rx Stream */
  if(hspi->hdmarx != NULL)
 800668c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800668e:	b108      	cbz	r0, 8006694 <HAL_SPI_DMAStop+0x14>
  {
    HAL_DMA_Abort(hspi->hdmarx);
 8006690:	f7fd febe 	bl	8004410 <HAL_DMA_Abort>
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	6853      	ldr	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006698:	2101      	movs	r1, #1
  {
    HAL_DMA_Abort(hspi->hdmarx);
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
  return HAL_OK;
}
 80066a0:	2000      	movs	r0, #0
    HAL_DMA_Abort(hspi->hdmarx);
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
  hspi->State = HAL_SPI_STATE_READY;
 80066a2:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  return HAL_OK;
}
 80066a6:	bd10      	pop	{r4, pc}

080066a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop

080066ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop

080066b0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop

080066b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop

080066b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066b8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  HAL_SPI_TxHalfCpltCallback(hspi);
 80066ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80066bc:	f7ff fffa 	bl	80066b4 <HAL_SPI_TxHalfCpltCallback>
 80066c0:	bd08      	pop	{r3, pc}
 80066c2:	bf00      	nop

080066c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop

080066c8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066c8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  HAL_SPI_RxHalfCpltCallback(hspi);
 80066ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80066cc:	f7ff fffa 	bl	80066c4 <HAL_SPI_RxHalfCpltCallback>
 80066d0:	bd08      	pop	{r3, pc}
 80066d2:	bf00      	nop

080066d4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop

080066d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066d8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80066da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80066dc:	f7ff fffa 	bl	80066d4 <HAL_SPI_TxRxHalfCpltCallback>
 80066e0:	bd08      	pop	{r3, pc}
 80066e2:	bf00      	nop

080066e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop

080066e8 <SPI_CloseTx_ISR>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80066e8:	b530      	push	{r4, r5, lr}
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 80066ea:	4b38      	ldr	r3, [pc, #224]	; (80067cc <SPI_CloseTx_ISR+0xe4>)
 80066ec:	4a38      	ldr	r2, [pc, #224]	; (80067d0 <SPI_CloseTx_ISR+0xe8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80066f4:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 80066f6:	2264      	movs	r2, #100	; 0x64
 80066f8:	0a5b      	lsrs	r3, r3, #9
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80066fe:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 8006700:	9300      	str	r3, [sp, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006702:	f7f9 fecf 	bl	80004a4 <HAL_GetTick>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	4605      	mov	r5, r0
 800670a:	e002      	b.n	8006712 <SPI_CloseTx_ISR+0x2a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	0791      	lsls	r1, r2, #30
 8006710:	d408      	bmi.n	8006724 <SPI_CloseTx_ISR+0x3c>
  tickstart = HAL_GetTick();

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0)
 8006712:	9a00      	ldr	r2, [sp, #0]
 8006714:	1e51      	subs	r1, r2, #1
 8006716:	9100      	str	r1, [sp, #0]
 8006718:	2a00      	cmp	r2, #0
 800671a:	d1f7      	bne.n	800670c <SPI_CloseTx_ISR+0x24>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800671c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800671e:	f042 0220 	orr.w	r2, r2, #32
 8006722:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800672a:	605a      	str	r2, [r3, #4]
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	0612      	lsls	r2, r2, #24
 8006730:	d411      	bmi.n	8006756 <SPI_CloseTx_ISR+0x6e>
 8006732:	68a2      	ldr	r2, [r4, #8]
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006734:	b92a      	cbnz	r2, 8006742 <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	9201      	str	r2, [sp, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006742:	2301      	movs	r3, #1
 8006744:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006748:	6d63      	ldr	r3, [r4, #84]	; 0x54
  {
    HAL_SPI_ErrorCallback(hspi);
 800674a:	4620      	mov	r0, r4
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }

  hspi->State = HAL_SPI_STATE_READY;
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800674c:	bb73      	cbnz	r3, 80067ac <SPI_CloseTx_ISR+0xc4>
  {
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
 800674e:	f7ff ffab 	bl	80066a8 <HAL_SPI_TxCpltCallback>
  }
}
 8006752:	b003      	add	sp, #12
 8006754:	bd30      	pop	{r4, r5, pc}
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006756:	f7f9 fea5 	bl	80004a4 <HAL_GetTick>
 800675a:	1b40      	subs	r0, r0, r5
 800675c:	2863      	cmp	r0, #99	; 0x63
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800675e:	6823      	ldr	r3, [r4, #0]
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006760:	d9e4      	bls.n	800672c <SPI_CloseTx_ISR+0x44>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006762:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006764:	685a      	ldr	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006766:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800676a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800676e:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006770:	68a2      	ldr	r2, [r4, #8]
 8006772:	d01f      	beq.n	80067b4 <SPI_CloseTx_ISR+0xcc>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006774:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006776:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800677a:	d108      	bne.n	800678e <SPI_CloseTx_ISR+0xa6>
        {
          SPI_RESET_CRC(hspi);
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8006782:	4001      	ands	r1, r0
 8006784:	6019      	str	r1, [r3, #0]
 8006786:	6819      	ldr	r1, [r3, #0]
 8006788:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800678c:	6019      	str	r1, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800678e:	2101      	movs	r1, #1
 8006790:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006794:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006796:	f041 0120 	orr.w	r1, r1, #32
 800679a:	6561      	str	r1, [r4, #84]	; 0x54
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));

  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679c:	6d61      	ldr	r1, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800679e:	2000      	movs	r0, #0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));

  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a0:	f041 0120 	orr.w	r1, r1, #32
 80067a4:	6561      	str	r1, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067a6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 80067aa:	e7c3      	b.n	8006734 <SPI_CloseTx_ISR+0x4c>
  }

  hspi->State = HAL_SPI_STATE_READY;
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  {
    HAL_SPI_ErrorCallback(hspi);
 80067ac:	f7ff ff9a 	bl	80066e4 <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 80067b0:	b003      	add	sp, #12
 80067b2:	bd30      	pop	{r4, r5, pc}
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80067b8:	d002      	beq.n	80067c0 <SPI_CloseTx_ISR+0xd8>
 80067ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80067be:	d1d9      	bne.n	8006774 <SPI_CloseTx_ISR+0x8c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067c0:	6819      	ldr	r1, [r3, #0]
 80067c2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80067c6:	6019      	str	r1, [r3, #0]
 80067c8:	e7d4      	b.n	8006774 <SPI_CloseTx_ISR+0x8c>
 80067ca:	bf00      	nop
 80067cc:	20000010 	andcs	r0, r0, r0, lsl r0
 80067d0:	057619f1 	ldrbeq	r1, [r6, #-2545]!	; 0xfffff60f

080067d4 <SPI_TxISR_8BIT>:
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80067d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80067d6:	6802      	ldr	r2, [r0, #0]
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	6301      	str	r1, [r0, #48]	; 0x30
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	7313      	strb	r3, [r2, #12]
  hspi->TxXferCount--;
 80067e0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	86c3      	strh	r3, [r0, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 80067e8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	b92b      	cbnz	r3, 80067fa <SPI_TxISR_8BIT+0x26>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f4:	d002      	beq.n	80067fc <SPI_TxISR_8BIT+0x28>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80067f6:	f7ff bf77 	b.w	80066e8 <SPI_CloseTx_ISR>
 80067fa:	4770      	bx	lr
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80067fc:	6802      	ldr	r2, [r0, #0]
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006804:	6013      	str	r3, [r2, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006806:	f7ff bf6f 	b.w	80066e8 <SPI_CloseTx_ISR>
 800680a:	bf00      	nop

0800680c <SPI_TxISR_16BIT>:
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800680c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800680e:	6801      	ldr	r1, [r0, #0]
 8006810:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006814:	60cb      	str	r3, [r1, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
  hspi->TxXferCount--;
 8006816:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006818:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 800681a:	3b01      	subs	r3, #1
 800681c:	b29b      	uxth	r3, r3
 800681e:	86c3      	strh	r3, [r0, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 8006820:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006822:	b29b      	uxth	r3, r3
 8006824:	b92b      	cbnz	r3, 8006832 <SPI_TxISR_16BIT+0x26>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006826:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682c:	d002      	beq.n	8006834 <SPI_TxISR_16BIT+0x28>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800682e:	f7ff bf5b 	b.w	80066e8 <SPI_CloseTx_ISR>
 8006832:	4770      	bx	lr
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006834:	680b      	ldr	r3, [r1, #0]
 8006836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800683a:	600b      	str	r3, [r1, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800683c:	f7ff bf54 	b.w	80066e8 <SPI_CloseTx_ISR>

08006840 <SPI_RxISR_16BIT>:
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006840:	6802      	ldr	r2, [r0, #0]
 8006842:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006844:	68d3      	ldr	r3, [r2, #12]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006846:	b500      	push	{lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006848:	f821 3b02 	strh.w	r3, [r1], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
  hspi->RxXferCount--;
 800684c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800684e:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8006850:	3b01      	subs	r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	87c3      	strh	r3, [r0, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006856:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b01      	cmp	r3, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800685c:	b083      	sub	sp, #12
  hspi->pRxBuffPtr += sizeof(uint16_t);
  hspi->RxXferCount--;

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800685e:	d023      	beq.n	80068a8 <SPI_RxISR_16BIT+0x68>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 8006860:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006862:	b29b      	uxth	r3, r3
 8006864:	b9c3      	cbnz	r3, 8006898 <SPI_RxISR_16BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006866:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686c:	d017      	beq.n	800689e <SPI_RxISR_16BIT+0x5e>
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800686e:	6853      	ldr	r3, [r2, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006870:	6841      	ldr	r1, [r0, #4]
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006872:	f023 0360 	bic.w	r3, r3, #96	; 0x60

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006876:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800687a:	6053      	str	r3, [r2, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800687c:	6883      	ldr	r3, [r0, #8]
 800687e:	d023      	beq.n	80068c8 <SPI_RxISR_16BIT+0x88>
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006880:	b1db      	cbz	r3, 80068ba <SPI_RxISR_16BIT+0x7a>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
    }
    hspi->State = HAL_SPI_STATE_READY;
 8006882:	2301      	movs	r3, #1
 8006884:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8006888:	6893      	ldr	r3, [r2, #8]
 800688a:	f013 0f10 	tst.w	r3, #16
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800688e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    }
    hspi->State = HAL_SPI_STATE_READY;

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8006890:	d12c      	bne.n	80068ec <SPI_RxISR_16BIT+0xac>
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006892:	b333      	cbz	r3, 80068e2 <SPI_RxISR_16BIT+0xa2>
      {
        HAL_SPI_RxCpltCallback(hspi);
      }
      else
      {
        HAL_SPI_ErrorCallback(hspi);
 8006894:	f7ff ff26 	bl	80066e4 <HAL_SPI_ErrorCallback>
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
  }
}
 8006898:	b003      	add	sp, #12
 800689a:	f85d fb04 	ldr.w	pc, [sp], #4
  if(hspi->RxXferCount == 0U)
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800689e:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <SPI_RxISR_16BIT+0xc8>)
 80068a0:	6403      	str	r3, [r0, #64]	; 0x40
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
  }
}
 80068a2:	b003      	add	sp, #12
 80068a4:	f85d fb04 	ldr.w	pc, [sp], #4
  hspi->pRxBuffPtr += sizeof(uint16_t);
  hspi->RxXferCount--;

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80068a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	d026      	beq.n	80068fe <SPI_RxISR_16BIT+0xbe>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 80068b0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0da      	beq.n	800686e <SPI_RxISR_16BIT+0x2e>
 80068b8:	e7ee      	b.n	8006898 <SPI_RxISR_16BIT+0x58>
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	68d3      	ldr	r3, [r2, #12]
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	6893      	ldr	r3, [r2, #8]
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	9b01      	ldr	r3, [sp, #4]
 80068c6:	e7dc      	b.n	8006882 <SPI_RxISR_16BIT+0x42>
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068cc:	d002      	beq.n	80068d4 <SPI_RxISR_16BIT+0x94>
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d1d5      	bne.n	8006880 <SPI_RxISR_16BIT+0x40>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80068d4:	6811      	ldr	r1, [r2, #0]
 80068d6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80068da:	6011      	str	r1, [r2, #0]
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1d0      	bne.n	8006882 <SPI_RxISR_16BIT+0x42>
 80068e0:	e7eb      	b.n	80068ba <SPI_RxISR_16BIT+0x7a>
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
      {
        HAL_SPI_RxCpltCallback(hspi);
 80068e2:	f7ff fee3 	bl	80066ac <HAL_SPI_RxCpltCallback>
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
  }
}
 80068e6:	b003      	add	sp, #12
 80068e8:	f85d fb04 	ldr.w	pc, [sp], #4
#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80068ec:	f64f 71ef 	movw	r1, #65519	; 0xffef

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80068f0:	f043 0302 	orr.w	r3, r3, #2
 80068f4:	6543      	str	r3, [r0, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80068f6:	6091      	str	r1, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 80068f8:	f7ff fef4 	bl	80066e4 <HAL_SPI_ErrorCallback>
 80068fc:	e7cc      	b.n	8006898 <SPI_RxISR_16BIT+0x58>

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e7ab      	b.n	8006860 <SPI_RxISR_16BIT+0x20>
 8006908:	080070c1 	stmdaeq	r0, {r0, r6, r7, ip, sp, lr}

0800690c <SPI_CloseRxTx_ISR>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800690c:	b530      	push	{r4, r5, lr}
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 800690e:	4b48      	ldr	r3, [pc, #288]	; (8006a30 <SPI_CloseRxTx_ISR+0x124>)
 8006910:	4a48      	ldr	r2, [pc, #288]	; (8006a34 <SPI_CloseRxTx_ISR+0x128>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006918:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 800691a:	2264      	movs	r2, #100	; 0x64
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800691c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 800691e:	0a5b      	lsrs	r3, r3, #9
 8006920:	fb02 f303 	mul.w	r3, r2, r3
 8006924:	9300      	str	r3, [sp, #0]
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006926:	f7f9 fdbd 	bl	80004a4 <HAL_GetTick>

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	f022 0220 	bic.w	r2, r2, #32
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006932:	4605      	mov	r5, r0

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	e002      	b.n	800693e <SPI_CloseRxTx_ISR+0x32>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	0790      	lsls	r0, r2, #30
 800693c:	d408      	bmi.n	8006950 <SPI_CloseRxTx_ISR+0x44>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0)
 800693e:	9a00      	ldr	r2, [sp, #0]
 8006940:	1e51      	subs	r1, r2, #1
 8006942:	9100      	str	r1, [sp, #0]
 8006944:	2a00      	cmp	r2, #0
 8006946:	d1f7      	bne.n	8006938 <SPI_CloseRxTx_ISR+0x2c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006948:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800694a:	f042 0220 	orr.w	r2, r2, #32
 800694e:	6562      	str	r2, [r4, #84]	; 0x54
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	0611      	lsls	r1, r2, #24
 8006954:	d41a      	bmi.n	800698c <SPI_CloseRxTx_ISR+0x80>
 8006956:	68a2      	ldr	r2, [r4, #8]
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006958:	b92a      	cbnz	r2, 8006966 <SPI_CloseRxTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800695a:	9201      	str	r2, [sp, #4]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	9201      	str	r2, [sp, #4]
 8006964:	9a01      	ldr	r2, [sp, #4]
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	06d2      	lsls	r2, r2, #27
 800696a:	d442      	bmi.n	80069f2 <SPI_CloseRxTx_ISR+0xe6>
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800696c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800696e:	2b00      	cmp	r3, #0
 8006970:	d137      	bne.n	80069e2 <SPI_CloseRxTx_ISR+0xd6>
    {
      if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006972:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006976:	2b04      	cmp	r3, #4
      {
      	hspi->State = HAL_SPI_STATE_READY;
 8006978:	f04f 0301 	mov.w	r3, #1
 800697c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8006980:	4620      	mov	r0, r4
  else
  {
#endif /* USE_SPI_CRC */
    if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
    {
      if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006982:	d045      	beq.n	8006a10 <SPI_CloseRxTx_ISR+0x104>
        HAL_SPI_RxCpltCallback(hspi);
      }
      else
      {
      	hspi->State = HAL_SPI_STATE_READY;
        HAL_SPI_TxRxCpltCallback(hspi);
 8006984:	f7ff fe94 	bl	80066b0 <HAL_SPI_TxRxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006988:	b003      	add	sp, #12
 800698a:	bd30      	pop	{r4, r5, pc}
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800698c:	f7f9 fd8a 	bl	80004a4 <HAL_GetTick>
 8006990:	1b40      	subs	r0, r0, r5
 8006992:	2863      	cmp	r0, #99	; 0x63
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006994:	6823      	ldr	r3, [r4, #0]
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006996:	d9db      	bls.n	8006950 <SPI_CloseRxTx_ISR+0x44>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006998:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800699a:	685a      	ldr	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800699c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069a4:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a6:	68a2      	ldr	r2, [r4, #8]
 80069a8:	d036      	beq.n	8006a18 <SPI_CloseRxTx_ISR+0x10c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80069ac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80069b0:	d108      	bne.n	80069c4 <SPI_CloseRxTx_ISR+0xb8>
        {
          SPI_RESET_CRC(hspi);
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 80069b8:	4001      	ands	r1, r0
 80069ba:	6019      	str	r1, [r3, #0]
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80069c2:	6019      	str	r1, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80069c4:	2101      	movs	r1, #1
 80069c6:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80069cc:	f041 0120 	orr.w	r1, r1, #32
 80069d0:	6561      	str	r1, [r4, #84]	; 0x54
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
  
  /* Check the end of the transaction */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart)!=HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069d4:	2000      	movs	r0, #0
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
  
  /* Check the end of the transaction */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart)!=HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d6:	f041 0120 	orr.w	r1, r1, #32
 80069da:	6561      	str	r1, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069dc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 80069e0:	e7ba      	b.n	8006958 <SPI_CloseRxTx_ISR+0x4c>
        HAL_SPI_TxRxCpltCallback(hspi);
      }
    }
    else
    {
      hspi->State = HAL_SPI_STATE_READY;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7ff fe7b 	bl	80066e4 <HAL_SPI_ErrorCallback>
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80069ee:	b003      	add	sp, #12
 80069f0:	bd30      	pop	{r4, r5, pc}

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
  {
    hspi->State = HAL_SPI_STATE_READY;
 80069f2:	2201      	movs	r2, #1
 80069f4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80069f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80069fa:	f64f 71ef 	movw	r1, #65519	; 0xffef
#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
  {
    hspi->State = HAL_SPI_STATE_READY;
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80069fe:	f042 0202 	orr.w	r2, r2, #2
 8006a02:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    HAL_SPI_ErrorCallback(hspi);
 8006a04:	4620      	mov	r0, r4
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
  {
    hspi->State = HAL_SPI_STATE_READY;
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006a06:	6099      	str	r1, [r3, #8]
    HAL_SPI_ErrorCallback(hspi);
 8006a08:	f7ff fe6c 	bl	80066e4 <HAL_SPI_ErrorCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006a0c:	b003      	add	sp, #12
 8006a0e:	bd30      	pop	{r4, r5, pc}
    if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
    {
      if(hspi->State == HAL_SPI_STATE_BUSY_RX)
      {
      	hspi->State = HAL_SPI_STATE_READY;
        HAL_SPI_RxCpltCallback(hspi);
 8006a10:	f7ff fe4c 	bl	80066ac <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006a14:	b003      	add	sp, #12
 8006a16:	bd30      	pop	{r4, r5, pc}
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a1c:	d002      	beq.n	8006a24 <SPI_CloseRxTx_ISR+0x118>
 8006a1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006a22:	d1c2      	bne.n	80069aa <SPI_CloseRxTx_ISR+0x9e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a24:	6819      	ldr	r1, [r3, #0]
 8006a26:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006a2a:	6019      	str	r1, [r3, #0]
 8006a2c:	e7bd      	b.n	80069aa <SPI_CloseRxTx_ISR+0x9e>
 8006a2e:	bf00      	nop
 8006a30:	20000010 	andcs	r0, r0, r0, lsl r0
 8006a34:	057619f1 	ldrbeq	r1, [r6, #-2545]!	; 0xfffff60f

08006a38 <SPI_2linesTxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a38:	b410      	push	{r4}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8006a3a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006a3c:	6801      	ldr	r1, [r0, #0]
 8006a3e:	1c54      	adds	r4, r2, #1
 8006a40:	6304      	str	r4, [r0, #48]	; 0x30
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	730a      	strb	r2, [r1, #12]
  hspi->TxXferCount--;
 8006a46:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8006a48:	3a01      	subs	r2, #1
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	86c2      	strh	r2, [r0, #54]	; 0x36

  /* check the end of the transmission */
  if(hspi->TxXferCount == 0U)
 8006a4e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8006a50:	b292      	uxth	r2, r2
 8006a52:	b95a      	cbnz	r2, 8006a6c <SPI_2linesTxISR_8BIT+0x34>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a54:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006a56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006a5a:	d00e      	beq.n	8006a7a <SPI_2linesTxISR_8BIT+0x42>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006a5c:	6801      	ldr	r1, [r0, #0]
 8006a5e:	684a      	ldr	r2, [r1, #4]
 8006a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a64:	604a      	str	r2, [r1, #4]

    if(hspi->RxXferCount == 0U)
 8006a66:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	b113      	cbz	r3, 8006a72 <SPI_2linesTxISR_8BIT+0x3a>
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);

    if(hspi->RxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a76:	f7ff bf49 	b.w	800690c <SPI_CloseRxTx_ISR>
  if(hspi->TxXferCount == 0U)
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a7a:	6803      	ldr	r3, [r0, #0]
    if(hspi->RxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if(hspi->TxXferCount == 0U)
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a86:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a8e:	605a      	str	r2, [r3, #4]
    if(hspi->RxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop

08006a94 <SPI_2linesRxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a94:	b410      	push	{r4}
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8006a96:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006a98:	6801      	ldr	r1, [r0, #0]
 8006a9a:	1c54      	adds	r4, r2, #1
 8006a9c:	6384      	str	r4, [r0, #56]	; 0x38
 8006a9e:	7b09      	ldrb	r1, [r1, #12]
 8006aa0:	7011      	strb	r1, [r2, #0]
  hspi->RxXferCount--;
 8006aa2:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8006aa4:	3a01      	subs	r2, #1
 8006aa6:	b292      	uxth	r2, r2
 8006aa8:	87c2      	strh	r2, [r0, #62]	; 0x3e

  /* check end of the reception */
  if(hspi->RxXferCount == 0U)
 8006aaa:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8006aac:	b292      	uxth	r2, r2
 8006aae:	b95a      	cbnz	r2, 8006ac8 <SPI_2linesRxISR_8BIT+0x34>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ab0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006ab2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006ab6:	d00e      	beq.n	8006ad6 <SPI_2linesRxISR_8BIT+0x42>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ab8:	6801      	ldr	r1, [r0, #0]
 8006aba:	684a      	ldr	r2, [r1, #4]
 8006abc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ac0:	604a      	str	r2, [r1, #4]

    if(hspi->TxXferCount == 0U)
 8006ac2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	b113      	cbz	r3, 8006ace <SPI_2linesRxISR_8BIT+0x3a>
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

    if(hspi->TxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ad2:	f7ff bf1b 	b.w	800690c <SPI_CloseRxTx_ISR>
  if(hspi->RxXferCount == 0U)
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006ad6:	4a02      	ldr	r2, [pc, #8]	; (8006ae0 <SPI_2linesRxISR_8BIT+0x4c>)
 8006ad8:	6402      	str	r2, [r0, #64]	; 0x40
    if(hspi->TxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	08006ae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, sp, lr}

08006ae4 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006ae4:	b500      	push	{lr}
 8006ae6:	b083      	sub	sp, #12
  __IO uint8_t tmpreg = 0U;

  /* Read data register to flush CRC */
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8006ae8:	6803      	ldr	r3, [r0, #0]
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
  __IO uint8_t tmpreg = 0U;
 8006aea:	2200      	movs	r2, #0
 8006aec:	f88d 2007 	strb.w	r2, [sp, #7]

  /* Read data register to flush CRC */
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8006af0:	7b1a      	ldrb	r2, [r3, #12]
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	f88d 2007 	strb.w	r2, [sp, #7]

  /* To avoid GCC warning */

  UNUSED(tmpreg);
 8006af8:	f89d 2007 	ldrb.w	r2, [sp, #7]

   /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b02:	605a      	str	r2, [r3, #4]

  if(hspi->TxXferCount == 0U)
 8006b04:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	b90b      	cbnz	r3, 8006b0e <SPI_2linesRxISR_8BITCRC+0x2a>
  {
    SPI_CloseRxTx_ISR(hspi);
 8006b0a:	f7ff feff 	bl	800690c <SPI_CloseRxTx_ISR>
  }
}
 8006b0e:	b003      	add	sp, #12
 8006b10:	f85d fb04 	ldr.w	pc, [sp], #4

08006b14 <SPI_2linesTxISR_16BIT>:
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b14:	6b01      	ldr	r1, [r0, #48]	; 0x30
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b16:	b410      	push	{r4}
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b18:	6804      	ldr	r4, [r0, #0]
 8006b1a:	f831 2b02 	ldrh.w	r2, [r1], #2
 8006b1e:	60e2      	str	r2, [r4, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
  hspi->TxXferCount--;
 8006b20:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b22:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8006b24:	3a01      	subs	r2, #1
 8006b26:	b292      	uxth	r2, r2
 8006b28:	86c2      	strh	r2, [r0, #54]	; 0x36

  /* Enable CRC Transmission */
  if(hspi->TxXferCount == 0U)
 8006b2a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8006b2c:	b292      	uxth	r2, r2
 8006b2e:	b952      	cbnz	r2, 8006b46 <SPI_2linesTxISR_16BIT+0x32>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b30:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006b32:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006b36:	d00d      	beq.n	8006b54 <SPI_2linesTxISR_16BIT+0x40>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006b38:	6862      	ldr	r2, [r4, #4]
 8006b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b3e:	6062      	str	r2, [r4, #4]

    if(hspi->RxXferCount == 0U)
 8006b40:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	b113      	cbz	r3, 8006b4c <SPI_2linesTxISR_16BIT+0x38>
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);

    if(hspi->RxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
 8006b50:	f7ff bedc 	b.w	800690c <SPI_CloseRxTx_ISR>
  if(hspi->TxXferCount == 0U)
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b5a:	6023      	str	r3, [r4, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b62:	6063      	str	r3, [r4, #4]
    if(hspi->RxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop

08006b6c <SPI_2linesRxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b6c:	b410      	push	{r4}
  /* Receive data in 16 Bit mode */
  *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b6e:	6804      	ldr	r4, [r0, #0]
 8006b70:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006b72:	68e2      	ldr	r2, [r4, #12]
 8006b74:	f821 2b02 	strh.w	r2, [r1], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
  hspi->RxXferCount--;
 8006b78:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
  *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b7a:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8006b7c:	3a01      	subs	r2, #1
 8006b7e:	b292      	uxth	r2, r2
 8006b80:	87c2      	strh	r2, [r0, #62]	; 0x3e

  if(hspi->RxXferCount == 0U)
 8006b82:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8006b84:	b292      	uxth	r2, r2
 8006b86:	b952      	cbnz	r2, 8006b9e <SPI_2linesRxISR_16BIT+0x32>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b88:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006b8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006b8e:	d00d      	beq.n	8006bac <SPI_2linesRxISR_16BIT+0x40>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006b90:	6862      	ldr	r2, [r4, #4]
 8006b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b96:	6062      	str	r2, [r4, #4]

    if(hspi->TxXferCount == 0U)
 8006b98:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	b113      	cbz	r3, 8006ba4 <SPI_2linesRxISR_16BIT+0x38>
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);

    if(hspi->TxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ba8:	f7ff beb0 	b.w	800690c <SPI_CloseRxTx_ISR>
  if(hspi->RxXferCount == 0U)
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006bac:	4a02      	ldr	r2, [pc, #8]	; (8006bb8 <SPI_2linesRxISR_16BIT+0x4c>)
 8006bae:	6402      	str	r2, [r0, #64]	; 0x40
    if(hspi->TxXferCount == 0U)
    {
      SPI_CloseRxTx_ISR(hspi);
    }
  }
}
 8006bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	08006bbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}

08006bbc <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006bbc:	b500      	push	{lr}
 8006bbe:	b083      	sub	sp, #12
  /* Receive data in 16 Bit mode */
  __IO uint16_t tmpreg = 0U;

  /* Read data register to flush CRC */
  tmpreg = hspi->Instance->DR;
 8006bc0:	6803      	ldr	r3, [r0, #0]
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
  __IO uint16_t tmpreg = 0U;
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8ad 2006 	strh.w	r2, [sp, #6]

  /* Read data register to flush CRC */
  tmpreg = hspi->Instance->DR;
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	f8ad 2006 	strh.w	r2, [sp, #6]

  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006bd0:	f8bd 2006 	ldrh.w	r2, [sp, #6]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bda:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006bdc:	f7ff fe96 	bl	800690c <SPI_CloseRxTx_ISR>
}
 8006be0:	b003      	add	sp, #12
 8006be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006be6:	bf00      	nop

08006be8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006be8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006bea:	6b83      	ldr	r3, [r0, #56]	; 0x38

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006bec:	6819      	ldr	r1, [r3, #0]
 8006bee:	684a      	ldr	r2, [r1, #4]
 8006bf0:	f022 0203 	bic.w	r2, r2, #3
 8006bf4:	604a      	str	r2, [r1, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006bf8:	2101      	movs	r1, #1
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bfa:	f042 0210 	orr.w	r2, r2, #16
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
  HAL_SPI_ErrorCallback(hspi);
 8006c00:	4618      	mov	r0, r3

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
  hspi->State = HAL_SPI_STATE_READY;
 8006c02:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8006c06:	f7ff fd6d 	bl	80066e4 <HAL_SPI_ErrorCallback>
 8006c0a:	bd08      	pop	{r3, pc}

08006c0c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4606      	mov	r6, r0
 8006c10:	b082      	sub	sp, #8
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c12:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c14:	f7f9 fc46 	bl	80004a4 <HAL_GetTick>

  /* DMA Normal Mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c18:	6833      	ldr	r3, [r6, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	05d9      	lsls	r1, r3, #23
 8006c1e:	d418      	bmi.n	8006c52 <SPI_DMATransmitCplt+0x46>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	f022 0202 	bic.w	r2, r2, #2
 8006c28:	4605      	mov	r5, r0
 8006c2a:	605a      	str	r2, [r3, #4]
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	0612      	lsls	r2, r2, #24
 8006c30:	d414      	bmi.n	8006c5c <SPI_DMATransmitCplt+0x50>
 8006c32:	68a2      	ldr	r2, [r4, #8]
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c34:	b92a      	cbnz	r2, 8006c42 <SPI_DMATransmitCplt+0x36>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c36:	9201      	str	r2, [sp, #4]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	9201      	str	r2, [sp, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	9b01      	ldr	r3, [sp, #4]
    }

    hspi->TxXferCount = 0U;
    hspi->State = HAL_SPI_STATE_READY;
 8006c42:	2301      	movs	r3, #1
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
    }

    hspi->TxXferCount = 0U;
 8006c44:	2200      	movs	r2, #0
 8006c46:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006c48:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d131      	bne.n	8006cb6 <SPI_DMATransmitCplt+0xaa>
    {
      HAL_SPI_ErrorCallback(hspi);
      return;
    }
  }
  HAL_SPI_TxCpltCallback(hspi);
 8006c52:	4620      	mov	r0, r4
 8006c54:	f7ff fd28 	bl	80066a8 <HAL_SPI_TxCpltCallback>
}
 8006c58:	b002      	add	sp, #8
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006c5c:	f7f9 fc22 	bl	80004a4 <HAL_GetTick>
 8006c60:	1b40      	subs	r0, r0, r5
 8006c62:	2863      	cmp	r0, #99	; 0x63
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c64:	6823      	ldr	r3, [r4, #0]
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006c66:	d9e1      	bls.n	8006c2c <SPI_DMATransmitCplt+0x20>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c68:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c6a:	685a      	ldr	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c6c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c74:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c76:	68a2      	ldr	r2, [r4, #8]
 8006c78:	d022      	beq.n	8006cc0 <SPI_DMATransmitCplt+0xb4>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c7c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006c80:	d108      	bne.n	8006c94 <SPI_DMATransmitCplt+0x88>
        {
          SPI_RESET_CRC(hspi);
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8006c88:	4001      	ands	r1, r0
 8006c8a:	6019      	str	r1, [r3, #0]
 8006c8c:	6819      	ldr	r1, [r3, #0]
 8006c8e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8006c92:	6019      	str	r1, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8006c94:	2101      	movs	r1, #1
 8006c96:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c9a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006c9c:	f041 0120 	orr.w	r1, r1, #32
 8006ca0:	6561      	str	r1, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ca2:	6d61      	ldr	r1, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ca4:	2000      	movs	r0, #0
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ca6:	f041 0120 	orr.w	r1, r1, #32
 8006caa:	6561      	str	r1, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cac:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cb0:	2a00      	cmp	r2, #0
 8006cb2:	d1c6      	bne.n	8006c42 <SPI_DMATransmitCplt+0x36>
 8006cb4:	e7bf      	b.n	8006c36 <SPI_DMATransmitCplt+0x2a>
    hspi->TxXferCount = 0U;
    hspi->State = HAL_SPI_STATE_READY;

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
    {
      HAL_SPI_ErrorCallback(hspi);
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff fd14 	bl	80066e4 <HAL_SPI_ErrorCallback>
      return;
    }
  }
  HAL_SPI_TxCpltCallback(hspi);
}
 8006cbc:	b002      	add	sp, #8
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006cc4:	d002      	beq.n	8006ccc <SPI_DMATransmitCplt+0xc0>
 8006cc6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006cca:	d1d6      	bne.n	8006c7a <SPI_DMATransmitCplt+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ccc:	6819      	ldr	r1, [r3, #0]
 8006cce:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006cd2:	6019      	str	r1, [r3, #0]
 8006cd4:	e7d1      	b.n	8006c7a <SPI_DMATransmitCplt+0x6e>
 8006cd6:	bf00      	nop

08006cd8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b082      	sub	sp, #8
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
#if (USE_SPI_CRC != 0U)
  uint32_t tickstart = 0U;
  __IO uint16_t tmpreg = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f8ad 3006 	strh.w	r3, [sp, #6]
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ce4:	6b84      	ldr	r4, [r0, #56]	; 0x38
#if (USE_SPI_CRC != 0U)
  uint32_t tickstart = 0U;
  __IO uint16_t tmpreg = 0U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce6:	f7f9 fbdd 	bl	80004a4 <HAL_GetTick>
#endif /* USE_SPI_CRC */

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	05dd      	lsls	r5, r3, #23
 8006cf0:	d417      	bmi.n	8006d22 <SPI_DMAReceiveCplt+0x4a>
  {
#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	d01c      	beq.n	8006d36 <SPI_DMAReceiveCplt+0x5e>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	6861      	ldr	r1, [r4, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d00:	685a      	ldr	r2, [r3, #4]

    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d02:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d06:	f022 0203 	bic.w	r2, r2, #3
 8006d0a:	605a      	str	r2, [r3, #4]

    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d0c:	d02e      	beq.n	8006d6c <SPI_DMAReceiveCplt+0x94>
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
    }

    hspi->RxXferCount = 0U;
    hspi->State = HAL_SPI_STATE_READY;
 8006d0e:	2201      	movs	r2, #1
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
    }

    hspi->RxXferCount = 0U;
 8006d10:	2100      	movs	r1, #0
 8006d12:	87e1      	strh	r1, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006d14:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	06d2      	lsls	r2, r2, #27
 8006d1c:	d417      	bmi.n	8006d4e <SPI_DMAReceiveCplt+0x76>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d20:	b9fb      	cbnz	r3, 8006d62 <SPI_DMAReceiveCplt+0x8a>
    {
      HAL_SPI_ErrorCallback(hspi);
      return;
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7ff fcc2 	bl	80066ac <HAL_SPI_RxCpltCallback>
}
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006d2c:	f7f9 fbba 	bl	80004a4 <HAL_GetTick>
 8006d30:	1b80      	subs	r0, r0, r6
 8006d32:	2863      	cmp	r0, #99	; 0x63
 8006d34:	d826      	bhi.n	8006d84 <SPI_DMAReceiveCplt+0xac>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	07d1      	lsls	r1, r2, #31
 8006d3c:	d5f6      	bpl.n	8006d2c <SPI_DMAReceiveCplt+0x54>
 8006d3e:	6861      	ldr	r1, [r4, #4]
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	b292      	uxth	r2, r2
 8006d44:	f8ad 2006 	strh.w	r2, [sp, #6]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006d48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006d4c:	e7d8      	b.n	8006d00 <SPI_DMAReceiveCplt+0x28>

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006d4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006d50:	f64f 71ef 	movw	r1, #65519	; 0xffef

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006d54:	f042 0202 	orr.w	r2, r2, #2
 8006d58:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006d5a:	6099      	str	r1, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0df      	beq.n	8006d22 <SPI_DMAReceiveCplt+0x4a>
    {
      HAL_SPI_ErrorCallback(hspi);
 8006d62:	4620      	mov	r0, r4
 8006d64:	f7ff fcbe 	bl	80066e4 <HAL_SPI_ErrorCallback>
      return;
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
}
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);

    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d6c:	68a2      	ldr	r2, [r4, #8]
 8006d6e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006d72:	d002      	beq.n	8006d7a <SPI_DMAReceiveCplt+0xa2>
 8006d74:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006d78:	d1c9      	bne.n	8006d0e <SPI_DMAReceiveCplt+0x36>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e7c4      	b.n	8006d0e <SPI_DMAReceiveCplt+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d84:	6823      	ldr	r3, [r4, #0]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d86:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d88:	685a      	ldr	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d8a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d92:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d94:	d017      	beq.n	8006dc6 <SPI_DMAReceiveCplt+0xee>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006d98:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006d9c:	d108      	bne.n	8006db0 <SPI_DMAReceiveCplt+0xd8>
        {
          SPI_RESET_CRC(hspi);
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8006da4:	4002      	ands	r2, r0
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dae:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8006db0:	2201      	movs	r2, #1
 8006db2:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    {
      /* Wait until RXNE flag */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006db6:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006db8:	2000      	movs	r0, #0
    {
      /* Wait until RXNE flag */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006dba:	f042 0202 	orr.w	r2, r2, #2
 8006dbe:	6562      	str	r2, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dc0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 8006dc4:	e7bc      	b.n	8006d40 <SPI_DMAReceiveCplt+0x68>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc6:	68a2      	ldr	r2, [r4, #8]
 8006dc8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006dcc:	d002      	beq.n	8006dd4 <SPI_DMAReceiveCplt+0xfc>
 8006dce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006dd2:	d1e0      	bne.n	8006d96 <SPI_DMAReceiveCplt+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e7db      	b.n	8006d96 <SPI_DMAReceiveCplt+0xbe>
 8006dde:	bf00      	nop

08006de0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	4606      	mov	r6, r0
 8006de4:	b082      	sub	sp, #8
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  uint32_t tickstart = 0U;
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	f8ad 3006 	strh.w	r3, [sp, #6]
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dec:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t tickstart = 0U;
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dee:	f7f9 fb59 	bl	80004a4 <HAL_GetTick>

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006df2:	6833      	ldr	r3, [r6, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	05dd      	lsls	r5, r3, #23
 8006df8:	d418      	bmi.n	8006e2c <SPI_DMATransmitReceiveCplt+0x4c>
  {
#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e00:	4605      	mov	r5, r0
 8006e02:	d01d      	beq.n	8006e40 <SPI_DMATransmitReceiveCplt+0x60>
 8006e04:	6823      	ldr	r3, [r4, #0]
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	0611      	lsls	r1, r2, #24
 8006e0a:	d424      	bmi.n	8006e56 <SPI_DMATransmitReceiveCplt+0x76>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e0c:	685a      	ldr	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006e0e:	2100      	movs	r1, #0
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e10:	f022 0203 	bic.w	r2, r2, #3

    hspi->TxXferCount = 0U;
    hspi->RxXferCount = 0U;
    hspi->State = HAL_SPI_STATE_READY;
 8006e14:	2001      	movs	r0, #1
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e16:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006e18:	86e1      	strh	r1, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006e1a:	87e1      	strh	r1, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006e1c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	06d2      	lsls	r2, r2, #27
 8006e24:	d438      	bmi.n	8006e98 <SPI_DMATransmitReceiveCplt+0xb8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d13f      	bne.n	8006eac <SPI_DMATransmitReceiveCplt+0xcc>
    {
      HAL_SPI_ErrorCallback(hspi);
      return;
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7ff fc3f 	bl	80066b0 <HAL_SPI_TxRxCpltCallback>
}
 8006e32:	b002      	add	sp, #8
 8006e34:	bd70      	pop	{r4, r5, r6, pc}
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006e36:	f7f9 fb35 	bl	80004a4 <HAL_GetTick>
 8006e3a:	1b40      	subs	r0, r0, r5
 8006e3c:	2863      	cmp	r0, #99	; 0x63
 8006e3e:	d850      	bhi.n	8006ee2 <SPI_DMATransmitReceiveCplt+0x102>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	07d0      	lsls	r0, r2, #31
 8006e46:	d5f6      	bpl.n	8006e36 <SPI_DMATransmitReceiveCplt+0x56>
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      }
      /* Read CRC to Flush DR and RXNE flag */
      tmpreg = hspi->Instance->DR;
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	b292      	uxth	r2, r2
 8006e4c:	f8ad 2006 	strh.w	r2, [sp, #6]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006e50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006e54:	e7d7      	b.n	8006e06 <SPI_DMATransmitReceiveCplt+0x26>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006e56:	f7f9 fb25 	bl	80004a4 <HAL_GetTick>
 8006e5a:	1b40      	subs	r0, r0, r5
 8006e5c:	2863      	cmp	r0, #99	; 0x63
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e5e:	6823      	ldr	r3, [r4, #0]
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006e60:	d9d1      	bls.n	8006e06 <SPI_DMATransmitReceiveCplt+0x26>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e62:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e64:	685a      	ldr	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e66:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e6e:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e70:	d02b      	beq.n	8006eca <SPI_DMATransmitReceiveCplt+0xea>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e74:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006e78:	d01d      	beq.n	8006eb6 <SPI_DMATransmitReceiveCplt+0xd6>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e80:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006e82:	f042 0220 	orr.w	r2, r2, #32
 8006e86:	6562      	str	r2, [r4, #84]	; 0x54
    }
#endif /* USE_SPI_CRC */
    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e88:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e8a:	2100      	movs	r1, #0
    }
#endif /* USE_SPI_CRC */
    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e8c:	f042 0220 	orr.w	r2, r2, #32
 8006e90:	6562      	str	r2, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e92:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8006e96:	e7b9      	b.n	8006e0c <SPI_DMATransmitReceiveCplt+0x2c>

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006e98:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006e9a:	f64f 71ef 	movw	r1, #65519	; 0xffef

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006e9e:	f042 0202 	orr.w	r2, r2, #2
 8006ea2:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006ea4:	6099      	str	r1, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ea6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0bf      	beq.n	8006e2c <SPI_DMATransmitReceiveCplt+0x4c>
    {
      HAL_SPI_ErrorCallback(hspi);
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7ff fc19 	bl	80066e4 <HAL_SPI_ErrorCallback>
      return;
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
}
 8006eb2:	b002      	add	sp, #8
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
        {
          SPI_RESET_CRC(hspi);
 8006eb6:	6819      	ldr	r1, [r3, #0]
 8006eb8:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8006ebc:	400a      	ands	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	e7d7      	b.n	8006e7a <SPI_DMATransmitReceiveCplt+0x9a>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eca:	68a2      	ldr	r2, [r4, #8]
 8006ecc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006ed0:	d002      	beq.n	8006ed8 <SPI_DMATransmitReceiveCplt+0xf8>
 8006ed2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006ed6:	d1cc      	bne.n	8006e72 <SPI_DMATransmitReceiveCplt+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e7c7      	b.n	8006e72 <SPI_DMATransmitReceiveCplt+0x92>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ee2:	6823      	ldr	r3, [r4, #0]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ee4:	6861      	ldr	r1, [r4, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ee6:	685a      	ldr	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ee8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ef0:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef2:	d017      	beq.n	8006f24 <SPI_DMATransmitReceiveCplt+0x144>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ef4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006ef6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006efa:	d108      	bne.n	8006f0e <SPI_DMATransmitReceiveCplt+0x12e>
        {
          SPI_RESET_CRC(hspi);
 8006efc:	6819      	ldr	r1, [r3, #0]
 8006efe:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8006f02:	400a      	ands	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      /* Wait the CRC data */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006f14:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f16:	2100      	movs	r1, #0
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      /* Wait the CRC data */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006f18:	f042 0202 	orr.w	r2, r2, #2
 8006f1c:	6562      	str	r2, [r4, #84]	; 0x54
        }

        hspi->State= HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f1e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8006f22:	e791      	b.n	8006e48 <SPI_DMATransmitReceiveCplt+0x68>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f24:	68a2      	ldr	r2, [r4, #8]
 8006f26:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006f2a:	d002      	beq.n	8006f32 <SPI_DMATransmitReceiveCplt+0x152>
 8006f2c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006f30:	d1e0      	bne.n	8006ef4 <SPI_DMATransmitReceiveCplt+0x114>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	e7db      	b.n	8006ef4 <SPI_DMATransmitReceiveCplt+0x114>

08006f3c <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8006f3c:	6802      	ldr	r2, [r0, #0]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f3e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8006f40:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8006f42:	6893      	ldr	r3, [r2, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8006f44:	f003 0541 	and.w	r5, r3, #65	; 0x41
 8006f48:	2d01      	cmp	r5, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8006f4e:	d054      	beq.n	8006ffa <HAL_SPI_IRQHandler+0xbe>
    hspi->RxISR(hspi);
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8006f50:	079d      	lsls	r5, r3, #30
 8006f52:	d44c      	bmi.n	8006fee <HAL_SPI_IRQHandler+0xb2>
    hspi->TxISR(hspi);
    return;
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8006f54:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8006f58:	d047      	beq.n	8006fea <HAL_SPI_IRQHandler+0xae>
 8006f5a:	068d      	lsls	r5, r1, #26
 8006f5c:	d545      	bpl.n	8006fea <HAL_SPI_IRQHandler+0xae>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8006f5e:	0658      	lsls	r0, r3, #25
 8006f60:	d50e      	bpl.n	8006f80 <HAL_SPI_IRQHandler+0x44>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f62:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006f66:	2803      	cmp	r0, #3
 8006f68:	d050      	beq.n	800700c <HAL_SPI_IRQHandler+0xd0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f6c:	2500      	movs	r5, #0
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f6e:	f040 0004 	orr.w	r0, r0, #4
 8006f72:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f74:	9500      	str	r5, [sp, #0]
 8006f76:	68d0      	ldr	r0, [r2, #12]
 8006f78:	9000      	str	r0, [sp, #0]
 8006f7a:	6890      	ldr	r0, [r2, #8]
 8006f7c:	9000      	str	r0, [sp, #0]
 8006f7e:	9800      	ldr	r0, [sp, #0]
        return;
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8006f80:	069d      	lsls	r5, r3, #26
 8006f82:	d50c      	bpl.n	8006f9e <HAL_SPI_IRQHandler+0x62>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f84:	6d60      	ldr	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f86:	2500      	movs	r5, #0
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f88:	f040 0001 	orr.w	r0, r0, #1
 8006f8c:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f8e:	9502      	str	r5, [sp, #8]
 8006f90:	6890      	ldr	r0, [r2, #8]
 8006f92:	9002      	str	r0, [sp, #8]
 8006f94:	6810      	ldr	r0, [r2, #0]
 8006f96:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006f9a:	6010      	str	r0, [r2, #0]
 8006f9c:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 8006f9e:	05d8      	lsls	r0, r3, #23
 8006fa0:	d508      	bpl.n	8006fb4 <HAL_SPI_IRQHandler+0x78>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006fa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fa4:	2000      	movs	r0, #0
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006fa6:	f043 0308 	orr.w	r3, r3, #8
 8006faa:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fac:	9003      	str	r0, [sp, #12]
 8006fae:	6893      	ldr	r3, [r2, #8]
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	9b03      	ldr	r3, [sp, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006fb6:	b1c3      	cbz	r3, 8006fea <HAL_SPI_IRQHandler+0xae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006fb8:	6853      	ldr	r3, [r2, #4]
 8006fba:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006fbe:	6053      	str	r3, [r2, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006fc0:	2001      	movs	r0, #1
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006fc2:	078b      	lsls	r3, r1, #30
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);

      hspi->State = HAL_SPI_STATE_READY;
 8006fc4:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006fc8:	d01c      	beq.n	8007004 <HAL_SPI_IRQHandler+0xc8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fca:	6853      	ldr	r3, [r2, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8006fcc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	6053      	str	r3, [r2, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8006fd4:	b118      	cbz	r0, 8006fde <HAL_SPI_IRQHandler+0xa2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <HAL_SPI_IRQHandler+0xe0>)
 8006fd8:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8006fda:	f7fd fa61 	bl	80044a0 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8006fde:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006fe0:	b118      	cbz	r0, 8006fea <HAL_SPI_IRQHandler+0xae>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fe2:	4b0e      	ldr	r3, [pc, #56]	; (800701c <HAL_SPI_IRQHandler+0xe0>)
 8006fe4:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8006fe6:	f7fd fa5b 	bl	80044a0 <HAL_DMA_Abort_IT>
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8006fea:	b005      	add	sp, #20
 8006fec:	bd30      	pop	{r4, r5, pc}
    hspi->RxISR(hspi);
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8006fee:	0608      	lsls	r0, r1, #24
 8006ff0:	d5b0      	bpl.n	8006f54 <HAL_SPI_IRQHandler+0x18>
  {
    hspi->TxISR(hspi);
 8006ff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4798      	blx	r3
    return;
 8006ff8:	e7f7      	b.n	8006fea <HAL_SPI_IRQHandler+0xae>
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8006ffa:	064d      	lsls	r5, r1, #25
 8006ffc:	d5a8      	bpl.n	8006f50 <HAL_SPI_IRQHandler+0x14>
  {
    hspi->RxISR(hspi);
 8006ffe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007000:	4798      	blx	r3
    return;
 8007002:	e7f2      	b.n	8006fea <HAL_SPI_IRQHandler+0xae>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8007004:	4620      	mov	r0, r4
 8007006:	f7ff fb6d 	bl	80066e4 <HAL_SPI_ErrorCallback>
 800700a:	e7ee      	b.n	8006fea <HAL_SPI_IRQHandler+0xae>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800700c:	2300      	movs	r3, #0
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	68d3      	ldr	r3, [r2, #12]
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	6893      	ldr	r3, [r2, #8]
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	9b01      	ldr	r3, [sp, #4]
        return;
 800701a:	e7e6      	b.n	8006fea <HAL_SPI_IRQHandler+0xae>
 800701c:	08007021 	stmdaeq	r0, {r0, r5, ip, sp, lr}

08007020 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007020:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007022:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->RxXferCount = 0;
 8007024:	2200      	movs	r2, #0
 8007026:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0;

  HAL_SPI_ErrorCallback(hspi);
 8007028:	4618      	mov	r0, r3
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hspi->RxXferCount = 0;
  hspi->TxXferCount = 0;
 800702a:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 800702c:	f7ff fb5a 	bl	80066e4 <HAL_SPI_ErrorCallback>
 8007030:	bd08      	pop	{r3, pc}
 8007032:	bf00      	nop

08007034 <SPI_RxISR_8BITCRC>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007034:	b500      	push	{lr}
 8007036:	b083      	sub	sp, #12
  __IO uint8_t tmpreg = 0U;

  /* Read data register to flush CRC */
  tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 8007038:	6803      	ldr	r3, [r0, #0]
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800703a:	6841      	ldr	r1, [r0, #4]
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
  __IO uint8_t tmpreg = 0U;
 800703c:	2200      	movs	r2, #0
 800703e:	f88d 2003 	strb.w	r2, [sp, #3]

  /* Read data register to flush CRC */
  tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 8007042:	7b1a      	ldrb	r2, [r3, #12]
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	f88d 2003 	strb.w	r2, [sp, #3]

  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800704a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800704e:	685a      	ldr	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007050:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007058:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800705a:	6882      	ldr	r2, [r0, #8]
 800705c:	d018      	beq.n	8007090 <SPI_RxISR_8BITCRC+0x5c>
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800705e:	b92a      	cbnz	r2, 800706c <SPI_RxISR_8BITCRC+0x38>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007060:	9201      	str	r2, [sp, #4]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	9201      	str	r2, [sp, #4]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	9a01      	ldr	r2, [sp, #4]
    }
    hspi->State = HAL_SPI_STATE_READY;
 800706c:	2201      	movs	r2, #1
 800706e:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	06d2      	lsls	r2, r2, #27
 8007076:	d416      	bmi.n	80070a6 <SPI_RxISR_8BITCRC+0x72>
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007078:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800707a:	b123      	cbz	r3, 8007086 <SPI_RxISR_8BITCRC+0x52>
      {
        HAL_SPI_RxCpltCallback(hspi);
      }
      else
      {
        HAL_SPI_ErrorCallback(hspi);
 800707c:	f7ff fb32 	bl	80066e4 <HAL_SPI_ErrorCallback>

  /* To avoid GCC warning */
  UNUSED(tmpreg);

  SPI_CloseRx_ISR(hspi);
}
 8007080:	b003      	add	sp, #12
 8007082:	f85d fb04 	ldr.w	pc, [sp], #4
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
      {
        HAL_SPI_RxCpltCallback(hspi);
 8007086:	f7ff fb11 	bl	80066ac <HAL_SPI_RxCpltCallback>

  /* To avoid GCC warning */
  UNUSED(tmpreg);

  SPI_CloseRx_ISR(hspi);
}
 800708a:	b003      	add	sp, #12
 800708c:	f85d fb04 	ldr.w	pc, [sp], #4
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007090:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007094:	d002      	beq.n	800709c <SPI_RxISR_8BITCRC+0x68>
 8007096:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800709a:	d1e0      	bne.n	800705e <SPI_RxISR_8BITCRC+0x2a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800709c:	6819      	ldr	r1, [r3, #0]
 800709e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80070a2:	6019      	str	r1, [r3, #0]
 80070a4:	e7db      	b.n	800705e <SPI_RxISR_8BITCRC+0x2a>

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070a6:	6d42      	ldr	r2, [r0, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80070a8:	f64f 71ef 	movw	r1, #65519	; 0xffef

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070ac:	f042 0202 	orr.w	r2, r2, #2
 80070b0:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80070b2:	6099      	str	r1, [r3, #8]
      HAL_SPI_ErrorCallback(hspi);
 80070b4:	f7ff fb16 	bl	80066e4 <HAL_SPI_ErrorCallback>

  /* To avoid GCC warning */
  UNUSED(tmpreg);

  SPI_CloseRx_ISR(hspi);
}
 80070b8:	b003      	add	sp, #12
 80070ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80070be:	bf00      	nop

080070c0 <SPI_RxISR_16BITCRC>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80070c0:	b500      	push	{lr}
 80070c2:	b083      	sub	sp, #12
  __IO uint16_t tmpreg = 0U;

  /* Read data register to flush CRC */
  tmpreg = hspi->Instance->DR;
 80070c4:	6803      	ldr	r3, [r0, #0]
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070c6:	6841      	ldr	r1, [r0, #4]
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
  __IO uint16_t tmpreg = 0U;
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8ad 2002 	strh.w	r2, [sp, #2]

  /* Read data register to flush CRC */
  tmpreg = hspi->Instance->DR;
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	b292      	uxth	r2, r2
 80070d2:	f8ad 2002 	strh.w	r2, [sp, #2]

  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80070d6:	f8bd 2002 	ldrh.w	r2, [sp, #2]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070e0:	605a      	str	r2, [r3, #4]
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80070e2:	685a      	ldr	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80070e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070ec:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ee:	6882      	ldr	r2, [r0, #8]
 80070f0:	d018      	beq.n	8007124 <SPI_RxISR_16BITCRC+0x64>
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070f2:	b92a      	cbnz	r2, 8007100 <SPI_RxISR_16BITCRC+0x40>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070f4:	9201      	str	r2, [sp, #4]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	9201      	str	r2, [sp, #4]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	9201      	str	r2, [sp, #4]
 80070fe:	9a01      	ldr	r2, [sp, #4]
    }
    hspi->State = HAL_SPI_STATE_READY;
 8007100:	2201      	movs	r2, #1
 8007102:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	06d2      	lsls	r2, r2, #27
 800710a:	d416      	bmi.n	800713a <SPI_RxISR_16BITCRC+0x7a>
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800710c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800710e:	b123      	cbz	r3, 800711a <SPI_RxISR_16BITCRC+0x5a>
      {
        HAL_SPI_RxCpltCallback(hspi);
      }
      else
      {
        HAL_SPI_ErrorCallback(hspi);
 8007110:	f7ff fae8 	bl	80066e4 <HAL_SPI_ErrorCallback>

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

  SPI_CloseRx_ISR(hspi);
}
 8007114:	b003      	add	sp, #12
 8007116:	f85d fb04 	ldr.w	pc, [sp], #4
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
      {
        HAL_SPI_RxCpltCallback(hspi);
 800711a:	f7ff fac7 	bl	80066ac <HAL_SPI_RxCpltCallback>

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

  SPI_CloseRx_ISR(hspi);
}
 800711e:	b003      	add	sp, #12
 8007120:	f85d fb04 	ldr.w	pc, [sp], #4
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007124:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007128:	d002      	beq.n	8007130 <SPI_RxISR_16BITCRC+0x70>
 800712a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800712e:	d1e0      	bne.n	80070f2 <SPI_RxISR_16BITCRC+0x32>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007130:	6819      	ldr	r1, [r3, #0]
 8007132:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007136:	6019      	str	r1, [r3, #0]
 8007138:	e7db      	b.n	80070f2 <SPI_RxISR_16BITCRC+0x32>

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800713a:	6d42      	ldr	r2, [r0, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800713c:	f64f 71ef 	movw	r1, #65519	; 0xffef

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007140:	f042 0202 	orr.w	r2, r2, #2
 8007144:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007146:	6099      	str	r1, [r3, #8]
      HAL_SPI_ErrorCallback(hspi);
 8007148:	f7ff facc 	bl	80066e4 <HAL_SPI_ErrorCallback>

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

  SPI_CloseRx_ISR(hspi);
}
 800714c:	b003      	add	sp, #12
 800714e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007152:	bf00      	nop

08007154 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007154:	b500      	push	{lr}
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007156:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007158:	6802      	ldr	r2, [r0, #0]
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	6381      	str	r1, [r0, #56]	; 0x38
 800715e:	7b12      	ldrb	r2, [r2, #12]
 8007160:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8007162:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8007164:	3b01      	subs	r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	87c3      	strh	r3, [r0, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800716a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b01      	cmp	r3, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007170:	b083      	sub	sp, #12
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
  hspi->RxXferCount--;

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007172:	d023      	beq.n	80071bc <SPI_RxISR_8BIT+0x68>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 8007174:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8007176:	b29b      	uxth	r3, r3
 8007178:	b9c3      	cbnz	r3, 80071ac <SPI_RxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800717a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800717c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007180:	d017      	beq.n	80071b2 <SPI_RxISR_8BIT+0x5e>
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007182:	6803      	ldr	r3, [r0, #0]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007184:	6841      	ldr	r1, [r0, #4]
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007186:	685a      	ldr	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007188:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800718c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007190:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007192:	6882      	ldr	r2, [r0, #8]
 8007194:	d022      	beq.n	80071dc <SPI_RxISR_8BIT+0x88>
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007196:	b1d2      	cbz	r2, 80071ce <SPI_RxISR_8BIT+0x7a>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
    }
    hspi->State = HAL_SPI_STATE_READY;
 8007198:	2201      	movs	r2, #1
 800719a:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	06d2      	lsls	r2, r2, #27
 80071a2:	d42d      	bmi.n	8007200 <SPI_RxISR_8BIT+0xac>
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80071a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80071a6:	b333      	cbz	r3, 80071f6 <SPI_RxISR_8BIT+0xa2>
      {
        HAL_SPI_RxCpltCallback(hspi);
      }
      else
      {
        HAL_SPI_ErrorCallback(hspi);
 80071a8:	f7ff fa9c 	bl	80066e4 <HAL_SPI_ErrorCallback>
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
  }
}
 80071ac:	b003      	add	sp, #12
 80071ae:	f85d fb04 	ldr.w	pc, [sp], #4
  if(hspi->RxXferCount == 0U)
  {
#if (USE_SPI_CRC != 0U)
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80071b2:	4b1b      	ldr	r3, [pc, #108]	; (8007220 <SPI_RxISR_8BIT+0xcc>)
 80071b4:	6403      	str	r3, [r0, #64]	; 0x40
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
  }
}
 80071b6:	b003      	add	sp, #12
 80071b8:	f85d fb04 	ldr.w	pc, [sp], #4
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
  hspi->RxXferCount--;

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80071bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c2:	d027      	beq.n	8007214 <SPI_RxISR_8BIT+0xc0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 80071c4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0da      	beq.n	8007182 <SPI_RxISR_8BIT+0x2e>
 80071cc:	e7ee      	b.n	80071ac <SPI_RxISR_8BIT+0x58>
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	9201      	str	r2, [sp, #4]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	9201      	str	r2, [sp, #4]
 80071d8:	9a01      	ldr	r2, [sp, #4]
 80071da:	e7dd      	b.n	8007198 <SPI_RxISR_8BIT+0x44>
{
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071dc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80071e0:	d002      	beq.n	80071e8 <SPI_RxISR_8BIT+0x94>
 80071e2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80071e6:	d1d6      	bne.n	8007196 <SPI_RxISR_8BIT+0x42>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80071ee:	6019      	str	r1, [r3, #0]
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d1d1      	bne.n	8007198 <SPI_RxISR_8BIT+0x44>
 80071f4:	e7eb      	b.n	80071ce <SPI_RxISR_8BIT+0x7a>
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
      {
        HAL_SPI_RxCpltCallback(hspi);
 80071f6:	f7ff fa59 	bl	80066ac <HAL_SPI_RxCpltCallback>
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
  }
}
 80071fa:	b003      	add	sp, #12
 80071fc:	f85d fb04 	ldr.w	pc, [sp], #4

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007200:	6d42      	ldr	r2, [r0, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007202:	f64f 71ef 	movw	r1, #65519	; 0xffef

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007206:	f042 0202 	orr.w	r2, r2, #2
 800720a:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800720c:	6099      	str	r1, [r3, #8]
      HAL_SPI_ErrorCallback(hspi);
 800720e:	f7ff fa69 	bl	80066e4 <HAL_SPI_ErrorCallback>
 8007212:	e7cb      	b.n	80071ac <SPI_RxISR_8BIT+0x58>

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007214:	6802      	ldr	r2, [r0, #0]
 8007216:	6813      	ldr	r3, [r2, #0]
 8007218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e7a9      	b.n	8007174 <SPI_RxISR_8BIT+0x20>
 8007220:	08007035 	stmdaeq	r0, {r0, r2, r4, r5, ip, sp, lr}

08007224 <HAL_SPI_GetState>:
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  /* Return SPI handle state */
  return hspi->State;
 8007224:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop

0800722c <HAL_SPI_GetError>:
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800722c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800722e:	4770      	bx	lr

08007230 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8007230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8007234:	4c24      	ldr	r4, [pc, #144]	; (80072c8 <SPIx_Init+0x98>)

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8007236:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8007238:	4620      	mov	r0, r4
 800723a:	f7ff fff3 	bl	8007224 <HAL_SPI_GetState>
 800723e:	4603      	mov	r3, r0
 8007240:	2800      	cmp	r0, #0
 8007242:	d13e      	bne.n	80072c2 <SPIx_Init+0x92>
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007244:	4a21      	ldr	r2, [pc, #132]	; (80072cc <SPIx_Init+0x9c>)
 8007246:	9001      	str	r0, [sp, #4]
static void SPIx_Init(void)
{
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8007248:	4921      	ldr	r1, [pc, #132]	; (80072d0 <SPIx_Init+0xa0>)
 800724a:	6021      	str	r1, [r4, #0]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800724c:	6c51      	ldr	r1, [r2, #68]	; 0x44
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800724e:	60a3      	str	r3, [r4, #8]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007254:	6451      	str	r1, [r2, #68]	; 0x44
 8007256:	6c51      	ldr	r1, [r2, #68]	; 0x44

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8007258:	6163      	str	r3, [r4, #20]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800725a:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 800725e:	9101      	str	r1, [sp, #4]
 8007260:	9901      	ldr	r1, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007262:	9302      	str	r3, [sp, #8]
 8007264:	6b11      	ldr	r1, [r2, #48]	; 0x30
    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8007266:	6123      	str	r3, [r4, #16]

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007268:	f041 0120 	orr.w	r1, r1, #32
 800726c:	6311      	str	r1, [r2, #48]	; 0x30
 800726e:	6b12      	ldr	r2, [r2, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8007270:	4818      	ldr	r0, [pc, #96]	; (80072d4 <SPIx_Init+0xa4>)
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8007272:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007274:	f002 0220 	and.w	r2, r2, #32
 8007278:	9202      	str	r2, [sp, #8]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800727a:	f44f 7c00 	mov.w	ip, #512	; 0x200
  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800727e:	2202      	movs	r2, #2
    SpiHandle.Init.CRCPolynomial  = 7;
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8007280:	f44f 7e82 	mov.w	lr, #260	; 0x104
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007284:	f04f 0918 	mov.w	r9, #24
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8007288:	f04f 0807 	mov.w	r8, #7

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800728c:	f44f 7760 	mov.w	r7, #896	; 0x380
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8007290:	2601      	movs	r6, #1
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8007292:	2505      	movs	r5, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8007294:	a903      	add	r1, sp, #12
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8007296:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8007298:	6223      	str	r3, [r4, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800729a:	6263      	str	r3, [r4, #36]	; 0x24
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800729c:	f8c4 901c 	str.w	r9, [r4, #28]

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80072a0:	9b02      	ldr	r3, [sp, #8]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80072a2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80072a6:	f8c4 c018 	str.w	ip, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80072aa:	f8c4 e004 	str.w	lr, [r4, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80072ae:	9703      	str	r7, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80072b0:	9204      	str	r2, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80072b2:	9205      	str	r2, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80072b4:	9606      	str	r6, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80072b6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80072b8:	f7f9 fac8 	bl	800084c <HAL_GPIO_Init>
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
  
    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 80072bc:	4620      	mov	r0, r4
 80072be:	f7fe f8b7 	bl	8005430 <HAL_SPI_Init>
  } 
}
 80072c2:	b009      	add	sp, #36	; 0x24
 80072c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072c8:	2000002c 	andcs	r0, r0, ip, lsr #32
 80072cc:	40023800 	andmi	r3, r2, r0, lsl #16
 80072d0:	40015000 	andmi	r5, r1, r0
 80072d4:	40021400 	andmi	r1, r2, r0, lsl #8

080072d8 <BSP_GetVersion>:
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t BSP_GetVersion(void)
{
  return __STM32F429I_DISCO_BSP_VERSION;
}
 80072d8:	4800      	ldr	r0, [pc, #0]	; (80072dc <BSP_GetVersion+0x4>)
 80072da:	4770      	bx	lr
 80072dc:	02010400 	andeq	r0, r1, #0, 8

080072e0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80072e0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80072e2:	4604      	mov	r4, r0
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80072e4:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80072e6:	b328      	cbz	r0, 8007334 <BSP_LED_Init+0x54>
 80072e8:	2801      	cmp	r0, #1
 80072ea:	d016      	beq.n	800731a <BSP_LED_Init+0x3a>

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80072ee:	4d18      	ldr	r5, [pc, #96]	; (8007350 <BSP_LED_Init+0x70>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80072f0:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80072f4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80072f8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072fa:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80072fc:	2202      	movs	r2, #2
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80072fe:	a903      	add	r1, sp, #12
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007300:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007302:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007304:	9206      	str	r2, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8007306:	f7f9 faa1 	bl	800084c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800730a:	4631      	mov	r1, r6
 800730c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8007310:	2200      	movs	r2, #0
 8007312:	f7f9 fc91 	bl	8000c38 <HAL_GPIO_WritePin>
}
 8007316:	b008      	add	sp, #32
 8007318:	bd70      	pop	{r4, r5, r6, pc}
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800731a:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <BSP_LED_Init+0x74>)
 800731c:	2200      	movs	r2, #0
 800731e:	9202      	str	r2, [sp, #8]
 8007320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	9302      	str	r3, [sp, #8]
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	e7db      	b.n	80072ec <BSP_LED_Init+0xc>
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <BSP_LED_Init+0x74>)
 8007336:	9001      	str	r0, [sp, #4]
 8007338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800733a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800733e:	631a      	str	r2, [r3, #48]	; 0x30
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	e7cf      	b.n	80072ec <BSP_LED_Init+0xc>
 800734c:	08007e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp, lr}
 8007350:	20000014 	andcs	r0, r0, r4, lsl r0
 8007354:	40023800 	andmi	r3, r2, r0, lsl #16

08007358 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8007358:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800735a:	4904      	ldr	r1, [pc, #16]	; (800736c <BSP_LED_On+0x14>)
 800735c:	4a04      	ldr	r2, [pc, #16]	; (8007370 <BSP_LED_On+0x18>)
 800735e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007362:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007366:	2201      	movs	r2, #1
 8007368:	f7f9 bc66 	b.w	8000c38 <HAL_GPIO_WritePin>
 800736c:	20000014 	andcs	r0, r0, r4, lsl r0
 8007370:	08007e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp, lr}

08007374 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8007374:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8007376:	4904      	ldr	r1, [pc, #16]	; (8007388 <BSP_LED_Off+0x14>)
 8007378:	4a04      	ldr	r2, [pc, #16]	; (800738c <BSP_LED_Off+0x18>)
 800737a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800737e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007382:	2200      	movs	r2, #0
 8007384:	f7f9 bc58 	b.w	8000c38 <HAL_GPIO_WritePin>
 8007388:	20000014 	andcs	r0, r0, r4, lsl r0
 800738c:	08007e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp, lr}

08007390 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8007390:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8007392:	4904      	ldr	r1, [pc, #16]	; (80073a4 <BSP_LED_Toggle+0x14>)
 8007394:	4a04      	ldr	r2, [pc, #16]	; (80073a8 <BSP_LED_Toggle+0x18>)
 8007396:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800739a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800739e:	f7f9 bc4f 	b.w	8000c40 <HAL_GPIO_TogglePin>
 80073a2:	bf00      	nop
 80073a4:	20000014 	andcs	r0, r0, r4, lsl r0
 80073a8:	08007e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp, lr}

080073ac <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80073ac:	b510      	push	{r4, lr}
 80073ae:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80073b0:	b950      	cbnz	r0, 80073c8 <BSP_PB_Init+0x1c>
 80073b2:	4b19      	ldr	r3, [pc, #100]	; (8007418 <BSP_PB_Init+0x6c>)
 80073b4:	9000      	str	r0, [sp, #0]
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	f042 0201 	orr.w	r2, r2, #1
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	9b00      	ldr	r3, [sp, #0]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 80073c8:	b119      	cbz	r1, 80073d2 <BSP_PB_Init+0x26>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
 80073ca:	2901      	cmp	r1, #1
 80073cc:	d00f      	beq.n	80073ee <BSP_PB_Init+0x42>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80073ce:	b006      	add	sp, #24
 80073d0:	bd10      	pop	{r4, pc}
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80073d2:	4b12      	ldr	r3, [pc, #72]	; (800741c <BSP_PB_Init+0x70>)
  
  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073d4:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80073d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  BUTTONx_GPIO_CLK_ENABLE(Button);
  
  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80073da:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80073dc:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80073de:	a901      	add	r1, sp, #4
  BUTTONx_GPIO_CLK_ENABLE(Button);
  
  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80073e0:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80073e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80073e4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80073e6:	f7f9 fa31 	bl	800084c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80073ea:	b006      	add	sp, #24
 80073ec:	bd10      	pop	{r4, pc}
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80073ee:	4a0b      	ldr	r2, [pc, #44]	; (800741c <BSP_PB_Init+0x70>)
  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <BSP_PB_Init+0x74>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80073f2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80073f6:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f8:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80073fa:	a901      	add	r1, sp, #4
  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80073fc:	9302      	str	r3, [sp, #8]
  
  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073fe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007400:	f7f9 fa24 	bl	800084c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007404:	4622      	mov	r2, r4
 8007406:	210f      	movs	r1, #15
 8007408:	2006      	movs	r0, #6
 800740a:	f7f9 f8f9 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800740e:	2006      	movs	r0, #6
 8007410:	f7f9 f92c 	bl	800066c <HAL_NVIC_EnableIRQ>
  }
}
 8007414:	b006      	add	sp, #24
 8007416:	bd10      	pop	{r4, pc}
 8007418:	40023800 	andmi	r3, r2, r0, lsl #16
 800741c:	20000020 	andcs	r0, r0, r0, lsr #32
 8007420:	10110000 	andsne	r0, r1, r0

08007424 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007424:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8007426:	4b03      	ldr	r3, [pc, #12]	; (8007434 <BSP_PB_GetState+0x10>)
 8007428:	2101      	movs	r1, #1
 800742a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800742e:	f7f9 fbfd 	bl	8000c2c <HAL_GPIO_ReadPin>
}
 8007432:	bd08      	pop	{r3, pc}
 8007434:	20000020 	andcs	r0, r0, r0, lsr #32

08007438 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8007438:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800743a:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <LCD_IO_Init+0xa8>)
 800743c:	781c      	ldrb	r4, [r3, #0]

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800743e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8007440:	2c00      	cmp	r4, #0
 8007442:	d14a      	bne.n	80074da <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8007444:	4d27      	ldr	r5, [pc, #156]	; (80074e4 <LCD_IO_Init+0xac>)
 8007446:	9400      	str	r4, [sp, #0]
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
 8007448:	2601      	movs	r6, #1
 800744a:	701e      	strb	r6, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800744c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800744e:	4826      	ldr	r0, [pc, #152]	; (80074e8 <LCD_IO_Init+0xb0>)
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8007450:	f043 0308 	orr.w	r3, r3, #8
 8007454:	632b      	str	r3, [r5, #48]	; 0x30
 8007456:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8007458:	9604      	str	r6, [sp, #16]
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8007460:	2702      	movs	r7, #2
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8007462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8007466:	a903      	add	r1, sp, #12
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8007468:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800746a:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800746c:	9405      	str	r4, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800746e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8007470:	f7f9 f9ec 	bl	800084c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8007474:	9401      	str	r4, [sp, #4]
 8007476:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8007478:	481b      	ldr	r0, [pc, #108]	; (80074e8 <LCD_IO_Init+0xb0>)
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800747a:	f043 0308 	orr.w	r3, r3, #8
 800747e:	632b      	str	r3, [r5, #48]	; 0x30
 8007480:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8007482:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	9301      	str	r3, [sp, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800748a:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800748c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8007490:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8007492:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8007494:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8007496:	9405      	str	r4, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8007498:	f7f9 f9d8 	bl	800084c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800749c:	9402      	str	r4, [sp, #8]
 800749e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80074a0:	4812      	ldr	r0, [pc, #72]	; (80074ec <LCD_IO_Init+0xb4>)
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80074a2:	f043 0304 	orr.w	r3, r3, #4
 80074a6:	632b      	str	r3, [r5, #48]	; 0x30
 80074a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80074aa:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80074ac:	f003 0304 	and.w	r3, r3, #4
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80074b0:	2504      	movs	r5, #4
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80074b2:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	9b02      	ldr	r3, [sp, #8]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80074b8:	9706      	str	r7, [sp, #24]
    LCD_NCS_GPIO_CLK_ENABLE();
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80074ba:	9405      	str	r4, [sp, #20]
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80074bc:	9503      	str	r5, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80074be:	f7f9 f9c5 	bl	800084c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80074c2:	4622      	mov	r2, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	4809      	ldr	r0, [pc, #36]	; (80074ec <LCD_IO_Init+0xb4>)
 80074c8:	f7f9 fbb6 	bl	8000c38 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80074cc:	4629      	mov	r1, r5
 80074ce:	4632      	mov	r2, r6
 80074d0:	4806      	ldr	r0, [pc, #24]	; (80074ec <LCD_IO_Init+0xb4>)
 80074d2:	f7f9 fbb1 	bl	8000c38 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80074d6:	f7ff feab 	bl	8007230 <SPIx_Init>
  }
}
 80074da:	b009      	add	sp, #36	; 0x24
 80074dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000084 	andcs	r0, r0, r4, lsl #1
 80074e4:	40023800 	andmi	r3, r2, r0, lsl #16
 80074e8:	40020c00 	andmi	r0, r2, r0, lsl #24
 80074ec:	40020800 	andmi	r0, r2, r0, lsl #16

080074f0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80074f0:	b510      	push	{r4, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80074f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80074f6:	b082      	sub	sp, #8
 80074f8:	4604      	mov	r4, r0
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80074fa:	2201      	movs	r2, #1
 80074fc:	480e      	ldr	r0, [pc, #56]	; (8007538 <LCD_IO_WriteData+0x48>)
 80074fe:	f7f9 fb9b 	bl	8000c38 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8007502:	480e      	ldr	r0, [pc, #56]	; (800753c <LCD_IO_WriteData+0x4c>)
 8007504:	2104      	movs	r1, #4
 8007506:	2200      	movs	r2, #0
 8007508:	f7f9 fb96 	bl	8000c38 <HAL_GPIO_WritePin>
 800750c:	a902      	add	r1, sp, #8
  */
static void SPIx_Write(uint16_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <LCD_IO_WriteData+0x50>)
 8007510:	f821 4d02 	strh.w	r4, [r1, #-2]!
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	480b      	ldr	r0, [pc, #44]	; (8007544 <LCD_IO_WriteData+0x54>)
 8007518:	2201      	movs	r2, #1
 800751a:	f7fd fffb 	bl	8005514 <HAL_SPI_Transmit>
  
  /* Check the communication status */
  if(status != HAL_OK)
 800751e:	b120      	cbz	r0, 800752a <LCD_IO_WriteData+0x3a>
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8007520:	4808      	ldr	r0, [pc, #32]	; (8007544 <LCD_IO_WriteData+0x54>)
 8007522:	f7fd ffe1 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8007526:	f7ff fe83 	bl	8007230 <SPIx_Init>
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
  SPIx_Write(RegValue);
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800752a:	4804      	ldr	r0, [pc, #16]	; (800753c <LCD_IO_WriteData+0x4c>)
 800752c:	2104      	movs	r1, #4
 800752e:	2201      	movs	r2, #1
 8007530:	f7f9 fb82 	bl	8000c38 <HAL_GPIO_WritePin>
}
 8007534:	b002      	add	sp, #8
 8007536:	bd10      	pop	{r4, pc}
 8007538:	40020c00 	andmi	r0, r2, r0, lsl #24
 800753c:	40020800 	andmi	r0, r2, r0, lsl #16
 8007540:	2000001c 	andcs	r0, r0, ip, lsl r0
 8007544:	2000002c 	andcs	r0, r0, ip, lsr #32

08007548 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8007548:	b510      	push	{r4, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800754a:	f44f 5100 	mov.w	r1, #8192	; 0x2000

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800754e:	b082      	sub	sp, #8
 8007550:	4604      	mov	r4, r0
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8007552:	2200      	movs	r2, #0
 8007554:	480e      	ldr	r0, [pc, #56]	; (8007590 <LCD_IO_WriteReg+0x48>)
 8007556:	f7f9 fb6f 	bl	8000c38 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800755a:	480e      	ldr	r0, [pc, #56]	; (8007594 <LCD_IO_WriteReg+0x4c>)
 800755c:	2104      	movs	r1, #4
 800755e:	2200      	movs	r2, #0
 8007560:	f7f9 fb6a 	bl	8000c38 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8007564:	a902      	add	r1, sp, #8
  */
static void SPIx_Write(uint16_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <LCD_IO_WriteReg+0x50>)
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
  SPIx_Write(Reg);
 8007568:	f821 4d02 	strh.w	r4, [r1, #-2]!
  */
static void SPIx_Write(uint16_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	480b      	ldr	r0, [pc, #44]	; (800759c <LCD_IO_WriteReg+0x54>)
 8007570:	2201      	movs	r2, #1
 8007572:	f7fd ffcf 	bl	8005514 <HAL_SPI_Transmit>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8007576:	b120      	cbz	r0, 8007582 <LCD_IO_WriteReg+0x3a>
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8007578:	4808      	ldr	r0, [pc, #32]	; (800759c <LCD_IO_WriteReg+0x54>)
 800757a:	f7fd ffb5 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800757e:	f7ff fe57 	bl	8007230 <SPIx_Init>
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
  SPIx_Write(Reg);
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8007582:	4804      	ldr	r0, [pc, #16]	; (8007594 <LCD_IO_WriteReg+0x4c>)
 8007584:	2104      	movs	r1, #4
 8007586:	2201      	movs	r2, #1
 8007588:	f7f9 fb56 	bl	8000c38 <HAL_GPIO_WritePin>
}
 800758c:	b002      	add	sp, #8
 800758e:	bd10      	pop	{r4, pc}
 8007590:	40020c00 	andmi	r0, r2, r0, lsl #24
 8007594:	40020800 	andmi	r0, r2, r0, lsl #16
 8007598:	2000001c 	andcs	r0, r0, ip, lsl r0
 800759c:	2000002c 	andcs	r0, r0, ip, lsr #32

080075a0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80075a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80075a2:	2200      	movs	r2, #0
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80075a4:	b082      	sub	sp, #8
 80075a6:	4606      	mov	r6, r0
 80075a8:	460d      	mov	r5, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80075aa:	481a      	ldr	r0, [pc, #104]	; (8007614 <LCD_IO_ReadData+0x74>)
  */
static void SPIx_Write(uint16_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80075ac:	4c1a      	ldr	r4, [pc, #104]	; (8007618 <LCD_IO_ReadData+0x78>)
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80075ae:	2104      	movs	r1, #4
 80075b0:	f7f9 fb42 	bl	8000c38 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80075b4:	4819      	ldr	r0, [pc, #100]	; (800761c <LCD_IO_ReadData+0x7c>)
 80075b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075ba:	2200      	movs	r2, #0
 80075bc:	f7f9 fb3c 	bl	8000c38 <HAL_GPIO_WritePin>
 80075c0:	a902      	add	r1, sp, #8
  */
static void SPIx_Write(uint16_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	f821 6d06 	strh.w	r6, [r1, #-6]!
 80075c8:	4815      	ldr	r0, [pc, #84]	; (8007620 <LCD_IO_ReadData+0x80>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	f7fd ffa2 	bl	8005514 <HAL_SPI_Transmit>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80075d0:	b120      	cbz	r0, 80075dc <LCD_IO_ReadData+0x3c>
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80075d2:	4813      	ldr	r0, [pc, #76]	; (8007620 <LCD_IO_ReadData+0x80>)
 80075d4:	f7fd ff88 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80075d8:	f7ff fe2a 	bl	8007230 <SPIx_Init>
static uint32_t SPIx_Read(uint8_t ReadSize)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80075dc:	462a      	mov	r2, r5
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	480f      	ldr	r0, [pc, #60]	; (8007620 <LCD_IO_ReadData+0x80>)
 80075e2:	a901      	add	r1, sp, #4
 80075e4:	f7fe fb28 	bl	8005c38 <HAL_SPI_Receive>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80075e8:	b120      	cbz	r0, 80075f4 <LCD_IO_ReadData+0x54>
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80075ea:	480d      	ldr	r0, [pc, #52]	; (8007620 <LCD_IO_ReadData+0x80>)
 80075ec:	f7fd ff7c 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80075f0:	f7ff fe1e 	bl	8007230 <SPIx_Init>
  SPIx_Write(RegValue);
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80075f4:	4809      	ldr	r0, [pc, #36]	; (800761c <LCD_IO_ReadData+0x7c>)
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
  }
  
  return readvalue;
 80075f6:	9c01      	ldr	r4, [sp, #4]
  SPIx_Write(RegValue);
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80075f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075fc:	2201      	movs	r2, #1
 80075fe:	f7f9 fb1b 	bl	8000c38 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8007602:	4804      	ldr	r0, [pc, #16]	; (8007614 <LCD_IO_ReadData+0x74>)
 8007604:	2104      	movs	r1, #4
 8007606:	2201      	movs	r2, #1
 8007608:	f7f9 fb16 	bl	8000c38 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 800760c:	4620      	mov	r0, r4
 800760e:	b002      	add	sp, #8
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	bf00      	nop
 8007614:	40020800 	andmi	r0, r2, r0, lsl #16
 8007618:	2000001c 	andcs	r0, r0, ip, lsl r0
 800761c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8007620:	2000002c 	andcs	r0, r0, ip, lsr #32

08007624 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8007624:	f7f8 bf44 	b.w	80004b0 <HAL_Delay>

08007628 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8007628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800762c:	4d35      	ldr	r5, [pc, #212]	; (8007704 <IOE_Init+0xdc>)

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800762e:	b089      	sub	sp, #36	; 0x24
/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8007630:	4628      	mov	r0, r5
 8007632:	f7fc fd8f 	bl	8004154 <HAL_I2C_GetState>
 8007636:	4604      	mov	r4, r0
 8007638:	2800      	cmp	r0, #0
 800763a:	d160      	bne.n	80076fe <IOE_Init+0xd6>

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800763c:	4e32      	ldr	r6, [pc, #200]	; (8007708 <IOE_Init+0xe0>)
 800763e:	9000      	str	r0, [sp, #0]
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8007640:	4b32      	ldr	r3, [pc, #200]	; (800770c <IOE_Init+0xe4>)
 8007642:	602b      	str	r3, [r5, #0]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007644:	6b33      	ldr	r3, [r6, #48]	; 0x30
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8007646:	60ac      	str	r4, [r5, #8]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007648:	f043 0304 	orr.w	r3, r3, #4
 800764c:	6333      	str	r3, [r6, #48]	; 0x30
 800764e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
 8007650:	60ec      	str	r4, [r5, #12]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800765a:	9401      	str	r4, [sp, #4]
 800765c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800765e:	616c      	str	r4, [r5, #20]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	6333      	str	r3, [r6, #48]	; 0x30
 8007666:	6b33      	ldr	r3, [r6, #48]	; 0x30
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8007668:	4a29      	ldr	r2, [pc, #164]	; (8007710 <IOE_Init+0xe8>)
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800766a:	482a      	ldr	r0, [pc, #168]	; (8007714 <IOE_Init+0xec>)
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800766c:	606a      	str	r2, [r5, #4]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800766e:	f003 0301 	and.w	r3, r3, #1
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8007672:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8007676:	f04f 0e12 	mov.w	lr, #18
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800767a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800767c:	a903      	add	r1, sp, #12
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800767e:	2304      	movs	r3, #4
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007680:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8007684:	2702      	movs	r7, #2
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8007686:	f8cd c00c 	str.w	ip, [sp, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800768a:	f8cd e010 	str.w	lr, [sp, #16]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800768e:	9307      	str	r3, [sp, #28]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2      = 0;
 8007690:	61ac      	str	r4, [r5, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8007692:	61ec      	str	r4, [r5, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8007694:	622c      	str	r4, [r5, #32]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007696:	f8dd 9004 	ldr.w	r9, [sp, #4]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800769a:	9405      	str	r4, [sp, #20]
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800769c:	f8c5 8010 	str.w	r8, [r5, #16]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80076a0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80076a2:	f7f9 f8d3 	bl	800084c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80076a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80076aa:	a903      	add	r1, sp, #12
 80076ac:	481a      	ldr	r0, [pc, #104]	; (8007718 <IOE_Init+0xf0>)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80076ae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80076b0:	f7f9 f8cc 	bl	800084c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80076b4:	9402      	str	r4, [sp, #8]
 80076b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80076b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076bc:	6433      	str	r3, [r6, #64]	; 0x40
 80076be:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80076c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076c4:	9302      	str	r3, [sp, #8]
 80076c6:	9b02      	ldr	r3, [sp, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80076c8:	6a33      	ldr	r3, [r6, #32]
 80076ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076ce:	6233      	str	r3, [r6, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80076d0:	6a33      	ldr	r3, [r6, #32]
 80076d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076d6:	6233      	str	r3, [r6, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x00, 0);
 80076d8:	4621      	mov	r1, r4
 80076da:	4622      	mov	r2, r4
 80076dc:	2048      	movs	r0, #72	; 0x48
 80076de:	f7f8 ff8f 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80076e2:	2048      	movs	r0, #72	; 0x48
 80076e4:	f7f8 ffc2 	bl	800066c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x00, 0);
 80076e8:	2049      	movs	r0, #73	; 0x49
 80076ea:	4621      	mov	r1, r4
 80076ec:	4622      	mov	r2, r4
 80076ee:	f7f8 ff87 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80076f2:	2049      	movs	r0, #73	; 0x49
 80076f4:	f7f8 ffba 	bl	800066c <HAL_NVIC_EnableIRQ>
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 80076f8:	4628      	mov	r0, r5
 80076fa:	f7f9 fcff 	bl	80010fc <HAL_I2C_Init>
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
}
 80076fe:	b009      	add	sp, #36	; 0x24
 8007700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007704:	20000088 	andcs	r0, r0, r8, lsl #1
 8007708:	40023800 	andmi	r3, r2, r0, lsl #16
 800770c:	40005c00 	andmi	r5, r0, r0, lsl #24
 8007710:	000186a0 	andeq	r8, r1, r0, lsr #13
 8007714:	40020000 	andmi	r0, r2, r0
 8007718:	40020800 	andmi	r0, r2, r0, lsl #16

0800771c <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	b086      	sub	sp, #24
static void I2Cx_ITConfig(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8007720:	2400      	movs	r4, #0
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <IOE_ITConfig+0x48>)
 8007724:	9400      	str	r4, [sp, #0]
 8007726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8007728:	4d0f      	ldr	r5, [pc, #60]	; (8007768 <IOE_ITConfig+0x4c>)
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800772a:	4810      	ldr	r0, [pc, #64]	; (800776c <IOE_ITConfig+0x50>)
static void I2Cx_ITConfig(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	631a      	str	r2, [r3, #48]	; 0x30
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8007734:	9404      	str	r4, [sp, #16]
static void I2Cx_ITConfig(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	9300      	str	r3, [sp, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800773c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8007740:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8007742:	a901      	add	r1, sp, #4
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8007744:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8007746:	9201      	str	r2, [sp, #4]
static void I2Cx_ITConfig(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8007748:	9e00      	ldr	r6, [sp, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800774a:	9502      	str	r5, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800774c:	f7f9 f87e 	bl	800084c <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x00, 0x00);
 8007750:	4621      	mov	r1, r4
 8007752:	4622      	mov	r2, r4
 8007754:	2028      	movs	r0, #40	; 0x28
 8007756:	f7f8 ff53 	bl	8000600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800775a:	2028      	movs	r0, #40	; 0x28
 800775c:	f7f8 ff86 	bl	800066c <HAL_NVIC_EnableIRQ>
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
  I2Cx_ITConfig();
}
 8007760:	b006      	add	sp, #24
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	40023800 	andmi	r3, r2, r0, lsl #16
 8007768:	10210000 	eorne	r0, r1, r0
 800776c:	40020000 	andmi	r0, r2, r0

08007770 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8007770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007774:	b08f      	sub	sp, #60	; 0x3c
 8007776:	ab0e      	add	r3, sp, #56	; 0x38
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8007778:	4d3f      	ldr	r5, [pc, #252]	; (8007878 <IOE_Write+0x108>)
 800777a:	f803 2d21 	strb.w	r2, [r3, #-33]!
 800777e:	4c3f      	ldr	r4, [pc, #252]	; (800787c <IOE_Write+0x10c>)
 8007780:	682d      	ldr	r5, [r5, #0]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2301      	movs	r3, #1
 8007786:	460a      	mov	r2, r1
 8007788:	9502      	str	r5, [sp, #8]
 800778a:	4601      	mov	r1, r0
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	4620      	mov	r0, r4
 8007790:	f7fb f89c 	bl	80028cc <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8007794:	b910      	cbnz	r0, 800779c <IOE_Write+0x2c>
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_WriteData(Addr, Reg, Value);
}
 8007796:	b00f      	add	sp, #60	; 0x3c
 8007798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800779c:	4620      	mov	r0, r4
 800779e:	f7f9 fd27 	bl	80011f0 <HAL_I2C_DeInit>
/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7fc fcd6 	bl	8004154 <HAL_I2C_GetState>
 80077a8:	4605      	mov	r5, r0
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1f3      	bne.n	8007796 <IOE_Write+0x26>

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80077ae:	4e34      	ldr	r6, [pc, #208]	; (8007880 <IOE_Write+0x110>)
 80077b0:	9006      	str	r0, [sp, #24]
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80077b2:	4b34      	ldr	r3, [pc, #208]	; (8007884 <IOE_Write+0x114>)
 80077b4:	6023      	str	r3, [r4, #0]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80077b6:	6b33      	ldr	r3, [r6, #48]	; 0x30
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80077b8:	60a5      	str	r5, [r4, #8]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80077ba:	f043 0304 	orr.w	r3, r3, #4
 80077be:	6333      	str	r3, [r6, #48]	; 0x30
 80077c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
 80077c2:	60e5      	str	r5, [r4, #12]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	9306      	str	r3, [sp, #24]
 80077ca:	9b06      	ldr	r3, [sp, #24]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80077cc:	9507      	str	r5, [sp, #28]
 80077ce:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80077d0:	6165      	str	r5, [r4, #20]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	6333      	str	r3, [r6, #48]	; 0x30
 80077d8:	6b33      	ldr	r3, [r6, #48]	; 0x30
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80077da:	4a2b      	ldr	r2, [pc, #172]	; (8007888 <IOE_Write+0x118>)
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80077dc:	482b      	ldr	r0, [pc, #172]	; (800788c <IOE_Write+0x11c>)
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80077de:	6062      	str	r2, [r4, #4]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80077e0:	f003 0301 	and.w	r3, r3, #1
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80077e4:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80077e8:	f04f 0e12 	mov.w	lr, #18
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80077ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80077ee:	a909      	add	r1, sp, #36	; 0x24
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80077f0:	2304      	movs	r3, #4
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80077f2:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80077f6:	2702      	movs	r7, #2
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80077f8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80077fc:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007800:	930d      	str	r3, [sp, #52]	; 0x34
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2      = 0;
 8007802:	61a5      	str	r5, [r4, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8007804:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8007806:	6225      	str	r5, [r4, #32]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007808:	f8dd 901c 	ldr.w	r9, [sp, #28]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800780c:	950b      	str	r5, [sp, #44]	; 0x2c
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800780e:	f8c4 8010 	str.w	r8, [r4, #16]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8007812:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007814:	f7f9 f81a 	bl	800084c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007818:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800781a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800781e:	481c      	ldr	r0, [pc, #112]	; (8007890 <IOE_Write+0x120>)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8007820:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007822:	f7f9 f813 	bl	800084c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007826:	9508      	str	r5, [sp, #32]
 8007828:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800782a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800782e:	6433      	str	r3, [r6, #64]	; 0x40
 8007830:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007836:	9308      	str	r3, [sp, #32]
 8007838:	9b08      	ldr	r3, [sp, #32]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800783a:	6a33      	ldr	r3, [r6, #32]
 800783c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007840:	6233      	str	r3, [r6, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8007842:	6a33      	ldr	r3, [r6, #32]
 8007844:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007848:	6233      	str	r3, [r6, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x00, 0);
 800784a:	4629      	mov	r1, r5
 800784c:	462a      	mov	r2, r5
 800784e:	2048      	movs	r0, #72	; 0x48
 8007850:	f7f8 fed6 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007854:	2048      	movs	r0, #72	; 0x48
 8007856:	f7f8 ff09 	bl	800066c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x00, 0);
 800785a:	4629      	mov	r1, r5
 800785c:	462a      	mov	r2, r5
 800785e:	2049      	movs	r0, #73	; 0x49
 8007860:	f7f8 fece 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8007864:	2049      	movs	r0, #73	; 0x49
 8007866:	f7f8 ff01 	bl	800066c <HAL_NVIC_EnableIRQ>
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 800786a:	4620      	mov	r0, r4
 800786c:	f7f9 fc46 	bl	80010fc <HAL_I2C_Init>
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_WriteData(Addr, Reg, Value);
}
 8007870:	b00f      	add	sp, #60	; 0x3c
 8007872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007876:	bf00      	nop
 8007878:	20000024 	andcs	r0, r0, r4, lsr #32
 800787c:	20000088 	andcs	r0, r0, r8, lsl #1
 8007880:	40023800 	andmi	r3, r2, r0, lsl #16
 8007884:	40005c00 	andmi	r5, r0, r0, lsl #24
 8007888:	000186a0 	andeq	r8, r1, r0, lsr #13
 800788c:	40020000 	andmi	r0, r2, r0
 8007890:	40020800 	andmi	r0, r2, r0, lsl #16

08007894 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8007894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007898:	b08f      	sub	sp, #60	; 0x3c
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 800789a:	ab0e      	add	r3, sp, #56	; 0x38
 800789c:	2400      	movs	r4, #0
 800789e:	f803 4d21 	strb.w	r4, [r3, #-33]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80078a2:	4a40      	ldr	r2, [pc, #256]	; (80079a4 <IOE_Read+0x110>)
 80078a4:	4c40      	ldr	r4, [pc, #256]	; (80079a8 <IOE_Read+0x114>)
 80078a6:	6815      	ldr	r5, [r2, #0]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	2301      	movs	r3, #1
 80078ac:	460a      	mov	r2, r1
 80078ae:	9502      	str	r5, [sp, #8]
 80078b0:	4601      	mov	r1, r0
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7fb f8f3 	bl	8002aa0 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 80078ba:	b920      	cbnz	r0, 80078c6 <IOE_Read+0x32>
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
  return I2Cx_ReadData(Addr, Reg);
}
 80078bc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80078c0:	b00f      	add	sp, #60	; 0x3c
 80078c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7f9 fc92 	bl	80011f0 <HAL_I2C_DeInit>
/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80078cc:	4620      	mov	r0, r4
 80078ce:	f7fc fc41 	bl	8004154 <HAL_I2C_GetState>
 80078d2:	4605      	mov	r5, r0
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d1f1      	bne.n	80078bc <IOE_Read+0x28>

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80078d8:	4e34      	ldr	r6, [pc, #208]	; (80079ac <IOE_Read+0x118>)
 80078da:	9006      	str	r0, [sp, #24]
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80078dc:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <IOE_Read+0x11c>)
 80078de:	6023      	str	r3, [r4, #0]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80078e0:	6b33      	ldr	r3, [r6, #48]	; 0x30
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80078e2:	60a5      	str	r5, [r4, #8]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80078e4:	f043 0304 	orr.w	r3, r3, #4
 80078e8:	6333      	str	r3, [r6, #48]	; 0x30
 80078ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
 80078ec:	60e5      	str	r5, [r4, #12]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	9306      	str	r3, [sp, #24]
 80078f4:	9b06      	ldr	r3, [sp, #24]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80078f6:	9507      	str	r5, [sp, #28]
 80078f8:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80078fa:	6165      	str	r5, [r4, #20]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80078fc:	f043 0301 	orr.w	r3, r3, #1
 8007900:	6333      	str	r3, [r6, #48]	; 0x30
 8007902:	6b33      	ldr	r3, [r6, #48]	; 0x30
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8007904:	4a2b      	ldr	r2, [pc, #172]	; (80079b4 <IOE_Read+0x120>)
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007906:	482c      	ldr	r0, [pc, #176]	; (80079b8 <IOE_Read+0x124>)
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8007908:	6062      	str	r2, [r4, #4]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800790a:	f003 0301 	and.w	r3, r3, #1
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800790e:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8007912:	f04f 0e12 	mov.w	lr, #18
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007916:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007918:	a909      	add	r1, sp, #36	; 0x24
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800791a:	2304      	movs	r3, #4
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800791c:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8007920:	2702      	movs	r7, #2
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8007922:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8007926:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800792a:	930d      	str	r3, [sp, #52]	; 0x34
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2      = 0;
 800792c:	61a5      	str	r5, [r4, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800792e:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8007930:	6225      	str	r5, [r4, #32]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007932:	f8dd 901c 	ldr.w	r9, [sp, #28]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007936:	950b      	str	r5, [sp, #44]	; 0x2c
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007938:	f8c4 8010 	str.w	r8, [r4, #16]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800793c:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800793e:	f7f8 ff85 	bl	800084c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007942:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8007944:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007948:	481c      	ldr	r0, [pc, #112]	; (80079bc <IOE_Read+0x128>)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800794c:	f7f8 ff7e 	bl	800084c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007950:	9508      	str	r5, [sp, #32]
 8007952:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007958:	6433      	str	r3, [r6, #64]	; 0x40
 800795a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800795c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007960:	9308      	str	r3, [sp, #32]
 8007962:	9b08      	ldr	r3, [sp, #32]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8007964:	6a33      	ldr	r3, [r6, #32]
 8007966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800796a:	6233      	str	r3, [r6, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800796c:	6a33      	ldr	r3, [r6, #32]
 800796e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007972:	6233      	str	r3, [r6, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x00, 0);
 8007974:	4629      	mov	r1, r5
 8007976:	462a      	mov	r2, r5
 8007978:	2048      	movs	r0, #72	; 0x48
 800797a:	f7f8 fe41 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800797e:	2048      	movs	r0, #72	; 0x48
 8007980:	f7f8 fe74 	bl	800066c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x00, 0);
 8007984:	4629      	mov	r1, r5
 8007986:	462a      	mov	r2, r5
 8007988:	2049      	movs	r0, #73	; 0x49
 800798a:	f7f8 fe39 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800798e:	2049      	movs	r0, #73	; 0x49
 8007990:	f7f8 fe6c 	bl	800066c <HAL_NVIC_EnableIRQ>
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 8007994:	4620      	mov	r0, r4
 8007996:	f7f9 fbb1 	bl	80010fc <HAL_I2C_Init>
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
  return I2Cx_ReadData(Addr, Reg);
}
 800799a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800799e:	b00f      	add	sp, #60	; 0x3c
 80079a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079a4:	20000024 	andcs	r0, r0, r4, lsr #32
 80079a8:	20000088 	andcs	r0, r0, r8, lsl #1
 80079ac:	40023800 	andmi	r3, r2, r0, lsl #16
 80079b0:	40005c00 	andmi	r5, r0, r0, lsl #24
 80079b4:	000186a0 	andeq	r8, r1, r0, lsr #13
 80079b8:	40020000 	andmi	r0, r2, r0
 80079bc:	40020800 	andmi	r0, r2, r0, lsl #16

080079c0 <IOE_WriteMultiple>:
  * @param  Reg: Reg Address 
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  */
void IOE_WriteMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80079c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  */
static void I2Cx_WriteBuffer(uint8_t Addr, uint8_t Reg,  uint8_t *pBuffer, uint16_t Length)
  {
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout); 
 80079c4:	4d3e      	ldr	r5, [pc, #248]	; (8007ac0 <IOE_WriteMultiple+0x100>)
 80079c6:	4c3f      	ldr	r4, [pc, #252]	; (8007ac4 <IOE_WriteMultiple+0x104>)
 80079c8:	682d      	ldr	r5, [r5, #0]
  * @param  Reg: Reg Address 
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  */
void IOE_WriteMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80079ca:	b08d      	sub	sp, #52	; 0x34
  */
static void I2Cx_WriteBuffer(uint8_t Addr, uint8_t Reg,  uint8_t *pBuffer, uint16_t Length)
  {
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout); 
 80079cc:	9200      	str	r2, [sp, #0]
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	460a      	mov	r2, r1
 80079d2:	9502      	str	r5, [sp, #8]
 80079d4:	4601      	mov	r1, r0
 80079d6:	2301      	movs	r3, #1
 80079d8:	4620      	mov	r0, r4
 80079da:	f7fa ff77 	bl	80028cc <HAL_I2C_Mem_Write>

  /* Check the communication status */
  if(status != HAL_OK)
 80079de:	b910      	cbnz	r0, 80079e6 <IOE_WriteMultiple+0x26>
  * @param  Length: length of the data
  */
void IOE_WriteMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
  I2Cx_WriteBuffer(Addr, Reg, pBuffer, Length);
}
 80079e0:	b00d      	add	sp, #52	; 0x34
 80079e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7f9 fc02 	bl	80011f0 <HAL_I2C_DeInit>
/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80079ec:	4620      	mov	r0, r4
 80079ee:	f7fc fbb1 	bl	8004154 <HAL_I2C_GetState>
 80079f2:	4605      	mov	r5, r0
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1f3      	bne.n	80079e0 <IOE_WriteMultiple+0x20>

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80079f8:	4e33      	ldr	r6, [pc, #204]	; (8007ac8 <IOE_WriteMultiple+0x108>)
 80079fa:	9004      	str	r0, [sp, #16]
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80079fc:	4b33      	ldr	r3, [pc, #204]	; (8007acc <IOE_WriteMultiple+0x10c>)
 80079fe:	6023      	str	r3, [r4, #0]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007a00:	6b33      	ldr	r3, [r6, #48]	; 0x30
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8007a02:	60a5      	str	r5, [r4, #8]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007a04:	f043 0304 	orr.w	r3, r3, #4
 8007a08:	6333      	str	r3, [r6, #48]	; 0x30
 8007a0a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
 8007a0c:	60e5      	str	r5, [r4, #12]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007a16:	9505      	str	r5, [sp, #20]
 8007a18:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8007a1a:	6165      	str	r5, [r4, #20]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	6333      	str	r3, [r6, #48]	; 0x30
 8007a22:	6b33      	ldr	r3, [r6, #48]	; 0x30
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8007a24:	4a2a      	ldr	r2, [pc, #168]	; (8007ad0 <IOE_WriteMultiple+0x110>)
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007a26:	482b      	ldr	r0, [pc, #172]	; (8007ad4 <IOE_WriteMultiple+0x114>)
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8007a28:	6062      	str	r2, [r4, #4]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007a2a:	f003 0301 	and.w	r3, r3, #1
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8007a2e:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8007a32:	f04f 0e12 	mov.w	lr, #18
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007a36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007a38:	a907      	add	r1, sp, #28
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007a3a:	2304      	movs	r3, #4
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007a3c:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8007a40:	2702      	movs	r7, #2
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8007a42:	f8cd c01c 	str.w	ip, [sp, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8007a46:	f8cd e020 	str.w	lr, [sp, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007a4a:	930b      	str	r3, [sp, #44]	; 0x2c
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2      = 0;
 8007a4c:	61a5      	str	r5, [r4, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8007a4e:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8007a50:	6225      	str	r5, [r4, #32]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007a52:	f8dd 9014 	ldr.w	r9, [sp, #20]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007a56:	9509      	str	r5, [sp, #36]	; 0x24
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007a58:	f8c4 8010 	str.w	r8, [r4, #16]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8007a5c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007a5e:	f7f8 fef5 	bl	800084c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007a62:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8007a64:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007a68:	481b      	ldr	r0, [pc, #108]	; (8007ad8 <IOE_WriteMultiple+0x118>)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8007a6a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007a6c:	f7f8 feee 	bl	800084c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007a70:	9506      	str	r5, [sp, #24]
 8007a72:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a78:	6433      	str	r3, [r6, #64]	; 0x40
 8007a7a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a80:	9306      	str	r3, [sp, #24]
 8007a82:	9b06      	ldr	r3, [sp, #24]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8007a84:	6a33      	ldr	r3, [r6, #32]
 8007a86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a8a:	6233      	str	r3, [r6, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8007a8c:	6a33      	ldr	r3, [r6, #32]
 8007a8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a92:	6233      	str	r3, [r6, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x00, 0);
 8007a94:	4629      	mov	r1, r5
 8007a96:	462a      	mov	r2, r5
 8007a98:	2048      	movs	r0, #72	; 0x48
 8007a9a:	f7f8 fdb1 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007a9e:	2048      	movs	r0, #72	; 0x48
 8007aa0:	f7f8 fde4 	bl	800066c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x00, 0);
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	462a      	mov	r2, r5
 8007aa8:	2049      	movs	r0, #73	; 0x49
 8007aaa:	f7f8 fda9 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8007aae:	2049      	movs	r0, #73	; 0x49
 8007ab0:	f7f8 fddc 	bl	800066c <HAL_NVIC_EnableIRQ>
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f7f9 fb21 	bl	80010fc <HAL_I2C_Init>
  * @param  Length: length of the data
  */
void IOE_WriteMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
  I2Cx_WriteBuffer(Addr, Reg, pBuffer, Length);
}
 8007aba:	b00d      	add	sp, #52	; 0x34
 8007abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ac0:	20000024 	andcs	r0, r0, r4, lsr #32
 8007ac4:	20000088 	andcs	r0, r0, r8, lsl #1
 8007ac8:	40023800 	andmi	r3, r2, r0, lsl #16
 8007acc:	40005c00 	andmi	r5, r0, r0, lsl #24
 8007ad0:	000186a0 	andeq	r8, r1, r0, lsr #13
 8007ad4:	40020000 	andmi	r0, r2, r0
 8007ad8:	40020800 	andmi	r0, r2, r0, lsl #16

08007adc <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8007adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8007ae0:	4d40      	ldr	r5, [pc, #256]	; (8007be4 <IOE_ReadMultiple+0x108>)
 8007ae2:	4c41      	ldr	r4, [pc, #260]	; (8007be8 <IOE_ReadMultiple+0x10c>)
 8007ae4:	682d      	ldr	r5, [r5, #0]
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8007ae6:	b08d      	sub	sp, #52	; 0x34
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8007ae8:	9200      	str	r2, [sp, #0]
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	460a      	mov	r2, r1
 8007aee:	9502      	str	r5, [sp, #8]
 8007af0:	4601      	mov	r1, r0
 8007af2:	2301      	movs	r3, #1
 8007af4:	4620      	mov	r0, r4
 8007af6:	f7fa ffd3 	bl	8002aa0 <HAL_I2C_Mem_Read>
  
  /* Check the communication status */
  if(status == HAL_OK)
 8007afa:	b910      	cbnz	r0, 8007b02 <IOE_ReadMultiple+0x26>
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 8007afc:	b00d      	add	sp, #52	; 0x34
 8007afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8007b02:	4620      	mov	r0, r4
 8007b04:	f7f9 fb74 	bl	80011f0 <HAL_I2C_DeInit>
/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7fc fb23 	bl	8004154 <HAL_I2C_GetState>
 8007b0e:	4605      	mov	r5, r0
 8007b10:	b118      	cbz	r0, 8007b1a <IOE_ReadMultiple+0x3e>
 8007b12:	2001      	movs	r0, #1
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 8007b14:	b00d      	add	sp, #52	; 0x34
 8007b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007b1a:	4e34      	ldr	r6, [pc, #208]	; (8007bec <IOE_ReadMultiple+0x110>)
 8007b1c:	9004      	str	r0, [sp, #16]
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8007b1e:	4b34      	ldr	r3, [pc, #208]	; (8007bf0 <IOE_ReadMultiple+0x114>)
 8007b20:	6023      	str	r3, [r4, #0]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007b22:	6b33      	ldr	r3, [r6, #48]	; 0x30
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8007b24:	60a5      	str	r5, [r4, #8]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007b26:	f043 0304 	orr.w	r3, r3, #4
 8007b2a:	6333      	str	r3, [r6, #48]	; 0x30
 8007b2c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
 8007b2e:	60e5      	str	r5, [r4, #12]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	9304      	str	r3, [sp, #16]
 8007b36:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007b38:	9505      	str	r5, [sp, #20]
 8007b3a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8007b3c:	6165      	str	r5, [r4, #20]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	6333      	str	r3, [r6, #48]	; 0x30
 8007b44:	6b33      	ldr	r3, [r6, #48]	; 0x30
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8007b46:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <IOE_ReadMultiple+0x118>)
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007b48:	482b      	ldr	r0, [pc, #172]	; (8007bf8 <IOE_ReadMultiple+0x11c>)
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8007b4a:	6062      	str	r2, [r4, #4]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007b4c:	f003 0301 	and.w	r3, r3, #1
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8007b50:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8007b54:	f04f 0e12 	mov.w	lr, #18
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007b58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007b5a:	a907      	add	r1, sp, #28
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007b5c:	2304      	movs	r3, #4
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007b5e:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8007b62:	2702      	movs	r7, #2
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8007b64:	f8cd c01c 	str.w	ip, [sp, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8007b68:	f8cd e020 	str.w	lr, [sp, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007b6c:	930b      	str	r3, [sp, #44]	; 0x2c
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2      = 0;
 8007b6e:	61a5      	str	r5, [r4, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8007b70:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8007b72:	6225      	str	r5, [r4, #32]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8007b74:	f8dd 9014 	ldr.w	r9, [sp, #20]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007b78:	9509      	str	r5, [sp, #36]	; 0x24
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007b7a:	f8c4 8010 	str.w	r8, [r4, #16]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8007b7e:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007b80:	f7f8 fe64 	bl	800084c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007b84:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8007b86:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007b8a:	481c      	ldr	r0, [pc, #112]	; (8007bfc <IOE_ReadMultiple+0x120>)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8007b8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007b8e:	f7f8 fe5d 	bl	800084c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007b92:	9506      	str	r5, [sp, #24]
 8007b94:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b9a:	6433      	str	r3, [r6, #64]	; 0x40
 8007b9c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba2:	9306      	str	r3, [sp, #24]
 8007ba4:	9b06      	ldr	r3, [sp, #24]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8007ba6:	6a33      	ldr	r3, [r6, #32]
 8007ba8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bac:	6233      	str	r3, [r6, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8007bae:	6a33      	ldr	r3, [r6, #32]
 8007bb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007bb4:	6233      	str	r3, [r6, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x00, 0);
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	462a      	mov	r2, r5
 8007bba:	2048      	movs	r0, #72	; 0x48
 8007bbc:	f7f8 fd20 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007bc0:	2048      	movs	r0, #72	; 0x48
 8007bc2:	f7f8 fd53 	bl	800066c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x00, 0);
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	462a      	mov	r2, r5
 8007bca:	2049      	movs	r0, #73	; 0x49
 8007bcc:	f7f8 fd18 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8007bd0:	2049      	movs	r0, #73	; 0x49
 8007bd2:	f7f8 fd4b 	bl	800066c <HAL_NVIC_EnableIRQ>
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7f9 fa90 	bl	80010fc <HAL_I2C_Init>
 8007bdc:	2001      	movs	r0, #1
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 8007bde:	b00d      	add	sp, #52	; 0x34
 8007be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be4:	20000024 	andcs	r0, r0, r4, lsr #32
 8007be8:	20000088 	andcs	r0, r0, r8, lsl #1
 8007bec:	40023800 	andmi	r3, r2, r0, lsl #16
 8007bf0:	40005c00 	andmi	r5, r0, r0, lsl #24
 8007bf4:	000186a0 	andeq	r8, r1, r0, lsr #13
 8007bf8:	40020000 	andmi	r0, r2, r0
 8007bfc:	40020800 	andmi	r0, r2, r0, lsl #16

08007c00 <IOE_Delay>:
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8007c00:	f7f8 bc56 	b.w	80004b0 <HAL_Delay>

08007c04 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8007c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c08:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8007c0a:	4c3b      	ldr	r4, [pc, #236]	; (8007cf8 <GYRO_IO_Init+0xf4>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8007c0c:	483b      	ldr	r0, [pc, #236]	; (8007cfc <GYRO_IO_Init+0xf8>)
/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8007c0e:	4d3c      	ldr	r5, [pc, #240]	; (8007d00 <GYRO_IO_Init+0xfc>)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8007c10:	2600      	movs	r6, #0
 8007c12:	9600      	str	r6, [sp, #0]
 8007c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c16:	f043 0304 	orr.w	r3, r3, #4
 8007c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8007c1e:	9606      	str	r6, [sp, #24]
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8007c20:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8007c24:	f04f 0801 	mov.w	r8, #1
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8007c28:	2702      	movs	r7, #2
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8007c2a:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8007c2c:	a904      	add	r1, sp, #16
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8007c2e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8007c30:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8007c32:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8007c36:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8007c3a:	f7f8 fe07 	bl	800084c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4642      	mov	r2, r8
 8007c42:	482e      	ldr	r0, [pc, #184]	; (8007cfc <GYRO_IO_Init+0xf8>)
 8007c44:	f7f8 fff8 	bl	8000c38 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8007c48:	9601      	str	r6, [sp, #4]
 8007c4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8007c4c:	482d      	ldr	r0, [pc, #180]	; (8007d04 <GYRO_IO_Init+0x100>)
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8007c4e:	ea43 0308 	orr.w	r3, r3, r8
 8007c52:	6323      	str	r3, [r4, #48]	; 0x30
 8007c54:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8007c56:	9605      	str	r6, [sp, #20]
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8007c58:	ea03 0308 	and.w	r3, r3, r8
 8007c5c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8007c5e:	a904      	add	r1, sp, #16
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8007c60:	2306      	movs	r3, #6
 8007c62:	9304      	str	r3, [sp, #16]
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8007c64:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007c66:	9707      	str	r7, [sp, #28]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8007c68:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8007c6a:	f7f8 fdef 	bl	800084c <HAL_GPIO_Init>
/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f7ff fad8 	bl	8007224 <HAL_SPI_GetState>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d13b      	bne.n	8007cf2 <GYRO_IO_Init+0xee>
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007c7a:	9002      	str	r0, [sp, #8]
static void SPIx_Init(void)
{
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8007c7c:	4a22      	ldr	r2, [pc, #136]	; (8007d08 <GYRO_IO_Init+0x104>)
 8007c7e:	602a      	str	r2, [r5, #0]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007c80:	6c62      	ldr	r2, [r4, #68]	; 0x44
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8007c82:	60ab      	str	r3, [r5, #8]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007c84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c88:	6462      	str	r2, [r4, #68]	; 0x44
 8007c8a:	6c62      	ldr	r2, [r4, #68]	; 0x44

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8007c8c:	616b      	str	r3, [r5, #20]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007c8e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007c92:	9202      	str	r2, [sp, #8]
 8007c94:	9a02      	ldr	r2, [sp, #8]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	6b22      	ldr	r2, [r4, #48]	; 0x30
    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8007c9a:	612b      	str	r3, [r5, #16]

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007c9c:	f042 0220 	orr.w	r2, r2, #32
 8007ca0:	6322      	str	r2, [r4, #48]	; 0x30
 8007ca2:	6b22      	ldr	r2, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8007ca4:	4819      	ldr	r0, [pc, #100]	; (8007d0c <GYRO_IO_Init+0x108>)
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8007ca6:	62ab      	str	r3, [r5, #40]	; 0x28

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007ca8:	f002 0220 	and.w	r2, r2, #32
 8007cac:	9203      	str	r2, [sp, #12]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8007cae:	f04f 0c07 	mov.w	ip, #7
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8007cb2:	f44f 7e00 	mov.w	lr, #512	; 0x200
  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8007cb6:	2205      	movs	r2, #5
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007cb8:	f04f 0918 	mov.w	r9, #24
    SpiHandle.Init.CRCPolynomial  = 7;
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8007cbc:	f44f 7682 	mov.w	r6, #260	; 0x104

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8007cc0:	f44f 7460 	mov.w	r4, #896	; 0x380
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8007cc4:	a909      	add	r1, sp, #36	; 0x24
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8007cc6:	60eb      	str	r3, [r5, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8007cc8:	622b      	str	r3, [r5, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8007cca:	626b      	str	r3, [r5, #36]	; 0x24
  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8007ccc:	970a      	str	r7, [sp, #40]	; 0x28

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007cce:	9b03      	ldr	r3, [sp, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8007cd0:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8007cd2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007cd6:	f8c5 901c 	str.w	r9, [r5, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8007cda:	f8c5 c02c 	str.w	ip, [r5, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8007cde:	f8c5 e018 	str.w	lr, [r5, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8007ce2:	606e      	str	r6, [r5, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8007ce4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8007ce6:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8007ce8:	f7f8 fdb0 	bl	800084c <HAL_GPIO_Init>
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
  
    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7fd fb9f 	bl	8005430 <HAL_SPI_Init>
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);

  SPIx_Init();
}
 8007cf2:	b00f      	add	sp, #60	; 0x3c
 8007cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cf8:	40023800 	andmi	r3, r2, r0, lsl #16
 8007cfc:	40020800 	andmi	r0, r2, r0, lsl #16
 8007d00:	2000002c 	andcs	r0, r0, ip, lsr #32
 8007d04:	40020000 	andmi	r0, r2, r0
 8007d08:	40015000 	andmi	r5, r1, r0
 8007d0c:	40021400 	andmi	r1, r2, r0, lsl #8

08007d10 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8007d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8007d14:	2a01      	cmp	r2, #1
{
  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007d16:	4f25      	ldr	r7, [pc, #148]	; (8007dac <GYRO_IO_Write+0x9c>)
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8007d18:	b084      	sub	sp, #16
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	4616      	mov	r6, r2
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8007d1e:	bf88      	it	hi
 8007d20:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8007d24:	2200      	movs	r2, #0
 8007d26:	2102      	movs	r1, #2
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8007d28:	4604      	mov	r4, r0
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8007d2a:	4821      	ldr	r0, [pc, #132]	; (8007db0 <GYRO_IO_Write+0xa0>)
 8007d2c:	f7f8 ff84 	bl	8000c38 <HAL_GPIO_WritePin>
{
  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	9300      	str	r3, [sp, #0]
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
  uint8_t receivedbyte = 0;
 8007d34:	f04f 0e00 	mov.w	lr, #0
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007d38:	f10d 020f 	add.w	r2, sp, #15
 8007d3c:	481d      	ldr	r0, [pc, #116]	; (8007db4 <GYRO_IO_Write+0xa4>)
 8007d3e:	f88d 500d 	strb.w	r5, [sp, #13]
 8007d42:	f10d 010d 	add.w	r1, sp, #13
 8007d46:	2301      	movs	r3, #1
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
  uint8_t receivedbyte = 0;
 8007d48:	f88d e00f 	strb.w	lr, [sp, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007d4c:	f7fd fd76 	bl	800583c <HAL_SPI_TransmitReceive>
 8007d50:	bb30      	cbnz	r0, 8007da0 <GYRO_IO_Write+0x90>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8007d52:	b1ee      	cbz	r6, 8007d90 <GYRO_IO_Write+0x80>
 8007d54:	3e01      	subs	r6, #1
 8007d56:	fa14 f686 	uxtah	r6, r4, r6
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
  uint8_t receivedbyte = 0;
 8007d5a:	f04f 0800 	mov.w	r8, #0
 8007d5e:	3c01      	subs	r4, #1
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007d68:	4812      	ldr	r0, [pc, #72]	; (8007db4 <GYRO_IO_Write+0xa4>)
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
  uint8_t receivedbyte = 0;
 8007d6a:	f88d 800f 	strb.w	r8, [sp, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007d6e:	f10d 010e 	add.w	r1, sp, #14
 8007d72:	f10d 020f 	add.w	r2, sp, #15
 8007d76:	2301      	movs	r3, #1
 8007d78:	f88d 500e 	strb.w	r5, [sp, #14]
 8007d7c:	f7fd fd5e 	bl	800583c <HAL_SPI_TransmitReceive>
 8007d80:	b120      	cbz	r0, 8007d8c <GYRO_IO_Write+0x7c>
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8007d82:	480c      	ldr	r0, [pc, #48]	; (8007db4 <GYRO_IO_Write+0xa4>)
 8007d84:	f7fd fbb0 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8007d88:	f7ff fa52 	bl	8007230 <SPIx_Init>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8007d8c:	42b4      	cmp	r4, r6
 8007d8e:	d1e7      	bne.n	8007d60 <GYRO_IO_Write+0x50>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8007d90:	4807      	ldr	r0, [pc, #28]	; (8007db0 <GYRO_IO_Write+0xa0>)
 8007d92:	2102      	movs	r1, #2
 8007d94:	2201      	movs	r2, #1
 8007d96:	f7f8 ff4f 	bl	8000c38 <HAL_GPIO_WritePin>
}
 8007d9a:	b004      	add	sp, #16
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8007da0:	4804      	ldr	r0, [pc, #16]	; (8007db4 <GYRO_IO_Write+0xa4>)
 8007da2:	f7fd fba1 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8007da6:	f7ff fa43 	bl	8007230 <SPIx_Init>
 8007daa:	e7d2      	b.n	8007d52 <GYRO_IO_Write+0x42>
 8007dac:	2000001c 	andcs	r0, r0, ip, lsl r0
 8007db0:	40020800 	andmi	r0, r2, r0, lsl #16
 8007db4:	2000002c 	andcs	r0, r0, ip, lsr #32

08007db8 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8007db8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(NumByteToRead > 0x01)
 8007dba:	2a01      	cmp	r2, #1
{
  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007dbc:	4f25      	ldr	r7, [pc, #148]	; (8007e54 <GYRO_IO_Read+0x9c>)
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8007dbe:	b085      	sub	sp, #20
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8007dc0:	bf8c      	ite	hi
 8007dc2:	f041 06c0 	orrhi.w	r6, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8007dc6:	f041 0680 	orrls.w	r6, r1, #128	; 0x80
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8007dca:	4615      	mov	r5, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8007dcc:	2102      	movs	r1, #2
 8007dce:	2200      	movs	r2, #0
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8007dd0:	4604      	mov	r4, r0
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8007dd2:	4821      	ldr	r0, [pc, #132]	; (8007e58 <GYRO_IO_Read+0xa0>)
 8007dd4:	f7f8 ff30 	bl	8000c38 <HAL_GPIO_WritePin>
{
  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	9300      	str	r3, [sp, #0]
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
  uint8_t receivedbyte = 0;
 8007ddc:	f04f 0e00 	mov.w	lr, #0
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007de0:	f10d 020f 	add.w	r2, sp, #15
 8007de4:	481d      	ldr	r0, [pc, #116]	; (8007e5c <GYRO_IO_Read+0xa4>)
 8007de6:	f88d 600d 	strb.w	r6, [sp, #13]
 8007dea:	f10d 010d 	add.w	r1, sp, #13
 8007dee:	2301      	movs	r3, #1
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
  uint8_t receivedbyte = 0;
 8007df0:	f88d e00f 	strb.w	lr, [sp, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007df4:	f7fd fd22 	bl	800583c <HAL_SPI_TransmitReceive>
 8007df8:	bb30      	cbnz	r0, 8007e48 <GYRO_IO_Read+0x90>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8007dfa:	b1f5      	cbz	r5, 8007e3a <GYRO_IO_Read+0x82>
 8007dfc:	1e6e      	subs	r6, r5, #1
 8007dfe:	b2b6      	uxth	r6, r6
 8007e00:	3601      	adds	r6, #1
 8007e02:	4426      	add	r6, r4
 8007e04:	2500      	movs	r5, #0
{
  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4814      	ldr	r0, [pc, #80]	; (8007e5c <GYRO_IO_Read+0xa4>)
 8007e0c:	f88d 500f 	strb.w	r5, [sp, #15]
 8007e10:	f10d 010f 	add.w	r1, sp, #15
 8007e14:	f10d 020e 	add.w	r2, sp, #14
 8007e18:	2301      	movs	r3, #1
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
  uint8_t receivedbyte = 0;
 8007e1a:	f88d 500e 	strb.w	r5, [sp, #14]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8007e1e:	f7fd fd0d 	bl	800583c <HAL_SPI_TransmitReceive>
 8007e22:	b120      	cbz	r0, 8007e2e <GYRO_IO_Read+0x76>
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8007e24:	480d      	ldr	r0, [pc, #52]	; (8007e5c <GYRO_IO_Read+0xa4>)
 8007e26:	f7fd fb5f 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8007e2a:	f7ff fa01 	bl	8007230 <SPIx_Init>
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
  {
    SPIx_Error();
  }
  
  return receivedbyte;
 8007e2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8007e32:	f804 3b01 	strb.w	r3, [r4], #1
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8007e36:	42b4      	cmp	r4, r6
 8007e38:	d1e5      	bne.n	8007e06 <GYRO_IO_Read+0x4e>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8007e3a:	4807      	ldr	r0, [pc, #28]	; (8007e58 <GYRO_IO_Read+0xa0>)
 8007e3c:	2102      	movs	r1, #2
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f7f8 fefa 	bl	8000c38 <HAL_GPIO_WritePin>
}  
 8007e44:	b005      	add	sp, #20
 8007e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8007e48:	4804      	ldr	r0, [pc, #16]	; (8007e5c <GYRO_IO_Read+0xa4>)
 8007e4a:	f7fd fb4d 	bl	80054e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8007e4e:	f7ff f9ef 	bl	8007230 <SPIx_Init>
 8007e52:	e7d2      	b.n	8007dfa <GYRO_IO_Read+0x42>
 8007e54:	2000001c 	andcs	r0, r0, ip, lsl r0
 8007e58:	40020800 	andmi	r0, r2, r0, lsl #16
 8007e5c:	2000002c 	andcs	r0, r0, ip, lsr #32

Disassembly of section .rodata:

08007e60 <flagBitshiftOffset.7227>:
 8007e60:	16100600 	ldrne	r0, [r0], -r0, lsl #12
 8007e64:	16100600 	ldrne	r0, [r0], -r0, lsl #12

08007e68 <APBAHBPrescTable>:
 8007e68:	00000000 	andeq	r0, r0, r0
 8007e6c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 8007e70:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 8007e74:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

08007e78 <BUTTON_IRQn>:
 8007e78:	00000006 	andeq	r0, r0, r6

08007e7c <BUTTON_PIN>:
 8007e7c:	00000001 	andeq	r0, r0, r1

08007e80 <GPIO_PIN>:
 8007e80:	40002000 	andmi	r2, r0, r0

Disassembly of section .data:

20000000 <AHBPrescTable>:
	...
20000008:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <SystemCoreClock>:
20000010:	00f42400 	rscseq	r2, r4, r0, lsl #8

20000014 <GPIO_PORT>:
20000014:	40021800 	andmi	r1, r2, r0, lsl #16
20000018:	40021800 	andmi	r1, r2, r0, lsl #16

2000001c <SpixTimeout>:
2000001c:	00001000 	andeq	r1, r0, r0

20000020 <BUTTON_PORT>:
20000020:	40020000 	andmi	r0, r2, r0

20000024 <I2cxTimeout>:
20000024:	00003000 	andeq	r3, r0, r0

Disassembly of section .bss:

20000028 <__bss_start__>:
20000028:	00000000 	andeq	r0, r0, r0

2000002c <SpiHandle>:
	...

20000084 <Is_LCD_IO_Initialized>:
20000084:	00000000 	andeq	r0, r0, r0

20000088 <I2cHandle>:
	...

Disassembly of section ._user_heap_stack:

200000dc <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600344d 	streq	r3, [r0], -sp, asr #8
  1c:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
  20:	12060a02 	andne	r0, r6, #8192	; 0x2000
  24:	18011704 	stmdane	r1, {r2, r8, r9, sl, ip}
  28:	1b011a01 	blne	46834 <_Min_Stack_Size+0x46434>
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000b3 	strheq	r0, [r0], -r3
       4:	00700002 	rsbseq	r0, r0, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6572662f 	ldrbvs	r6, [r2, #-1583]!	; 0xfffff9d1
      24:	6f747265 	svcvs	0x00747265
      28:	6f572f73 	svcvs	0x00572f73
      2c:	70736b72 	rsbsvc	r6, r3, r2, ror fp
      30:	2f656361 	svccs	0x00656361
      34:	2e452e50 	mcrcs	14, 2, r2, cr5, cr0, {2}
      38:	2e4b2e4b 	cdpcs	14, 4, cr2, cr11, cr11, {2}
      3c:	72502f41 	subsvc	r2, r0, #260	; 0x104
      40:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
      44:	74732f74 	ldrbtvc	r2, [r3], #-3956	; 0xfffff08c
      48:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      4c:	5f393234 	svcpl	0x00393234
      50:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
      54:	726f776f 	rsbvc	r7, pc, #29097984	; 0x1bc0000
      58:	532f646c 			; <UNDEFINED> instruction: 0x532f646c
      5c:	00006372 	andeq	r6, r0, r2, ror r3
      60:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
      64:	5f707574 	svcpl	0x00707574
      68:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      6c:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
      70:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
      74:	00010073 	andeq	r0, r1, r3, ror r0
      78:	05000000 	streq	r0, [r0, #-0]
      7c:	0001c002 	andeq	ip, r1, r2
      80:	00cf0308 	sbceq	r0, pc, r8, lsl #6
      84:	23213101 			; <UNDEFINED> instruction: 0x23213101
      88:	23212121 			; <UNDEFINED> instruction: 0x23212121
      8c:	21212121 			; <UNDEFINED> instruction: 0x21212121
      90:	21232121 			; <UNDEFINED> instruction: 0x21232121
      94:	23212131 			; <UNDEFINED> instruction: 0x23212131
      98:	5c032f32 	stcpl	15, cr2, [r3], {50}	; 0x32
      9c:	2f343520 	svccs	0x00343520
      a0:	02023632 	andeq	r3, r2, #52428800	; 0x3200000
      a4:	00010100 	andeq	r0, r1, r0, lsl #2
      a8:	020c0205 	andeq	r0, ip, #1342177280	; 0x50000000
      ac:	80030800 	andhi	r0, r3, r0, lsl #16
      b0:	01020101 	tsteq	r2, r1, lsl #2
      b4:	03010100 	movweq	r0, #4352	; 0x1100
      b8:	02000003 	andeq	r0, r0, #3
      bc:	00029400 	andeq	r9, r2, r0, lsl #8
      c0:	fb010200 	blx	408ca <_Min_Stack_Size+0x404ca>
      c4:	01000d0e 	tsteq	r0, lr, lsl #26
      c8:	00010101 	andeq	r0, r1, r1, lsl #2
      cc:	00010000 	andeq	r0, r1, r0
      d0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
      d4:	2f656d6f 	svccs	0x00656d6f
      d8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
      dc:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
      e0:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
      e4:	6170736b 	cmnvs	r0, fp, ror #6
      e8:	502f6563 	eorpl	r6, pc, r3, ror #10
      ec:	4b2e452e 	blmi	b915ac <_Min_Stack_Size+0xb911ac>
      f0:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
      f4:	6f72502f 	svcvs	0x0072502f
      f8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      fc:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     100:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     104:	685f3932 	ldmdavs	pc, {r1, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     108:	6f6c6c65 	svcvs	0x006c6c65
     10c:	6c726f77 	ldclvs	15, cr6, [r2], #-476	; 0xfffffe24
     110:	72532f64 	subsvc	r2, r3, #100, 30	; 0x190
     114:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
     118:	2f2e2e2f 	svccs	0x002e2e2f
     11c:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
     120:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     124:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     128:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
     12c:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
     130:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
     134:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
     138:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
     13c:	534d432f 	movtpl	r4, #54063	; 0xd32f
     140:	442f5349 	strtmi	r5, [pc], #-841	; 148 <_Min_Heap_Size-0xb8>
     144:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     148:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xfffff09b
     14c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     150:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     154:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
     158:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     15c:	2f006564 	svccs	0x00006564
     160:	2f727375 	svccs	0x00727375
     164:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     168:	2f656475 	svccs	0x00656475
     16c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     170:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; ffffffd4 <_estack+0xdffcffd4>
     174:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     178:	2f00656e 	svccs	0x0000656e
     17c:	2f727375 	svccs	0x00727375
     180:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     184:	2f656475 	svccs	0x00656475
     188:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     18c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     190:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     194:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     198:	616c502f 	cmnvs	ip, pc, lsr #32
     19c:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
     1a0:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
     1a4:	4332334d 	teqmi	r2, #872415233	; 0x34000001
     1a8:	5f656275 	svcpl	0x00656275
     1ac:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
     1b0:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
     1b4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     1b8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
     1bc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     1c0:	5f787834 	svcpl	0x00787834
     1c4:	5f4c4148 	svcpl	0x004c4148
     1c8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     1cc:	492f7265 	stmdbmi	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     1d0:	2e00636e 	cdpcs	3, 0, cr6, cr0, cr14, {3}
     1d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     1d8:	616c502f 	cmnvs	ip, pc, lsr #32
     1dc:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
     1e0:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
     1e4:	4332334d 	teqmi	r2, #872415233	; 0x34000001
     1e8:	5f656275 	svcpl	0x00656275
     1ec:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
     1f0:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
     1f4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     1f8:	53422f73 	movtpl	r2, #12147	; 0x2f73
     1fc:	54532f50 	ldrbpl	r2, [r3], #-3920	; 0xfffff0b0
     200:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     204:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
     208:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
     20c:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
     210:	2e007972 	mcrcs	9, 0, r7, cr0, cr2, {3}
     214:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     218:	616c502f 	cmnvs	ip, pc, lsr #32
     21c:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
     220:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
     224:	4332334d 	teqmi	r2, #872415233	; 0x34000001
     228:	5f656275 	svcpl	0x00656275
     22c:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
     230:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
     234:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     238:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     23c:	2f534953 	svccs	0x00534953
     240:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     244:	00656475 	rsbeq	r6, r5, r5, ror r4
     248:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     24c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     250:	73000001 	movwvc	r0, #1
     254:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     258:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
     25c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     260:	00000200 	andeq	r0, r0, r0, lsl #4
     264:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     268:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     26c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     270:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     274:	00000300 	andeq	r0, r0, r0, lsl #6
     278:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     27c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     280:	00040068 	andeq	r0, r4, r8, rrx
     284:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     288:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     28c:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     290:	645f6c61 	ldrbvs	r6, [pc], #-3169	; 298 <_Min_Heap_Size+0x98>
     294:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     298:	00000500 	andeq	r0, r0, r0, lsl #10
     29c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     2a0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     2a4:	61685f78 	smcvs	34296	; 0x85f8
     2a8:	63725f6c 	cmnvs	r2, #108, 30	; 0x1b0
     2ac:	78655f63 	stmdavc	r5!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     2b0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     2b4:	74730000 	ldrbtvc	r0, [r3], #-0
     2b8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     2bc:	5f787834 	svcpl	0x00787834
     2c0:	5f6c6168 	svcpl	0x006c6168
     2c4:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     2c8:	00050068 	andeq	r0, r5, r8, rrx
     2cc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     2d0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     2d4:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     2d8:	675f6c61 	ldrbvs	r6, [pc, -r1, ror #24]
     2dc:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     2e0:	00050068 	andeq	r0, r5, r8, rrx
     2e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     2e8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     2ec:	5f693932 	svcpl	0x00693932
     2f0:	63736964 	cmnvs	r3, #100, 18	; 0x190000
     2f4:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     2f8:	00682e79 	rsbeq	r2, r8, r9, ror lr
     2fc:	73000006 	movwvc	r0, #6
     300:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     304:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     308:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
     30c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     310:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
     314:	00050068 	andeq	r0, r5, r8, rrx
     318:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     31c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     320:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     324:	705f6c61 	subsvc	r6, pc, r1, ror #24
     328:	655f7277 	ldrbvs	r7, [pc, #-631]	; b9 <_Min_Heap_Size-0x147>
     32c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     330:	73000005 	movwvc	r0, #5
     334:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     338:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     33c:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
     340:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     344:	6f630000 	svcvs	0x00630000
     348:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     34c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     350:	00000700 	andeq	r0, r0, r0, lsl #14
     354:	02050000 	andeq	r0, r5, #0
     358:	08000210 	stmdaeq	r0, {r4, r9}
     35c:	0100c503 	tsteq	r0, r3, lsl #10
     360:	312e0c03 			; <UNDEFINED> instruction: 0x312e0c03
     364:	3c28033d 	stccc	3, cr0, [r8], #-244	; 0xffffff0c
     368:	93b11b25 			; <UNDEFINED> instruction: 0x93b11b25
     36c:	212f2122 			; <UNDEFINED> instruction: 0x212f2122
     370:	031b2130 	tsteq	fp, #48, 2
     374:	2131207a 	teqcs	r1, sl, ror r0
     378:	211e2421 	tstcs	lr, r1, lsr #8
     37c:	325e2122 	subscc	r2, lr, #-2147483640	; 0x80000008
     380:	2b2f2f31 	blcs	bcc04c <_Min_Stack_Size+0xbcbc4c>
     384:	21311f1f 	teqcs	r1, pc, lsl pc
     388:	4a100321 	bmi	401014 <_Min_Stack_Size+0x400c14>
     38c:	7a032331 	bvc	c9058 <_Min_Stack_Size+0xc8c58>
     390:	341d4d20 	ldrcc	r4, [sp], #-3360	; 0xfffff2e0
     394:	32207a03 	eorcc	r7, r0, #12288	; 0x3000
     398:	59312121 	ldmdbpl	r1!, {r0, r5, r8, sp}
     39c:	01040200 	mrseq	r0, R12_usr
     3a0:	3c7faa03 	ldclcc	10, cr10, [pc], #-12	; 39c <_Min_Heap_Size+0x19c>
     3a4:	2000ef03 	andcs	lr, r0, r3, lsl #30
     3a8:	01010008 	tsteq	r1, r8
     3ac:	00020500 	andeq	r0, r2, r0, lsl #10
     3b0:	03080003 	movweq	r0, #32771	; 0x8003
     3b4:	130101bf 	movwne	r0, #4543	; 0x11bf
     3b8:	0003023f 	andeq	r0, r3, pc, lsr r2
     3bc:	02280101 	eoreq	r0, r8, #1073741824	; 0x40000000
     3c0:	00020000 	andeq	r0, r2, r0
     3c4:	0000016c 	andeq	r0, r0, ip, ror #2
     3c8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     3cc:	0101000d 	tsteq	r1, sp
     3d0:	00000101 	andeq	r0, r0, r1, lsl #2
     3d4:	00000100 	andeq	r0, r0, r0, lsl #2
     3d8:	6f682f01 	svcvs	0x00682f01
     3dc:	662f656d 	strtvs	r6, [pc], -sp, ror #10
     3e0:	72656572 	rsbvc	r6, r5, #478150656	; 0x1c800000
     3e4:	2f736f74 	svccs	0x00736f74
     3e8:	6b726f57 	blvs	1c9c14c <_Min_Stack_Size+0x1c9bd4c>
     3ec:	63617073 	cmnvs	r1, #115	; 0x73
     3f0:	2e502f65 	cdpcs	15, 5, cr2, cr0, cr5, {3}
     3f4:	2e4b2e45 	cdpcs	14, 4, cr2, cr11, cr5, {2}
     3f8:	2f412e4b 	svccs	0x00412e4b
     3fc:	6a6f7250 	bvs	1bdcd44 <_Min_Stack_Size+0x1bdc944>
     400:	2f746365 	svccs	0x00746365
     404:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     408:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     40c:	65685f39 	strbvs	r5, [r8, #-3897]!	; 0xfffff0c7
     410:	776f6c6c 	strbvc	r6, [pc, -ip, ror #24]!
     414:	646c726f 	strbtvs	r7, [ip], #-623	; 0xfffffd91
     418:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
     41c:	73752f00 	cmnvc	r5, #0, 30
     420:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     424:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     428:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     42c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     430:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     434:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     438:	73752f00 	cmnvc	r5, #0, 30
     43c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     440:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     444:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     448:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     44c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     450:	2f2e2e00 	svccs	0x002e2e00
     454:	502f2e2e 	eorpl	r2, pc, lr, lsr #28
     458:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     45c:	2f6d726f 	svccs	0x006d726f
     460:	334d5453 	movtcc	r5, #54355	; 0xd453
     464:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
     468:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
     46c:	2f34465f 	svccs	0x0034465f
     470:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     474:	2f737265 	svccs	0x00737265
     478:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     47c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     480:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     484:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     488:	2f2e2e2f 	svccs	0x002e2e2f
     48c:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
     490:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     494:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     498:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
     49c:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
     4a0:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
     4a4:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
     4a8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
     4ac:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     4b0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     4b4:	485f7878 	ldmdami	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     4b8:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 4c0 <_Min_Stack_Size+0xc0>
     4bc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     4c0:	6e492f72 	mcrvs	15, 2, r2, cr9, cr2, {3}
     4c4:	73000063 	movwvc	r0, #99	; 0x63
     4c8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     4cc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     4d0:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
     4d4:	00010063 	andeq	r0, r1, r3, rrx
     4d8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     4dc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     4e0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     4e4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     4e8:	00020068 	andeq	r0, r2, r8, rrx
     4ec:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     4f0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     4f4:	0300682e 	movweq	r6, #2094	; 0x82e
     4f8:	6f630000 	svcvs	0x00630000
     4fc:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     500:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     504:	00000400 	andeq	r0, r0, r0, lsl #8
     508:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     50c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     510:	61685f78 	smcvs	34296	; 0x85f8
     514:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     518:	73000005 	movwvc	r0, #5
     51c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     520:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     524:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
     528:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     52c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     530:	00000005 	andeq	r0, r0, r5
     534:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     538:	03080003 	movweq	r0, #32771	; 0x8003
     53c:	020100c4 	andeq	r0, r1, #196	; 0xc4
     540:	01010001 	tsteq	r1, r1
     544:	10020500 	andne	r0, r2, r0, lsl #10
     548:	03080003 	movweq	r0, #32771	; 0x8003
     54c:	000100cd 	andeq	r0, r1, sp, asr #1
     550:	16010402 	strne	r0, [r1], -r2, lsl #8
     554:	01000102 	tsteq	r0, r2, lsl #2
     558:	02050001 	andeq	r0, r5, #1
     55c:	08000314 	stmdaeq	r0, {r2, r4, r8, r9}
     560:	0100da03 	tsteq	r0, r3, lsl #20
     564:	01040200 	mrseq	r0, R12_usr
     568:	00010216 	andeq	r0, r1, r6, lsl r2
     56c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     570:	00031802 	andeq	r1, r3, r2, lsl #16
     574:	00e70308 	rsceq	r0, r7, r8, lsl #6
     578:	04020001 	streq	r0, [r2], #-1
     57c:	01021601 	tsteq	r2, r1, lsl #12
     580:	00010100 	andeq	r0, r1, r0, lsl #2
     584:	031c0205 	tsteq	ip, #1342177280	; 0x50000000
     588:	f4030800 	vst2.8	{d0-d1}, [r3], r0
     58c:	02000100 	andeq	r0, r0, #0, 2
     590:	02160104 	andseq	r0, r6, #4, 2
     594:	01010001 	tsteq	r1, r1
     598:	20020500 	andcs	r0, r2, r0, lsl #10
     59c:	03080003 	movweq	r0, #32771	; 0x8003
     5a0:	02010181 	andeq	r0, r1, #1073741856	; 0x40000020
     5a4:	01010001 	tsteq	r1, r1
     5a8:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
     5ac:	03080003 	movweq	r0, #32771	; 0x8003
     5b0:	0201018a 	andeq	r0, r1, #-2147483614	; 0x80000022
     5b4:	01010001 	tsteq	r1, r1
     5b8:	28020500 	stmdacs	r2, {r8, sl}
     5bc:	03080003 	movweq	r0, #32771	; 0x8003
     5c0:	02010193 	andeq	r0, r1, #-1073741788	; 0xc0000024
     5c4:	01010001 	tsteq	r1, r1
     5c8:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
     5cc:	03080003 	movweq	r0, #32771	; 0x8003
     5d0:	1301019c 	movwne	r0, #4508	; 0x119c
     5d4:	01000202 	tsteq	r0, r2, lsl #4
     5d8:	02050001 	andeq	r0, r5, #1
     5dc:	08000330 	stmdaeq	r0, {r4, r5, r8, r9}
     5e0:	0101ad03 	tsteq	r1, r3, lsl #26
     5e4:	00030213 	andeq	r0, r3, r3, lsl r2
     5e8:	01b90101 			; <UNDEFINED> instruction: 0x01b90101
     5ec:	00020000 	andeq	r0, r2, r0
     5f0:	0000015f 	andeq	r0, r0, pc, asr r1
     5f4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5f8:	0101000d 	tsteq	r1, sp
     5fc:	00000101 	andeq	r0, r0, r1, lsl #2
     600:	00000100 	andeq	r0, r0, r0, lsl #2
     604:	6f682f01 	svcvs	0x00682f01
     608:	662f656d 	strtvs	r6, [pc], -sp, ror #10
     60c:	72656572 	rsbvc	r6, r5, #478150656	; 0x1c800000
     610:	2f736f74 	svccs	0x00736f74
     614:	6b726f57 	blvs	1c9c378 <_Min_Stack_Size+0x1c9bf78>
     618:	63617073 	cmnvs	r1, #115	; 0x73
     61c:	2e502f65 	cdpcs	15, 5, cr2, cr0, cr5, {3}
     620:	2e4b2e45 	cdpcs	14, 4, cr2, cr11, cr5, {2}
     624:	2f412e4b 	svccs	0x00412e4b
     628:	6a6f7250 	bvs	1bdcf70 <_Min_Stack_Size+0x1bdcb70>
     62c:	2f746365 	svccs	0x00746365
     630:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     634:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     638:	65685f39 	strbvs	r5, [r8, #-3897]!	; 0xfffff0c7
     63c:	776f6c6c 	strbvc	r6, [pc, -ip, ror #24]!
     640:	646c726f 	strbtvs	r7, [ip], #-623	; 0xfffffd91
     644:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
     648:	73752f00 	cmnvc	r5, #0, 30
     64c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     650:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     654:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     658:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     65c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     660:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     664:	73752f00 	cmnvc	r5, #0, 30
     668:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     66c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     670:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     674:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     678:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     67c:	2f2e2e00 	svccs	0x002e2e00
     680:	502f2e2e 	eorpl	r2, pc, lr, lsr #28
     684:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     688:	2f6d726f 	svccs	0x006d726f
     68c:	334d5453 	movtcc	r5, #54355	; 0xd453
     690:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
     694:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
     698:	2f34465f 	svccs	0x0034465f
     69c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     6a0:	2f737265 	svccs	0x00737265
     6a4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     6a8:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     6ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     6b0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     6b4:	2f2e2e2f 	svccs	0x002e2e2f
     6b8:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
     6bc:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     6c0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     6c4:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
     6c8:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
     6cc:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
     6d0:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
     6d4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
     6d8:	534d432f 	movtpl	r4, #54063	; 0xd32f
     6dc:	442f5349 	strtmi	r5, [pc], #-841	; 6e4 <_Min_Stack_Size+0x2e4>
     6e0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     6e4:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xfffff09b
     6e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     6ec:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     6f0:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
     6f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     6f8:	00006564 	andeq	r6, r0, r4, ror #10
     6fc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     700:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     704:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     708:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     70c:	0100632e 	tsteq	r0, lr, lsr #6
     710:	645f0000 	ldrbvs	r0, [pc], #-0	; 718 <_Min_Stack_Size+0x318>
     714:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     718:	745f746c 	ldrbvc	r7, [pc], #-1132	; 720 <_Min_Stack_Size+0x320>
     71c:	73657079 	cmnvc	r5, #121	; 0x79
     720:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     724:	735f0000 	cmpvc	pc, #0
     728:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     72c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     730:	63000003 	movwvs	r0, #3
     734:	5f65726f 	svcpl	0x0065726f
     738:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     73c:	00040068 	andeq	r0, r4, r8, rrx
     740:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     744:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     748:	78783932 	ldmdavc	r8!, {r1, r4, r5, r8, fp, ip, sp}^
     74c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     750:	00000000 	andeq	r0, r0, r0
     754:	03380205 	teqeq	r8, #1342177280	; 0x50000000
     758:	96030800 	strls	r0, [r3], -r0, lsl #16
     75c:	24150101 	ldrcs	r0, [r5], #-257	; 0xfffffeff
     760:	3223471c 	eorcc	r4, r3, #28, 14	; 0x700000
     764:	03200903 			; <UNDEFINED> instruction: 0x03200903
     768:	3f1d207a 	svccc	0x001d207a
     76c:	03236923 			; <UNDEFINED> instruction: 0x03236923
     770:	77032009 	strvc	r2, [r3, -r9]
     774:	22263f2e 	eorcs	r3, r6, #46, 30	; 0xb8
     778:	01000902 	tsteq	r0, r2, lsl #18
     77c:	02050001 	andeq	r0, r5, #1
     780:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
     784:	0101db03 	tsteq	r1, r3, lsl #22
     788:	24034c16 	strcs	r4, [r3], #-3094	; 0xfffff3ea
     78c:	3e1e3e58 	mrccc	14, 0, r3, cr14, cr8, {2}
     790:	213c6703 	teqcs	ip, r3, lsl #14
     794:	03373122 	teqeq	r7, #-2147483640	; 0x80000008
     798:	33292e0a 			; <UNDEFINED> instruction: 0x33292e0a
     79c:	032f6777 			; <UNDEFINED> instruction: 0x032f6777
     7a0:	0c02206a 	stceq	0, cr2, [r2], {106}	; 0x6a
     7a4:	ee010100 	adfs	f0, f1, f0
     7a8:	02000003 	andeq	r0, r0, #3
     7ac:	00021a00 	andeq	r1, r2, r0, lsl #20
     7b0:	fb010200 	blx	40fba <_Min_Stack_Size+0x40bba>
     7b4:	01000d0e 	tsteq	r0, lr, lsl #26
     7b8:	00010101 	andeq	r0, r1, r1, lsl #2
     7bc:	00010000 	andeq	r0, r1, r0
     7c0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     7c4:	2f656d6f 	svccs	0x00656d6f
     7c8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     7cc:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
     7d0:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
     7d4:	6170736b 	cmnvs	r0, fp, ror #6
     7d8:	502f6563 	eorpl	r6, pc, r3, ror #10
     7dc:	4b2e452e 	blmi	b91c9c <_Min_Stack_Size+0xb9189c>
     7e0:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
     7e4:	616c502f 	cmnvs	ip, pc, lsr #32
     7e8:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
     7ec:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
     7f0:	4332334d 	teqmi	r2, #872415233	; 0x34000001
     7f4:	5f656275 	svcpl	0x00656275
     7f8:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
     7fc:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
     800:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     804:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
     808:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     80c:	5f787834 	svcpl	0x00787834
     810:	5f4c4148 	svcpl	0x004c4148
     814:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     818:	532f7265 			; <UNDEFINED> instruction: 0x532f7265
     81c:	2e006372 	mcrcs	3, 0, r6, cr0, cr2, {3}
     820:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     824:	616c502f 	cmnvs	ip, pc, lsr #32
     828:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
     82c:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
     830:	4332334d 	teqmi	r2, #872415233	; 0x34000001
     834:	5f656275 	svcpl	0x00656275
     838:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
     83c:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
     840:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     844:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     848:	2f534953 	svccs	0x00534953
     84c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     850:	00656475 	rsbeq	r6, r5, r5, ror r4
     854:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
     858:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
     85c:	6f667461 	svcvs	0x00667461
     860:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
     864:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     868:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
     86c:	5f57465f 	svcpl	0x0057465f
     870:	442f3446 	strtmi	r3, [pc], #-1094	; 878 <_Min_Stack_Size+0x478>
     874:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     878:	432f7372 			; <UNDEFINED> instruction: 0x432f7372
     87c:	5349534d 	movtpl	r5, #37709	; 0x934d
     880:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     884:	2f656369 	svccs	0x00656369
     888:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
     88c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     890:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     894:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     898:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     89c:	73752f00 	cmnvc	r5, #0, 30
     8a0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     8a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     8a8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     8ac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     8b0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     8b4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     8b8:	73752f00 	cmnvc	r5, #0, 30
     8bc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     8c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     8c4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     8c8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     8cc:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     8d0:	2f2e2e00 	svccs	0x002e2e00
     8d4:	502f2e2e 	eorpl	r2, pc, lr, lsr #28
     8d8:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     8dc:	2f6d726f 	svccs	0x006d726f
     8e0:	334d5453 	movtcc	r5, #54355	; 0xd453
     8e4:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
     8e8:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
     8ec:	2f34465f 	svccs	0x0034465f
     8f0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     8f4:	2f737265 	svccs	0x00737265
     8f8:	334d5453 	movtcc	r5, #54355	; 0xd453
     8fc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     900:	41485f78 	hvcmi	34296	; 0x85f8
     904:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
     908:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     90c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     910:	74730000 	ldrbtvc	r0, [r3], #-0
     914:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     918:	5f787834 	svcpl	0x00787834
     91c:	2e6c6168 	powcsez	f6, f4, #0.0
     920:	00010063 	andeq	r0, r1, r3, rrx
     924:	736d6300 	cmnvc	sp, #0, 6
     928:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
     92c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     930:	00000200 	andeq	r0, r0, r0, lsl #4
     934:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     938:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     93c:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
     940:	00030068 	andeq	r0, r3, r8, rrx
     944:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     948:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     94c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     950:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     954:	00040068 	andeq	r0, r4, r8, rrx
     958:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     95c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     960:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     964:	6f630000 	svcvs	0x00630000
     968:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     96c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     970:	00000200 	andeq	r0, r0, r0, lsl #4
     974:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     978:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     97c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     980:	73000003 	movwvc	r0, #3
     984:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     988:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     98c:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
     990:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     994:	0600682e 	streq	r6, [r0], -lr, lsr #16
     998:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     99c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     9a0:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     9a4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     9a8:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     9ac:	00000300 	andeq	r0, r0, r0, lsl #6
     9b0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     9b4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     9b8:	61685f78 	smcvs	34296	; 0x85f8
     9bc:	6f635f6c 	svcvs	0x00635f6c
     9c0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     9c4:	0600682e 	streq	r6, [r0], -lr, lsr #16
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	04000205 	streq	r0, [r0], #-517	; 0xfffffdfb
     9d0:	e5030800 	str	r0, [r3, #-2048]	; 0xfffff800
     9d4:	01020101 	tsteq	r2, r1, lsl #2
     9d8:	00010100 	andeq	r0, r1, r0, lsl #2
     9dc:	04040205 	streq	r0, [r4], #-517	; 0xfffffdfb
     9e0:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
     9e4:	01020101 	tsteq	r2, r1, lsl #2
     9e8:	00010100 	andeq	r0, r1, r0, lsl #2
     9ec:	04080205 	streq	r0, [r8], #-517	; 0xfffffdfb
     9f0:	c8030800 	stmdagt	r3, {fp}
     9f4:	22010101 	andcs	r0, r1, #1073741824	; 0x40000000
     9f8:	22211f3d 	eorcs	r1, r1, #61, 30	; 0xf4
     9fc:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
     a00:	23212221 			; <UNDEFINED> instruction: 0x23212221
     a04:	00050232 	andeq	r0, r5, r2, lsr r2
     a08:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     a0c:	00043402 	andeq	r3, r4, r2, lsl #8
     a10:	02870308 	addeq	r0, r7, #8, 6	; 0x20000000
     a14:	223a1401 	eorscs	r1, sl, #16777216	; 0x1000000
     a18:	6a3f222c 	bvs	fc92d0 <_Min_Stack_Size+0xfc8ed0>
     a1c:	01000602 	tsteq	r0, r2, lsl #12
     a20:	02050001 	andeq	r0, r5, #1
     a24:	08000460 	stmdaeq	r0, {r5, r6, sl}
     a28:	0101a703 	tsteq	r1, r3, lsl #14
     a2c:	4e4e5c23 	cdpmi	12, 4, cr5, cr14, cr3, {1}
     a30:	02323f3f 	eorseq	r3, r2, #63, 30	; 0xfc
     a34:	01010004 	tsteq	r1, r4
     a38:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
     a3c:	03080004 	movweq	r0, #32772	; 0x8004
     a40:	130102b7 	movwne	r0, #4791	; 0x12b7
     a44:	01000802 	tsteq	r0, r2, lsl #16
     a48:	02050001 	andeq	r0, r5, #1
     a4c:	080004a4 	stmdaeq	r0, {r2, r5, r7, sl}
     a50:	0102c203 	tsteq	r2, r3, lsl #4
     a54:	04022f13 	streq	r2, [r2], #-3859	; 0xfffff0ed
     a58:	00010100 	andeq	r0, r1, r0, lsl #2
     a5c:	04b00205 	ldrteq	r0, [r0], #517	; 0x205
     a60:	d2030800 	andle	r0, r3, #0, 16
     a64:	222e0102 	eorcs	r0, lr, #-2147483648	; 0x80000000
     a68:	01040200 	mrseq	r0, R12_usr
     a6c:	0202693d 	andeq	r6, r2, #999424	; 0xf4000
     a70:	00010100 	andeq	r0, r1, r0, lsl #2
     a74:	04cc0205 	strbeq	r0, [ip], #517	; 0x205
     a78:	e5030800 	str	r0, [r3, #-2048]	; 0xfffff800
     a7c:	02140102 	andseq	r0, r4, #-2147483648	; 0x80000000
     a80:	01010008 	tsteq	r1, r8
     a84:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     a88:	03080004 	movweq	r0, #32772	; 0x8004
     a8c:	140102f5 	strne	r0, [r1], #-757	; 0xfffffd0b
     a90:	01000802 	tsteq	r0, r2, lsl #16
     a94:	02050001 	andeq	r0, r5, #1
     a98:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
     a9c:	0102ff03 	tsteq	r2, r3, lsl #30	; <UNPREDICTABLE>
     aa0:	00040214 	andeq	r0, r4, r4, lsl r2
     aa4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     aa8:	0004f402 	andeq	pc, r4, r2, lsl #8
     aac:	03880308 	orreq	r0, r8, #8, 6	; 0x20000000
     ab0:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     ab4:	01010004 	tsteq	r1, r4
     ab8:	00020500 	andeq	r0, r2, r0, lsl #10
     abc:	03080005 	movweq	r0, #32773	; 0x8005
     ac0:	13010391 	movwne	r0, #5009	; 0x1391
     ac4:	0006022f 	andeq	r0, r6, pc, lsr #4
     ac8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     acc:	00051002 	andeq	r1, r5, r2
     ad0:	039a0308 	orrseq	r0, sl, #8, 6	; 0x20000000
     ad4:	08021301 	stmdaeq	r2, {r0, r8, r9, ip}
     ad8:	00010100 	andeq	r0, r1, r0, lsl #2
     adc:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
     ae0:	a3030800 	movwge	r0, #14336	; 0x3800
     ae4:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     ae8:	01010008 	tsteq	r1, r8
     aec:	30020500 	andcc	r0, r2, r0, lsl #10
     af0:	03080005 	movweq	r0, #32773	; 0x8005
     af4:	130103ac 	movwne	r0, #5036	; 0x13ac
     af8:	01000802 	tsteq	r0, r2, lsl #16
     afc:	02050001 	andeq	r0, r5, #1
     b00:	08000540 	stmdaeq	r0, {r6, r8, sl}
     b04:	0103b503 	tsteq	r3, r3, lsl #10
     b08:	00080213 	andeq	r0, r8, r3, lsl r2
     b0c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     b10:	00055002 	andeq	r5, r5, r2
     b14:	03be0308 			; <UNDEFINED> instruction: 0x03be0308
     b18:	08021301 	stmdaeq	r2, {r0, r8, r9, ip}
     b1c:	00010100 	andeq	r0, r1, r0, lsl #2
     b20:	05600205 	strbeq	r0, [r0, #-517]!	; 0xfffffdfb
     b24:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
     b28:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     b2c:	01010008 	tsteq	r1, r8
     b30:	70020500 	andvc	r0, r2, r0, lsl #10
     b34:	03080005 	movweq	r0, #32773	; 0x8005
     b38:	040103d2 	streq	r0, [r1], #-978	; 0xfffffc2e
     b3c:	00c00302 	sbceq	r0, r0, r2, lsl #6
     b40:	03010401 	movweq	r0, #5121	; 0x1401
     b44:	09023c41 	stmdbeq	r2, {r0, r6, sl, fp, ip, sp}
     b48:	00010100 	andeq	r0, r1, r0, lsl #2
     b4c:	05880205 	streq	r0, [r8, #517]	; 0x205
     b50:	dd030800 	stcle	8, cr0, [r3, #-0]
     b54:	02040103 	andeq	r0, r4, #-1073741824	; 0xc0000000
     b58:	04013503 	streq	r3, [r1], #-1283	; 0xfffffafd
     b5c:	3c4c0301 	mcrrcc	3, 0, r0, ip, cr1
     b60:	01000b02 	tsteq	r0, r2, lsl #22
     b64:	02050001 	andeq	r0, r5, #1
     b68:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
     b6c:	0103ee03 	tsteq	r3, r3, lsl #28
     b70:	24030204 	strcs	r0, [r3], #-516	; 0xfffffdfc
     b74:	03010401 	movweq	r0, #5121	; 0x1401
     b78:	0a024a5d 	beq	934f4 <_Min_Stack_Size+0x930f4>
     b7c:	00010100 	andeq	r0, r1, r0, lsl #2
     b80:	05c00205 	strbeq	r0, [r0, #517]	; 0x205
     b84:	fd030800 	stc2	8, cr0, [r3, #-0]
     b88:	02040103 	andeq	r0, r4, #-1073741824	; 0xc0000000
     b8c:	04011503 	streq	r1, [r1], #-1283	; 0xfffffafd
     b90:	4a6d0301 	bmi	1b4179c <_Min_Stack_Size+0x1b4139c>
     b94:	01000a02 	tsteq	r0, r2, lsl #20
     b98:	00040901 	andeq	r0, r4, r1, lsl #18
     b9c:	f4000200 	vst1.8	{d0-d3}, [r0], r0
     ba0:	02000001 	andeq	r0, r0, #1
     ba4:	0d0efb01 	vstreq	d15, [lr, #-4]
     ba8:	01010100 	mrseq	r0, (UNDEF: 17)
     bac:	00000001 	andeq	r0, r0, r1
     bb0:	01000001 	tsteq	r0, r1
     bb4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; b00 <_Min_Stack_Size+0x700>
     bb8:	72662f65 	rsbvc	r2, r6, #404	; 0x194
     bbc:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
     bc0:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
     bc4:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
     bc8:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
     bcc:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
     bd0:	4b2e4b2e 	blmi	b93890 <_Min_Stack_Size+0xb93490>
     bd4:	502f412e 	eorpl	r4, pc, lr, lsr #2
     bd8:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     bdc:	2f6d726f 	svccs	0x006d726f
     be0:	334d5453 	movtcc	r5, #54355	; 0xd453
     be4:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
     be8:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
     bec:	2f34465f 	svccs	0x0034465f
     bf0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     bf4:	2f737265 	svccs	0x00737265
     bf8:	334d5453 	movtcc	r5, #54355	; 0xd453
     bfc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     c00:	41485f78 	hvcmi	34296	; 0x85f8
     c04:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
     c08:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     c0c:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
     c10:	2f2e2e00 	svccs	0x002e2e00
     c14:	502f2e2e 	eorpl	r2, pc, lr, lsr #28
     c18:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     c1c:	2f6d726f 	svccs	0x006d726f
     c20:	334d5453 	movtcc	r5, #54355	; 0xd453
     c24:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
     c28:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
     c2c:	2f34465f 	svccs	0x0034465f
     c30:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     c34:	2f737265 	svccs	0x00737265
     c38:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     c3c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     c40:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     c44:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     c48:	2f2e2e2f 	svccs	0x002e2e2f
     c4c:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
     c50:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     c54:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     c58:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
     c5c:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
     c60:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
     c64:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
     c68:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
     c6c:	534d432f 	movtpl	r4, #54063	; 0xd32f
     c70:	442f5349 	strtmi	r5, [pc], #-841	; c78 <_Min_Stack_Size+0x878>
     c74:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     c78:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xfffff09b
     c7c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     c80:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     c84:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
     c88:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     c8c:	2f006564 	svccs	0x00006564
     c90:	2f727375 	svccs	0x00727375
     c94:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     c98:	2f656475 	svccs	0x00656475
     c9c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     ca0:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; b04 <_Min_Stack_Size+0x704>
     ca4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     ca8:	2f00656e 	svccs	0x0000656e
     cac:	2f727375 	svccs	0x00727375
     cb0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     cb4:	2f656475 	svccs	0x00656475
     cb8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     cbc:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     cc0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     cc4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     cc8:	616c502f 	cmnvs	ip, pc, lsr #32
     ccc:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
     cd0:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
     cd4:	4332334d 	teqmi	r2, #872415233	; 0x34000001
     cd8:	5f656275 	svcpl	0x00656275
     cdc:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
     ce0:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
     ce4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     ce8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
     cec:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     cf0:	5f787834 	svcpl	0x00787834
     cf4:	5f4c4148 	svcpl	0x004c4148
     cf8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     cfc:	492f7265 	stmdbmi	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     d00:	0000636e 	andeq	r6, r0, lr, ror #6
     d04:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d08:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     d0c:	61685f78 	smcvs	34296	; 0x85f8
     d10:	6f635f6c 	svcvs	0x00635f6c
     d14:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     d18:	0100632e 	tsteq	r0, lr, lsr #6
     d1c:	6f630000 	svcvs	0x00630000
     d20:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     d24:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     d28:	00000200 	andeq	r0, r0, r0, lsl #4
     d2c:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     d30:	63675f73 	cmnvs	r7, #460	; 0x1cc
     d34:	00682e63 	rsbeq	r2, r8, r3, ror #28
     d38:	73000002 	movwvc	r0, #2
     d3c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     d40:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
     d44:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     d48:	00000300 	andeq	r0, r0, r0, lsl #6
     d4c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     d50:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     d54:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     d58:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     d5c:	00000400 	andeq	r0, r0, r0, lsl #8
     d60:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     d64:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     d68:	00050068 	andeq	r0, r5, r8, rrx
     d6c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     d70:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     d74:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     d78:	00000300 	andeq	r0, r0, r0, lsl #6
     d7c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d80:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     d84:	61685f78 	smcvs	34296	; 0x85f8
     d88:	6f635f6c 	svcvs	0x00635f6c
     d8c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     d90:	0600682e 	streq	r6, [r0], -lr, lsr #16
     d94:	00000000 	andeq	r0, r0, r0
     d98:	05dc0205 	ldrbeq	r0, [ip, #517]	; 0x205
     d9c:	a1030800 	tstge	r3, r0, lsl #16
     da0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     da4:	010b9f03 	tsteq	fp, r3, lsl #30
     da8:	314e552f 	cmpcc	lr, pc, lsr #10
     dac:	01000502 	tsteq	r0, r2, lsl #10
     db0:	02050001 	andeq	r0, r5, #1
     db4:	08000600 	stmdaeq	r0, {r9, sl}
     db8:	0101b703 	tsteq	r1, r3, lsl #14
     dbc:	99030204 	stmdbls	r3, {r2, r9}
     dc0:	0104010b 	tsteq	r4, fp, lsl #2
     dc4:	4a74e703 	bmi	1d3a9d8 <_Min_Stack_Size+0x1d3a5d8>
     dc8:	9f030204 	svcls	0x00030204
     dcc:	2d3d200c 	ldccs	0, cr2, [sp, #-48]!	; 0xffffffd0
     dd0:	4903772f 	stmdbmi	r3, {r0, r1, r2, r3, r5, r8, r9, sl, ip, sp, lr}
     dd4:	20360358 	eorscs	r0, r6, r8, asr r3
     dd8:	262e4a03 	strtcs	r4, [lr], -r3, lsl #20
     ddc:	98030104 	stmdals	r3, {r2, r8}
     de0:	02048274 	andeq	r8, r4, #116, 4	; 0x40000007
     de4:	2e0c9603 	cfmadd32cs	mvax0, mvfx9, mvfx12, mvfx3
     de8:	043c4e03 	ldrteq	r4, [ip], #-3587	; 0xfffff1fd
     dec:	749c0301 	ldrvc	r0, [ip], #769	; 0x301
     df0:	00060274 	andeq	r0, r6, r4, ror r2
     df4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     df8:	00066c02 	andeq	r6, r6, r2, lsl #24
     dfc:	01cd0308 	biceq	r0, sp, r8, lsl #6
     e00:	03020401 	movweq	r0, #9217	; 0x2401
     e04:	02010b8e 	andeq	r0, r1, #145408	; 0x23800
     e08:	0101000c 	tsteq	r1, ip
     e0c:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
     e10:	03080006 	movweq	r0, #32774	; 0x8006
     e14:	040101dd 	streq	r0, [r1], #-477	; 0xfffffe23
     e18:	0b890302 	bleq	fe241a28 <_estack+0xde211a28>
     e1c:	000c0201 	andeq	r0, ip, r1, lsl #4
     e20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     e24:	00069c02 	andeq	r9, r6, r2, lsl #24
     e28:	01ea0308 	mvneq	r0, r8, lsl #6
     e2c:	03030401 	movweq	r0, #13313	; 0x3401
     e30:	040101c2 	streq	r0, [r1], #-450	; 0xfffffe3e
     e34:	0ad60302 	beq	ff581a44 <_estack+0xdf551a44>
     e38:	3b211f2e 	blcc	848af8 <_Min_Stack_Size+0x8486f8>
     e3c:	ab030304 	blge	c1a54 <_Min_Stack_Size+0xc1654>
     e40:	4a032e75 	bmi	cc81c <_Min_Stack_Size+0xcc41c>
     e44:	0007022e 	andeq	r0, r7, lr, lsr #4
     e48:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     e4c:	0006c002 	andeq	ip, r6, r2
     e50:	01f70308 	mvnseq	r0, r8, lsl #6
     e54:	03020401 	movweq	r0, #9217	; 0x2401
     e58:	4f010cb0 	svcmi	0x00010cb0
     e5c:	cb030104 	blgt	c1274 <_Min_Stack_Size+0xc0e74>
     e60:	02042073 	andeq	r2, r4, #115	; 0x73
     e64:	200bae03 	andcs	sl, fp, r3, lsl #28
     e68:	20018703 	andcs	r8, r1, r3, lsl #14
     e6c:	207ef903 	rsbscs	pc, lr, r3, lsl #18
     e70:	3c018903 	stccc	9, cr8, [r1], {3}
     e74:	211c2321 	tstcs	ip, r1, lsr #6
     e78:	ca030104 	bgt	c1290 <_Min_Stack_Size+0xc0e90>
     e7c:	02042073 	andeq	r2, r4, #115	; 0x73
     e80:	3c0cb003 	stccc	0, cr11, [ip], {3}
     e84:	01000702 	tsteq	r0, r2, lsl #14
     e88:	02050001 	andeq	r0, r5, #1
     e8c:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
     e90:	01029603 	tsteq	r2, r3, lsl #12
     e94:	19033e34 	stmdbne	r3, {r2, r4, r5, r9, sl, fp, ip, sp}
     e98:	7203212e 	andvc	r2, r3, #-2147483637	; 0x8000000b
     e9c:	311f303c 	tstcc	pc, ip, lsr r0	; <UNPREDICTABLE>
     ea0:	7a032322 	bvc	c9b30 <_Min_Stack_Size+0xc9730>
     ea4:	2f302220 	svccs	0x00302220
     ea8:	1f207a03 	svcne	0x00207a03
     eac:	2e7903cf 	cdpcs	3, 7, cr0, cr9, cr15, {6}
     eb0:	01000502 	tsteq	r0, r2, lsl #10
     eb4:	02050001 	andeq	r0, r5, #1
     eb8:	08000750 	stmdaeq	r0, {r4, r6, r8, r9, sl}
     ebc:	0102c203 	tsteq	r2, r3, lsl #4
     ec0:	8e030204 	cdphi	2, 0, cr0, cr3, cr4, {0}
     ec4:	0104010a 	tsteq	r4, sl, lsl #2
     ec8:	2e75f503 	cdpcs	5, 7, cr15, cr5, cr3, {0}
     ecc:	01000602 	tsteq	r0, r2, lsl #12
     ed0:	02050001 	andeq	r0, r5, #1
     ed4:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
     ed8:	0102dd03 	tsteq	r2, r3, lsl #26
     edc:	dd030204 	sfmle	f0, 4, [r3, #-16]
     ee0:	0104010a 	tsteq	r4, sl, lsl #2
     ee4:	2075a303 	rsbscs	sl, r5, r3, lsl #6
     ee8:	dd030204 	sfmle	f0, 4, [r3, #-16]
     eec:	0326200a 			; <UNDEFINED> instruction: 0x0326200a
     ef0:	3d32742d 	cfldrscc	mvf7, [r2, #-180]!	; 0xffffff4c
     ef4:	75762f2d 	ldrbvc	r2, [r6, #-3885]!	; 0xfffff0d3
     ef8:	ed030104 	stfs	f0, [r3, #-16]
     efc:	02042074 	andeq	r2, r4, #116	; 0x74
     f00:	2e0b9003 	cdpcs	0, 0, cr9, cr11, cr3, {0}
     f04:	023c4a03 	eorseq	r4, ip, #12288	; 0x3000
     f08:	01010009 	tsteq	r1, r9
     f0c:	c0020500 	andgt	r0, r2, r0, lsl #10
     f10:	03080007 	movweq	r0, #32775	; 0x8007
     f14:	040102ec 	streq	r0, [r1], #-748	; 0xfffffd14
     f18:	0a920302 	beq	fe481b28 <_estack+0xde451b28>
     f1c:	000c0201 	andeq	r0, ip, r1, lsl #4
     f20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     f24:	0007d802 	andeq	sp, r7, r2, lsl #16
     f28:	02fe0308 	rscseq	r0, lr, #8, 6	; 0x20000000
     f2c:	03020401 	movweq	r0, #9217	; 0x2401
     f30:	040109f5 	streq	r0, [r1], #-2549	; 0xfffff60b
     f34:	76910301 	ldrvc	r0, [r1], r1, lsl #6
     f38:	00050290 	muleq	r5, r0, r2
     f3c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     f40:	0007f402 	andeq	pc, r7, r2, lsl #8
     f44:	038e0308 	orreq	r0, lr, #8, 6	; 0x20000000
     f48:	03020401 	movweq	r0, #9217	; 0x2401
     f4c:	020109fb 	andeq	r0, r1, #4112384	; 0x3ec000
     f50:	0101000c 	tsteq	r1, ip
     f54:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     f58:	03080008 	movweq	r0, #32776	; 0x8008
     f5c:	0401039f 	streq	r0, [r1], #-927	; 0xfffffc61
     f60:	09f70302 	ldmibeq	r7!, {r1, r8, r9}^
     f64:	03010401 	movweq	r0, #5121	; 0x1401
     f68:	0290768f 	addseq	r7, r0, #149946368	; 0x8f00000
     f6c:	01010005 	tsteq	r1, r5
     f70:	28020500 	stmdacs	r2, {r8, sl}
     f74:	03080008 	movweq	r0, #32776	; 0x8008
     f78:	170103b0 			; <UNDEFINED> instruction: 0x170103b0
     f7c:	0240222c 	subeq	r2, r0, #44, 4	; 0xc0000002
     f80:	01010006 	tsteq	r1, r6
     f84:	40020500 	andmi	r0, r2, r0, lsl #10
     f88:	03080008 	movweq	r0, #32776	; 0x8008
     f8c:	020103cb 	andeq	r0, r1, #738197507	; 0x2c000003
     f90:	01010001 	tsteq	r1, r1
     f94:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
     f98:	03080008 	movweq	r0, #32776	; 0x8008
     f9c:	010103c2 	smlabteq	r1, r2, r3, r0
     fa0:	00030221 	andeq	r0, r3, r1, lsr #4
     fa4:	04150101 	ldreq	r0, [r5], #-257	; 0xfffffeff
     fa8:	00020000 	andeq	r0, r2, r0
     fac:	000001f8 	strdeq	r0, [r0], -r8
     fb0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     fb4:	0101000d 	tsteq	r1, sp
     fb8:	00000101 	andeq	r0, r0, r1, lsl #2
     fbc:	00000100 	andeq	r0, r0, r0, lsl #2
     fc0:	6f682f01 	svcvs	0x00682f01
     fc4:	662f656d 	strtvs	r6, [pc], -sp, ror #10
     fc8:	72656572 	rsbvc	r6, r5, #478150656	; 0x1c800000
     fcc:	2f736f74 	svccs	0x00736f74
     fd0:	6b726f57 	blvs	1c9cd34 <_Min_Stack_Size+0x1c9c934>
     fd4:	63617073 	cmnvs	r1, #115	; 0x73
     fd8:	2e502f65 	cdpcs	15, 5, cr2, cr0, cr5, {3}
     fdc:	2e4b2e45 	cdpcs	14, 4, cr2, cr11, cr5, {2}
     fe0:	2f412e4b 	svccs	0x00412e4b
     fe4:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
     fe8:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     fec:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     ff0:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
     ff4:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
     ff8:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
     ffc:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1000:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1004:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1008:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    100c:	485f7878 	ldmdami	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    1010:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 1018 <_Min_Stack_Size+0xc18>
    1014:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1018:	72532f72 	subsvc	r2, r3, #456	; 0x1c8
    101c:	752f0063 	strvc	r0, [pc, #-99]!	; fc1 <_Min_Stack_Size+0xbc1>
    1020:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1024:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1028:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    102c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1030:	616d2f62 	cmnvs	sp, r2, ror #30
    1034:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1038:	752f0065 	strvc	r0, [pc, #-101]!	; fdb <_Min_Stack_Size+0xbdb>
    103c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1040:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1044:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1048:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    104c:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1050:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    1054:	2f2e2e2f 	svccs	0x002e2e2f
    1058:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
    105c:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    1060:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1064:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    1068:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
    106c:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
    1070:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1074:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1078:	534d432f 	movtpl	r4, #54063	; 0xd32f
    107c:	442f5349 	strtmi	r5, [pc], #-841	; 1084 <_Min_Stack_Size+0xc84>
    1080:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1084:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xfffff09b
    1088:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    108c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1090:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1094:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1098:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    109c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    10a0:	616c502f 	cmnvs	ip, pc, lsr #32
    10a4:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    10a8:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    10ac:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    10b0:	5f656275 	svcpl	0x00656275
    10b4:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    10b8:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    10bc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    10c0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
    10c4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    10c8:	5f787834 	svcpl	0x00787834
    10cc:	5f4c4148 	svcpl	0x004c4148
    10d0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    10d4:	492f7265 	stmdbmi	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    10d8:	2e00636e 	cdpcs	3, 0, cr6, cr0, cr14, {3}
    10dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    10e0:	616c502f 	cmnvs	ip, pc, lsr #32
    10e4:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    10e8:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    10ec:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    10f0:	5f656275 	svcpl	0x00656275
    10f4:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    10f8:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    10fc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1100:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1104:	2f534953 	svccs	0x00534953
    1108:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    110c:	00656475 	rsbeq	r6, r5, r5, ror r4
    1110:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1114:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1118:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    111c:	675f6c61 	ldrbvs	r6, [pc, -r1, ror #24]
    1120:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    1124:	00010063 	andeq	r0, r1, r3, rrx
    1128:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    112c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1130:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1134:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1138:	00020068 	andeq	r0, r2, r8, rrx
    113c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1140:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1144:	0300682e 	movweq	r6, #2094	; 0x82e
    1148:	74730000 	ldrbtvc	r0, [r3], #-0
    114c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1150:	78393234 	ldmdavc	r9!, {r2, r4, r5, r9, ip, sp}
    1154:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1158:	73000004 	movwvc	r0, #4
    115c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1160:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1164:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1168:	74730000 	ldrbtvc	r0, [r3], #-0
    116c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1170:	5f787834 	svcpl	0x00787834
    1174:	5f6c6168 	svcpl	0x006c6168
    1178:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    117c:	00050068 	andeq	r0, r5, r8, rrx
    1180:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1184:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1188:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    118c:	675f6c61 	ldrbvs	r6, [pc, -r1, ror #24]
    1190:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    1194:	00050068 	andeq	r0, r5, r8, rrx
    1198:	726f6300 	rsbvc	r6, pc, #0, 6
    119c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    11a0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    11a4:	00000006 	andeq	r0, r0, r6
    11a8:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    11ac:	03080008 	movweq	r0, #32776	; 0x8008
    11b0:	030101bd 	movweq	r0, #4541	; 0x11bd
    11b4:	324a00c7 	subcc	r0, sl, #199	; 0xc7
    11b8:	7fbe0332 	svcvc	0x00be0332
    11bc:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    11c0:	063c0602 	ldrteq	r0, [ip], -r2, lsl #12
    11c4:	221e224d 	andscs	r2, lr, #-805306364	; 0xd0000004
    11c8:	0d033222 	sfmeq	f3, 4, [r3, #-136]	; 0xffffff78
    11cc:	3d2f1f90 	stccc	15, cr1, [pc, #-576]!	; f94 <_Min_Stack_Size+0xb94>
    11d0:	2a322f2d 	bcs	c8ce8c <_Min_Stack_Size+0xc8ca8c>
    11d4:	03312b32 	teqeq	r1, #51200	; 0xc800
    11d8:	1f302e13 	svcne	0x00302e13
    11dc:	31244b2f 			; <UNDEFINED> instruction: 0x31244b2f
    11e0:	302b5b08 	eorcc	r5, fp, r8, lsl #22
    11e4:	2f1f672f 	svccs	0x001f672f
    11e8:	01040200 	mrseq	r0, R12_usr
    11ec:	02002006 	andeq	r2, r0, #6
    11f0:	004a0304 	subeq	r0, sl, r4, lsl #6
    11f4:	4a050402 	bmi	142204 <_Min_Stack_Size+0x141e04>
    11f8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    11fc:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1200:	02004a09 	andeq	r4, r0, #36864	; 0x9000
    1204:	004a0b04 	subeq	r0, sl, r4, lsl #22
    1208:	4a0d0402 	bmi	342218 <_Min_Stack_Size+0x341e18>
    120c:	0f040200 	svceq	0x00040200
    1210:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    1214:	02005811 	andeq	r5, r0, #1114112	; 0x110000
    1218:	009e2804 	addseq	r2, lr, r4, lsl #16
    121c:	06280402 	strteq	r0, [r8], -r2, lsl #8
    1220:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    1224:	02003128 	andeq	r3, r0, #40, 2
    1228:	00212804 	eoreq	r2, r1, r4, lsl #16
    122c:	2f280402 	svccs	0x00280402
    1230:	28040200 	stmdacs	r4, {r9}
    1234:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    1238:	02002b28 	andeq	r2, r0, #40, 22	; 0xa000
    123c:	00332804 	eorseq	r2, r3, r4, lsl #16
    1240:	22280402 	eorcs	r0, r8, #33554432	; 0x2000000
    1244:	28040200 	stmdacs	r4, {r9}
    1248:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    124c:	02002228 	andeq	r2, r0, #40, 4	; 0x80000002
    1250:	002b2804 	eoreq	r2, fp, r4, lsl #16
    1254:	33280402 			; <UNDEFINED> instruction: 0x33280402
    1258:	28040200 	stmdacs	r4, {r9}
    125c:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    1260:	02002228 	andeq	r2, r0, #40, 4	; 0x80000002
    1264:	00222804 	eoreq	r2, r2, r4, lsl #16
    1268:	2b280402 	blcs	a02278 <_Min_Stack_Size+0xa01e78>
    126c:	28040200 	stmdacs	r4, {r9}
    1270:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    1274:	02002228 	andeq	r2, r0, #40, 4	; 0x80000002
    1278:	00222804 	eoreq	r2, r2, r4, lsl #16
    127c:	03280402 			; <UNDEFINED> instruction: 0x03280402
    1280:	00207fa3 	eoreq	r7, r0, r3, lsr #31
    1284:	03280402 			; <UNDEFINED> instruction: 0x03280402
    1288:	002e00dc 	ldrdeq	r0, [lr], -ip	; <UNPREDICTABLE>
    128c:	3f280402 	svccc	0x00280402
    1290:	28040200 	stmdacs	r4, {r9}
    1294:	207fa103 	rsbscs	sl, pc, r3, lsl #2
    1298:	28040200 	stmdacs	r4, {r9}
    129c:	2000e103 	andcs	lr, r0, r3, lsl #2
    12a0:	28040200 	stmdacs	r4, {r9}
    12a4:	207f9f03 	rsbscs	r9, pc, r3, lsl #30
    12a8:	2e00e503 	cfsh32cs	mvfx14, mvfx0, #3
    12ac:	3c7fab03 	ldclcc	11, cr10, [pc], #-12	; 12a8 <_Min_Stack_Size+0xea8>
    12b0:	832f2d4b 			; <UNDEFINED> instruction: 0x832f2d4b
    12b4:	2f1f4f59 	svccs	0x001f4f59
    12b8:	4b2f2d3d 	blmi	bcc7b4 <_Min_Stack_Size+0xbcc3b4>
    12bc:	302e0903 	eorcc	r0, lr, r3, lsl #18
    12c0:	314b2f1f 	cmpcc	fp, pc, lsl pc
    12c4:	4b2f2d30 	blmi	bcc78c <_Min_Stack_Size+0xbcc38c>
    12c8:	01004302 	tsteq	r0, r2, lsl #6
    12cc:	02050001 	andeq	r0, r5, #1
    12d0:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
    12d4:	0102ba03 	tsteq	r2, r3, lsl #20
    12d8:	032e2d03 			; <UNDEFINED> instruction: 0x032e2d03
    12dc:	5a032e79 	bpl	cccc8 <_Min_Stack_Size+0xcc8c8>
    12e0:	200a034a 	andcs	r0, sl, sl, asr #6
    12e4:	02040200 	andeq	r0, r4, #0, 4
    12e8:	3f062e06 	svccc	0x00062e06
    12ec:	8532303e 	ldrhi	r3, [r2, #-62]!	; 0xffffffc2
    12f0:	3faf4d2b 	svccc	0x00af4d2b
    12f4:	212d944d 			; <UNDEFINED> instruction: 0x212d944d
    12f8:	002f1f2f 	eoreq	r1, pc, pc, lsr #30
    12fc:	06010402 	streq	r0, [r1], -r2, lsl #8
    1300:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    1304:	02002e03 	andeq	r2, r0, #3, 28	; 0x30
    1308:	003c0504 	eorseq	r0, ip, r4, lsl #10
    130c:	3c070402 	cfstrscc	mvf0, [r7], {2}
    1310:	09040200 	stmdbeq	r4, {r9}
    1314:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1318:	02003c0b 	andeq	r3, r0, #2816	; 0xb00
    131c:	003c0d04 	eorseq	r0, ip, r4, lsl #26
    1320:	3c0f0402 	cfstrscc	mvf0, [pc], {2}
    1324:	11040200 	mrsne	r0, R12_usr
    1328:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    132c:	32065828 	andcc	r5, r6, #40, 16	; 0x280000
    1330:	595b594d 	ldmdbpl	fp, {r0, r2, r3, r6, r8, fp, ip, lr}^
    1334:	032e5803 			; <UNDEFINED> instruction: 0x032e5803
    1338:	58032028 	stmdapl	r3, {r3, r5, sp}
    133c:	20280320 	eorcs	r0, r8, r0, lsr #6
    1340:	032e5803 			; <UNDEFINED> instruction: 0x032e5803
    1344:	3202202c 	andcc	r2, r2, #44	; 0x2c
    1348:	00010100 	andeq	r0, r1, r0, lsl #2
    134c:	0c2c0205 	sfmeq	f0, 4, [ip], #-20	; 0xffffffec
    1350:	8b030800 	blhi	c3358 <_Min_Stack_Size+0xc2f58>
    1354:	03180103 	tsteq	r8, #-1073741824	; 0xc0000000
    1358:	04022e09 	streq	r2, [r2], #-3593	; 0xfffff1f7
    135c:	00010100 	andeq	r0, r1, r0, lsl #2
    1360:	0c380205 	lfmeq	f0, 4, [r8], #-20	; 0xffffffec
    1364:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
    1368:	26170103 	ldrcs	r0, [r7], -r3, lsl #2
    136c:	01000302 	tsteq	r0, r2, lsl #6
    1370:	02050001 	andeq	r0, r5, #1
    1374:	08000c40 	stmdaeq	r0, {r6, sl, fp}
    1378:	0103c503 	tsteq	r3, r3, lsl #10
    137c:	00040216 	andeq	r0, r4, r6, lsl r2
    1380:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1384:	000c4802 	andeq	r4, ip, r2, lsl #16
    1388:	03d80308 	bicseq	r0, r8, #8, 6	; 0x20000000
    138c:	3e422101 	dvfccs	f2, f2, f1
    1390:	30302230 	eorscc	r2, r0, r0, lsr r2
    1394:	00040244 	andeq	r0, r4, r4, asr #4
    1398:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    139c:	000c7402 	andeq	r7, ip, r2, lsl #8
    13a0:	04880308 	streq	r0, [r8], #776	; 0x308
    13a4:	00010201 	andeq	r0, r1, r1, lsl #4
    13a8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    13ac:	000c7802 	andeq	r7, ip, r2, lsl #16
    13b0:	03f90308 	mvnseq	r0, #8, 6	; 0x20000000
    13b4:	223a1401 	eorscs	r1, sl, #16777216	; 0x1000000
    13b8:	06022122 	streq	r2, [r2], -r2, lsr #2
    13bc:	ba010100 	blt	417c4 <_Min_Stack_Size+0x413c4>
    13c0:	0200001a 	andeq	r0, r0, #26
    13c4:	00024d00 	andeq	r4, r2, r0, lsl #26
    13c8:	fb010200 	blx	41bd2 <_Min_Stack_Size+0x417d2>
    13cc:	01000d0e 	tsteq	r0, lr, lsl #26
    13d0:	00010101 	andeq	r0, r1, r1, lsl #2
    13d4:	00010000 	andeq	r0, r1, r0
    13d8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    13dc:	2f656d6f 	svccs	0x00656d6f
    13e0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    13e4:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
    13e8:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
    13ec:	6170736b 	cmnvs	r0, fp, ror #6
    13f0:	502f6563 	eorpl	r6, pc, r3, ror #10
    13f4:	4b2e452e 	blmi	b928b4 <_Min_Stack_Size+0xb924b4>
    13f8:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
    13fc:	616c502f 	cmnvs	ip, pc, lsr #32
    1400:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    1404:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    1408:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    140c:	5f656275 	svcpl	0x00656275
    1410:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    1414:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    1418:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    141c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
    1420:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1424:	5f787834 	svcpl	0x00787834
    1428:	5f4c4148 	svcpl	0x004c4148
    142c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1430:	532f7265 			; <UNDEFINED> instruction: 0x532f7265
    1434:	2f006372 	svccs	0x00006372
    1438:	2f727375 	svccs	0x00727375
    143c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1440:	2f656475 	svccs	0x00656475
    1444:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1448:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 12ac <_Min_Stack_Size+0xeac>
    144c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1450:	2f00656e 	svccs	0x0000656e
    1454:	2f727375 	svccs	0x00727375
    1458:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    145c:	2f656475 	svccs	0x00656475
    1460:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1464:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1468:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    146c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1470:	616c502f 	cmnvs	ip, pc, lsr #32
    1474:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    1478:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    147c:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    1480:	5f656275 	svcpl	0x00656275
    1484:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    1488:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    148c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1490:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1494:	2f534953 	svccs	0x00534953
    1498:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    149c:	532f6563 			; <UNDEFINED> instruction: 0x532f6563
    14a0:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    14a4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    14a8:	2f787834 	svccs	0x00787834
    14ac:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    14b0:	00656475 	rsbeq	r6, r5, r5, ror r4
    14b4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    14b8:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
    14bc:	6f667461 	svcvs	0x00667461
    14c0:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    14c4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14c8:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    14cc:	5f57465f 	svcpl	0x0057465f
    14d0:	442f3446 	strtmi	r3, [pc], #-1094	; 14d8 <_Min_Stack_Size+0x10d8>
    14d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    14d8:	532f7372 			; <UNDEFINED> instruction: 0x532f7372
    14dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14e0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    14e4:	4c41485f 	mcrrmi	8, 5, r4, r1, cr15
    14e8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    14ec:	2f726576 	svccs	0x00726576
    14f0:	00636e49 	rsbeq	r6, r3, r9, asr #28
    14f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    14f8:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
    14fc:	6f667461 	svcvs	0x00667461
    1500:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    1504:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1508:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    150c:	5f57465f 	svcpl	0x0057465f
    1510:	442f3446 	strtmi	r3, [pc], #-1094	; 1518 <_Min_Stack_Size+0x1118>
    1514:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1518:	432f7372 			; <UNDEFINED> instruction: 0x432f7372
    151c:	5349534d 	movtpl	r5, #37709	; 0x934d
    1520:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1524:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1528:	74730000 	ldrbtvc	r0, [r3], #-0
    152c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1530:	5f787834 	svcpl	0x00787834
    1534:	5f6c6168 	svcpl	0x006c6168
    1538:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    153c:	00010063 	andeq	r0, r1, r3, rrx
    1540:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1544:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1548:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    154c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1550:	00020068 	andeq	r0, r2, r8, rrx
    1554:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1558:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    155c:	0300682e 	movweq	r6, #2094	; 0x82e
    1560:	74730000 	ldrbtvc	r0, [r3], #-0
    1564:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1568:	78393234 	ldmdavc	r9!, {r2, r4, r5, r9, ip, sp}
    156c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1570:	73000004 	movwvc	r0, #4
    1574:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1578:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    157c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1580:	74730000 	ldrbtvc	r0, [r3], #-0
    1584:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1588:	5f787834 	svcpl	0x00787834
    158c:	5f6c6168 	svcpl	0x006c6168
    1590:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1594:	00050068 	andeq	r0, r5, r8, rrx
    1598:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    159c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    15a0:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    15a4:	645f6c61 	ldrbvs	r6, [pc], #-3169	; 15ac <_Min_Stack_Size+0x11ac>
    15a8:	682e616d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}
    15ac:	00000500 	andeq	r0, r0, r0, lsl #10
    15b0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15b4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    15b8:	61685f78 	smcvs	34296	; 0x85f8
    15bc:	32695f6c 	rsbcc	r5, r9, #108, 30	; 0x1b0
    15c0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    15c4:	63000005 	movwvs	r0, #5
    15c8:	5f65726f 	svcpl	0x0065726f
    15cc:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    15d0:	00060068 	andeq	r0, r6, r8, rrx
    15d4:	73797300 	cmnvc	r9, #0, 6
    15d8:	5f6d6574 	svcpl	0x006d6574
    15dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    15e4:	00682e78 	rsbeq	r2, r8, r8, ror lr
    15e8:	73000004 	movwvc	r0, #4
    15ec:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    15f0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    15f4:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    15f8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    15fc:	74730000 	ldrbtvc	r0, [r3], #-0
    1600:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1604:	5f787834 	svcpl	0x00787834
    1608:	5f6c6168 	svcpl	0x006c6168
    160c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1610:	00050068 	andeq	r0, r5, r8, rrx
    1614:	05000000 	streq	r0, [r0, #-0]
    1618:	000c9002 	andeq	r9, ip, r2
    161c:	299a0308 	ldmibcs	sl, {r3, r8, r9}
    1620:	3a782001 	bcc	1e0962c <_Min_Stack_Size+0x1e0922c>
    1624:	03582403 	cmpeq	r8, #50331648	; 0x3000000
    1628:	035a205c 	cmpeq	sl, #92	; 0x5c
    162c:	21683c15 	cmncs	r8, r5, lsl ip
    1630:	332b241f 			; <UNDEFINED> instruction: 0x332b241f
    1634:	262e6603 	strtcs	r6, [lr], -r3, lsl #12
    1638:	22332b1d 	eorscs	r2, r3, #29696	; 0x7400
    163c:	03207903 			; <UNDEFINED> instruction: 0x03207903
    1640:	7703200c 	strvc	r2, [r3, -ip]
    1644:	2a252220 	bcs	949ecc <_Min_Stack_Size+0x949acc>
    1648:	00030221 	andeq	r0, r3, r1, lsr #4
    164c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1650:	000d0402 	andeq	r0, sp, r2, lsl #8
    1654:	26980308 	ldrcs	r0, [r8], r8, lsl #6
    1658:	221e3e01 	andscs	r3, lr, #1, 28
    165c:	302c301e 	eorcc	r3, ip, lr, lsl r0
    1660:	3c02e103 	stfccd	f6, [r2], {3}
    1664:	3c7da803 	ldclcc	8, cr10, [sp], #-12
    1668:	5802f903 	stmdapl	r2, {r0, r1, r8, fp, ip, sp, lr, pc}
    166c:	3c15033e 	ldccc	3, cr0, [r5], {62}	; 0x3e
    1670:	3aba6b03 	bcc	fee9c284 <_estack+0xdee6c284>
    1674:	3c7d9703 	ldclcc	7, cr9, [sp], #-12
    1678:	9004af03 	andls	sl, r4, r3, lsl #30
    167c:	207eea03 	rsbscs	lr, lr, r3, lsl #20
    1680:	3c019603 	stccc	6, cr9, [r1], {3}
    1684:	22301d42 	eorscs	r1, r0, #4224	; 0x1080
    1688:	2a25221c 	bcs	949f00 <_Min_Stack_Size+0x949b00>
    168c:	7bcf0321 	blvc	ff3c2318 <_estack+0xdf392318>
    1690:	bb03442e 	bllt	d2750 <_Min_Stack_Size+0xd2350>
    1694:	03412e02 	movteq	r2, #7682	; 0x1e02
    1698:	1d269021 	stcne	0, cr9, [r6, #-132]!	; 0xffffff7c
    169c:	0322332b 			; <UNDEFINED> instruction: 0x0322332b
    16a0:	22232079 	eorcs	r2, r3, #121	; 0x79
    16a4:	03212a25 			; <UNDEFINED> instruction: 0x03212a25
    16a8:	262e7d80 	strtcs	r7, [lr], -r0, lsl #27
    16ac:	034a3603 	movteq	r3, #42499	; 0xa603
    16b0:	213c029e 	teqcs	ip, lr	; <illegal shifter operand>
    16b4:	032a251f 			; <UNDEFINED> instruction: 0x032a251f
    16b8:	032e7d9c 			; <UNDEFINED> instruction: 0x032e7d9c
    16bc:	032002e5 			; <UNDEFINED> instruction: 0x032002e5
    16c0:	593c7dd2 	ldmdbpl	ip!, {r1, r4, r6, r7, r8, sl, fp, ip, sp, lr}
    16c4:	2e02f503 	cfsh32cs	mvfx15, mvfx2, #3
    16c8:	207cf903 	rsbscs	pc, ip, r3, lsl #18
    16cc:	032e0903 			; <UNDEFINED> instruction: 0x032e0903
    16d0:	034a02fe 	movteq	r0, #41726	; 0xa2fe
    16d4:	423c0196 	eorsmi	r0, ip, #-2147483611	; 0x80000025
    16d8:	1c22301d 	stcne	0, cr3, [r2], #-116	; 0xffffff8c
    16dc:	212a2522 			; <UNDEFINED> instruction: 0x212a2522
    16e0:	3c7ee303 	ldclcc	3, cr14, [lr], #-12
    16e4:	3c019603 	stccc	6, cr9, [r1], {3}
    16e8:	3c7ef503 	cfldr64cc	mvdx15, [lr], #-12
    16ec:	907d8903 	rsbsls	r8, sp, r3, lsl #18
    16f0:	2e650331 	mcrcs	3, 3, r0, cr5, cr1, {1}
    16f4:	032e1b03 			; <UNDEFINED> instruction: 0x032e1b03
    16f8:	212e02d2 	ldrdcs	r0, [lr, -r2]!
    16fc:	032b241f 			; <UNDEFINED> instruction: 0x032b241f
    1700:	96033c16 			; <UNDEFINED> instruction: 0x96033c16
    1704:	f5033c01 			; <UNDEFINED> instruction: 0xf5033c01
    1708:	21923c7e 	orrscs	r3, r2, lr, ror ip
    170c:	251e301f 	ldrcs	r3, [lr, #-31]	; 0xffffffe1
    1710:	0302212a 	movweq	r2, #8490	; 0x212a
    1714:	00010100 	andeq	r0, r1, r0, lsl #2
    1718:	0eb80205 	cdpeq	2, 11, cr0, cr8, cr5, {0}
    171c:	f2030800 	vadd.i8	d0, d3, d0
    1720:	1e3e0126 	rsfneep	f0, f6, f6
    1724:	251b4d22 	ldrcs	r4, [fp, #-3362]	; 0xfffff2de
    1728:	031b2529 	tsteq	fp, #171966464	; 0xa400000
    172c:	03580289 	cmpeq	r8, #-1879048184	; 0x90000008
    1730:	033c7e85 	teqeq	ip, #2128	; 0x850
    1734:	5674029e 			; <UNDEFINED> instruction: 0x5674029e
    1738:	3c7df403 	cfldrdcc	mvd15, [sp], #-12
    173c:	9002bc03 	andls	fp, r2, r3, lsl #24
    1740:	3c019603 	stccc	6, cr9, [r1], {3}
    1744:	22301d42 	eorscs	r1, r0, #4224	; 0x1080
    1748:	2a25221c 	bcs	949fc0 <_Min_Stack_Size+0x949bc0>
    174c:	7cac0321 	stcvc	3, cr0, [ip], #132	; 0x84
    1750:	cc03442e 	cfstrsgt	mvf4, [r3], {46}	; 0x2e
    1754:	92032000 	andls	r2, r3, #0
    1758:	03413c01 	movteq	r3, #7169	; 0x1c01
    175c:	034c901c 	movteq	r9, #49180	; 0xc01c
    1760:	6e033c15 	mcrvs	12, 0, r3, cr3, cr5, {0}
    1764:	2b1d26ba 	blcs	74b254 <_Min_Stack_Size+0x74ae54>
    1768:	79032233 	stmdbvc	r3, {r0, r1, r4, r5, r9, sp}
    176c:	25222320 	strcs	r2, [r2, #-800]!	; 0xfffffce0
    1770:	b603212a 	strlt	r2, [r3], -sl, lsr #2
    1774:	033e2e7e 	teqeq	lr, #2016	; 0x7e0
    1778:	212e01a2 	smulwbcs	lr, r2, r1
    177c:	032a251f 			; <UNDEFINED> instruction: 0x032a251f
    1780:	032e7ed2 			; <UNDEFINED> instruction: 0x032e7ed2
    1784:	032001af 			; <UNDEFINED> instruction: 0x032001af
    1788:	593c7ec2 	ldmdbpl	ip!, {r1, r6, r7, r9, sl, fp, ip, sp, lr}
    178c:	2e01b403 	cdpcs	4, 0, cr11, cr1, cr3, {0}
    1790:	2e7ea703 	cdpcs	7, 7, cr10, cr14, cr3, {0}
    1794:	2002aa03 	andcs	sl, r2, r3, lsl #20
    1798:	207dd603 	rsbscs	sp, sp, r3, lsl #12
    179c:	03bd0323 			; <UNDEFINED> instruction: 0x03bd0323
    17a0:	7eea034a 	cdpvc	3, 14, cr0, cr10, cr10, {2}
    17a4:	01960320 	orrseq	r0, r6, r0, lsr #6
    17a8:	301d423c 	andscc	r4, sp, ip, lsr r2
    17ac:	25221c22 	strcs	r1, [r2, #-3106]!	; 0xfffff3de
    17b0:	e303212a 	movw	r2, #12586	; 0x312a
    17b4:	96033c7e 			; <UNDEFINED> instruction: 0x96033c7e
    17b8:	f5033c01 			; <UNDEFINED> instruction: 0xf5033c01
    17bc:	d4033c7e 	strle	r3, [r3], #-3198	; 0xfffff382
    17c0:	a1039e7d 	tstge	r3, sp, ror lr
    17c4:	96034a02 	strls	r4, [r3], -r2, lsl #20
    17c8:	ea033c01 	b	d07d4 <_Min_Stack_Size+0xd03d4>
    17cc:	96034a7e 			; <UNDEFINED> instruction: 0x96034a7e
    17d0:	f5033c01 			; <UNDEFINED> instruction: 0xf5033c01
    17d4:	e6033c7e 			; <UNDEFINED> instruction: 0xe6033c7e
    17d8:	8f039e7d 	svchi	0x00039e7d
    17dc:	84033c02 	strhi	r3, [r3], #-3074	; 0xfffff3fe
    17e0:	ab03207e 	blge	c99e0 <_Min_Stack_Size+0xc95e0>
    17e4:	de036601 	cfmadd32le	mvax0, mvfx6, mvfx3, mvfx1
    17e8:	033f3c7e 	teqeq	pc, #32256	; 0x7e00
    17ec:	4182019f 			; <UNDEFINED> instruction: 0x4182019f
    17f0:	219e3503 	orrscs	r3, lr, r3, lsl #10
    17f4:	032b241f 			; <UNDEFINED> instruction: 0x032b241f
    17f8:	96033c16 			; <UNDEFINED> instruction: 0x96033c16
    17fc:	f5033c01 			; <UNDEFINED> instruction: 0xf5033c01
    1800:	45033c7e 	strmi	r3, [r3, #-3198]	; 0xfffff382
    1804:	2e3d0390 	mrccs	3, 1, r0, cr13, cr0, {4}
    1808:	1e301f21 	cdpne	15, 3, cr1, cr0, cr1, {1}
    180c:	02212a25 	eoreq	r2, r1, #151552	; 0x25000
    1810:	01010003 	tsteq	r1, r3
    1814:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    1818:	03080010 	movweq	r0, #32784	; 0x8010
    181c:	020103da 	andeq	r0, r1, #1744830467	; 0x68000003
    1820:	01010001 	tsteq	r1, r1
    1824:	fc020500 	stc2	5, cr0, [r2], {-0}
    1828:	03080010 	movweq	r0, #32784	; 0x8010
    182c:	170102e4 	strne	r0, [r1, -r4, ror #5]
    1830:	20150329 	andscs	r0, r5, r9, lsr #6
    1834:	03740b03 	cmneq	r4, #3072	; 0xc00
    1838:	6f03200e 	svcvs	0x0003200e
    183c:	314d3f20 	cmpcc	sp, r0, lsr #30
    1840:	441c1c28 	ldrmi	r1, [ip], #-3112	; 0xfffff3d8
    1844:	0200241c 	andeq	r2, r0, #28, 8	; 0x1c000000
    1848:	00240104 	eoreq	r0, r4, r4, lsl #2
    184c:	54010402 	strpl	r0, [r1], #-1026	; 0xfffffbfe
    1850:	01040200 	mrseq	r0, R12_usr
    1854:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    1858:	02001c01 	andeq	r1, r0, #256	; 0x100
    185c:	00240104 	eoreq	r0, r4, r4, lsl #2
    1860:	03140402 	tsteq	r4, #33554432	; 0x2000000
    1864:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    1868:	78031404 	stmdavc	r3, {r2, sl, ip}
    186c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1870:	02004014 	andeq	r4, r0, #20
    1874:	78031404 	stmdavc	r3, {r2, sl, ip}
    1878:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    187c:	02002814 	andeq	r2, r0, #20, 16	; 0x140000
    1880:	001c1404 	andseq	r1, ip, r4, lsl #8
    1884:	36140402 	ldrcc	r0, [r4], -r2, lsl #8
    1888:	14040200 	strne	r0, [r4], #-512	; 0xfffffe00
    188c:	00207803 	eoreq	r7, r0, r3, lsl #16
    1890:	24140402 	ldrcs	r0, [r4], #-1026	; 0xfffffbfe
    1894:	14040200 	strne	r0, [r4], #-512	; 0xfffffe00
    1898:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    189c:	02002314 	andeq	r2, r0, #20, 6	; 0x50000000
    18a0:	00221404 	eoreq	r1, r2, r4, lsl #8
    18a4:	1e140402 	cfmulsne	mvf0, mvf4, mvf2
    18a8:	14040200 	strne	r0, [r4], #-512	; 0xfffffe00
    18ac:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    18b0:	02001d14 	andeq	r1, r0, #20, 26	; 0x500
    18b4:	00271404 	eoreq	r1, r7, r4, lsl #8
    18b8:	1b140402 	blne	5028c8 <_Min_Stack_Size+0x5024c8>
    18bc:	14040200 	strne	r0, [r4], #-512	; 0xfffffe00
    18c0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    18c4:	02002f14 	andeq	r2, r0, #20, 30	; 0x50
    18c8:	00211404 	eoreq	r1, r1, r4, lsl #8
    18cc:	30140402 	andscc	r0, r4, r2, lsl #8
    18d0:	02040200 	andeq	r0, r4, #0, 4
    18d4:	00206603 	eoreq	r6, r0, r3, lsl #12
    18d8:	40020402 	andmi	r0, r2, r2, lsl #8
    18dc:	02040200 	andeq	r0, r4, #0, 4
    18e0:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    18e4:	02007802 	andeq	r7, r0, #131072	; 0x20000
    18e8:	20060804 	andcs	r0, r6, r4, lsl #16
    18ec:	66030674 			; <UNDEFINED> instruction: 0x66030674
    18f0:	0200302e 	andeq	r3, r0, #46	; 0x2e
    18f4:	18030904 	stmdane	r3, {r2, r8, fp}
    18f8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    18fc:	009e0610 	addseq	r0, lr, r0, lsl r6
    1900:	3c0f0402 	cfstrscc	mvf0, [pc], {2}
    1904:	3c550306 	mrrccc	3, 0, r0, r5, cr6
    1908:	01000902 	tsteq	r0, r2, lsl #18
    190c:	02050001 	andeq	r0, r5, #1
    1910:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
    1914:	0103e903 	tsteq	r3, r3, lsl #18
    1918:	01000102 	tsteq	r0, r2, lsl #2
    191c:	02050001 	andeq	r0, r5, #1
    1920:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
    1924:	0103b603 	tsteq	r3, r3, lsl #12
    1928:	200b0314 	andcs	r0, fp, r4, lsl r3
    192c:	2076031d 	rsbscs	r0, r6, sp, lsl r3
    1930:	31200a03 			; <UNDEFINED> instruction: 0x31200a03
    1934:	2934305b 	ldmdbcs	r4!, {r0, r1, r3, r4, r6, ip, sp}
    1938:	207a0335 	rsbscs	r0, sl, r5, lsr r3
    193c:	6a033321 	bvs	ce5c8 <_Min_Stack_Size+0xce1c8>
    1940:	00020220 	andeq	r0, r2, r0, lsr #4
    1944:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1948:	00122402 	andseq	r2, r2, r2, lsl #8
    194c:	04c10308 	strbeq	r0, [r1], #776	; 0x308
    1950:	30404a01 	subcc	r4, r0, r1, lsl #20
    1954:	ee03223a 	mcr	2, 0, r2, cr3, cr10, {1}
    1958:	03222000 			; <UNDEFINED> instruction: 0x03222000
    195c:	6f3c23c9 	svcvs	0x003c23c9
    1960:	665bd503 	ldrbvs	sp, [fp], -r3, lsl #10
    1964:	3c24ab03 	stccc	11, cr10, [r4], #-12
    1968:	205bd503 	subscs	sp, fp, r3, lsl #10
    196c:	02040200 	andeq	r0, r4, #0, 4
    1970:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    1974:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    1978:	00230204 	eoreq	r0, r3, r4, lsl #4
    197c:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    1980:	02040200 	andeq	r0, r4, #0, 4
    1984:	03402331 	movteq	r2, #817	; 0x331
    1988:	77032009 	strvc	r2, [r3, -r9]
    198c:	2f2f3020 	svccs	0x002f3020
    1990:	2f2f221c 	svccs	0x002f221c
    1994:	03212124 			; <UNDEFINED> instruction: 0x03212124
    1998:	03201ffe 			; <UNDEFINED> instruction: 0x03201ffe
    199c:	03205fff 			; <UNDEFINED> instruction: 0x03205fff
    19a0:	03202084 			; <UNDEFINED> instruction: 0x03202084
    19a4:	03205fff 			; <UNDEFINED> instruction: 0x03205fff
    19a8:	95202081 	strls	r2, [r0, #-129]!	; 0xffffff7f
    19ac:	82049103 	andhi	r9, r4, #-1073741824	; 0xc0000000
    19b0:	3c7bfb03 	ldclcc	11, cr15, [fp], #-12
    19b4:	04a5035b 	strteq	r0, [r5], #859	; 0x35b
    19b8:	dc036474 	cfstrsle	mvf6, [r3], {116}	; 0x74
    19bc:	03763c5b 	cmneq	r6, #23296	; 0x5b00
    19c0:	037424d2 	cmneq	r4, #-771751936	; 0xd2000000
    19c4:	423c0196 	eorsmi	r0, ip, #-2147483611	; 0x80000025
    19c8:	1c22301d 	stcne	0, cr3, [r2], #-116	; 0xffffff8c
    19cc:	212a2522 			; <UNDEFINED> instruction: 0x212a2522
    19d0:	2e5a9603 	cdpcs	6, 5, cr9, cr10, cr3, {0}
    19d4:	1e223352 	mcrne	3, 1, r3, cr2, cr2, {2}
    19d8:	301e4d4b 	andscc	r4, lr, fp, asr #26
    19dc:	2024bc03 	eorcs	fp, r4, r3, lsl #24
    19e0:	205bc403 	subscs	ip, fp, r3, lsl #8
    19e4:	01040200 	mrseq	r0, R12_usr
    19e8:	23062006 	movwcs	r2, #24582	; 0x6006
    19ec:	211f2f4b 	tstcs	pc, fp, asr #30
    19f0:	25ce031f 	strbcs	r0, [lr, #799]	; 0x31f
    19f4:	7f8f034a 	svcvc	0x008f034a
    19f8:	00f10320 	rscseq	r0, r1, r0, lsr #6
    19fc:	301d423c 	andscc	r4, sp, ip, lsr r2
    1a00:	25221c22 	strcs	r1, [r2, #-3106]!	; 0xfffff3de
    1a04:	9a03212a 	bls	c9eb4 <_Min_Stack_Size+0xc9ab4>
    1a08:	251f3c7e 	ldrcs	r3, [pc, #-3198]	; d92 <_Min_Stack_Size+0x992>
    1a0c:	5bc9032a 	blpl	ff2426bc <_estack+0xdf2126bc>
    1a10:	24b8032e 	ldrtcs	r0, [r8], #814	; 0x32e
    1a14:	00c80320 	sbceq	r0, r8, r0, lsr #6
    1a18:	0196033c 	orrseq	r0, r6, ip, lsr r3
    1a1c:	7ef5033c 	mrcvc	3, 7, r0, cr5, cr12, {1}
    1a20:	ba1a033c 	blt	682718 <_Min_Stack_Size+0x682318>
    1a24:	3c00f103 	stfccd	f7, [r0], {3}
    1a28:	3c7f9a03 	ldclcc	10, cr9, [pc], #-12	; 1a24 <_Min_Stack_Size+0x1624>
    1a2c:	ba7eff03 	blt	1fc1640 <_Min_Stack_Size+0x1fc1240>
    1a30:	7bed034f 	blvc	ffb42774 <_estack+0xdfb12774>
    1a34:	04b403ba 	ldrteq	r0, [r4], #954	; 0x3ba
    1a38:	2b1d2658 	blcs	74b3a0 <_Min_Stack_Size+0x74afa0>
    1a3c:	79032233 	stmdbvc	r3, {r0, r1, r4, r5, r9, sp}
    1a40:	25222320 	strcs	r2, [r2, #-800]!	; 0xfffffce0
    1a44:	ec03212a 	stfs	f2, [r3], {42}	; 0x2a
    1a48:	d5032e7b 	strle	r2, [r3, #-3707]	; 0xfffff185
    1a4c:	4731205f 			; <UNDEFINED> instruction: 0x4731205f
    1a50:	032e3603 			; <UNDEFINED> instruction: 0x032e3603
    1a54:	1e222e0a 	cdpne	14, 2, cr2, cr2, cr10, {0}
    1a58:	207a0344 	rsbscs	r0, sl, r4, asr #6
    1a5c:	03332b32 	teqeq	r3, #51200	; 0xc800
    1a60:	03201fcd 			; <UNDEFINED> instruction: 0x03201fcd
    1a64:	3a9e04a0 	bcc	fe782cec <_estack+0xde752cec>
    1a68:	3c7bf203 	lfmcc	f7, 3, [fp], #-12
    1a6c:	4a04f003 	bmi	13da80 <_Min_Stack_Size+0x13d680>
    1a70:	1e301f21 	cdpne	15, 3, cr1, cr0, cr1, {1}
    1a74:	03212a25 			; <UNDEFINED> instruction: 0x03212a25
    1a78:	3e3c7f9c 	mrccc	15, 1, r7, cr12, cr12, {4}
    1a7c:	033c1503 	teqeq	ip, #12582912	; 0xc00000
    1a80:	ab03ac3e 	blge	ecb80 <_Min_Stack_Size+0xec780>
    1a84:	033e2e7f 	teqeq	lr, #2032	; 0x7f0
    1a88:	4f033c15 	svcmi	0x00033c15
    1a8c:	251f21d6 	ldrcs	r2, [pc, #-470]	; 18be <_Min_Stack_Size+0x14be>
    1a90:	9a032f2a 	bls	cd740 <_Min_Stack_Size+0xcd340>
    1a94:	97033c5c 	smlsdls	r3, ip, ip, r3
    1a98:	1f216624 	svcne	0x00216624
    1a9c:	66032b24 	strvs	r2, [r3], -r4, lsr #22
    1aa0:	0002023c 	andeq	r0, r2, ip, lsr r2
    1aa4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1aa8:	00154402 	andseq	r4, r5, r2, lsl #8
    1aac:	05c50308 	strbeq	r0, [r5, #776]	; 0x308
    1ab0:	304e4a01 	subcc	r4, lr, r1, lsl #20
    1ab4:	d303223a 	movwle	r2, #12858	; 0x323a
    1ab8:	03222001 			; <UNDEFINED> instruction: 0x03222001
    1abc:	613c21e0 	teqvs	ip, r0, ror #3
    1ac0:	745cd903 	ldrbvc	sp, [ip], #-2307	; 0xfffff6fd
    1ac4:	3c23a703 	stccc	7, cr10, [r3], #-12
    1ac8:	205cd903 	subscs	sp, ip, r3, lsl #18
    1acc:	02040200 	andeq	r0, r4, #0, 4
    1ad0:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    1ad4:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    1ad8:	00230204 	eoreq	r0, r3, r4, lsl #4
    1adc:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    1ae0:	02040200 	andeq	r0, r4, #0, 4
    1ae4:	03402331 	movteq	r2, #817	; 0x331
    1ae8:	77032009 	strvc	r2, [r3, -r9]
    1aec:	2f1e3220 	svccs	0x001e3220
    1af0:	2f2f222b 	svccs	0x002f222b
    1af4:	032f2f32 			; <UNDEFINED> instruction: 0x032f2f32
    1af8:	312e1fc6 	smlawtcc	lr, r6, pc, r1	; <UNPREDICTABLE>
    1afc:	2060b403 	rsbcs	fp, r0, r3, lsl #8
    1b00:	2e1fcc03 	cdpcs	12, 1, cr12, cr15, cr3, {0}
    1b04:	60b40331 	adcsvs	r0, r4, r1, lsr r3
    1b08:	1fc90320 	svcne	0x00c90320
    1b0c:	0395232e 	orrseq	r2, r5, #-1207959552	; 0xb8000000
    1b10:	0382608c 	orreq	r6, r2, #140	; 0x8c
    1b14:	032023b6 			; <UNDEFINED> instruction: 0x032023b6
    1b18:	693c7cca 	ldmdbvs	ip!, {r1, r3, r6, r7, sl, fp, ip, sp, lr}
    1b1c:	7403d603 	strvc	sp, [r3], #-1539	; 0xfffff9fd
    1b20:	5cdf0348 	ldclpl	3, cr0, [pc], {72}	; 0x48
    1b24:	03695b3c 	cmneq	r9, #60, 22	; 0xf000
    1b28:	3f3e4a21 	svccc	0x003e4a21
    1b2c:	033c1503 	teqeq	ip, #12582912	; 0xc00000
    1b30:	036622bf 	cmneq	r6, #-268435445	; 0xf000000b
    1b34:	233c5de0 	teqcs	ip, #224, 26	; 0x3800
    1b38:	2d5a3f2b 	ldclcs	15, cr3, [sl, #-172]	; 0xffffff54
    1b3c:	2d212d2f 	stccs	13, cr2, [r1, #-188]!	; 0xffffff44
    1b40:	66229c03 	strtvs	r9, [r2], -r3, lsl #24
    1b44:	3c5dee03 	mrrccc	14, 0, lr, sp, cr3
    1b48:	5a3f2b23 	bpl	fcc7dc <_Min_Stack_Size+0xfcc3dc>
    1b4c:	4d47322d 	sfmmi	f3, 2, [r7, #-180]	; 0xffffff4c
    1b50:	321c241c 	andscc	r2, ip, #28, 8	; 0x1c000000
    1b54:	2f3c1d03 	svccs	0x003c1d03
    1b58:	211f212d 	tstcs	pc, sp, lsr #2
    1b5c:	ec032f1f 	stc	15, cr2, [r3], {31}
    1b60:	99413c21 	stmdbls	r1, {r0, r5, sl, fp, ip, sp}^
    1b64:	1f216879 	svcne	0x00216879
    1b68:	e2032a33 	and	r2, r3, #208896	; 0x33000
    1b6c:	9f032e5d 	svcls	0x00032e5d
    1b70:	77032022 	strvc	r2, [r3, -r2, lsr #32]
    1b74:	bc03413c 	stflts	f4, [r3], {60}	; 0x3c
    1b78:	10039e01 	andne	r9, r3, r1, lsl #28
    1b7c:	586d033c 	stmdapl	sp!, {r2, r3, r4, r5, r8, r9}^
    1b80:	585ccd03 	ldmdapl	ip, {r0, r1, r8, sl, fp, lr, pc}^
    1b84:	2f2b3076 	svccs	0x002b3076
    1b88:	1d311d4c 	ldcne	13, cr1, [r1, #-304]!	; 0xfffffed0
    1b8c:	f6033131 			; <UNDEFINED> instruction: 0xf6033131
    1b90:	331f8221 	tstcc	pc, #268435458	; 0x10000002
    1b94:	5ccd032a 	stclpl	3, cr0, [sp], {42}	; 0x2a
    1b98:	23b4032e 			; <UNDEFINED> instruction: 0x23b4032e
    1b9c:	01b50320 			; <UNDEFINED> instruction: 0x01b50320
    1ba0:	12035b3c 	andne	r5, r3, #60, 22	; 0xf000
    1ba4:	241f2f3c 	ldrcs	r2, [pc], #-3900	; 1bac <_Min_Stack_Size+0x17ac>
    1ba8:	032b321c 			; <UNDEFINED> instruction: 0x032b321c
    1bac:	502e5bdd 	ldrdpl	r5, [lr], -sp	; <UNPREDICTABLE>
    1bb0:	2493032a 	ldrcs	r0, [r3], #810	; 0x32a
    1bb4:	1c321e2e 	ldcne	14, cr1, [r2], #-184	; 0xffffff48
    1bb8:	2f2a3322 	svccs	0x002a3322
    1bbc:	03587903 	cmpeq	r8, #49152	; 0xc000
    1bc0:	6d033c10 	stcvs	12, cr3, [r3, #-64]	; 0xffffffc0
    1bc4:	5bfe0358 	blpl	fff8292c <_estack+0xdff5292c>
    1bc8:	22c40358 	sbccs	r0, r4, #88, 6	; 0x60000001
    1bcc:	bc034f82 	stclt	15, cr4, [r3], {130}	; 0x82
    1bd0:	fd03ba7c 	stc2	10, cr11, [r3, #-496]	; 0xfffffe10
    1bd4:	ca038204 	bgt	e23ec <_Min_Stack_Size+0xe1fec>
    1bd8:	1d23665b 	stcne	6, cr6, [r3, #-364]!	; 0xfffffe94
    1bdc:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    1be0:	1d313c0e 	ldcne	12, cr3, [r1, #-56]!	; 0xffffffc8
    1be4:	00f50323 	rscseq	r0, r5, r3, lsr #6
    1be8:	1b304074 	blne	c11dc0 <_Min_Stack_Size+0xc119c0>
    1bec:	1eb30333 	mrcne	3, 5, r0, cr3, cr3, {1}
    1bf0:	03d10320 	bicseq	r0, r1, #32, 6	; 0x80000000
    1bf4:	c1033a90 			; <UNDEFINED> instruction: 0xc1033a90
    1bf8:	033f3c7c 	teqeq	pc, #124, 24	; 0x7c00
    1bfc:	ee03741f 	cfmvdlr	mvd3, r7
    1c00:	09032e5f 	stmdbeq	r3, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp}
    1c04:	aa033d4a 	bge	d1134 <_Min_Stack_Size+0xd0d34>
    1c08:	1d262e23 	stcne	14, cr2, [r6, #-140]!	; 0xffffff74
    1c0c:	0322332b 			; <UNDEFINED> instruction: 0x0322332b
    1c10:	22232079 	eorcs	r2, r3, #121	; 0x79
    1c14:	032f2a33 			; <UNDEFINED> instruction: 0x032f2a33
    1c18:	033e3c74 	teqeq	lr, #116, 24	; 0x7400
    1c1c:	69033c15 	stmdbvs	r3, {r0, r2, r4, sl, fp, ip, sp}
    1c20:	15034c9e 	strne	r4, [r3, #-3230]	; 0xfffff362
    1c24:	5cbd033c 	ldcpl	3, cr0, [sp], #240	; 0xf0
    1c28:	15033d9e 	strne	r3, [r3, #-3486]	; 0xfffff262
    1c2c:	231d312e 	tstcs	sp, #-2147483637	; 0x8000000b
    1c30:	22f60369 	rscscs	r0, r6, #-1543503871	; 0xa4000001
    1c34:	331f2158 	tstcc	pc, #88, 2
    1c38:	8d032f2a 	stchi	15, cr2, [r3, #-168]	; 0xffffff58
    1c3c:	233f3c5d 	teqcs	pc, #23808	; 0x5d00
    1c40:	e4033f1d 	str	r3, [r3], #-3869	; 0xfffff0e3
    1c44:	f2037422 	vshl.s8	d7, d18, d3
    1c48:	03852e7c 	orreq	r2, r5, #124, 28	; 0x7c0
    1c4c:	0366038b 	cmneq	r6, #738197506	; 0x2c000002
    1c50:	033c7cfe 	teqeq	ip, #65024	; 0xfe00
    1c54:	032e0382 			; <UNDEFINED> instruction: 0x032e0382
    1c58:	03207cfe 			; <UNDEFINED> instruction: 0x03207cfe
    1c5c:	412e0382 	smlawbmi	lr, r2, r3, r0
    1c60:	219e3503 	orrscs	r3, lr, r3, lsl #10
    1c64:	022b321f 	eoreq	r3, fp, #-268435455	; 0xf0000001
    1c68:	01010003 	tsteq	r1, r3
    1c6c:	38020500 	stmdacc	r2, {r8, sl}
    1c70:	0308001a 	movweq	r0, #32794	; 0x801a
    1c74:	4a0107ac 	bmi	43b2c <_Min_Stack_Size+0x4372c>
    1c78:	ed033040 	stc	0, cr3, [r3, #-256]	; 0xffffff00
    1c7c:	03224a00 			; <UNDEFINED> instruction: 0x03224a00
    1c80:	003c7f93 	mlaseq	ip, r3, pc, r7	; <UNPREDICTABLE>
    1c84:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c88:	0034062e 	eorseq	r0, r4, lr, lsr #12
    1c8c:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
    1c90:	02040200 	andeq	r0, r4, #0, 4
    1c94:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    1c98:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    1c9c:	001d0204 	andseq	r0, sp, r4, lsl #4
    1ca0:	31020402 	tstcc	r2, r2, lsl #8
    1ca4:	09034023 	stmdbeq	r3, {r0, r1, r5, lr}
    1ca8:	20770320 	rsbscs	r0, r7, r0, lsr #6
    1cac:	1c2f2f30 	stcne	15, cr2, [pc], #-192	; 1bf4 <_Min_Stack_Size+0x17f4>
    1cb0:	242f2f22 	strtcs	r2, [pc], #-3874	; 1cb8 <_Min_Stack_Size+0x18b8>
    1cb4:	03232121 			; <UNDEFINED> instruction: 0x03232121
    1cb8:	2b26207a 	blcs	989ea8 <_Min_Stack_Size+0x989aa8>
    1cbc:	4a5b0323 	bmi	16c2950 <_Min_Stack_Size+0x16c2550>
    1cc0:	2021cf03 	eorcs	ip, r1, r3, lsl #30
    1cc4:	3c5edf03 	mrrccc	15, 0, sp, lr, cr3
    1cc8:	2b311d4d 	blcs	c49204 <_Min_Stack_Size+0xc48e04>
    1ccc:	2e0c0323 	cdpcs	3, 0, cr0, cr12, cr3, {1}
    1cd0:	3c21e303 	stccc	3, cr14, [r1], #-12
    1cd4:	3c019603 	stccc	6, cr9, [r1], {3}
    1cd8:	22301d42 	eorscs	r1, r0, #4224	; 0x1080
    1cdc:	2a25221c 	bcs	94a554 <_Min_Stack_Size+0x94a154>
    1ce0:	5d860321 	stcpl	3, cr0, [r6, #132]	; 0x84
    1ce4:	03424c2e 	movteq	r4, #11310	; 0x2c2e
    1ce8:	032e7fbf 			; <UNDEFINED> instruction: 0x032e7fbf
    1cec:	412e21c5 	smlawtmi	lr, r5, r1, r2
    1cf0:	5f9503a7 	svcpl	0x009503a7
    1cf4:	1e223f3c 	mcrne	15, 1, r3, cr2, cr12, {1}
    1cf8:	03281d23 			; <UNDEFINED> instruction: 0x03281d23
    1cfc:	2b32207a 	blcs	c89eec <_Min_Stack_Size+0xc89aec>
    1d00:	20e00333 	rsccs	r0, r0, r3, lsr r3
    1d04:	dd034120 	stfles	f4, [r3, #-128]	; 0xffffff80
    1d08:	9e03ac5e 	mcrls	12, 0, sl, cr3, cr14, {2}
    1d0c:	eb032021 	bl	c9d98 <_Min_Stack_Size+0xc9998>
    1d10:	16033c5e 			; <UNDEFINED> instruction: 0x16033c5e
    1d14:	4b1e2282 	blmi	78a724 <_Min_Stack_Size+0x78a324>
    1d18:	1e301e4d 	cdpne	14, 3, cr1, cr0, cr13, {2}
    1d1c:	214b2322 	cmpcs	fp, r2, lsr #6
    1d20:	211f211f 	tstcs	pc, pc, lsl r1	; <UNPREDICTABLE>
    1d24:	21c8031f 	biccs	r0, r8, pc, lsl r3
    1d28:	0196032e 	orrseq	r0, r6, lr, lsr #6
    1d2c:	7ef5033c 	mrcvc	3, 7, r0, cr5, cr12, {1}
    1d30:	1f21923c 	svcne	0x0021923c
    1d34:	2a251e30 	bcs	9495fc <_Min_Stack_Size+0x9491fc>
    1d38:	7fa00321 	svcvc	0x00a00321
    1d3c:	2192413c 	orrscs	r4, r2, ip, lsr r1
    1d40:	032a251f 			; <UNDEFINED> instruction: 0x032a251f
    1d44:	032e5f89 			; <UNDEFINED> instruction: 0x032e5f89
    1d48:	032020f8 			; <UNDEFINED> instruction: 0x032020f8
    1d4c:	06023c77 			; <UNDEFINED> instruction: 0x06023c77
    1d50:	00010100 	andeq	r0, r1, r0, lsl #2
    1d54:	1c340205 	lfmne	f0, 4, [r4], #-20	; 0xffffffec
    1d58:	ad030800 	stcge	8, cr0, [r3, #-0]
    1d5c:	404a0108 	submi	r0, sl, r8, lsl #2
    1d60:	00ea0330 	rsceq	r0, sl, r0, lsr r3
    1d64:	9603224a 	strls	r2, [r3], -sl, asr #4
    1d68:	02003c7f 	andeq	r3, r0, #32512	; 0x7f00
    1d6c:	2e060104 	adfcss	f0, f6, f4
    1d70:	02004206 	andeq	r4, r0, #1610612736	; 0x60000000
    1d74:	004d0204 	subeq	r0, sp, r4, lsl #4
    1d78:	47020402 	strmi	r0, [r2, -r2, lsl #8]
    1d7c:	02040200 	andeq	r0, r4, #0, 4
    1d80:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1d84:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    1d88:	23310204 	teqcs	r1, #4, 4	; 0x40000000
    1d8c:	20090340 	andcs	r0, r9, r0, asr #6
    1d90:	30207703 	eorcc	r7, r0, r3, lsl #14
    1d94:	222a2f2f 	eorcs	r2, sl, #47, 30	; 0xbc
    1d98:	2f322f2f 	svccs	0x00322f2f
    1d9c:	7a032321 	bvc	caa28 <_Min_Stack_Size+0xca628>
    1da0:	232b2620 			; <UNDEFINED> instruction: 0x232b2620
    1da4:	3c20a903 	stccc	9, cr10, [r0], #-12
    1da8:	3c5fe003 	mrrccc	0, 0, lr, pc, cr3	; <UNPREDICTABLE>
    1dac:	21df0384 	bicscs	r0, pc, r4, lsl #7
    1db0:	3c10034a 	ldccc	3, cr0, [r0], {74}	; 0x4a
    1db4:	03666d03 	cmneq	r6, #3, 26	; 0xc0
    1db8:	5a3c5eb7 	bpl	f1989c <_Min_Stack_Size+0xf1949c>
    1dbc:	3e211d22 	cdpcc	13, 2, cr1, cr1, cr2, {1}
    1dc0:	231d311d 	tstcs	sp, #1073741831	; 0x40000007
    1dc4:	2d215931 	stccs	9, cr5, [r1, #-196]!	; 0xffffff3c
    1dc8:	1f212d21 	svcne	0x00212d21
    1dcc:	3c7fbf03 	ldclcc	15, cr11, [pc], #-12	; 1dc8 <_Min_Stack_Size+0x19c8>
    1dd0:	2e228203 	cdpcs	2, 2, cr8, cr2, cr3, {0}
    1dd4:	3c12033f 	ldccc	3, cr0, [r2], {63}	; 0x3f
    1dd8:	1c241f21 	stcne	15, cr1, [r4], #-132	; 0xffffff7c
    1ddc:	94032b24 	strls	r2, [r3], #-2852	; 0xfffff4dc
    1de0:	264c2e5e 			; <UNDEFINED> instruction: 0x264c2e5e
    1de4:	034a3403 	movteq	r3, #41987	; 0xa403
    1de8:	413c1fdc 	teqmi	ip, ip	; <illegal shifter operand>
    1dec:	9e01c103 	mvflss	f4, f3
    1df0:	221c321e 	andscs	r3, ip, #-536870911	; 0xe0000001
    1df4:	2b241c25 	blcs	908e90 <_Min_Stack_Size+0x908a90>
    1df8:	03745303 	cmneq	r4, #201326592	; 0xc000000
    1dfc:	423c00cc 	eorsmi	r0, ip, #204	; 0xcc
    1e00:	1c22301d 	stcne	0, cr3, [r2], #-116	; 0xffffff8c
    1e04:	212a2522 			; <UNDEFINED> instruction: 0x212a2522
    1e08:	2e5e9803 	cdpcs	8, 5, cr9, cr14, cr3, {0}
    1e0c:	9603424c 	strls	r4, [r3], -ip, asr #4
    1e10:	ef032e21 	svc	0x00032e21
    1e14:	2293745e 	addscs	r7, r3, #1577058304	; 0x5e000000
    1e18:	7a03441e 	bvc	d2e98 <_Min_Stack_Size+0xd2a98>
    1e1c:	332b3220 			; <UNDEFINED> instruction: 0x332b3220
    1e20:	201fe903 	andscs	lr, pc, r3, lsl #18
    1e24:	2a251f21 	bcs	949ab0 <_Min_Stack_Size+0x9496b0>
    1e28:	2e5fd403 	cdpcs	4, 5, cr13, cr15, cr3, {0}
    1e2c:	2020ad03 	eorcs	sl, r0, r3, lsl #26
    1e30:	3c019203 	sfmcc	f1, 1, [r1], {3}
    1e34:	3c00cc03 	stccc	12, cr12, [r0], {3}
    1e38:	3c7fbf03 	ldclcc	15, cr11, [pc], #-12	; 1e34 <_Min_Stack_Size+0x1a34>
    1e3c:	1e301f21 	cdpne	15, 3, cr1, cr0, cr1, {1}
    1e40:	022b242f 	eoreq	r2, fp, #788529152	; 0x2f000000
    1e44:	01010007 	tsteq	r1, r7
    1e48:	60020500 	andvs	r0, r2, r0, lsl #10
    1e4c:	0308001e 	movweq	r0, #32798	; 0x801e
    1e50:	2f0109ac 	svccs	0x000109ac
    1e54:	4a3b0330 	bmi	ec2b1c <_Min_Stack_Size+0xec271c>
    1e58:	2e460322 	cdpcs	3, 4, cr0, cr6, cr2, {1}
    1e5c:	03c80e03 	biceq	r0, r8, #3, 28	; 0x30
    1e60:	1f5b4a75 	svcne	0x005b4a75
    1e64:	34332b24 	ldrtcc	r2, [r3], #-2852	; 0xfffff4dc
    1e68:	02040200 	andeq	r0, r4, #0, 4
    1e6c:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    1e70:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    1e74:	00230204 	eoreq	r0, r3, r4, lsl #4
    1e78:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    1e7c:	02040200 	andeq	r0, r4, #0, 4
    1e80:	03402331 	movteq	r2, #817	; 0x331
    1e84:	1c1b2009 	ldcne	0, cr2, [fp], {9}
    1e88:	222b2f30 	eorcs	r2, fp, #48, 30	; 0xc0
    1e8c:	21242f2f 			; <UNDEFINED> instruction: 0x21242f2f
    1e90:	03232121 			; <UNDEFINED> instruction: 0x03232121
    1e94:	2a272079 	bcs	9ca080 <_Min_Stack_Size+0x9c9c80>
    1e98:	20090324 	andcs	r0, r9, r4, lsr #6
    1e9c:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    1ea0:	02221e30 	eoreq	r1, r2, #48, 28	; 0x300
    1ea4:	01010008 	tsteq	r1, r8
    1ea8:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    1eac:	0308001f 	movweq	r0, #32799	; 0x801f
    1eb0:	2f0109f9 	svccs	0x000109f9
    1eb4:	4a3f0330 	bmi	fc2b7c <_Min_Stack_Size+0xfc277c>
    1eb8:	2e420322 	cdpcs	3, 4, cr0, cr2, cr2, {1}
    1ebc:	03c80e03 	biceq	r0, r8, #3, 28	; 0x30
    1ec0:	1f5b4a75 	svcne	0x005b4a75
    1ec4:	34332b24 	ldrtcc	r2, [r3], #-2852	; 0xfffff4dc
    1ec8:	02040200 	andeq	r0, r4, #0, 4
    1ecc:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    1ed0:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    1ed4:	00230204 	eoreq	r0, r3, r4, lsl #4
    1ed8:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    1edc:	02040200 	andeq	r0, r4, #0, 4
    1ee0:	03402331 	movteq	r2, #817	; 0x331
    1ee4:	1c1b2009 	ldcne	0, cr2, [fp], {9}
    1ee8:	222b2f30 	eorcs	r2, fp, #48, 30	; 0xc0
    1eec:	21242f2f 			; <UNDEFINED> instruction: 0x21242f2f
    1ef0:	03232121 			; <UNDEFINED> instruction: 0x03232121
    1ef4:	2a272079 	bcs	9ca0e0 <_Min_Stack_Size+0x9c9ce0>
    1ef8:	0a032324 	beq	cab90 <_Min_Stack_Size+0xca790>
    1efc:	2079034a 	rsbscs	r0, r9, sl, asr #6
    1f00:	221e3035 	andscs	r3, lr, #53	; 0x35
    1f04:	01000802 	tsteq	r0, r2, lsl #16
    1f08:	02050001 	andeq	r0, r5, #1
    1f0c:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
    1f10:	010acc03 	tsteq	sl, r3, lsl #24
    1f14:	03252f2f 			; <UNDEFINED> instruction: 0x03252f2f
    1f18:	224a00cf 	subcs	r0, sl, #207	; 0xcf
    1f1c:	2e7fb203 	cdpcs	2, 7, cr11, cr15, cr3, {0}
    1f20:	01040200 	mrseq	r0, R12_usr
    1f24:	03063c06 	movweq	r3, #27654	; 0x6c06
    1f28:	02002e15 	andeq	r2, r0, #336	; 0x150
    1f2c:	004d0204 	subeq	r0, sp, r4, lsl #4
    1f30:	2b020402 	blcs	82f40 <_Min_Stack_Size+0x82b40>
    1f34:	02040200 	andeq	r0, r4, #0, 4
    1f38:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    1f3c:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    1f40:	23310204 	teqcs	r1, #4, 4	; 0x40000000
    1f44:	312c2240 			; <UNDEFINED> instruction: 0x312c2240
    1f48:	2f221c21 	svccs	0x00221c21
    1f4c:	2f21242f 	svccs	0x0021242f
    1f50:	03312221 	teqeq	r1, #268435458	; 0x10000002
    1f54:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    1f58:	207a0320 	rsbscs	r0, sl, r0, lsr #6
    1f5c:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    1f60:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1f64:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1f68:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1f6c:	3c0f0333 	stccc	3, cr0, [pc], {51}	; 0x33
    1f70:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    1f74:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    1f78:	221e2e09 	andscs	r2, lr, #9, 28	; 0x90
    1f7c:	207fbb03 	rsbscs	fp, pc, r3, lsl #22
    1f80:	03c80e03 	biceq	r0, r8, #3, 28	; 0x30
    1f84:	1f5b4a75 	svcne	0x005b4a75
    1f88:	03332b24 	teqeq	r3, #36, 22	; 0x9000
    1f8c:	09022e2c 	stmdbeq	r2, {r2, r3, r5, r9, sl, fp, sp}
    1f90:	00010100 	andeq	r0, r1, r0, lsl #2
    1f94:	20c40205 	sbccs	r0, r4, r5, lsl #4
    1f98:	b3030800 	movwlt	r0, #14336	; 0x3800
    1f9c:	332f010b 			; <UNDEFINED> instruction: 0x332f010b
    1fa0:	4a00d203 	bmi	367b4 <_Min_Stack_Size+0x363b4>
    1fa4:	7faf0322 	svcvc	0x00af0322
    1fa8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    1fac:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1fb0:	002e1503 	eoreq	r1, lr, r3, lsl #10
    1fb4:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
    1fb8:	02040200 	andeq	r0, r4, #0, 4
    1fbc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    1fc0:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    1fc4:	001d0204 	andseq	r0, sp, r4, lsl #4
    1fc8:	31020402 	tstcc	r2, r2, lsl #8
    1fcc:	2c224023 	stccs	0, cr4, [r2], #-140	; 0xffffff74
    1fd0:	221c2131 	andscs	r2, ip, #1073741836	; 0x4000000c
    1fd4:	21242f2f 			; <UNDEFINED> instruction: 0x21242f2f
    1fd8:	0322212f 			; <UNDEFINED> instruction: 0x0322212f
    1fdc:	1d26207a 	stcne	0, cr2, [r6, #-488]!	; 0xfffffe18
    1fe0:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    1fe4:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1fe8:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1fec:	003c0601 	eorseq	r0, ip, r1, lsl #12
    1ff0:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    1ff4:	12034406 	andne	r4, r3, #100663296	; 0x6000000
    1ff8:	2079033c 	rsbscs	r0, r9, ip, lsr r3
    1ffc:	2e790327 	cdpcs	3, 7, cr0, cr9, cr7, {1}
    2000:	1e2e0903 	cdpne	9, 2, cr0, cr14, cr3, {0}
    2004:	7fb80322 	svcvc	0x00b80322
    2008:	c80e0320 	stmdagt	lr, {r5, r8, r9}
    200c:	5b4a7503 	blpl	129f420 <_Min_Stack_Size+0x129f020>
    2010:	332b241f 			; <UNDEFINED> instruction: 0x332b241f
    2014:	4d2e2c03 	stcmi	12, cr2, [lr, #-12]!
    2018:	01000902 	tsteq	r0, r2, lsl #18
    201c:	02050001 	andeq	r0, r5, #1
    2020:	080021b0 	stmdaeq	r0, {r4, r5, r7, r8, sp}
    2024:	010c9803 	tsteq	ip, r3, lsl #16
    2028:	c003302f 	andgt	r3, r3, pc, lsr #32
    202c:	03224a00 			; <UNDEFINED> instruction: 0x03224a00
    2030:	02002e40 	andeq	r2, r0, #64, 28	; 0x400
    2034:	20060104 	andcs	r0, r6, r4, lsl #2
    2038:	0e032606 	cfmadd32eq	mvax0, mvfx2, mvfx3, mvfx6
    203c:	4a7503c8 	bmi	1d42f64 <_Min_Stack_Size+0x1d42b64>
    2040:	2b241f5b 	blcs	909db4 <_Min_Stack_Size+0x9099b4>
    2044:	2e710333 	mrccs	3, 3, r0, cr1, cr3, {1}
    2048:	002e1503 	eoreq	r1, lr, r3, lsl #10
    204c:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
    2050:	02040200 	andeq	r0, r4, #0, 4
    2054:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2058:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    205c:	001d0204 	andseq	r0, sp, r4, lsl #4
    2060:	31020402 	tstcc	r2, r2, lsl #8
    2064:	09034023 	stmdbeq	r3, {r0, r1, r5, lr}
    2068:	301c1b20 	andscc	r1, ip, r0, lsr #22
    206c:	2f221d2f 	svccs	0x00221d2f
    2070:	2121242f 			; <UNDEFINED> instruction: 0x2121242f
    2074:	207a0323 	rsbscs	r0, sl, r3, lsr #6
    2078:	03232b26 			; <UNDEFINED> instruction: 0x03232b26
    207c:	7903200a 	stmdbvc	r3, {r1, r3, sp}
    2080:	1e303520 	cfabs64ne	mvdx3, mvdx0
    2084:	00080222 	andeq	r0, r8, r2, lsr #4
    2088:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    208c:	00227002 	eoreq	r7, r2, r2
    2090:	0ce80308 	stcleq	3, cr0, [r8], #32
    2094:	03302f01 	teqeq	r0, #1, 30
    2098:	224a00c0 	subcs	r0, sl, #192	; 0xc0
    209c:	002e4003 	eoreq	r4, lr, r3
    20a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    20a4:	03260620 			; <UNDEFINED> instruction: 0x03260620
    20a8:	7503c80e 	strvc	ip, [r3, #-2062]	; 0xfffff7f2
    20ac:	241f5b4a 	ldrcs	r5, [pc], #-2890	; 20b4 <_Min_Stack_Size+0x1cb4>
    20b0:	7103332b 	tstvc	r3, fp, lsr #6
    20b4:	2e15032e 	cdpcs	3, 1, cr0, cr5, cr14, {1}
    20b8:	02040200 	andeq	r0, r4, #0, 4
    20bc:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    20c0:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    20c4:	00230204 	eoreq	r0, r3, r4, lsl #4
    20c8:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    20cc:	02040200 	andeq	r0, r4, #0, 4
    20d0:	03402331 	movteq	r2, #817	; 0x331
    20d4:	7a03200a 	bvc	ca104 <_Min_Stack_Size+0xc9d04>
    20d8:	2f301c20 	svccs	0x00301c20
    20dc:	2f2f221d 	svccs	0x002f221d
    20e0:	03232125 			; <UNDEFINED> instruction: 0x03232125
    20e4:	2926207a 	stmdbcs	r6!, {r1, r3, r4, r5, r6, sp}
    20e8:	200a0325 	andcs	r0, sl, r5, lsr #6
    20ec:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    20f0:	02221e30 	eoreq	r1, r2, #48, 28	; 0x300
    20f4:	01010007 	tsteq	r1, r7
    20f8:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    20fc:	03080023 	movweq	r0, #32803	; 0x8023
    2100:	24010dba 	strcs	r0, [r1], #-3514	; 0xfffff246
    2104:	2f032438 	svccs	0x00032438
    2108:	51032220 	tstpl	r3, r0, lsr #4
    210c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2110:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    2114:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
    2118:	02004d02 	andeq	r4, r0, #2, 26	; 0x80
    211c:	002b0204 	eoreq	r0, fp, r4, lsl #4
    2120:	23020402 	movwcs	r0, #9218	; 0x2402
    2124:	02040200 	andeq	r0, r4, #0, 4
    2128:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    212c:	40233102 	eormi	r3, r3, r2, lsl #2
    2130:	312c1e24 			; <UNDEFINED> instruction: 0x312c1e24
    2134:	2f2f221d 	svccs	0x002f221d
    2138:	23212124 			; <UNDEFINED> instruction: 0x23212124
    213c:	03660a03 	cmneq	r6, #12288	; 0x3000
    2140:	10032070 	andne	r2, r3, r0, ror r0
    2144:	2e730320 	cdpcs	3, 7, cr0, cr3, cr0, {1}
    2148:	2e090326 	cdpcs	3, 0, cr0, cr9, cr6, {1}
    214c:	5903221e 	stmdbpl	r3, {r1, r2, r3, r4, r9, sp}
    2150:	00020220 	andeq	r0, r2, r0, lsr #4
    2154:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2158:	0023a802 	eoreq	sl, r3, r2, lsl #16
    215c:	0dfc0308 	ldcleq	3, cr0, [ip, #32]!
    2160:	24382401 	ldrtcs	r2, [r8], #-1025	; 0xfffffbff
    2164:	22202f03 	eorcs	r2, r0, #3, 30
    2168:	002e5103 	eoreq	r5, lr, r3, lsl #2
    216c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2170:	0034062e 	eorseq	r0, r4, lr, lsr #12
    2174:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
    2178:	02040200 	andeq	r0, r4, #0, 4
    217c:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    2180:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    2184:	001d0204 	andseq	r0, sp, r4, lsl #4
    2188:	31020402 	tstcc	r2, r2, lsl #8
    218c:	1e244023 	cdpne	0, 2, cr4, cr4, cr3, {1}
    2190:	221d312c 	andscs	r3, sp, #44, 2
    2194:	21242f2f 			; <UNDEFINED> instruction: 0x21242f2f
    2198:	0a032321 	beq	cae24 <_Min_Stack_Size+0xcaa24>
    219c:	20700366 	rsbscs	r0, r0, r6, ror #6
    21a0:	03201003 			; <UNDEFINED> instruction: 0x03201003
    21a4:	03262e73 			; <UNDEFINED> instruction: 0x03262e73
    21a8:	221e2e09 	andscs	r2, lr, #9, 28	; 0x90
    21ac:	02205903 	eoreq	r5, r0, #49152	; 0xc000
    21b0:	01010002 	tsteq	r1, r2
    21b4:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    21b8:	03080024 	movweq	r0, #32804	; 0x8024
    21bc:	13010eba 	movwne	r0, #7866	; 0x1eba
    21c0:	224a1503 	subcs	r1, sl, #12582912	; 0xc00000
    21c4:	23206b03 			; <UNDEFINED> instruction: 0x23206b03
    21c8:	4e3f311d 	mrcmi	1, 1, r3, cr15, cr13, {0}
    21cc:	02024c4d 	andeq	r4, r2, #19712	; 0x4d00
    21d0:	00010100 	andeq	r0, r1, r0, lsl #2
    21d4:	245c0205 	ldrbcs	r0, [ip], #-517	; 0xfffffdfb
    21d8:	db030800 	blle	c41e0 <_Min_Stack_Size+0xc3de0>
    21dc:	0317010e 	tsteq	r7, #-2147483645	; 0x80000003
    21e0:	71034a11 	tstvc	r3, r1, lsl sl
    21e4:	03332f2e 	teqeq	r3, #46, 30	; 0xb8
    21e8:	7903207a 	stmdbvc	r3, {r1, r3, r4, r5, r6, sp}
    21ec:	2121282e 			; <UNDEFINED> instruction: 0x2121282e
    21f0:	312f211e 			; <UNDEFINED> instruction: 0x312f211e
    21f4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    21f8:	3e3f2e75 	mrccc	14, 1, r2, cr15, cr5, {3}
    21fc:	0102281e 	tsteq	r2, lr, lsl r8
    2200:	00010100 	andeq	r0, r1, r0, lsl #2
    2204:	24a00205 	strtcs	r0, [r0], #517	; 0x205
    2208:	80030800 	andhi	r0, r3, r0, lsl #16
    220c:	212e010f 			; <UNDEFINED> instruction: 0x212e010f
    2210:	00e60330 	rsceq	r0, r6, r0, lsr r3
    2214:	9b03224a 	blls	cab44 <_Min_Stack_Size+0xca744>
    2218:	0e032e7f 	mcreq	14, 0, r2, cr3, cr15, {3}
    221c:	4a7503c8 	bmi	1d43144 <_Min_Stack_Size+0x1d42d44>
    2220:	2b241f5b 	blcs	909f94 <_Min_Stack_Size+0x909b94>
    2224:	02003433 	andeq	r3, r0, #855638016	; 0x33000000
    2228:	004d0204 	subeq	r0, sp, r4, lsl #4
    222c:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    2230:	02040200 	andeq	r0, r4, #0, 4
    2234:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    2238:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    223c:	23310204 	teqcs	r1, #4, 4	; 0x40000000
    2240:	20090340 	andcs	r0, r9, r0, asr #6
    2244:	30207703 	eorcc	r7, r0, r3, lsl #14
    2248:	221c2f2f 	andscs	r2, ip, #47, 30	; 0xbc
    224c:	21242f2f 			; <UNDEFINED> instruction: 0x21242f2f
    2250:	2f231d21 	svccs	0x00231d21
    2254:	2e270322 	cdpcs	3, 2, cr0, cr7, cr2, {1}
    2258:	4a0a034d 	bmi	282f94 <_Min_Stack_Size+0x282b94>
    225c:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    2260:	3f4a4f03 	svccc	0x004a4f03
    2264:	251b2623 	ldrcs	r2, [fp, #-1571]	; 0xfffff9dd
    2268:	7703212a 	strvc	r2, [r3, -sl, lsr #2]
    226c:	09033120 	stmdbeq	r3, {r5, r8, ip, sp}
    2270:	035b3120 	cmpeq	fp, #32, 2
    2274:	79034a0a 	stmdbvc	r3, {r1, r3, r9, fp, lr}
    2278:	033f3520 	teqeq	pc, #32, 10	; 0x8000000
    227c:	6b033c15 	blvs	d12d8 <_Min_Stack_Size+0xd0ed8>
    2280:	000d0220 	andeq	r0, sp, r0, lsr #4
    2284:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2288:	0025bc02 	eoreq	fp, r5, r2, lsl #24
    228c:	0ff80308 	svceq	0x00f80308
    2290:	30212e01 	eorcc	r2, r1, r1, lsl #28
    2294:	4a00e603 	bmi	3baa8 <_Min_Stack_Size+0x3b6a8>
    2298:	7f9b0322 	svcvc	0x009b0322
    229c:	c80e032e 	stmdagt	lr, {r1, r2, r3, r5, r8, r9}
    22a0:	5b4a7503 	blpl	129f6b4 <_Min_Stack_Size+0x129f2b4>
    22a4:	332b241f 			; <UNDEFINED> instruction: 0x332b241f
    22a8:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
    22ac:	02004d02 	andeq	r4, r0, #2, 26	; 0x80
    22b0:	001d0204 	andseq	r0, sp, r4, lsl #4
    22b4:	23020402 	movwcs	r0, #9218	; 0x2402
    22b8:	02040200 	andeq	r0, r4, #0, 4
    22bc:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    22c0:	40233102 	eormi	r3, r3, r2, lsl #2
    22c4:	03200903 			; <UNDEFINED> instruction: 0x03200903
    22c8:	2f302077 	svccs	0x00302077
    22cc:	2f221c2f 	svccs	0x00221c2f
    22d0:	2121242f 			; <UNDEFINED> instruction: 0x2121242f
    22d4:	222f231d 	eorcs	r2, pc, #1946157056	; 0x74000000
    22d8:	4d2e2703 	stcmi	7, cr2, [lr, #-12]!
    22dc:	034a0a03 	movteq	r0, #43523	; 0xaa03
    22e0:	03352079 	teqeq	r5, #121	; 0x79
    22e4:	233f4a4f 	teqcs	pc, #323584	; 0x4f000
    22e8:	21212926 			; <UNDEFINED> instruction: 0x21212926
    22ec:	31207703 			; <UNDEFINED> instruction: 0x31207703
    22f0:	31200903 			; <UNDEFINED> instruction: 0x31200903
    22f4:	4a0a035b 	bmi	283068 <_Min_Stack_Size+0x282c68>
    22f8:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    22fc:	3c15033f 	ldccc	3, cr0, [r5], {63}	; 0x3f
    2300:	02206b03 	eoreq	r6, r0, #3072	; 0xc00
    2304:	0101000c 	tsteq	r1, ip
    2308:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    230c:	03080026 	movweq	r0, #32806	; 0x8026
    2310:	3d01119d 	stfccs	f1, [r1, #-628]	; 0xfffffd8c
    2314:	03233930 			; <UNDEFINED> instruction: 0x03233930
    2318:	222000d1 	eorcs	r0, r0, #209	; 0xd1
    231c:	3c7faf03 	ldclcc	15, cr10, [pc], #-12	; 2318 <_Min_Stack_Size+0x1f18>
    2320:	01040200 	mrseq	r0, R12_usr
    2324:	26062006 	strcs	r2, [r6], -r6
    2328:	03c80e03 	biceq	r0, r8, #3, 28	; 0x30
    232c:	1f5b4a75 	svcne	0x005b4a75
    2330:	03332b24 	teqeq	r3, #36, 22	; 0x9000
    2334:	15032e71 	strne	r2, [r3, #-3697]	; 0xfffff18f
    2338:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    233c:	02004d02 	andeq	r4, r0, #2, 26	; 0x80
    2340:	001d0204 	andseq	r0, sp, r4, lsl #4
    2344:	23020402 	movwcs	r0, #9218	; 0x2402
    2348:	02040200 	andeq	r0, r4, #0, 4
    234c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2350:	40233102 	eormi	r3, r3, r2, lsl #2
    2354:	1c200d03 	stcne	13, cr0, [r0], #-12
    2358:	70033132 	andvc	r3, r3, r2, lsr r1
    235c:	1f1f5c20 	svcne	0x001f5c20
    2360:	21242f4b 			; <UNDEFINED> instruction: 0x21242f4b
    2364:	03231d2f 			; <UNDEFINED> instruction: 0x03231d2f
    2368:	7a032e0f 	bvc	cdbac <_Min_Stack_Size+0xcd7ac>
    236c:	21212120 			; <UNDEFINED> instruction: 0x21212120
    2370:	31207703 			; <UNDEFINED> instruction: 0x31207703
    2374:	31200903 			; <UNDEFINED> instruction: 0x31200903
    2378:	03580903 	cmpeq	r8, #49152	; 0xc000
    237c:	3f34207a 	svccc	0x0034207a
    2380:	02221e3e 	eoreq	r1, r2, #992	; 0x3e0
    2384:	0101000b 	tsteq	r1, fp
    2388:	d0020500 	andle	r0, r2, r0, lsl #10
    238c:	03080027 	movweq	r0, #32807	; 0x8027
    2390:	3d0111fe 	stfccs	f1, [r1, #-1016]	; 0xfffffc08
    2394:	03233930 			; <UNDEFINED> instruction: 0x03233930
    2398:	222000d1 	eorcs	r0, r0, #209	; 0xd1
    239c:	4a7faf03 	bmi	1fedfb0 <_Min_Stack_Size+0x1fedbb0>
    23a0:	01040200 	mrseq	r0, R12_usr
    23a4:	26062006 	strcs	r2, [r6], -r6
    23a8:	03c80e03 	biceq	r0, r8, #3, 28	; 0x30
    23ac:	1f5b4a75 	svcne	0x005b4a75
    23b0:	03332b24 	teqeq	r3, #36, 22	; 0x9000
    23b4:	15032e71 	strne	r2, [r3, #-3697]	; 0xfffff18f
    23b8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    23bc:	02004d02 	andeq	r4, r0, #2, 26	; 0x80
    23c0:	001d0204 	andseq	r0, sp, r4, lsl #4
    23c4:	23020402 	movwcs	r0, #9218	; 0x2402
    23c8:	02040200 	andeq	r0, r4, #0, 4
    23cc:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    23d0:	40233102 	eormi	r3, r3, r2, lsl #2
    23d4:	1c200d03 	stcne	13, cr0, [r0], #-12
    23d8:	70033132 	andvc	r3, r3, r2, lsr r1
    23dc:	1f1f4e20 	svcne	0x001f4e20
    23e0:	21242f4b 			; <UNDEFINED> instruction: 0x21242f4b
    23e4:	03231d2f 			; <UNDEFINED> instruction: 0x03231d2f
    23e8:	7a032e0f 	bvc	cdc2c <_Min_Stack_Size+0xcd82c>
    23ec:	21212120 			; <UNDEFINED> instruction: 0x21212120
    23f0:	31207703 			; <UNDEFINED> instruction: 0x31207703
    23f4:	31200903 			; <UNDEFINED> instruction: 0x31200903
    23f8:	03580903 	cmpeq	r8, #49152	; 0xc000
    23fc:	3f34207a 	svccc	0x0034207a
    2400:	02221e3e 	eoreq	r1, r2, #992	; 0x3e0
    2404:	0101000b 	tsteq	r1, fp
    2408:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    240c:	03080028 	movweq	r0, #32808	; 0x8028
    2410:	4a0112e2 	bmi	46fa0 <_Min_Stack_Size+0x46ba0>
    2414:	2537335c 	ldrcs	r3, [r7, #-860]!	; 0xfffffca4
    2418:	2000eb03 	andcs	lr, r0, r3, lsl #22
    241c:	15a80322 	strne	r0, [r8, #802]!	; 0x322
    2420:	f9036f4a 			; <UNDEFINED> instruction: 0xf9036f4a
    2424:	02006669 	andeq	r6, r0, #110100480	; 0x6900000
    2428:	004d0204 	subeq	r0, sp, r4, lsl #4
    242c:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    2430:	02040200 	andeq	r0, r4, #0, 4
    2434:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    2438:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    243c:	23310204 	teqcs	r1, #4, 4	; 0x40000000
    2440:	20090340 	andcs	r0, r9, r0, asr #6
    2444:	30207703 	eorcc	r7, r0, r3, lsl #14
    2448:	221c212f 	andscs	r2, ip, #-1073741813	; 0xc000000b
    244c:	2f242f2f 	svccs	0x00242f2f
    2450:	341d2b24 	ldrcc	r2, [sp], #-2852	; 0xfffff4dc
    2454:	10032347 	andne	r2, r3, r7, asr #6
    2458:	16b10382 	ldrtne	r0, [r1], r2, lsl #7
    245c:	01960358 	orrseq	r0, r6, r8, asr r3
    2460:	301d423c 	andscc	r4, sp, ip, lsr r2
    2464:	25221c22 	strcs	r1, [r2, #-3106]!	; 0xfffff3de
    2468:	b703212a 	strlt	r2, [r3, -sl, lsr #2]
    246c:	03442e68 	movteq	r2, #20072	; 0x4e68
    2470:	032e16c9 			; <UNDEFINED> instruction: 0x032e16c9
    2474:	033c00f1 	teqeq	ip, #241	; 0xf1
    2478:	033c7f9a 	teqeq	ip, #616	; 0x268
    247c:	f103d675 			; <UNDEFINED> instruction: 0xf103d675
    2480:	cb033c00 	blgt	d1488 <_Min_Stack_Size+0xd1088>
    2484:	1f214a68 	svcne	0x00214a68
    2488:	311d4c4c 	tstcc	sp, ip, asr #24
    248c:	0200231d 	andeq	r2, r0, #1946157056	; 0x74000000
    2490:	20060104 	andcs	r0, r6, r4, lsl #2
    2494:	1f4c3106 	svcne	0x004c3106
    2498:	1f211f21 	svcne	0x00211f21
    249c:	15cd0321 	strbne	r0, [sp, #801]	; 0x321
    24a0:	2a251f2e 	bcs	94a160 <_Min_Stack_Size+0x949d60>
    24a4:	2e69ed03 	cdpcs	13, 6, cr14, cr9, cr3, {0}
    24a8:	20169403 	andscs	r9, r6, r3, lsl #8
    24ac:	3c00c803 	stccc	8, cr12, [r0], {3}
    24b0:	3c019603 	stccc	6, cr9, [r1], {3}
    24b4:	3c7ef503 	cfldr64cc	mvdx15, [lr], #-12
    24b8:	ac69b603 	stclge	6, cr11, [r9], #-12
    24bc:	34032b23 	strcc	r2, [r3], #-2851	; 0xfffff4dd
    24c0:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    24c4:	3e1e1f23 	cdpcc	15, 1, cr1, cr14, cr3, {1}
    24c8:	03332b32 	teqeq	r3, #51200	; 0xc800
    24cc:	212016ac 			; <UNDEFINED> instruction: 0x212016ac
    24d0:	251e301f 	ldrcs	r3, [lr, #-31]	; 0xffffffe1
    24d4:	c003212a 	andgt	r2, r3, sl, lsr #2
    24d8:	08023c69 	stmdaeq	r2, {r0, r3, r5, r6, sl, fp, ip, sp}
    24dc:	00010100 	andeq	r0, r1, r0, lsl #2
    24e0:	2aa00205 	bcs	fe802cfc <_estack+0xde7d2cfc>
    24e4:	e7030800 	str	r0, [r3, -r0, lsl #16]
    24e8:	6a4a0113 	bvs	128293c <_Min_Stack_Size+0x128253c>
    24ec:	03253733 			; <UNDEFINED> instruction: 0x03253733
    24f0:	222001d0 	eorcs	r0, r0, #208, 2	; 0x34
    24f4:	4a13be03 	bmi	4f1d08 <_Min_Stack_Size+0x4f1908>
    24f8:	6afe0353 	bvs	fff8324c <_estack+0xdff5324c>
    24fc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2500:	02004d02 	andeq	r4, r0, #2, 26	; 0x80
    2504:	001d0204 	andseq	r0, sp, r4, lsl #4
    2508:	23020402 	movwcs	r0, #9218	; 0x2402
    250c:	02040200 	andeq	r0, r4, #0, 4
    2510:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2514:	40233102 	eormi	r3, r3, r2, lsl #2
    2518:	03200903 			; <UNDEFINED> instruction: 0x03200903
    251c:	2f302077 	svccs	0x00302077
    2520:	2f222a21 	svccs	0x00222a21
    2524:	2f2f322f 	svccs	0x002f322f
    2528:	3147422b 	cmpcc	r7, fp, lsr #4
    252c:	032b3168 			; <UNDEFINED> instruction: 0x032b3168
    2530:	b3033c3e 	movwlt	r3, #15422	; 0x3c3e
    2534:	331f2e14 	tstcc	pc, #20, 28	; 0x140
    2538:	6af2032a 	bvs	ffc831e8 <_estack+0xdfc531e8>
    253c:	158f032e 	strne	r0, [pc, #814]	; 2872 <_Min_Stack_Size+0x2472>
    2540:	6b9c0320 	blvs	fe7031c8 <_estack+0xde6d31c8>
    2544:	3f2b313c 	svccc	0x002b313c
    2548:	4a1e0369 	bmi	7832f4 <_Min_Stack_Size+0x782ef4>
    254c:	15033f3e 	strne	r3, [r3, #-3902]	; 0xfffff0c2
    2550:	149d033c 	ldrne	r0, [sp], #828	; 0x33c
    2554:	6c820366 	stcvs	3, cr0, [r2], {102}	; 0x66
    2558:	3f2b233c 	svccc	0x002b233c
    255c:	2d2f2d5a 	stccs	13, cr2, [pc, #-360]!	; 23fc <_Min_Stack_Size+0x1ffc>
    2560:	fa032d21 	blx	cd9ec <_Min_Stack_Size+0xcd5ec>
    2564:	90036613 	andls	r6, r3, r3, lsl r6
    2568:	2b233c6c 	blcs	8d1720 <_Min_Stack_Size+0x8d1320>
    256c:	322d5a3f 	eorcc	r5, sp, #258048	; 0x3f000
    2570:	241c4d47 	ldrcs	r4, [ip], #-3399	; 0xfffff2b9
    2574:	1d03321c 	sfmne	f3, 4, [r3, #-112]	; 0xffffff90
    2578:	212d2f3c 			; <UNDEFINED> instruction: 0x212d2f3c
    257c:	2f1f211f 	svccs	0x001f211f
    2580:	3c13ca03 	ldccc	10, cr12, [r3], {3}
    2584:	68799941 	ldmdavs	r9!, {r0, r6, r8, fp, ip, pc}^
    2588:	2a331f21 	bcs	cca214 <_Min_Stack_Size+0xcc9e14>
    258c:	2e6c8403 	cdpcs	4, 6, cr8, cr12, cr3, {0}
    2590:	2013fd03 	andscs	pc, r3, r3, lsl #26
    2594:	413c7703 	teqmi	ip, r3, lsl #14
    2598:	9e01bc03 	cdpls	12, 0, cr11, cr1, cr3, {0}
    259c:	033c1003 	teqeq	ip, #3
    25a0:	ef03586d 	svc	0x0003586d
    25a4:	3076586a 	rsbscc	r5, r6, sl, ror #16
    25a8:	1d4c2f2b 	stclne	15, cr2, [ip, #-172]	; 0xffffff54
    25ac:	31311d31 	teqcc	r1, r1, lsr sp
    25b0:	82158a03 	andshi	r8, r5, #12288	; 0x3000
    25b4:	3c12035b 	ldccc	3, cr0, [r2], {91}	; 0x5b
    25b8:	1c241f2f 	stcne	15, cr1, [r4], #-188	; 0xffffff44
    25bc:	ff032b32 			; <UNDEFINED> instruction: 0xff032b32
    25c0:	035e2e69 	cmpeq	lr, #1680	; 0x690
    25c4:	1e2e15ed 	cfsh64ne	mvdx1, mvdx14, #-3
    25c8:	33221c32 			; <UNDEFINED> instruction: 0x33221c32
    25cc:	79032f2a 	stmdbvc	r3, {r1, r3, r5, r8, r9, sl, fp, sp}
    25d0:	3c100358 	ldccc	3, cr0, [r0], {88}	; 0x58
    25d4:	03586d03 	cmpeq	r8, #3, 26	; 0xc0
    25d8:	03586aa0 	cmpeq	r8, #160, 20	; 0xa0000
    25dc:	038215e0 	orreq	r1, r2, #224, 10	; 0x38000000
    25e0:	036669ef 	cmneq	r6, #3915776	; 0x3bc000
    25e4:	0e032e0b 	cdpeq	14, 0, cr2, cr3, cr11, {0}
    25e8:	00f5032e 	rscseq	r0, r5, lr, lsr #6
    25ec:	332b4074 			; <UNDEFINED> instruction: 0x332b4074
    25f0:	207eef03 	rsbscs	lr, lr, r3, lsl #30
    25f4:	4d79694d 	ldclmi	9, cr6, [r9, #-308]!	; 0xfffffecc
    25f8:	0007024d 	andeq	r0, r7, sp, asr #4
    25fc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2600:	002dfc02 	eoreq	pc, sp, r2, lsl #24
    2604:	15d00308 	ldrbne	r0, [r0, #776]	; 0x308
    2608:	03333d01 	teqeq	r3, #1, 26	; 0x40
    260c:	03342e7a 	teqeq	r4, #1952	; 0x7a0
    2610:	03222e3f 			; <UNDEFINED> instruction: 0x03222e3f
    2614:	0e033c42 	cdpeq	12, 0, cr3, cr3, cr2, {2}
    2618:	4a7503c8 	bmi	1d43540 <_Min_Stack_Size+0x1d43140>
    261c:	2b241f5b 	blcs	90a390 <_Min_Stack_Size+0x909f90>
    2620:	02003433 	andeq	r3, r0, #855638016	; 0x33000000
    2624:	004d0204 	subeq	r0, sp, r4, lsl #4
    2628:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    262c:	02040200 	andeq	r0, r4, #0, 4
    2630:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    2634:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    2638:	23310204 	teqcs	r1, #4, 4	; 0x40000000
    263c:	200a0340 	andcs	r0, sl, r0, asr #6
    2640:	1c2e7a03 	stcne	10, cr7, [lr], #-12
    2644:	222b2f30 	eorcs	r2, fp, #48, 30	; 0xc0
    2648:	21252f2f 			; <UNDEFINED> instruction: 0x21252f2f
    264c:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    2650:	20760323 	rsbscs	r0, r6, r3, lsr #6
    2654:	032e0a03 			; <UNDEFINED> instruction: 0x032e0a03
    2658:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    265c:	200a0320 	andcs	r0, sl, r0, lsr #6
    2660:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    2664:	02221e30 	eoreq	r1, r2, #48, 28	; 0x300
    2668:	01010007 	tsteq	r1, r7
    266c:	c8020500 	stmdagt	r2, {r8, sl}
    2670:	0308002e 	movweq	r0, #32814	; 0x802e
    2674:	3d0116a5 	stccc	6, cr1, [r1, #-660]	; 0xfffffd6c
    2678:	2e7a0333 	mrccs	3, 3, r0, cr10, cr3, {1}
    267c:	00c40334 	sbceq	r0, r4, r4, lsr r3
    2680:	bd03222e 	sfmlt	f2, 4, [r3, #-184]	; 0xffffff48
    2684:	0e033c7f 	mcreq	12, 0, r3, cr3, cr15, {3}
    2688:	4a7503c8 	bmi	1d435b0 <_Min_Stack_Size+0x1d431b0>
    268c:	2b241f5b 	blcs	90a400 <_Min_Stack_Size+0x90a000>
    2690:	02003433 	andeq	r3, r0, #855638016	; 0x33000000
    2694:	004d0204 	subeq	r0, sp, r4, lsl #4
    2698:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    269c:	02040200 	andeq	r0, r4, #0, 4
    26a0:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    26a4:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    26a8:	23310204 	teqcs	r1, #4, 4	; 0x40000000
    26ac:	200a0340 	andcs	r0, sl, r0, asr #6
    26b0:	1c2e7a03 	stcne	10, cr7, [lr], #-12
    26b4:	222b2f30 	eorcs	r2, fp, #48, 30	; 0xc0
    26b8:	21252f2f 			; <UNDEFINED> instruction: 0x21252f2f
    26bc:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    26c0:	20760323 	rsbscs	r0, r6, r3, lsr #6
    26c4:	032e0a03 			; <UNDEFINED> instruction: 0x032e0a03
    26c8:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    26cc:	304d2320 	subcc	r2, sp, r0, lsr #6
    26d0:	301e3e27 	andscc	r3, lr, r7, lsr #28
    26d4:	01000902 	tsteq	r0, r2, lsl #18
    26d8:	02050001 	andeq	r0, r5, #1
    26dc:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
    26e0:	0116ff03 	tsteq	r6, r3, lsl #30	; <UNPREDICTABLE>
    26e4:	1f3d1f4b 	svcne	0x003d1f4b
    26e8:	df033334 	svcle	0x00033334
    26ec:	03224a00 			; <UNDEFINED> instruction: 0x03224a00
    26f0:	033c7fa2 	teqeq	ip, #648	; 0x288
    26f4:	7503d60e 	strvc	sp, [r3, #-1550]	; 0xfffff9f2
    26f8:	241f5b4a 	ldrcs	r5, [pc], #-2890	; 2700 <_Min_Stack_Size+0x2300>
    26fc:	0034332b 	eorseq	r3, r4, fp, lsr #6
    2700:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
    2704:	02040200 	andeq	r0, r4, #0, 4
    2708:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    270c:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    2710:	001d0204 	andseq	r0, sp, r4, lsl #4
    2714:	31020402 	tstcc	r2, r2, lsl #8
    2718:	0a034023 	beq	d27ac <_Min_Stack_Size+0xd23ac>
    271c:	20760320 	rsbscs	r0, r6, r0, lsr #6
    2720:	31212f3e 			; <UNDEFINED> instruction: 0x31212f3e
    2724:	331c331b 	tstcc	ip, #1811939328	; 0x6c000000
    2728:	2221331c 	eorcs	r3, r1, #28, 6	; 0x70000000
    272c:	03203103 			; <UNDEFINED> instruction: 0x03203103
    2730:	033f2e52 	teqeq	pc, #1312	; 0x520
    2734:	7a032e09 	bvc	cdf60 <_Min_Stack_Size+0xcdb60>
    2738:	2f2f2f3c 	svccs	0x002f2f3c
    273c:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    2740:	ae312e0c 	cdpge	14, 3, cr2, cr1, cr12, {0}
    2744:	34242b23 	strtcc	r2, [r4], #-2851	; 0xfffff4dd
    2748:	74090333 	strvc	r0, [r9], #-819	; 0xfffffccd
    274c:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    2750:	000f023f 	andeq	r0, pc, pc, lsr r2	; <UNPREDICTABLE>
    2754:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2758:	0030dc02 	eorseq	sp, r0, r2, lsl #24
    275c:	17f90308 	ldrbne	r0, [r9, r8, lsl #6]!
    2760:	306a3c01 	rsbcc	r3, sl, r1, lsl #24
    2764:	01890333 	orreq	r0, r9, r3, lsr r3
    2768:	f803224a 			; <UNDEFINED> instruction: 0xf803224a
    276c:	0e033c7e 	mcreq	12, 0, r3, cr3, cr14, {3}
    2770:	4a7503d6 	bmi	1d436d0 <_Min_Stack_Size+0x1d432d0>
    2774:	2b241f5b 	blcs	90a4e8 <_Min_Stack_Size+0x90a0e8>
    2778:	02003433 	andeq	r3, r0, #855638016	; 0x33000000
    277c:	004d0204 	subeq	r0, sp, r4, lsl #4
    2780:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    2784:	02040200 	andeq	r0, r4, #0, 4
    2788:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    278c:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    2790:	23310204 	teqcs	r1, #4, 4	; 0x40000000
    2794:	20090340 	andcs	r0, r9, r0, asr #6
    2798:	30207703 	eorcc	r7, r0, r3, lsl #14
    279c:	221c2f2f 	andscs	r2, ip, #47, 30	; 0xbc
    27a0:	21242f2f 			; <UNDEFINED> instruction: 0x21242f2f
    27a4:	30311d21 	eorscc	r1, r1, r1, lsr #26
    27a8:	26313f31 	shasxcs	r3, r1, r1
    27ac:	0321211b 			; <UNDEFINED> instruction: 0x0321211b
    27b0:	0c032077 	stceq	0, cr2, [r3], {119}	; 0x77
    27b4:	2077032e 	rsbscs	r0, r7, lr, lsr #6
    27b8:	312e0903 			; <UNDEFINED> instruction: 0x312e0903
    27bc:	23ba1003 			; <UNDEFINED> instruction: 0x23ba1003
    27c0:	034e281d 	movteq	r2, #59421	; 0xe81d
    27c4:	7a037409 	bvc	df7f0 <_Min_Stack_Size+0xdf3f0>
    27c8:	5d3f3420 	cfldrspl	mvf3, [pc, #-128]!	; 2750 <_Min_Stack_Size+0x2350>
    27cc:	77ac1103 	strvc	r1, [ip, r3, lsl #2]!
    27d0:	2b411e22 	blcs	104a060 <_Min_Stack_Size+0x1049c60>
    27d4:	3c7fbf03 	ldclcc	15, cr11, [pc], #-12	; 27d0 <_Min_Stack_Size+0x23d0>
    27d8:	35344b31 	ldrcc	r4, [r4, #-2865]!	; 0xfffff4cf
    27dc:	01000f02 	tsteq	r0, r2, lsl #30
    27e0:	02050001 	andeq	r0, r5, #1
    27e4:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
    27e8:	01199c03 	tsteq	r9, r3, lsl #24
    27ec:	3a30404a 	bcc	c1291c <_Min_Stack_Size+0xc1251c>
    27f0:	00ea0322 	rsceq	r0, sl, r2, lsr #6
    27f4:	f2032220 	vhsub.s8	d2, d3, d16
    27f8:	03613c0e 	cmneq	r1, #3584	; 0xe00
    27fc:	006670b0 	strhteq	r7, [r6], #-0
    2800:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
    2804:	02040200 	andeq	r0, r4, #0, 4
    2808:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    280c:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    2810:	001d0204 	andseq	r0, sp, r4, lsl #4
    2814:	31020402 	tstcc	r2, r2, lsl #8
    2818:	1f244023 	svcne	0x00244023
    281c:	031e301d 	tsteq	lr, #29
    2820:	70032012 	andvc	r2, r3, r2, lsl r0
    2824:	031f302e 	tsteq	pc, #46	; 0x2e
    2828:	6503201c 	strvs	r2, [r3, #-28]	; 0xffffffe4
    282c:	bd03252e 	cfstr32lt	mvfx2, [r3, #-184]	; 0xffffff48
    2830:	cc03660f 	stcgt	6, cr6, [r3], {15}
    2834:	30323c70 	eorscc	r3, r2, r0, ror ip
    2838:	2121221e 			; <UNDEFINED> instruction: 0x2121221e
    283c:	212f1e2f 			; <UNDEFINED> instruction: 0x212f1e2f
    2840:	01040200 	mrseq	r0, R12_usr
    2844:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    2848:	06200204 	strteq	r0, [r0], -r4, lsl #4
    284c:	21213032 			; <UNDEFINED> instruction: 0x21213032
    2850:	272e7803 	strcs	r7, [lr, -r3, lsl #16]!
    2854:	2078032f 	rsbscs	r0, r8, pc, lsr #6
    2858:	3f200b03 	svccc	0x00200b03
    285c:	1b031d3f 	blne	c9d60 <_Min_Stack_Size+0xc9960>
    2860:	033f2b20 	teqeq	pc, #32, 22	; 0x8000
    2864:	612e0f87 	smlawbvs	lr, r7, pc, r0	; <UNPREDICTABLE>
    2868:	74718603 	ldrbtvc	r8, [r1], #-1539	; 0xfffff9fd
    286c:	311d2330 	tstcc	sp, r0, lsr r3
    2870:	2e480330 	mcrcs	3, 2, r0, cr8, cr0, {1}
    2874:	213e5a4c 	teqcs	lr, ip, asr #20
    2878:	2e780321 	cdpcs	3, 7, cr0, cr8, cr1, {1}
    287c:	78032f27 	stmdavc	r3, {r0, r1, r2, r5, r8, r9, sl, fp, sp}
    2880:	0fab0320 	svceq	0x00ab0320
    2884:	1f85412e 	svcne	0x0085412e
    2888:	fb032a25 	blx	cd126 <_Min_Stack_Size+0xccd26>
    288c:	86032e70 			; <UNDEFINED> instruction: 0x86032e70
    2890:	1f3b200f 	svcne	0x003b200f
    2894:	a4032a25 	strge	r2, [r3], #-2597	; 0xfffff5db
    2898:	dd032e70 	stcle	14, cr2, [r3, #-448]	; 0xfffffe40
    289c:	213a200f 	teqcs	sl, pc
    28a0:	032a251f 			; <UNDEFINED> instruction: 0x032a251f
    28a4:	032e70c0 			; <UNDEFINED> instruction: 0x032e70c0
    28a8:	03200fc1 			; <UNDEFINED> instruction: 0x03200fc1
    28ac:	313c70dd 	ldrsbcc	r7, [ip, -sp]!
    28b0:	9c03231d 	stcls	3, cr2, [r3], {29}
    28b4:	0361740f 	cmneq	r1, #251658240	; 0xf000000
    28b8:	235870f1 	cmpcs	r8, #241	; 0xf1
    28bc:	0230311d 	eorseq	r3, r0, #1073741831	; 0x40000007
    28c0:	01010004 	tsteq	r1, r4
    28c4:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    28c8:	03080034 	movweq	r0, #32820	; 0x8034
    28cc:	02011bcb 	andeq	r1, r1, #207872	; 0x32c00
    28d0:	01010001 	tsteq	r1, r1
    28d4:	40020500 	andmi	r0, r2, r0, lsl #10
    28d8:	03080034 	movweq	r0, #32820	; 0x8034
    28dc:	02011bdb 	andeq	r1, r1, #224256	; 0x36c00
    28e0:	01010001 	tsteq	r1, r1
    28e4:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    28e8:	03080034 	movweq	r0, #32820	; 0x8034
    28ec:	02011bea 	andeq	r1, r1, #239616	; 0x3a800
    28f0:	01010001 	tsteq	r1, r1
    28f4:	48020500 	stmdami	r2, {r8, sl}
    28f8:	03080034 	movweq	r0, #32820	; 0x8034
    28fc:	02011bfa 	andeq	r1, r1, #256000	; 0x3e800
    2900:	01010001 	tsteq	r1, r1
    2904:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    2908:	03080034 	movweq	r0, #32820	; 0x8034
    290c:	02011c8c 	andeq	r1, r1, #140, 24	; 0x8c00
    2910:	01010001 	tsteq	r1, r1
    2914:	50020500 	andpl	r0, r2, r0, lsl #10
    2918:	03080034 	movweq	r0, #32820	; 0x8034
    291c:	02011c9e 	andeq	r1, r1, #40448	; 0x9e00
    2920:	01010001 	tsteq	r1, r1
    2924:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    2928:	03080034 	movweq	r0, #32820	; 0x8034
    292c:	02011cae 	andeq	r1, r1, #44544	; 0xae00
    2930:	01010001 	tsteq	r1, r1
    2934:	58020500 	stmdapl	r2, {r8, sl}
    2938:	03080034 	movweq	r0, #32820	; 0x8034
    293c:	02011cbe 	andeq	r1, r1, #48640	; 0xbe00
    2940:	01010001 	tsteq	r1, r1
    2944:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    2948:	03080034 	movweq	r0, #32820	; 0x8034
    294c:	02011cce 	andeq	r1, r1, #52736	; 0xce00
    2950:	01010001 	tsteq	r1, r1
    2954:	60020500 	andvs	r0, r2, r0, lsl #10
    2958:	03080034 	movweq	r0, #32820	; 0x8034
    295c:	130128b1 	movwne	r2, #6321	; 0x18b1
    2960:	1e262a23 	vmulne.f32	s4, s12, s7
    2964:	22221c32 	eorcs	r1, r2, #12800	; 0x3200
    2968:	024c302f 	subeq	r3, ip, #47	; 0x2f
    296c:	01010003 	tsteq	r1, r3
    2970:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    2974:	03080034 	movweq	r0, #32820	; 0x8034
    2978:	130127f1 	movwne	r2, #6129	; 0x17f1
    297c:	2d2f241f 	cfstrscs	mvf2, [pc, #-124]!	; 2908 <_Min_Stack_Size+0x2508>
    2980:	00221e23 	eoreq	r1, r2, r3, lsr #28
    2984:	06010402 	streq	r0, [r1], -r2, lsl #8
    2988:	0d030620 	stceq	6, cr0, [r3, #-128]	; 0xffffff80
    298c:	4d4d5b2e 	vstrmi	d21, [sp, #-184]	; 0xffffff48
    2990:	233e1e22 	teqcs	lr, #544	; 0x220
    2994:	2c303e34 	ldccs	14, cr3, [r0], #-208	; 0xffffff30
    2998:	002e0a03 	eoreq	r0, lr, r3, lsl #20
    299c:	03020402 	movweq	r0, #9218	; 0x2402
    29a0:	30313c53 	eorscc	r3, r1, r3, asr ip
    29a4:	03233e1e 			; <UNDEFINED> instruction: 0x03233e1e
    29a8:	7603581f 			; <UNDEFINED> instruction: 0x7603581f
    29ac:	0003023c 	andeq	r0, r3, ip, lsr r2
    29b0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    29b4:	00351002 	eorseq	r1, r5, r2
    29b8:	1cde0308 	ldclne	3, cr0, [lr], {8}
    29bc:	00010201 	andeq	r0, r1, r1, lsl #4
    29c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    29c4:	00351402 	eorseq	r1, r5, r2, lsl #8
    29c8:	23e10308 	mvncs	r0, #8, 6	; 0x20000000
    29cc:	30220101 	eorcc	r0, r2, r1, lsl #2
    29d0:	0a03242a 	beq	cba80 <_Min_Stack_Size+0xcb680>
    29d4:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    29d8:	00580601 	subseq	r0, r8, r1, lsl #12
    29dc:	06010402 	streq	r0, [r1], -r2, lsl #8
    29e0:	322f4c30 	eorcc	r4, pc, #48, 24	; 0x3000
    29e4:	1e224c4d 	cdpne	12, 2, cr4, cr2, cr13, {2}
    29e8:	03304e3e 	teqeq	r0, #992	; 0x3e0
    29ec:	034a00c5 	movteq	r0, #41157	; 0xa0c5
    29f0:	1503585f 	strne	r5, [r3, #-2143]	; 0xfffff7a1
    29f4:	415c3f4a 	cmpmi	ip, sl, asr #30
    29f8:	01040200 	mrseq	r0, R12_usr
    29fc:	3e064a06 	vmlacc.f32	s8, s12, s12
    2a00:	1c331f30 	ldcne	15, cr1, [r3], #-192	; 0xffffff40
    2a04:	9603312f 	strls	r3, [r3], -pc, lsr #2
    2a08:	1f213c7f 	svcne	0x00213c7f
    2a0c:	3c2b032f 	stccc	3, cr0, [fp], #-188	; 0xffffff44
    2a10:	6a4d4d3e 	bvs	1355f10 <_Min_Stack_Size+0x1355b10>
    2a14:	1e301b25 	vaddne.f64	d1, d0, d21
    2a18:	34311d25 	ldrtcc	r1, [r1], #-3365	; 0xfffff2db
    2a1c:	6a3f233d 	bvs	fcb718 <_Min_Stack_Size+0xfcb318>
    2a20:	4a4f034d 	bmi	13c375c <_Min_Stack_Size+0x13c335c>
    2a24:	1b251b25 	blne	9496c0 <_Min_Stack_Size+0x9492c0>
    2a28:	31221e30 			; <UNDEFINED> instruction: 0x31221e30
    2a2c:	01000702 	tsteq	r0, r2, lsl #14
    2a30:	02050001 	andeq	r0, r5, #1
    2a34:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
    2a38:	0110ef03 	tsteq	r0, r3, lsl #30
    2a3c:	4a1f0314 	bmi	7c3694 <_Min_Stack_Size+0x7c3294>
    2a40:	002e6403 	eoreq	r6, lr, r3, lsl #8
    2a44:	61020402 	tstvs	r2, r2, lsl #8
    2a48:	02040200 	andeq	r0, r4, #0, 4
    2a4c:	00200b03 	eoreq	r0, r0, r3, lsl #22
    2a50:	1c020402 	cfstrsne	mvf0, [r2], {2}
    2a54:	02040200 	andeq	r0, r4, #0, 4
    2a58:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2a5c:	02001f02 	andeq	r1, r0, #2, 30
    2a60:	00210204 	eoreq	r0, r1, r4, lsl #4
    2a64:	31020402 	tstcc	r2, r2, lsl #8
    2a68:	02040200 	andeq	r0, r4, #0, 4
    2a6c:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    2a70:	02004c02 	andeq	r4, r0, #512	; 0x200
    2a74:	00230204 	eoreq	r0, r3, r4, lsl #4
    2a78:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
    2a7c:	02040200 	andeq	r0, r4, #0, 4
    2a80:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    2a84:	02023002 	andeq	r3, r2, #2
    2a88:	00010100 	andeq	r0, r1, r0, lsl #2
    2a8c:	369c0205 	ldrcc	r0, [ip], r5, lsl #4
    2a90:	97030800 	strls	r0, [r3, -r0, lsl #16]
    2a94:	1f21011a 	svcne	0x0021011a
    2a98:	22212121 	eorcs	r2, r1, #1073741832	; 0x40000008
    2a9c:	2078033f 	rsbscs	r0, r8, pc, lsr r3
    2aa0:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
    2aa4:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    2aa8:	003c3303 	eorseq	r3, ip, r3, lsl #6
    2aac:	06010402 	streq	r0, [r1], -r2, lsl #8
    2ab0:	0a03063c 	beq	c43a8 <_Min_Stack_Size+0xc3fa8>
    2ab4:	005d5b3c 	subseq	r5, sp, ip, lsr fp
    2ab8:	06010402 	streq	r0, [r1], -r2, lsl #8
    2abc:	87030658 	smlsdhi	r3, r8, r6, r0
    2ac0:	595b3c07 	ldmdbpl	fp, {r0, r1, r2, sl, fp, ip, sp}^
    2ac4:	5878e803 	ldmdapl	r8!, {r0, r1, fp, sp, lr, pc}^
    2ac8:	01040200 	mrseq	r0, R12_usr
    2acc:	03064a06 	movweq	r4, #27142	; 0x6a06
    2ad0:	312e07f8 	strdcc	r0, [lr, -r8]!
    2ad4:	034d854d 	movteq	r8, #54605	; 0xd54d
    2ad8:	0c033c74 	stceq	12, cr3, [r3], {116}	; 0x74
    2adc:	5da42220 	sfmpl	f2, 4, [r4, #128]!	; 0x80
    2ae0:	5c593f3f 	mrrcpl	15, 3, r3, r9, cr15
    2ae4:	4d4e593f 	stclmi	9, cr5, [lr, #-252]	; 0xffffff04
    2ae8:	580d0351 	stmdapl	sp, {r0, r4, r6, r8, r9}
    2aec:	241f215a 	ldrcs	r2, [pc], #-346	; 2af4 <_Min_Stack_Size+0x26f4>
    2af0:	03302f1d 	teqeq	r0, #29, 30	; 0x74
    2af4:	003c778a 	eorseq	r7, ip, sl, lsl #15
    2af8:	06010402 	streq	r0, [r1], -r2, lsl #8
    2afc:	1003063c 	andne	r0, r3, ip, lsr r6
    2b00:	005d3f3c 	subseq	r3, sp, ip, lsr pc
    2b04:	06010402 	streq	r0, [r1], -r2, lsl #8
    2b08:	3e03063c 	mcrcc	6, 0, r0, cr3, cr12, {1}
    2b0c:	7faf033c 	svcvc	0x00af033c
    2b10:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2b14:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    2b18:	2e068303 	cdpcs	3, 0, cr8, cr6, cr3, {0}
    2b1c:	3c7a8803 	ldclcc	8, cr8, [sl], #-12
    2b20:	004a1103 	subeq	r1, sl, r3, lsl #2
    2b24:	06010402 	streq	r0, [r1], -r2, lsl #8
    2b28:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    2b2c:	03062e02 	movweq	r2, #28162	; 0x6e02
    2b30:	4e4a0493 	mcrmi	4, 2, r0, cr10, cr3, {4}
    2b34:	1e30342f 	cdpne	4, 3, cr3, cr0, cr15, {1}
    2b38:	232e1503 			; <UNDEFINED> instruction: 0x232e1503
    2b3c:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
    2b40:	40412074 	submi	r2, r1, r4, ror r0
    2b44:	1e3e4b4d 	vsubne.f64	d4, d14, d13
    2b48:	cd033022 	stcgt	0, cr3, [r3, #-136]	; 0xffffff78
    2b4c:	1e315800 	cdpne	8, 3, cr5, cr1, cr0, {0}
    2b50:	7ad20330 	bvc	ff483818 <_estack+0xdf453818>
    2b54:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    2b58:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    2b5c:	2e068c03 	cdpcs	12, 0, cr8, cr6, cr3, {0}
    2b60:	38302f2f 	ldmdacc	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    2b64:	01800324 	orreq	r0, r0, r4, lsr #6
    2b68:	79b1032e 	ldmibvc	r1!, {r1, r2, r3, r5, r8, r9}
    2b6c:	02005d74 	andeq	r5, r0, #116, 26	; 0x1d00
    2b70:	4a060104 	bmi	182f88 <_Min_Stack_Size+0x182b88>
    2b74:	07ab0306 	streq	r0, [fp, r6, lsl #6]!
    2b78:	03594d2e 	cmpeq	r9, #2944	; 0xb80
    2b7c:	3c0878a7 	stccc	8, cr7, [r8], {167}	; 0xa7
    2b80:	01040200 	mrseq	r0, R12_usr
    2b84:	03065806 	movweq	r5, #26630	; 0x6806
    2b88:	223c04dc 	eorscs	r0, ip, #220, 8	; 0xdc000000
    2b8c:	4d580c03 	ldclmi	12, cr0, [r8, #-12]
    2b90:	41231da3 			; <UNDEFINED> instruction: 0x41231da3
    2b94:	593c0a03 	ldmdbpl	ip!, {r0, r1, r9, fp}
    2b98:	4b3f2b23 	blmi	fcd82c <_Min_Stack_Size+0xfcd42c>
    2b9c:	223f1d23 	eorscs	r1, pc, #2240	; 0x8c0
    2ba0:	03303e1e 	teqeq	r0, #480	; 0x1e0
    2ba4:	1f215809 	svcne	0x00215809
    2ba8:	00301e23 	eorseq	r1, r0, r3, lsr #28
    2bac:	03010402 	movweq	r0, #5122	; 0x1402
    2bb0:	003c7ad4 	ldrsbteq	r7, [ip], -r4
    2bb4:	06020402 	streq	r0, [r2], -r2, lsl #8
    2bb8:	f403063c 	vst1.8	{d0-d2}, [r3 :256], ip
    2bbc:	1d325802 	ldcne	8, cr5, [r2, #-8]!
    2bc0:	23211e2f 			; <UNDEFINED> instruction: 0x23211e2f
    2bc4:	3d662403 	cfstrdcc	mvd2, [r6, #-12]!
    2bc8:	4d5a5f3e 	ldclmi	15, cr5, [sl, #-248]	; 0xffffff08
    2bcc:	0b031d31 	bleq	ca098 <_Min_Stack_Size+0xc9c98>
    2bd0:	02003e2e 	andeq	r3, r0, #736	; 0x2e0
    2bd4:	80030104 	andhi	r0, r3, r4, lsl #2
    2bd8:	02004a7d 	andeq	r4, r0, #512000	; 0x7d000
    2bdc:	3c060204 	sfmcc	f0, 4, [r6], {4}
    2be0:	07900306 	ldreq	r0, [r0, r6, lsl #6]
    2be4:	222c3058 	eorcs	r3, ip, #88	; 0x58
    2be8:	854c593f 	strbhi	r5, [ip, #-2367]	; 0xfffff6c1
    2bec:	1c321d31 	ldcne	13, cr1, [r2], #-196	; 0xffffff3c
    2bf0:	31211c27 			; <UNDEFINED> instruction: 0x31211c27
    2bf4:	01040200 	mrseq	r0, R12_usr
    2bf8:	3c78d003 	ldclcc	0, cr13, [r8], #-12
    2bfc:	02040200 	andeq	r0, r4, #0, 4
    2c00:	03063c06 	movweq	r3, #27654	; 0x6c06
    2c04:	305806ec 	subscc	r0, r8, ip, ror #13
    2c08:	593f222c 	ldmdbpl	pc!, {r2, r3, r5, r9, sp}	; <UNPREDICTABLE>
    2c0c:	1d23854c 	cfstr32ne	mvfx8, [r3, #-304]!	; 0xfffffed0
    2c10:	1c271c32 	stcne	12, cr1, [r7], #-200	; 0xffffff38
    2c14:	98033121 	stmdals	r3, {r0, r5, r8, ip, sp}
    2c18:	0e033c7e 	mcreq	12, 0, r3, cr3, cr14, {3}
    2c1c:	4a0e034a 	bmi	38394c <_Min_Stack_Size+0x38354c>
    2c20:	99034d41 	stmdbls	r3, {r0, r6, r8, sl, fp, lr}
    2c24:	1b258202 	blne	963434 <_Min_Stack_Size+0x963034>
    2c28:	20770333 	rsbscs	r0, r7, r3, lsr r3
    2c2c:	322e0b03 	eorcc	r0, lr, #3072	; 0xc00
    2c30:	7dc50324 	stclvc	3, cr0, [r5, #144]	; 0x90
    2c34:	38243e4a 	stmdacc	r4!, {r1, r3, r6, r9, sl, fp, ip, sp}
    2c38:	7e8e0332 	mcrvc	3, 4, r0, cr14, cr2, {1}
    2c3c:	035a223c 	cmpeq	sl, #60, 4	; 0xc0000003
    2c40:	0d035809 	stceq	8, cr5, [r3, #-36]	; 0xffffffdc
    2c44:	21224d82 	smlawbcs	r2, r2, sp, r4
    2c48:	30213e1d 	eorcc	r3, r1, sp, lsl lr
    2c4c:	1c242c30 	stcne	12, cr2, [r4], #-192	; 0xffffff40
    2c50:	032e7303 			; <UNDEFINED> instruction: 0x032e7303
    2c54:	3f3c01c8 	svccc	0x003c01c8
    2c58:	58038e03 	stmdapl	r3, {r0, r1, r9, sl, fp, pc}
    2c5c:	1c251f30 	stcne	15, cr1, [r5], #-192	; 0xffffff40
    2c60:	8603312f 	strhi	r3, [r3], -pc, lsr #2
    2c64:	2a033c7d 	bcs	d1e60 <_Min_Stack_Size+0xd1a60>
    2c68:	0c035dba 	stceq	13, cr5, [r3], {186}	; 0xba
    2c6c:	03694d74 	cmneq	r9, #116, 26	; 0x1d00
    2c70:	034a00e1 	movteq	r0, #41185	; 0xa0e1
    2c74:	033c01a9 	teqeq	ip, #1073741866	; 0x4000002a
    2c78:	85667cc9 	strbhi	r7, [r6, #-3273]!	; 0xfffff337
    2c7c:	5803d603 	stmdapl	r3, {r0, r1, r9, sl, ip, lr, pc}
    2c80:	4a7cfd03 	bmi	1f42094 <_Min_Stack_Size+0x1f41c94>
    2c84:	667dd303 	ldrbtvs	sp, [sp], -r3, lsl #6
    2c88:	4a01f403 	bmi	7fc9c <_Min_Stack_Size+0x7f89c>
    2c8c:	58019203 	stmdapl	r1, {r0, r1, r9, ip, pc}
    2c90:	034a3603 	movteq	r3, #42499	; 0xa603
    2c94:	3f4c581c 	svccc	0x004c581c
    2c98:	7db1034e 	ldcvc	3, cr0, [r1, #312]!	; 0x138
    2c9c:	311d2382 	tstcc	sp, r2, lsl #7
    2ca0:	4a09033f 	bmi	2439a4 <_Min_Stack_Size+0x2435a4>
    2ca4:	587fb703 	ldmdapl	pc!, {r0, r1, r8, r9, sl, ip, sp, pc}^	; <UNPREDICTABLE>
    2ca8:	1c321e22 	ldcne	14, cr1, [r2], #-136	; 0xffffff78
    2cac:	2f211c26 	svccs	0x00211c26
    2cb0:	3c7f8303 	ldclcc	3, cr8, [pc], #-12	; 2cac <_Min_Stack_Size+0x28ac>
    2cb4:	4d820d03 	stcmi	13, cr0, [r2, #12]
    2cb8:	3e1d2122 	mufccep	f2, f5, f2
    2cbc:	2c303021 	ldccs	0, cr3, [r0], #-132	; 0xffffff7c
    2cc0:	fb031d23 	blx	ca156 <_Min_Stack_Size+0xc9d56>
    2cc4:	99032e00 	stmdbls	r3, {r9, sl, fp, sp}
    2cc8:	17033c02 	strne	r3, [r3, -r2, lsl #24]
    2ccc:	313e673c 	teqcc	lr, ip, lsr r7
    2cd0:	4203404f 	andmi	r4, r3, #79	; 0x4f
    2cd4:	4c697982 	stclmi	9, cr7, [r9], #-520	; 0xfffffdf8
    2cd8:	4a00c403 	bmi	33cec <_Min_Stack_Size+0x338ec>
    2cdc:	3f231d31 	svccc	0x00231d31
    2ce0:	034e3f52 	movteq	r3, #61266	; 0xef52
    2ce4:	1d238260 	sfmne	f0, 1, [r3, #-384]!	; 0xfffffe80
    2ce8:	5203693f 	andpl	r6, r3, #1032192	; 0xfc000
    2cec:	234d4c58 	movtcs	r4, #56408	; 0xdc58
    2cf0:	ce033f1d 	mcrgt	15, 0, r3, cr3, cr13, {0}
    2cf4:	1e22747c 	mcrne	4, 1, r7, cr2, cr12, {3}
    2cf8:	1c261c32 	stcne	12, cr1, [r6], #-200	; 0xffffff38
    2cfc:	03302f21 	teqeq	r0, #33, 30	; 0x84
    2d00:	4c433c38 	mcrrmi	12, 3, r3, r3, cr8
    2d04:	039c034f 	orrseq	r0, ip, #1006632961	; 0x3c000001
    2d08:	7dd40366 	ldclvc	3, cr0, [r4, #408]	; 0x198
    2d0c:	01fb034a 	mvnseq	r0, sl, asr #6
    2d10:	f703694a 			; <UNDEFINED> instruction: 0xf703694a
    2d14:	0330587c 	teqeq	r0, #124, 16	; 0x7c0000
    2d18:	513e4a0e 	teqpl	lr, lr, lsl #20
    2d1c:	01000502 	tsteq	r0, r2, lsl #10
    2d20:	02050001 	andeq	r0, r5, #1
    2d24:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
    2d28:	0128c803 			; <UNDEFINED> instruction: 0x0128c803
    2d2c:	242a2313 	strtcs	r2, [sl], #-787	; 0xfffffced
    2d30:	03212330 			; <UNDEFINED> instruction: 0x03212330
    2d34:	2722207a 			; <UNDEFINED> instruction: 0x2722207a
    2d38:	2922242a 	stmdbcs	r2!, {r1, r3, r5, sl, sp}
    2d3c:	032b2f25 			; <UNDEFINED> instruction: 0x032b2f25
    2d40:	034d2012 	movteq	r2, #53266	; 0xd012
    2d44:	4d233c6f 	stcmi	12, cr3, [r3, #-444]!	; 0xfffffe44
    2d48:	01000302 	tsteq	r0, r2, lsl #6
    2d4c:	02050001 	andeq	r0, r5, #1
    2d50:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    2d54:	011b8103 	tsteq	fp, r3, lsl #2
    2d58:	7a032414 	bvc	cbdb0 <_Min_Stack_Size+0xcb9b0>
    2d5c:	23212220 			; <UNDEFINED> instruction: 0x23212220
    2d60:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    2d64:	01040200 	mrseq	r0, R12_usr
    2d68:	3e062e06 	cdpcc	14, 0, cr2, cr6, cr6, {0}
    2d6c:	3f2b2a27 	svccc	0x002b2a27
    2d70:	2b232224 	blcs	8cb608 <_Min_Stack_Size+0x8cb208>
    2d74:	2e790335 	mrccs	3, 3, r0, cr9, cr5, {1}
    2d78:	2f222423 	svccs	0x00222423
    2d7c:	1d212f21 	stcne	15, cr2, [r1, #-132]!	; 0xffffff7c
    2d80:	4d362221 	lfmmi	f2, 4, [r6, #-132]!	; 0xffffff7c
    2d84:	0352415f 	cmpeq	r2, #-1073741801	; 0xc0000017
    2d88:	02003c52 	andeq	r3, r0, #20992	; 0x5200
    2d8c:	3c060104 	stfccs	f0, [r6], {4}
    2d90:	3c090306 	stccc	3, cr0, [r9], {6}
    2d94:	01040200 	mrseq	r0, R12_usr
    2d98:	063c3c06 	ldrteq	r3, [ip], -r6, lsl #24
    2d9c:	003c1d03 	eorseq	r1, ip, r3, lsl #26
    2da0:	06010402 	streq	r0, [r1], -r2, lsl #8
    2da4:	2230063c 	eorscs	r0, r0, #60, 12	; 0x3c00000
    2da8:	03243e2c 			; <UNDEFINED> instruction: 0x03243e2c
    2dac:	303c08a5 	eorscc	r0, ip, r5, lsr #17
    2db0:	763c0a03 	ldrtvc	r0, [ip], -r3, lsl #20
    2db4:	4d322f4c 	ldcmi	15, cr2, [r2, #-304]!	; 0xfffffed0
    2db8:	034a2e03 	movteq	r2, #44547	; 0xae03
    2dbc:	5c3f4a15 	ldcpl	10, cr4, [pc], #-84	; 2d70 <_Min_Stack_Size+0x2970>
    2dc0:	1f307641 	svcne	0x00307641
    2dc4:	312f1c33 			; <UNDEFINED> instruction: 0x312f1c33
    2dc8:	3c76c703 	ldclcc	7, cr12, [r6], #-12
    2dcc:	033c1d03 	teqeq	ip, #3, 26	; 0xc0
    2dd0:	224a08c7 	subcs	r0, sl, #13041664	; 0xc70000
    2dd4:	304e3e1e 	subcc	r3, lr, lr, lsl lr
    2dd8:	251b254d 	ldrcs	r2, [fp, #-1357]	; 0xfffffab3
    2ddc:	221e301b 	andscs	r3, lr, #27
    2de0:	77a00331 			; <UNDEFINED> instruction: 0x77a00331
    2de4:	08bb034a 	ldmeq	fp!, {r1, r3, r6, r8, r9}
    2de8:	2f1f2158 	svccs	0x001f2158
    2dec:	01040200 	mrseq	r0, R12_usr
    2df0:	3c77b603 	ldclcc	6, cr11, [r7], #-12
    2df4:	02040200 	andeq	r0, r4, #0, 4
    2df8:	02003c06 	andeq	r3, r0, #1536	; 0x600
    2dfc:	4b060104 	blmi	183214 <_Min_Stack_Size+0x182e14>
    2e00:	0886033d 	stmeq	r6, {r0, r2, r3, r4, r5, r8, r9}
    2e04:	1d222f3c 	stcne	15, cr2, [r2, #-240]!	; 0xffffff10
    2e08:	3c150323 	ldccc	3, cr0, [r5], {35}	; 0x23
    2e0c:	1e21303e 	mcrne	0, 1, r3, cr1, cr14, {1}
    2e10:	23312f21 	teqcs	r1, #33, 30	; 0x84
    2e14:	3e233f2b 	cdpcc	15, 2, cr3, cr3, cr11, {1}
    2e18:	4a00dc03 	bmi	39e2c <_Min_Stack_Size+0x39a2c>
    2e1c:	6a3f233d 	bvs	fcbb18 <_Min_Stack_Size+0xfcb718>
    2e20:	4a5b034d 	bmi	16c3b5c <_Min_Stack_Size+0x16c375c>
    2e24:	6a4d5b3e 	bvs	1359b24 <_Min_Stack_Size+0x1359724>
    2e28:	1e301b25 	vaddne.f64	d1, d0, d21
    2e2c:	03311d25 	teqeq	r1, #2368	; 0x940
    2e30:	312e7f85 	smlawbcc	lr, r5, pc, r7	; <UNPREDICTABLE>
    2e34:	3f2b2331 	svccc	0x002b2331
    2e38:	311e2223 	tstcc	lr, r3, lsr #4
    2e3c:	211b271d 	tstcs	fp, sp, lsl r7
    2e40:	0902312f 	stmdbeq	r2, {r0, r1, r2, r3, r5, r8, ip, sp}
    2e44:	00010100 	andeq	r0, r1, r0, lsl #2
    2e48:	41540205 	cmpmi	r4, r5, lsl #4
    2e4c:	81030800 	tsthi	r3, r0, lsl #16
    2e50:	2f14011d 	svccs	0x0014011d
    2e54:	01000102 	tsteq	r0, r2, lsl #2
    2e58:	02050001 	andeq	r0, r5, #1
    2e5c:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
    2e60:	011d8d03 	tsteq	sp, r3, lsl #26
    2e64:	01022f13 	tsteq	r2, r3, lsl pc
    2e68:	00010100 	andeq	r0, r1, r0, lsl #2
    2e6c:	41640205 	cmnmi	r4, r5, lsl #4
    2e70:	98030800 	stmdals	r3, {fp}
    2e74:	2113011d 	tstcs	r3, sp, lsl r1
    2e78:	01000102 	tsteq	r0, r2, lsl #2
    2e7c:	0006d201 	andeq	sp, r6, r1, lsl #4
    2e80:	1f000200 	svcne	0x00000200
    2e84:	02000002 	andeq	r0, r0, #2
    2e88:	0d0efb01 	vstreq	d15, [lr, #-4]
    2e8c:	01010100 	mrseq	r0, (UNDEF: 17)
    2e90:	00000001 	andeq	r0, r0, r1
    2e94:	01000001 	tsteq	r0, r1
    2e98:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2de4 <_Min_Stack_Size+0x29e4>
    2e9c:	72662f65 	rsbvc	r2, r6, #404	; 0x194
    2ea0:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
    2ea4:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
    2ea8:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    2eac:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    2eb0:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
    2eb4:	4b2e4b2e 	blmi	b95b74 <_Min_Stack_Size+0xb95774>
    2eb8:	502f412e 	eorpl	r4, pc, lr, lsr #2
    2ebc:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    2ec0:	2f6d726f 	svccs	0x006d726f
    2ec4:	334d5453 	movtcc	r5, #54355	; 0xd453
    2ec8:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    2ecc:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    2ed0:	2f34465f 	svccs	0x0034465f
    2ed4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2ed8:	2f737265 	svccs	0x00737265
    2edc:	334d5453 	movtcc	r5, #54355	; 0xd453
    2ee0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2ee4:	41485f78 	hvcmi	34296	; 0x85f8
    2ee8:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
    2eec:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2ef0:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2ef4:	73752f00 	cmnvc	r5, #0, 30
    2ef8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2efc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2f00:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    2f04:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2f08:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    2f0c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    2f10:	73752f00 	cmnvc	r5, #0, 30
    2f14:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2f18:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2f1c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    2f20:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2f24:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    2f28:	2f2e2e00 	svccs	0x002e2e00
    2f2c:	502f2e2e 	eorpl	r2, pc, lr, lsr #28
    2f30:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    2f34:	2f6d726f 	svccs	0x006d726f
    2f38:	334d5453 	movtcc	r5, #54355	; 0xd453
    2f3c:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    2f40:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    2f44:	2f34465f 	svccs	0x0034465f
    2f48:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2f4c:	2f737265 	svccs	0x00737265
    2f50:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2f54:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    2f58:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2f5c:	2f54532f 	svccs	0x0054532f
    2f60:	334d5453 	movtcc	r5, #54355	; 0xd453
    2f64:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2f68:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    2f6c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2f70:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    2f74:	2f2e2e2f 	svccs	0x002e2e2f
    2f78:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
    2f7c:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    2f80:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2f84:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2f88:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
    2f8c:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
    2f90:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    2f94:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2f98:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2f9c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    2fa0:	485f7878 	ldmdami	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    2fa4:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 2fac <_Min_Stack_Size+0x2bac>
    2fa8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2fac:	6e492f72 	mcrvs	15, 2, r2, cr9, cr2, {3}
    2fb0:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
    2fb4:	2f2e2e2f 	svccs	0x002e2e2f
    2fb8:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
    2fbc:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    2fc0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2fc4:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2fc8:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
    2fcc:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
    2fd0:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    2fd4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2fd8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2fdc:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    2fe0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2fe4:	00006564 	andeq	r6, r0, r4, ror #10
    2fe8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2fec:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2ff0:	61685f78 	smcvs	34296	; 0x85f8
    2ff4:	6d645f6c 	stclvs	15, cr5, [r4, #-432]!	; 0xfffffe50
    2ff8:	00632e61 	rsbeq	r2, r3, r1, ror #28
    2ffc:	5f000001 	svcpl	0x00000001
    3000:	61666564 	cmnvs	r6, r4, ror #10
    3004:	5f746c75 	svcpl	0x00746c75
    3008:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    300c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3010:	5f000002 	svcpl	0x00000002
    3014:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3018:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    301c:	00000300 	andeq	r0, r0, r0, lsl #6
    3020:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3024:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    3028:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
    302c:	00040068 	andeq	r0, r4, r8, rrx
    3030:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3034:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    3038:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    303c:	00000400 	andeq	r0, r0, r0, lsl #8
    3040:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3044:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3048:	61685f78 	smcvs	34296	; 0x85f8
    304c:	65645f6c 	strbvs	r5, [r4, #-3948]!	; 0xfffff094
    3050:	00682e66 	rsbeq	r2, r8, r6, ror #28
    3054:	73000005 	movwvc	r0, #5
    3058:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    305c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3060:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    3064:	616d645f 	cmnvs	sp, pc, asr r4
    3068:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    306c:	6f630000 	svcvs	0x00630000
    3070:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    3074:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    3078:	00000600 	andeq	r0, r0, r0, lsl #12
    307c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    3080:	735f6d65 	cmpvc	pc, #6464	; 0x1940
    3084:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3088:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    308c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3090:	74730000 	ldrbtvc	r0, [r3], #-0
    3094:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3098:	5f787834 	svcpl	0x00787834
    309c:	2e6c6168 	powcsez	f6, f4, #0.0
    30a0:	00050068 	andeq	r0, r5, r8, rrx
    30a4:	05000000 	streq	r0, [r0, #-0]
    30a8:	00416802 	subeq	r6, r1, r2, lsl #16
    30ac:	01c00308 	biceq	r0, r0, r8, lsl #6
    30b0:	03324c01 	teqeq	r2, #256	; 0x100
    30b4:	1d232e1d 	stcne	14, cr2, [r3, #-116]!	; 0xffffff8c
    30b8:	207a0331 	rsbscs	r0, sl, r1, lsr r3
    30bc:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
    30c0:	63232342 			; <UNDEFINED> instruction: 0x63232342
    30c4:	2d3c1a03 	vldmdbcs	ip!, {s2-s4}
    30c8:	032f213d 			; <UNDEFINED> instruction: 0x032f213d
    30cc:	03312074 	teqeq	r1, #116	; 0x74
    30d0:	7a032e0c 	bvc	ce908 <_Min_Stack_Size+0xce508>
    30d4:	4b3d2f20 	blmi	f4ed5c <_Min_Stack_Size+0xf4e95c>
    30d8:	03207703 			; <UNDEFINED> instruction: 0x03207703
    30dc:	7a032e0c 	bvc	ce914 <_Min_Stack_Size+0xce514>
    30e0:	23273420 			; <UNDEFINED> instruction: 0x23273420
    30e4:	90033123 	andls	r3, r3, r3, lsr #2
    30e8:	85032007 	strhi	r2, [r3, #-7]
    30ec:	fb032e79 	blx	ceada <_Min_Stack_Size+0xce6da>
    30f0:	254e2006 	strbcs	r2, [lr, #-6]
    30f4:	232b3329 			; <UNDEFINED> instruction: 0x232b3329
    30f8:	2e798303 	cdpcs	3, 7, cr8, cr9, cr3, {0}
    30fc:	03331d34 	teqeq	r3, #52, 26	; 0xd00
    3100:	23232078 			; <UNDEFINED> instruction: 0x23232078
    3104:	7fb50331 	svcvc	0x00b50331
    3108:	1b251d3c 	blne	94a600 <_Min_Stack_Size+0x94a200>
    310c:	00cb0323 	sbceq	r0, fp, r3, lsr #6
    3110:	3c4e032e 	mcrrcc	3, 2, r0, lr, cr14
    3114:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    3118:	2332206d 	teqcs	r2, #109	; 0x6d
    311c:	2e09033f 	mcrcs	3, 0, r0, cr9, cr15, {1}
    3120:	2007aa03 	andcs	sl, r7, r3, lsl #20
    3124:	00c2033e 	sbceq	r0, r2, lr, lsr r3
    3128:	789a0358 	ldmvc	sl, {r3, r4, r6, r8, r9}
    312c:	1e331d2e 	cdpne	13, 3, cr1, cr3, cr14, {1}
    3130:	7fa00330 	svcvc	0x00a00330
    3134:	00f50320 	rscseq	r0, r5, r0, lsr #6
    3138:	07a90320 	streq	r0, [r9, r0, lsr #6]!
    313c:	3c1e033c 	ldccc	3, cr0, [lr], {60}	; 0x3c
    3140:	03586403 	cmpeq	r8, #50331648	; 0x3000000
    3144:	0a02c80f 	beq	b5188 <_Min_Stack_Size+0xb4d88>
    3148:	00010100 	andeq	r0, r1, r0, lsl #2
    314c:	42b80205 	adcsmi	r0, r8, #1342177280	; 0x50000000
    3150:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    3154:	42160102 	andsmi	r0, r6, #-2147483648	; 0x80000000
    3158:	06d1035f 			; <UNDEFINED> instruction: 0x06d1035f
    315c:	799e0320 	ldmibvc	lr, {r5, r8, r9}
    3160:	06e2032e 	strbteq	r0, [r2], lr, lsr #6
    3164:	79af0320 	stmibvc	pc!, {r5, r8, r9}	; <UNPREDICTABLE>
    3168:	06d50320 	ldrbeq	r0, [r5], r0, lsr #6
    316c:	b2031c20 	andlt	r1, r3, #32, 24	; 0x2000
    3170:	031d3c79 	tsteq	sp, #30976	; 0x7900
    3174:	6e032e12 	mcrvs	14, 0, r2, cr3, cr2, {0}
    3178:	23232320 			; <UNDEFINED> instruction: 0x23232320
    317c:	03232323 			; <UNDEFINED> instruction: 0x03232323
    3180:	292006c8 	stmdbcs	r0!, {r3, r6, r7, r9, sl}
    3184:	03232b33 			; <UNDEFINED> instruction: 0x03232b33
    3188:	232e79be 			; <UNDEFINED> instruction: 0x232e79be
    318c:	2e0b031d 	mcrcs	3, 0, r0, cr11, cr13, {0}
    3190:	23207503 			; <UNDEFINED> instruction: 0x23207503
    3194:	03342b26 	teqeq	r4, #38912	; 0x9800
    3198:	79032e58 	stmdbvc	r3, {r3, r4, r6, r9, sl, fp, sp}
    319c:	0007022e 	andeq	r0, r7, lr, lsr #4
    31a0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    31a4:	00433002 	subeq	r3, r3, r2
    31a8:	039d0308 	orrseq	r0, sp, #8, 6	; 0x20000000
    31ac:	02002701 	andeq	r2, r0, #262144	; 0x40000
    31b0:	004c0204 	subeq	r0, ip, r4, lsl #4
    31b4:	2c020402 	cfstrscs	mvf0, [r2], {2}
    31b8:	02040200 	andeq	r0, r4, #0, 4
    31bc:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    31c0:	02001e02 	andeq	r1, r0, #2, 28
    31c4:	03300204 	teqeq	r0, #4, 4	; 0x40000000
    31c8:	1d422011 	stclne	0, cr2, [r2, #-68]	; 0xffffffbc
    31cc:	20670323 	rsbcs	r0, r7, r3, lsr #6
    31d0:	03201903 			; <UNDEFINED> instruction: 0x03201903
    31d4:	032e05ca 			; <UNDEFINED> instruction: 0x032e05ca
    31d8:	23207aa2 			; <UNDEFINED> instruction: 0x23207aa2
    31dc:	db03311d 	blle	cf658 <_Min_Stack_Size+0xcf258>
    31e0:	03262005 			; <UNDEFINED> instruction: 0x03262005
    31e4:	0334207a 	teqeq	r4, #122	; 0x7a
    31e8:	2623207a 			; <UNDEFINED> instruction: 0x2623207a
    31ec:	032e0903 			; <UNDEFINED> instruction: 0x032e0903
    31f0:	0903207a 	stmdbeq	r3, {r1, r3, r4, r5, r6, sp}
    31f4:	7a960320 	bvc	fe583e7c <_estack+0xde553e7c>
    31f8:	4a6c0320 	bmi	1b03e80 <_Min_Stack_Size+0x1b03a80>
    31fc:	02201f03 	eoreq	r1, r0, #3, 30
    3200:	01010002 	tsteq	r1, r2
    3204:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    3208:	03080043 	movweq	r0, #32835	; 0x8043
    320c:	030103c9 	movweq	r0, #5065	; 0x13c9
    3210:	7a03200a 	bvc	cb240 <_Min_Stack_Size+0xcae40>
    3214:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    3218:	00300204 	eorseq	r0, r0, r4, lsl #4
    321c:	2c020402 	cfstrscs	mvf0, [r2], {2}
    3220:	02040200 	andeq	r0, r4, #0, 4
    3224:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    3228:	02001e02 	andeq	r1, r0, #2, 28
    322c:	03300204 	teqeq	r0, #4, 4	; 0x40000000
    3230:	1c43201d 	mcrrne	0, 1, r2, r3, cr13
    3234:	205a0324 	subscs	r0, sl, r4, lsr #6
    3238:	03202603 			; <UNDEFINED> instruction: 0x03202603
    323c:	032e058e 			; <UNDEFINED> instruction: 0x032e058e
    3240:	23207ad1 			; <UNDEFINED> instruction: 0x23207ad1
    3244:	ac03311d 	stfges	f3, [r3], {29}
    3248:	03262005 			; <UNDEFINED> instruction: 0x03262005
    324c:	0334207a 	teqeq	r4, #122	; 0x7a
    3250:	2623207a 			; <UNDEFINED> instruction: 0x2623207a
    3254:	032e0903 			; <UNDEFINED> instruction: 0x032e0903
    3258:	ce03207a 	mcrgt	0, 0, r2, cr3, cr10, {3}
    325c:	bb03207a 	bllt	cb44c <_Min_Stack_Size+0xcb04c>
    3260:	c5032005 	strgt	r2, [r3, #-5]
    3264:	03342e7a 	teqeq	r4, #1952	; 0x7a0
    3268:	4b23207a 	blmi	8cb458 <_Min_Stack_Size+0x8cb058>
    326c:	034e224c 	movteq	r2, #57932	; 0xe24c
    3270:	2f034a5d 	svccs	0x00034a5d
    3274:	00020220 	andeq	r0, r2, r0, lsr #4
    3278:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    327c:	00441002 	subeq	r1, r4, r2
    3280:	04880308 	streq	r0, [r8], #776	; 0x308
    3284:	22222001 	eorcs	r2, r2, #1
    3288:	1d234c30 	stcne	12, cr4, [r3, #-192]!	; 0xffffff40
    328c:	23333023 	teqcs	r3, #35	; 0x23
    3290:	225a4b1d 	subscs	r4, sl, #29696	; 0x7400
    3294:	63234d4e 			; <UNDEFINED> instruction: 0x63234d4e
    3298:	424a1303 	submi	r1, sl, #201326592	; 0xc000000
    329c:	28207a03 	stmdacs	r0!, {r0, r1, r9, fp, ip, sp, lr}
    32a0:	0331311b 	teqeq	r1, #-1073741818	; 0xc0000006
    32a4:	2323206a 			; <UNDEFINED> instruction: 0x2323206a
    32a8:	23207a03 			; <UNDEFINED> instruction: 0x23207a03
    32ac:	02003031 	andeq	r3, r0, #49	; 0x31
    32b0:	69030104 	stmdbvs	r3, {r2, r8}
    32b4:	00040220 	andeq	r0, r4, r0, lsr #4
    32b8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    32bc:	0044a002 	subeq	sl, r4, r2
    32c0:	04cb0308 	strbeq	r0, [fp], #776	; 0x308
    32c4:	2f4c1301 	svccs	0x004c1301
    32c8:	4d3f1d36 	ldcmi	13, cr1, [pc, #-216]!	; 31f8 <_Min_Stack_Size+0x2df8>
    32cc:	00010221 	andeq	r0, r1, r1, lsr #4
    32d0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    32d4:	0044c402 	subeq	ip, r4, r2, lsl #8
    32d8:	04e90308 	strbteq	r0, [r9], #776	; 0x308
    32dc:	34314a01 	ldrtcc	r4, [r1], #-2561	; 0xfffff5ff
    32e0:	211f214d 	tstcs	pc, sp, asr #2
    32e4:	00f2032f 	rscseq	r0, r2, pc, lsr #6
    32e8:	7f920320 	svcvc	0x00920320
    32ec:	2b23513c 	blcs	8d77e4 <_Min_Stack_Size+0x8d73e4>
    32f0:	033d4d36 	teqeq	sp, #3456	; 0xd80
    32f4:	09035822 	stmdbeq	r3, {r1, r5, fp, ip, lr}
    32f8:	2e6e032e 	cdpcs	3, 6, cr0, cr14, cr14, {1}
    32fc:	6b206903 	blvs	81d710 <_Min_Stack_Size+0x81d310>
    3300:	1e581203 	cdpne	2, 5, cr1, cr8, cr3, {0}
    3304:	4a090330 	bmi	243fcc <_Min_Stack_Size+0x243bcc>
    3308:	032e0903 			; <UNDEFINED> instruction: 0x032e0903
    330c:	69232e6e 	stmdbvs	r3!, {r1, r2, r3, r5, r6, r9, sl, fp, sp}
    3310:	31693131 	cmncc	r9, r1, lsr r1
    3314:	20540331 	subscs	r0, r4, r1, lsr r3
    3318:	3f2e2c03 	svccc	0x002e2c03
    331c:	032e5103 			; <UNDEFINED> instruction: 0x032e5103
    3320:	03302033 	teqeq	r0, #51	; 0x33
    3324:	0d033c13 	stceq	12, cr3, [r3, #-76]	; 0xffffffb4
    3328:	9d034d3c 	stcls	13, cr4, [r3, #-240]	; 0xffffff10
    332c:	78032e7f 	stmdavc	r3, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    3330:	031f2f58 	tsteq	pc, #88, 30	; 0x160
    3334:	032000ec 			; <UNDEFINED> instruction: 0x032000ec
    3338:	003c7fa7 	eorseq	r7, ip, r7, lsr #31
    333c:	06010402 	streq	r0, [r1], -r2, lsl #8
    3340:	2344063c 	movtcs	r0, #17980	; 0x463c
    3344:	207a0323 	rsbscs	r0, sl, r3, lsr #6
    3348:	03303123 	teqeq	r0, #-1073741816	; 0xc0000008
    334c:	09032e10 	stmdbeq	r3, {r4, r9, sl, fp, sp}
    3350:	206e0320 	rsbcs	r0, lr, r0, lsr #6
    3354:	03200903 			; <UNDEFINED> instruction: 0x03200903
    3358:	6e032009 	cdpvs	0, 0, cr2, cr3, cr9, {0}
    335c:	20690320 	rsbcs	r0, r9, r0, lsr #6
    3360:	30661503 	rsbcc	r1, r6, r3, lsl #10
    3364:	31314d31 	teqcc	r1, r1, lsr sp
    3368:	0331314d 	teqeq	r1, #1073741843	; 0x40000013
    336c:	2c032054 	stccs	0, cr2, [r3], {84}	; 0x54
    3370:	51033f2e 	tstpl	r3, lr, lsr #30
    3374:	00cb032e 	sbceq	r0, fp, lr, lsr #6
    3378:	4a0d032e 	bmi	344038 <_Min_Stack_Size+0x343c38>
    337c:	30207603 	eorcc	r7, r0, r3, lsl #12
    3380:	20780328 	rsbscs	r0, r8, r8, lsr #6
    3384:	3c7eaa03 	ldclcc	10, cr10, [lr], #-12
    3388:	223a3022 	eorscs	r3, sl, #34	; 0x22
    338c:	01ba0322 			; <UNDEFINED> instruction: 0x01ba0322
    3390:	0323313c 			; <UNDEFINED> instruction: 0x0323313c
    3394:	1b36207a 	blne	d8b584 <_Min_Stack_Size+0xd8b184>
    3398:	c8033031 	stmdagt	r3, {r0, r4, r5, ip, sp}
    339c:	1d23207e 	stcne	0, cr2, [r3, #-504]!	; 0xfffffe08
    33a0:	4e224c4b 	cdpmi	12, 2, cr4, cr2, cr11, {2}
    33a4:	1303635e 	movwne	r6, #13150	; 0x335e
    33a8:	7a03423c 	bvc	d3ca0 <_Min_Stack_Size+0xd38a0>
    33ac:	6d032620 	stcvs	6, cr2, [r3, #-128]	; 0xffffff80
    33b0:	7a03263c 	bvc	ccca8 <_Min_Stack_Size+0xcc8a8>
    33b4:	6b033420 	blvs	d043c <_Min_Stack_Size+0xd003c>
    33b8:	0008023c 	andeq	r0, r8, ip, lsr r2
    33bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    33c0:	0046e002 	subeq	lr, r6, r2
    33c4:	05f20308 	ldrbeq	r0, [r2, #776]!	; 0x308
    33c8:	1c243001 	stcne	0, cr3, [r4], #-4
    33cc:	1d200903 	stcne	9, cr0, [r0, #-12]!
    33d0:	7503281b 	strvc	r2, [r3, #-2075]	; 0xfffff7e5
    33d4:	2228233c 	eorcs	r2, r8, #60, 6	; 0xf0000000
    33d8:	4c4a0d03 	mcrrmi	13, 0, r0, sl, cr3
    33dc:	4c4a0a03 	mcrrmi	10, 0, r0, sl, cr3
    33e0:	4c4a0a03 	mcrrmi	10, 0, r0, sl, cr3
    33e4:	4c4a2d03 	mcrrmi	13, 0, r2, sl, cr3
    33e8:	4a00ce03 	bmi	36bfc <_Min_Stack_Size+0x367fc>
    33ec:	1d233e30 	stcne	14, cr3, [r3, #-192]!	; 0xffffff40
    33f0:	7ecb0331 	mcrvc	3, 6, r0, cr11, cr1, {1}
    33f4:	01b50320 			; <UNDEFINED> instruction: 0x01b50320
    33f8:	7ecb0320 	cdpvc	3, 12, cr0, cr11, cr0, {1}
    33fc:	01b5032e 			; <UNDEFINED> instruction: 0x01b5032e
    3400:	7ecb032e 	cdpvc	3, 12, cr0, cr11, cr14, {1}
    3404:	01be0320 			; <UNDEFINED> instruction: 0x01be0320
    3408:	2360372e 	cmncs	r0, #12058624	; 0xb80000
    340c:	3131311d 	teqcc	r1, sp, lsl r1
    3410:	7f960331 	svcvc	0x00960331
    3414:	1b03222e 	blne	cbcd4 <_Min_Stack_Size+0xcb8d4>
    3418:	231d3f4a 	tstcs	sp, #296	; 0x128
    341c:	3f2e2103 	svccc	0x002e2103
    3420:	3c7f8d03 	ldclcc	13, cr8, [pc], #-12	; 341c <_Min_Stack_Size+0x301c>
    3424:	031d3f23 	tsteq	sp, #35, 30	; 0x8c
    3428:	4d312018 	ldcmi	0, cr2, [r1, #-96]!	; 0xffffffa0
    342c:	4a50033f 	bmi	1404130 <_Min_Stack_Size+0x1403d30>
    3430:	58710323 	ldmdapl	r1!, {r0, r1, r5, r8, r9}^
    3434:	586e0323 	stmdapl	lr!, {r0, r1, r5, r8, r9}^
    3438:	2703234d 	strcs	r2, [r3, -sp, asr #6]
    343c:	2e0b0358 	mcrcs	3, 0, r0, cr11, cr8, {2}
    3440:	234a2303 	movtcs	r2, #41731	; 0xa303
    3444:	224c3d1d 	subcs	r3, ip, #1856	; 0x740
    3448:	7803284e 	stmdavc	r3, {r1, r2, r3, r6, fp, sp}
    344c:	03233120 			; <UNDEFINED> instruction: 0x03233120
    3450:	3123207a 			; <UNDEFINED> instruction: 0x3123207a
    3454:	1d033030 	stcne	0, cr3, [r3, #-192]	; 0xffffff40
    3458:	03263f3c 			; <UNDEFINED> instruction: 0x03263f3c
    345c:	313f207a 	teqcc	pc, sl, ror r0	; <UNPREDICTABLE>
    3460:	003c6403 	eorseq	r6, ip, r3, lsl #8
    3464:	03010402 	movweq	r0, #5122	; 0x1402
    3468:	0c024a66 	stceq	10, cr4, [r2], {102}	; 0x66
    346c:	00010100 	andeq	r0, r1, r0, lsl #2
    3470:	48880205 	stmmi	r8, {r0, r2, r9}
    3474:	cf030800 	svcgt	0x00030800
    3478:	37170107 	ldrcc	r0, [r7, -r7, lsl #2]
    347c:	02002520 	andeq	r2, r0, #32, 10	; 0x8000000
    3480:	00220204 	eoreq	r0, r2, r4, lsl #4
    3484:	2c020402 	cfstrscs	mvf0, [r2], {2}
    3488:	02040200 	andeq	r0, r4, #0, 4
    348c:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    3490:	02001e02 	andeq	r1, r0, #2, 28
    3494:	03300204 	teqeq	r0, #4, 4	; 0x40000000
    3498:	1e222027 	cdpne	0, 2, cr2, cr2, cr7, {1}
    349c:	3c540331 	mrrccc	3, 3, r0, r4, cr1
    34a0:	03202c03 			; <UNDEFINED> instruction: 0x03202c03
    34a4:	17033c58 	smlsdne	r3, r8, ip, r3
    34a8:	20620374 	rsbcs	r0, r2, r4, ror r3
    34ac:	1b201f03 	blne	80b0c0 <_Min_Stack_Size+0x80acc0>
    34b0:	03206603 			; <UNDEFINED> instruction: 0x03206603
    34b4:	031b201b 	tsteq	fp, #27
    34b8:	1703206a 	strne	r2, [r3, -sl, rrx]
    34bc:	6e031b20 	vmlavs.f64	d1, d3, d16
    34c0:	20130320 	andscs	r0, r3, r0, lsr #6
    34c4:	2072031b 	rsbscs	r0, r2, fp, lsl r3
    34c8:	1b200f03 	blne	8070dc <_Min_Stack_Size+0x806cdc>
    34cc:	03207603 			; <UNDEFINED> instruction: 0x03207603
    34d0:	7503200b 	strvc	r2, [r3, #-11]
    34d4:	00020220 	andeq	r0, r2, r0, lsr #4
    34d8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    34dc:	0048f002 	subeq	pc, r8, r2
    34e0:	088b0308 	stmeq	fp, {r3, r8, r9}
    34e4:	24381601 	ldrtcs	r1, [r8], #-1537	; 0xfffff9ff
    34e8:	02040200 	andeq	r0, r4, #0, 4
    34ec:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    34f0:	02002c02 	andeq	r2, r0, #512	; 0x200
    34f4:	00220204 	eoreq	r0, r2, r4, lsl #4
    34f8:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
    34fc:	02040200 	andeq	r0, r4, #0, 4
    3500:	20300330 	eorscs	r0, r0, r0, lsr r3
    3504:	03301e22 	teqeq	r0, #544	; 0x220
    3508:	3503204c 	strcc	r2, [r3, #-76]	; 0xffffffb4
    350c:	204f0320 	subcs	r0, pc, r0, lsr #6
    3510:	2f821b03 	svccs	0x00821b03
    3514:	21212121 			; <UNDEFINED> instruction: 0x21212121
    3518:	20760321 	rsbscs	r0, r6, r1, lsr #6
    351c:	1b2f1b2f 	blne	bca1e0 <_Min_Stack_Size+0xbc9de0>
    3520:	1b2f1b2f 	blne	bca1e4 <_Min_Stack_Size+0xbc9de4>
    3524:	032f1b2f 			; <UNDEFINED> instruction: 0x032f1b2f
    3528:	02022020 	andeq	r2, r2, #32
    352c:	00010100 	andeq	r0, r1, r0, lsl #2
    3530:	49600205 	stmdbmi	r0!, {r0, r2, r9}^
    3534:	e0030800 	and	r0, r3, r0, lsl #16
    3538:	2f130108 	svccs	0x00130108
    353c:	01000102 	tsteq	r0, r2, lsl #2
    3540:	02050001 	andeq	r0, r5, #1
    3544:	08004968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr}
    3548:	0108eb03 	tsteq	r8, r3, lsl #22
    354c:	01022113 	tsteq	r2, r3, lsl r1
    3550:	06010100 	streq	r0, [r1], -r0, lsl #2
    3554:	02000006 	andeq	r0, r0, #6
    3558:	00026000 	andeq	r6, r2, r0
    355c:	fb010200 	blx	43d66 <_Min_Stack_Size+0x43966>
    3560:	01000d0e 	tsteq	r0, lr, lsl #26
    3564:	00010101 	andeq	r0, r1, r1, lsl #2
    3568:	00010000 	andeq	r0, r1, r0
    356c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3570:	2f656d6f 	svccs	0x00656d6f
    3574:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    3578:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
    357c:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
    3580:	6170736b 	cmnvs	r0, fp, ror #6
    3584:	502f6563 	eorpl	r6, pc, r3, ror #10
    3588:	4b2e452e 	blmi	b94a48 <_Min_Stack_Size+0xb94648>
    358c:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
    3590:	616c502f 	cmnvs	ip, pc, lsr #32
    3594:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    3598:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    359c:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    35a0:	5f656275 	svcpl	0x00656275
    35a4:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    35a8:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    35ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    35b0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
    35b4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    35b8:	5f787834 	svcpl	0x00787834
    35bc:	5f4c4148 	svcpl	0x004c4148
    35c0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    35c4:	532f7265 			; <UNDEFINED> instruction: 0x532f7265
    35c8:	2e006372 	mcrcs	3, 0, r6, cr0, cr2, {3}
    35cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    35d0:	616c502f 	cmnvs	ip, pc, lsr #32
    35d4:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    35d8:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    35dc:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    35e0:	5f656275 	svcpl	0x00656275
    35e4:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    35e8:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    35ec:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    35f0:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    35f4:	2f534953 	svccs	0x00534953
    35f8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    35fc:	00656475 	rsbeq	r6, r5, r5, ror r4
    3600:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3604:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3608:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    360c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3610:	2f62696c 	svccs	0x0062696c
    3614:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3618:	00656e69 	rsbeq	r6, r5, r9, ror #28
    361c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3620:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3624:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3628:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    362c:	2f62696c 	svccs	0x0062696c
    3630:	00737973 	rsbseq	r7, r3, r3, ror r9
    3634:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3638:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
    363c:	6f667461 	svcvs	0x00667461
    3640:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    3644:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3648:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    364c:	5f57465f 	svcpl	0x0057465f
    3650:	442f3446 	strtmi	r3, [pc], #-1094	; 3658 <_Min_Stack_Size+0x3258>
    3654:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3658:	432f7372 			; <UNDEFINED> instruction: 0x432f7372
    365c:	5349534d 	movtpl	r5, #37709	; 0x934d
    3660:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3664:	2f656369 	svccs	0x00656369
    3668:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    366c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3670:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3674:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3678:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    367c:	2f2e2e00 	svccs	0x002e2e00
    3680:	502f2e2e 	eorpl	r2, pc, lr, lsr #28
    3684:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    3688:	2f6d726f 	svccs	0x006d726f
    368c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3690:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    3694:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    3698:	2f34465f 	svccs	0x0034465f
    369c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    36a0:	2f737265 	svccs	0x00737265
    36a4:	334d5453 	movtcc	r5, #54355	; 0xd453
    36a8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    36ac:	41485f78 	hvcmi	34296	; 0x85f8
    36b0:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
    36b4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    36b8:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    36bc:	74730000 	ldrbtvc	r0, [r3], #-0
    36c0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    36c4:	5f787834 	svcpl	0x00787834
    36c8:	5f6c6168 	svcpl	0x006c6168
    36cc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    36d0:	00010063 	andeq	r0, r1, r3, rrx
    36d4:	736d6300 	cmnvc	sp, #0, 6
    36d8:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    36dc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    36e0:	00000200 	andeq	r0, r0, r0, lsl #4
    36e4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    36e8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    36ec:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    36f0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    36f4:	00000300 	andeq	r0, r0, r0, lsl #6
    36f8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    36fc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3700:	00040068 	andeq	r0, r4, r8, rrx
    3704:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3708:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    370c:	78783932 	ldmdavc	r8!, {r1, r4, r5, r8, fp, ip, sp}^
    3710:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3714:	74730000 	ldrbtvc	r0, [r3], #-0
    3718:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    371c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    3720:	00050068 	andeq	r0, r5, r8, rrx
    3724:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3728:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    372c:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3730:	645f6c61 	ldrbvs	r6, [pc], #-3169	; 3738 <_Min_Stack_Size+0x3338>
    3734:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    3738:	00000600 	andeq	r0, r0, r0, lsl #12
    373c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3740:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3744:	61685f78 	smcvs	34296	; 0x85f8
    3748:	63725f6c 	cmnvs	r2, #108, 30	; 0x1b0
    374c:	78655f63 	stmdavc	r5!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3750:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3754:	74730000 	ldrbtvc	r0, [r3], #-0
    3758:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    375c:	5f787834 	svcpl	0x00787834
    3760:	5f6c6168 	svcpl	0x006c6168
    3764:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    3768:	00060068 	andeq	r0, r6, r8, rrx
    376c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3770:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    3774:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3778:	675f6c61 	ldrbvs	r6, [pc, -r1, ror #24]
    377c:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    3780:	00060068 	andeq	r0, r6, r8, rrx
    3784:	726f6300 	rsbvc	r6, pc, #0, 6
    3788:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    378c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    3790:	73000002 	movwvc	r0, #2
    3794:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    3798:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    379c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    37a0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    37a4:	00050068 	andeq	r0, r5, r8, rrx
    37a8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    37ac:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    37b0:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    37b4:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    37b8:	00000600 	andeq	r0, r0, r0, lsl #12
    37bc:	02050000 	andeq	r0, r5, #0
    37c0:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
    37c4:	0101df03 	tsteq	r1, r3, lsl #30
    37c8:	01000102 	tsteq	r0, r2, lsl #2
    37cc:	02050001 	andeq	r0, r5, #1
    37d0:	08004970 	stmdaeq	r0, {r4, r5, r6, r8, fp, lr}
    37d4:	0101f003 	tsteq	r1, r3	; <UNPREDICTABLE>
    37d8:	7a032601 	bvc	ccfe4 <_Min_Stack_Size+0xccbe4>
    37dc:	2526202e 	strcs	r2, [r6, #-46]!	; 0xffffffd2
    37e0:	01040200 	mrseq	r0, R12_usr
    37e4:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    37e8:	0b033b01 	bleq	d23f4 <_Min_Stack_Size+0xd1ff4>
    37ec:	314d3f3c 	cmpcc	sp, ip, lsr pc
    37f0:	6422231d 	strtvs	r2, [r2], #-797	; 0xfffffce3
    37f4:	354a1903 	strbcc	r1, [sl, #-2307]	; 0xfffff6fd
    37f8:	01040200 	mrseq	r0, R12_usr
    37fc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    3800:	12033b01 	andne	r3, r3, #1024	; 0x400
    3804:	03264d3c 			; <UNDEFINED> instruction: 0x03264d3c
    3808:	3f31207a 	svccc	0x0031207a
    380c:	09035622 	stmdbeq	r3, {r1, r5, r9, sl, ip, lr}
    3810:	0302044a 	movweq	r0, #9290	; 0x244a
    3814:	042001bf 	strteq	r0, [r0], #-447	; 0xfffffe41
    3818:	7ec10301 	cdpvc	3, 12, cr0, cr1, cr1, {0}
    381c:	9016033c 	andsls	r0, r6, ip, lsr r3
    3820:	032e2a03 			; <UNDEFINED> instruction: 0x032e2a03
    3824:	68312e39 	ldmdavs	r1!, {r0, r3, r4, r5, r9, sl, fp, sp}
    3828:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    382c:	36034a76 			; <UNDEFINED> instruction: 0x36034a76
    3830:	223f1d2e 	eorscs	r1, pc, #2944	; 0xb80
    3834:	3c0e0356 	stccc	3, cr0, [lr], {86}	; 0x56
    3838:	7ed90321 	cdpvc	3, 13, cr0, cr9, cr1, {1}
    383c:	03263f2e 			; <UNDEFINED> instruction: 0x03263f2e
    3840:	3f31207a 	svccc	0x0031207a
    3844:	1b035622 	blne	d90d4 <_Min_Stack_Size+0xd8cd4>
    3848:	1d23344a 	cfstrsne	mvf3, [r3, #-296]!	; 0xfffffed8
    384c:	223e4daf 	eorscs	r4, lr, #11200	; 0x2bc0
    3850:	3c090356 	stccc	3, cr0, [r9], {86}	; 0x56
    3854:	1d314d3e 	ldcne	13, cr4, [r1, #-248]!	; 0xffffff08
    3858:	033e2c25 	teqeq	lr, #9472	; 0x2500
    385c:	03587edf 	cmpeq	r8, #3568	; 0xdf0
    3860:	03200283 			; <UNDEFINED> instruction: 0x03200283
    3864:	4d2e7e9a 	stcmi	14, cr7, [lr, #-616]!	; 0xfffffd98
    3868:	01040200 	mrseq	r0, R12_usr
    386c:	03064a06 	movweq	r4, #27142	; 0x6a06
    3870:	96033c4d 	strls	r3, [r3], -sp, asr #24
    3874:	ed032002 	stc	0, cr2, [r3, #-8]
    3878:	03262e7e 			; <UNDEFINED> instruction: 0x03262e7e
    387c:	3f23207a 	svccc	0x0023207a
    3880:	91035622 	tstls	r3, r2, lsr #12
    3884:	1d314a7f 	vldmdbne	r1!, {s8-s134}
    3888:	03562223 	cmpeq	r6, #805306370	; 0x30000002
    388c:	004c4a5f 	subeq	r4, ip, pc, asr sl
    3890:	06010402 	streq	r0, [r1], -r2, lsl #8
    3894:	3d030658 	stccc	6, cr0, [r3, #-352]	; 0xfffffea0
    3898:	03020458 	movweq	r0, #9304	; 0x2458
    389c:	042001d7 	strteq	r0, [r0], #-471	; 0xfffffe29
    38a0:	7ea90301 	cdpvc	3, 10, cr0, cr9, cr1, {0}
    38a4:	03020420 	movweq	r0, #9248	; 0x2420
    38a8:	042001d7 	strteq	r0, [r0], #-471	; 0xfffffe29
    38ac:	7ea90301 	cdpvc	3, 10, cr0, cr9, cr1, {0}
    38b0:	822e032e 	eorhi	r0, lr, #-1207959552	; 0xb8000000
    38b4:	264a6f03 	strbcs	r6, [sl], -r3, lsl #30
    38b8:	23207a03 			; <UNDEFINED> instruction: 0x23207a03
    38bc:	0356223f 	cmpeq	r6, #-268435453	; 0xf0000003
    38c0:	1d580183 	ldfnee	f0, [r8, #-524]	; 0xfffffdf4
    38c4:	0456223f 	ldrbeq	r2, [r6], #-575	; 0xfffffdc1
    38c8:	4a310302 	bmi	c444d8 <_Min_Stack_Size+0xc440d8>
    38cc:	58030104 	stmdapl	r3, {r2, r8}
    38d0:	03020466 	movweq	r0, #9318	; 0x2466
    38d4:	01042e28 	tsteq	r4, r8, lsr #28
    38d8:	044a5803 	strbeq	r5, [sl], #-2051	; 0xfffff7fd
    38dc:	2e280302 	cdpcs	3, 2, cr0, cr8, cr2, {0}
    38e0:	58030104 	stmdapl	r3, {r2, r8}
    38e4:	0334082e 	teqeq	r4, #3014656	; 0x2e0000
    38e8:	0326207a 			; <UNDEFINED> instruction: 0x0326207a
    38ec:	2626207a 			; <UNDEFINED> instruction: 0x2626207a
    38f0:	64e63f1d 	strbtvs	r3, [r6], #3869	; 0xf1d
    38f4:	314a4703 	cmpcc	sl, r3, lsl #14
    38f8:	4c2c251d 	cfstr32mi	mvfx2, [ip], #-116	; 0xffffff8c
    38fc:	01000802 	tsteq	r0, r2, lsl #16
    3900:	02050001 	andeq	r0, r5, #1
    3904:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    3908:	0105f803 	tsteq	r5, r3, lsl #16	; <UNPREDICTABLE>
    390c:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    3910:	1d033420 	cfstrsne	mvf3, [r3, #-128]	; 0xffffff80
    3914:	78032820 	stmdavc	r3, {r5, fp, sp}
    3918:	7a037a20 	bvc	e21a0 <_Min_Stack_Size+0xe1da0>
    391c:	1f303f20 	svcne	0x00303f20
    3920:	1b1e1f24 	blne	78b5b8 <_Min_Stack_Size+0x78b1b8>
    3924:	31242f31 			; <UNDEFINED> instruction: 0x31242f31
    3928:	2e55037c 	mrccs	3, 2, r0, cr5, cr12, {3}
    392c:	20780344 	rsbscs	r0, r8, r4, asr #6
    3930:	207a0350 	rsbscs	r0, sl, r0, asr r3
    3934:	241f303f 	ldrcs	r3, [pc], #-63	; 393c <_Min_Stack_Size+0x353c>
    3938:	311b1e1f 	tstcc	fp, pc, lsl lr
    393c:	0331242f 	teqeq	r1, #788529152	; 0x2f000000
    3940:	09027420 	stmdbeq	r2, {r5, sl, ip, sp, lr}
    3944:	00010100 	andeq	r0, r1, r0, lsl #2
    3948:	4d280205 	sfmmi	f0, 4, [r8, #-20]!	; 0xffffffec
    394c:	ba030800 	blt	c5954 <_Min_Stack_Size+0xc5554>
    3950:	02130106 	andseq	r0, r3, #-2147483647	; 0x80000001
    3954:	01010006 	tsteq	r1, r6
    3958:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    395c:	0308004d 	movweq	r0, #32845	; 0x804d
    3960:	130106c3 	movwne	r0, #5827	; 0x16c3
    3964:	01000602 	tsteq	r0, r2, lsl #12
    3968:	02050001 	andeq	r0, r5, #1
    396c:	08004d40 	stmdaeq	r0, {r6, r8, sl, fp, lr}
    3970:	0106e603 	tsteq	r6, r3, lsl #12
    3974:	82100317 	andshi	r0, r0, #1543503872	; 0x5c000000
    3978:	03206b03 			; <UNDEFINED> instruction: 0x03206b03
    397c:	041f2016 	ldreq	r2, [pc], #-22	; 3984 <_Min_Stack_Size+0x3584>
    3980:	7d970302 	ldcvc	3, cr0, [r7, #8]
    3984:	0301042e 	movweq	r0, #5166	; 0x142e
    3988:	1d2e02ed 	sfmne	f0, 4, [lr, #-948]!	; 0xfffffc4c
    398c:	96030204 	strls	r0, [r3], -r4, lsl #4
    3990:	0104207d 	tsteq	r4, sp, ror r0
    3994:	2e02ed03 	cdpcs	13, 0, cr14, cr2, cr3, {0}
    3998:	03351b6b 	teqeq	r5, #109568	; 0x1ac00
    399c:	044f2079 	strbeq	r2, [pc], #-121	; 39a4 <_Min_Stack_Size+0x35a4>
    39a0:	7d8e0302 	stcvc	3, cr0, [lr, #8]
    39a4:	03010458 	movweq	r0, #5208	; 0x1458
    39a8:	042e02f4 	strteq	r0, [lr], #-756	; 0xfffffd0c
    39ac:	7d8c0302 	stcvc	3, cr0, [ip, #8]
    39b0:	03010420 	movweq	r0, #5152	; 0x1420
    39b4:	032e02f4 			; <UNDEFINED> instruction: 0x032e02f4
    39b8:	7603740c 	strvc	r7, [r3], -ip, lsl #8
    39bc:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    39c0:	33205d03 			; <UNDEFINED> instruction: 0x33205d03
    39c4:	01000802 	tsteq	r0, r2, lsl #16
    39c8:	02050001 	andeq	r0, r5, #1
    39cc:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    39d0:	0104b203 	tsteq	r4, r3, lsl #4
    39d4:	03010c03 	movweq	r0, #7171	; 0x1c03
    39d8:	032e5874 			; <UNDEFINED> instruction: 0x032e5874
    39dc:	32232e0c 	eorcc	r2, r3, #12, 28	; 0xc0
    39e0:	783f415a 	ldmdavc	pc!, {r1, r3, r4, r6, r8, lr}	; <UNPREDICTABLE>
    39e4:	4a090333 	bmi	2446b8 <_Min_Stack_Size+0x2442b8>
    39e8:	0d032a32 	vstreq	s4, [r3, #-200]	; 0xffffff38
    39ec:	30683420 	rsbcc	r3, r8, r0, lsr #8
    39f0:	032a262c 			; <UNDEFINED> instruction: 0x032a262c
    39f4:	0a03200a 	beq	cba24 <_Min_Stack_Size+0xcb624>
    39f8:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    39fc:	4a0b0356 	bmi	2c475c <_Min_Stack_Size+0x2c435c>
    3a00:	3f5f3269 	svccc	0x005f3269
    3a04:	04863178 	streq	r3, [r6], #376	; 0x178
    3a08:	7ed30302 	cdpvc	3, 13, cr0, cr3, cr2, {0}
    3a0c:	0301044a 	movweq	r0, #5194	; 0x144a
    3a10:	042001ad 	strteq	r0, [r0], #-429	; 0xfffffe53
    3a14:	7ed30302 	cdpvc	3, 13, cr0, cr3, cr2, {0}
    3a18:	03010420 	movweq	r0, #5152	; 0x1420
    3a1c:	772e01ad 	strvc	r0, [lr, -sp, lsr #3]!
    3a20:	21304d1d 	teqcs	r0, sp, lsl sp
    3a24:	2e7fb703 	cdpcs	7, 7, cr11, cr15, cr3, {0}
    3a28:	660c0356 			; <UNDEFINED> instruction: 0x660c0356
    3a2c:	660c0356 			; <UNDEFINED> instruction: 0x660c0356
    3a30:	66570356 			; <UNDEFINED> instruction: 0x66570356
    3a34:	033c1903 	teqeq	ip, #49152	; 0xc000
    3a38:	0e023c5d 	mcreq	12, 0, r3, cr2, cr13, {2}
    3a3c:	00010100 	andeq	r0, r1, r0, lsl #2
    3a40:	4f2c0205 	svcmi	0x002c0205
    3a44:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
    3a48:	21130107 	tstcs	r3, r7, lsl #2
    3a4c:	01000502 	tsteq	r0, r2, lsl #10
    3a50:	02050001 	andeq	r0, r5, #1
    3a54:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    3a58:	0107a903 	tsteq	r7, r3, lsl #18
    3a5c:	03020414 	movweq	r0, #9236	; 0x2414
    3a60:	04207ce7 	strteq	r7, [r0], #-3303	; 0xfffff319
    3a64:	03990301 	orrseq	r0, r9, #67108864	; 0x4000000
    3a68:	0302042e 	movweq	r0, #9262	; 0x242e
    3a6c:	04207ce7 	strteq	r7, [r0], #-3303	; 0xfffff319
    3a70:	03990301 	orrseq	r0, r9, #67108864	; 0x4000000
    3a74:	5874032e 	ldmdapl	r4!, {r1, r2, r3, r5, r8, r9}^
    3a78:	3d200c03 	stccc	12, cr0, [r0, #-12]!
    3a7c:	01000902 	tsteq	r0, r2, lsl #18
    3a80:	02050001 	andeq	r0, r5, #1
    3a84:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    3a88:	0107b503 	tsteq	r7, r3, lsl #10
    3a8c:	03020414 	movweq	r0, #9236	; 0x2414
    3a90:	04207cdb 	strteq	r7, [r0], #-3291	; 0xfffff325
    3a94:	03a50301 			; <UNDEFINED> instruction: 0x03a50301
    3a98:	0302042e 	movweq	r0, #9262	; 0x242e
    3a9c:	04207cdb 	strteq	r7, [r0], #-3291	; 0xfffff325
    3aa0:	03a50301 			; <UNDEFINED> instruction: 0x03a50301
    3aa4:	5868032e 	stmdapl	r8!, {r1, r2, r3, r5, r8, r9}^
    3aa8:	3d201803 	stccc	8, cr1, [r0, #-12]!
    3aac:	01000902 	tsteq	r0, r2, lsl #18
    3ab0:	02050001 	andeq	r0, r5, #1
    3ab4:	08004f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, lr}
    3ab8:	0107c203 	tsteq	r7, r3, lsl #4
    3abc:	231d2314 	tstcs	sp, #20, 6	; 0x50000000
    3ac0:	03222529 			; <UNDEFINED> instruction: 0x03222529
    3ac4:	09032e0c 	stmdbeq	r3, {r2, r3, r9, sl, fp, sp}
    3ac8:	03020458 	movweq	r0, #9304	; 0x2458
    3acc:	04207cb4 	strteq	r7, [r0], #-3252	; 0xfffff34c
    3ad0:	03cc0301 	biceq	r0, ip, #67108864	; 0x4000000
    3ad4:	033e693c 	teqeq	lr, #60, 18	; 0xf0000
    3ad8:	0a032e0c 	beq	cf310 <_Min_Stack_Size+0xcef10>
    3adc:	4b682658 	blmi	1a0d444 <_Min_Stack_Size+0x1a0d044>
    3ae0:	0302044b 	movweq	r0, #9291	; 0x244b
    3ae4:	04207c8f 	strteq	r7, [r0], #-3215	; 0xfffff371
    3ae8:	03f10301 	mvnseq	r0, #67108864	; 0x4000000
    3aec:	0204754a 	andeq	r7, r4, #310378496	; 0x12800000
    3af0:	207c8e03 	rsbscs	r8, ip, r3, lsl #28
    3af4:	f2030104 	vrhadd.s8	d0, d3, d4
    3af8:	04914a03 	ldreq	r4, [r1], #2563	; 0xa03
    3afc:	7c8d0302 	stcvc	3, cr0, [sp], {2}
    3b00:	03010420 	movweq	r0, #5152	; 0x1420
    3b04:	674a03f3 			; <UNDEFINED> instruction: 0x674a03f3
    3b08:	3e3c4503 	cdpcc	5, 3, cr4, cr12, cr3, {0}
    3b0c:	2e140332 	mrccs	3, 0, r0, cr4, cr2, {1}
    3b10:	0502323e 	streq	r3, [r2, #-574]	; 0xfffffdc2
    3b14:	00010100 	andeq	r0, r1, r0, lsl #2
    3b18:	506c0205 	rsbpl	r0, ip, r5, lsl #4
    3b1c:	91030800 	tstls	r3, r0, lsl #16
    3b20:	1d170108 	ldfnes	f0, [r7, #-32]	; 0xffffffe0
    3b24:	4d4d4d31 	stclmi	13, cr4, [sp, #-196]	; 0xffffff3c
    3b28:	033c7203 	teqeq	ip, #805306368	; 0x30000000
    3b2c:	1d23200e 	stcne	0, cr2, [r3, #-56]!	; 0xffffffc8
    3b30:	3d2d2123 	stfccs	f2, [sp, #-140]!	; 0xffffff74
    3b34:	01000602 	tsteq	r0, r2, lsl #12
    3b38:	02050001 	andeq	r0, r5, #1
    3b3c:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    3b40:	0108bc03 	tsteq	r8, r3, lsl #24
    3b44:	01000102 	tsteq	r0, r2, lsl #2
    3b48:	02050001 	andeq	r0, r5, #1
    3b4c:	080050b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, lr}
    3b50:	0108ab03 	tsteq	r8, r3, lsl #22
    3b54:	314d2201 	cmpcc	sp, r1, lsl #4
    3b58:	01000902 	tsteq	r0, r2, lsl #18
    3b5c:	00039601 	andeq	r9, r3, r1, lsl #12
    3b60:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
    3b64:	02000002 	andeq	r0, r0, #2
    3b68:	0d0efb01 	vstreq	d15, [lr, #-4]
    3b6c:	01010100 	mrseq	r0, (UNDEF: 17)
    3b70:	00000001 	andeq	r0, r0, r1
    3b74:	01000001 	tsteq	r0, r1
    3b78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ac4 <_Min_Stack_Size+0x36c4>
    3b7c:	72662f65 	rsbvc	r2, r6, #404	; 0x194
    3b80:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
    3b84:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
    3b88:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    3b8c:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    3b90:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
    3b94:	4b2e4b2e 	blmi	b96854 <_Min_Stack_Size+0xb96454>
    3b98:	502f412e 	eorpl	r4, pc, lr, lsr #2
    3b9c:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    3ba0:	2f6d726f 	svccs	0x006d726f
    3ba4:	334d5453 	movtcc	r5, #54355	; 0xd453
    3ba8:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    3bac:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    3bb0:	2f34465f 	svccs	0x0034465f
    3bb4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3bb8:	2f737265 	svccs	0x00737265
    3bbc:	334d5453 	movtcc	r5, #54355	; 0xd453
    3bc0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3bc4:	41485f78 	hvcmi	34296	; 0x85f8
    3bc8:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
    3bcc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3bd0:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3bd4:	2f2e2e00 	svccs	0x002e2e00
    3bd8:	502f2e2e 	eorpl	r2, pc, lr, lsr #28
    3bdc:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    3be0:	2f6d726f 	svccs	0x006d726f
    3be4:	334d5453 	movtcc	r5, #54355	; 0xd453
    3be8:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    3bec:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    3bf0:	2f34465f 	svccs	0x0034465f
    3bf4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3bf8:	2f737265 	svccs	0x00737265
    3bfc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3c00:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    3c04:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3c08:	752f0065 	strvc	r0, [pc, #-101]!	; 3bab <_Min_Stack_Size+0x37ab>
    3c0c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3c10:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3c14:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3c18:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3c1c:	616d2f62 	cmnvs	sp, r2, ror #30
    3c20:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3c24:	752f0065 	strvc	r0, [pc, #-101]!	; 3bc7 <_Min_Stack_Size+0x37c7>
    3c28:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3c2c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3c30:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3c34:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3c38:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3c3c:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    3c40:	2f2e2e2f 	svccs	0x002e2e2f
    3c44:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
    3c48:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    3c4c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3c50:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    3c54:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
    3c58:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
    3c5c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    3c60:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    3c64:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3c68:	442f5349 	strtmi	r5, [pc], #-841	; 3c70 <_Min_Stack_Size+0x3870>
    3c6c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3c70:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xfffff09b
    3c74:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3c78:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    3c7c:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    3c80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3c84:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    3c88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c8c:	616c502f 	cmnvs	ip, pc, lsr #32
    3c90:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    3c94:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    3c98:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    3c9c:	5f656275 	svcpl	0x00656275
    3ca0:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    3ca4:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    3ca8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3cac:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
    3cb0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3cb4:	5f787834 	svcpl	0x00787834
    3cb8:	5f4c4148 	svcpl	0x004c4148
    3cbc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3cc0:	492f7265 	stmdbmi	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3cc4:	0000636e 	andeq	r6, r0, lr, ror #6
    3cc8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3ccc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3cd0:	61685f78 	smcvs	34296	; 0x85f8
    3cd4:	77705f6c 	ldrbvc	r5, [r0, -ip, ror #30]!
    3cd8:	78655f72 	stmdavc	r5!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3cdc:	0100632e 	tsteq	r0, lr, lsr #6
    3ce0:	6d630000 	stclvs	0, cr0, [r3, #-0]
    3ce4:	5f736973 	svcpl	0x00736973
    3ce8:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    3cec:	00020068 	andeq	r0, r2, r8, rrx
    3cf0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    3cf4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3cf8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3cfc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3d00:	00030068 	andeq	r0, r3, r8, rrx
    3d04:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    3d08:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3d0c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3d10:	6f630000 	svcvs	0x00630000
    3d14:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    3d18:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    3d1c:	00000200 	andeq	r0, r0, r0, lsl #4
    3d20:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3d24:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    3d28:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
    3d2c:	00050068 	andeq	r0, r5, r8, rrx
    3d30:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3d34:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    3d38:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3d3c:	00000500 	andeq	r0, r0, r0, lsl #10
    3d40:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3d44:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3d48:	61685f78 	smcvs	34296	; 0x85f8
    3d4c:	65645f6c 	strbvs	r5, [r4, #-3948]!	; 0xfffff094
    3d50:	00682e66 	rsbeq	r2, r8, r6, ror #28
    3d54:	73000006 	movwvc	r0, #6
    3d58:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3d5c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3d60:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    3d64:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3d68:	00000000 	andeq	r0, r0, r0
    3d6c:	50d40205 	sbcspl	r0, r4, r5, lsl #4
    3d70:	a1030800 	tstge	r3, r0, lsl #16
    3d74:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    3d78:	2002f103 	andcs	pc, r2, r3, lsl #2
    3d7c:	92030104 	andls	r0, r3, #4, 2
    3d80:	31774a7d 	cmncc	r7, sp, ror sl
    3d84:	6422231d 	strtvs	r2, [r2], #-797	; 0xfffffce3
    3d88:	02242b43 	eoreq	r2, r4, #68608	; 0x10c00
    3d8c:	01010005 	tsteq	r1, r5
    3d90:	18020500 	stmdane	r2, {r8, sl}
    3d94:	03080051 	movweq	r0, #32849	; 0x8051
    3d98:	040101b9 	streq	r0, [r1], #-441	; 0xfffffe47
    3d9c:	02d90302 	sbcseq	r0, r9, #134217728	; 0x8000000
    3da0:	03010420 	movweq	r0, #5152	; 0x1420
    3da4:	774a7daa 	strbvc	r7, [sl, -sl, lsr #27]
    3da8:	22231d31 	eorcs	r1, r3, #3136	; 0xc40
    3dac:	02245c64 	eoreq	r5, r4, #100, 24	; 0x6400
    3db0:	01010005 	tsteq	r1, r5
    3db4:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    3db8:	03080051 	movweq	r0, #32849	; 0x8051
    3dbc:	040101d1 	streq	r0, [r1], #-465	; 0xfffffe2f
    3dc0:	02c10302 	sbceq	r0, r1, #134217728	; 0x8000000
    3dc4:	03010401 	movweq	r0, #5121	; 0x1401
    3dc8:	024a7dc0 	subeq	r7, sl, #192, 26	; 0x3000
    3dcc:	0101000a 	tsteq	r1, sl
    3dd0:	78020500 	stmdavc	r2, {r8, sl}
    3dd4:	03080051 	movweq	r0, #32849	; 0x8051
    3dd8:	040101da 	streq	r0, [r1], #-474	; 0xfffffe26
    3ddc:	02b80302 	adcseq	r0, r8, #134217728	; 0x8000000
    3de0:	03010401 	movweq	r0, #5121	; 0x1401
    3de4:	024a7dc9 	subeq	r7, sl, #12864	; 0x3240
    3de8:	0101000a 	tsteq	r1, sl
    3dec:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    3df0:	03080051 	movweq	r0, #32849	; 0x8051
    3df4:	130101e7 	movwne	r0, #4583	; 0x11e7
    3df8:	0006022f 	andeq	r0, r6, pc, lsr #4
    3dfc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3e00:	0051a402 	subseq	sl, r1, r2, lsl #8
    3e04:	02b40308 	adcseq	r0, r4, #8, 6	; 0x20000000
    3e08:	5bbd3401 	blpl	fef50e14 <_estack+0xdef20e14>
    3e0c:	56223e3f 			; <UNDEFINED> instruction: 0x56223e3f
    3e10:	3f4a0903 	svccc	0x004a0903
    3e14:	20780325 	rsbscs	r0, r8, r5, lsr #6
    3e18:	23231d85 			; <UNDEFINED> instruction: 0x23231d85
    3e1c:	0356223e 	cmpeq	r6, #-536870909	; 0xe0000003
    3e20:	1f2f3c09 	svcne	0x002f3c09
    3e24:	03642221 	cmneq	r4, #268435458	; 0x10000002
    3e28:	5c033c0d 	stcpl	12, cr3, [r3], {13}
    3e2c:	2025032e 	eorcs	r0, r5, lr, lsr #6
    3e30:	0902242a 	stmdbeq	r2, {r1, r3, r5, sl, sp}
    3e34:	00010100 	andeq	r0, r1, r0, lsl #2
    3e38:	525c0205 	subspl	r0, ip, #1342177280	; 0x50000000
    3e3c:	bf030800 	svclt	0x00030800
    3e40:	04310103 	ldrteq	r0, [r1], #-259	; 0xfffffefd
    3e44:	00d00302 	sbcseq	r0, r0, r2, lsl #6
    3e48:	030104ba 	movweq	r0, #5306	; 0x14ba
    3e4c:	934a7fb3 	movtls	r7, #44979	; 0xafb3
    3e50:	22221e30 	eorcs	r1, r2, #48, 28	; 0x300
    3e54:	03020464 	movweq	r0, #9316	; 0x2464
    3e58:	043c00c8 	ldrteq	r0, [ip], #-200	; 0xffffff38
    3e5c:	4a410301 	bmi	1044a68 <_Min_Stack_Size+0x1044668>
    3e60:	221e3093 	andscs	r3, lr, #147	; 0x93
    3e64:	21436422 	cmpcs	r3, r2, lsr #8
    3e68:	032e6e03 			; <UNDEFINED> instruction: 0x032e6e03
    3e6c:	06022012 			; <UNDEFINED> instruction: 0x06022012
    3e70:	00010100 	andeq	r0, r1, r0, lsl #2
    3e74:	52f80205 	rscspl	r0, r8, #1342177280	; 0x50000000
    3e78:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
    3e7c:	04310103 	ldrteq	r0, [r1], #-259	; 0xfffffefd
    3e80:	ba210302 	blt	844a90 <_Min_Stack_Size+0x844690>
    3e84:	62030104 	andvs	r0, r3, #4, 2
    3e88:	231b794a 	tstcs	fp, #1212416	; 0x128000
    3e8c:	0464223e 	strbteq	r2, [r4], #-574	; 0xfffffdc2
    3e90:	4a190302 	bmi	644aa0 <_Min_Stack_Size+0x6446a0>
    3e94:	70030104 	andvc	r0, r3, r4, lsl #2
    3e98:	231b794a 	tstcs	fp, #1212416	; 0x128000
    3e9c:	0364223e 	cmneq	r4, #-536870909	; 0xe0000003
    3ea0:	6d034a09 	vstrvs	s8, [r3, #-36]	; 0xffffffdc
    3ea4:	2013032e 	andscs	r0, r3, lr, lsr #6
    3ea8:	01000702 	tsteq	r0, r2, lsl #14
    3eac:	02050001 	andeq	r0, r5, #1
    3eb0:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
    3eb4:	0104ba03 	tsteq	r4, r3, lsl #20
    3eb8:	232e0903 			; <UNDEFINED> instruction: 0x232e0903
    3ebc:	034daf1d 	movteq	sl, #57117	; 0xdf1d
    3ec0:	12034a71 	andne	r4, r3, #462848	; 0x71000
    3ec4:	64223f2e 	strtvs	r3, [r2], #-3886	; 0xfffff0d2
    3ec8:	03740903 	cmneq	r4, #49152	; 0xc000
    3ecc:	7703200b 	strvc	r2, [r3, -fp]
    3ed0:	23234d20 			; <UNDEFINED> instruction: 0x23234d20
    3ed4:	043f1d23 	ldrteq	r1, [pc], #-3363	; 3edc <_Min_Stack_Size+0x3adc>
    3ed8:	7ea50302 	cdpvc	3, 10, cr0, cr5, cr2, {0}
    3edc:	03010420 	movweq	r0, #5152	; 0x1420
    3ee0:	302001e6 	eorcc	r0, r0, r6, ror #3
    3ee4:	5f033f1e 	svcpl	0x00033f1e
    3ee8:	2021032e 	eorcs	r0, r1, lr, lsr #6
    3eec:	8c030204 	sfmhi	f0, 4, [r3], {4}
    3ef0:	08022e7e 	stmdaeq	r2, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    3ef4:	34010100 	strcc	r0, [r1], #-256	; 0xffffff00
    3ef8:	02000010 	andeq	r0, r0, #16
    3efc:	00023600 	andeq	r3, r2, r0, lsl #12
    3f00:	fb010200 	blx	4470a <_Min_Stack_Size+0x4430a>
    3f04:	01000d0e 	tsteq	r0, lr, lsl #26
    3f08:	00010101 	andeq	r0, r1, r1, lsl #2
    3f0c:	00010000 	andeq	r0, r1, r0
    3f10:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3f14:	2f656d6f 	svccs	0x00656d6f
    3f18:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    3f1c:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
    3f20:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
    3f24:	6170736b 	cmnvs	r0, fp, ror #6
    3f28:	502f6563 	eorpl	r6, pc, r3, ror #10
    3f2c:	4b2e452e 	blmi	b953ec <_Min_Stack_Size+0xb94fec>
    3f30:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
    3f34:	616c502f 	cmnvs	ip, pc, lsr #32
    3f38:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    3f3c:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    3f40:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    3f44:	5f656275 	svcpl	0x00656275
    3f48:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    3f4c:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    3f50:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3f54:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xfffff08d
    3f58:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3f5c:	5f787834 	svcpl	0x00787834
    3f60:	5f4c4148 	svcpl	0x004c4148
    3f64:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3f68:	532f7265 			; <UNDEFINED> instruction: 0x532f7265
    3f6c:	2f006372 	svccs	0x00006372
    3f70:	2f727375 	svccs	0x00727375
    3f74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3f78:	2f656475 	svccs	0x00656475
    3f7c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3f80:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 3de4 <_Min_Stack_Size+0x39e4>
    3f84:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3f88:	2f00656e 	svccs	0x0000656e
    3f8c:	2f727375 	svccs	0x00727375
    3f90:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3f94:	2f656475 	svccs	0x00656475
    3f98:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3f9c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3fa0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    3fa4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3fa8:	616c502f 	cmnvs	ip, pc, lsr #32
    3fac:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    3fb0:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    3fb4:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    3fb8:	5f656275 	svcpl	0x00656275
    3fbc:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    3fc0:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    3fc4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3fc8:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    3fcc:	2f534953 	svccs	0x00534953
    3fd0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3fd4:	532f6563 			; <UNDEFINED> instruction: 0x532f6563
    3fd8:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    3fdc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3fe0:	2f787834 	svccs	0x00787834
    3fe4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    3fe8:	00656475 	rsbeq	r6, r5, r5, ror r4
    3fec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3ff0:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
    3ff4:	6f667461 	svcvs	0x00667461
    3ff8:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    3ffc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4000:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    4004:	5f57465f 	svcpl	0x0057465f
    4008:	442f3446 	strtmi	r3, [pc], #-1094	; 4010 <_Min_Stack_Size+0x3c10>
    400c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4010:	532f7372 			; <UNDEFINED> instruction: 0x532f7372
    4014:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4018:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    401c:	4c41485f 	mcrrmi	8, 5, r4, r1, cr15
    4020:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    4024:	2f726576 	svccs	0x00726576
    4028:	00636e49 	rsbeq	r6, r3, r9, asr #28
    402c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4030:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
    4034:	6f667461 	svcvs	0x00667461
    4038:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    403c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4040:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    4044:	5f57465f 	svcpl	0x0057465f
    4048:	442f3446 	strtmi	r3, [pc], #-1094	; 4050 <_Min_Stack_Size+0x3c50>
    404c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4050:	432f7372 			; <UNDEFINED> instruction: 0x432f7372
    4054:	5349534d 	movtpl	r5, #37709	; 0x934d
    4058:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    405c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4060:	74730000 	ldrbtvc	r0, [r3], #-0
    4064:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4068:	5f787834 	svcpl	0x00787834
    406c:	5f6c6168 	svcpl	0x006c6168
    4070:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    4074:	00010063 	andeq	r0, r1, r3, rrx
    4078:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    407c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    4080:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4084:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    4088:	00020068 	andeq	r0, r2, r8, rrx
    408c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    4090:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4094:	0300682e 	movweq	r6, #2094	; 0x82e
    4098:	74730000 	ldrbtvc	r0, [r3], #-0
    409c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    40a0:	78393234 	ldmdavc	r9!, {r2, r4, r5, r9, ip, sp}
    40a4:	00682e78 	rsbeq	r2, r8, r8, ror lr
    40a8:	73000004 	movwvc	r0, #4
    40ac:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    40b0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    40b4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    40b8:	74730000 	ldrbtvc	r0, [r3], #-0
    40bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    40c0:	5f787834 	svcpl	0x00787834
    40c4:	5f6c6168 	svcpl	0x006c6168
    40c8:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    40cc:	00050068 	andeq	r0, r5, r8, rrx
    40d0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    40d4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    40d8:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    40dc:	645f6c61 	ldrbvs	r6, [pc], #-3169	; 40e4 <_Min_Stack_Size+0x3ce4>
    40e0:	682e616d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}
    40e4:	00000500 	andeq	r0, r0, r0, lsl #10
    40e8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    40ec:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    40f0:	61685f78 	smcvs	34296	; 0x85f8
    40f4:	70735f6c 	rsbsvc	r5, r3, ip, ror #30
    40f8:	00682e69 	rsbeq	r2, r8, r9, ror #28
    40fc:	63000005 	movwvs	r0, #5
    4100:	5f65726f 	svcpl	0x0065726f
    4104:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    4108:	00060068 	andeq	r0, r6, r8, rrx
    410c:	73797300 	cmnvc	r9, #0, 6
    4110:	5f6d6574 	svcpl	0x006d6574
    4114:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4118:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    411c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    4120:	73000004 	movwvc	r0, #4
    4124:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4128:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    412c:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    4130:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4134:	00000000 	andeq	r0, r0, r0
    4138:	542c0205 	strtpl	r0, [ip], #-517	; 0xfffffdfb
    413c:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    4140:	01020102 	tsteq	r2, r2, lsl #2
    4144:	00010100 	andeq	r0, r1, r0, lsl #2
    4148:	54300205 	ldrtpl	r0, [r0], #-517	; 0xfffffdfb
    414c:	82030800 	andhi	r0, r3, #0, 16
    4150:	2c140102 	ldfcss	f0, [r4], {2}
    4154:	032e1f03 			; <UNDEFINED> instruction: 0x032e1f03
    4158:	1f032e61 	svcne	0x00032e61
    415c:	080c032e 	stmdaeq	ip, {r1, r2, r3, r5, r8, r9}
    4160:	7803332e 	stmdavc	r3, {r1, r2, r3, r5, r8, r9, ip, sp}
    4164:	33255b90 			; <UNDEFINED> instruction: 0x33255b90
    4168:	2e0a0353 	mcrcs	3, 0, r0, cr10, cr3, {2}
    416c:	2e760329 	cdpcs	3, 7, cr0, cr6, cr9, {1}
    4170:	293c0a03 	ldmdbcs	ip!, {r0, r1, r9, fp}
    4174:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
    4178:	34273c79 	strtcc	r3, [r7], #-3193	; 0xfffff387
    417c:	22401d23 	subcs	r1, r0, #2240	; 0x8c0
    4180:	03312f1d 	teqeq	r1, #29, 30	; 0x74
    4184:	03313c59 	teqeq	r1, #22784	; 0x5900
    4188:	02023c5f 	andeq	r3, r2, #24320	; 0x5f00
    418c:	00010100 	andeq	r0, r1, r0, lsl #2
    4190:	54e40205 	strbtpl	r0, [r4], #517	; 0x205
    4194:	85030800 	strhi	r0, [r3, #-2048]	; 0xfffff800
    4198:	01020103 	tsteq	r2, r3, lsl #2
    419c:	00010100 	andeq	r0, r1, r0, lsl #2
    41a0:	54e80205 	strbtpl	r0, [r8], #517	; 0x205
    41a4:	d4030800 	strle	r0, [r3], #-2048	; 0xfffff800
    41a8:	03140102 	tsteq	r4, #-2147483648	; 0x80000000
    41ac:	031d200b 	tsteq	sp, #11
    41b0:	0a032076 	beq	cc390 <_Min_Stack_Size+0xcbf90>
    41b4:	305b3120 	subscc	r3, fp, r0, lsr #2
    41b8:	03332b32 	teqeq	r3, #51200	; 0xc800
    41bc:	0202206c 	andeq	r2, r2, #108	; 0x6c
    41c0:	00010100 	andeq	r0, r1, r0, lsl #2
    41c4:	55140205 	ldrpl	r0, [r4, #-517]	; 0xfffffdfb
    41c8:	bc030800 	stclt	8, cr0, [r3], {-0}
    41cc:	03440103 	movteq	r0, #16643	; 0x4103
    41d0:	03283c78 			; <UNDEFINED> instruction: 0x03283c78
    41d4:	002e0196 	mlaeq	lr, r6, r1, r0
    41d8:	03020402 	movweq	r0, #9218	; 0x2402
    41dc:	004a7eea 	subeq	r7, sl, sl, ror #29
    41e0:	5b020402 	blpl	851f0 <_Min_Stack_Size+0x84df0>
    41e4:	02040200 	andeq	r0, r4, #0, 4
    41e8:	8b035a3e 	blhi	daae8 <_Min_Stack_Size+0xda6e8>
    41ec:	1e222001 	cdpne	0, 2, cr2, cr2, cr1, {0}
    41f0:	f5033030 			; <UNDEFINED> instruction: 0xf5033030
    41f4:	02003c7e 	andeq	r3, r0, #32256	; 0x7e00
    41f8:	2e060104 	adfcss	f0, f6, f4
    41fc:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    4200:	1f207403 	svcne	0x00207403
    4204:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    4208:	10032e72 	andne	r2, r3, r2, ror lr
    420c:	2070032e 	rsbscs	r0, r0, lr, lsr #6
    4210:	1e25232f 	cdpne	3, 2, cr2, cr5, cr15, {1}
    4214:	25212221 	strcs	r2, [r1, #-545]!	; 0xfffffddf
    4218:	032e7303 			; <UNDEFINED> instruction: 0x032e7303
    421c:	5f4f200d 	svcpl	0x004f200d
    4220:	1e3e4e3f 	mrcne	14, 1, r4, cr14, cr15, {1}
    4224:	002e2003 	eoreq	r2, lr, r3
    4228:	06010402 	streq	r0, [r1], -r2, lsl #8
    422c:	3f96063c 	svccc	0x0096063c
    4230:	033c0903 	teqeq	ip, #49152	; 0xc000
    4234:	c6036674 			; <UNDEFINED> instruction: 0xc6036674
    4238:	df03740f 	svcle	0x0003740f
    423c:	6a309070 	bvs	c28404 <_Min_Stack_Size+0xc28004>
    4240:	7efb035e 	mrcvc	3, 7, r0, cr11, cr14, {2}
    4244:	00d40320 	sbcseq	r0, r4, r0, lsr #6
    4248:	3e3e4d4a 	cdpcc	13, 3, cr4, cr14, cr10, {2}
    424c:	93587903 	cmpls	r8, #49152	; 0xc000
    4250:	79033e3e 	stmdbvc	r3, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
    4254:	033e5d58 	teqeq	lr, #88, 26	; 0x1600
    4258:	40660fbf 	strhtmi	r0, [r6], #-255	; 0xffffff01
    425c:	301e2289 	andscc	r2, lr, r9, lsl #5
    4260:	4c35222c 	lfmmi	f2, 4, [r5], #-176	; 0xffffff50
    4264:	70b90393 	umlalsvc	r0, r9, r3, r3
    4268:	2e64033c 	mcrcs	3, 3, r0, cr4, cr12, {1}
    426c:	665e033e 			; <UNDEFINED> instruction: 0x665e033e
    4270:	01040200 	mrseq	r0, R12_usr
    4274:	7b062e06 	blvc	18fa94 <_Min_Stack_Size+0x18f694>
    4278:	3c09035b 	stccc	3, cr0, [r9], {91}	; 0x5b
    427c:	af667403 	svcge	0x00667403
    4280:	79033e3e 	stmdbvc	r3, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
    4284:	3e3ea14a 	rndccem	f2, #2.0
    4288:	5d4a7903 	stclpl	9, cr7, [sl, #-12]
    428c:	5864033e 	stmdapl	r4!, {r1, r2, r3, r4, r5, r8, r9}^
    4290:	3e9e1003 	cdpcc	0, 9, cr1, cr14, cr3, {0}
    4294:	580fe603 	stmdapl	pc, {r0, r1, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    4298:	1e22974e 	cdpne	7, 2, cr9, cr2, cr14, {2}
    429c:	27222c30 			; <UNDEFINED> instruction: 0x27222c30
    42a0:	1903934c 	stmdbne	r3, {r2, r3, r6, r8, r9, ip, pc}
    42a4:	70a8033c 	adcvc	r0, r8, ip, lsr r3
    42a8:	0fd80320 	svceq	0x00d80320
    42ac:	70a80320 	adcvc	r0, r8, r0, lsr #6
    42b0:	0c03212e 	stfeqs	f2, [r3], {46}	; 0x2e
    42b4:	0fa60320 	svceq	0x00a60320
    42b8:	77558558 			; <UNDEFINED> instruction: 0x77558558
    42bc:	01000502 	tsteq	r0, r2, lsl #10
    42c0:	02050001 	andeq	r0, r5, #1
    42c4:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
    42c8:	0106aa03 	tsteq	r6, r3, lsl #20
    42cc:	033c0e03 	teqeq	ip, #3, 28	; 0x30
    42d0:	03232e72 			; <UNDEFINED> instruction: 0x03232e72
    42d4:	7503200b 	strvc	r2, [r3, #-11]
    42d8:	0e032b20 	vmlaeq.f64	d2, d3, d16
    42dc:	01c60320 	biceq	r0, r6, r0, lsr #6
    42e0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    42e4:	7eba0302 	cdpvc	3, 11, cr0, cr10, cr2, {0}
    42e8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    42ec:	02005b02 	andeq	r5, r0, #2048	; 0x800
    42f0:	00300204 	eorseq	r0, r0, r4, lsl #4
    42f4:	2f020402 	svccs	0x00020402
    42f8:	02040200 	andeq	r0, r4, #0, 4
    42fc:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    4300:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    4304:	001b0204 	andseq	r0, fp, r4, lsl #4
    4308:	25020402 	strcs	r0, [r2, #-1026]	; 0xfffffbfe
    430c:	01040200 	mrseq	r0, R12_usr
    4310:	3f062006 	svccc	0x00062006
    4314:	2001b803 	andcs	fp, r1, r3, lsl #16
    4318:	2f1e2121 	svccs	0x001e2121
    431c:	7ec30330 	mcrvc	3, 6, r0, cr3, cr0, {1}
    4320:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    4324:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4328:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
    432c:	002e0601 	eoreq	r0, lr, r1, lsl #12
    4330:	3c020402 	cfstrscc	mvf0, [r2], {2}
    4334:	03354306 	teqeq	r5, #402653184	; 0x18000000
    4338:	03222e79 			; <UNDEFINED> instruction: 0x03222e79
    433c:	75034a12 	strvc	r4, [r3, #-2578]	; 0xfffff5ee
    4340:	0e032b20 	vmlaeq.f64	d2, d3, d16
    4344:	2e720320 	cdpcs	3, 7, cr0, cr2, cr0, {1}
    4348:	31321e24 	teqcc	r2, r4, lsr #28
    434c:	0b031b21 	bleq	cafd8 <_Min_Stack_Size+0xcabd8>
    4350:	3f351e2e 	svccc	0x00351e2e
    4354:	4a2f034e 	bmi	bc5094 <_Min_Stack_Size+0xbc4c94>
    4358:	01040200 	mrseq	r0, R12_usr
    435c:	03063c06 	movweq	r3, #27654	; 0x6c06
    4360:	6703581f 	smladvs	r3, pc, r8, r5	; <UNPREDICTABLE>
    4364:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    4368:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    436c:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    4370:	003c0601 	eorseq	r0, ip, r1, lsl #12
    4374:	4a020402 	bmi	85384 <_Min_Stack_Size+0x84f84>
    4378:	502f4c06 	eorpl	r4, pc, r6, lsl #24
    437c:	274a7903 	strbcs	r7, [sl, -r3, lsl #18]
    4380:	01040200 	mrseq	r0, R12_usr
    4384:	54062e06 	strpl	r2, [r6], #-3590	; 0xfffff1fa
    4388:	00200c03 	eoreq	r0, r0, r3, lsl #24
    438c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4390:	3d4c063c 	stclcc	6, cr0, [ip, #-240]	; 0xffffff10
    4394:	30222f3b 	eorcc	r2, r2, fp, lsr pc
    4398:	01040200 	mrseq	r0, R12_usr
    439c:	03062e06 	movweq	r2, #28166	; 0x6e06
    43a0:	03215811 			; <UNDEFINED> instruction: 0x03215811
    43a4:	03207ef7 			; <UNDEFINED> instruction: 0x03207ef7
    43a8:	02002e29 	andeq	r2, r0, #656	; 0x290
    43ac:	3c060104 	stfccs	f0, [r6], {4}
    43b0:	58210306 	stmdapl	r1!, {r1, r2, r8, r9}
    43b4:	002e6503 	eoreq	r6, lr, r3, lsl #10
    43b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    43bc:	d203064a 	andle	r0, r3, #77594624	; 0x4a00000
    43c0:	11034a00 	tstne	r3, r0, lsl #20
    43c4:	2c225a58 	stccs	10, cr5, [r2], #-352	; 0xfffffea0
    43c8:	86031e40 	strhi	r1, [r3], -r0, asr #28
    43cc:	90033c0c 	andls	r3, r3, ip, lsl #24
    43d0:	034c9074 	movteq	r9, #49268	; 0xc074
    43d4:	03ac0bee 			; <UNDEFINED> instruction: 0x03ac0bee
    43d8:	4c3c73f0 	ldcmi	3, cr7, [ip], #-960	; 0xfffffc40
    43dc:	03665603 	cmneq	r6, #3145728	; 0x300000
    43e0:	033e3c74 	teqeq	lr, #116, 24	; 0x7400
    43e4:	40580cc2 	subsmi	r0, r8, r2, asr #25
    43e8:	301e227b 	andscc	r2, lr, fp, ror r2
    43ec:	4c35222c 	lfmmi	f2, 4, [r5], #-176	; 0xffffff50
    43f0:	73ea0393 	mvnvc	r0, #1275068418	; 0x4c000002
    43f4:	7efc033c 	mrcvc	3, 7, r0, cr12, cr12, {1}
    43f8:	9e17032e 	cdpls	3, 1, cr0, cr7, cr14, {1}
    43fc:	01040200 	mrseq	r0, R12_usr
    4400:	02003c06 	andeq	r3, r0, #1536	; 0x600
    4404:	064a0204 	strbeq	r0, [sl], -r4, lsl #4
    4408:	00503e4c 	subseq	r3, r0, ip, asr #28
    440c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4410:	03460658 	movteq	r0, #26200	; 0x6658
    4414:	0200200c 	andeq	r2, r0, #12
    4418:	3c060104 	stfccs	f0, [r6], {4}
    441c:	4c3e4c06 	ldcmi	12, cr4, [lr], #-24	; 0xffffffe8
    4420:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    4424:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4428:	039e6c03 	orrseq	r6, lr, #768	; 0x300
    442c:	7a033c32 	bvc	d34fc <_Min_Stack_Size+0xd30fc>
    4430:	ff03264a 			; <UNDEFINED> instruction: 0xff03264a
    4434:	c2032e7e 	andgt	r2, r3, #2016	; 0x7e0
    4438:	033e2e00 	teqeq	lr, #0, 28
    443c:	4e580cef 	cdpmi	12, 5, cr0, cr8, cr15, {7}
    4440:	301e2289 	andscc	r2, lr, r9, lsl #5
    4444:	4c27222c 	sfmmi	f2, 4, [r7], #-176	; 0xffffff50
    4448:	3c190393 	ldccc	3, cr0, [r9], {147}	; 0x93
    444c:	2073d903 	rsbscs	sp, r3, r3, lsl #18
    4450:	200ca703 	andcs	sl, ip, r3, lsl #14
    4454:	2e73d803 	cdpcs	8, 7, cr13, cr3, cr3, {0}
    4458:	96032121 	strls	r2, [r3], -r1, lsr #2
    445c:	7a03207f 	bvc	cc660 <_Min_Stack_Size+0xcc260>
    4460:	de03263c 	mcrle	6, 0, r2, cr3, cr12, {1}
    4464:	894e2e0c 	stmdbhi	lr, {r2, r3, r9, sl, fp, sp}^
    4468:	2c301e22 	ldccs	14, cr1, [r0], #-136	; 0xffffff78
    446c:	934c2722 	movtls	r2, #50978	; 0xc722
    4470:	3c73d203 	lfmcc	f5, 3, [r3], #-12
    4474:	580ca203 	stmdapl	ip, {r0, r1, r9, sp, pc}
    4478:	55775585 	ldrbpl	r5, [r7, #-1413]!	; 0xfffffa7b
    447c:	00050277 	andeq	r0, r5, r7, ror r2
    4480:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4484:	005c3802 	subseq	r3, ip, r2, lsl #16
    4488:	04e60308 	strbteq	r0, [r6], #776	; 0x308
    448c:	79033501 	stmdbvc	r3, {r0, r8, sl, ip, sp}
    4490:	29252220 	stmdbcs	r5!, {r5, r9, sp}
    4494:	0328512c 			; <UNDEFINED> instruction: 0x0328512c
    4498:	005801a8 	subseq	r0, r8, r8, lsr #3
    449c:	03020402 	movweq	r0, #9218	; 0x2402
    44a0:	003c7ed8 	ldrsbteq	r7, [ip], -r8
    44a4:	3f020402 	svccc	0x00020402
    44a8:	02040200 	andeq	r0, r4, #0, 4
    44ac:	9e035a3e 	mcrls	10, 0, r5, cr3, cr14, {1}
    44b0:	1f212001 	svcne	0x00212001
    44b4:	0200302f 	andeq	r3, r0, #47	; 0x2f
    44b8:	d0030104 	andle	r0, r3, r4, lsl #2
    44bc:	223e3c7e 	eorscs	r3, lr, #32256	; 0x7e00
    44c0:	0f03303a 	svceq	0x0003303a
    44c4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    44c8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    44cc:	033c1603 	teqeq	ip, #3145728	; 0x300000
    44d0:	1f1f2073 	svcne	0x001f2073
    44d4:	03200f03 			; <UNDEFINED> instruction: 0x03200f03
    44d8:	2c312e71 	ldccs	14, cr2, [r1], #-452	; 0xfffffe3c
    44dc:	22321d26 	eorscs	r1, r2, #2432	; 0x980
    44e0:	1e281e21 	cdpne	14, 2, cr1, cr8, cr1, {1}
    44e4:	5e2e0903 	cdppl	9, 2, cr0, cr14, cr3, {0}
    44e8:	1b034e3f 	blne	d7dec <_Min_Stack_Size+0xd79ec>
    44ec:	09033f74 	stmdbeq	r3, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
    44f0:	6674033c 			; <UNDEFINED> instruction: 0x6674033c
    44f4:	03661703 	cmneq	r6, #786432	; 0xc0000
    44f8:	3e604a27 	vmulcc.f32	s9, s0, s15
    44fc:	243d2d21 	ldrtcs	r2, [sp], #-3361	; 0xfffff2df
    4500:	207ee803 	rsbscs	lr, lr, r3, lsl #16
    4504:	4a00cb03 	bmi	37118 <_Min_Stack_Size+0x36d18>
    4508:	033e3e4d 	teqeq	lr, #1232	; 0x4d0
    450c:	3e934a79 	mrccc	10, 4, r4, cr3, cr9, {3}
    4510:	4a79033e 	bmi	1e45210 <_Min_Stack_Size+0x1e44e10>
    4514:	61033e5d 	tstvs	r3, sp, asr lr
    4518:	0a034d90 	beq	d7b60 <_Min_Stack_Size+0xd7760>
    451c:	5873033c 	ldmdapl	r3!, {r2, r3, r4, r5, r8, r9}^
    4520:	033e3fa1 	teqeq	lr, #644	; 0x284
    4524:	3f935878 	svccc	0x00935878
    4528:	5878033e 	ldmdapl	r8!, {r1, r2, r3, r4, r5, r8, r9}^
    452c:	ae033e5e 	mcrge	14, 0, r3, cr3, cr14, {2}
    4530:	7b40660e 	blvc	101dd70 <_Min_Stack_Size+0x101d970>
    4534:	2c301e22 	ldccs	14, cr1, [r0], #-136	; 0xffffff78
    4538:	034f3522 	movteq	r3, #62754	; 0xf522
    453c:	4b3c71fb 	blmi	f20d30 <_Min_Stack_Size+0xf20930>
    4540:	7fa60321 	svcvc	0x00a60321
    4544:	58770320 	ldmdapl	r7!, {r5, r8, r9}^
    4548:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    454c:	00eb0301 	rsceq	r0, fp, r1, lsl #6
    4550:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    4554:	064a0602 	strbeq	r0, [sl], -r2, lsl #12
    4558:	5859034d 	ldmdapl	r9, {r0, r2, r3, r6, r8, r9}^
    455c:	660e8403 	strvs	r8, [lr], -r3, lsl #8
    4560:	3c728703 	ldclcc	7, cr8, [r2], #-12
    4564:	0df20351 	ldcleq	3, cr0, [r2, #324]!	; 0x144
    4568:	729a0358 	addsvc	r0, sl, #88, 6	; 0x60000001
    456c:	e4034c3c 	str	r4, [r3], #-3132	; 0xfffff3c4
    4570:	7b403c0d 	blvc	10135ac <_Min_Stack_Size+0x10131ac>
    4574:	2c301e22 	ldccs	14, cr1, [r0], #-136	; 0xffffff78
    4578:	934c2722 	movtls	r2, #50978	; 0xc722
    457c:	3c71e903 	ldclcc	9, cr14, [r1], #-12
    4580:	0e840335 	mcreq	3, 4, r0, cr4, cr5, {1}
    4584:	035e773c 	cmpeq	lr, #60, 14	; 0xf00000
    4588:	02859e77 	addeq	r9, r5, #1904	; 0x770
    458c:	01010005 	tsteq	r1, r5
    4590:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    4594:	0308005f 	movweq	r0, #32863	; 0x805f
    4598:	19010889 	stmdbne	r1, {r0, r3, r7, fp}
    459c:	203c7903 	eorscs	r7, ip, r3, lsl #18
    45a0:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    45a4:	00200602 	eoreq	r0, r0, r2, lsl #12
    45a8:	06020402 	streq	r0, [r2], -r2, lsl #8
    45ac:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    45b0:	06200601 	strteq	r0, [r0], -r1, lsl #12
    45b4:	3c034c26 	stccc	12, cr4, [r3], {38}	; 0x26
    45b8:	301f2120 	andscc	r2, pc, r0, lsr #2
    45bc:	2e7fb803 	cdpcs	8, 7, cr11, cr15, cr3, {0}
    45c0:	2000c803 	andcs	ip, r0, r3, lsl #16
    45c4:	322e5a03 	eorcc	r5, lr, #12288	; 0x3000
    45c8:	03206b03 			; <UNDEFINED> instruction: 0x03206b03
    45cc:	70032011 	andvc	r2, r3, r1, lsl r0
    45d0:	12031e20 	andne	r1, r3, #32, 28	; 0x200
    45d4:	4a6d0320 	bmi	1b4525c <_Min_Stack_Size+0x1b44e5c>
    45d8:	03201703 			; <UNDEFINED> instruction: 0x03201703
    45dc:	03352e69 	teqeq	r5, #1680	; 0x690
    45e0:	1c27207a 	stcne	0, cr2, [r7], #-488	; 0xfffffe18
    45e4:	0e032d26 	cdpeq	13, 0, cr2, cr3, cr6, {1}
    45e8:	285e2720 	ldmdacs	lr, {r5, r8, r9, sl, sp}^
    45ec:	74034d4e 	strvc	r4, [r3], #-3406	; 0xfffff2b2
    45f0:	58720358 	ldmdapl	r2!, {r3, r4, r6, r8, r9}^
    45f4:	29251b25 	stmdbcs	r5!, {r0, r2, r5, r8, r9, fp, ip}
    45f8:	03942241 	orrseq	r2, r4, #268435460	; 0x10000004
    45fc:	06023c47 	streq	r3, [r2], -r7, asr #24
    4600:	00010100 	andeq	r0, r1, r0, lsl #2
    4604:	60540205 	subsvs	r0, r4, r5, lsl #4
    4608:	e3030800 	movw	r0, #14336	; 0x3800
    460c:	1d230108 	stfnes	f0, [r3, #-32]!	; 0xffffffe0
    4610:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    4614:	06200601 	strteq	r0, [r0], -r1, lsl #12
    4618:	04020052 	streq	r0, [r2], #-82	; 0xffffffae
    461c:	02004c02 	andeq	r4, r0, #512	; 0x200
    4620:	002c0204 	eoreq	r0, ip, r4, lsl #4
    4624:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    4628:	02040200 	andeq	r0, r4, #0, 4
    462c:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    4630:	03223002 			; <UNDEFINED> instruction: 0x03223002
    4634:	033e203f 	teqeq	lr, #63	; 0x3f
    4638:	6c032e14 	stcvs	14, cr2, [r3], {20}
    463c:	2e140320 	cdpcs	3, 1, cr0, cr4, cr0, {1}
    4640:	2e7fa103 	expcse	f2, f3
    4644:	2000df03 	andcs	sp, r0, r3, lsl #30
    4648:	207fa103 	rsbscs	sl, pc, r3, lsl #2
    464c:	2e00df03 	cdpcs	15, 0, cr13, cr0, cr3, {0}
    4650:	23222c22 			; <UNDEFINED> instruction: 0x23222c22
    4654:	3421331b 	strtcc	r3, [r1], #-795	; 0xfffffce5
    4658:	2e0f0351 	mcrcs	3, 0, r0, cr15, cr1, {2}
    465c:	2e710328 	cdpcs	3, 7, cr0, cr1, cr8, {1}
    4660:	22207803 	eorcs	r7, r0, #196608	; 0x30000
    4664:	034a1503 	movteq	r1, #42243	; 0xa503
    4668:	0c032e74 	stceq	14, cr2, [r3], {116}	; 0x74
    466c:	2e6f0320 	cdpcs	3, 6, cr0, cr15, cr0, {1}
    4670:	1003233f 	andne	r2, r3, pc, lsr r3
    4674:	70031b20 	andvc	r1, r3, r0, lsr #22
    4678:	20100320 	andscs	r0, r0, r0, lsr #6
    467c:	2e6e0333 	mcrcs	3, 3, r0, cr14, cr3, {1}
    4680:	1e3c1403 	cdpne	4, 3, cr1, cr12, cr3, {0}
    4684:	034d4d27 	movteq	r4, #56615	; 0xdd27
    4688:	00587ef3 	ldrsheq	r7, [r8], #-227	; 0xffffff1d
    468c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4690:	1403062e 	strne	r0, [r3], #-1582	; 0xfffff9d2
    4694:	2075032e 	rsbscs	r0, r5, lr, lsr #6
    4698:	03201103 			; <UNDEFINED> instruction: 0x03201103
    469c:	1f1e2e70 	svcne	0x001e2e70
    46a0:	1503233d 	strne	r2, [r3, #-829]	; 0xfffffcc3
    46a4:	20700320 	rsbscs	r0, r0, r0, lsr #6
    46a8:	4e200a03 	vmulmi.f32	s0, s0, s6
    46ac:	212e7003 			; <UNDEFINED> instruction: 0x212e7003
    46b0:	200f0322 	andcs	r0, pc, r2, lsr #6
    46b4:	4d515179 	ldfmie	f5, [r1, #-484]	; 0xfffffe1c
    46b8:	587fb803 	ldmdapl	pc!, {r0, r1, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    46bc:	032e3903 			; <UNDEFINED> instruction: 0x032e3903
    46c0:	23039e38 	movwcs	r9, #15928	; 0x3e38
    46c4:	0016022e 	andseq	r0, r6, lr, lsr #4
    46c8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    46cc:	0061c002 	rsbeq	ip, r1, r2
    46d0:	09bf0308 	ldmibeq	pc!, {r3, r8, r9}	; <UNPREDICTABLE>
    46d4:	4c282001 	stcmi	0, cr2, [r8], #-4
    46d8:	23221d2f 			; <UNDEFINED> instruction: 0x23221d2f
    46dc:	034d331b 	movteq	r3, #54043	; 0xd31b
    46e0:	033e2039 	teqeq	lr, #57	; 0x39
    46e4:	032e7fbd 			; <UNDEFINED> instruction: 0x032e7fbd
    46e8:	032000c3 			; <UNDEFINED> instruction: 0x032000c3
    46ec:	6d5e2e43 	ldclvs	14, cr2, [lr, #-268]	; 0xfffffef4
    46f0:	20790335 	rsbscs	r0, r9, r5, lsr r3
    46f4:	03201703 			; <UNDEFINED> instruction: 0x03201703
    46f8:	7a033c71 	bvc	d38c4 <_Min_Stack_Size+0xd34c4>
    46fc:	4a150320 	bmi	545384 <_Min_Stack_Size+0x544f84>
    4700:	03207403 			; <UNDEFINED> instruction: 0x03207403
    4704:	6f03200c 	svcvs	0x0003200c
    4708:	03233f3c 			; <UNDEFINED> instruction: 0x03233f3c
    470c:	031b2010 	tsteq	fp, #16
    4710:	0d032073 	stceq	0, cr2, [r3, #-460]	; 0xfffffe34
    4714:	1e4c4120 	dvfneep	f4, f4, f0
    4718:	034d4d27 	movteq	r4, #56615	; 0xdd27
    471c:	6c035852 	stcvs	8, cr5, [r3], {82}	; 0x52
    4720:	2e37032e 	cdpcs	3, 3, cr0, cr7, cr14, {1}
    4724:	01001302 	tsteq	r0, r2, lsl #6
    4728:	02050001 	andeq	r0, r5, #1
    472c:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    4730:	010a9503 	tsteq	sl, r3, lsl #10
    4734:	3c790327 	ldclcc	3, cr0, [r9], #-156	; 0xffffff64
    4738:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    473c:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    4740:	002c0204 	eoreq	r0, ip, r4, lsl #4
    4744:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    4748:	02040200 	andeq	r0, r4, #0, 4
    474c:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    4750:	03223002 			; <UNDEFINED> instruction: 0x03223002
    4754:	3d2000c4 	stccc	0, cr0, [r0, #-784]!	; 0xfffffcf0
    4758:	207fb703 	rsbscs	fp, pc, r3, lsl #14
    475c:	2000ca03 	andcs	ip, r0, r3, lsl #20
    4760:	207fbe03 	rsbscs	fp, pc, r3, lsl #28
    4764:	01040200 	mrseq	r0, R12_usr
    4768:	36062e06 	strcc	r2, [r6], -r6, lsl #28
    476c:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    4770:	3d1d2075 	ldccc	0, cr2, [sp, #-468]	; 0xfffffe2c
    4774:	200c0323 	andcs	r0, ip, r3, lsr #6
    4778:	7903231b 	stmdbvc	r3, {r0, r1, r3, r4, r8, r9, sp}
    477c:	2121212e 			; <UNDEFINED> instruction: 0x2121212e
    4780:	2e720326 	cdpcs	3, 7, cr0, cr2, cr6, {1}
    4784:	4f200e03 	svcmi	0x00200e03
    4788:	200c0351 	andcs	r0, ip, r1, asr r3
    478c:	31207403 			; <UNDEFINED> instruction: 0x31207403
    4790:	23261d23 			; <UNDEFINED> instruction: 0x23261d23
    4794:	232e7a03 			; <UNDEFINED> instruction: 0x232e7a03
    4798:	4e4d3123 	dvfmiep	f3, f5, f3
    479c:	7fb6034d 	svcvc	0x00b6034d
    47a0:	2e2c034a 	cdpcs	3, 2, cr0, cr12, cr10, {2}
    47a4:	01001002 	tsteq	r0, r2
    47a8:	02050001 	andeq	r0, r5, #1
    47ac:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
    47b0:	010af203 	tsteq	sl, r3, lsl #4	; <UNPREDICTABLE>
    47b4:	00311d23 	eorseq	r1, r1, r3, lsr #26
    47b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    47bc:	00520620 	subseq	r0, r2, r0, lsr #12
    47c0:	4c020402 	cfstrsmi	mvf0, [r2], {2}
    47c4:	02040200 	andeq	r0, r4, #0, 4
    47c8:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    47cc:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    47d0:	002c0204 	eoreq	r0, ip, r4, lsl #4
    47d4:	30020402 	andcc	r0, r2, r2, lsl #8
    47d8:	00c30322 	sbceq	r0, r3, r2, lsr #6
    47dc:	16033d20 	strne	r3, [r3], -r0, lsr #26
    47e0:	7f9c0320 	svcvc	0x009c0320
    47e4:	00e4034a 	rsceq	r0, r4, sl, asr #6
    47e8:	7f9c0320 	svcvc	0x009c0320
    47ec:	00e40320 	rsceq	r0, r4, r0, lsr #6
    47f0:	222c222e 	eorcs	r2, ip, #-536870910	; 0xe0000002
    47f4:	21321c22 	teqcs	r2, r2, lsr #24
    47f8:	14036d34 	strne	r6, [r3], #-3380	; 0xfffff2cc
    47fc:	2073032e 	rsbscs	r0, r3, lr, lsr #6
    4800:	22207903 	eorcs	r7, r0, #49152	; 0xc000
    4804:	200e034e 	andcs	r0, lr, lr, asr #6
    4808:	222e7203 	eorcs	r7, lr, #805306368	; 0x30000000
    480c:	24212121 	strtcs	r2, [r1], #-289	; 0xfffffedf
    4810:	0a031c21 	beq	cb89c <_Min_Stack_Size+0xcb49c>
    4814:	31351e20 	teqcc	r5, r0, lsr #28
    4818:	0334241d 	teqeq	r4, #486539264	; 0x1d000000
    481c:	21262079 			; <UNDEFINED> instruction: 0x21262079
    4820:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    4824:	1d282075 	stcne	0, cr2, [r8, #-468]!	; 0xfffffe2c
    4828:	31233934 			; <UNDEFINED> instruction: 0x31233934
    482c:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    4830:	1c242076 	stcne	0, cr2, [r4], #-472	; 0xfffffe28
    4834:	033c0a03 	teqeq	ip, #12288	; 0x3000
    4838:	2926207a 	stmdbcs	r6!, {r1, r3, r4, r5, r6, sp}
    483c:	31232121 			; <UNDEFINED> instruction: 0x31232121
    4840:	034d4d4d 	movteq	r4, #56653	; 0xdd4d
    4844:	034a7fa0 	movteq	r7, #44960	; 0xafa0
    4848:	002e7fb0 	strhteq	r7, [lr], -r0
    484c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4850:	1f36062e 	svcne	0x0036062e
    4854:	207a0343 	rsbscs	r0, sl, r3, asr #6
    4858:	21251c27 			; <UNDEFINED> instruction: 0x21251c27
    485c:	20730325 	rsbscs	r0, r3, r5, lsr #6
    4860:	30200b03 	eorcc	r0, r0, r3, lsl #22
    4864:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    4868:	034f200c 	movteq	r2, #61452	; 0xf00c
    486c:	74034a13 	strvc	r4, [r3], #-2579	; 0xfffff5ed
    4870:	03313120 	teqeq	r1, #32, 2
    4874:	0903207a 	stmdbeq	r3, {r1, r3, r4, r5, r6, sp}
    4878:	77032320 	strvc	r2, [r3, -r0, lsr #6]
    487c:	2323313c 			; <UNDEFINED> instruction: 0x2323313c
    4880:	4d4e4d31 	stclmi	13, cr4, [lr, #-196]	; 0xffffff3c
    4884:	4a7fb303 	bmi	1ff1498 <_Min_Stack_Size+0x1ff1098>
    4888:	032e2f03 			; <UNDEFINED> instruction: 0x032e2f03
    488c:	039e00c6 	orrseq	r0, lr, #198	; 0xc6
    4890:	15022e1b 	strne	r2, [r2, #-3611]	; 0xfffff1e5
    4894:	00010100 	andeq	r0, r1, r0, lsl #2
    4898:	65240205 	strvs	r0, [r4, #-517]!	; 0xfffffdfb
    489c:	d3030800 	movwle	r0, #14336	; 0x3800
    48a0:	2820010b 	stmdacs	r0!, {r0, r1, r3, r8}
    48a4:	221d2f4c 	andscs	r2, sp, #76, 30	; 0x130
    48a8:	4d321c22 	ldcmi	12, cr1, [r2, #-136]!	; 0xffffff78
    48ac:	2000d703 	andcs	sp, r0, r3, lsl #14
    48b0:	4a7fa203 	bmi	1fed0c4 <_Min_Stack_Size+0x1feccc4>
    48b4:	2000e003 	andcs	lr, r0, r3
    48b8:	207fa503 	rsbscs	sl, pc, r3, lsl #10
    48bc:	03356d5e 	teqeq	r5, #6016	; 0x1780
    48c0:	03222079 			; <UNDEFINED> instruction: 0x03222079
    48c4:	74034a12 	strvc	r4, [r3], #-2578	; 0xfffff5ee
    48c8:	0e031e20 	cdpeq	14, 0, cr1, cr3, cr0, {1}
    48cc:	2e720320 	cdpcs	3, 7, cr0, cr2, cr0, {1}
    48d0:	21200903 			; <UNDEFINED> instruction: 0x21200903
    48d4:	21207903 			; <UNDEFINED> instruction: 0x21207903
    48d8:	0a032121 	beq	ccd64 <_Min_Stack_Size+0xcc964>
    48dc:	31271e20 			; <UNDEFINED> instruction: 0x31271e20
    48e0:	252f231d 	strcs	r2, [pc, #-797]!	; 45cb <_Min_Stack_Size+0x41cb>
    48e4:	24211f21 	strtcs	r1, [r1], #-3873	; 0xfffff0df
    48e8:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    48ec:	232b2323 			; <UNDEFINED> instruction: 0x232b2323
    48f0:	031c2431 	tsteq	ip, #822083584	; 0x31000000
    48f4:	7603200a 	strvc	r2, [r3], -sl
    48f8:	3c0a0320 	stccc	3, cr0, [sl], {32}
    48fc:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    4900:	23212129 			; <UNDEFINED> instruction: 0x23212129
    4904:	4d4d4d31 	stclmi	13, cr4, [sp, #-196]	; 0xffffff3c
    4908:	4a7fa003 	bmi	1fec91c <_Min_Stack_Size+0x1fec51c>
    490c:	2e00e403 	cdpcs	4, 0, cr14, cr0, cr3, {0}
    4910:	207faf03 	rsbscs	sl, pc, r3, lsl #30
    4914:	2000d103 	andcs	sp, r0, r3, lsl #2
    4918:	023c4a03 	eorseq	r4, ip, #12288	; 0x3000
    491c:	01010015 	tsteq	r1, r5, lsl r0
    4920:	38020500 	stmdacc	r2, {r8, sl}
    4924:	03080066 	movweq	r0, #32870	; 0x8066
    4928:	14010cc4 	strne	r0, [r1], #-3268	; 0xfffff33c
    492c:	0200223a 	andeq	r2, r0, #-1610612733	; 0xa0000003
    4930:	00230204 	eoreq	r0, r3, r4, lsl #4
    4934:	31020402 	tstcc	r2, r2, lsl #8
    4938:	02040200 	andeq	r0, r4, #0, 4
    493c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    4940:	02004102 	andeq	r4, r0, #-2147483648	; 0x80000000
    4944:	001e0204 	andseq	r0, lr, r4, lsl #4
    4948:	30020402 	andcc	r0, r2, r2, lsl #8
    494c:	03207803 			; <UNDEFINED> instruction: 0x03207803
    4950:	01022009 	tsteq	r2, r9
    4954:	00010100 	andeq	r0, r1, r0, lsl #2
    4958:	665c0205 	ldrbvs	r0, [ip], -r5, lsl #4
    495c:	d8030800 	stmdale	r3, {fp}
    4960:	3a14010c 	bcc	504d98 <_Min_Stack_Size+0x504998>
    4964:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    4968:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
    496c:	00310204 	eorseq	r0, r1, r4, lsl #4
    4970:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    4974:	02040200 	andeq	r0, r4, #0, 4
    4978:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    497c:	02001e02 	andeq	r1, r0, #2, 28
    4980:	03300204 	teqeq	r0, #4, 4	; 0x40000000
    4984:	09032078 	stmdbeq	r3, {r3, r4, r5, r6, sp}
    4988:	00010220 	andeq	r0, r1, r0, lsr #4
    498c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4990:	00668002 	rsbeq	r8, r6, r2
    4994:	0cec0308 	stcleq	3, cr0, [ip], #32
    4998:	30282001 	eorcc	r2, r8, r1
    499c:	2f323031 	svccs	0x00323031
    49a0:	301e3f1f 	andscc	r3, lr, pc, lsl pc
    49a4:	01000102 	tsteq	r0, r2, lsl #2
    49a8:	02050001 	andeq	r0, r5, #1
    49ac:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
    49b0:	010deb03 	tsteq	sp, r3, lsl #22
    49b4:	01000102 	tsteq	r0, r2, lsl #2
    49b8:	02050001 	andeq	r0, r5, #1
    49bc:	080066ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, sp, lr}
    49c0:	010dfa03 	tsteq	sp, r3, lsl #20	; <UNPREDICTABLE>
    49c4:	01000102 	tsteq	r0, r2, lsl #2
    49c8:	02050001 	andeq	r0, r5, #1
    49cc:	080066b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, sp, lr}
    49d0:	010e8903 	tsteq	lr, r3, lsl #18
    49d4:	01000102 	tsteq	r0, r2, lsl #2
    49d8:	02050001 	andeq	r0, r5, #1
    49dc:	080066b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp, lr}
    49e0:	010e9803 	tsteq	lr, r3, lsl #16
    49e4:	01000102 	tsteq	r0, r2, lsl #2
    49e8:	02050001 	andeq	r0, r5, #1
    49ec:	080066b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, sp, lr}
    49f0:	0110bd03 	tsteq	r0, r3, lsl #26
    49f4:	04022301 	streq	r2, [r2], #-769	; 0xfffffcff
    49f8:	00010100 	andeq	r0, r1, r0, lsl #2
    49fc:	66c40205 	strbvs	r0, [r4], r5, lsl #4
    4a00:	a7030800 	strge	r0, [r3, -r0, lsl #16]
    4a04:	0102010e 	tsteq	r2, lr, lsl #2
    4a08:	00010100 	andeq	r0, r1, r0, lsl #2
    4a0c:	66c80205 	strbvs	r0, [r8], r5, lsl #4
    4a10:	ca030800 	bgt	c6a18 <_Min_Stack_Size+0xc6618>
    4a14:	23010110 	movwcs	r0, #4368	; 0x1110
    4a18:	01000402 	tsteq	r0, r2, lsl #8
    4a1c:	02050001 	andeq	r0, r5, #1
    4a20:	080066d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp, lr}
    4a24:	010eb603 	tsteq	lr, r3, lsl #12
    4a28:	01000102 	tsteq	r0, r2, lsl #2
    4a2c:	02050001 	andeq	r0, r5, #1
    4a30:	080066d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, sp, lr}
    4a34:	0110d703 	tsteq	r0, r3, lsl #14
    4a38:	04022301 	streq	r2, [r2], #-769	; 0xfffffcff
    4a3c:	00010100 	andeq	r0, r1, r0, lsl #2
    4a40:	66e40205 	strbtvs	r0, [r4], r5, lsl #4
    4a44:	c5030800 	strgt	r0, [r3, #-2048]	; 0xfffff800
    4a48:	0102010e 	tsteq	r2, lr, lsl #2
    4a4c:	00010100 	andeq	r0, r1, r0, lsl #2
    4a50:	66e80205 	strbtvs	r0, [r8], r5, lsl #4
    4a54:	9f030800 	svcls	0x00030800
    4a58:	22010115 	andcs	r0, r1, #1073741829	; 0x40000005
    4a5c:	22482256 	subcs	r2, r8, #1610612741	; 0x60000005
    4a60:	580b0323 	stmdapl	fp, {r0, r1, r5, r8, r9}
    4a64:	5a3c7a03 	bpl	f23278 <_Min_Stack_Size+0xf22e78>
    4a68:	7eb30351 	mrcvc	3, 5, r0, cr3, cr1, {2}
    4a6c:	01d6034a 	bicseq	r0, r6, sl, asr #6
    4a70:	3d69224a 	sfmcc	f2, 2, [r9, #-296]!	; 0xfffffed8
    4a74:	30261e22 	eorcc	r1, r6, r2, lsr #28
    4a78:	2e7ea003 	cdpcs	0, 7, cr10, cr14, cr3, {0}
    4a7c:	20790351 	rsbscs	r0, r9, r1, asr r3
    4a80:	1e200903 	cdpne	9, 2, cr0, cr0, cr3, {0}
    4a84:	353e2c22 	ldrcc	r2, [lr, #-3106]!	; 0xfffff3de
    4a88:	1903934c 	stmdbne	r3, {r2, r3, r6, r8, r9, ip, pc}
    4a8c:	01a0033c 	lsreq	r0, ip, r3
    4a90:	7eca034a 	cdpvc	3, 12, cr0, cr10, cr10, {2}
    4a94:	01b60320 			; <UNDEFINED> instruction: 0x01b60320
    4a98:	7eca0320 	cdpvc	3, 12, cr0, cr10, cr0, {1}
    4a9c:	01c2033c 	biceq	r0, r2, ip, lsr r3
    4aa0:	a903343c 	stmdbge	r3, {r2, r3, r4, r5, sl, ip, sp}
    4aa4:	02692e7e 	rsbeq	r2, r9, #2016	; 0x7e0
    4aa8:	0101000a 	tsteq	r1, sl
    4aac:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    4ab0:	03080067 	movweq	r0, #32871	; 0x8067
    4ab4:	130113ae 	movwne	r1, #5038	; 0x13ae
    4ab8:	503f4c67 	eorspl	r4, pc, r7, ror #24
    4abc:	02025b39 	andeq	r5, r2, #58368	; 0xe400
    4ac0:	00010100 	andeq	r0, r1, r0, lsl #2
    4ac4:	680c0205 	stmdavs	ip, {r0, r2, r9}
    4ac8:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    4acc:	5a140113 	bpl	504f20 <_Min_Stack_Size+0x504b20>
    4ad0:	3f3e211f 	svccc	0x003e211f
    4ad4:	024d3950 	subeq	r3, sp, #80, 18	; 0x140000
    4ad8:	01010002 	tsteq	r1, r2
    4adc:	40020500 	andmi	r0, r2, r0, lsl #10
    4ae0:	03080068 	movweq	r0, #32872	; 0x8068
    4ae4:	1301138d 	movwne	r1, #5005	; 0x138d
    4ae8:	1f30213b 	svcne	0x0030213b
    4aec:	79034021 	stmdbvc	r3, {r0, r5, lr}
    4af0:	3f26273c 	svccc	0x0026273c
    4af4:	4a01d303 	bmi	79708 <_Min_Stack_Size+0x79308>
    4af8:	2b311d23 	blcs	c4bf8c <_Min_Stack_Size+0xc4bb8c>
    4afc:	40243523 	eormi	r3, r4, r3, lsr #10
    4b00:	09031e3e 	stmdbeq	r3, {r1, r2, r3, r4, r5, r9, sl, fp, ip}
    4b04:	94032620 	strls	r2, [r3], #-1568	; 0xfffff9e0
    4b08:	7a032e7e 	bvc	d0508 <_Min_Stack_Size+0xd0108>
    4b0c:	0200343c 	andeq	r3, r0, #60, 8	; 0x3c000000
    4b10:	6f030104 	svcvs	0x00030104
    4b14:	e203503c 	and	r5, r3, #60	; 0x3c
    4b18:	77035801 	strvc	r5, [r3, -r1, lsl #16]
    4b1c:	034e6974 	movteq	r6, #59764	; 0xe974
    4b20:	98033c13 	stmdals	r3, {r0, r1, r4, sl, fp, ip, sp}
    4b24:	e0032e7e 	and	r2, r3, lr, ror lr
    4b28:	3d2d3c01 	stccc	12, cr3, [sp, #-4]!
    4b2c:	7e900321 	cdpvc	3, 9, cr0, cr0, cr1, {1}
    4b30:	0007023c 	andeq	r0, r7, ip, lsr r2
    4b34:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4b38:	00690c02 	rsbeq	r0, r9, r2, lsl #24
    4b3c:	14a40308 	strtne	r0, [r4], #776	; 0x308
    4b40:	22562201 	subscs	r2, r6, #268435456	; 0x10000000
    4b44:	314c221e 	cmpcc	ip, lr, lsl r2
    4b48:	0b032347 	bleq	cd86c <_Min_Stack_Size+0xcd46c>
    4b4c:	3c7a032e 	ldclcc	3, cr0, [sl], #-184	; 0xffffff48
    4b50:	7fb3035a 	svcvc	0x00b3035a
    4b54:	00da034a 	sbcseq	r0, sl, sl, asr #6
    4b58:	036b224a 	cmneq	fp, #-1610612732	; 0xa0000004
    4b5c:	3e3e3c0a 	cdpcc	12, 3, cr3, cr14, cr10, {0}
    4b60:	03281d4b 			; <UNDEFINED> instruction: 0x03281d4b
    4b64:	84032e0b 	strhi	r2, [r3], #-3595	; 0xfffff1f5
    4b68:	03512e7f 	cmpeq	r1, #2032	; 0x7f0
    4b6c:	09032079 	stmdbeq	r3, {r0, r3, r4, r5, r6, sp}
    4b70:	2c221e20 	stccs	14, cr1, [r2], #-128	; 0xffffff80
    4b74:	934c353e 	movtls	r3, #50494	; 0xc53e
    4b78:	033c1903 	teqeq	ip, #49152	; 0xc000
    4b7c:	46034a24 	strmi	r4, [r3], -r4, lsr #20
    4b80:	203a0320 	eorscs	r0, sl, r0, lsr #6
    4b84:	033c4603 	teqeq	ip, #3145728	; 0x300000
    4b88:	3d3c00de 	ldccc	0, cr0, [ip, #-888]!	; 0xfffffc88
    4b8c:	2e630341 	cdpcs	3, 6, cr0, cr3, cr1, {2}
    4b90:	3e2d213d 	mcrcc	1, 1, r2, cr13, cr13, {1}
    4b94:	1a03211f 	bne	cd018 <_Min_Stack_Size+0xccc18>
    4b98:	2e70032e 	cdpcs	3, 7, cr0, cr0, cr14, {1}
    4b9c:	032e1003 			; <UNDEFINED> instruction: 0x032e1003
    4ba0:	692e7f8d 	stmdbvs	lr!, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
    4ba4:	01000a02 	tsteq	r0, r2, lsl #20
    4ba8:	02050001 	andeq	r0, r5, #1
    4bac:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
    4bb0:	0111c203 	tsteq	r1, r3, lsl #4
    4bb4:	3f4d6721 	svccc	0x004d6721
    4bb8:	5a4a0903 	bpl	1286fcc <_Min_Stack_Size+0x1286bcc>
    4bbc:	75035541 	strvc	r5, [r3, #-1345]	; 0xfffffabf
    4bc0:	200e032e 	andcs	r0, lr, lr, lsr #6
    4bc4:	4b2e7203 	blmi	ba13d8 <_Min_Stack_Size+0xba0fd8>
    4bc8:	024a0d03 	subeq	r0, sl, #3, 26	; 0xc0
    4bcc:	01010001 	tsteq	r1, r1
    4bd0:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    4bd4:	0308006a 	movweq	r0, #32874	; 0x806a
    4bd8:	22011185 	andcs	r1, r1, #1073741857	; 0x40000021
    4bdc:	523f4d67 	eorspl	r4, pc, #6592	; 0x19c0
    4be0:	0355415a 	cmpeq	r5, #-2147483626	; 0x80000016
    4be4:	0d032e76 	stceq	14, cr2, [r3, #-472]	; 0xfffffe28
    4be8:	0005022e 	andeq	r0, r5, lr, lsr #4
    4bec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4bf0:	006ae402 	rsbeq	lr, sl, r2, lsl #8
    4bf4:	11a70308 			; <UNDEFINED> instruction: 0x11a70308
    4bf8:	3f1d3201 	svccc	0x001d3201
    4bfc:	3e4c314e 	dvfccem	f3, f4, #0.5
    4c00:	00030230 	andeq	r0, r3, r0, lsr r2
    4c04:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4c08:	006b1402 	rsbeq	r1, fp, r2, lsl #8
    4c0c:	129d0308 	addsne	r0, sp, #8, 6	; 0x20000000
    4c10:	221e1401 	andscs	r1, lr, #16777216	; 0x1000000
    4c14:	3f211f4c 	svccc	0x00211f4c
    4c18:	4a09033f 	bmi	24591c <_Min_Stack_Size+0x24551c>
    4c1c:	0355414c 	cmpeq	r5, #76, 2
    4c20:	034b2e75 	movteq	r2, #48757	; 0xbe75
    4c24:	03024a0d 	movweq	r4, #10765	; 0x2a0d
    4c28:	00010100 	andeq	r0, r1, r0, lsl #2
    4c2c:	6b6c0205 	blvs	1b05448 <_Min_Stack_Size+0x1b05048>
    4c30:	e3030800 	movw	r0, #14336	; 0x3800
    4c34:	5a220111 	bpl	885080 <_Min_Stack_Size+0x884c80>
    4c38:	3f3e211f 	svccc	0x003e211f
    4c3c:	55414c52 	strbpl	r4, [r1, #-3154]	; 0xfffff3ae
    4c40:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    4c44:	06022e0d 	streq	r2, [r2], -sp, lsl #28
    4c48:	00010100 	andeq	r0, r1, r0, lsl #2
    4c4c:	6bbc0205 	blvs	fef05468 <_estack+0xdeed5468>
    4c50:	85030800 	strhi	r0, [r3, #-2048]	; 0xfffff800
    4c54:	1d330112 	ldfnes	f0, [r3, #-72]!	; 0xffffffb8
    4c58:	4c314d3f 	ldcmi	13, cr4, [r1], #-252	; 0xffffff04
    4c5c:	0003022f 	andeq	r0, r3, pc, lsr #4
    4c60:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4c64:	006be802 	rsbeq	lr, fp, r2, lsl #16
    4c68:	10e40308 	rscne	r0, r4, r8, lsl #6
    4c6c:	5a232101 	bpl	8cd078 <_Min_Stack_Size+0x8ccc78>
    4c70:	1f3e1f21 	svcne	0x003e1f21
    4c74:	0003022f 	andeq	r0, r3, pc, lsr #4
    4c78:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4c7c:	006c0c02 	rsbeq	r0, ip, r2, lsl #24
    4c80:	0f8f0308 	svceq	0x008f0308
    4c84:	31243d01 			; <UNDEFINED> instruction: 0x31243d01
    4c88:	04cb034d 	strbeq	r0, [fp], #845	; 0x34d
    4c8c:	7bbe0366 	blvc	fef85a2c <_estack+0xdef55a2c>
    4c90:	1f6a224a 	svcne	0x006a224a
    4c94:	3d42302f 	stclcc	0, cr3, [r2, #-188]	; 0xffffff44
    4c98:	2e04b703 	cdpcs	7, 0, cr11, cr4, cr3, {0}
    4c9c:	20790351 	rsbscs	r0, r9, r1, asr r3
    4ca0:	1e200903 	cdpne	9, 2, cr0, cr0, cr3, {0}
    4ca4:	353e2c22 	ldrcc	r2, [lr, #-3106]!	; 0xfffff3de
    4ca8:	1903934c 	stmdbne	r3, {r2, r3, r6, r8, r9, ip, pc}
    4cac:	7b88033c 	blvc	fe2059a4 <_estack+0xde1d59a4>
    4cb0:	04e2034a 	strbteq	r0, [r2], #842	; 0x34a
    4cb4:	7b9e0320 	blvc	fe78593c <_estack+0xde75593c>
    4cb8:	04e20320 	strbteq	r0, [r2], #800	; 0x320
    4cbc:	7ba2033c 	blvc	fe8859b4 <_estack+0xde8559b4>
    4cc0:	3c0a032e 	stccc	3, cr0, [sl], {46}	; 0x2e
    4cc4:	04c00341 	strbeq	r0, [r0], #833	; 0x341
    4cc8:	0502692e 	streq	r6, [r2, #-2350]	; 0xfffff6d2
    4ccc:	00010100 	andeq	r0, r1, r0, lsl #2
    4cd0:	6cd80205 	lfmvs	f0, 2, [r8], {5}
    4cd4:	bb030800 	bllt	c6cdc <_Min_Stack_Size+0xc68dc>
    4cd8:	3940010f 	stmdbcc	r0, {r0, r1, r2, r3, r8}^
    4cdc:	034e3126 	movteq	r3, #57638	; 0xe126
    4ce0:	2c227410 	cfstrscs	mvf7, [r2], #-64	; 0xffffffc0
    4ce4:	2f1f273e 	svccs	0x001f273e
    4ce8:	3d344332 	ldccc	3, cr4, [r4, #-200]!	; 0xffffff38
    4cec:	2e03f503 	cfsh32cs	mvfx15, mvfx3, #3
    4cf0:	7bed0354 	blvc	ffb45a48 <_estack+0xdfb15a48>
    4cf4:	14034c58 	strne	r4, [r3], #-3160	; 0xfffff3a8
    4cf8:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
    4cfc:	00413e24 	subeq	r3, r1, r4, lsr #28
    4d00:	03010402 	movweq	r0, #5122	; 0x1402
    4d04:	02002e67 	andeq	r2, r0, #1648	; 0x670
    4d08:	4a060204 	bmi	185520 <_Min_Stack_Size+0x185120>
    4d0c:	92033f06 	andls	r3, r3, #6, 30
    4d10:	1e225804 	cdpne	8, 2, cr5, cr2, cr4, {0}
    4d14:	273e2c22 	ldrcs	r2, [lr, -r2, lsr #24]!
    4d18:	d103934c 	tstle	r3, ip, asr #6
    4d1c:	b2033c7b 	andlt	r3, r3, #31488	; 0x7b00
    4d20:	ce032004 	cdpgt	0, 0, cr2, cr3, cr4, {0}
    4d24:	b203207b 	andlt	r2, r3, #123	; 0x7b
    4d28:	71033c04 	tstvc	r3, r4, lsl #24
    4d2c:	0502773c 	streq	r7, [r2, #-1852]	; 0xfffff8c4
    4d30:	00010100 	andeq	r0, r1, r0, lsl #2
    4d34:	6de00205 	sfmvs	f0, 2, [r0, #20]!
    4d38:	fd030800 	stc2	8, cr0, [r3, #-0]
    4d3c:	3940010f 	stmdbcc	r0, {r0, r1, r2, r3, r8}^
    4d40:	034e3026 	movteq	r3, #57382	; 0xe026
    4d44:	036603db 	cmneq	r6, #1811939331	; 0x6c000003
    4d48:	223c7cb9 	eorscs	r7, ip, #47360	; 0xb900
    4d4c:	221c321e 	andscs	r3, ip, #-536870911	; 0xe0000001
    4d50:	43322121 	teqmi	r2, #1073741832	; 0x40000008
    4d54:	b5033d42 	strlt	r3, [r3, #-3394]	; 0xfffff2be
    4d58:	03542e03 	cmpeq	r4, #3, 28	; 0x30
    4d5c:	4c4a7cad 	mcrrmi	12, 10, r7, sl, cr13
    4d60:	3c03d503 	cfstr32cc	mvfx13, [r3], {3}
    4d64:	20790351 	rsbscs	r0, r9, r1, asr r3
    4d68:	1e200903 	cdpne	9, 2, cr0, cr0, cr3, {0}
    4d6c:	273e2c22 	ldrcs	r2, [lr, -r2, lsr #24]!
    4d70:	3c19034f 	ldccc	3, cr0, [r9], {79}	; 0x4f
    4d74:	4a7c8303 	bmi	1f25988 <_Min_Stack_Size+0x1f25588>
    4d78:	2003e703 	andcs	lr, r3, r3, lsl #14
    4d7c:	207c9903 	rsbscs	r9, ip, r3, lsl #18
    4d80:	3c03e703 	stccc	7, cr14, [r3], {3}
    4d84:	3c7ca703 	ldclcc	7, cr10, [ip], #-12
    4d88:	243d2d21 	ldrtcs	r2, [sp], #-3361	; 0xfffff2df
    4d8c:	c703413e 	smladxgt	r3, lr, r1, r4
    4d90:	77032e03 	strvc	r2, [r3, -r3, lsl #28]
    4d94:	2253779e 	subscs	r7, r3, #41418752	; 0x2780000
    4d98:	3e2c221e 	mcrcc	2, 1, r2, cr12, cr14, {0}
    4d9c:	03934c27 	orrseq	r4, r3, #9984	; 0x2700
    4da0:	033c7c91 	teqeq	ip, #37120	; 0x9100
    4da4:	032003f2 			; <UNDEFINED> instruction: 0x032003f2
    4da8:	03207c8e 			; <UNDEFINED> instruction: 0x03207c8e
    4dac:	033c03f2 	teqeq	ip, #-939524093	; 0xc8000003
    4db0:	02773c71 	rsbseq	r3, r7, #28928	; 0x7100
    4db4:	01010005 	tsteq	r1, r5
    4db8:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    4dbc:	0308006f 	movweq	r0, #32879	; 0x806f
    4dc0:	13010d8b 	movwne	r0, #7563	; 0x1d8b
    4dc4:	2321211f 			; <UNDEFINED> instruction: 0x2321211f
    4dc8:	28252037 	stmdacs	r5!, {r0, r1, r2, r4, r5, sp}
    4dcc:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
    4dd0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4dd4:	214c3031 	cmpcs	ip, r1, lsr r0
    4dd8:	0a033d1f 	beq	d425c <_Min_Stack_Size+0xd3e5c>
    4ddc:	1f213066 	svcne	0x00213066
    4de0:	2130863d 	teqcs	r0, sp, lsr r6
    4de4:	314d3d1f 	cmpcc	sp, pc, lsl sp
    4de8:	301e224c 	andscc	r2, lr, ip, asr #4
    4dec:	3f1d2322 	svccc	0x001d2322
    4df0:	32312f24 	eorscc	r2, r1, #36, 30	; 0x90
    4df4:	2e0b032f 	cdpcs	3, 0, cr0, cr11, cr15, {1}
    4df8:	01040200 	mrseq	r0, R12_usr
    4dfc:	2e7fb603 	cdpcs	6, 7, cr11, cr15, cr3, {0}
    4e00:	76033d30 			; <UNDEFINED> instruction: 0x76033d30
    4e04:	032f3020 			; <UNDEFINED> instruction: 0x032f3020
    4e08:	032000c9 			; <UNDEFINED> instruction: 0x032000c9
    4e0c:	02754a4e 	rsbseq	r4, r5, #319488	; 0x4e000
    4e10:	01010003 	tsteq	r1, r3
    4e14:	20020500 	andcs	r0, r2, r0, lsl #10
    4e18:	03080070 	movweq	r0, #32880	; 0x8070
    4e1c:	210110f6 	strdcs	r1, [r1, -r6]
    4e20:	221e3121 	andscs	r3, lr, #1073741832	; 0x40000008
    4e24:	01000302 	tsteq	r0, r2, lsl #6
    4e28:	02050001 	andeq	r0, r5, #1
    4e2c:	08007034 	stmdaeq	r0, {r2, r4, r5, ip, sp, lr}
    4e30:	0112c103 	tsteq	r2, r3, lsl #2
    4e34:	02ae0332 	adceq	r0, lr, #-939524096	; 0xc8000000
    4e38:	7dcf0320 	stclvc	3, cr0, [pc, #128]	; 4ec0 <_Min_Stack_Size+0x4ac0>
    4e3c:	034d3f20 	movteq	r3, #57120	; 0xdf20
    4e40:	232e02a8 			; <UNDEFINED> instruction: 0x232e02a8
    4e44:	22353f2b 	eorscs	r3, r5, #43, 30	; 0xac
    4e48:	09034068 	stmdbeq	r3, {r3, r5, r6, lr}
    4e4c:	ba03343c 	blt	d1f44 <_Min_Stack_Size+0xd1b44>
    4e50:	c2032e7d 	andgt	r2, r3, #2000	; 0x7d0
    4e54:	be033c02 	cdplt	12, 0, cr3, cr3, cr2, {0}
    4e58:	a8032e7d 	stmdage	r3, {r0, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    4e5c:	03693c02 	cmneq	r9, #512	; 0x200
    4e60:	2d21580e 	stccs	8, cr5, [r1, #-56]!	; 0xffffffc8
    4e64:	c503213d 	strgt	r2, [r3, #-317]	; 0xfffffec3
    4e68:	03022e7d 	movweq	r2, #11901	; 0x2e7d
    4e6c:	00010100 	andeq	r0, r1, r0, lsl #2
    4e70:	70c00205 	sbcvc	r0, r0, r5, lsl #4
    4e74:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    4e78:	03320112 	teqeq	r2, #-2147483644	; 0x80000004
    4e7c:	032001f9 			; <UNDEFINED> instruction: 0x032001f9
    4e80:	3f207e84 	svccc	0x00207e84
    4e84:	f003314d 			; <UNDEFINED> instruction: 0xf003314d
    4e88:	2b234a01 	blcs	8d7694 <_Min_Stack_Size+0x8d7294>
    4e8c:	6822353f 	stmdavs	r2!, {r0, r1, r2, r3, r4, r5, r8, sl, ip, sp}
    4e90:	3c090340 	stccc	3, cr0, [r9], {64}	; 0x40
    4e94:	7df20334 	ldclvc	3, cr0, [r2, #208]!	; 0xd0
    4e98:	028a032e 	addeq	r0, sl, #-1207959552	; 0xb8000000
    4e9c:	7df6033c 	ldclvc	3, cr0, [r6, #240]!	; 0xf0
    4ea0:	01f0032e 	mvnseq	r0, lr, lsr #6
    4ea4:	0e03693c 	mcreq	9, 0, r6, cr3, cr12, {1}
    4ea8:	3d2d2158 	stfccs	f2, [sp, #-352]!	; 0xfffffea0
    4eac:	7dfd0321 	ldclvc	3, cr0, [sp, #132]!	; 0x84
    4eb0:	0003022e 	andeq	r0, r3, lr, lsr #4
    4eb4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4eb8:	00715402 	rsbseq	r5, r1, r2, lsl #8
    4ebc:	12d50308 	sbcsne	r0, r5, #8, 6	; 0x20000000
    4ec0:	4e672101 	powmis	f2, f7, f1
    4ec4:	263c7a03 	ldrtcs	r7, [ip], -r3, lsl #20
    4ec8:	8c033f26 	stchi	15, cr3, [r3], {38}	; 0x26
    4ecc:	1d234a02 	vstmdbne	r3!, {s8-s9}
    4ed0:	353f2b23 	ldrcc	r2, [pc, #-2851]!	; 43b5 <_Min_Stack_Size+0x3fb5>
    4ed4:	09034024 	stmdbeq	r3, {r2, r5, lr}
    4ed8:	db03343c 	blle	d1fd0 <_Min_Stack_Size+0xd1bd0>
    4edc:	7a032e7d 	bvc	d08d8 <_Min_Stack_Size+0xd04d8>
    4ee0:	0200343c 	andeq	r3, r0, #60, 8	; 0x3c000000
    4ee4:	6f030104 	svcvs	0x00030104
    4ee8:	9b03503c 	blls	d8fe0 <_Min_Stack_Size+0xd8be0>
    4eec:	77035802 	strvc	r5, [r3, -r2, lsl #16]
    4ef0:	034e6974 	movteq	r6, #59764	; 0xe974
    4ef4:	df033c13 	svcle	0x00033c13
    4ef8:	98032e7d 	stmdals	r3, {r0, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    4efc:	2d213c02 	stccs	12, cr3, [r1, #-8]!
    4f00:	d703213d 	smladxle	r3, sp, r1, r2
    4f04:	08023c7d 	stmdaeq	r2, {r0, r2, r3, r4, r5, r6, sl, fp, ip, sp}
    4f08:	00010100 	andeq	r0, r1, r0, lsl #2
    4f0c:	72240205 	eorvc	r0, r4, #1342177280	; 0x50000000
    4f10:	ea030800 	b	c6f18 <_Min_Stack_Size+0xc6b18>
    4f14:	2f14010e 	svccs	0x0014010e
    4f18:	01000102 	tsteq	r0, r2, lsl #2
    4f1c:	02050001 	andeq	r0, r5, #1
    4f20:	0800722c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp, lr}
    4f24:	010ef603 	tsteq	lr, r3, lsl #12	; <UNPREDICTABLE>
    4f28:	01022114 	tsteq	r2, r4, lsl r1
    4f2c:	db010100 	blle	45334 <_Min_Stack_Size+0x44f34>
    4f30:	02000008 	andeq	r0, r0, #8
    4f34:	00027700 	andeq	r7, r2, r0, lsl #14
    4f38:	fb010200 	blx	45742 <_Min_Stack_Size+0x45342>
    4f3c:	01000d0e 	tsteq	r0, lr, lsl #26
    4f40:	00010101 	andeq	r0, r1, r1, lsl #2
    4f44:	00010000 	andeq	r0, r1, r0
    4f48:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4f4c:	2f656d6f 	svccs	0x00656d6f
    4f50:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    4f54:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
    4f58:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
    4f5c:	6170736b 	cmnvs	r0, fp, ror #6
    4f60:	502f6563 	eorpl	r6, pc, r3, ror #10
    4f64:	4b2e452e 	blmi	b96424 <_Min_Stack_Size+0xb96024>
    4f68:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
    4f6c:	616c502f 	cmnvs	ip, pc, lsr #32
    4f70:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    4f74:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    4f78:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    4f7c:	5f656275 	svcpl	0x00656275
    4f80:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    4f84:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    4f88:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4f8c:	53422f73 	movtpl	r2, #12147	; 0x2f73
    4f90:	54532f50 	ldrbpl	r2, [r3], #-3920	; 0xfffff0b0
    4f94:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4f98:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    4f9c:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    4fa0:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
    4fa4:	2e007972 	mcrcs	9, 0, r7, cr0, cr2, {3}
    4fa8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4fac:	616c502f 	cmnvs	ip, pc, lsr #32
    4fb0:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
    4fb4:	54532f6d 	ldrbpl	r2, [r3], #-3949	; 0xfffff093
    4fb8:	4332334d 	teqmi	r2, #872415233	; 0x34000001
    4fbc:	5f656275 	svcpl	0x00656275
    4fc0:	465f5746 	ldrbmi	r5, [pc], -r6, asr #14
    4fc4:	72442f34 	subvc	r2, r4, #52, 30	; 0xd0
    4fc8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4fcc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    4fd0:	2f534953 	svccs	0x00534953
    4fd4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    4fd8:	532f6563 			; <UNDEFINED> instruction: 0x532f6563
    4fdc:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    4fe0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4fe4:	2f787834 	svccs	0x00787834
    4fe8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    4fec:	00656475 	rsbeq	r6, r5, r5, ror r4
    4ff0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4ff4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4ff8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4ffc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5000:	2f62696c 	svccs	0x0062696c
    5004:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5008:	00656e69 	rsbeq	r6, r5, r9, ror #28
    500c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5010:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5014:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5018:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    501c:	2f62696c 	svccs	0x0062696c
    5020:	00737973 	rsbseq	r7, r3, r3, ror r9
    5024:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5028:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
    502c:	6f667461 	svcvs	0x00667461
    5030:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    5034:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5038:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    503c:	5f57465f 	svcpl	0x0057465f
    5040:	442f3446 	strtmi	r3, [pc], #-1094	; 5048 <_Min_Stack_Size+0x4c48>
    5044:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5048:	532f7372 			; <UNDEFINED> instruction: 0x532f7372
    504c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5050:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    5054:	4c41485f 	mcrrmi	8, 5, r4, r1, cr15
    5058:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    505c:	2f726576 	svccs	0x00726576
    5060:	00636e49 	rsbeq	r6, r3, r9, asr #28
    5064:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5068:	6c502f2e 	mrrcvs	15, 2, r2, r0, cr14
    506c:	6f667461 	svcvs	0x00667461
    5070:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    5074:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5078:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    507c:	5f57465f 	svcpl	0x0057465f
    5080:	442f3446 	strtmi	r3, [pc], #-1094	; 5088 <_Min_Stack_Size+0x4c88>
    5084:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5088:	432f7372 			; <UNDEFINED> instruction: 0x432f7372
    508c:	5349534d 	movtpl	r5, #37709	; 0x934d
    5090:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    5094:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5098:	74730000 	ldrbtvc	r0, [r3], #-0
    509c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    50a0:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    50a4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    50a8:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
    50ac:	632e7972 			; <UNDEFINED> instruction: 0x632e7972
    50b0:	00000100 	andeq	r0, r0, r0, lsl #2
    50b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    50b8:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    50bc:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
    50c0:	00020068 	andeq	r0, r2, r8, rrx
    50c4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    50c8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    50cc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    50d0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    50d4:	00030068 	andeq	r0, r3, r8, rrx
    50d8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    50dc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    50e0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    50e4:	74730000 	ldrbtvc	r0, [r3], #-0
    50e8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    50ec:	5f787834 	svcpl	0x00787834
    50f0:	5f6c6168 	svcpl	0x006c6168
    50f4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    50f8:	00050068 	andeq	r0, r5, r8, rrx
    50fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    5100:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    5104:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5108:	675f6c61 	ldrbvs	r6, [pc, -r1, ror #24]
    510c:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    5110:	00050068 	andeq	r0, r5, r8, rrx
    5114:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    5118:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    511c:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5120:	645f6c61 	ldrbvs	r6, [pc], #-3169	; 5128 <_Min_Stack_Size+0x4d28>
    5124:	682e616d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}
    5128:	00000500 	andeq	r0, r0, r0, lsl #10
    512c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    5130:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    5134:	61685f78 	smcvs	34296	; 0x85f8
    5138:	32695f6c 	rsbcc	r5, r9, #108, 30	; 0x1b0
    513c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    5140:	73000005 	movwvc	r0, #5
    5144:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    5148:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    514c:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    5150:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    5154:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    5158:	74730000 	ldrbtvc	r0, [r3], #-0
    515c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    5160:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    5164:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    5168:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
    516c:	682e7972 	stmdavs	lr!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
    5170:	00000100 	andeq	r0, r0, r0, lsl #2
    5174:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    5178:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    517c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    5180:	74730000 	ldrbtvc	r0, [r3], #-0
    5184:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    5188:	5f787834 	svcpl	0x00787834
    518c:	5f6c6168 	svcpl	0x006c6168
    5190:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5194:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
    5198:	00000500 	andeq	r0, r0, r0, lsl #10
    519c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    51a0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    51a4:	61685f78 	smcvs	34296	; 0x85f8
    51a8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    51ac:	00000005 	andeq	r0, r0, r5
    51b0:	30020500 	andcc	r0, r2, r0, lsl #10
    51b4:	03080072 	movweq	r0, #32882	; 0x8072
    51b8:	2f0104fa 	svccs	0x000104fa
    51bc:	f003211f 			; <UNDEFINED> instruction: 0xf003211f
    51c0:	93036600 	movwls	r6, #13824	; 0x3600
    51c4:	ed032e7f 	stc	14, cr2, [r3, #-508]	; 0xfffffe04
    51c8:	9f032e00 	svcls	0x00032e00
    51cc:	e103207f 	hlt	0x320f
    51d0:	a0032000 	andge	r2, r3, r0
    51d4:	e0034a7f 	and	r4, r3, pc, ror sl
    51d8:	034d2000 	movteq	r2, #53248	; 0xd000
    51dc:	032e7f9e 			; <UNDEFINED> instruction: 0x032e7f9e
    51e0:	522000e2 	eorpl	r0, r0, #226	; 0xe2
    51e4:	207f9703 	rsbscs	r9, pc, r3, lsl #14
    51e8:	2000e103 	andcs	lr, r0, r3, lsl #2
    51ec:	3c7fa303 	ldclcc	3, cr10, [pc], #-12	; 51e8 <_Min_Stack_Size+0x4de8>
    51f0:	2e00e103 	mvfcss	f6, f3
    51f4:	207fa103 	rsbscs	sl, pc, r3, lsl #2
    51f8:	032e7203 			; <UNDEFINED> instruction: 0x032e7203
    51fc:	e3032e09 	movw	r2, #15881	; 0x3e09
    5200:	21312e00 	teqcs	r1, r0, lsl #28
    5204:	7f990321 	svcvc	0x00990321
    5208:	03222120 			; <UNDEFINED> instruction: 0x03222120
    520c:	e9032073 	stmdb	r3, {r0, r1, r4, r5, r6, sp}
    5210:	a0032e00 	andge	r2, r3, r0, lsl #28
    5214:	3031207f 	eorscc	r2, r1, pc, ror r0
    5218:	2e00de03 	cdpcs	14, 0, cr13, cr0, cr3, {0}
    521c:	21212121 			; <UNDEFINED> instruction: 0x21212121
    5220:	7fa00321 	svcvc	0x00a00321
    5224:	0b023e2e 	bleq	94ae4 <_Min_Stack_Size+0x946e4>
    5228:	00010100 	andeq	r0, r1, r0, lsl #2
    522c:	72d80205 	sbcsvc	r0, r8, #1342177280	; 0x50000000
    5230:	b4030800 	strlt	r0, [r3], #-2048	; 0xfffff800
    5234:	02140101 	andseq	r0, r4, #1073741824	; 0x40000000
    5238:	01010004 	tsteq	r1, r4
    523c:	e0020500 	and	r0, r2, r0, lsl #10
    5240:	03080072 	movweq	r0, #32882	; 0x8072
    5244:	240101c0 	strcs	r0, [r1], #-448	; 0xfffffe40
    5248:	0200241c 	andeq	r2, r0, #28, 8	; 0x1c000000
    524c:	20060204 	andcs	r0, r6, r4, lsl #4
    5250:	1b253106 	blne	951670 <_Min_Stack_Size+0x951270>
    5254:	22212933 	eorcs	r2, r1, #835584	; 0xcc000
    5258:	21211c22 			; <UNDEFINED> instruction: 0x21211c22
    525c:	00673022 	rsbeq	r3, r7, r2, lsr #32
    5260:	03030402 	movweq	r0, #13314	; 0x3402
    5264:	02002e75 	andeq	r2, r0, #1872	; 0x750
    5268:	c8060104 	stmdagt	r6, {r2, r8}
    526c:	01001202 	tsteq	r0, r2, lsl #4
    5270:	02050001 	andeq	r0, r5, #1
    5274:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
    5278:	0101d903 	tsteq	r1, r3, lsl #18
    527c:	0d022101 	stfeqs	f2, [r2, #-4]
    5280:	00010100 	andeq	r0, r1, r0, lsl #2
    5284:	73740205 	cmnvc	r4, #1342177280	; 0x50000000
    5288:	e5030800 	str	r0, [r3, #-2048]	; 0xfffff800
    528c:	21010101 	tstcs	r1, r1, lsl #2
    5290:	01000d02 	tsteq	r0, r2, lsl #26
    5294:	02050001 	andeq	r0, r5, #1
    5298:	08007390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp, lr}
    529c:	0101f103 	tsteq	r1, r3, lsl #2	; <UNPREDICTABLE>
    52a0:	0d022101 	stfeqs	f2, [r2, #-4]
    52a4:	00010100 	andeq	r0, r1, r0, lsl #2
    52a8:	73ac0205 			; <UNDEFINED> instruction: 0x73ac0205
    52ac:	80030800 	andhi	r0, r3, r0, lsl #16
    52b0:	00320102 	eorseq	r0, r2, r2, lsl #2
    52b4:	06010402 	streq	r0, [r1], -r2, lsl #8
    52b8:	03ae0620 			; <UNDEFINED> instruction: 0x03ae0620
    52bc:	0c03200a 	stceq	0, cr2, [r3], {10}
    52c0:	2e71032e 	cdpcs	3, 7, cr0, cr1, cr14, {1}
    52c4:	222a231d 	eorcs	r2, sl, #1946157056	; 0x74000000
    52c8:	21221c22 			; <UNDEFINED> instruction: 0x21221c22
    52cc:	2e0f0321 	cdpcs	3, 0, cr0, cr15, cr1, {1}
    52d0:	1f2e7a03 	svcne	0x002e7a03
    52d4:	22212b21 	eorcs	r2, r1, #33792	; 0x8400
    52d8:	31221f1f 			; <UNDEFINED> instruction: 0x31221f1f
    52dc:	08023e59 	stmdaeq	r2, {r0, r3, r4, r6, r9, sl, fp, ip, sp}
    52e0:	00010100 	andeq	r0, r1, r0, lsl #2
    52e4:	74240205 	strtvc	r0, [r4], #-517	; 0xfffffdfb
    52e8:	a5030800 	strge	r0, [r3, #-2048]	; 0xfffff800
    52ec:	67210102 	strvs	r0, [r1, -r2, lsl #2]!
    52f0:	01000302 	tsteq	r0, r2, lsl #6
    52f4:	02050001 	andeq	r0, r5, #1
    52f8:	08007438 	stmdaeq	r0, {r3, r4, r5, sl, ip, sp, lr}
    52fc:	0105ff03 	tsteq	r5, r3, lsl #30	; <UNPREDICTABLE>
    5300:	33232b23 			; <UNDEFINED> instruction: 0x33232b23
    5304:	1b25312b 	blne	9517b8 <_Min_Stack_Size+0x9513b8>
    5308:	1d401e4c 	stclne	14, cr1, [r0, #-304]	; 0xfffffed0
    530c:	22211b32 	eorcs	r1, r1, #51200	; 0xc800
    5310:	33302121 	teqcc	r0, #1073741832	; 0x40000008
    5314:	411e4c1b 	tstmi	lr, fp, lsl ip
    5318:	23212d1c 			; <UNDEFINED> instruction: 0x23212d1c
    531c:	3531221f 	ldrcc	r2, [r1, #-543]!	; 0xfffffde1
    5320:	4e207903 	cdpmi	9, 2, cr7, cr0, cr3, {0}
    5324:	0324311c 			; <UNDEFINED> instruction: 0x0324311c
    5328:	1f342079 	svcne	0x00342079
    532c:	5931241e 	ldmdbpl	r1!, {r1, r2, r3, r4, sl, sp}
    5330:	0b02305a 	bleq	914a0 <_Min_Stack_Size+0x910a0>
    5334:	00010100 	andeq	r0, r1, r0, lsl #2
    5338:	74f00205 	ldrbtvc	r0, [r0], #517	; 0x205
    533c:	ab030800 	blge	c7344 <_Min_Stack_Size+0xc6f44>
    5340:	2c220106 	stfcss	f0, [r2], #-24	; 0xffffffe8
    5344:	034d2220 	movteq	r2, #53792	; 0xd220
    5348:	85667f88 	strbhi	r7, [r6, #-3976]!	; 0xfffff078
    534c:	3f202103 	svccc	0x00202103
    5350:	2e00d503 	cfsh32cs	mvfx13, mvfx0, #3
    5354:	000a0259 	andeq	r0, sl, r9, asr r2
    5358:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    535c:	00754802 	rsbseq	r4, r5, r2, lsl #16
    5360:	06bb0308 	ldrteq	r0, [fp], r8, lsl #6
    5364:	202c2201 	eorcs	r2, ip, r1, lsl #4
    5368:	03594d22 	cmpeq	r9, #2176	; 0x880
    536c:	03207ef7 			; <UNDEFINED> instruction: 0x03207ef7
    5370:	03200189 			; <UNDEFINED> instruction: 0x03200189
    5374:	5b2e7ef7 	blpl	ba4f58 <_Min_Stack_Size+0xba4b58>
    5378:	3f202103 	svccc	0x00202103
    537c:	2e00e503 	cfsh32cs	mvfx14, mvfx0, #3
    5380:	000a0259 	andeq	r0, sl, r9, asr r2
    5384:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5388:	0075a002 	rsbseq	sl, r5, r2
    538c:	06ce0308 	strbeq	r0, [lr], r8, lsl #6
    5390:	201c2401 	andscs	r2, ip, r1, lsl #8
    5394:	7ee60332 	mcrvc	3, 7, r0, cr6, cr2, {1}
    5398:	019a0320 	orrseq	r0, sl, r0, lsr #6
    539c:	e3033f20 	movw	r3, #16160	; 0x3f20
    53a0:	0377747e 	cmneq	r7, #2113929216	; 0x7e000000
    53a4:	033f2021 	teqeq	pc, #33	; 0x21
    53a8:	03692e45 	cmneq	r9, #1104	; 0x450
    53ac:	033f2035 	teqeq	pc, #53	; 0x35
    53b0:	032e00fd 			; <UNDEFINED> instruction: 0x032e00fd
    53b4:	03207ed1 			; <UNDEFINED> instruction: 0x03207ed1
    53b8:	5b2001af 	blpl	805a7c <_Min_Stack_Size+0x80567c>
    53bc:	000c025b 	andeq	r0, ip, fp, asr r2
    53c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    53c4:	00762402 	rsbseq	r2, r6, r2, lsl #8
    53c8:	06e90308 	strbteq	r0, [r9], r8, lsl #6
    53cc:	02021301 	andeq	r1, r2, #67108864	; 0x4000000
    53d0:	00010100 	andeq	r0, r1, r0, lsl #2
    53d4:	76280205 	strtvc	r0, [r8], -r5, lsl #4
    53d8:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    53dc:	b0030106 	andlt	r0, r3, r6, lsl #2
    53e0:	d0032e7c 	andle	r2, r3, ip, ror lr
    53e4:	b0032003 	andlt	r2, r3, r3
    53e8:	9b03207c 	blls	cd5e0 <_Min_Stack_Size+0xcd1e0>
    53ec:	e703667f 	smlsdx	r3, pc, r6, r6	; <UNPREDICTABLE>
    53f0:	99032e00 	stmdbls	r3, {r9, sl, fp, sp}
    53f4:	e9032e7f 	stmdb	r3, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    53f8:	97032000 	strls	r2, [r3, -r0]
    53fc:	ea03207f 	b	cd600 <_Min_Stack_Size+0xcd200>
    5400:	96034a00 	strls	r4, [r3], -r0, lsl #20
    5404:	034b207f 	movteq	r2, #45183	; 0xb07f
    5408:	032e00eb 			; <UNDEFINED> instruction: 0x032e00eb
    540c:	03207f95 			; <UNDEFINED> instruction: 0x03207f95
    5410:	034a00e7 	movteq	r0, #41191	; 0xa0e7
    5414:	03207fa1 			; <UNDEFINED> instruction: 0x03207fa1
    5418:	032000df 			; <UNDEFINED> instruction: 0x032000df
    541c:	31207f99 			; <UNDEFINED> instruction: 0x31207f99
    5420:	1f282a2f 	svcne	0x00282a2f
    5424:	2000e303 	andcs	lr, r0, r3, lsl #6
    5428:	2e7f9c03 	cdpcs	12, 7, cr9, cr15, cr3, {0}
    542c:	03312f1d 	teqeq	r1, #29, 30	; 0x74
    5430:	212000e5 	smulwtcs	r0, r5, r0
    5434:	7f920321 	svcvc	0x00920321
    5438:	e5033320 	str	r3, [r3, #-800]	; 0xfffffce0
    543c:	9c032000 	stcls	0, cr2, [r3], {-0}
    5440:	31222e7f 			; <UNDEFINED> instruction: 0x31222e7f
    5444:	33212d2f 			; <UNDEFINED> instruction: 0x33212d2f
    5448:	594d4da1 	stmdbpl	sp, {r0, r5, r7, r8, sl, fp, lr}^
    544c:	d303593f 	movwle	r5, #14655	; 0x393f
    5450:	c4033c00 	strgt	r3, [r3], #-3072	; 0xfffff400
    5454:	0f023c03 	svceq	0x00023c03
    5458:	00010100 	andeq	r0, r1, r0, lsl #2
    545c:	771c0205 	ldrvc	r0, [ip, -r5, lsl #4]
    5460:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    5464:	c2030106 	andgt	r0, r3, #-2147483647	; 0x80000001
    5468:	214f2e7c 	hvccs	62188	; 0xf2ec
    546c:	4e207a03 	vmulmi.f32	s14, s0, s6
    5470:	232f3e1c 			; <UNDEFINED> instruction: 0x232f3e1c
    5474:	251e1f1d 	ldrcs	r1, [lr, #-3869]	; 0xfffff0e3
    5478:	03593121 	cmpeq	r9, #1073741832	; 0x40000008
    547c:	023c03b6 	eorseq	r0, ip, #-671088638	; 0xd8000002
    5480:	01010008 	tsteq	r1, r8
    5484:	70020500 	andvc	r0, r2, r0, lsl #10
    5488:	03080077 	movweq	r0, #32887	; 0x8077
    548c:	0301078a 	movweq	r0, #6026	; 0x178a
    5490:	d94a7cce 	stmdble	sl, {r1, r2, r3, r6, r7, sl, fp, ip, sp, lr}^
    5494:	2003b103 	andcs	fp, r3, r3, lsl #2
    5498:	3c7de203 	lfmcc	f6, 3, [sp], #-12
    549c:	3c7eb903 	ldclcc	9, cr11, [lr], #-12
    54a0:	667f9b03 	ldrbtvs	r9, [pc], -r3, lsl #22
    54a4:	2e00e703 	cdpcs	7, 0, cr14, cr0, cr3, {0}
    54a8:	2e7f9903 	cdpcs	9, 7, cr9, cr15, cr3, {0}
    54ac:	2000e903 	andcs	lr, r0, r3, lsl #18
    54b0:	207f9703 	rsbscs	r9, pc, r3, lsl #14
    54b4:	4a00ea03 	bmi	3fcc8 <_Min_Stack_Size+0x3f8c8>
    54b8:	207f9603 	rsbscs	r9, pc, r3, lsl #12
    54bc:	00eb034b 	rsceq	r0, fp, fp, asr #6
    54c0:	7f95032e 	svcvc	0x0095032e
    54c4:	00e70320 	rsceq	r0, r7, r0, lsr #6
    54c8:	7fa1034a 	svcvc	0x00a1034a
    54cc:	00df0320 	sbcseq	r0, pc, r0, lsr #6
    54d0:	7f990320 	svcvc	0x00990320
    54d4:	2a2f3120 	bcs	bd195c <_Min_Stack_Size+0xbd155c>
    54d8:	e3031f28 	movw	r1, #16168	; 0x3f28
    54dc:	9c032000 	stcls	0, cr2, [r3], {-0}
    54e0:	2f1d2e7f 	svccs	0x001d2e7f
    54e4:	00e50331 	rsceq	r0, r5, r1, lsr r3
    54e8:	03212120 			; <UNDEFINED> instruction: 0x03212120
    54ec:	33207f92 			; <UNDEFINED> instruction: 0x33207f92
    54f0:	2000e503 	andcs	lr, r0, r3, lsl #10
    54f4:	2e7f9c03 	cdpcs	12, 7, cr9, cr15, cr3, {0}
    54f8:	2f1f3222 	svccs	0x001f3222
    54fc:	a133211f 	teqge	r3, pc, lsl r1
    5500:	3f594d4d 	svccc	0x00594d4d
    5504:	00d30359 	sbcseq	r0, r3, r9, asr r3
    5508:	03d7033c 	bicseq	r0, r7, #60, 6	; 0xf0000000
    550c:	0012023c 	andseq	r0, r2, ip, lsr r2
    5510:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5514:	00789402 	rsbseq	r9, r8, r2, lsl #8
    5518:	07950308 	ldreq	r0, [r5, r8, lsl #6]
    551c:	7ceb0301 	stclvc	3, cr0, [fp], #4
    5520:	03bd4c3c 			; <UNDEFINED> instruction: 0x03bd4c3c
    5524:	03200392 			; <UNDEFINED> instruction: 0x03200392
    5528:	03587dd7 	cmpeq	r8, #13760	; 0x35c0
    552c:	033c7eb9 	teqeq	ip, #2960	; 0xb90
    5530:	03667f9b 	cmneq	r6, #620	; 0x26c
    5534:	032e00e7 			; <UNDEFINED> instruction: 0x032e00e7
    5538:	032e7f99 			; <UNDEFINED> instruction: 0x032e7f99
    553c:	032000e9 			; <UNDEFINED> instruction: 0x032000e9
    5540:	03207f97 			; <UNDEFINED> instruction: 0x03207f97
    5544:	034a00ea 	movteq	r0, #41194	; 0xa0ea
    5548:	4b207f96 	blmi	8253a8 <_Min_Stack_Size+0x824fa8>
    554c:	2e00eb03 	vmlacs.f64	d14, d0, d3
    5550:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    5554:	4a00e703 	bmi	3f168 <_Min_Stack_Size+0x3ed68>
    5558:	207fa103 	rsbscs	sl, pc, r3, lsl #2
    555c:	2000df03 	andcs	sp, r0, r3, lsl #30
    5560:	207f9903 	rsbscs	r9, pc, r3, lsl #18
    5564:	282a2f31 	stmdacs	sl!, {r0, r4, r5, r8, r9, sl, fp, sp}
    5568:	00e3031f 	rsceq	r0, r3, pc, lsl r3
    556c:	7f9c0320 	svcvc	0x009c0320
    5570:	312f1d2e 			; <UNDEFINED> instruction: 0x312f1d2e
    5574:	2000e503 	andcs	lr, r0, r3, lsl #10
    5578:	92032121 	andls	r2, r3, #1073741832	; 0x40000008
    557c:	0333207f 	teqeq	r3, #127	; 0x7f
    5580:	032000e5 			; <UNDEFINED> instruction: 0x032000e5
    5584:	222e7f9c 	eorcs	r7, lr, #156, 30	; 0x270
    5588:	1f2f1f32 	svcne	0x002f1f32
    558c:	4da13321 	stcmi	3, cr3, [r1, #132]!	; 0x84
    5590:	593f594d 	ldmdbpl	pc!, {r0, r2, r3, r6, r8, fp, ip, lr}	; <UNPREDICTABLE>
    5594:	3c00d303 	stccc	3, cr13, [r0], {3}
    5598:	3c03e203 	sfmcc	f6, 1, [r3], {3}
    559c:	01001302 	tsteq	r0, r2, lsl #6
    55a0:	02050001 	andeq	r0, r5, #1
    55a4:	080079c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, lr}
    55a8:	0107a103 	tsteq	r7, r3, lsl #2
    55ac:	2e7ccc03 	cdpcs	12, 7, cr12, cr12, cr3, {0}
    55b0:	3c03b403 	cfstrscc	mvf11, [r3], {3}
    55b4:	207ccc03 	rsbscs	ip, ip, r3, lsl #24
    55b8:	03b30393 			; <UNDEFINED> instruction: 0x03b30393
    55bc:	7dcb0320 	stclvc	3, cr0, [fp, #128]	; 0x80
    55c0:	7eb9033c 	mrcvc	3, 5, r0, cr9, cr12, {1}
    55c4:	7f9b033c 	svcvc	0x009b033c
    55c8:	00e70366 	rsceq	r0, r7, r6, ror #6
    55cc:	7f99032e 	svcvc	0x0099032e
    55d0:	00e9032e 	rsceq	r0, r9, lr, lsr #6
    55d4:	7f970320 	svcvc	0x00970320
    55d8:	00ea0320 	rsceq	r0, sl, r0, lsr #6
    55dc:	7f96034a 	svcvc	0x0096034a
    55e0:	eb034b20 	bl	d8268 <_Min_Stack_Size+0xd7e68>
    55e4:	95032e00 	strls	r2, [r3, #-3584]	; 0xfffff200
    55e8:	e703207f 	smlsdx	r3, pc, r0, r2	; <UNPREDICTABLE>
    55ec:	a1034a00 	tstge	r3, r0, lsl #20
    55f0:	df03207f 	svcle	0x0003207f
    55f4:	99032000 	stmdbls	r3, {sp}
    55f8:	2f31207f 	svccs	0x0031207f
    55fc:	031f282a 	tsteq	pc, #2752512	; 0x2a0000
    5600:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    5604:	1d2e7f9c 	stcne	15, cr7, [lr, #-624]!	; 0xfffffd90
    5608:	e503312f 	str	r3, [r3, #-303]	; 0xfffffed1
    560c:	21212000 			; <UNDEFINED> instruction: 0x21212000
    5610:	207f9203 	rsbscs	r9, pc, r3, lsl #4
    5614:	00e50333 	rsceq	r0, r5, r3, lsr r3
    5618:	7f9c0320 	svcvc	0x009c0320
    561c:	1f32222e 	svcne	0x0032222e
    5620:	33211f2f 			; <UNDEFINED> instruction: 0x33211f2f
    5624:	594d4da1 	stmdbpl	sp, {r0, r5, r7, r8, sl, fp, lr}^
    5628:	d303593f 	movwle	r5, #14655	; 0x393f
    562c:	ee033c00 	cdp	12, 0, cr3, cr3, cr0, {0}
    5630:	00083c03 	andeq	r3, r8, r3, lsl #24
    5634:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5638:	007adc02 	rsbseq	sp, sl, r2, lsl #24
    563c:	07ae0308 	streq	r0, [lr, r8, lsl #6]!
    5640:	7cec0301 	stclvc	3, cr0, [ip], #4
    5644:	0394032e 	orrseq	r0, r4, #-1207959552	; 0xb8000000
    5648:	7cec033c 	stclvc	3, cr0, [ip], #240	; 0xf0
    564c:	93039320 	movwls	r9, #13088	; 0x3320
    5650:	be032003 	cdplt	0, 0, cr2, cr3, cr3, {0}
    5654:	b9033c7d 	stmdblt	r3, {r0, r2, r3, r4, r5, r6, sl, fp, ip, sp}
    5658:	89033c7e 	stmdbhi	r3, {r1, r2, r3, r4, r5, r6, sl, fp, ip, sp}
    565c:	92036604 	andls	r6, r3, #4, 12	; 0x400000
    5660:	e7033c7b 	smlsdx	r3, fp, ip, r3
    5664:	99032e00 	stmdbls	r3, {r9, sl, fp, sp}
    5668:	e9032e7f 	stmdb	r3, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    566c:	97032000 	strls	r2, [r3, -r0]
    5670:	ea03207f 	b	cd874 <_Min_Stack_Size+0xcd474>
    5674:	96034a00 	strls	r4, [r3], -r0, lsl #20
    5678:	034b207f 	movteq	r2, #45183	; 0xb07f
    567c:	032e00eb 			; <UNDEFINED> instruction: 0x032e00eb
    5680:	03207f95 			; <UNDEFINED> instruction: 0x03207f95
    5684:	034a00e7 	movteq	r0, #41191	; 0xa0e7
    5688:	03207fa1 			; <UNDEFINED> instruction: 0x03207fa1
    568c:	032000df 			; <UNDEFINED> instruction: 0x032000df
    5690:	31207f99 			; <UNDEFINED> instruction: 0x31207f99
    5694:	1f282a2f 	svcne	0x00282a2f
    5698:	2000e303 	andcs	lr, r0, r3, lsl #6
    569c:	2e7f9c03 	cdpcs	12, 7, cr9, cr15, cr3, {0}
    56a0:	03312f1d 	teqeq	r1, #29, 30	; 0x74
    56a4:	212000e5 	smulwtcs	r0, r5, r0
    56a8:	7f920321 	svcvc	0x00920321
    56ac:	e5033320 	str	r3, [r3, #-800]	; 0xfffffce0
    56b0:	9c032000 	stcls	0, cr2, [r3], {-0}
    56b4:	32222e7f 	eorcc	r2, r2, #2032	; 0x7f0
    56b8:	211f2f1f 	tstcs	pc, pc, lsl pc	; <UNPREDICTABLE>
    56bc:	4d4da133 	stfmip	f2, [sp, #-204]	; 0xffffff34
    56c0:	03593f59 	cmpeq	r9, #356	; 0x164
    56c4:	033c00d3 	teqeq	ip, #211	; 0xd3
    56c8:	084a03fb 	stmdaeq	sl, {r0, r1, r3, r4, r5, r6, r7, r8, r9}^
    56cc:	00010100 	andeq	r0, r1, r0, lsl #2
    56d0:	7c000205 	sfmvc	f0, 4, [r0], {5}
    56d4:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
    56d8:	02130107 	andseq	r0, r3, #-1073741823	; 0xc0000001
    56dc:	01010002 	tsteq	r1, r2
    56e0:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    56e4:	0308007c 	movweq	r0, #32892	; 0x807c
    56e8:	410107c1 	smlabtmi	r1, r1, r7, r0
    56ec:	7db00325 	ldcvc	3, cr0, [r0, #148]!	; 0x94
    56f0:	02cb0320 	sbceq	r0, fp, #32, 6	; 0x80000000
    56f4:	301d7720 	andscc	r7, sp, r0, lsr #14
    56f8:	1b251f2d 	blne	94d3b4 <_Min_Stack_Size+0x94cfb4>
    56fc:	2f302121 	svccs	0x00302121
    5700:	1b335b31 	blne	cdc3cc <_Min_Stack_Size+0xcdbfcc>
    5704:	1c411e4c 	mcrrne	14, 4, r1, r1, cr12
    5708:	2121232d 			; <UNDEFINED> instruction: 0x2121232d
    570c:	2e7da503 	cdpcs	5, 7, cr10, cr13, cr3, {0}
    5710:	6600f003 	strvs	pc, [r0], -r3
    5714:	207f9303 	rsbscs	r9, pc, r3, lsl #6
    5718:	2e00ed03 	cdpcs	13, 0, cr14, cr0, cr3, {0}
    571c:	207f9f03 	rsbscs	r9, pc, r3, lsl #30
    5720:	2000e103 	andcs	lr, r0, r3, lsl #2
    5724:	4a7fa003 	bmi	1fed738 <_Min_Stack_Size+0x1fed338>
    5728:	2000e003 	andcs	lr, r0, r3
    572c:	7f9e034d 	svcvc	0x009e034d
    5730:	00e2032e 	rsceq	r0, r2, lr, lsr #6
    5734:	97035220 	strls	r5, [r3, -r0, lsr #4]
    5738:	e103207f 	hlt	0x320f
    573c:	a0032000 	andge	r2, r3, r0
    5740:	03313c7f 	teqeq	r1, #32512	; 0x7f00
    5744:	032e00e4 			; <UNDEFINED> instruction: 0x032e00e4
    5748:	03207f90 			; <UNDEFINED> instruction: 0x03207f90
    574c:	de032e0e 	cdple	14, 0, cr2, cr3, cr14, {0}
    5750:	03332e00 	teqeq	r3, #0, 28
    5754:	21207f99 			; <UNDEFINED> instruction: 0x21207f99
    5758:	00e00322 	rsceq	r0, r0, r2, lsr #6
    575c:	21251c20 			; <UNDEFINED> instruction: 0x21251c20
    5760:	2e7f9103 	expcse	f1, f3
    5764:	312e0903 			; <UNDEFINED> instruction: 0x312e0903
    5768:	00de0330 	sbcseq	r0, lr, r0, lsr r3
    576c:	03212420 			; <UNDEFINED> instruction: 0x03212420
    5770:	032e7fa0 			; <UNDEFINED> instruction: 0x032e7fa0
    5774:	023c02c3 	eorseq	r0, ip, #805306380	; 0x3000000c
    5778:	0101000f 	tsteq	r1, pc
    577c:	10020500 	andne	r0, r2, r0, lsl #10
    5780:	0308007d 	movweq	r0, #32893	; 0x807d
    5784:	330107e2 	movwcc	r0, #6114	; 0x17e2
    5788:	207de703 	rsbscs	lr, sp, r3, lsl #14
    578c:	20029403 	andcs	r9, r2, r3, lsl #8
    5790:	033f3520 	teqeq	pc, #32, 10	; 0x8000000
    5794:	0a032e76 	beq	d1174 <_Min_Stack_Size+0xd0d74>
    5798:	7de20320 	stclvc	3, cr0, [r2, #128]!	; 0x80
    579c:	7e322a3c 	mrcvc	10, 1, r2, cr2, cr12, {1}
    57a0:	02a40332 	adceq	r0, r4, #-939524096	; 0xc8000000
    57a4:	7dd8033c 	ldclvc	3, cr0, [r8, #240]	; 0xf0
    57a8:	3254404a 	subscc	r4, r4, #74	; 0x4a
    57ac:	3f9e0e03 	svccc	0x009e0e03
    57b0:	2e029303 	cdpcs	3, 0, cr9, cr2, cr3, {0}
    57b4:	e1035936 	tst	r3, r6, lsr r9
    57b8:	023f3c7d 	eorseq	r3, pc, #32000	; 0x7d00
    57bc:	01010009 	tsteq	r1, r9
    57c0:	b8020500 	stmdalt	r2, {r8, sl}
    57c4:	0308007d 	movweq	r0, #32893	; 0x807d
    57c8:	21010884 	smlabbcs	r1, r4, r8, r0
    57cc:	207dc903 	rsbscs	ip, sp, r3, lsl #18
    57d0:	2002b603 	andcs	fp, r2, r3, lsl #12
    57d4:	79034023 	stmdbvc	r3, {r0, r1, r5, lr}
    57d8:	200a032e 	andcs	r0, sl, lr, lsr #6
    57dc:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    57e0:	c003200a 	andgt	r2, r3, sl
    57e4:	322a3c7d 	eorcc	r3, sl, #32000	; 0x7d00
    57e8:	c603327e 			; <UNDEFINED> instruction: 0xc603327e
    57ec:	ba033c02 	blt	d47fc <_Min_Stack_Size+0xd43fc>
    57f0:	329a667d 	addscc	r6, sl, #131072000	; 0x7d00000
    57f4:	3f3c0e03 	svccc	0x003c0e03
    57f8:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    57fc:	2b2e02c4 	blcs	b86314 <_Min_Stack_Size+0xb85f14>
    5800:	592e0903 	stmdbpl	lr!, {r0, r1, r8, fp}
    5804:	2e7dbe03 	cdpcs	14, 7, cr11, cr13, cr3, {0}
    5808:	0009023f 	andeq	r0, r9, pc, lsr r2
    580c:	Address 0x000000000000580c is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000b8 	strheq	r0, [r0], -r8
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
      14:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff60 <_estack+0xdffcff60>
      18:	72662f65 	rsbvc	r2, r6, #404	; 0x194
      1c:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
      20:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
      24:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
      28:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
      2c:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
      30:	4b2e4b2e 	blmi	b92cf0 <_Min_Stack_Size+0xb928f0>
      34:	502f412e 	eorpl	r4, pc, lr, lsr #2
      38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
      3c:	732f7463 			; <UNDEFINED> instruction: 0x732f7463
      40:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      44:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
      48:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
      4c:	6f776f6c 	svcvs	0x00776f6c
      50:	2f646c72 	svccs	0x00646c72
      54:	2f637253 	svccs	0x00637253
      58:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
      5c:	5f707574 	svcpl	0x00707574
      60:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      64:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
      68:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
      6c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
      70:	2f656d6f 	svccs	0x00656d6f
      74:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
      78:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
      7c:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
      80:	6170736b 	cmnvs	r0, fp, ror #6
      84:	502f6563 	eorpl	r6, pc, r3, ror #10
      88:	4b2e452e 	blmi	b91548 <_Min_Stack_Size+0xb91148>
      8c:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
      90:	6f72502f 	svcvs	0x0072502f
      94:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      98:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
      9c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
      a0:	685f3932 	ldmdavs	pc, {r1, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
      a4:	6f6c6c65 	svcvs	0x006c6c65
      a8:	6c726f77 	ldclvs	15, cr6, [r2], #-476	; 0xfffffe24
      ac:	4e470064 	cdpmi	0, 4, cr0, cr7, cr4, {3}
      b0:	53412055 	movtpl	r2, #4181	; 0x1055
      b4:	322e3220 	eorcc	r3, lr, #32, 4
      b8:	80010036 	andhi	r0, r1, r6, lsr r0
      bc:	00000a9e 	muleq	r0, lr, sl
      c0:	00120004 	andseq	r0, r2, r4
      c4:	01040000 	mrseq	r0, (UNDEF: 4)
      c8:	00000298 	muleq	r0, r8, r2
      cc:	0003ca01 	andeq	ip, r3, r1, lsl #20
      d0:	00087a00 	andeq	r7, r8, r0, lsl #20
      d4:	00009800 	andeq	r9, r0, r0, lsl #16
      d8:	00000000 	andeq	r0, r0, r0
      dc:	0000b700 	andeq	fp, r0, r0, lsl #14
      e0:	02010200 	andeq	r0, r1, #0, 4
      e4:	00029455 	andeq	r9, r2, r5, asr r4
      e8:	099b0300 	ldmibeq	fp, {r8, r9}
      ec:	03720000 	cmneq	r2, #0
      f0:	0000048d 	andeq	r0, r0, sp, lsl #9
      f4:	03bc0374 			; <UNDEFINED> instruction: 0x03bc0374
      f8:	03750000 	cmneq	r5, #0
      fc:	000008f9 	strdeq	r0, [r0], -r9
     100:	04eb0376 	strbteq	r0, [fp], #886	; 0x376
     104:	037b0000 	cmneq	fp, #0
     108:	000009fe 	strdeq	r0, [r0], -lr
     10c:	0422037c 	strteq	r0, [r2], #-892	; 0xfffffc84
     110:	037e0000 	cmneq	lr, #0
     114:	000005e2 	andeq	r0, r0, r2, ror #11
     118:	013e037f 	teqeq	lr, pc, ror r3
     11c:	03000000 	movweq	r0, #0
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
     124:	09e10301 	stmibeq	r1!, {r0, r8, r9}^
     128:	03020000 	movweq	r0, #8192	; 0x2000
     12c:	00000130 	andeq	r0, r0, r0, lsr r1
     130:	08c20303 	stmiaeq	r2, {r0, r1, r8, r9}^
     134:	03040000 	movweq	r0, #16384	; 0x4000
     138:	00000b27 	andeq	r0, r0, r7, lsr #22
     13c:	0a480305 	beq	1200d58 <_Min_Stack_Size+0x1200958>
     140:	03060000 	movweq	r0, #24576	; 0x6000
     144:	00000b4b 	andeq	r0, r0, fp, asr #22
     148:	08670307 	stmdaeq	r7!, {r0, r1, r2, r8, r9}^
     14c:	03080000 	movweq	r0, #32768	; 0x8000
     150:	000006c4 	andeq	r0, r0, r4, asr #13
     154:	08090309 	stmdaeq	r9, {r0, r3, r8, r9}
     158:	030a0000 	movweq	r0, #40960	; 0xa000
     15c:	0000074d 	andeq	r0, r0, sp, asr #14
     160:	057a030b 	ldrbeq	r0, [sl, #-779]!	; 0xfffffcf5
     164:	030c0000 	movweq	r0, #49152	; 0xc000
     168:	000006d9 	ldrdeq	r0, [r0], -r9
     16c:	0469030d 	strbteq	r0, [r9], #-781	; 0xfffffcf3
     170:	030e0000 	movweq	r0, #57344	; 0xe000
     174:	00000690 	muleq	r0, r0, r6
     178:	01e4030f 	mvneq	r0, pc, lsl #6
     17c:	03100000 	tsteq	r0, #0
     180:	0000047b 	andeq	r0, r0, fp, ror r4
     184:	0ada0311 	beq	ff680dd0 <_estack+0xdf650dd0>
     188:	03120000 	tsteq	r2, #0
     18c:	00000531 	andeq	r0, r0, r1, lsr r5
     190:	001e0313 	andseq	r0, lr, r3, lsl r3
     194:	03140000 	tsteq	r4, #0
     198:	00000043 	andeq	r0, r0, r3, asr #32
     19c:	0b0b0315 	bleq	2c0df8 <_Min_Stack_Size+0x2c09f8>
     1a0:	03160000 	tsteq	r6, #0
     1a4:	000001f6 	strdeq	r0, [r0], -r6
     1a8:	07e00317 			; <UNDEFINED> instruction: 0x07e00317
     1ac:	03180000 	tsteq	r8, #0
     1b0:	0000065e 	andeq	r0, r0, lr, asr r6
     1b4:	08460319 	stmdaeq	r6, {r0, r3, r4, r8, r9}^
     1b8:	031a0000 	tsteq	sl, #0
     1bc:	000005ef 	andeq	r0, r0, pc, ror #11
     1c0:	0a3e031b 	beq	f80e34 <_Min_Stack_Size+0xf80a34>
     1c4:	031c0000 	tsteq	ip, #0
     1c8:	00000b41 	andeq	r0, r0, r1, asr #22
     1cc:	0918031d 	ldmdbeq	r8, {r0, r2, r3, r4, r8, r9}
     1d0:	031e0000 	tsteq	lr, #0
     1d4:	0000007b 	andeq	r0, r0, fp, ror r0
     1d8:	0acd031f 	beq	ff340e5c <_estack+0xdf310e5c>
     1dc:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1e0:	00000683 	andeq	r0, r0, r3, lsl #13
     1e4:	01080321 	tsteq	r8, r1, lsr #6
     1e8:	03220000 			; <UNDEFINED> instruction: 0x03220000
     1ec:	00000570 	andeq	r0, r0, r0, ror r5
     1f0:	06cf0323 	strbeq	r0, [pc], r3, lsr #6
     1f4:	03240000 			; <UNDEFINED> instruction: 0x03240000
     1f8:	00000166 	andeq	r0, r0, r6, ror #2
     1fc:	08ed0325 	stmiaeq	sp!, {r0, r2, r5, r8, r9}^
     200:	03260000 			; <UNDEFINED> instruction: 0x03260000
     204:	00000a22 	andeq	r0, r0, r2, lsr #20
     208:	05470327 	strbeq	r0, [r7, #-807]	; 0xfffffcd9
     20c:	03280000 			; <UNDEFINED> instruction: 0x03280000
     210:	000000f9 	strdeq	r0, [r0], -r9
     214:	02580329 	subseq	r0, r8, #-1543503872	; 0xa4000000
     218:	032a0000 			; <UNDEFINED> instruction: 0x032a0000
     21c:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     220:	0276032b 	rsbseq	r0, r6, #-1409286144	; 0xac000000
     224:	032c0000 			; <UNDEFINED> instruction: 0x032c0000
     228:	00000609 	andeq	r0, r0, r9, lsl #12
     22c:	0415032d 	ldreq	r0, [r5], #-813	; 0xfffffcd3
     230:	032e0000 			; <UNDEFINED> instruction: 0x032e0000
     234:	00000922 	andeq	r0, r0, r2, lsr #18
     238:	085e032f 	ldmdaeq	lr, {r0, r1, r2, r3, r5, r8, r9}^
     23c:	03300000 	teqeq	r0, #0
     240:	00000148 	andeq	r0, r0, r8, asr #2
     244:	06ba0331 			; <UNDEFINED> instruction: 0x06ba0331
     248:	03320000 	teqeq	r2, #0
     24c:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     250:	024d0333 	subeq	r0, sp, #-872415232	; 0xcc000000
     254:	03340000 	teqeq	r4, #0
     258:	000006f9 	strdeq	r0, [r0], -r9
     25c:	02370335 	eorseq	r0, r7, #-738197504	; 0xd4000000
     260:	03360000 	teqeq	r6, #0
     264:	0000096f 	andeq	r0, r0, pc, ror #18
     268:	0a100337 	beq	400f4c <_Min_Stack_Size+0x400b4c>
     26c:	03380000 	teqeq	r8, #0
     270:	00000ae3 	andeq	r0, r0, r3, ror #21
     274:	050a0339 	streq	r0, [sl, #-825]	; 0xfffffcc7
     278:	033a0000 	teqeq	sl, #0
     27c:	00000671 	andeq	r0, r0, r1, ror r6
     280:	07c0033b 			; <UNDEFINED> instruction: 0x07c0033b
     284:	033c0000 	teqeq	ip, #0
     288:	00000655 	andeq	r0, r0, r5, asr r6
     28c:	020c033d 	andeq	r0, ip, #-201326592	; 0xf4000000
     290:	033e0000 	teqeq	lr, #0
     294:	00000704 	andeq	r0, r0, r4, lsl #14
     298:	0035033f 	eorseq	r0, r5, pc, lsr r3
     29c:	00c00000 	sbceq	r0, r0, r0
     2a0:	00018d03 	andeq	r8, r1, r3, lsl #26
     2a4:	0300c100 	movweq	ip, #256	; 0x100
     2a8:	00000b19 	andeq	r0, r0, r9, lsl fp
     2ac:	e10300c2 	smlabt	r3, r2, r0, r0
     2b0:	c3000008 	movwgt	r0, #8
     2b4:	00990300 	addseq	r0, r9, r0, lsl #6
     2b8:	00c40000 	sbceq	r0, r4, r0
     2bc:	00005103 	andeq	r5, r0, r3, lsl #2
     2c0:	0300c500 	movweq	ip, #1280	; 0x500
     2c4:	0000042e 	andeq	r0, r0, lr, lsr #8
     2c8:	ae0300c6 	cdpge	0, 0, cr0, cr3, cr6, {6}
     2cc:	c7000006 	strgt	r0, [r0, -r6]
     2d0:	04af0300 	strteq	r0, [pc], #768	; 2d8 <_Min_Heap_Size+0xd8>
     2d4:	00c80000 	sbceq	r0, r8, r0
     2d8:	00006303 	andeq	r6, r0, r3, lsl #6
     2dc:	0300c900 	movweq	ip, #2304	; 0x900
     2e0:	000004d7 	ldrdeq	r0, [r0], -r7
     2e4:	790300ca 	stmdbvc	r3, {r1, r3, r6, r7}
     2e8:	cb000009 	blgt	314 <_Min_Heap_Size+0x114>
     2ec:	0b300300 	bleq	c00ef4 <_Min_Stack_Size+0xc00af4>
     2f0:	00cc0000 	sbceq	r0, ip, r0
     2f4:	00074103 	andeq	r4, r7, r3, lsl #2
     2f8:	0300cd00 	movweq	ip, #3328	; 0xd00
     2fc:	00000a88 	andeq	r0, r0, r8, lsl #21
     300:	140300ce 	strne	r0, [r3], #-206	; 0xffffff32
     304:	d0000008 	andle	r0, r0, r8
     308:	0ac40300 	beq	ff100f10 <_estack+0xdf0d0f10>
     30c:	00d10000 	sbcseq	r0, r1, r0
     310:	000a9203 	andeq	r9, sl, r3, lsl #4
     314:	0300d200 	movweq	sp, #512	; 0x200
     318:	00000070 	andeq	r0, r0, r0, ror r0
     31c:	c50300d3 	strgt	r0, [r3, #-211]	; 0xffffff2d
     320:	d4000000 	strle	r0, [r0], #-0
     324:	01da0300 	bicseq	r0, sl, r0, lsl #6
     328:	00d50000 	sbcseq	r0, r5, r0
     32c:	0004c603 	andeq	ip, r4, r3, lsl #12
     330:	0300d600 	movweq	sp, #1536	; 0x600
     334:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     338:	5f0300d7 	svcpl	0x000300d7
     33c:	d8000007 	stmdale	r0, {r0, r1, r2}
     340:	09f10300 	ldmibeq	r1!, {r8, r9}^
     344:	00d90000 	sbcseq	r0, r9, r0
     348:	00064103 	andeq	r4, r6, r3, lsl #2
     34c:	0000da00 	andeq	sp, r0, r0, lsl #20
     350:	0008d704 	andeq	sp, r8, r4, lsl #14
     354:	25ba0200 	ldrcs	r0, [sl, #512]!	; 0x200
     358:	05000000 	streq	r0, [r0, #-0]
     35c:	07d40601 	ldrbeq	r0, [r4, r1, lsl #12]
     360:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
     364:	03000000 	movweq	r0, #0
     368:	0002b11d 	andeq	fp, r2, sp, lsl r1
     36c:	08010500 	stmdaeq	r1, {r8, sl}
     370:	000007d2 	ldrdeq	r0, [r0], -r2
     374:	22050205 	andcs	r0, r5, #1342177280	; 0x50000000
     378:	04000008 	streq	r0, [r0], #-8
     37c:	0000095b 	andeq	r0, r0, fp, asr r9
     380:	02ca2b03 	sbceq	r2, sl, #3072	; 0xc00
     384:	02050000 	andeq	r0, r5, #0
     388:	0004f707 	andeq	pc, r4, r7, lsl #14
     38c:	05a80400 	streq	r0, [r8, #1024]!	; 0x400
     390:	3f030000 	svccc	0x00030000
     394:	000002dc 	ldrdeq	r0, [r0], -ip
     398:	45050405 	strmi	r0, [r5, #-1029]	; 0xfffffbfb
     39c:	04000004 	streq	r0, [r0], #-4
     3a0:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     3a4:	02ee4103 	rsceq	r4, lr, #-1073741824	; 0xc0000000
     3a8:	04050000 	streq	r0, [r5], #-0
     3ac:	0000d407 	andeq	sp, r0, r7, lsl #8
     3b0:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     3b4:	00000440 	andeq	r0, r0, r0, asr #8
     3b8:	cf070805 	svcgt	0x00070805
     3bc:	06000000 	streq	r0, [r0], -r0
     3c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3c4:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     3c8:	0000d907 	andeq	sp, r0, r7, lsl #18
     3cc:	008a0400 	addeq	r0, sl, r0, lsl #8
     3d0:	14040000 	strne	r0, [r4], #-0
     3d4:	000002a6 	andeq	r0, r0, r6, lsr #5
     3d8:	00095d04 	andeq	r5, r9, r4, lsl #26
     3dc:	bf1a0400 	svclt	0x001a0400
     3e0:	04000002 	streq	r0, [r0], #-2
     3e4:	000005aa 	andeq	r0, r0, sl, lsr #11
     3e8:	02d11f04 	sbcseq	r1, r1, #4, 30
     3ec:	b3040000 	movwlt	r0, #16384	; 0x4000
     3f0:	04000003 	streq	r0, [r0], #-3
     3f4:	0002e320 	andeq	lr, r2, r0, lsr #6
     3f8:	07040500 	streq	r0, [r4, -r0, lsl #10]
     3fc:	0000064c 	andeq	r0, r0, ip, asr #12
     400:	00033207 	andeq	r3, r3, r7, lsl #4
     404:	03320800 	teqeq	r2, #0, 16
     408:	03590000 	cmpeq	r9, #0
     40c:	3d090000 	stccc	0, cr0, [r9, #-0]
     410:	01000003 	tsteq	r0, r3
     414:	02280a00 	eoreq	r0, r8, #0, 20
     418:	03d80251 	bicseq	r0, r8, #268435461	; 0x10000005
     41c:	bf0b0000 	svclt	0x000b0000
     420:	02000000 	andeq	r0, r0, #0
     424:	03440253 	movteq	r0, #16979	; 0x4253
     428:	0b000000 	bleq	430 <_Min_Stack_Size+0x30>
     42c:	00000092 	muleq	r0, r2, r0
     430:	44025402 	strmi	r5, [r2], #-1026	; 0xfffffbfe
     434:	04000003 	streq	r0, [r0], #-3
     438:	0003a90b 	andeq	sl, r3, fp, lsl #18
     43c:	02550200 	subseq	r0, r5, #0, 4
     440:	00000344 	andeq	r0, r0, r4, asr #6
     444:	00000b08 	andeq	r0, r0, r8, lsl #22
     448:	56020000 	strpl	r0, [r2], -r0
     44c:	00034402 	andeq	r4, r3, r2, lsl #8
     450:	490c0c00 	stmdbmi	ip, {sl, fp}
     454:	02005244 	andeq	r5, r0, #68, 4	; 0x40000004
     458:	03440257 	movteq	r0, #16983	; 0x4257
     45c:	0c100000 	ldceq	0, cr0, [r0], {-0}
     460:	0052444f 	subseq	r4, r2, pc, asr #8
     464:	44025802 	strmi	r5, [r2], #-2050	; 0xfffff7fe
     468:	14000003 	strne	r0, [r0], #-3
     46c:	00019b0b 	andeq	r9, r1, fp, lsl #22
     470:	02590200 	subseq	r0, r9, #0, 4
     474:	00000344 	andeq	r0, r0, r4, asr #6
     478:	00190b18 	andseq	r0, r9, r8, lsl fp
     47c:	5a020000 	bpl	80484 <_Min_Stack_Size+0x80084>
     480:	00034402 	andeq	r4, r3, r2, lsl #8
     484:	410c1c00 	tstmi	ip, r0, lsl #24
     488:	02005246 	andeq	r5, r0, #1610612740	; 0x60000004
     48c:	03d8025b 	bicseq	r0, r8, #-1342177275	; 0xb0000005
     490:	00200000 	eoreq	r0, r0, r0
     494:	00034907 	andeq	r4, r3, r7, lsl #18
     498:	02690d00 	rsbeq	r0, r9, #0, 26
     49c:	5c020000 	stcpl	0, cr0, [r2], {-0}
     4a0:	00035902 	andeq	r5, r3, r2, lsl #18
     4a4:	02080a00 	andeq	r0, r8, #0, 20
     4a8:	040c02bd 	streq	r0, [ip], #-701	; 0xfffffd43
     4ac:	430c0000 	movwmi	r0, #49152	; 0xc000
     4b0:	bf020052 	svclt	0x00020052
     4b4:	00034402 	andeq	r4, r3, r2, lsl #8
     4b8:	430c0000 	movwmi	r0, #49152	; 0xc000
     4bc:	02005253 	andeq	r5, r0, #805306373	; 0x30000005
     4c0:	034402c0 	movteq	r0, #17088	; 0x42c0
     4c4:	00040000 	andeq	r0, r4, r0
     4c8:	0001a90d 	andeq	sl, r1, sp, lsl #18
     4cc:	02c10200 	sbceq	r0, r1, #0, 4
     4d0:	000003e9 	andeq	r0, r0, r9, ror #7
     4d4:	c702900a 	strgt	r9, [r2, -sl]
     4d8:	0005c102 	andeq	ip, r5, r2, lsl #2
     4dc:	52430c00 	subpl	r0, r3, #0, 24
     4e0:	02c90200 	sbceq	r0, r9, #0, 4
     4e4:	00000344 	andeq	r0, r0, r4, asr #6
     4e8:	02450b00 	subeq	r0, r5, #0, 22
     4ec:	ca020000 	bgt	804f4 <_Min_Stack_Size+0x800f4>
     4f0:	00034402 	andeq	r4, r3, r2, lsl #8
     4f4:	6b0b0400 	blvs	2c14fc <_Min_Stack_Size+0x2c10fc>
     4f8:	02000005 	andeq	r0, r0, #5
     4fc:	034402cb 	movteq	r0, #17099	; 0x42cb
     500:	0c080000 	stceq	0, cr0, [r8], {-0}
     504:	00524943 	subseq	r4, r2, r3, asr #18
     508:	4402cc02 	strmi	ip, [r2], #-3074	; 0xfffff3fe
     50c:	0c000003 	stceq	0, cr0, [r0], {3}
     510:	0001a00b 	andeq	sl, r1, fp
     514:	02cd0200 	sbceq	r0, sp, #0, 4
     518:	00000344 	andeq	r0, r0, r4, asr #6
     51c:	09660b10 	stmdbeq	r6!, {r4, r8, r9, fp}^
     520:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
     524:	00034402 	andeq	r4, r3, r2, lsl #8
     528:	3e0b1400 	cfcpyscc	mvf1, mvf11
     52c:	02000005 	andeq	r0, r0, #5
     530:	034402cf 	movteq	r0, #17103	; 0x42cf
     534:	0b180000 	bleq	60053c <_Min_Stack_Size+0x60013c>
     538:	00000769 	andeq	r0, r0, r9, ror #14
     53c:	3202d002 	andcc	sp, r2, #2
     540:	1c000003 	stcne	0, cr0, [r0], {3}
     544:	00072e0b 	andeq	r2, r7, fp, lsl #28
     548:	02d10200 	sbcseq	r0, r1, #0, 4
     54c:	00000344 	andeq	r0, r0, r4, asr #6
     550:	01c80b20 	biceq	r0, r8, r0, lsr #22
     554:	d2020000 	andle	r0, r2, #0
     558:	00034402 	andeq	r4, r3, r2, lsl #8
     55c:	730b2400 	movwvc	r2, #46080	; 0xb400
     560:	02000007 	andeq	r0, r0, #7
     564:	034902d3 	movteq	r0, #37587	; 0x92d3
     568:	0b280000 	bleq	a00570 <_Min_Stack_Size+0xa00170>
     56c:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
     570:	4402d402 	strmi	sp, [r2], #-1026	; 0xfffffbfe
     574:	30000003 	andcc	r0, r0, r3
     578:	0009d90b 	andeq	sp, r9, fp, lsl #18
     57c:	02d50200 	sbcseq	r0, r5, #0, 4
     580:	00000344 	andeq	r0, r0, r4, asr #6
     584:	08ba0b34 	ldmeq	sl!, {r2, r4, r5, r8, r9, fp}
     588:	d6020000 	strle	r0, [r2], -r0
     58c:	00034402 	andeq	r4, r3, r2, lsl #8
     590:	7d0b3800 	stcvc	8, cr3, [fp, #-0]
     594:	02000007 	andeq	r0, r0, #7
     598:	033202d7 	teqeq	r2, #1879048205	; 0x7000000d
     59c:	0b3c0000 	bleq	f005a4 <_Min_Stack_Size+0xf001a4>
     5a0:	000009d1 	ldrdeq	r0, [r0], -r1
     5a4:	4402d802 	strmi	sp, [r2], #-2050	; 0xfffff7fe
     5a8:	40000003 	andmi	r0, r0, r3
     5ac:	0008720b 	andeq	r7, r8, fp, lsl #4
     5b0:	02d90200 	sbcseq	r0, r9, #0, 4
     5b4:	00000344 	andeq	r0, r0, r4, asr #6
     5b8:	08cd0b44 	stmiaeq	sp, {r2, r6, r8, r9, fp}^
     5bc:	da020000 	ble	805c4 <_Min_Stack_Size+0x801c4>
     5c0:	00034902 	andeq	r4, r3, r2, lsl #18
     5c4:	520b4800 	andpl	r4, fp, #0, 16
     5c8:	02000001 	andeq	r0, r0, #1
     5cc:	034402db 	movteq	r0, #17115	; 0x42db
     5d0:	0b500000 	bleq	14005d8 <_Min_Stack_Size+0x14001d8>
     5d4:	00000711 	andeq	r0, r0, r1, lsl r7
     5d8:	4402dc02 	strmi	sp, [r2], #-3074	; 0xfffff3fe
     5dc:	54000003 	strpl	r0, [r0], #-3
     5e0:	000a340b 	andeq	r3, sl, fp, lsl #8
     5e4:	02dd0200 	sbcseq	r0, sp, #0, 4
     5e8:	00000344 	andeq	r0, r0, r4, asr #6
     5ec:	07980b58 			; <UNDEFINED> instruction: 0x07980b58
     5f0:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
     5f4:	00033202 	andeq	r3, r3, r2, lsl #4
     5f8:	1c0b5c00 	stcne	12, cr5, [fp], {-0}
     5fc:	02000005 	andeq	r0, r0, #5
     600:	034402df 	movteq	r0, #17119	; 0x42df
     604:	0b600000 	bleq	180060c <_Min_Stack_Size+0x180020c>
     608:	0000059e 	muleq	r0, lr, r5
     60c:	4402e002 	strmi	lr, [r2], #-2
     610:	64000003 	strvs	r0, [r0], #-3
     614:	0007a20b 	andeq	sl, r7, fp, lsl #4
     618:	02e10200 	rsceq	r0, r1, #0, 4
     61c:	00000349 	andeq	r0, r0, r9, asr #6
     620:	0a670b68 	beq	19c33c8 <_Min_Stack_Size+0x19c2fc8>
     624:	e2020000 	and	r0, r2, #0
     628:	00034402 	andeq	r4, r3, r2, lsl #8
     62c:	430c7000 	movwmi	r7, #49152	; 0xc000
     630:	02005253 	andeq	r5, r0, #805306373	; 0x30000005
     634:	034402e3 	movteq	r0, #17123	; 0x42e3
     638:	0b740000 	bleq	1d00640 <_Min_Stack_Size+0x1d00240>
     63c:	000007ac 	andeq	r0, r0, ip, lsr #15
     640:	4902e402 	stmdbmi	r2, {r1, sl, sp, lr, pc}
     644:	78000003 	stmdavc	r0, {r0, r1}
     648:	000a2e0b 	andeq	r2, sl, fp, lsl #28
     64c:	02e50200 	rsceq	r0, r5, #0, 4
     650:	00000344 	andeq	r0, r0, r4, asr #6
     654:	05260b80 	streq	r0, [r6, #-2944]!	; 0xfffff480
     658:	e6020000 	str	r0, [r2], -r0
     65c:	00034402 	andeq	r4, r3, r2, lsl #8
     660:	650b8400 	strvs	r8, [fp, #-1024]	; 0xfffffc00
     664:	02000005 	andeq	r0, r0, #5
     668:	034402e7 	movteq	r0, #17127	; 0x42e7
     66c:	0b880000 	bleq	fe200674 <_estack+0xde1d0674>
     670:	00000172 	andeq	r0, r0, r2, ror r1
     674:	4402e802 	strmi	lr, [r2], #-2050	; 0xfffff7fe
     678:	8c000003 	stchi	0, cr0, [r0], {3}
     67c:	01bc0d00 			; <UNDEFINED> instruction: 0x01bc0d00
     680:	ea020000 	b	80688 <_Min_Stack_Size+0x80288>
     684:	00041802 	andeq	r1, r4, r2, lsl #16
     688:	08010500 	stmdaeq	r1, {r8, sl}
     68c:	000007db 	ldrdeq	r0, [r0], -fp
     690:	3a050102 	bcc	140aa0 <_Min_Stack_Size+0x1406a0>
     694:	000005f5 	strdeq	r0, [r0], -r5
     698:	0004d003 	andeq	sp, r4, r3
     69c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     6a0:	01000009 	tsteq	r0, r9
     6a4:	00080003 	andeq	r0, r8, r3
     6a8:	a3030200 	movwge	r0, #12800	; 0x3200
     6ac:	03000004 	movweq	r0, #4
     6b0:	058c0400 	streq	r0, [ip, #1024]	; 0x400
     6b4:	3f050000 	svccc	0x00050000
     6b8:	000005d4 	ldrdeq	r0, [r0], -r4
     6bc:	4106180e 	tstmi	r6, lr, lsl #16
     6c0:	00000651 	andeq	r0, r0, r1, asr r6
     6c4:	00021a0f 	andeq	r1, r2, pc, lsl #20
     6c8:	32430600 	subcc	r0, r3, #0, 12
     6cc:	00000003 	andeq	r0, r0, r3
     6d0:	00083c0f 	andeq	r3, r8, pc, lsl #24
     6d4:	32460600 	subcc	r0, r6, #0, 12
     6d8:	04000003 	streq	r0, [r0], #-3
     6dc:	0000ab0f 	andeq	sl, r0, pc, lsl #22
     6e0:	32490600 	subcc	r0, r9, #0, 12
     6e4:	08000003 	stmdaeq	r0, {r0, r1}
     6e8:	0000b00f 	andeq	fp, r0, pc
     6ec:	324c0600 	subcc	r0, ip, #0, 12
     6f0:	0c000003 	stceq	0, cr0, [r0], {3}
     6f4:	0000b50f 	andeq	fp, r0, pc, lsl #10
     6f8:	32500600 	subscc	r0, r0, #0, 12
     6fc:	10000003 	andne	r0, r0, r3
     700:	0000ba0f 	andeq	fp, r0, pc, lsl #20
     704:	32530600 	subscc	r0, r3, #0, 12
     708:	14000003 	strne	r0, [r0], #-3
     70c:	0a750400 	beq	1d41714 <_Min_Stack_Size+0x1d41314>
     710:	5c060000 	stcpl	0, cr0, [r6], {-0}
     714:	00000600 	andeq	r0, r0, r0, lsl #12
     718:	4507300e 	strmi	r3, [r7, #-14]
     71c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
     720:	0005560f 	andeq	r5, r5, pc, lsl #12
     724:	32470700 	subcc	r0, r7, #0, 14
     728:	00000003 	andeq	r0, r0, r3
     72c:	0004600f 	andeq	r6, r4, pc
     730:	324a0700 	subcc	r0, sl, #0, 14
     734:	04000003 	streq	r0, [r0], #-3
     738:	0001150f 	andeq	r1, r1, pc, lsl #10
     73c:	324d0700 	subcc	r0, sp, #0, 14
     740:	08000003 	stmdaeq	r0, {r0, r1}
     744:	0002030f 	andeq	r0, r2, pc, lsl #6
     748:	32500700 	subscc	r0, r0, #0, 14
     74c:	0c000003 	stceq	0, cr0, [r0], {3}
     750:	0002230f 	andeq	r2, r2, pc, lsl #6
     754:	32530700 	subscc	r0, r3, #0, 14
     758:	10000003 	andne	r0, r0, r3
     75c:	0001d10f 	andeq	sp, r1, pc, lsl #2
     760:	32560700 	subscc	r0, r6, #0, 14
     764:	14000003 	strne	r0, [r0], #-3
     768:	4c4c5010 	mcrrmi	0, 1, r5, ip, cr0
     76c:	51590700 	cmppl	r9, r0, lsl #14
     770:	18000006 	stmdane	r0, {r1, r2}
     774:	017a0400 	cmneq	sl, r0, lsl #8
     778:	5a070000 	bpl	1c0780 <_Min_Stack_Size+0x1c0380>
     77c:	0000065c 	andeq	r0, r0, ip, asr r6
     780:	5f07140e 	svcpl	0x0007140e
     784:	00000709 	andeq	r0, r0, r9, lsl #14
     788:	0007370f 	andeq	r3, r7, pc, lsl #14
     78c:	32610700 	rsbcc	r0, r1, #0, 14
     790:	00000003 	andeq	r0, r0, r3
     794:	000b560f 	andeq	r5, fp, pc, lsl #12
     798:	32640700 	rsbcc	r0, r4, #0, 14
     79c:	04000003 	streq	r0, [r0], #-3
     7a0:	0005c60f 	andeq	ip, r5, pc, lsl #12
     7a4:	32670700 	rsbcc	r0, r7, #0, 14
     7a8:	08000003 	stmdaeq	r0, {r0, r1}
     7ac:	0002890f 	andeq	r8, r2, pc, lsl #18
     7b0:	326a0700 	rsbcc	r0, sl, #0, 14
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0009af0f 	andeq	sl, r9, pc, lsl #30
     7bc:	326d0700 	rsbcc	r0, sp, #0, 14
     7c0:	10000003 	andne	r0, r0, r3
     7c4:	071b0400 	ldreq	r0, [fp, -r0, lsl #8]
     7c8:	70070000 	andvc	r0, r7, r0
     7cc:	000006c4 	andeq	r0, r0, r4, asr #13
     7d0:	4108140e 	tstmi	r8, lr, lsl #8
     7d4:	00000759 	andeq	r0, r0, r9, asr r7
     7d8:	6e695010 	mcrvs	0, 3, r5, cr9, cr0, {0}
     7dc:	32430800 	subcc	r0, r3, #0, 16
     7e0:	00000003 	andeq	r0, r0, r3
     7e4:	002e100f 	eoreq	r1, lr, pc
     7e8:	32460800 	subcc	r0, r6, #0, 16
     7ec:	04000003 	streq	r0, [r0], #-3
     7f0:	000abf0f 	andeq	fp, sl, pc, lsl #30
     7f4:	32490800 	subcc	r0, r9, #0, 16
     7f8:	08000003 	stmdaeq	r0, {r0, r1}
     7fc:	001c210f 	andseq	r2, ip, pc, lsl #2
     800:	324c0800 	subcc	r0, ip, #0, 16
     804:	0c000003 	stceq	0, cr0, [r0], {3}
     808:	00015c0f 	andeq	r5, r1, pc, lsl #24
     80c:	324f0800 	subcc	r0, pc, #0, 16
     810:	10000003 	andne	r0, r0, r3
     814:	07870400 	streq	r0, [r7, r0, lsl #8]
     818:	51080000 	mrspl	r0, (UNDEF: 8)
     81c:	00000714 	andeq	r0, r0, r4, lsl r7
     820:	42090102 	andmi	r0, r9, #-2147483648	; 0x80000000
     824:	00000779 	andeq	r0, r0, r9, ror r7
     828:	00091303 	andeq	r1, r9, r3, lsl #6
     82c:	37030000 	strcc	r0, [r3, -r0]
     830:	01000008 	tsteq	r0, r8
     834:	06a20400 	strteq	r0, [r2], r0, lsl #8
     838:	45090000 	strmi	r0, [r9, #-0]
     83c:	00000764 	andeq	r0, r0, r4, ror #14
     840:	0009be11 	andeq	fp, r9, r1, lsl lr
     844:	01780100 	cmneq	r8, r0, lsl #2
     848:	000007c5 	andeq	r0, r0, r5, asr #15
     84c:	00044e12 	andeq	r4, r4, r2, lsl lr
     850:	097a0100 	ldmdbeq	sl!, {r8}^
     854:	12000007 	andne	r0, r0, #7
     858:	0000011e 	andeq	r0, r0, lr, lsl r1
     85c:	06b97b01 	ldrteq	r7, [r9], r1, lsl #22
     860:	b7130000 	ldrlt	r0, [r3, -r0]
     864:	12000007 	andne	r0, r0, #7
     868:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     86c:	03447e01 	movteq	r7, #19969	; 0x4e01
     870:	14000000 	strne	r0, [r0], #-0
     874:	0001b512 	andeq	fp, r1, r2, lsl r5
     878:	44830100 	strmi	r0, [r3], #256	; 0x100
     87c:	00000003 	andeq	r0, r0, r3
     880:	05d41500 	ldrbeq	r1, [r4, #1280]	; 0x500
     884:	cd010000 	stcgt	0, cr0, [r1, #-0]
     888:	0afa1101 	beq	ffe84c94 <_estack+0xdfe54c94>
     88c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
     890:	0007f201 	andeq	pc, r7, r1, lsl #4
     894:	00e61200 	rsceq	r1, r6, r0, lsl #4
     898:	aa010000 	bge	408a0 <_Min_Stack_Size+0x404a0>
     89c:	00000759 	andeq	r0, r0, r9, asr r7
     8a0:	01b51214 			; <UNDEFINED> instruction: 0x01b51214
     8a4:	ad010000 	stcge	0, cr0, [r1, #-0]
     8a8:	00000344 	andeq	r0, r0, r4, asr #6
     8ac:	f5160000 			; <UNDEFINED> instruction: 0xf5160000
     8b0:	0100000a 	tsteq	r0, sl
     8b4:	00030345 	andeq	r0, r3, r5, asr #6
     8b8:	00021000 	andeq	r1, r2, r0
     8bc:	0000f008 	andeq	pc, r0, r8
     8c0:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
     8c4:	17000009 	strne	r0, [r0, -r9]
     8c8:	00000784 	andeq	r0, r0, r4, lsl #15
     8cc:	08000224 	stmdaeq	r0, {r2, r5, r9}
     8d0:	00000020 	andeq	r0, r0, r0, lsr #32
     8d4:	08d75901 	ldmeq	r7, {r0, r8, fp, ip, lr}^
     8d8:	20180000 	andscs	r0, r8, r0
     8dc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     8e0:	00000790 	muleq	r0, r0, r7
     8e4:	7fb49103 	svcvc	0x00b49103
     8e8:	00079b19 	andeq	r9, r7, r9, lsl fp
     8ec:	48910200 	ldmmi	r1, {r9}
     8f0:	0000381a 	andeq	r3, r0, sl, lsl r8
     8f4:	00084700 	andeq	r4, r8, r0, lsl #14
     8f8:	07ab1900 	streq	r1, [fp, r0, lsl #18]!
     8fc:	91030000 	mrsls	r0, (UNDEF: 3)
     900:	1a007fac 	bne	207b8 <_Min_Stack_Size+0x203b8>
     904:	00000050 	andeq	r0, r0, r0, asr r0
     908:	0000085a 	andeq	r0, r0, sl, asr r8
     90c:	0007b819 	andeq	fp, r7, r9, lsl r8
     910:	b0910300 	addslt	r0, r1, r0, lsl #6
     914:	c51b007f 	ldrgt	r0, [fp, #-127]	; 0xffffff81
     918:	de000007 	cdple	0, 0, cr0, cr0, cr7, {0}
     91c:	08080002 	stmdaeq	r8, {r1}
     920:	01000000 	mrseq	r0, (UNDEF: 0)
     924:	00087e9f 	muleq	r8, pc, lr	; <UNPREDICTABLE>
     928:	02e41c00 	rsceq	r1, r4, #0, 24
     92c:	09cc0800 	stmibeq	ip, {fp}^
     930:	011d0000 	tsteq	sp, r0
     934:	00750250 	rsbseq	r0, r5, r0, asr r2
     938:	c51b0000 	ldrgt	r0, [fp, #-0]
     93c:	e6000007 	str	r0, [r0], -r7
     940:	1a080002 	bne	200950 <_Min_Stack_Size+0x200550>
     944:	01000000 	mrseq	r0, (UNDEF: 0)
     948:	0008a290 	muleq	r8, r0, r2
     94c:	02ec1c00 	rsceq	r1, ip, #0, 24
     950:	09cc0800 	stmibeq	ip, {fp}^
     954:	011d0000 	tsteq	sp, r0
     958:	00750250 	rsbseq	r0, r5, r0, asr r2
     95c:	7a1e0000 	bvc	780964 <_Min_Stack_Size+0x780564>
     960:	de080002 	cdple	0, 0, cr0, cr8, cr2, {0}
     964:	b6000009 	strlt	r0, [r0], -r9
     968:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
     96c:	91025001 	tstls	r2, r1
     970:	841f0048 	ldrhi	r0, [pc], #-72	; 978 <_Min_Stack_Size+0x578>
     974:	fa080002 	blx	200984 <_Min_Stack_Size+0x200584>
     978:	1c000009 	stcne	0, cr0, [r0], {9}
     97c:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
     980:	00000a05 	andeq	r0, r0, r5, lsl #20
     984:	0151011d 	cmpeq	r1, sp, lsl r1
     988:	50011d35 	andpl	r1, r1, r5, lsr sp
     98c:	7fb49103 	svcvc	0x00b49103
     990:	1b000000 	blne	998 <_Min_Stack_Size+0x598>
     994:	000007cd 	andeq	r0, r0, sp, asr #15
     998:	080002a8 	stmdaeq	r0, {r3, r5, r7, r9}
     99c:	00000034 	andeq	r0, r0, r4, lsr r0
     9a0:	095b5c01 	ldmdbeq	fp, {r0, sl, fp, ip, lr}^
     9a4:	a8200000 	stmdage	r0!, {}	; <UNPREDICTABLE>
     9a8:	34080002 	strcc	r0, [r8], #-2
     9ac:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     9b0:	000007d9 	ldrdeq	r0, [r0], -r9
     9b4:	1a489102 	bne	1224dc4 <_Min_Stack_Size+0x12249c4>
     9b8:	00000070 	andeq	r0, r0, r0, ror r0
     9bc:	0000090e 	andeq	r0, r0, lr, lsl #18
     9c0:	0007e519 	andeq	lr, r7, r9, lsl r5
     9c4:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
     9c8:	cc1e007f 	ldcgt	0, cr0, [lr], {127}	; 0x7f
     9cc:	26080002 	strcs	r0, [r8], -r2
     9d0:	2b00000a 	blcs	a00 <_Min_Stack_Size+0x600>
     9d4:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
     9d8:	91025101 	tstls	r2, r1, lsl #2
     9dc:	50011d48 	andpl	r1, r1, r8, asr #26
     9e0:	00000c05 	andeq	r0, r0, r5, lsl #24
     9e4:	1e004002 	cdpne	0, 0, cr4, cr0, cr2, {0}
     9e8:	080002d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9}
     9ec:	00000a48 	andeq	r0, r0, r8, asr #20
     9f0:	0000094a 	andeq	r0, r0, sl, asr #18
     9f4:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
     9f8:	011d0076 	tsteq	sp, r6, ror r0
     9fc:	00770251 	rsbseq	r0, r7, r1, asr r2
     a00:	0150011d 	cmpeq	r0, sp, lsl r1
     a04:	dc1c0036 	ldcle	0, cr0, [ip], {54}	; 0x36
     a08:	64080002 	strvs	r0, [r8], #-2
     a0c:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
     a10:	36015001 	strcc	r5, [r1], -r1
     a14:	1f000000 	svcne	0x00000000
     a18:	08000218 	stmdaeq	r0, {r3, r4, r9}
     a1c:	00000a76 	andeq	r0, r0, r6, ror sl
     a20:	00021e1e 	andeq	r1, r2, lr, lsl lr
     a24:	000a8108 	andeq	r8, sl, r8, lsl #2
     a28:	00097700 	andeq	r7, r9, r0, lsl #14
     a2c:	50011d00 	andpl	r1, r1, r0, lsl #26
     a30:	1c003001 	stcne	0, cr3, [r0], {1}
     a34:	08000224 	stmdaeq	r0, {r2, r5, r9}
     a38:	00000a81 	andeq	r0, r0, r1, lsl #21
     a3c:	0150011d 	cmpeq	r0, sp, lsl r1
     a40:	21000031 	tstcs	r0, r1, lsr r0
     a44:	00000621 	andeq	r0, r0, r1, lsr #12
     a48:	0300bf01 	movweq	fp, #3841	; 0xf01
     a4c:	000c0800 	andeq	r0, ip, r0, lsl #16
     a50:	9c010000 	stcls	0, cr0, [r1], {-0}
     a54:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
     a58:	000a6c22 	andeq	r6, sl, r2, lsr #24
     a5c:	1cbf0100 	ldfnes	f0, [pc]	; a64 <_Min_Stack_Size+0x664>
     a60:	00000003 	andeq	r0, r0, r3
     a64:	23000000 	movwcs	r0, #0
     a68:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
     a6c:	00000a93 	muleq	r0, r3, sl
     a70:	0150011d 	cmpeq	r0, sp, lsl r1
     a74:	24000030 	strcs	r0, [r0], #-48	; 0xffffffd0
     a78:	000007f3 	strdeq	r0, [r0], -r3
     a7c:	c707440d 	strgt	r4, [r7, -sp, lsl #8]
     a80:	07000009 	streq	r0, [r0, -r9]
     a84:	00000327 	andeq	r0, r0, r7, lsr #6
     a88:	00082c25 	andeq	r2, r8, r5, lsr #24
     a8c:	01410900 	cmpeq	r1, r0, lsl #18
     a90:	000009de 	ldrdeq	r0, [r0], -lr
     a94:	00077926 	andeq	r7, r7, r6, lsr #18
     a98:	34270000 	strtcc	r0, [r7], #-0
     a9c:	07000009 	streq	r0, [r0, -r9]
     aa0:	05f504bb 	ldrbeq	r0, [r5, #1211]!	; 0x4bb
     aa4:	09f40000 	ldmibeq	r4!, {}^	; <UNPREDICTABLE>
     aa8:	f4260000 	vld4.8	{d0-d3}, [r6], r0
     aac:	00000009 	andeq	r0, r0, r9
     ab0:	06b90428 	ldrteq	r0, [r9], r8, lsr #8
     ab4:	9d290000 	stcls	0, cr0, [r9, #-0]
     ab8:	0b00000a 	bleq	ae8 <_Min_Stack_Size+0x6e8>
     abc:	0005f5f6 	strdeq	pc, [r5], -r6
     ac0:	0a532700 	beq	14ca6c8 <_Min_Stack_Size+0x14ca2c8>
     ac4:	bc070000 	stclt	0, cr0, [r7], {-0}
     ac8:	0005f504 	andeq	pc, r5, r4, lsl #10
     acc:	000a2000 	andeq	r2, sl, r0
     ad0:	0a202600 	beq	80a2d8 <_Min_Stack_Size+0x809ed8>
     ad4:	32260000 	eorcc	r0, r6, #0
     ad8:	00000003 	andeq	r0, r0, r3
     adc:	07090428 	streq	r0, [r9, -r8, lsr #8]
     ae0:	eb2a0000 	bl	a80ae8 <_Min_Stack_Size+0xa806e8>
     ae4:	08000006 	stmdaeq	r0, {r1, r2}
     ae8:	000a3cf3 	strdeq	r3, [sl], -r3	; <UNPREDICTABLE>
     aec:	0a3c2600 	beq	f0a2f4 <_Min_Stack_Size+0xf09ef4>
     af0:	42260000 	eormi	r0, r6, #0
     af4:	0000000a 	andeq	r0, r0, sl
     af8:	03dd0428 	bicseq	r0, sp, #40, 8	; 0x28000000
     afc:	04280000 	strteq	r0, [r8], #-0
     b00:	00000759 	andeq	r0, r0, r9, asr r7
     b04:	00094625 	andeq	r4, r9, r5, lsr #12
     b08:	01180a00 	tsteq	r8, r0, lsl #20
     b0c:	00000a64 	andeq	r0, r0, r4, ror #20
     b10:	00029426 	andeq	r9, r2, r6, lsr #8
     b14:	03322600 	teqeq	r2, #0, 12
     b18:	32260000 	eorcc	r0, r6, #0
     b1c:	00000003 	andeq	r0, r0, r3
     b20:	00000625 	andeq	r0, r0, r5, lsr #12
     b24:	01190a00 	tsteq	r9, r0, lsl #20
     b28:	00000a76 	andeq	r0, r0, r6, ror sl
     b2c:	00029426 	andeq	r9, r2, r6, lsr #8
     b30:	38290000 	stmdacc	r9!, {}	; <UNPREDICTABLE>
     b34:	0c000006 	stceq	0, cr0, [r0], {6}
     b38:	0005f5c1 	andeq	pc, r5, r1, asr #11
     b3c:	05fc2500 	ldrbeq	r2, [ip, #1280]!	; 0x500
     b40:	40090000 	andmi	r0, r9, r0
     b44:	000a9301 	andeq	r9, sl, r1, lsl #6
     b48:	07792600 	ldrbeq	r2, [r9, -r0, lsl #12]!
     b4c:	2b000000 	blcs	b54 <_Min_Stack_Size+0x754>
     b50:	0000098c 	andeq	r0, r0, ip, lsl #19
     b54:	26014309 	strcs	r4, [r1], -r9, lsl #6
     b58:	00000779 	andeq	r0, r0, r9, ror r7
     b5c:	01940000 	orrseq	r0, r4, r0
     b60:	00040000 	andeq	r0, r4, r0
     b64:	0000025a 	andeq	r0, r0, sl, asr r2
     b68:	02980104 	addseq	r0, r8, #4, 2
     b6c:	95010000 	strls	r0, [r1, #-0]
     b70:	7a00000b 	bvc	ba4 <_Min_Stack_Size+0x7a4>
     b74:	b0000008 	andlt	r0, r0, r8
     b78:	00000000 	andeq	r0, r0, r0
     b7c:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
     b80:	02000003 	andeq	r0, r0, #3
     b84:	07d40601 	ldrbeq	r0, [r4, r1, lsl #12]
     b88:	01020000 	mrseq	r0, (UNDEF: 2)
     b8c:	0007d208 	andeq	sp, r7, r8, lsl #4
     b90:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     b94:	00000822 	andeq	r0, r0, r2, lsr #16
     b98:	00095b03 	andeq	r5, r9, r3, lsl #22
     b9c:	452b0200 	strmi	r0, [fp, #-512]!	; 0xfffffe00
     ba0:	02000000 	andeq	r0, r0, #0
     ba4:	04f70702 	ldrbteq	r0, [r7], #1794	; 0x702
     ba8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     bac:	02000005 	andeq	r0, r0, #5
     bb0:	0000573f 	andeq	r5, r0, pc, lsr r7
     bb4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     bb8:	00000445 	andeq	r0, r0, r5, asr #8
     bbc:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
     bc0:	02000000 	andeq	r0, r0, #0
     bc4:	04400508 	strbeq	r0, [r0], #-1288	; 0xfffffaf8
     bc8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     bcc:	0000cf07 	andeq	ip, r0, r7, lsl #30
     bd0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     bd4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     bd8:	d9070402 	stmdble	r7, {r1, sl}
     bdc:	03000000 	movweq	r0, #0
     be0:	0000095d 	andeq	r0, r0, sp, asr r9
     be4:	003a1a03 	eorseq	r1, sl, r3, lsl #20
     be8:	aa030000 	bge	c0bf0 <_Min_Stack_Size+0xc07f0>
     bec:	03000005 	movweq	r0, #5
     bf0:	00004c1f 	andeq	r4, r0, pc, lsl ip
     bf4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     bf8:	0000064c 	andeq	r0, r0, ip, asr #12
     bfc:	db080102 	blle	20100c <_Min_Stack_Size+0x200c0c>
     c00:	05000007 	streq	r0, [r0, #-7]
     c04:	00000c00 	andeq	r0, r0, r0, lsl #24
     c08:	030c4401 	movweq	r4, #50177	; 0xc401
     c0c:	00020800 	andeq	r0, r2, r0, lsl #16
     c10:	9c010000 	stcls	0, cr0, [r1], {-0}
     c14:	000c1f05 	andeq	r1, ip, r5, lsl #30
     c18:	104d0100 	subne	r0, sp, r0, lsl #2
     c1c:	02080003 	andeq	r0, r8, #3
     c20:	01000000 	mrseq	r0, (UNDEF: 0)
     c24:	0c51059c 	cfldr64eq	mvdx0, [r1], {156}	; 0x9c
     c28:	5a010000 	bpl	40c30 <_Min_Stack_Size+0x40830>
     c2c:	08000314 	stmdaeq	r0, {r2, r4, r8, r9}
     c30:	00000002 	andeq	r0, r0, r2
     c34:	31059c01 	tstcc	r5, r1, lsl #24
     c38:	0100000c 	tsteq	r0, ip
     c3c:	00031867 	andeq	r1, r3, r7, ror #16
     c40:	00000208 	andeq	r0, r0, r8, lsl #4
     c44:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
     c48:	00000c0c 	andeq	r0, r0, ip, lsl #24
     c4c:	031c7401 	tsteq	ip, #16777216	; 0x1000000
     c50:	00020800 	andeq	r0, r2, r0, lsl #16
     c54:	9c010000 	stcls	0, cr0, [r1], {-0}
     c58:	000bf405 	andeq	pc, fp, r5, lsl #8
     c5c:	20810100 	addcs	r0, r1, r0, lsl #2
     c60:	02080003 	andeq	r0, r8, #3
     c64:	01000000 	mrseq	r0, (UNDEF: 0)
     c68:	0b74059c 	bleq	1d022e0 <_Min_Stack_Size+0x1d01ee0>
     c6c:	8a010000 	bhi	40c74 <_Min_Stack_Size+0x40874>
     c70:	08000324 	stmdaeq	r0, {r2, r5, r8, r9}
     c74:	00000002 	andeq	r0, r0, r2
     c78:	42059c01 	andmi	r9, r5, #256	; 0x100
     c7c:	0100000c 	tsteq	r0, ip
     c80:	00032893 	muleq	r3, r3, r8
     c84:	00000208 	andeq	r0, r0, r8, lsl #4
     c88:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     c8c:	00000b85 	andeq	r0, r0, r5, lsl #23
     c90:	032c9c01 			; <UNDEFINED> instruction: 0x032c9c01
     c94:	00040800 	andeq	r0, r4, r0, lsl #16
     c98:	9c010000 	stcls	0, cr0, [r1], {-0}
     c9c:	0000014c 	andeq	r0, r0, ip, asr #2
     ca0:	00033007 	andeq	r3, r3, r7
     ca4:	00018208 	andeq	r8, r1, r8, lsl #4
     ca8:	63060000 	movwvs	r0, #24576	; 0x6000
     cac:	0100000b 	tsteq	r0, fp
     cb0:	000330ad 	andeq	r3, r3, sp, lsr #1
     cb4:	00000608 	andeq	r0, r0, r8, lsl #12
     cb8:	719c0100 	orrsvc	r0, ip, r0, lsl #2
     cbc:	08000001 	stmdaeq	r0, {r0}
     cc0:	08000336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9}
     cc4:	00000189 	andeq	r0, r0, r9, lsl #3
     cc8:	01500109 	cmpeq	r0, r9, lsl #2
     ccc:	0a000031 	beq	d98 <_Min_Stack_Size+0x998>
     cd0:	000007f3 	strdeq	r0, [r0], -r3
     cd4:	7d074404 	cfstrsvc	mvf4, [r7, #-16]
     cd8:	0b000001 	bleq	ce4 <_Min_Stack_Size+0x8e4>
     cdc:	0000008c 	andeq	r0, r0, ip, lsl #1
     ce0:	000be80c 	andeq	lr, fp, ip, lsl #16
     ce4:	0dce0500 	cfstr64eq	mvdx0, [lr]
     ce8:	00000c63 	andeq	r0, r0, r3, ror #24
     cec:	0e010106 	adfeqs	f0, f1, f6
     cf0:	00000081 	andeq	r0, r0, r1, lsl #1
     cf4:	04b90000 	ldrteq	r0, [r9], #0
     cf8:	00040000 	andeq	r0, r4, r0
     cfc:	0000032c 	andeq	r0, r0, ip, lsr #6
     d00:	02980104 	addseq	r0, r8, #4, 2
     d04:	16010000 	strne	r0, [r1], -r0
     d08:	7a00000d 	bvc	d44 <_Min_Stack_Size+0x944>
     d0c:	08000008 	stmdaeq	r0, {r3}
     d10:	00000001 	andeq	r0, r0, r1
     d14:	ea000000 	b	d1c <_Min_Stack_Size+0x91c>
     d18:	02000005 	andeq	r0, r0, #5
     d1c:	07d40601 	ldrbeq	r0, [r4, r1, lsl #12]
     d20:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
     d24:	02000000 	andeq	r0, r0, #0
     d28:	0000371d 	andeq	r3, r0, sp, lsl r7
     d2c:	08010200 	stmdaeq	r1, {r9}
     d30:	000007d2 	ldrdeq	r0, [r0], -r2
     d34:	22050202 	andcs	r0, r5, #536870912	; 0x20000000
     d38:	02000008 	andeq	r0, r0, #8
     d3c:	04f70702 	ldrbteq	r0, [r7], #1794	; 0x702
     d40:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     d44:	02000005 	andeq	r0, r0, #5
     d48:	0000573f 	andeq	r5, r0, pc, lsr r7
     d4c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     d50:	00000445 	andeq	r0, r0, r5, asr #8
     d54:	0003b103 	andeq	fp, r3, r3, lsl #2
     d58:	69410200 	stmdbvs	r1, {r9}^
     d5c:	02000000 	andeq	r0, r0, #0
     d60:	00d40704 	sbcseq	r0, r4, r4, lsl #14
     d64:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     d68:	00044005 	andeq	r4, r4, r5
     d6c:	07080200 	streq	r0, [r8, -r0, lsl #4]
     d70:	000000cf 	andeq	r0, r0, pc, asr #1
     d74:	69050404 	stmdbvs	r5, {r2, sl}
     d78:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     d7c:	00d90704 	sbcseq	r0, r9, r4, lsl #14
     d80:	8a030000 	bhi	c0d88 <_Min_Stack_Size+0xc0988>
     d84:	03000000 	movweq	r0, #0
     d88:	00002c14 	andeq	r2, r0, r4, lsl ip
     d8c:	05aa0300 	streq	r0, [sl, #768]!	; 0x300
     d90:	1f030000 	svcne	0x00030000
     d94:	0000004c 	andeq	r0, r0, ip, asr #32
     d98:	0003b303 	andeq	fp, r3, r3, lsl #6
     d9c:	5e200300 	cdppl	3, 2, cr0, cr0, cr0, {0}
     da0:	02000000 	andeq	r0, r0, #0
     da4:	064c0704 	strbeq	r0, [ip], -r4, lsl #14
     da8:	a2050000 	andge	r0, r5, #0
     dac:	06000000 	streq	r0, [r0], -r0
     db0:	01e5048c 	mvneq	r0, ip, lsl #9
     db4:	000001d4 	ldrdeq	r0, [r0], -r4
     db8:	000c7c07 	andeq	r7, ip, r7, lsl #24
     dbc:	01e70400 	mvneq	r0, r0, lsl #8
     dc0:	000001d4 	ldrdeq	r0, [r0], -r4
     dc4:	0c8b0700 	stceq	7, cr0, [fp], {0}
     dc8:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
     dcc:	0000b401 	andeq	fp, r0, r1, lsl #8
     dd0:	e8070400 	stmda	r7, {sl}
     dd4:	0400000c 	streq	r0, [r0], #-12
     dd8:	00b401e9 	adcseq	r0, r4, r9, ror #3
     ddc:	07080000 	streq	r0, [r8, -r0]
     de0:	00000cae 	andeq	r0, r0, lr, lsr #25
     de4:	b401ea04 	strlt	lr, [r1], #-2564	; 0xfffff5fc
     de8:	0c000000 	stceq	0, cr0, [r0], {-0}
     dec:	52435308 	subpl	r5, r3, #8, 6	; 0x20000000
     df0:	01eb0400 	mvneq	r0, r0, lsl #8
     df4:	000000b4 	strheq	r0, [r0], -r4
     df8:	43430810 	movtmi	r0, #14352	; 0x3810
     dfc:	ec040052 	stc	0, cr0, [r4], {82}	; 0x52
     e00:	0000b401 	andeq	fp, r0, r1, lsl #8
     e04:	53081400 	movwpl	r1, #33792	; 0x8400
     e08:	04005048 	streq	r5, [r0], #-72	; 0xffffffb8
     e0c:	01e901ed 	mvneq	r0, sp, ror #3
     e10:	07180000 	ldreq	r0, [r8, -r0]
     e14:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
     e18:	b401ee04 	strlt	lr, [r1], #-3588	; 0xfffff1fc
     e1c:	24000000 	strcs	r0, [r0], #-0
     e20:	000c9507 	andeq	r9, ip, r7, lsl #10
     e24:	01ef0400 	mvneq	r0, r0, lsl #8
     e28:	000000b4 	strheq	r0, [r0], -r4
     e2c:	0d070728 	stceq	7, cr0, [r7, #-160]	; 0xffffff60
     e30:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
     e34:	0000b401 	andeq	fp, r0, r1, lsl #8
     e38:	f2072c00 			; <UNDEFINED> instruction: 0xf2072c00
     e3c:	0400000c 	streq	r0, [r0], #-12
     e40:	00b401f1 	ldrshteq	r0, [r4], r1
     e44:	07300000 	ldreq	r0, [r0, -r0]!
     e48:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e4c:	b401f204 	strlt	pc, [r1], #-516	; 0xfffffdfc
     e50:	34000000 	strcc	r0, [r0], #-0
     e54:	000c9007 	andeq	r9, ip, r7
     e58:	01f30400 	mvnseq	r0, r0, lsl #8
     e5c:	000000b4 	strheq	r0, [r0], -r4
     e60:	0d110738 	ldceq	7, cr0, [r1, #-224]	; 0xffffff20
     e64:	f4040000 	vst4.8	{d0-d3}, [r4], r0
     e68:	0000b401 	andeq	fp, r0, r1, lsl #8
     e6c:	50083c00 	andpl	r3, r8, r0, lsl #24
     e70:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
     e74:	01fe01f5 	ldrsheq	r0, [lr, #21]!
     e78:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
     e7c:	00524644 	subseq	r4, r2, r4, asr #12
     e80:	d401f604 	strle	pc, [r1], #-1540	; 0xfffff9fc
     e84:	48000001 	stmdami	r0, {r0}
     e88:	52444108 	subpl	r4, r4, #8, 2
     e8c:	01f70400 	mvnseq	r0, r0, lsl #8
     e90:	000001d4 	ldrdeq	r0, [r0], -r4
     e94:	0d0c074c 	stceq	7, cr0, [ip, #-304]	; 0xfffffed0
     e98:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
     e9c:	00021801 	andeq	r1, r2, r1, lsl #16
     ea0:	ed075000 	stc	0, cr5, [r7, #-0]
     ea4:	0400000c 	streq	r0, [r0], #-12
     ea8:	023201f9 	eorseq	r0, r2, #1073741886	; 0x4000003e
     eac:	07600000 	strbeq	r0, [r0, -r0]!
     eb0:	00000769 	andeq	r0, r0, r9, ror #14
     eb4:	2201fa04 	andcs	pc, r1, #4, 20	; 0x4000
     eb8:	74000002 	strvc	r0, [r0], #-2
     ebc:	000d6d07 	andeq	r6, sp, r7, lsl #26
     ec0:	01fb0400 	mvnseq	r0, r0, lsl #8
     ec4:	000000b4 	strheq	r0, [r0], -r4
     ec8:	b4090088 	strlt	r0, [r9], #-136	; 0xffffff78
     ecc:	0a000000 	beq	ed4 <_Min_Stack_Size+0xad4>
     ed0:	0000008c 	andeq	r0, r0, ip, lsl #1
     ed4:	000001e9 	andeq	r0, r0, r9, ror #3
     ed8:	0000ad0b 	andeq	sl, r0, fp, lsl #26
     edc:	05000b00 	streq	r0, [r0, #-2816]	; 0xfffff500
     ee0:	000001d9 	ldrdeq	r0, [r0], -r9
     ee4:	0000a20a 	andeq	sl, r0, sl, lsl #4
     ee8:	0001fe00 	andeq	pc, r1, r0, lsl #28
     eec:	00ad0b00 	adceq	r0, sp, r0, lsl #22
     ef0:	00010000 	andeq	r0, r1, r0
     ef4:	00020309 	andeq	r0, r2, r9, lsl #6
     ef8:	01ee0500 	mvneq	r0, r0, lsl #10
     efc:	a20a0000 	andge	r0, sl, #0
     f00:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     f04:	0b000002 	bleq	f14 <_Min_Stack_Size+0xb14>
     f08:	000000ad 	andeq	r0, r0, sp, lsr #1
     f0c:	1d090003 	stcne	0, cr0, [r9, #-12]
     f10:	05000002 	streq	r0, [r0, #-2]
     f14:	00000208 	andeq	r0, r0, r8, lsl #4
     f18:	0000a20a 	andeq	sl, r0, sl, lsl #4
     f1c:	00023200 	andeq	r3, r2, r0, lsl #4
     f20:	00ad0b00 	adceq	r0, sp, r0, lsl #22
     f24:	00040000 	andeq	r0, r4, r0
     f28:	00023709 	andeq	r3, r2, r9, lsl #14
     f2c:	02220500 	eoreq	r0, r2, #0, 10
     f30:	820c0000 	andhi	r0, ip, #0
     f34:	0400000c 	streq	r0, [r0], #-12
     f38:	00b901fc 	ldrshteq	r0, [r9], ip
     f3c:	90060000 	andls	r0, r6, r0
     f40:	f102c705 			; <UNDEFINED> instruction: 0xf102c705
     f44:	08000003 	stmdaeq	r0, {r0, r1}
     f48:	05005243 	streq	r5, [r0, #-579]	; 0xfffffdbd
     f4c:	00b402c9 	adcseq	r0, r4, r9, asr #5
     f50:	07000000 	streq	r0, [r0, -r0]
     f54:	00000245 	andeq	r0, r0, r5, asr #4
     f58:	b402ca05 	strlt	ip, [r2], #-2565	; 0xfffff5fb
     f5c:	04000000 	streq	r0, [r0], #-0
     f60:	00056b07 	andeq	r6, r5, r7, lsl #22
     f64:	02cb0500 	sbceq	r0, fp, #0, 10
     f68:	000000b4 	strheq	r0, [r0], -r4
     f6c:	49430808 	stmdbmi	r3, {r3, fp}^
     f70:	cc050052 	stcgt	0, cr0, [r5], {82}	; 0x52
     f74:	0000b402 	andeq	fp, r0, r2, lsl #8
     f78:	a0070c00 	andge	r0, r7, r0, lsl #24
     f7c:	05000001 	streq	r0, [r0, #-1]
     f80:	00b402cd 	adcseq	r0, r4, sp, asr #5
     f84:	07100000 	ldreq	r0, [r0, -r0]
     f88:	00000966 	andeq	r0, r0, r6, ror #18
     f8c:	b402ce05 	strlt	ip, [r2], #-3589	; 0xfffff1fb
     f90:	14000000 	strne	r0, [r0], #-0
     f94:	00053e07 	andeq	r3, r5, r7, lsl #28
     f98:	02cf0500 	sbceq	r0, pc, #0, 10
     f9c:	000000b4 	strheq	r0, [r0], -r4
     fa0:	07690718 			; <UNDEFINED> instruction: 0x07690718
     fa4:	d0050000 	andle	r0, r5, r0
     fa8:	0000a202 	andeq	sl, r0, r2, lsl #4
     fac:	2e071c00 	cdpcs	12, 0, cr1, cr7, cr0, {0}
     fb0:	05000007 	streq	r0, [r0, #-7]
     fb4:	00b402d1 	ldrsbteq	r0, [r4], r1
     fb8:	07200000 	streq	r0, [r0, -r0]!
     fbc:	000001c8 	andeq	r0, r0, r8, asr #3
     fc0:	b402d205 	strlt	sp, [r2], #-517	; 0xfffffdfb
     fc4:	24000000 	strcs	r0, [r0], #-0
     fc8:	00077307 	andeq	r7, r7, r7, lsl #6
     fcc:	02d30500 	sbcseq	r0, r3, #0, 10
     fd0:	000001ee 	andeq	r0, r0, lr, ror #3
     fd4:	0ab70728 	beq	fedc2c7c <_estack+0xded92c7c>
     fd8:	d4050000 	strle	r0, [r5], #-0
     fdc:	0000b402 	andeq	fp, r0, r2, lsl #8
     fe0:	d9073000 	stmdble	r7, {ip, sp}
     fe4:	05000009 	streq	r0, [r0, #-9]
     fe8:	00b402d5 	ldrsbteq	r0, [r4], r5
     fec:	07340000 	ldreq	r0, [r4, -r0]!
     ff0:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
     ff4:	b402d605 	strlt	sp, [r2], #-1541	; 0xfffff9fb
     ff8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     ffc:	00077d07 	andeq	r7, r7, r7, lsl #26
    1000:	02d70500 	sbcseq	r0, r7, #0, 10
    1004:	000000a2 	andeq	r0, r0, r2, lsr #1
    1008:	09d1073c 	ldmibeq	r1, {r2, r3, r4, r5, r8, r9, sl}^
    100c:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    1010:	0000b402 	andeq	fp, r0, r2, lsl #8
    1014:	72074000 	andvc	r4, r7, #0
    1018:	05000008 	streq	r0, [r0, #-8]
    101c:	00b402d9 	ldrsbteq	r0, [r4], r9
    1020:	07440000 	strbeq	r0, [r4, -r0]
    1024:	000008cd 	andeq	r0, r0, sp, asr #17
    1028:	ee02da05 	vmla.f32	s26, s4, s10
    102c:	48000001 	stmdami	r0, {r0}
    1030:	00015207 	andeq	r5, r1, r7, lsl #4
    1034:	02db0500 	sbcseq	r0, fp, #0, 10
    1038:	000000b4 	strheq	r0, [r0], -r4
    103c:	07110750 			; <UNDEFINED> instruction: 0x07110750
    1040:	dc050000 	stcle	0, cr0, [r5], {-0}
    1044:	0000b402 	andeq	fp, r0, r2, lsl #8
    1048:	34075400 	strcc	r5, [r7], #-1024	; 0xfffffc00
    104c:	0500000a 	streq	r0, [r0, #-10]
    1050:	00b402dd 	ldrsbteq	r0, [r4], sp
    1054:	07580000 	ldrbeq	r0, [r8, -r0]
    1058:	00000798 	muleq	r0, r8, r7
    105c:	a202de05 	andge	sp, r2, #5, 28	; 0x50
    1060:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1064:	00051c07 	andeq	r1, r5, r7, lsl #24
    1068:	02df0500 	sbcseq	r0, pc, #0, 10
    106c:	000000b4 	strheq	r0, [r0], -r4
    1070:	059e0760 	ldreq	r0, [lr, #1888]	; 0x760
    1074:	e0050000 	and	r0, r5, r0
    1078:	0000b402 	andeq	fp, r0, r2, lsl #8
    107c:	a2076400 	andge	r6, r7, #0, 8
    1080:	05000007 	streq	r0, [r0, #-7]
    1084:	01ee02e1 	mvneq	r0, r1, ror #5
    1088:	07680000 	strbeq	r0, [r8, -r0]!
    108c:	00000a67 	andeq	r0, r0, r7, ror #20
    1090:	b402e205 	strlt	lr, [r2], #-517	; 0xfffffdfb
    1094:	70000000 	andvc	r0, r0, r0
    1098:	52534308 	subspl	r4, r3, #8, 6	; 0x20000000
    109c:	02e30500 	rsceq	r0, r3, #0, 10
    10a0:	000000b4 	strheq	r0, [r0], -r4
    10a4:	07ac0774 			; <UNDEFINED> instruction: 0x07ac0774
    10a8:	e4050000 	str	r0, [r5], #-0
    10ac:	0001ee02 	andeq	lr, r1, r2, lsl #28
    10b0:	2e077800 	cdpcs	8, 0, cr7, cr7, cr0, {0}
    10b4:	0500000a 	streq	r0, [r0, #-10]
    10b8:	00b402e5 	adcseq	r0, r4, r5, ror #5
    10bc:	07800000 	streq	r0, [r0, r0]
    10c0:	00000526 	andeq	r0, r0, r6, lsr #10
    10c4:	b402e605 	strlt	lr, [r2], #-1541	; 0xfffff9fb
    10c8:	84000000 	strhi	r0, [r0], #-0
    10cc:	00056507 	andeq	r6, r5, r7, lsl #10
    10d0:	02e70500 	rsceq	r0, r7, #0, 10
    10d4:	000000b4 	strheq	r0, [r0], -r4
    10d8:	01720788 	cmneq	r2, r8, lsl #15
    10dc:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
    10e0:	0000b402 	andeq	fp, r0, r2, lsl #8
    10e4:	0c008c00 	stceq	12, cr8, [r0], {-0}
    10e8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    10ec:	4802ea05 	stmdami	r2, {r0, r2, r9, fp, sp, lr, pc}
    10f0:	0d000002 	stceq	0, cr0, [r0, #-8]
    10f4:	00000cd6 	ldrdeq	r0, [r0], -r6
    10f8:	03389601 	teqeq	r8, #1048576	; 0x100000
    10fc:	00500800 	subseq	r0, r0, r0, lsl #16
    1100:	9c010000 	stcls	0, cr0, [r1], {-0}
    1104:	000cba0e 	andeq	fp, ip, lr, lsl #20
    1108:	88db0100 	ldmhi	fp, {r8}^
    110c:	78080003 	stmdavc	r8, {r0, r1}
    1110:	01000000 	mrseq	r0, (UNDEF: 0)
    1114:	00046f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
    1118:	6d740f00 	ldclvs	15, cr0, [r4, #-0]
    111c:	dd010070 	stcle	0, cr0, [r1, #-448]	; 0xfffffe40
    1120:	000000a2 	andeq	r0, r0, r2, lsr #1
    1124:	00000021 	andeq	r0, r0, r1, lsr #32
    1128:	000ce110 	andeq	lr, ip, r0, lsl r1
    112c:	a2dd0100 	sbcsge	r0, sp, #0, 2
    1130:	70000000 	andvc	r0, r0, r0
    1134:	10000000 	andne	r0, r0, r0
    1138:	00000ca9 	andeq	r0, r0, r9, lsr #25
    113c:	00a2dd01 	adceq	sp, r2, r1, lsl #26
    1140:	00a70000 	adceq	r0, r7, r0
    1144:	9a100000 	bls	40114c <_Min_Stack_Size+0x400d4c>
    1148:	0100000c 	tsteq	r0, ip
    114c:	0000a2dd 	ldrdeq	sl, [r0], -sp
    1150:	0000ea00 	andeq	lr, r0, r0, lsl #20
    1154:	0ca41000 	stceq	0, cr1, [r4]
    1158:	dd010000 	stcle	0, cr0, [r1, #-0]
    115c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1160:	00000129 	andeq	r0, r0, r9, lsr #2
    1164:	07f31100 	ldrbeq	r1, [r3, r0, lsl #2]!
    1168:	44040000 	strmi	r0, [r4], #-0
    116c:	00047b07 	andeq	r7, r4, r7, lsl #22
    1170:	00970500 	addseq	r0, r7, r0, lsl #10
    1174:	f7120000 			; <UNDEFINED> instruction: 0xf7120000
    1178:	0100000c 	tsteq	r0, ip
    117c:	0000a27c 	andeq	sl, r0, ip, ror r2
    1180:	10030500 	andne	r0, r3, r0, lsl #10
    1184:	0a200000 	beq	80118c <_Min_Stack_Size+0x800d8c>
    1188:	0000008c 	andeq	r0, r0, ip, lsl #1
    118c:	000004a1 	andeq	r0, r0, r1, lsr #9
    1190:	0000ad0b 	andeq	sl, r0, fp, lsl #26
    1194:	12000f00 	andne	r0, r0, #0, 30
    1198:	0000262d 	andeq	r2, r0, sp, lsr #12
    119c:	04b27d01 	ldrteq	r7, [r2], #3329	; 0xd01
    11a0:	03050000 	movweq	r0, #20480	; 0x5000
    11a4:	20000000 	andcs	r0, r0, r0
    11a8:	0004b709 	andeq	fp, r4, r9, lsl #14
    11ac:	04910500 	ldreq	r0, [r1], #1280	; 0x500
    11b0:	eb000000 	bl	11b8 <_Min_Stack_Size+0xdb8>
    11b4:	04000009 	streq	r0, [r0], #-9
    11b8:	00042d00 	andeq	r2, r4, r0, lsl #26
    11bc:	98010400 	stmdals	r1, {sl}
    11c0:	01000002 	tsteq	r0, r2
    11c4:	00000f24 	andeq	r0, r0, r4, lsr #30
    11c8:	0000087a 	andeq	r0, r0, sl, ror r8
    11cc:	00000120 	andeq	r0, r0, r0, lsr #2
    11d0:	00000000 	andeq	r0, r0, r0
    11d4:	000007a7 	andeq	r0, r0, r7, lsr #15
    11d8:	55030102 	strpl	r0, [r3, #-258]	; 0xfffffefe
    11dc:	00000294 	muleq	r0, r4, r2
    11e0:	00099b03 	andeq	r9, r9, r3, lsl #22
    11e4:	8d037200 	sfmhi	f7, 4, [r3, #-0]
    11e8:	74000004 	strvc	r0, [r0], #-4
    11ec:	0003bc03 	andeq	fp, r3, r3, lsl #24
    11f0:	f9037500 			; <UNDEFINED> instruction: 0xf9037500
    11f4:	76000008 	strvc	r0, [r0], -r8
    11f8:	0004eb03 	andeq	lr, r4, r3, lsl #22
    11fc:	fe037b00 	vseleq.f64	d7, d3, d0
    1200:	7c000009 	stcvc	0, cr0, [r0], {9}
    1204:	00042203 	andeq	r2, r4, r3, lsl #4
    1208:	e2037e00 	and	r7, r3, #0, 28
    120c:	7f000005 	svcvc	0x00000005
    1210:	00013e03 	andeq	r3, r1, r3, lsl #28
    1214:	2c030000 	stccs	0, cr0, [r3], {-0}
    1218:	01000000 	mrseq	r0, (UNDEF: 0)
    121c:	0009e103 	andeq	lr, r9, r3, lsl #2
    1220:	30030200 	andcc	r0, r3, r0, lsl #4
    1224:	03000001 	movweq	r0, #1
    1228:	0008c203 	andeq	ip, r8, r3, lsl #4
    122c:	27030400 	strcs	r0, [r3, -r0, lsl #8]
    1230:	0500000b 	streq	r0, [r0, #-11]
    1234:	000a4803 	andeq	r4, sl, r3, lsl #16
    1238:	4b030600 	blmi	c2a40 <_Min_Stack_Size+0xc2640>
    123c:	0700000b 	streq	r0, [r0, -fp]
    1240:	00086703 	andeq	r6, r8, r3, lsl #14
    1244:	c4030800 	strgt	r0, [r3], #-2048	; 0xfffff800
    1248:	09000006 	stmdbeq	r0, {r1, r2}
    124c:	00080903 	andeq	r0, r8, r3, lsl #18
    1250:	4d030a00 	vstrmi	s0, [r3, #-0]
    1254:	0b000007 	bleq	1278 <_Min_Stack_Size+0xe78>
    1258:	00057a03 	andeq	r7, r5, r3, lsl #20
    125c:	d9030c00 	stmdble	r3, {sl, fp}
    1260:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    1264:	00046903 	andeq	r6, r4, r3, lsl #18
    1268:	90030e00 	andls	r0, r3, r0, lsl #28
    126c:	0f000006 	svceq	0x00000006
    1270:	0001e403 	andeq	lr, r1, r3, lsl #8
    1274:	7b031000 	blvc	c527c <_Min_Stack_Size+0xc4e7c>
    1278:	11000004 	tstne	r0, r4
    127c:	000ada03 	andeq	sp, sl, r3, lsl #20
    1280:	31031200 	mrscc	r1, R11_usr
    1284:	13000005 	movwne	r0, #5
    1288:	00001e03 	andeq	r1, r0, r3, lsl #28
    128c:	43031400 	movwmi	r1, #13312	; 0x3400
    1290:	15000000 	strne	r0, [r0, #-0]
    1294:	000b0b03 	andeq	r0, fp, r3, lsl #22
    1298:	f6031600 			; <UNDEFINED> instruction: 0xf6031600
    129c:	17000001 	strne	r0, [r0, -r1]
    12a0:	0007e003 	andeq	lr, r7, r3
    12a4:	5e031800 	cdppl	8, 0, cr1, cr3, cr0, {0}
    12a8:	19000006 	stmdbne	r0, {r1, r2}
    12ac:	00084603 	andeq	r4, r8, r3, lsl #12
    12b0:	ef031a00 	svc	0x00031a00
    12b4:	1b000005 	blne	12d0 <_Min_Stack_Size+0xed0>
    12b8:	000a3e03 	andeq	r3, sl, r3, lsl #28
    12bc:	41031c00 	tstmi	r3, r0, lsl #24
    12c0:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    12c4:	00091803 	andeq	r1, r9, r3, lsl #16
    12c8:	7b031e00 	blvc	c8ad0 <_Min_Stack_Size+0xc86d0>
    12cc:	1f000000 	svcne	0x00000000
    12d0:	000acd03 	andeq	ip, sl, r3, lsl #26
    12d4:	83032000 	movwhi	r2, #12288	; 0x3000
    12d8:	21000006 	tstcs	r0, r6
    12dc:	00010803 	andeq	r0, r1, r3, lsl #16
    12e0:	70032200 	andvc	r2, r3, r0, lsl #4
    12e4:	23000005 	movwcs	r0, #5
    12e8:	0006cf03 	andeq	ip, r6, r3, lsl #30
    12ec:	66032400 	strvs	r2, [r3], -r0, lsl #8
    12f0:	25000001 	strcs	r0, [r0, #-1]
    12f4:	0008ed03 	andeq	lr, r8, r3, lsl #26
    12f8:	22032600 	andcs	r2, r3, #0, 12
    12fc:	2700000a 	strcs	r0, [r0, -sl]
    1300:	00054703 	andeq	r4, r5, r3, lsl #14
    1304:	f9032800 			; <UNDEFINED> instruction: 0xf9032800
    1308:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    130c:	00025803 	andeq	r5, r2, r3, lsl #16
    1310:	b2032a00 	andlt	r2, r3, #0, 20
    1314:	2b000005 	blcs	1330 <_Min_Stack_Size+0xf30>
    1318:	00027603 	andeq	r7, r2, r3, lsl #12
    131c:	09032c00 	stmdbeq	r3, {sl, fp, sp}
    1320:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    1324:	00041503 	andeq	r1, r4, r3, lsl #10
    1328:	22032e00 	andcs	r2, r3, #0, 28
    132c:	2f000009 	svccs	0x00000009
    1330:	00085e03 	andeq	r5, r8, r3, lsl #28
    1334:	48033000 	stmdami	r3, {ip, sp}
    1338:	31000001 	tstcc	r0, r1
    133c:	0006ba03 	andeq	fp, r6, r3, lsl #20
    1340:	b6033200 	strlt	r3, [r3], -r0, lsl #4
    1344:	33000007 	movwcc	r0, #7
    1348:	00024d03 	andeq	r4, r2, r3, lsl #26
    134c:	f9033400 			; <UNDEFINED> instruction: 0xf9033400
    1350:	35000006 	strcc	r0, [r0, #-6]
    1354:	00023703 	andeq	r3, r2, r3, lsl #14
    1358:	6f033600 	svcvs	0x00033600
    135c:	37000009 	strcc	r0, [r0, -r9]
    1360:	000a1003 	andeq	r1, sl, r3
    1364:	e3033800 	movw	r3, #14336	; 0x3800
    1368:	3900000a 	stmdbcc	r0, {r1, r3}
    136c:	00050a03 	andeq	r0, r5, r3, lsl #20
    1370:	71033a00 	tstvc	r3, r0, lsl #20
    1374:	3b000006 	blcc	1394 <_Min_Stack_Size+0xf94>
    1378:	0007c003 	andeq	ip, r7, r3
    137c:	55033c00 	strpl	r3, [r3, #-3072]	; 0xfffff400
    1380:	3d000006 	stccc	0, cr0, [r0, #-24]	; 0xffffffe8
    1384:	00020c03 	andeq	r0, r2, r3, lsl #24
    1388:	04033e00 	streq	r3, [r3], #-3584	; 0xfffff200
    138c:	3f000007 	svccc	0x00000007
    1390:	00003503 	andeq	r3, r0, r3, lsl #10
    1394:	0300c000 	movweq	ip, #0
    1398:	0000018d 	andeq	r0, r0, sp, lsl #3
    139c:	190300c1 	stmdbne	r3, {r0, r6, r7}
    13a0:	c200000b 	andgt	r0, r0, #11
    13a4:	08e10300 	stmiaeq	r1!, {r8, r9}^
    13a8:	00c30000 	sbceq	r0, r3, r0
    13ac:	00009903 	andeq	r9, r0, r3, lsl #18
    13b0:	0300c400 	movweq	ip, #1024	; 0x400
    13b4:	00000051 	andeq	r0, r0, r1, asr r0
    13b8:	2e0300c5 	cdpcs	0, 0, cr0, cr3, cr5, {6}
    13bc:	c6000004 	strgt	r0, [r0], -r4
    13c0:	06ae0300 	strteq	r0, [lr], r0, lsl #6
    13c4:	00c70000 	sbceq	r0, r7, r0
    13c8:	0004af03 	andeq	sl, r4, r3, lsl #30
    13cc:	0300c800 	movweq	ip, #2048	; 0x800
    13d0:	00000063 	andeq	r0, r0, r3, rrx
    13d4:	d70300c9 	strle	r0, [r3, -r9, asr #1]
    13d8:	ca000004 	bgt	13f0 <_Min_Stack_Size+0xff0>
    13dc:	09790300 	ldmdbeq	r9!, {r8, r9}^
    13e0:	00cb0000 	sbceq	r0, fp, r0
    13e4:	000b3003 	andeq	r3, fp, r3
    13e8:	0300cc00 	movweq	ip, #3072	; 0xc00
    13ec:	00000741 	andeq	r0, r0, r1, asr #14
    13f0:	880300cd 	stmdahi	r3, {r0, r2, r3, r6, r7}
    13f4:	ce00000a 	cdpgt	0, 0, cr0, cr0, cr10, {0}
    13f8:	08140300 	ldmdaeq	r4, {r8, r9}
    13fc:	00d00000 	sbcseq	r0, r0, r0
    1400:	000ac403 	andeq	ip, sl, r3, lsl #8
    1404:	0300d100 	movweq	sp, #256	; 0x100
    1408:	00000a92 	muleq	r0, r2, sl
    140c:	700300d2 	ldrdvc	r0, [r3], -r2
    1410:	d3000000 	movwle	r0, #0
    1414:	00c50300 	sbceq	r0, r5, r0, lsl #6
    1418:	00d40000 	sbcseq	r0, r4, r0
    141c:	0001da03 	andeq	sp, r1, r3, lsl #20
    1420:	0300d500 	movweq	sp, #1280	; 0x500
    1424:	000004c6 	andeq	r0, r0, r6, asr #9
    1428:	bc0300d6 	stclt	0, cr0, [r3], {214}	; 0xd6
    142c:	d7000004 	strle	r0, [r0, -r4]
    1430:	075f0300 	ldrbeq	r0, [pc, -r0, lsl #6]
    1434:	00d80000 	sbcseq	r0, r8, r0
    1438:	0009f103 	andeq	pc, r9, r3, lsl #2
    143c:	0300d900 	movweq	sp, #2304	; 0x900
    1440:	00000641 	andeq	r0, r0, r1, asr #12
    1444:	040000da 	streq	r0, [r0], #-218	; 0xffffff26
    1448:	000008d7 	ldrdeq	r0, [r0], -r7
    144c:	0025ba03 	eoreq	fp, r5, r3, lsl #20
    1450:	01050000 	mrseq	r0, (UNDEF: 5)
    1454:	0007d406 	andeq	sp, r7, r6, lsl #8
    1458:	08010500 	stmdaeq	r1, {r8, sl}
    145c:	000007d2 	ldrdeq	r0, [r0], -r2
    1460:	22050205 	andcs	r0, r5, #1342177280	; 0x50000000
    1464:	05000008 	streq	r0, [r0, #-8]
    1468:	04f70702 	ldrbteq	r0, [r7], #1794	; 0x702
    146c:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    1470:	04000005 	streq	r0, [r0], #-5
    1474:	0002c63f 	andeq	ip, r2, pc, lsr r6
    1478:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    147c:	00000445 	andeq	r0, r0, r5, asr #8
    1480:	0003b104 	andeq	fp, r3, r4, lsl #2
    1484:	d8410400 	stmdale	r1, {sl}^
    1488:	05000002 	streq	r0, [r0, #-2]
    148c:	00d40704 	sbcseq	r0, r4, r4, lsl #14
    1490:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    1494:	00044005 	andeq	r4, r4, r5
    1498:	07080500 	streq	r0, [r8, -r0, lsl #10]
    149c:	000000cf 	andeq	r0, r0, pc, asr #1
    14a0:	69050406 	stmdbvs	r5, {r1, r2, sl}
    14a4:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    14a8:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    14ac:	aa040000 	bge	1014b4 <_Min_Stack_Size+0x1010b4>
    14b0:	05000005 	streq	r0, [r0, #-5]
    14b4:	0002bb1f 	andeq	fp, r2, pc, lsl fp
    14b8:	03b30400 			; <UNDEFINED> instruction: 0x03b30400
    14bc:	20050000 	andcs	r0, r5, r0
    14c0:	000002cd 	andeq	r0, r0, sp, asr #5
    14c4:	4c070405 	cfstrsmi	mvf0, [r7], {5}
    14c8:	07000006 	streq	r0, [r0, -r6]
    14cc:	00000306 	andeq	r0, r0, r6, lsl #6
    14d0:	00031808 	andeq	r1, r3, r8, lsl #16
    14d4:	03060900 	movweq	r0, #26880	; 0x6900
    14d8:	03320000 	teqeq	r2, #0
    14dc:	110a0000 	mrsne	r0, (UNDEF: 10)
    14e0:	01000003 	tsteq	r0, r3
    14e4:	06100b00 	ldreq	r0, [r0], -r0, lsl #22
    14e8:	037002e8 	cmneq	r0, #232, 4	; 0x8000000e
    14ec:	d50c0000 	strle	r0, [ip, #-0]
    14f0:	0600000f 	streq	r0, [r0], -pc
    14f4:	031802ea 	tsteq	r8, #-1610612722	; 0xa000000e
    14f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    14fc:	00000e9e 	muleq	r0, lr, lr
    1500:	1802eb06 	stmdane	r2, {r1, r2, r8, r9, fp, sp, lr, pc}
    1504:	04000003 	streq	r0, [r0], #-3
    1508:	4c41560d 	mcrrmi	6, 0, r5, r1, cr13
    150c:	02ec0600 	rsceq	r0, ip, #0, 12
    1510:	00000318 	andeq	r0, r0, r8, lsl r3
    1514:	0e680c08 	cdpeq	12, 6, cr0, cr8, cr8, {0}
    1518:	ed060000 	stc	0, cr0, [r6, #-0]
    151c:	00031d02 	andeq	r1, r3, r2, lsl #26
    1520:	0e000c00 	cdpeq	12, 0, cr0, cr0, cr0, {0}
    1524:	00000e0e 	andeq	r0, r0, lr, lsl #28
    1528:	3202ee06 	andcc	lr, r2, #6, 28	; 0x60
    152c:	0b000003 	bleq	1540 <_Min_Stack_Size+0x1140>
    1530:	01540310 	cmpeq	r4, r0, lsl r3
    1534:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    1538:	000dd10c 	andeq	sp, sp, ip, lsl #2
    153c:	01560300 	cmpeq	r6, r0, lsl #6
    1540:	00000318 	andeq	r0, r0, r8, lsl r3
    1544:	52430d00 	subpl	r0, r3, #0, 26
    1548:	01570300 	cmpeq	r7, r0, lsl #6
    154c:	00000318 	andeq	r0, r0, r8, lsl r3
    1550:	0e480c04 	cdpeq	12, 4, cr0, cr8, cr4, {0}
    1554:	58030000 	stmdapl	r3, {}	; <UNPREDICTABLE>
    1558:	00031801 	andeq	r1, r3, r1, lsl #16
    155c:	970c0800 	strls	r0, [ip, -r0, lsl #16]
    1560:	0300000e 	movweq	r0, #14
    1564:	03180159 	tsteq	r8, #1073741846	; 0x40000016
    1568:	000c0000 	andeq	r0, ip, r0
    156c:	000f910e 	andeq	r9, pc, lr, lsl #2
    1570:	015a0300 	cmpeq	sl, r0, lsl #6
    1574:	0000037c 	andeq	r0, r0, ip, ror r3
    1578:	00031c0b 	andeq	r1, r3, fp, lsl #24
    157c:	00042802 	andeq	r2, r4, r2, lsl #16
    1580:	43410d00 	movtmi	r0, #7424	; 0x1d00
    1584:	02030052 	andeq	r0, r3, #82	; 0x52
    1588:	00031802 	andeq	r1, r3, r2, lsl #16
    158c:	020c0000 	andeq	r0, ip, #0
    1590:	0300000e 	movweq	r0, #14
    1594:	03180203 	tsteq	r8, #805306368	; 0x30000000
    1598:	0c040000 	stceq	0, cr0, [r4], {-0}
    159c:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    15a0:	18020403 	stmdane	r2, {r0, r1, sl}
    15a4:	08000003 	stmdaeq	r0, {r0, r1}
    15a8:	0052530d 	subseq	r5, r2, sp, lsl #6
    15ac:	18020503 	stmdane	r2, {r0, r1, r8, sl}
    15b0:	0c000003 	stceq	0, cr0, [r0], {3}
    15b4:	0052430d 	subseq	r4, r2, sp, lsl #6
    15b8:	18020603 	stmdane	r2, {r0, r1, r9, sl}
    15bc:	10000003 	andne	r0, r0, r3
    15c0:	000dc30c 	andeq	ip, sp, ip, lsl #6
    15c4:	02070300 	andeq	r0, r7, #0, 6
    15c8:	00000318 	andeq	r0, r0, r8, lsl r3
    15cc:	0e5a0c14 	mrceq	12, 2, r0, cr10, cr4, {0}
    15d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    15d4:	00031802 	andeq	r1, r3, r2, lsl #16
    15d8:	0e001800 	cdpeq	8, 0, cr1, cr0, cr0, {0}
    15dc:	0000103b 	andeq	r1, r0, fp, lsr r0
    15e0:	c5020903 	strgt	r0, [r2, #-2307]	; 0xfffff6fd
    15e4:	0b000003 	bleq	15f8 <_Min_Stack_Size+0x11f8>
    15e8:	02c70390 	sbceq	r0, r7, #144, 6	; 0x40000002
    15ec:	000005dd 	ldrdeq	r0, [r0], -sp
    15f0:	0052430d 	subseq	r4, r2, sp, lsl #6
    15f4:	1802c903 	stmdane	r2, {r0, r1, r8, fp, lr, pc}
    15f8:	00000003 	andeq	r0, r0, r3
    15fc:	0002450c 	andeq	r4, r2, ip, lsl #10
    1600:	02ca0300 	sbceq	r0, sl, #0, 6
    1604:	00000318 	andeq	r0, r0, r8, lsl r3
    1608:	056b0c04 	strbeq	r0, [fp, #-3076]!	; 0xfffff3fc
    160c:	cb030000 	blgt	c1614 <_Min_Stack_Size+0xc1214>
    1610:	00031802 	andeq	r1, r3, r2, lsl #16
    1614:	430d0800 	movwmi	r0, #55296	; 0xd800
    1618:	03005249 	movweq	r5, #585	; 0x249
    161c:	031802cc 	tsteq	r8, #204, 4	; 0xc000000c
    1620:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1624:	000001a0 	andeq	r0, r0, r0, lsr #3
    1628:	1802cd03 	stmdane	r2, {r0, r1, r8, sl, fp, lr, pc}
    162c:	10000003 	andne	r0, r0, r3
    1630:	0009660c 	andeq	r6, r9, ip, lsl #12
    1634:	02ce0300 	sbceq	r0, lr, #0, 6
    1638:	00000318 	andeq	r0, r0, r8, lsl r3
    163c:	053e0c14 	ldreq	r0, [lr, #-3092]!	; 0xfffff3ec
    1640:	cf030000 	svcgt	0x00030000
    1644:	00031802 	andeq	r1, r3, r2, lsl #16
    1648:	690c1800 	stmdbvs	ip, {fp, ip}
    164c:	03000007 	movweq	r0, #7
    1650:	030602d0 	movweq	r0, #25296	; 0x62d0
    1654:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    1658:	0000072e 	andeq	r0, r0, lr, lsr #14
    165c:	1802d103 	stmdane	r2, {r0, r1, r8, ip, lr, pc}
    1660:	20000003 	andcs	r0, r0, r3
    1664:	0001c80c 	andeq	ip, r1, ip, lsl #16
    1668:	02d20300 	sbcseq	r0, r2, #0, 6
    166c:	00000318 	andeq	r0, r0, r8, lsl r3
    1670:	07730c24 	ldrbeq	r0, [r3, -r4, lsr #24]!
    1674:	d3030000 	movwle	r0, #12288	; 0x3000
    1678:	00032202 	andeq	r2, r3, r2, lsl #4
    167c:	b70c2800 	strlt	r2, [ip, -r0, lsl #16]
    1680:	0300000a 	movweq	r0, #10
    1684:	031802d4 	tsteq	r8, #212, 4	; 0x4000000d
    1688:	0c300000 	ldceq	0, cr0, [r0], #-0
    168c:	000009d9 	ldrdeq	r0, [r0], -r9
    1690:	1802d503 	stmdane	r2, {r0, r1, r8, sl, ip, lr, pc}
    1694:	34000003 	strcc	r0, [r0], #-3
    1698:	0008ba0c 	andeq	fp, r8, ip, lsl #20
    169c:	02d60300 	sbcseq	r0, r6, #0, 6
    16a0:	00000318 	andeq	r0, r0, r8, lsl r3
    16a4:	077d0c38 			; <UNDEFINED> instruction: 0x077d0c38
    16a8:	d7030000 	strle	r0, [r3, -r0]
    16ac:	00030602 	andeq	r0, r3, r2, lsl #12
    16b0:	d10c3c00 	tstle	ip, r0, lsl #24
    16b4:	03000009 	movweq	r0, #9
    16b8:	031802d8 	tsteq	r8, #216, 4	; 0x8000000d
    16bc:	0c400000 	mareq	acc0, r0, r0
    16c0:	00000872 	andeq	r0, r0, r2, ror r8
    16c4:	1802d903 	stmdane	r2, {r0, r1, r8, fp, ip, lr, pc}
    16c8:	44000003 	strmi	r0, [r0], #-3
    16cc:	0008cd0c 	andeq	ip, r8, ip, lsl #26
    16d0:	02da0300 	sbcseq	r0, sl, #0, 6
    16d4:	00000322 	andeq	r0, r0, r2, lsr #6
    16d8:	01520c48 	cmpeq	r2, r8, asr #24
    16dc:	db030000 	blle	c16e4 <_Min_Stack_Size+0xc12e4>
    16e0:	00031802 	andeq	r1, r3, r2, lsl #16
    16e4:	110c5000 	mrsne	r5, (UNDEF: 12)
    16e8:	03000007 	movweq	r0, #7
    16ec:	031802dc 	tsteq	r8, #220, 4	; 0xc000000d
    16f0:	0c540000 	mraeq	r0, r4, acc0
    16f4:	00000a34 	andeq	r0, r0, r4, lsr sl
    16f8:	1802dd03 	stmdane	r2, {r0, r1, r8, sl, fp, ip, lr, pc}
    16fc:	58000003 	stmdapl	r0, {r0, r1}
    1700:	0007980c 	andeq	r9, r7, ip, lsl #16
    1704:	02de0300 	sbcseq	r0, lr, #0, 6
    1708:	00000306 	andeq	r0, r0, r6, lsl #6
    170c:	051c0c5c 	ldreq	r0, [ip, #-3164]	; 0xfffff3a4
    1710:	df030000 	svcle	0x00030000
    1714:	00031802 	andeq	r1, r3, r2, lsl #16
    1718:	9e0c6000 	cdpls	0, 0, cr6, cr12, cr0, {0}
    171c:	03000005 	movweq	r0, #5
    1720:	031802e0 	tsteq	r8, #224, 4
    1724:	0c640000 	stcleq	0, cr0, [r4], #-0
    1728:	000007a2 	andeq	r0, r0, r2, lsr #15
    172c:	2202e103 	andcs	lr, r2, #-1073741824	; 0xc0000000
    1730:	68000003 	stmdavs	r0, {r0, r1}
    1734:	000a670c 	andeq	r6, sl, ip, lsl #14
    1738:	02e20300 	rsceq	r0, r2, #0, 6
    173c:	00000318 	andeq	r0, r0, r8, lsl r3
    1740:	53430d70 	movtpl	r0, #15728	; 0x3d70
    1744:	e3030052 	movw	r0, #12370	; 0x3052
    1748:	00031802 	andeq	r1, r3, r2, lsl #16
    174c:	ac0c7400 	cfstrsge	mvf7, [ip], {-0}
    1750:	03000007 	movweq	r0, #7
    1754:	032202e4 			; <UNDEFINED> instruction: 0x032202e4
    1758:	0c780000 	ldcleq	0, cr0, [r8], #-0
    175c:	00000a2e 	andeq	r0, r0, lr, lsr #20
    1760:	1802e503 	stmdane	r2, {r0, r1, r8, sl, sp, lr, pc}
    1764:	80000003 	andhi	r0, r0, r3
    1768:	0005260c 	andeq	r2, r5, ip, lsl #12
    176c:	02e60300 	rsceq	r0, r6, #0, 6
    1770:	00000318 	andeq	r0, r0, r8, lsl r3
    1774:	05650c84 	strbeq	r0, [r5, #-3204]!	; 0xfffff37c
    1778:	e7030000 	str	r0, [r3, -r0]
    177c:	00031802 	andeq	r1, r3, r2, lsl #16
    1780:	720c8800 	andvc	r8, ip, #0, 16
    1784:	03000001 	movweq	r0, #1
    1788:	031802e8 	tsteq	r8, #232, 4	; 0x8000000e
    178c:	008c0000 	addeq	r0, ip, r0
    1790:	0001bc0e 	andeq	fp, r1, lr, lsl #24
    1794:	02ea0300 	rsceq	r0, sl, #0, 6
    1798:	00000434 	andeq	r0, r0, r4, lsr r4
    179c:	cb070102 	blgt	1c1bac <_Min_Stack_Size+0x1c17ac>
    17a0:	000005fe 	strdeq	r0, [r0], -lr
    17a4:	000dc903 	andeq	ip, sp, r3, lsl #18
    17a8:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    17ac:	0100000d 	tsteq	r0, sp
    17b0:	08010500 	stmdaeq	r1, {r8, sl}
    17b4:	000007db 	ldrdeq	r0, [r0], -fp
    17b8:	3a080102 	bcc	201bc8 <_Min_Stack_Size+0x2017c8>
    17bc:	00000626 	andeq	r0, r0, r6, lsr #12
    17c0:	0004d003 	andeq	sp, r4, r3
    17c4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    17c8:	01000009 	tsteq	r0, r9
    17cc:	00080003 	andeq	r0, r8, r3
    17d0:	a3030200 	movwge	r0, #12800	; 0x3200
    17d4:	03000004 	movweq	r0, #4
    17d8:	058c0400 	streq	r0, [ip, #1024]	; 0x400
    17dc:	3f080000 	svccc	0x00080000
    17e0:	00000605 	andeq	r0, r0, r5, lsl #12
    17e4:	000e070f 	andeq	r0, lr, pc, lsl #14
    17e8:	020e0200 	andeq	r0, lr, #0, 4
    17ec:	00000306 	andeq	r0, r0, r6, lsl #6
    17f0:	00065b03 	andeq	r5, r6, r3, lsl #22
    17f4:	118a1000 	orrne	r1, sl, r0
    17f8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    17fc:	00030602 	andeq	r0, r3, r2, lsl #12
    1800:	10661100 	rsbne	r1, r6, r0, lsl #2
    1804:	10020000 	andne	r0, r2, r0
    1808:	00030602 	andeq	r0, r3, r2, lsl #12
    180c:	8b120000 	blhi	481814 <_Min_Stack_Size+0x481414>
    1810:	0100000e 	tsteq	r0, lr
    1814:	000400e5 	andeq	r0, r4, r5, ror #1
    1818:	00000208 	andeq	r0, r0, r8, lsl #4
    181c:	129c0100 	addsne	r0, ip, #0, 2
    1820:	00000e1b 	andeq	r0, r0, fp, lsl lr
    1824:	0404f001 	streq	pc, [r4], #-1
    1828:	00020800 	andeq	r0, r2, r0, lsl #16
    182c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1830:	000e4f13 	andeq	r4, lr, r3, lsl pc
    1834:	26c80100 	strbcs	r0, [r8], r0, lsl #2
    1838:	08000006 	stmdaeq	r0, {r1, r2}
    183c:	2c080004 	stccs	0, cr0, [r8], {4}
    1840:	01000000 	mrseq	r0, (UNDEF: 0)
    1844:	0006a09c 	muleq	r6, ip, r0
    1848:	042a1400 	strteq	r1, [sl], #-1024	; 0xfffffc00
    184c:	066c0800 	strbteq	r0, [ip], -r0, lsl #16
    1850:	15000000 	strne	r0, [r0, #-0]
    1854:	00000ebe 			; <UNDEFINED> instruction: 0x00000ebe
    1858:	26010701 	strcs	r0, [r1], -r1, lsl #14
    185c:	34000006 	strcc	r0, [r0], #-6
    1860:	2c080004 	stccs	0, cr0, [r8], {4}
    1864:	01000000 	mrseq	r0, (UNDEF: 0)
    1868:	0006ef9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    186c:	0da31600 	stceq	6, cr1, [r3]
    1870:	07010000 	streq	r0, [r1, -r0]
    1874:	00030601 	andeq	r0, r3, r1, lsl #12
    1878:	00016000 	andeq	r6, r1, r0
    187c:	04481400 	strbeq	r1, [r8], #-1024	; 0xfffffc00
    1880:	09ae0800 	stmibeq	lr!, {fp}
    1884:	54170000 	ldrpl	r0, [r7], #-0
    1888:	c4080004 	strgt	r0, [r8], #-4
    188c:	18000009 	stmdane	r0, {r0, r3}
    1890:	30015201 	andcc	r5, r1, r1, lsl #4
    1894:	02510118 	subseq	r0, r1, #24, 2
    1898:	01180074 	tsteq	r8, r4, ror r0
    189c:	ff090250 			; <UNDEFINED> instruction: 0xff090250
    18a0:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    18a4:	01000006 	tsteq	r0, r6
    18a8:	000626a7 	andeq	r2, r6, r7, lsr #13
    18ac:	00046000 	andeq	r6, r4, r0
    18b0:	00003408 	andeq	r3, r0, r8, lsl #8
    18b4:	389c0100 	ldmcc	ip, {r8}
    18b8:	19000007 	stmdbne	r0, {r0, r1, r2}
    18bc:	08000482 	stmdaeq	r0, {r1, r7, sl}
    18c0:	000009e0 	andeq	r0, r0, r0, ror #19
    18c4:	0000071b 	andeq	r0, r0, fp, lsl r7
    18c8:	01500118 	cmpeq	r0, r8, lsl r1
    18cc:	88190033 	ldmdahi	r9, {r0, r1, r4, r5}
    18d0:	a0080004 	andge	r0, r8, r4
    18d4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    18d8:	18000007 	stmdane	r0, {r0, r1, r2}
    18dc:	3f015001 	svccc	0x00015001
    18e0:	048c1400 	streq	r1, [ip], #1024	; 0x400
    18e4:	065b0800 	ldrbeq	r0, [fp], -r0, lsl #16
    18e8:	1a000000 	bne	18f0 <_Min_Stack_Size+0x14f0>
    18ec:	00000be8 	andeq	r0, r0, r8, ror #23
    18f0:	94013701 	strls	r3, [r1], #-1793	; 0xfffff8ff
    18f4:	10080004 	andne	r0, r8, r4
    18f8:	01000000 	mrseq	r0, (UNDEF: 0)
    18fc:	0ea31b9c 	vdupeq.32	<illegal reg q9.5>, r1
    1900:	42010000 	andmi	r0, r1, #0
    1904:	00030601 	andeq	r0, r3, r1, lsl #12
    1908:	0004a400 	andeq	sl, r4, r0, lsl #8
    190c:	00000c08 	andeq	r0, r0, r8, lsl #24
    1910:	1c9c0100 	ldfnes	f0, [ip], {0}
    1914:	00000fcb 	andeq	r0, r0, fp, asr #31
    1918:	b0015201 	andlt	r5, r1, r1, lsl #4
    191c:	1c080004 	stcne	0, cr0, [r8], {4}
    1920:	01000000 	mrseq	r0, (UNDEF: 0)
    1924:	0007a99c 	muleq	r7, ip, r9
    1928:	31261600 			; <UNDEFINED> instruction: 0x31261600
    192c:	52010000 	andpl	r0, r1, #0
    1930:	00031801 	andeq	r1, r3, r1, lsl #16
    1934:	00018c00 	andeq	r8, r1, r0, lsl #24
    1938:	0eec1d00 	cdpeq	13, 14, cr1, cr12, cr0, {0}
    193c:	54010000 	strpl	r0, [r1], #-0
    1940:	00030601 	andeq	r0, r3, r1, lsl #12
    1944:	0001ab00 	andeq	sl, r1, r0, lsl #22
    1948:	04ba1400 	ldrteq	r1, [sl], #1024	; 0x400
    194c:	074a0800 	strbeq	r0, [sl, -r0, lsl #16]
    1950:	c0140000 	andsgt	r0, r4, r0
    1954:	4a080004 	bmi	20196c <_Min_Stack_Size+0x20156c>
    1958:	00000007 	andeq	r0, r0, r7
    195c:	000ef61a 	andeq	pc, lr, sl, lsl r6	; <UNPREDICTABLE>
    1960:	01650100 	cmneq	r5, r0, lsl #2
    1964:	080004cc 	stmdaeq	r0, {r2, r3, r6, r7, sl}
    1968:	00000010 	andeq	r0, r0, r0, lsl r0
    196c:	af1a9c01 	svcge	0x001a9c01
    1970:	0100000e 	tsteq	r0, lr
    1974:	04dc0175 	ldrbeq	r0, [ip], #373	; 0x175
    1978:	00100800 	andseq	r0, r0, r0, lsl #16
    197c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1980:	000d731b 	andeq	r7, sp, fp, lsl r3
    1984:	017f0100 	cmneq	pc, r0, lsl #2
    1988:	00000306 	andeq	r0, r0, r6, lsl #6
    198c:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
    1990:	00000008 	andeq	r0, r0, r8
    1994:	a01b9c01 	andsge	r9, fp, r1, lsl #24
    1998:	0100000f 	tsteq	r0, pc
    199c:	03060188 	movweq	r0, #24968	; 0x6188
    19a0:	04f40000 	ldrbteq	r0, [r4], #0
    19a4:	000c0800 	andeq	r0, ip, r0, lsl #16
    19a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    19ac:	00102e1b 	andseq	r2, r0, fp, lsl lr
    19b0:	01910100 	orrseq	r0, r1, r0, lsl #2
    19b4:	00000306 	andeq	r0, r0, r6, lsl #6
    19b8:	08000500 	stmdaeq	r0, {r8, sl}
    19bc:	00000010 	andeq	r0, r0, r0, lsl r0
    19c0:	061a9c01 	ldreq	r9, [sl], -r1, lsl #24
    19c4:	0100000f 	tsteq	r0, pc
    19c8:	0510019a 	ldreq	r0, [r0, #-410]	; 0xfffffe66
    19cc:	00100800 	andseq	r0, r0, r0, lsl #16
    19d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19d4:	000e291a 	andeq	r2, lr, sl, lsl r9
    19d8:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    19dc:	08000520 	stmdaeq	r0, {r5, r8, sl}
    19e0:	00000010 	andeq	r0, r0, r0, lsl r0
    19e4:	6e1a9c01 	cdpvs	12, 1, cr9, cr10, cr1, {0}
    19e8:	0100000e 	tsteq	r0, lr
    19ec:	053001ac 	ldreq	r0, [r0, #-428]!	; 0xfffffe54
    19f0:	00100800 	andseq	r0, r0, r0, lsl #16
    19f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19f8:	000fad1a 	andeq	sl, pc, sl, lsl sp	; <UNPREDICTABLE>
    19fc:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    1a00:	08000540 	stmdaeq	r0, {r6, r8, sl}
    1a04:	00000010 	andeq	r0, r0, r0, lsl r0
    1a08:	d81a9c01 	ldmdale	sl, {r0, sl, fp, ip, pc}
    1a0c:	0100000d 	tsteq	r0, sp
    1a10:	055001be 	ldrbeq	r0, [r0, #-446]	; 0xfffffe42
    1a14:	00100800 	andseq	r0, r0, r0, lsl #16
    1a18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a1c:	000ecb1a 	andeq	ip, lr, sl, lsl fp
    1a20:	01c70100 	biceq	r0, r7, r0, lsl #2
    1a24:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
    1a28:	00000010 	andeq	r0, r0, r0, lsl r0
    1a2c:	f71c9c01 			; <UNDEFINED> instruction: 0xf71c9c01
    1a30:	0100000f 	tsteq	r0, pc
    1a34:	057001d2 	ldrbeq	r0, [r0, #-466]!	; 0xfffffe2e
    1a38:	00180800 	andseq	r0, r8, r0, lsl #16
    1a3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a40:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    1a44:	0006311e 	andeq	r3, r6, lr, lsl r1
    1a48:	00057000 	andeq	r7, r5, r0
    1a4c:	00000608 	andeq	r0, r0, r8, lsl #12
    1a50:	01d40100 	bicseq	r0, r4, r0, lsl #2
    1a54:	0006421f 	andeq	r4, r6, pc, lsl r2
    1a58:	70200100 	eorvc	r0, r0, r0, lsl #2
    1a5c:	06080005 	streq	r0, [r8], -r5
    1a60:	21000000 	mrscs	r0, (UNDEF: 0)
    1a64:	0000064e 	andeq	r0, r0, lr, asr #12
    1a68:	000001ca 	andeq	r0, r0, sl, asr #3
    1a6c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1a70:	00001012 	andeq	r1, r0, r2, lsl r0
    1a74:	8801dd01 	stmdahi	r1, {r0, r8, sl, fp, ip, lr, pc}
    1a78:	1c080005 	stcne	0, cr0, [r8], {5}
    1a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a80:	0008fd9c 	muleq	r8, ip, sp
    1a84:	06311e00 	ldrteq	r1, [r1], -r0, lsl #28
    1a88:	05880000 	streq	r0, [r8]
    1a8c:	00060800 	andeq	r0, r6, r0, lsl #16
    1a90:	df010000 	svcle	0x00010000
    1a94:	06421f01 	strbeq	r1, [r2], -r1, lsl #30
    1a98:	20010000 	andcs	r0, r1, r0
    1a9c:	08000588 	stmdaeq	r0, {r3, r7, r8, sl}
    1aa0:	00000006 	andeq	r0, r0, r6
    1aa4:	00064e21 	andeq	r4, r6, r1, lsr #28
    1aa8:	0001dd00 	andeq	sp, r1, r0, lsl #26
    1aac:	00000000 	andeq	r0, r0, r0
    1ab0:	0010491c 	andseq	r4, r0, ip, lsl r9
    1ab4:	01ee0100 	mvneq	r0, r0, lsl #2
    1ab8:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
    1abc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1ac0:	093f9c01 	ldmdbeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    1ac4:	311e0000 	tstcc	lr, r0
    1ac8:	a4000006 	strge	r0, [r0], #-6
    1acc:	08080005 	stmdaeq	r8, {r0, r2}
    1ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad4:	422201f0 	eormi	r0, r2, #240, 2	; 0x3c
    1ad8:	00000006 	andeq	r0, r0, r6
    1adc:	05a42001 	streq	r2, [r4, #1]!
    1ae0:	00080800 	andeq	r0, r8, r0, lsl #16
    1ae4:	4e210000 	cdpmi	0, 2, cr0, cr1, cr0, {0}
    1ae8:	f0000006 			; <UNDEFINED> instruction: 0xf0000006
    1aec:	00000001 	andeq	r0, r0, r1
    1af0:	851c0000 	ldrhi	r0, [ip, #-0]
    1af4:	0100000d 	tsteq	r0, sp
    1af8:	05c001fd 	strbeq	r0, [r0, #509]	; 0x1fd
    1afc:	001c0800 	andseq	r0, ip, r0, lsl #16
    1b00:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b04:	00000981 	andeq	r0, r0, r1, lsl #19
    1b08:	0006311e 	andeq	r3, r6, lr, lsl r1
    1b0c:	0005c000 	andeq	ip, r5, r0
    1b10:	00000808 	andeq	r0, r0, r8, lsl #16
    1b14:	02000100 	andeq	r0, r0, #0, 2
    1b18:	00064222 	andeq	r4, r6, r2, lsr #4
    1b1c:	20010000 	andcs	r0, r1, r0
    1b20:	080005c0 	stmdaeq	r0, {r6, r7, r8, sl}
    1b24:	00000008 	andeq	r0, r0, r8
    1b28:	00064e21 	andeq	r4, r6, r1, lsr #28
    1b2c:	00020300 	andeq	r0, r2, r0, lsl #6
    1b30:	00000000 	andeq	r0, r0, r0
    1b34:	0007f323 	andeq	pc, r7, r3, lsr #6
    1b38:	07440600 	strbeq	r0, [r4, -r0, lsl #12]
    1b3c:	0000098d 	andeq	r0, r0, sp, lsl #19
    1b40:	0002fb07 	andeq	pc, r2, r7, lsl #22
    1b44:	0cf72400 	cfldrdeq	mvd2, [r7]
    1b48:	4c090000 	stcmi	0, cr0, [r9], {-0}
    1b4c:	00000306 	andeq	r0, r0, r6, lsl #6
    1b50:	000e6125 	andeq	r6, lr, r5, lsr #2
    1b54:	186a0100 	stmdane	sl!, {r8}^
    1b58:	05000003 	streq	r0, [r0, #-3]
    1b5c:	00002803 	andeq	r2, r0, r3, lsl #16
    1b60:	0db02620 	ldceq	6, cr2, [r0, #128]!	; 0x80
    1b64:	1c0a0000 	stcne	0, cr0, [sl], {-0}
    1b68:	00030601 	andeq	r0, r3, r1, lsl #12
    1b6c:	0009c400 	andeq	ip, r9, r0, lsl #8
    1b70:	03062700 	movweq	r2, #26368	; 0x6700
    1b74:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1b78:	00000946 	andeq	r0, r0, r6, asr #18
    1b7c:	e001180a 	and	r1, r1, sl, lsl #16
    1b80:	27000009 	strcs	r0, [r0, -r9]
    1b84:	00000294 	muleq	r0, r4, r2
    1b88:	00030627 	andeq	r0, r3, r7, lsr #12
    1b8c:	03062700 	movweq	r2, #26368	; 0x6700
    1b90:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    1b94:	00000fda 	ldrdeq	r0, [r0], -sl
    1b98:	2701170a 	strcs	r1, [r1, -sl, lsl #14]
    1b9c:	00000306 	andeq	r0, r0, r6, lsl #6
    1ba0:	0eaf0000 	cdpeq	0, 10, cr0, cr15, cr0, {0}
    1ba4:	00040000 	andeq	r0, r4, r0
    1ba8:	0000068e 	andeq	r0, r0, lr, lsl #13
    1bac:	02980104 	addseq	r0, r8, #4, 2
    1bb0:	a4010000 	strge	r0, [r1], #-0
    1bb4:	7a000011 	bvc	1c00 <_Min_Stack_Size+0x1800>
    1bb8:	90000008 	andls	r0, r0, r8
    1bbc:	00000002 	andeq	r0, r0, r2
    1bc0:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    1bc4:	0200000b 	andeq	r0, r0, #11
    1bc8:	94550401 	ldrbls	r0, [r5], #-1025	; 0xfffffbff
    1bcc:	03000002 	movweq	r0, #2
    1bd0:	0000099b 	muleq	r0, fp, r9
    1bd4:	048d0372 	streq	r0, [sp], #882	; 0x372
    1bd8:	03740000 	cmneq	r4, #0
    1bdc:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1be0:	08f90375 	ldmeq	r9!, {r0, r2, r4, r5, r6, r8, r9}^
    1be4:	03760000 	cmneq	r6, #0
    1be8:	000004eb 	andeq	r0, r0, fp, ror #9
    1bec:	09fe037b 	ldmibeq	lr!, {r0, r1, r3, r4, r5, r6, r8, r9}^
    1bf0:	037c0000 	cmneq	ip, #0
    1bf4:	00000422 	andeq	r0, r0, r2, lsr #8
    1bf8:	05e2037e 	strbeq	r0, [r2, #894]!	; 0x37e
    1bfc:	037f0000 	cmneq	pc, #0
    1c00:	0000013e 	andeq	r0, r0, lr, lsr r1
    1c04:	002c0300 	eoreq	r0, ip, r0, lsl #6
    1c08:	03010000 	movweq	r0, #4096	; 0x1000
    1c0c:	000009e1 	andeq	r0, r0, r1, ror #19
    1c10:	01300302 	teqeq	r0, r2, lsl #6
    1c14:	03030000 	movweq	r0, #12288	; 0x3000
    1c18:	000008c2 	andeq	r0, r0, r2, asr #17
    1c1c:	0b270304 	bleq	9c2834 <_Min_Stack_Size+0x9c2434>
    1c20:	03050000 	movweq	r0, #20480	; 0x5000
    1c24:	00000a48 	andeq	r0, r0, r8, asr #20
    1c28:	0b4b0306 	bleq	12c2848 <_Min_Stack_Size+0x12c2448>
    1c2c:	03070000 	movweq	r0, #28672	; 0x7000
    1c30:	00000867 	andeq	r0, r0, r7, ror #16
    1c34:	06c40308 	strbeq	r0, [r4], r8, lsl #6
    1c38:	03090000 	movweq	r0, #36864	; 0x9000
    1c3c:	00000809 	andeq	r0, r0, r9, lsl #16
    1c40:	074d030a 	strbeq	r0, [sp, -sl, lsl #6]
    1c44:	030b0000 	movweq	r0, #45056	; 0xb000
    1c48:	0000057a 	andeq	r0, r0, sl, ror r5
    1c4c:	06d9030c 	ldrbeq	r0, [r9], ip, lsl #6
    1c50:	030d0000 	movweq	r0, #53248	; 0xd000
    1c54:	00000469 	andeq	r0, r0, r9, ror #8
    1c58:	0690030e 	ldreq	r0, [r0], lr, lsl #6
    1c5c:	030f0000 	movweq	r0, #61440	; 0xf000
    1c60:	000001e4 	andeq	r0, r0, r4, ror #3
    1c64:	047b0310 	ldrbteq	r0, [fp], #-784	; 0xfffffcf0
    1c68:	03110000 	tsteq	r1, #0
    1c6c:	00000ada 	ldrdeq	r0, [r0], -sl
    1c70:	05310312 	ldreq	r0, [r1, #-786]!	; 0xfffffcee
    1c74:	03130000 	tsteq	r3, #0
    1c78:	0000001e 	andeq	r0, r0, lr, lsl r0
    1c7c:	00430314 	subeq	r0, r3, r4, lsl r3
    1c80:	03150000 	tsteq	r5, #0
    1c84:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1c88:	01f60316 	mvnseq	r0, r6, lsl r3
    1c8c:	03170000 	tsteq	r7, #0
    1c90:	000007e0 	andeq	r0, r0, r0, ror #15
    1c94:	065e0318 			; <UNDEFINED> instruction: 0x065e0318
    1c98:	03190000 	tsteq	r9, #0
    1c9c:	00000846 	andeq	r0, r0, r6, asr #16
    1ca0:	05ef031a 	strbeq	r0, [pc, #794]!	; 1fc2 <_Min_Stack_Size+0x1bc2>
    1ca4:	031b0000 	tsteq	fp, #0
    1ca8:	00000a3e 	andeq	r0, r0, lr, lsr sl
    1cac:	0b41031c 	bleq	1042924 <_Min_Stack_Size+0x1042524>
    1cb0:	031d0000 	tsteq	sp, #0
    1cb4:	00000918 	andeq	r0, r0, r8, lsl r9
    1cb8:	007b031e 	rsbseq	r0, fp, lr, lsl r3
    1cbc:	031f0000 	tsteq	pc, #0
    1cc0:	00000acd 	andeq	r0, r0, sp, asr #21
    1cc4:	06830320 	streq	r0, [r3], r0, lsr #6
    1cc8:	03210000 			; <UNDEFINED> instruction: 0x03210000
    1ccc:	00000108 	andeq	r0, r0, r8, lsl #2
    1cd0:	05700322 	ldrbeq	r0, [r0, #-802]!	; 0xfffffcde
    1cd4:	03230000 			; <UNDEFINED> instruction: 0x03230000
    1cd8:	000006cf 	andeq	r0, r0, pc, asr #13
    1cdc:	01660324 	cmneq	r6, r4, lsr #6
    1ce0:	03250000 			; <UNDEFINED> instruction: 0x03250000
    1ce4:	000008ed 	andeq	r0, r0, sp, ror #17
    1ce8:	0a220326 	beq	882988 <_Min_Stack_Size+0x882588>
    1cec:	03270000 			; <UNDEFINED> instruction: 0x03270000
    1cf0:	00000547 	andeq	r0, r0, r7, asr #10
    1cf4:	00f90328 	rscseq	r0, r9, r8, lsr #6
    1cf8:	03290000 			; <UNDEFINED> instruction: 0x03290000
    1cfc:	00000258 	andeq	r0, r0, r8, asr r2
    1d00:	05b2032a 	ldreq	r0, [r2, #810]!	; 0x32a
    1d04:	032b0000 			; <UNDEFINED> instruction: 0x032b0000
    1d08:	00000276 	andeq	r0, r0, r6, ror r2
    1d0c:	0609032c 	streq	r0, [r9], -ip, lsr #6
    1d10:	032d0000 			; <UNDEFINED> instruction: 0x032d0000
    1d14:	00000415 	andeq	r0, r0, r5, lsl r4
    1d18:	0922032e 	stmdbeq	r2!, {r1, r2, r3, r5, r8, r9}
    1d1c:	032f0000 			; <UNDEFINED> instruction: 0x032f0000
    1d20:	0000085e 	andeq	r0, r0, lr, asr r8
    1d24:	01480330 	cmpeq	r8, r0, lsr r3
    1d28:	03310000 	teqeq	r1, #0
    1d2c:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    1d30:	07b60332 			; <UNDEFINED> instruction: 0x07b60332
    1d34:	03330000 	teqeq	r3, #0
    1d38:	0000024d 	andeq	r0, r0, sp, asr #4
    1d3c:	06f90334 			; <UNDEFINED> instruction: 0x06f90334
    1d40:	03350000 	teqeq	r5, #0
    1d44:	00000237 	andeq	r0, r0, r7, lsr r2
    1d48:	096f0336 	stmdbeq	pc!, {r1, r2, r4, r5, r8, r9}^	; <UNPREDICTABLE>
    1d4c:	03370000 	teqeq	r7, #0
    1d50:	00000a10 	andeq	r0, r0, r0, lsl sl
    1d54:	0ae30338 	beq	ff8c2a3c <_estack+0xdf892a3c>
    1d58:	03390000 	teqeq	r9, #0
    1d5c:	0000050a 	andeq	r0, r0, sl, lsl #10
    1d60:	0671033a 			; <UNDEFINED> instruction: 0x0671033a
    1d64:	033b0000 	teqeq	fp, #0
    1d68:	000007c0 	andeq	r0, r0, r0, asr #15
    1d6c:	0655033c 			; <UNDEFINED> instruction: 0x0655033c
    1d70:	033d0000 	teqeq	sp, #0
    1d74:	0000020c 	andeq	r0, r0, ip, lsl #4
    1d78:	0704033e 	smladxeq	r4, lr, r3, r0
    1d7c:	033f0000 	teqeq	pc, #0
    1d80:	00000035 	andeq	r0, r0, r5, lsr r0
    1d84:	8d0300c0 	stchi	0, cr0, [r3, #-768]	; 0xfffffd00
    1d88:	c1000001 	tstgt	r0, r1
    1d8c:	0b190300 	bleq	642994 <_Min_Stack_Size+0x642594>
    1d90:	00c20000 	sbceq	r0, r2, r0
    1d94:	0008e103 	andeq	lr, r8, r3, lsl #2
    1d98:	0300c300 	movweq	ip, #768	; 0x300
    1d9c:	00000099 	muleq	r0, r9, r0
    1da0:	510300c4 	smlabtpl	r3, r4, r0, r0
    1da4:	c5000000 	strgt	r0, [r0, #-0]
    1da8:	042e0300 	strteq	r0, [lr], #-768	; 0xfffffd00
    1dac:	00c60000 	sbceq	r0, r6, r0
    1db0:	0006ae03 	andeq	sl, r6, r3, lsl #28
    1db4:	0300c700 	movweq	ip, #1792	; 0x700
    1db8:	000004af 	andeq	r0, r0, pc, lsr #9
    1dbc:	630300c8 	movwvs	r0, #12488	; 0x30c8
    1dc0:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    1dc4:	04d70300 	ldrbeq	r0, [r7], #768	; 0x300
    1dc8:	00ca0000 	sbceq	r0, sl, r0
    1dcc:	00097903 	andeq	r7, r9, r3, lsl #18
    1dd0:	0300cb00 	movweq	ip, #2816	; 0xb00
    1dd4:	00000b30 	andeq	r0, r0, r0, lsr fp
    1dd8:	410300cc 	smlabtmi	r3, ip, r0, r0
    1ddc:	cd000007 	stcgt	0, cr0, [r0, #-28]	; 0xffffffe4
    1de0:	0a880300 	beq	fe2029e8 <_estack+0xde1d29e8>
    1de4:	00ce0000 	sbceq	r0, lr, r0
    1de8:	00081403 	andeq	r1, r8, r3, lsl #8
    1dec:	0300d000 	movweq	sp, #0
    1df0:	00000ac4 	andeq	r0, r0, r4, asr #21
    1df4:	920300d1 	andls	r0, r3, #209	; 0xd1
    1df8:	d200000a 	andle	r0, r0, #10
    1dfc:	00700300 	rsbseq	r0, r0, r0, lsl #6
    1e00:	00d30000 	sbcseq	r0, r3, r0
    1e04:	0000c503 	andeq	ip, r0, r3, lsl #10
    1e08:	0300d400 	movweq	sp, #1024	; 0x400
    1e0c:	000001da 	ldrdeq	r0, [r0], -sl
    1e10:	c60300d5 			; <UNDEFINED> instruction: 0xc60300d5
    1e14:	d6000004 	strle	r0, [r0], -r4
    1e18:	04bc0300 	ldrteq	r0, [ip], #768	; 0x300
    1e1c:	00d70000 	sbcseq	r0, r7, r0
    1e20:	00075f03 	andeq	r5, r7, r3, lsl #30
    1e24:	0300d800 	movweq	sp, #2048	; 0x800
    1e28:	000009f1 	strdeq	r0, [r0], -r1
    1e2c:	410300d9 	ldrdmi	r0, [r3, -r9]
    1e30:	da000006 	ble	1e50 <_Min_Stack_Size+0x1a50>
    1e34:	d7040000 	strle	r0, [r4, -r0]
    1e38:	04000008 	streq	r0, [r0], #-8
    1e3c:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
    1e40:	06010500 	streq	r0, [r1], -r0, lsl #10
    1e44:	000007d4 	ldrdeq	r0, [r0], -r4
    1e48:	00008804 	andeq	r8, r0, r4, lsl #16
    1e4c:	b11d0500 	tstlt	sp, r0, lsl #10
    1e50:	05000002 	streq	r0, [r0, #-2]
    1e54:	07d20801 	ldrbeq	r0, [r2, r1, lsl #16]
    1e58:	02050000 	andeq	r0, r5, #0
    1e5c:	00082205 	andeq	r2, r8, r5, lsl #4
    1e60:	07020500 	streq	r0, [r2, -r0, lsl #10]
    1e64:	000004f7 	strdeq	r0, [r0], -r7
    1e68:	0005a804 	andeq	sl, r5, r4, lsl #16
    1e6c:	d13f0500 	teqle	pc, r0, lsl #10
    1e70:	05000002 	streq	r0, [r0, #-2]
    1e74:	04450504 	strbeq	r0, [r5], #-1284	; 0xfffffafc
    1e78:	b1040000 	mrslt	r0, (UNDEF: 4)
    1e7c:	05000003 	streq	r0, [r0, #-3]
    1e80:	0002e341 	andeq	lr, r2, r1, asr #6
    1e84:	07040500 	streq	r0, [r4, -r0, lsl #10]
    1e88:	000000d4 	ldrdeq	r0, [r0], -r4
    1e8c:	40050805 	andmi	r0, r5, r5, lsl #16
    1e90:	05000004 	streq	r0, [r0, #-4]
    1e94:	00cf0708 	sbceq	r0, pc, r8, lsl #14
    1e98:	04060000 	streq	r0, [r6], #-0
    1e9c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1ea0:	07040500 	streq	r0, [r4, -r0, lsl #10]
    1ea4:	000000d9 	ldrdeq	r0, [r0], -r9
    1ea8:	00008a04 	andeq	r8, r0, r4, lsl #20
    1eac:	a6140600 	ldrge	r0, [r4], -r0, lsl #12
    1eb0:	04000002 	streq	r0, [r0], #-2
    1eb4:	000005aa 	andeq	r0, r0, sl, lsr #11
    1eb8:	02c61f06 	sbceq	r1, r6, #6, 30
    1ebc:	b3040000 	movwlt	r0, #16384	; 0x4000
    1ec0:	06000003 	streq	r0, [r0], -r3
    1ec4:	0002d820 	andeq	sp, r2, r0, lsr #16
    1ec8:	0e040700 	cdpeq	7, 0, cr0, cr4, cr0, {0}
    1ecc:	e301c302 	movw	ip, #4866	; 0x1302
    1ed0:	08000003 	stmdaeq	r0, {r0, r1}
    1ed4:	000012f8 	strdeq	r1, [r0], -r8
    1ed8:	fa01c502 	blx	732e8 <_Min_Stack_Size+0x72ee8>
    1edc:	00000003 	andeq	r0, r0, r3
    1ee0:	00076908 	andeq	r6, r7, r8, lsl #18
    1ee4:	01c60200 	biceq	r0, r6, r0, lsl #4
    1ee8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1eec:	12a90820 	adcne	r0, r9, #32, 16	; 0x200000
    1ef0:	c7020000 	strgt	r0, [r2, -r0]
    1ef4:	00040f01 	andeq	r0, r4, r1, lsl #30
    1ef8:	95088000 	strls	r8, [r8, #-0]
    1efc:	02000013 	andeq	r0, r0, #19
    1f00:	03ff01c8 	mvnseq	r0, #200, 2	; 0x32
    1f04:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    1f08:	00001095 	muleq	r0, r5, r0
    1f0c:	1401c902 	strne	ip, [r1], #-2306	; 0xfffff6fe
    1f10:	00000004 	andeq	r0, r0, r4
    1f14:	077d0901 	ldrbeq	r0, [sp, -r1, lsl #18]!
    1f18:	ca020000 	bgt	81f20 <_Min_Stack_Size+0x81b20>
    1f1c:	0003ff01 	andeq	pc, r3, r1, lsl #30
    1f20:	09012000 	stmdbeq	r1, {sp}
    1f24:	0000106d 	andeq	r1, r0, sp, rrx
    1f28:	1901cb02 	stmdbne	r1, {r1, r8, r9, fp, lr, pc}
    1f2c:	80000004 	andhi	r0, r0, r4
    1f30:	08cd0901 	stmiaeq	sp, {r0, r8, fp}^
    1f34:	cc020000 	stcgt	0, cr0, [r2], {-0}
    1f38:	0003ff01 	andeq	pc, r3, r1, lsl #30
    1f3c:	0901a000 	stmdbeq	r1, {sp, pc}
    1f40:	00001290 	muleq	r0, r0, r2
    1f44:	1e01cd02 	cdpne	13, 0, cr12, cr1, cr2, {0}
    1f48:	00000004 	andeq	r0, r0, r4
    1f4c:	07980902 	ldreq	r0, [r8, r2, lsl #18]
    1f50:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    1f54:	00042301 	andeq	r2, r4, r1, lsl #6
    1f58:	0a022000 	beq	89f60 <_Min_Stack_Size+0x89b60>
    1f5c:	02005049 	andeq	r5, r0, #73	; 0x49
    1f60:	044301cf 	strbeq	r0, [r3], #-463	; 0xfffffe31
    1f64:	03000000 	movweq	r0, #0
    1f68:	0007a209 	andeq	sl, r7, r9, lsl #4
    1f6c:	01d00200 	bicseq	r0, r0, r0, lsl #4
    1f70:	00000448 	andeq	r0, r0, r8, asr #8
    1f74:	9e0903f0 	mcrls	3, 0, r0, cr9, cr0, {7}
    1f78:	02000013 	andeq	r0, r0, #19
    1f7c:	045901d1 	ldrbeq	r0, [r9], #-465	; 0xfffffe2f
    1f80:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1f84:	031c0b00 	tsteq	ip, #0, 22
    1f88:	03f30000 	mvnseq	r0, #0
    1f8c:	f30c0000 	vhadd.u8	d0, d12, d0
    1f90:	07000003 	streq	r0, [r0, -r3]
    1f94:	07040500 	streq	r0, [r4, -r0, lsl #10]
    1f98:	0000064c 	andeq	r0, r0, ip, asr #12
    1f9c:	0003e30d 	andeq	lr, r3, sp, lsl #6
    1fa0:	031c0b00 	tsteq	ip, #0, 22
    1fa4:	040f0000 	streq	r0, [pc], #-0	; 1fac <_Min_Stack_Size+0x1bac>
    1fa8:	f30c0000 	vhadd.u8	d0, d12, d0
    1fac:	17000003 	strne	r0, [r0, -r3]
    1fb0:	03e30d00 	mvneq	r0, #0, 26
    1fb4:	e30d0000 	movw	r0, #53248	; 0xd000
    1fb8:	0d000003 	stceq	0, cr0, [r0, #-12]
    1fbc:	000003e3 	andeq	r0, r0, r3, ror #7
    1fc0:	0003e30d 	andeq	lr, r3, sp, lsl #6
    1fc4:	031c0b00 	tsteq	ip, #0, 22
    1fc8:	04330000 	ldrteq	r0, [r3], #-0
    1fcc:	f30c0000 	vhadd.u8	d0, d12, d0
    1fd0:	37000003 	strcc	r0, [r0, -r3]
    1fd4:	03060b00 	movweq	r0, #27392	; 0x6b00
    1fd8:	04430000 	strbeq	r0, [r3], #-0
    1fdc:	f30c0000 	vhadd.u8	d0, d12, d0
    1fe0:	ef000003 	svc	0x00000003
    1fe4:	04330d00 	ldrteq	r0, [r3], #-3328	; 0xfffff300
    1fe8:	1c0b0000 	stcne	0, cr0, [fp], {-0}
    1fec:	59000003 	stmdbpl	r0, {r0, r1}
    1ff0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    1ff4:	000003f3 	strdeq	r0, [r0], -r3
    1ff8:	0d000283 	sfmeq	f0, 4, [r0, #-524]	; 0xfffffdf4
    1ffc:	0000031c 	andeq	r0, r0, ip, lsl r3
    2000:	0012fd0f 	andseq	pc, r2, pc, lsl #26
    2004:	01d20200 	bicseq	r0, r2, r0, lsl #4
    2008:	00000327 	andeq	r0, r0, r7, lsr #6
    200c:	e5028c10 	str	r8, [r2, #-3088]	; 0xfffff3f0
    2010:	00058501 	andeq	r8, r5, r1, lsl #10
    2014:	0c7c0800 	ldcleq	8, cr0, [ip], #-0
    2018:	e7020000 	str	r0, [r2, -r0]
    201c:	00058501 	andeq	r8, r5, r1, lsl #10
    2020:	8b080000 	blhi	202028 <_Min_Stack_Size+0x201c28>
    2024:	0200000c 	andeq	r0, r0, #12
    2028:	045901e8 	ldrbeq	r0, [r9], #-488	; 0xfffffe18
    202c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2030:	00000ce8 	andeq	r0, r0, r8, ror #25
    2034:	5901e902 	stmdbpl	r1, {r1, r8, fp, sp, lr, pc}
    2038:	08000004 	stmdaeq	r0, {r2}
    203c:	000cae08 	andeq	sl, ip, r8, lsl #28
    2040:	01ea0200 	mvneq	r0, r0, lsl #4
    2044:	00000459 	andeq	r0, r0, r9, asr r4
    2048:	4353110c 	cmpmi	r3, #12, 2
    204c:	eb020052 	bl	8219c <_Min_Stack_Size+0x81d9c>
    2050:	00045901 	andeq	r5, r4, r1, lsl #18
    2054:	43111000 	tstmi	r1, #0
    2058:	02005243 	andeq	r5, r0, #805306372	; 0x30000004
    205c:	045901ec 	ldrbeq	r0, [r9], #-492	; 0xfffffe14
    2060:	11140000 	tstne	r4, r0
    2064:	00504853 	subseq	r4, r0, r3, asr r8
    2068:	9a01ed02 	bls	7d478 <_Min_Stack_Size+0x7d078>
    206c:	18000005 	stmdane	r0, {r0, r2}
    2070:	000cb408 	andeq	fp, ip, r8, lsl #8
    2074:	01ee0200 	mvneq	r0, r0, lsl #4
    2078:	00000459 	andeq	r0, r0, r9, asr r4
    207c:	0c950824 	ldceq	8, cr0, [r5], {36}	; 0x24
    2080:	ef020000 	svc	0x00020000
    2084:	00045901 	andeq	r5, r4, r1, lsl #18
    2088:	07082800 	streq	r2, [r8, -r0, lsl #16]
    208c:	0200000d 	andeq	r0, r0, #13
    2090:	045901f0 	ldrbeq	r0, [r9], #-496	; 0xfffffe10
    2094:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    2098:	00000cf2 	strdeq	r0, [r0], -r2
    209c:	5901f102 	stmdbpl	r1, {r1, r8, ip, sp, lr, pc}
    20a0:	30000004 	andcc	r0, r0, r4
    20a4:	000cd008 	andeq	sp, ip, r8
    20a8:	01f20200 	mvnseq	r0, r0, lsl #4
    20ac:	00000459 	andeq	r0, r0, r9, asr r4
    20b0:	0c900834 	ldceq	8, cr0, [r0], {52}	; 0x34
    20b4:	f3020000 	vhadd.u8	d0, d2, d0
    20b8:	00045901 	andeq	r5, r4, r1, lsl #18
    20bc:	11083800 	tstne	r8, r0, lsl #16
    20c0:	0200000d 	andeq	r0, r0, #13
    20c4:	045901f4 	ldrbeq	r0, [r9], #-500	; 0xfffffe0c
    20c8:	113c0000 	teqne	ip, r0
    20cc:	00524650 	subseq	r4, r2, r0, asr r6
    20d0:	af01f502 	svcge	0x0001f502
    20d4:	40000005 	andmi	r0, r0, r5
    20d8:	52464411 	subpl	r4, r6, #285212672	; 0x11000000
    20dc:	01f60200 	mvnseq	r0, r0, lsl #4
    20e0:	00000585 	andeq	r0, r0, r5, lsl #11
    20e4:	44411148 	strbmi	r1, [r1], #-328	; 0xfffffeb8
    20e8:	f7020052 			; <UNDEFINED> instruction: 0xf7020052
    20ec:	00058501 	andeq	r8, r5, r1, lsl #10
    20f0:	0c084c00 	stceq	12, cr4, [r8], {-0}
    20f4:	0200000d 	andeq	r0, r0, #13
    20f8:	05c901f8 	strbeq	r0, [r9, #504]	; 0x1f8
    20fc:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    2100:	00000ced 	andeq	r0, r0, sp, ror #25
    2104:	e301f902 	movw	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    2108:	60000005 	andvs	r0, r0, r5
    210c:	00076908 	andeq	r6, r7, r8, lsl #18
    2110:	01fa0200 	mvnseq	r0, r0, lsl #4
    2114:	000005d3 	ldrdeq	r0, [r0], -r3
    2118:	0d6d0874 	stcleq	8, cr0, [sp, #-464]!	; 0xfffffe30
    211c:	fb020000 	blx	82126 <_Min_Stack_Size+0x81d26>
    2120:	00045901 	andeq	r5, r4, r1, lsl #18
    2124:	12008800 	andne	r8, r0, #0, 16
    2128:	00000459 	andeq	r0, r0, r9, asr r4
    212c:	0003060b 	andeq	r0, r3, fp, lsl #12
    2130:	00059a00 	andeq	r9, r5, r0, lsl #20
    2134:	03f30c00 	mvnseq	r0, #0, 24
    2138:	000b0000 	andeq	r0, fp, r0
    213c:	00058a0d 	andeq	r8, r5, sp, lsl #20
    2140:	031c0b00 	tsteq	ip, #0, 22
    2144:	05af0000 	streq	r0, [pc, #0]!	; 214c <_Min_Stack_Size+0x1d4c>
    2148:	f30c0000 	vhadd.u8	d0, d12, d0
    214c:	01000003 	tsteq	r0, r3
    2150:	05b41200 	ldreq	r1, [r4, #512]!	; 0x200
    2154:	9f0d0000 	svcls	0x000d0000
    2158:	0b000005 	bleq	2174 <_Min_Stack_Size+0x1d74>
    215c:	0000031c 	andeq	r0, r0, ip, lsl r3
    2160:	000005c9 	andeq	r0, r0, r9, asr #11
    2164:	0003f30c 	andeq	pc, r3, ip, lsl #6
    2168:	12000300 	andne	r0, r0, #0, 6
    216c:	000005ce 	andeq	r0, r0, lr, asr #11
    2170:	0005b90d 	andeq	fp, r5, sp, lsl #18
    2174:	031c0b00 	tsteq	ip, #0, 22
    2178:	05e30000 	strbeq	r0, [r3, #0]!
    217c:	f30c0000 	vhadd.u8	d0, d12, d0
    2180:	04000003 	streq	r0, [r0], #-3
    2184:	05e81200 	strbeq	r1, [r8, #512]!	; 0x200
    2188:	d30d0000 	movwle	r0, #53248	; 0xd000
    218c:	0f000005 	svceq	0x00000005
    2190:	00000c82 	andeq	r0, r0, r2, lsl #25
    2194:	6a01fc02 	bvs	811a4 <_Min_Stack_Size+0x80da4>
    2198:	10000004 	andne	r0, r0, r4
    219c:	02e80210 	rsceq	r0, r8, #16, 4
    21a0:	00000637 	andeq	r0, r0, r7, lsr r6
    21a4:	000fd508 	andeq	sp, pc, r8, lsl #10
    21a8:	02ea0200 	rsceq	r0, sl, #0, 4
    21ac:	00000459 	andeq	r0, r0, r9, asr r4
    21b0:	0e9e0800 	cdpeq	8, 9, cr0, cr14, cr0, {0}
    21b4:	eb020000 	bl	821bc <_Min_Stack_Size+0x81dbc>
    21b8:	00045902 	andeq	r5, r4, r2, lsl #18
    21bc:	56110400 	ldrpl	r0, [r1], -r0, lsl #8
    21c0:	02004c41 	andeq	r4, r0, #16640	; 0x4100
    21c4:	045902ec 	ldrbeq	r0, [r9], #-748	; 0xfffffd14
    21c8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    21cc:	00000e68 	andeq	r0, r0, r8, ror #28
    21d0:	8502ed02 	strhi	lr, [r2, #-3330]	; 0xfffff2fe
    21d4:	0c000005 	stceq	0, cr0, [r0], {5}
    21d8:	0e0e0f00 	cdpeq	15, 0, cr0, cr14, cr0, {0}
    21dc:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    21e0:	0005f902 	andeq	pc, r5, r2, lsl #18
    21e4:	022c1000 	eoreq	r1, ip, #0
    21e8:	06dc04b2 			; <UNDEFINED> instruction: 0x06dc04b2
    21ec:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
    21f0:	02000013 	andeq	r0, r0, #19
    21f4:	058504b4 	streq	r0, [r5, #1204]	; 0x4b4
    21f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    21fc:	00000fd5 	ldrdeq	r0, [r0], -r5
    2200:	5904b502 	stmdbpl	r4, {r1, r8, sl, ip, sp, pc}
    2204:	04000004 	streq	r0, [r0], #-4
    2208:	524e5211 	subpl	r5, lr, #268435457	; 0x10000001
    220c:	04b60200 	ldrteq	r0, [r6], #512	; 0x200
    2210:	00000459 	andeq	r0, r0, r9, asr r4
    2214:	13070808 	movwne	r0, #30728	; 0x7808
    2218:	b7020000 	strlt	r0, [r2, -r0]
    221c:	00045904 	andeq	r5, r4, r4, lsl #18
    2220:	27080c00 	strcs	r0, [r8, -r0, lsl #24]
    2224:	02000013 	andeq	r0, r0, #19
    2228:	045904b8 	ldrbeq	r0, [r9], #-1208	; 0xfffffb48
    222c:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    2230:	000010fa 	strdeq	r1, [r0], -sl
    2234:	5904b902 	stmdbpl	r4, {r1, r8, fp, ip, sp, pc}
    2238:	14000004 	strne	r0, [r0], #-4
    223c:	0010dd08 	andseq	sp, r0, r8, lsl #26
    2240:	04ba0200 	ldrteq	r0, [sl], #512	; 0x200
    2244:	00000459 	andeq	r0, r0, r9, asr r4
    2248:	11020818 	tstne	r2, r8, lsl r8
    224c:	bb020000 	bllt	82254 <_Min_Stack_Size+0x81e54>
    2250:	00045904 	andeq	r5, r4, r4, lsl #18
    2254:	2f081c00 	svccs	0x00081c00
    2258:	02000011 	andeq	r0, r0, #17
    225c:	045904bc 	ldrbeq	r0, [r9], #-1212	; 0xfffffb44
    2260:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    2264:	0000110a 	andeq	r1, r0, sl, lsl #2
    2268:	5904bd02 	stmdbpl	r4, {r1, r8, sl, fp, ip, sp, pc}
    226c:	24000004 	strcs	r0, [r0], #-4
    2270:	00108d08 	andseq	r8, r0, r8, lsl #26
    2274:	04be0200 	ldrteq	r0, [lr], #512	; 0x200
    2278:	00000459 	andeq	r0, r0, r9, asr r4
    227c:	c60f0028 	strgt	r0, [pc], -r8, lsr #32
    2280:	02000013 	andeq	r0, r0, #19
    2284:	064304bf 			; <UNDEFINED> instruction: 0x064304bf
    2288:	01020000 	mrseq	r0, (UNDEF: 2)
    228c:	06fdc507 	ldrbteq	ip, [sp], r7, lsl #10
    2290:	a3030000 	movwge	r0, #12288	; 0x3000
    2294:	00000019 	andeq	r0, r0, r9, lsl r0
    2298:	54455313 	strbpl	r5, [r5], #-787	; 0xfffffced
    229c:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    22a0:	07db0801 	ldrbeq	r0, [fp, r1, lsl #16]
    22a4:	10140000 	andsne	r0, r4, r0
    22a8:	07914208 	ldreq	r4, [r1, r8, lsl #4]
    22ac:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
    22b0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    22b4:	00030644 	andeq	r0, r3, r4, asr #12
    22b8:	75150000 	ldrvc	r0, [r5, #-0]
    22bc:	08000012 	stmdaeq	r0, {r1, r4}
    22c0:	00030646 	andeq	r0, r3, r6, asr #12
    22c4:	ce150100 	mufgts	f0, f5, f0
    22c8:	08000018 	stmdaeq	r0, {r3, r4}
    22cc:	00031c48 	andeq	r1, r3, r8, asr #24
    22d0:	42150400 	andsmi	r0, r5, #0, 8
    22d4:	0800002d 	stmdaeq	r0, {r0, r2, r3, r5}
    22d8:	00030649 	andeq	r0, r3, r9, asr #12
    22dc:	e7150800 	ldr	r0, [r5, -r0, lsl #16]
    22e0:	08000012 	stmdaeq	r0, {r1, r4}
    22e4:	0003064b 	andeq	r0, r3, fp, asr #12
    22e8:	72150900 	andsvc	r0, r5, #0, 18
    22ec:	08000010 	stmdaeq	r0, {r4}
    22f0:	0003064d 	andeq	r0, r3, sp, asr #12
    22f4:	35150a00 	ldrcc	r0, [r5, #-2560]	; 0xfffff600
    22f8:	08000012 	stmdaeq	r0, {r1, r4}
    22fc:	0003064f 	andeq	r0, r3, pc, asr #12
    2300:	29150b00 	ldmdbcs	r5, {r8, r9, fp}
    2304:	08000012 	stmdaeq	r0, {r1, r4}
    2308:	00030651 	andeq	r0, r3, r1, asr r6
    230c:	a3150c00 	tstge	r5, #0, 24
    2310:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2314:	00030653 	andeq	r0, r3, r3, asr r6
    2318:	4e150d00 	cdpmi	13, 1, cr0, cr5, cr0, {0}
    231c:	08000011 	stmdaeq	r0, {r0, r4}
    2320:	00030655 	andeq	r0, r3, r5, asr r6
    2324:	9a150e00 	bls	545b2c <_Min_Stack_Size+0x54572c>
    2328:	08000010 	stmdaeq	r0, {r4}
    232c:	00030657 	andeq	r0, r3, r7, asr r6
    2330:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    2334:	00001137 	andeq	r1, r0, r7, lsr r1
    2338:	07045908 	streq	r5, [r4, -r8, lsl #18]
    233c:	62160000 	andsvs	r0, r6, #0
    2340:	03000012 	movweq	r0, #18
    2344:	160301ab 	strne	r0, [r3], -fp, lsr #3
    2348:	000010a7 	andeq	r1, r0, r7, lsr #1
    234c:	03017503 	movweq	r7, #5379	; 0x1503
    2350:	00094a17 	andeq	r4, r9, r7, lsl sl
    2354:	06a20200 	strteq	r0, [r2], r0, lsl #4
    2358:	0007d403 	andeq	sp, r7, r3, lsl #8
    235c:	066c1800 	strbteq	r1, [ip], -r0, lsl #16
    2360:	a2020000 	andge	r0, r2, #0
    2364:	00029406 	andeq	r9, r2, r6, lsl #8
    2368:	12461800 	subne	r1, r6, #0, 16
    236c:	a2020000 	andge	r0, r2, #0
    2370:	00031c06 	andeq	r1, r3, r6, lsl #24
    2374:	de170000 	cdple	0, 1, cr0, cr7, cr0, {0}
    2378:	0200000f 	andeq	r0, r0, #15
    237c:	0603063c 			; <UNDEFINED> instruction: 0x0603063c
    2380:	18000008 	stmdane	r0, {r3}
    2384:	0000107f 	andeq	r1, r0, pc, ror r0
    2388:	1c063c02 	stcne	12, cr3, [r6], {2}
    238c:	19000003 	stmdbne	r0, {r0, r1}
    2390:	00001186 	andeq	r1, r0, r6, lsl #3
    2394:	1c063e02 	stcne	14, cr3, [r6], {2}
    2398:	19000003 	stmdbne	r0, {r0, r1}
    239c:	0000130c 	andeq	r1, r0, ip, lsl #6
    23a0:	1c063f02 	stcne	15, cr3, [r6], {2}
    23a4:	00000003 	andeq	r0, r0, r3
    23a8:	0013751a 	andseq	r7, r3, sl, lsl r5
    23ac:	064f0200 	strbeq	r0, [pc], -r0, lsl #4
    23b0:	0000031c 	andeq	r0, r0, ip, lsl r3
    23b4:	12951b03 	addsne	r1, r5, #3072	; 0xc00
    23b8:	d1020000 	mrsle	r0, (UNDEF: 2)
    23bc:	00031c06 	andeq	r1, r3, r6, lsl #24
    23c0:	086d0300 	stmdaeq	sp!, {r8, r9}^
    23c4:	7f180000 	svcvc	0x00180000
    23c8:	02000010 	andeq	r0, r0, #16
    23cc:	031c06d1 	tsteq	ip, #219152384	; 0xd100000
    23d0:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
    23d4:	02000012 	andeq	r0, r0, #18
    23d8:	031c06d1 	tsteq	ip, #219152384	; 0xd100000
    23dc:	69180000 	ldmdbvs	r8, {}	; <UNPREDICTABLE>
    23e0:	02000012 	andeq	r0, r0, #18
    23e4:	031c06d1 	tsteq	ip, #219152384	; 0xd100000
    23e8:	0c190000 	ldceq	0, cr0, [r9], {-0}
    23ec:	02000013 	andeq	r0, r0, #19
    23f0:	031c06d3 	tsteq	ip, #221249536	; 0xd300000
    23f4:	1b190000 	blne	6423fc <_Min_Stack_Size+0x641ffc>
    23f8:	02000011 	andeq	r0, r0, #17
    23fc:	031c06d4 	tsteq	ip, #212, 12	; 0xd400000
    2400:	ae190000 	cdpge	0, 1, cr0, cr9, cr0, {0}
    2404:	02000012 	andeq	r0, r0, #18
    2408:	031c06d5 	tsteq	ip, #223346688	; 0xd500000
    240c:	17000000 	strne	r0, [r0, -r0]
    2410:	0000000a 	andeq	r0, r0, sl
    2414:	03065a02 	movweq	r5, #27138	; 0x6a02
    2418:	00000887 	andeq	r0, r0, r7, lsl #17
    241c:	00066c18 	andeq	r6, r6, r8, lsl ip
    2420:	065a0200 	ldrbeq	r0, [sl], -r0, lsl #4
    2424:	00000294 	muleq	r0, r4, r2
    2428:	11941700 	orrsne	r1, r4, r0, lsl #14
    242c:	65020000 	strvs	r0, [r2, #-0]
    2430:	08a10306 	stmiaeq	r1!, {r1, r2, r8, r9}
    2434:	6c180000 	ldcvs	0, cr0, [r8], {-0}
    2438:	02000006 	andeq	r0, r0, #6
    243c:	02940665 	addseq	r0, r4, #105906176	; 0x6500000
    2440:	1b000000 	blne	2448 <_Min_Stack_Size+0x2048>
    2444:	00001362 	andeq	r1, r0, r2, ror #6
    2448:	1c072602 	stcne	6, cr2, [r7], {2}
    244c:	03000003 	movweq	r0, #3
    2450:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    2454:	00128a18 	andseq	r8, r2, r8, lsl sl
    2458:	07260200 	streq	r0, [r6, -r0, lsl #4]!
    245c:	0000031c 	andeq	r0, r0, ip, lsl r3
    2460:	10e91b00 	rscne	r1, r9, r0, lsl #22
    2464:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    2468:	00031c06 	andeq	r1, r3, r6, lsl #24
    246c:	08dd0300 	ldmeq	sp, {r8, r9}^
    2470:	6c180000 	ldcvs	0, cr0, [r8], {-0}
    2474:	02000006 	andeq	r0, r0, #6
    2478:	029406b8 	addseq	r0, r4, #184, 12	; 0xb800000
    247c:	17000000 	strne	r0, [r0, -r0]
    2480:	000012be 			; <UNDEFINED> instruction: 0x000012be
    2484:	0306ec02 	movweq	lr, #27650	; 0x6c02
    2488:	0000093f 	andeq	r0, r0, pc, lsr r9
    248c:	00126c18 	andseq	r6, r2, r8, lsl ip
    2490:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    2494:	0000031c 	andeq	r0, r0, ip, lsl r3
    2498:	00107f18 	andseq	r7, r0, r8, lsl pc
    249c:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    24a0:	0000031c 	andeq	r0, r0, ip, lsl r3
    24a4:	00121818 	andseq	r1, r2, r8, lsl r8
    24a8:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    24ac:	0000093f 	andeq	r0, r0, pc, lsr r9
    24b0:	00126818 	andseq	r6, r2, r8, lsl r8
    24b4:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    24b8:	0000093f 	andeq	r0, r0, pc, lsr r9
    24bc:	00130c19 	andseq	r0, r3, r9, lsl ip
    24c0:	06ee0200 	strbteq	r0, [lr], r0, lsl #4
    24c4:	0000031c 	andeq	r0, r0, ip, lsl r3
    24c8:	00111b19 	andseq	r1, r1, r9, lsl fp
    24cc:	06ef0200 	strbteq	r0, [pc], r0, lsl #4
    24d0:	0000031c 	andeq	r0, r0, ip, lsl r3
    24d4:	0012ae19 	andseq	sl, r2, r9, lsl lr
    24d8:	06f00200 	ldrbteq	r0, [r0], r0, lsl #4
    24dc:	0000031c 	andeq	r0, r0, ip, lsl r3
    24e0:	09441200 	stmdbeq	r4, {r9, ip}^
    24e4:	041c0000 	ldreq	r0, [ip], #-0
    24e8:	0000031c 	andeq	r0, r0, ip, lsl r3
    24ec:	0013b317 	andseq	fp, r3, r7, lsl r3
    24f0:	067d0200 	ldrbteq	r0, [sp], -r0, lsl #4
    24f4:	00096403 	andeq	r6, r9, r3, lsl #8
    24f8:	066c1800 	strbteq	r1, [ip], -r0, lsl #16
    24fc:	7d020000 	stcvc	0, cr0, [r2, #-0]
    2500:	00029406 	andeq	r9, r2, r6, lsl #8
    2504:	5e1b0000 	cdppl	0, 1, cr0, cr11, cr0, {0}
    2508:	02000011 	andeq	r0, r0, #17
    250c:	031c0672 	tsteq	ip, #119537664	; 0x7200000
    2510:	82030000 	andhi	r0, r3, #0
    2514:	18000009 	stmdane	r0, {r0, r3}
    2518:	0000066c 	andeq	r0, r0, ip, ror #12
    251c:	94067202 	strls	r7, [r6], #-514	; 0xfffffdfe
    2520:	00000002 	andeq	r0, r0, r2
    2524:	0010c817 	andseq	ip, r0, r7, lsl r8
    2528:	06880200 	streq	r0, [r8], r0, lsl #4
    252c:	00099c03 	andeq	r9, r9, r3, lsl #24
    2530:	066c1800 	strbteq	r1, [ip], -r0, lsl #16
    2534:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    2538:	00029406 	andeq	r9, r2, r6, lsl #8
    253c:	531b0000 	tstpl	fp, #0
    2540:	02000012 	andeq	r0, r0, #18
    2544:	031c0695 	tsteq	ip, #156237824	; 0x9500000
    2548:	ba030000 	blt	c2550 <_Min_Stack_Size+0xc2150>
    254c:	18000009 	stmdane	r0, {r0, r3}
    2550:	0000066c 	andeq	r0, r0, ip, ror #12
    2554:	94069502 	strls	r9, [r6], #-1282	; 0xfffffafe
    2558:	00000002 	andeq	r0, r0, r2
    255c:	000fda1d 	andeq	sp, pc, sp, lsl sl	; <UNPREDICTABLE>
    2560:	dca10100 	stfles	f0, [r1]
    2564:	24080005 	strcs	r0, [r8], #-5
    2568:	01000000 	mrseq	r0, (UNDEF: 0)
    256c:	000a149c 	muleq	sl, ip, r4
    2570:	107f1e00 	rsbsne	r1, pc, r0, lsl #28
    2574:	a1010000 	mrsge	r0, (UNDEF: 1)
    2578:	0000031c 	andeq	r0, r0, ip, lsl r3
    257c:	00000216 	andeq	r0, r0, r6, lsl r2
    2580:	0007d41f 	andeq	sp, r7, pc, lsl r4
    2584:	0005dc00 	andeq	sp, r5, r0, lsl #24
    2588:	00002408 	andeq	r2, r0, r8, lsl #8
    258c:	20a70100 	adccs	r0, r7, r0, lsl #2
    2590:	000007e1 	andeq	r0, r0, r1, ror #15
    2594:	00000216 	andeq	r0, r0, r6, lsl r2
    2598:	0005dc21 	andeq	sp, r5, r1, lsr #24
    259c:	00002408 	andeq	r2, r0, r8, lsl #8
    25a0:	07ed2200 	strbeq	r2, [sp, r0, lsl #4]!
    25a4:	02370000 	eorseq	r0, r7, #0
    25a8:	f9220000 			; <UNDEFINED> instruction: 0xf9220000
    25ac:	77000007 	strvc	r0, [r0, -r7]
    25b0:	00000002 	andeq	r0, r0, r2
    25b4:	461d0000 	ldrmi	r0, [sp], -r0
    25b8:	01000009 	tsteq	r0, r9
    25bc:	000600b7 	strheq	r0, [r6], -r7
    25c0:	00006c08 	andeq	r6, r0, r8, lsl #24
    25c4:	e39c0100 	orrs	r0, ip, #0, 2
    25c8:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    25cc:	0000066c 	andeq	r0, r0, ip, ror #12
    25d0:	0294b701 	addseq	fp, r4, #262144	; 0x40000
    25d4:	02990000 	addseq	r0, r9, #0
    25d8:	191e0000 	ldmdbne	lr, {}	; <UNPREDICTABLE>
    25dc:	01000012 	tsteq	r0, r2, lsl r0
    25e0:	00031cb7 			; <UNDEFINED> instruction: 0x00031cb7
    25e4:	0002d300 	andeq	sp, r2, r0, lsl #6
    25e8:	12691e00 	rsbne	r1, r9, #0, 28
    25ec:	b7010000 	strlt	r0, [r1, -r0]
    25f0:	0000031c 	andeq	r0, r0, ip, lsl r3
    25f4:	0000030d 	andeq	r0, r0, sp, lsl #6
    25f8:	00127c23 	andseq	r7, r2, r3, lsr #24
    25fc:	1cb90100 	ldfnes	f0, [r9]
    2600:	47000003 	strmi	r0, [r0, -r3]
    2604:	24000003 	strcs	r0, [r0], #-3
    2608:	00000806 	andeq	r0, r0, r6, lsl #16
    260c:	08000600 	stmdaeq	r0, {r9, sl}
    2610:	00000008 	andeq	r0, r0, r8
    2614:	1325bf01 			; <UNDEFINED> instruction: 0x1325bf01
    2618:	0a000008 	beq	2640 <_Min_Stack_Size+0x2240>
    261c:	e0080006 	and	r0, r8, r6
    2620:	01000001 	tsteq	r0, r1
    2624:	000ac0c1 	andeq	ip, sl, r1, asr #1
    2628:	083c2000 	ldmdaeq	ip!, {sp}
    262c:	035b0000 	cmpeq	fp, #0
    2630:	30200000 	eorcc	r0, r0, r0
    2634:	95000008 	strls	r0, [r0, #-8]
    2638:	20000003 	andcs	r0, r0, r3
    263c:	00000824 	andeq	r0, r0, r4, lsr #16
    2640:	000003cf 	andeq	r0, r0, pc, asr #7
    2644:	0001e026 	andeq	lr, r1, r6, lsr #32
    2648:	08482200 	stmdaeq	r8, {r9, sp}^
    264c:	04070000 	streq	r0, [r7], #-0
    2650:	54220000 	strtpl	r0, [r2], #-0
    2654:	3f000008 	svccc	0x00000008
    2658:	27000004 	strcs	r0, [r0, -r4]
    265c:	00000860 	andeq	r0, r0, r0, ror #16
    2660:	ae280000 	cdpge	0, 2, cr0, cr8, cr0, {0}
    2664:	30000007 	andcc	r0, r0, r7
    2668:	00080006 	andeq	r0, r8, r6
    266c:	01000002 	tsteq	r0, r2
    2670:	07c720c1 	strbeq	r2, [r7, r1, asr #1]
    2674:	045d0000 	ldrbeq	r0, [sp], #-0
    2678:	bb200000 	bllt	802680 <_Min_Stack_Size+0x802280>
    267c:	7b000007 	blvc	26a0 <_Min_Stack_Size+0x22a0>
    2680:	00000004 	andeq	r0, r0, r4
    2684:	00061d00 	andeq	r1, r6, r0, lsl #26
    2688:	cd010000 	stcgt	0, cr0, [r1, #-0]
    268c:	0800066c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl}
    2690:	00000018 	andeq	r0, r0, r8, lsl r0
    2694:	0b219c01 	bleq	8696a0 <_Min_Stack_Size+0x8692a0>
    2698:	6c1e0000 	ldcvs	0, cr0, [lr], {-0}
    269c:	01000006 	tsteq	r0, r6
    26a0:	000294cd 	andeq	r9, r2, sp, asr #9
    26a4:	0004b500 	andeq	fp, r4, r0, lsl #10
    26a8:	086d1f00 	stmdaeq	sp!, {r8, r9, sl, fp, ip}^
    26ac:	066c0000 	strbteq	r0, [ip], -r0
    26b0:	00180800 	andseq	r0, r8, r0, lsl #16
    26b4:	d3010000 	movwle	r0, #4096	; 0x1000
    26b8:	00087a20 	andeq	r7, r8, r0, lsr #20
    26bc:	0004b500 	andeq	fp, r4, r0, lsl #10
    26c0:	1d000000 	stcne	0, cr0, [r0, #-0]
    26c4:	00001190 	muleq	r0, r0, r1
    26c8:	0684dd01 	streq	sp, [r4], r1, lsl #26
    26cc:	00180800 	andseq	r0, r8, r0, lsl #16
    26d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    26d4:	00000b5f 	andeq	r0, r0, pc, asr fp
    26d8:	00066c1e 	andeq	r6, r6, lr, lsl ip
    26dc:	94dd0100 	ldrbls	r0, [sp], #256	; 0x100
    26e0:	d6000002 	strle	r0, [r0], -r2
    26e4:	1f000004 	svcne	0x00000004
    26e8:	00000887 	andeq	r0, r0, r7, lsl #17
    26ec:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
    26f0:	00000018 	andeq	r0, r0, r8, lsl r0
    26f4:	9420e301 	strtls	lr, [r0], #-769	; 0xfffffcff
    26f8:	d6000008 	strle	r0, [r0], -r8
    26fc:	00000004 	andeq	r0, r0, r4
    2700:	11751600 	cmnne	r5, r0, lsl #12
    2704:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
    2708:	711d0306 	tstvc	sp, r6, lsl #6
    270c:	01000011 	tsteq	r0, r1, lsl r0
    2710:	00069cea 	andeq	r9, r6, sl, ror #25
    2714:	00002408 	andeq	r2, r0, r8, lsl #8
    2718:	be9c0100 	fmllte	f0, f4, f0
    271c:	1f00000b 	svcne	0x0000000b
    2720:	00000b5f 	andeq	r0, r0, pc, asr fp
    2724:	0800069c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl}
    2728:	00000024 	andeq	r0, r0, r4, lsr #32
    272c:	9c29ed01 	stcls	13, cr14, [r9], #-4
    2730:	9c000007 	stcls	0, cr0, [r0], {7}
    2734:	04080006 	streq	r0, [r8], #-6
    2738:	02000000 	andeq	r0, r0, #0
    273c:	9c290700 	stcls	7, cr0, [r9], #-0
    2740:	ae000007 	cdpge	0, 0, cr0, cr0, cr7, {0}
    2744:	04080006 	streq	r0, [r8], #-6
    2748:	02000000 	andeq	r0, r0, #0
    274c:	a5290705 	strge	r0, [r9, #-1797]!	; 0xfffff8fb
    2750:	b2000007 	andlt	r0, r0, #7
    2754:	0e080006 	cdpeq	0, 0, cr0, cr8, cr6, {0}
    2758:	02000000 	andeq	r0, r0, #0
    275c:	00000709 	andeq	r0, r0, r9, lsl #14
    2760:	000db02a 	andeq	fp, sp, sl, lsr #32
    2764:	1cf70100 	ldfnee	f0, [r7]
    2768:	c0000003 	andgt	r0, r0, r3
    276c:	34080006 	strcc	r0, [r8], #-6
    2770:	01000000 	mrseq	r0, (UNDEF: 0)
    2774:	000c239c 	muleq	ip, ip, r3
    2778:	131d1e00 	tstne	sp, #0, 28
    277c:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2780:	0000031c 	andeq	r0, r0, ip, lsl r3
    2784:	000004f7 	strdeq	r0, [r0], -r7
    2788:	0008a128 	andeq	sl, r8, r8, lsr #2
    278c:	0006c000 	andeq	ip, r6, r0
    2790:	00022008 	andeq	r2, r2, r8
    2794:	20f90100 	rscscs	r0, r9, r0, lsl #2
    2798:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    279c:	000004f7 	strdeq	r0, [r0], -r7
    27a0:	0007ae2b 	andeq	sl, r7, fp, lsr #28
    27a4:	0006cc00 	andeq	ip, r6, r0, lsl #24
    27a8:	00024008 	andeq	r4, r2, r8
    27ac:	072e0200 	streq	r0, [lr, -r0, lsl #4]!
    27b0:	0007c720 	andeq	ip, r7, r0, lsr #14
    27b4:	00053500 	andeq	r3, r5, r0, lsl #10
    27b8:	07bb2000 	ldreq	r2, [fp, r0]!
    27bc:	05490000 	strbeq	r0, [r9, #-0]
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	134d2c00 	movtne	r2, #56320	; 0xdc00
    27c8:	16010000 	strne	r0, [r1], -r0
    27cc:	0006f401 	andeq	pc, r6, r1, lsl #8
    27d0:	00005c08 	andeq	r5, r0, r8, lsl #24
    27d4:	4a9c0100 	bmi	fe702bdc <_estack+0xde6d2bdc>
    27d8:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    27dc:	00001112 	andeq	r1, r0, r2, lsl r1
    27e0:	4a011601 	bmi	47fec <_Min_Stack_Size+0x47bec>
    27e4:	5e00000c 	cdppl	0, 0, cr0, cr0, cr12, {0}
    27e8:	00000005 	andeq	r0, r0, r5
    27ec:	0791041c 			; <UNDEFINED> instruction: 0x0791041c
    27f0:	712e0000 			; <UNDEFINED> instruction: 0x712e0000
    27f4:	01000013 	tsteq	r0, r3, lsl r0
    27f8:	031c0142 	tsteq	ip, #-2147483632	; 0x80000010
    27fc:	07500000 	ldrbeq	r0, [r0, -r0]
    2800:	00100800 	andseq	r0, r0, r0, lsl #16
    2804:	9c010000 	stcls	0, cr0, [r1], {-0}
    2808:	00000c7b 	andeq	r0, r0, fp, ror ip
    280c:	00080629 	andeq	r0, r8, r9, lsr #12
    2810:	00075000 	andeq	r5, r7, r0
    2814:	00000408 	andeq	r0, r0, r8, lsl #8
    2818:	01450100 	mrseq	r0, (UNDEF: 85)
    281c:	10e52c00 	rscne	r2, r5, r0, lsl #24
    2820:	5d010000 	stcpl	0, cr0, [r1, #-0]
    2824:	00076001 	andeq	r6, r7, r1
    2828:	00006008 	andeq	r6, r0, r8
    282c:	3e9c0100 	fmlcce	f0, f4, f0
    2830:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    2834:	0000066c 	andeq	r0, r0, ip, ror #12
    2838:	94015d01 	strls	r5, [r1], #-3329	; 0xfffff2ff
    283c:	7f000002 	svcvc	0x00000002
    2840:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
    2844:	0000107f 	andeq	r1, r0, pc, ror r0
    2848:	1c015d01 	stcne	13, cr5, [r1], {1}
    284c:	a0000003 	andge	r0, r0, r3
    2850:	2f000005 	svccs	0x00000005
    2854:	00001218 	andeq	r1, r0, r8, lsl r2
    2858:	44015d01 	strmi	r5, [r1], #-3329	; 0xfffff2ff
    285c:	01000009 	tsteq	r0, r9
    2860:	12682f52 	rsbne	r2, r8, #328	; 0x148
    2864:	5d010000 	stcpl	0, cr0, [r1, #-0]
    2868:	00094401 	andeq	r4, r9, r1, lsl #8
    286c:	30530100 	subscc	r0, r3, r0, lsl #2
    2870:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    2874:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
    2878:	00000258 	andeq	r0, r0, r8, asr r2
    287c:	eb016201 	bl	5b088 <_Min_Stack_Size+0x5ac88>
    2880:	2000000c 	andcs	r0, r0, ip
    2884:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2888:	0000057f 	andeq	r0, r0, pc, ror r5
    288c:	08dd2b00 	ldmeq	sp, {r8, r9, fp, sp}^
    2890:	07740000 	ldrbeq	r0, [r4, -r0]!
    2894:	02780800 	rsbseq	r0, r8, #0, 16
    2898:	62010000 	andvs	r0, r1, #0
    289c:	090e2001 	stmdbeq	lr, {r0, sp}
    28a0:	05cc0000 	strbeq	r0, [ip]
    28a4:	02200000 	eoreq	r0, r0, #0
    28a8:	df000009 	svcle	0x00000009
    28ac:	20000005 	andcs	r0, r0, r5
    28b0:	000008f6 	strdeq	r0, [r0], -r6
    28b4:	000005f2 	strdeq	r0, [r0], -r2
    28b8:	0008ea20 	andeq	lr, r8, r0, lsr #20
    28bc:	00061300 	andeq	r1, r6, r0, lsl #6
    28c0:	02782600 	rsbseq	r2, r8, #0, 12
    28c4:	1a220000 	bne	8828cc <_Min_Stack_Size+0x8824cc>
    28c8:	31000009 	tstcc	r0, r9
    28cc:	22000006 	andcs	r0, r0, #6
    28d0:	00000926 	andeq	r0, r0, r6, lsr #18
    28d4:	00000686 	andeq	r0, r0, r6, lsl #13
    28d8:	00093227 	andeq	r3, r9, r7, lsr #4
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	0013af2c 	andseq	sl, r3, ip, lsr #30
    28e4:	016c0100 	cmneq	ip, r0, lsl #2
    28e8:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
    28ec:	00000018 	andeq	r0, r0, r8, lsl r0
    28f0:	0d7f9c01 	ldcleq	12, cr9, [pc, #-4]!	; 28f4 <_Min_Stack_Size+0x24f4>
    28f4:	6c2d0000 	stcvs	0, cr0, [sp], #-0
    28f8:	01000006 	tsteq	r0, r6
    28fc:	0294016c 	addseq	r0, r4, #108, 2
    2900:	06cb0000 	strbeq	r0, [fp], r0
    2904:	4a310000 	bmi	c4290c <_Min_Stack_Size+0xc4250c>
    2908:	c0000009 	andgt	r0, r0, r9
    290c:	18080007 	stmdane	r8, {r0, r1, r2}
    2910:	01000000 	mrseq	r0, (UNDEF: 0)
    2914:	57200172 			; <UNDEFINED> instruction: 0x57200172
    2918:	cb000009 	blgt	2944 <_Min_Stack_Size+0x2544>
    291c:	00000006 	andeq	r0, r0, r6
    2920:	115a2e00 	cmpne	sl, r0, lsl #28
    2924:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    2928:	00031c01 	andeq	r1, r3, r1, lsl #24
    292c:	0007d800 	andeq	sp, r7, r0, lsl #16
    2930:	00001c08 	andeq	r1, r0, r8, lsl #24
    2934:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    2938:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    293c:	0000066c 	andeq	r0, r0, ip, ror #12
    2940:	94017e01 	strls	r7, [r1], #-3585	; 0xfffff1ff
    2944:	ec000002 	stc	0, cr0, [r0], {2}
    2948:	31000006 	tstcc	r0, r6
    294c:	00000964 	andeq	r0, r0, r4, ror #18
    2950:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
    2954:	00000012 	andeq	r0, r0, r2, lsl r0
    2958:	20018401 	andcs	r8, r1, r1, lsl #8
    295c:	00000975 	andeq	r0, r0, r5, ror r9
    2960:	000006ec 	andeq	r0, r0, ip, ror #13
    2964:	c42c0000 	strtgt	r0, [ip], #-0
    2968:	01000010 	tsteq	r0, r0, lsl r0
    296c:	07f4018e 	ldrbeq	r0, [r4, lr, lsl #3]!
    2970:	00180800 	andseq	r0, r8, r0, lsl #16
    2974:	9c010000 	stcls	0, cr0, [r1], {-0}
    2978:	00000e05 	andeq	r0, r0, r5, lsl #28
    297c:	00066c2d 	andeq	r6, r6, sp, lsr #24
    2980:	018e0100 	orreq	r0, lr, r0, lsl #2
    2984:	00000294 	muleq	r0, r4, r2
    2988:	0000070d 	andeq	r0, r0, sp, lsl #14
    298c:	00098231 	andeq	r8, r9, r1, lsr r2
    2990:	0007f400 	andeq	pc, r7, r0, lsl #8
    2994:	00001808 	andeq	r1, r0, r8, lsl #16
    2998:	01940100 	orrseq	r0, r4, r0, lsl #2
    299c:	00098f20 	andeq	r8, r9, r0, lsr #30
    29a0:	00070d00 	andeq	r0, r7, r0, lsl #26
    29a4:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    29a8:	0000124f 	andeq	r1, r0, pc, asr #4
    29ac:	1c019f01 	stcne	15, cr9, [r1], {1}
    29b0:	0c000003 	stceq	0, cr0, [r0], {3}
    29b4:	1c080008 	stcne	0, cr0, [r8], {8}
    29b8:	01000000 	mrseq	r0, (UNDEF: 0)
    29bc:	000e4a9c 	muleq	lr, ip, sl
    29c0:	066c2d00 	strbteq	r2, [ip], -r0, lsl #26
    29c4:	9f010000 	svcls	0x00010000
    29c8:	00029401 	andeq	r9, r2, r1, lsl #8
    29cc:	00072e00 	andeq	r2, r7, r0, lsl #28
    29d0:	099c3100 	ldmibeq	ip, {r8, ip, sp}
    29d4:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    29d8:	00120800 	andseq	r0, r2, r0, lsl #16
    29dc:	a5010000 	strge	r0, [r1, #-0]
    29e0:	09ad2001 	stmibeq	sp!, {r0, sp}
    29e4:	072e0000 	streq	r0, [lr, -r0]!
    29e8:	00000000 	andeq	r0, r0, r0
    29ec:	00132c2c 	andseq	r2, r3, ip, lsr #24
    29f0:	01b00100 	lslseq	r0, r0, #2
    29f4:	08000828 	stmdaeq	r0, {r3, r5, fp}
    29f8:	00000018 	andeq	r0, r0, r8, lsl r0
    29fc:	0e6f9c01 	cdpeq	12, 6, cr9, cr15, cr1, {0}
    2a00:	592f0000 	stmdbpl	pc!, {}	; <UNPREDICTABLE>
    2a04:	0100000b 	tsteq	r0, fp
    2a08:	031c01b0 	tsteq	ip, #176, 2	; 0x2c
    2a0c:	50010000 	andpl	r0, r1, r0
    2a10:	12d23200 	sbcsne	r3, r2, #0, 4
    2a14:	cb010000 	blgt	42a1c <_Min_Stack_Size+0x4261c>
    2a18:	00084001 	andeq	r4, r8, r1
    2a1c:	00000208 	andeq	r0, r0, r8, lsl #4
    2a20:	2c9c0100 	ldfcss	f0, [ip], {0}
    2a24:	000010ad 	andeq	r1, r0, sp, lsr #1
    2a28:	4401c201 	strmi	ip, [r1], #-513	; 0xfffffdff
    2a2c:	08080008 	stmdaeq	r8, {r3}
    2a30:	01000000 	mrseq	r0, (UNDEF: 0)
    2a34:	000ea19c 	muleq	lr, ip, r1
    2a38:	084a3300 	stmdaeq	sl, {r8, r9, ip, sp}^
    2a3c:	0e6f0800 	cdpeq	8, 6, cr0, cr15, cr0, {0}
    2a40:	34000000 	strcc	r0, [r0], #-0
    2a44:	000007f3 	strdeq	r0, [r0], -r3
    2a48:	ad074402 	cfstrsge	mvf4, [r7, #-8]
    2a4c:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    2a50:	00000311 	andeq	r0, r0, r1, lsl r3
    2a54:	00072200 	andeq	r2, r7, r0, lsl #4
    2a58:	74000400 	strvc	r0, [r0], #-1024	; 0xfffffc00
    2a5c:	04000009 	streq	r0, [r0], #-9
    2a60:	00029801 	andeq	r9, r2, r1, lsl #16
    2a64:	14bd0100 	ldrtne	r0, [sp], #256	; 0x100
    2a68:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    2a6c:	03380000 	teqeq	r8, #0
    2a70:	00000000 	andeq	r0, r0, r0
    2a74:	0fa60000 	svceq	0x00a60000
    2a78:	01020000 	mrseq	r0, (UNDEF: 2)
    2a7c:	0007d406 	andeq	sp, r7, r6, lsl #8
    2a80:	00880300 	addeq	r0, r8, r0, lsl #6
    2a84:	1d020000 	stcne	0, cr0, [r2, #-0]
    2a88:	00000037 	andeq	r0, r0, r7, lsr r0
    2a8c:	d2080102 	andle	r0, r8, #-2147483648	; 0x80000000
    2a90:	02000007 	andeq	r0, r0, #7
    2a94:	08220502 	stmdaeq	r2!, {r1, r8, sl}
    2a98:	5b030000 	blpl	c2aa0 <_Min_Stack_Size+0xc26a0>
    2a9c:	02000009 	andeq	r0, r0, #9
    2aa0:	0000502b 	andeq	r5, r0, fp, lsr #32
    2aa4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2aa8:	000004f7 	strdeq	r0, [r0], -r7
    2aac:	0005a803 	andeq	sl, r5, r3, lsl #16
    2ab0:	623f0200 	eorsvs	r0, pc, #0, 4
    2ab4:	02000000 	andeq	r0, r0, #0
    2ab8:	04450504 	strbeq	r0, [r5], #-1284	; 0xfffffafc
    2abc:	b1030000 	mrslt	r0, (UNDEF: 3)
    2ac0:	02000003 	andeq	r0, r0, #3
    2ac4:	00007441 	andeq	r7, r0, r1, asr #8
    2ac8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2acc:	000000d4 	ldrdeq	r0, [r0], -r4
    2ad0:	40050802 	andmi	r0, r5, r2, lsl #16
    2ad4:	02000004 	andeq	r0, r0, #4
    2ad8:	00cf0708 	sbceq	r0, pc, r8, lsl #14
    2adc:	04040000 	streq	r0, [r4], #-0
    2ae0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2ae4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2ae8:	000000d9 	ldrdeq	r0, [r0], -r9
    2aec:	00008a03 	andeq	r8, r0, r3, lsl #20
    2af0:	2c140300 	ldccs	3, cr0, [r4], {-0}
    2af4:	03000000 	movweq	r0, #0
    2af8:	0000095d 	andeq	r0, r0, sp, asr r9
    2afc:	00451a03 	subeq	r1, r5, r3, lsl #20
    2b00:	aa030000 	bge	c2b08 <_Min_Stack_Size+0xc2708>
    2b04:	03000005 	movweq	r0, #5
    2b08:	0000571f 	andeq	r5, r0, pc, lsl r7
    2b0c:	03b30300 			; <UNDEFINED> instruction: 0x03b30300
    2b10:	20030000 	andcs	r0, r3, r0
    2b14:	00000069 	andeq	r0, r0, r9, rrx
    2b18:	4c070402 	cfstrsmi	mvf0, [r7], {2}
    2b1c:	05000006 	streq	r0, [r0, #-6]
    2b20:	000000b8 	strheq	r0, [r0], -r8
    2b24:	0000b806 	andeq	fp, r0, r6, lsl #16
    2b28:	0000df00 	andeq	sp, r0, r0, lsl #30
    2b2c:	00c30700 	sbceq	r0, r3, r0, lsl #14
    2b30:	00010000 	andeq	r0, r1, r0
    2b34:	0000b806 	andeq	fp, r0, r6, lsl #16
    2b38:	0000ef00 	andeq	lr, r0, r0, lsl #30
    2b3c:	00c30700 	sbceq	r0, r3, r0, lsl #14
    2b40:	00030000 	andeq	r0, r3, r0
    2b44:	f2041808 	vadd.i8	d1, d4, d8
    2b48:	00014601 	andeq	r4, r1, r1, lsl #12
    2b4c:	4d490900 	stclmi	9, cr0, [r9, #-0]
    2b50:	f4040052 	vst4.16	{d0-d3}, [r4 :64], r2
    2b54:	0000ca01 	andeq	ip, r0, r1, lsl #20
    2b58:	45090000 	strmi	r0, [r9, #-0]
    2b5c:	0400524d 	streq	r5, [r0], #-589	; 0xfffffdb3
    2b60:	00ca01f5 	strdeq	r0, [sl], #21
    2b64:	0a040000 	beq	102b6c <_Min_Stack_Size+0x10276c>
    2b68:	0000148b 	andeq	r1, r0, fp, lsl #9
    2b6c:	ca01f604 	bgt	80384 <_Min_Stack_Size+0x7ff84>
    2b70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2b74:	00146d0a 	andseq	r6, r4, sl, lsl #26
    2b78:	01f70400 	mvnseq	r0, r0, lsl #8
    2b7c:	000000ca 	andeq	r0, r0, sl, asr #1
    2b80:	152f0a0c 	strne	r0, [pc, #-2572]!	; 217c <_Min_Stack_Size+0x1d7c>
    2b84:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
    2b88:	0000ca01 	andeq	ip, r0, r1, lsl #20
    2b8c:	50091000 	andpl	r1, r9, r0
    2b90:	f9040052 			; <UNDEFINED> instruction: 0xf9040052
    2b94:	0000ca01 	andeq	ip, r0, r1, lsl #20
    2b98:	0b001400 	bleq	7ba0 <_Min_Stack_Size+0x77a0>
    2b9c:	0000141e 	andeq	r1, r0, lr, lsl r4
    2ba0:	ef01fa04 	svc	0x0001fa04
    2ba4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ba8:	02510428 	subseq	r0, r1, #40, 8	; 0x28000000
    2bac:	000001d1 	ldrdeq	r0, [r0], -r1
    2bb0:	0000bf0a 	andeq	fp, r0, sl, lsl #30
    2bb4:	02530400 	subseq	r0, r3, #0, 8
    2bb8:	000000ca 	andeq	r0, r0, sl, asr #1
    2bbc:	00920a00 	addseq	r0, r2, r0, lsl #20
    2bc0:	54040000 	strpl	r0, [r4], #-0
    2bc4:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2bc8:	a90a0400 	stmdbge	sl, {sl}
    2bcc:	04000003 	streq	r0, [r0], #-3
    2bd0:	00ca0255 	sbceq	r0, sl, r5, asr r2
    2bd4:	0a080000 	beq	202bdc <_Min_Stack_Size+0x2027dc>
    2bd8:	00000000 	andeq	r0, r0, r0
    2bdc:	ca025604 	bgt	983f4 <_Min_Stack_Size+0x97ff4>
    2be0:	0c000000 	stceq	0, cr0, [r0], {-0}
    2be4:	52444909 	subpl	r4, r4, #147456	; 0x24000
    2be8:	02570400 	subseq	r0, r7, #0, 8
    2bec:	000000ca 	andeq	r0, r0, sl, asr #1
    2bf0:	444f0910 	strbmi	r0, [pc], #-2320	; 2bf8 <_Min_Stack_Size+0x27f8>
    2bf4:	58040052 	stmdapl	r4, {r1, r4, r6}
    2bf8:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2bfc:	9b0a1400 	blls	287c04 <_Min_Stack_Size+0x287804>
    2c00:	04000001 	streq	r0, [r0], #-1
    2c04:	00ca0259 	sbceq	r0, sl, r9, asr r2
    2c08:	0a180000 	beq	602c10 <_Min_Stack_Size+0x602810>
    2c0c:	00000019 	andeq	r0, r0, r9, lsl r0
    2c10:	ca025a04 	bgt	99428 <_Min_Stack_Size+0x99028>
    2c14:	1c000000 	stcne	0, cr0, [r0], {-0}
    2c18:	52464109 	subpl	r4, r6, #1073741826	; 0x40000002
    2c1c:	025b0400 	subseq	r0, fp, #0, 8
    2c20:	000001d1 	ldrdeq	r0, [r0], -r1
    2c24:	cf050020 	svcgt	0x00050020
    2c28:	0b000000 	bleq	2c30 <_Min_Stack_Size+0x2830>
    2c2c:	00000269 	andeq	r0, r0, r9, ror #4
    2c30:	52025c04 	andpl	r5, r2, #4, 24	; 0x400
    2c34:	08000001 	stmdaeq	r0, {r0}
    2c38:	02620424 	rsbeq	r0, r2, #36, 8	; 0x24000000
    2c3c:	0000022d 	andeq	r0, r0, sp, lsr #4
    2c40:	0013eb0a 	andseq	lr, r3, sl, lsl #22
    2c44:	02640400 	rsbeq	r0, r4, #0, 8
    2c48:	000000ca 	andeq	r0, r0, sl, asr #1
    2c4c:	4d500900 	ldclmi	9, cr0, [r0, #-0]
    2c50:	65040043 	strvs	r0, [r4, #-67]	; 0xffffffbd
    2c54:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2c58:	f20a0400 	vshl.s8	d0, d0, d10
    2c5c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2c60:	022d0266 	eoreq	r0, sp, #1610612742	; 0x60000006
    2c64:	0a080000 	beq	202c6c <_Min_Stack_Size+0x20286c>
    2c68:	00001496 	muleq	r0, r6, r4
    2c6c:	cf026704 	svcgt	0x00026704
    2c70:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2c74:	00143c0a 	andseq	r3, r4, sl, lsl #24
    2c78:	02680400 	rsbeq	r0, r8, #0, 8
    2c7c:	000000ca 	andeq	r0, r0, sl, asr #1
    2c80:	df050020 	svcle	0x00050020
    2c84:	0b000000 	bleq	2c8c <_Min_Stack_Size+0x288c>
    2c88:	0000147c 	andeq	r1, r0, ip, ror r4
    2c8c:	e2026904 	and	r6, r2, #4, 18	; 0x10000
    2c90:	08000001 	stmdaeq	r0, {r0}
    2c94:	02c70490 	sbceq	r0, r7, #144, 8	; 0x90000000
    2c98:	000003e7 	andeq	r0, r0, r7, ror #7
    2c9c:	00524309 	subseq	r4, r2, r9, lsl #6
    2ca0:	ca02c904 	bgt	b50b8 <_Min_Stack_Size+0xb4cb8>
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	0002450a 	andeq	r4, r2, sl, lsl #10
    2cac:	02ca0400 	sbceq	r0, sl, #0, 8
    2cb0:	000000ca 	andeq	r0, r0, sl, asr #1
    2cb4:	056b0a04 	strbeq	r0, [fp, #-2564]!	; 0xfffff5fc
    2cb8:	cb040000 	blgt	102cc0 <_Min_Stack_Size+0x1028c0>
    2cbc:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2cc0:	43090800 	movwmi	r0, #38912	; 0x9800
    2cc4:	04005249 	streq	r5, [r0], #-585	; 0xfffffdb7
    2cc8:	00ca02cc 	sbceq	r0, sl, ip, asr #5
    2ccc:	0a0c0000 	beq	302cd4 <_Min_Stack_Size+0x3028d4>
    2cd0:	000001a0 	andeq	r0, r0, r0, lsr #3
    2cd4:	ca02cd04 	bgt	b60ec <_Min_Stack_Size+0xb5cec>
    2cd8:	10000000 	andne	r0, r0, r0
    2cdc:	0009660a 	andeq	r6, r9, sl, lsl #12
    2ce0:	02ce0400 	sbceq	r0, lr, #0, 8
    2ce4:	000000ca 	andeq	r0, r0, sl, asr #1
    2ce8:	053e0a14 	ldreq	r0, [lr, #-2580]!	; 0xfffff5ec
    2cec:	cf040000 	svcgt	0x00040000
    2cf0:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2cf4:	690a1800 	stmdbvs	sl, {fp, ip}
    2cf8:	04000007 	streq	r0, [r0], #-7
    2cfc:	00b802d0 	ldrsbteq	r0, [r8], r0
    2d00:	0a1c0000 	beq	702d08 <_Min_Stack_Size+0x702908>
    2d04:	0000072e 	andeq	r0, r0, lr, lsr #14
    2d08:	ca02d104 	bgt	b7120 <_Min_Stack_Size+0xb6d20>
    2d0c:	20000000 	andcs	r0, r0, r0
    2d10:	0001c80a 	andeq	ip, r1, sl, lsl #16
    2d14:	02d20400 	sbcseq	r0, r2, #0, 8
    2d18:	000000ca 	andeq	r0, r0, sl, asr #1
    2d1c:	07730a24 	ldrbeq	r0, [r3, -r4, lsr #20]!
    2d20:	d3040000 	movwle	r0, #16384	; 0x4000
    2d24:	0000cf02 	andeq	ip, r0, r2, lsl #30
    2d28:	b70a2800 	strlt	r2, [sl, -r0, lsl #16]
    2d2c:	0400000a 	streq	r0, [r0], #-10
    2d30:	00ca02d4 	ldrdeq	r0, [sl], #36	; 0x24
    2d34:	0a300000 	beq	c02d3c <_Min_Stack_Size+0xc0293c>
    2d38:	000009d9 	ldrdeq	r0, [r0], -r9
    2d3c:	ca02d504 	bgt	b8154 <_Min_Stack_Size+0xb7d54>
    2d40:	34000000 	strcc	r0, [r0], #-0
    2d44:	0008ba0a 	andeq	fp, r8, sl, lsl #20
    2d48:	02d60400 	sbcseq	r0, r6, #0, 8
    2d4c:	000000ca 	andeq	r0, r0, sl, asr #1
    2d50:	077d0a38 			; <UNDEFINED> instruction: 0x077d0a38
    2d54:	d7040000 	strle	r0, [r4, -r0]
    2d58:	0000b802 	andeq	fp, r0, r2, lsl #16
    2d5c:	d10a3c00 	tstle	sl, r0, lsl #24
    2d60:	04000009 	streq	r0, [r0], #-9
    2d64:	00ca02d8 	ldrdeq	r0, [sl], #40	; 0x28
    2d68:	0a400000 	beq	1002d70 <_Min_Stack_Size+0x1002970>
    2d6c:	00000872 	andeq	r0, r0, r2, ror r8
    2d70:	ca02d904 	bgt	b9188 <_Min_Stack_Size+0xb8d88>
    2d74:	44000000 	strmi	r0, [r0], #-0
    2d78:	0008cd0a 	andeq	ip, r8, sl, lsl #26
    2d7c:	02da0400 	sbcseq	r0, sl, #0, 8
    2d80:	000000cf 	andeq	r0, r0, pc, asr #1
    2d84:	01520a48 	cmpeq	r2, r8, asr #20
    2d88:	db040000 	blle	102d90 <_Min_Stack_Size+0x102990>
    2d8c:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2d90:	110a5000 	mrsne	r5, (UNDEF: 10)
    2d94:	04000007 	streq	r0, [r0], #-7
    2d98:	00ca02dc 	ldrdeq	r0, [sl], #44	; 0x2c
    2d9c:	0a540000 	beq	1502da4 <_Min_Stack_Size+0x15029a4>
    2da0:	00000a34 	andeq	r0, r0, r4, lsr sl
    2da4:	ca02dd04 	bgt	ba1bc <_Min_Stack_Size+0xb9dbc>
    2da8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    2dac:	0007980a 	andeq	r9, r7, sl, lsl #16
    2db0:	02de0400 	sbcseq	r0, lr, #0, 8
    2db4:	000000b8 	strheq	r0, [r0], -r8
    2db8:	051c0a5c 	ldreq	r0, [ip, #-2652]	; 0xfffff5a4
    2dbc:	df040000 	svcle	0x00040000
    2dc0:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2dc4:	9e0a6000 	cdpls	0, 0, cr6, cr10, cr0, {0}
    2dc8:	04000005 	streq	r0, [r0], #-5
    2dcc:	00ca02e0 	sbceq	r0, sl, r0, ror #5
    2dd0:	0a640000 	beq	1902dd8 <_Min_Stack_Size+0x19029d8>
    2dd4:	000007a2 	andeq	r0, r0, r2, lsr #15
    2dd8:	cf02e104 	svcgt	0x0002e104
    2ddc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2de0:	000a670a 	andeq	r6, sl, sl, lsl #14
    2de4:	02e20400 	rsceq	r0, r2, #0, 8
    2de8:	000000ca 	andeq	r0, r0, sl, asr #1
    2dec:	53430970 	movtpl	r0, #14704	; 0x3970
    2df0:	e3040052 	movw	r0, #16466	; 0x4052
    2df4:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2df8:	ac0a7400 	cfstrsge	mvf7, [sl], {-0}
    2dfc:	04000007 	streq	r0, [r0], #-7
    2e00:	00cf02e4 	sbceq	r0, pc, r4, ror #5
    2e04:	0a780000 	beq	1e02e0c <_Min_Stack_Size+0x1e02a0c>
    2e08:	00000a2e 	andeq	r0, r0, lr, lsr #20
    2e0c:	ca02e504 	bgt	bc224 <_Min_Stack_Size+0xbbe24>
    2e10:	80000000 	andhi	r0, r0, r0
    2e14:	0005260a 	andeq	r2, r5, sl, lsl #12
    2e18:	02e60400 	rsceq	r0, r6, #0, 8
    2e1c:	000000ca 	andeq	r0, r0, sl, asr #1
    2e20:	05650a84 	strbeq	r0, [r5, #-2692]!	; 0xfffff57c
    2e24:	e7040000 	str	r0, [r4, -r0]
    2e28:	0000ca02 	andeq	ip, r0, r2, lsl #20
    2e2c:	720a8800 	andvc	r8, sl, #0, 16
    2e30:	04000001 	streq	r0, [r0], #-1
    2e34:	00ca02e8 	sbceq	r0, sl, r8, ror #5
    2e38:	008c0000 	addeq	r0, ip, r0
    2e3c:	0001bc0b 	andeq	fp, r1, fp, lsl #24
    2e40:	02ea0400 	rsceq	r0, sl, #0, 8
    2e44:	0000023e 	andeq	r0, r0, lr, lsr r2
    2e48:	c505010c 	strgt	r0, [r5, #-268]	; 0xfffffef4
    2e4c:	00000408 	andeq	r0, r0, r8, lsl #8
    2e50:	0019a30d 	andseq	sl, r9, sp, lsl #6
    2e54:	530e0000 	movwpl	r0, #57344	; 0xe000
    2e58:	01005445 	tsteq	r0, r5, asr #8
    2e5c:	08010200 	stmdaeq	r1, {r9}
    2e60:	000007db 	ldrdeq	r0, [r0], -fp
    2e64:	3a06010c 	bcc	18329c <_Min_Stack_Size+0x182e9c>
    2e68:	00000430 	andeq	r0, r0, r0, lsr r4
    2e6c:	0004d00d 	andeq	sp, r4, sp
    2e70:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    2e74:	01000009 	tsteq	r0, r9
    2e78:	0008000d 	andeq	r0, r8, sp
    2e7c:	a30d0200 	movwge	r0, #53760	; 0xd200
    2e80:	03000004 	movweq	r0, #4
    2e84:	058c0300 	streq	r0, [ip, #768]	; 0x300
    2e88:	3f060000 	svccc	0x00060000
    2e8c:	0000040f 	andeq	r0, r0, pc, lsl #8
    2e90:	4107140f 	tstmi	r7, pc, lsl #8
    2e94:	00000480 	andeq	r0, r0, r0, lsl #9
    2e98:	6e695010 	mcrvs	0, 3, r5, cr9, cr0, {0}
    2e9c:	b8430700 	stmdalt	r3, {r8, r9, sl}^
    2ea0:	00000000 	andeq	r0, r0, r0
    2ea4:	002e1011 	eoreq	r1, lr, r1, lsl r0
    2ea8:	b8460700 	stmdalt	r6, {r8, r9, sl}^
    2eac:	04000000 	streq	r0, [r0], #-0
    2eb0:	000abf11 	andeq	fp, sl, r1, lsl pc
    2eb4:	b8490700 	stmdalt	r9, {r8, r9, sl}^
    2eb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ebc:	001c2111 	andseq	r2, ip, r1, lsl r1
    2ec0:	b84c0700 	stmdalt	ip, {r8, r9, sl}^
    2ec4:	0c000000 	stceq	0, cr0, [r0], {-0}
    2ec8:	00015c11 	andeq	r5, r1, r1, lsl ip
    2ecc:	b84f0700 	stmdalt	pc, {r8, r9, sl}^	; <UNPREDICTABLE>
    2ed0:	10000000 	andne	r0, r0, r0
    2ed4:	07870300 	streq	r0, [r7, r0, lsl #6]
    2ed8:	51070000 	mrspl	r0, (UNDEF: 7)
    2edc:	0000043b 	andeq	r0, r0, fp, lsr r4
    2ee0:	5707010c 	strpl	r0, [r7, -ip, lsl #2]
    2ee4:	000004a0 	andeq	r0, r0, r0, lsr #9
    2ee8:	00144c0d 	andseq	r4, r4, sp, lsl #24
    2eec:	110d0000 	mrsne	r0, (UNDEF: 13)
    2ef0:	01000014 	tsteq	r0, r4, lsl r0
    2ef4:	14af0300 	strtne	r0, [pc], #768	; 2efc <_Min_Stack_Size+0x2afc>
    2ef8:	5a070000 	bpl	1c2f00 <_Min_Stack_Size+0x1c2b00>
    2efc:	0000048b 	andeq	r0, r0, fp, lsl #9
    2f00:	0006eb12 	andeq	lr, r6, r2, lsl fp
    2f04:	4cbd0100 	ldfmis	f0, [sp]
    2f08:	7c080008 	stcvc	0, cr0, [r8], {8}
    2f0c:	01000002 	tsteq	r0, r2
    2f10:	00052c9c 	muleq	r5, ip, ip
    2f14:	14901300 	ldrne	r1, [r0], #768	; 0x300
    2f18:	bd010000 	stclt	0, cr0, [r1, #-0]
    2f1c:	0000052c 	andeq	r0, r0, ip, lsr #10
    2f20:	ef135001 	svc	0x00135001
    2f24:	01000006 	tsteq	r0, r6
    2f28:	000532bd 			; <UNDEFINED> instruction: 0x000532bd
    2f2c:	14510100 	ldrbne	r0, [r1], #-256	; 0xffffff00
    2f30:	000013e2 	andeq	r1, r0, r2, ror #7
    2f34:	00b8bf01 	adcseq	fp, r8, r1, lsl #30
    2f38:	074f0000 	strbeq	r0, [pc, -r0]
    2f3c:	e0140000 	ands	r0, r4, r0
    2f40:	01000013 	tsteq	r0, r3, lsl r0
    2f44:	0000b8c0 	andeq	fp, r0, r0, asr #17
    2f48:	00078600 	andeq	r8, r7, r0, lsl #12
    2f4c:	14721400 	ldrbtne	r1, [r2], #-1024	; 0xfffffc00
    2f50:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2f54:	000000b8 	strheq	r0, [r0], -r8
    2f58:	0000081a 	andeq	r0, r0, sl, lsl r8
    2f5c:	00140c14 	andseq	r0, r4, r4, lsl ip
    2f60:	b8c20100 	stmialt	r2, {r8}^
    2f64:	5d000000 	stcpl	0, cr0, [r0, #-0]
    2f68:	15000008 	strne	r0, [r0, #-8]
    2f6c:	00000318 	andeq	r0, r0, r8, lsl r3
    2f70:	0001b516 	andeq	fp, r1, r6, lsl r5
    2f74:	01050100 	mrseq	r0, (UNDEF: 21)
    2f78:	000000ca 	andeq	r0, r0, sl, asr #1
    2f7c:	00549102 	subseq	r9, r4, r2, lsl #2
    2f80:	d6041700 	strle	r1, [r4], -r0, lsl #14
    2f84:	17000001 	strne	r0, [r0, -r1]
    2f88:	00048004 	andeq	r8, r4, r4
    2f8c:	149f1800 	ldrne	r1, [pc], #2048	; 2f94 <_Min_Stack_Size+0x2b94>
    2f90:	3a010000 	bcc	42f98 <_Min_Stack_Size+0x42b98>
    2f94:	000ac801 	andeq	ip, sl, r1, lsl #16
    2f98:	00016408 	andeq	r6, r1, r8, lsl #8
    2f9c:	ad9c0100 	ldfges	f0, [ip]
    2fa0:	19000005 	stmdbne	r0, {r0, r2}
    2fa4:	00001490 	muleq	r0, r0, r4
    2fa8:	2c013a01 	stccs	10, cr3, [r1], {1}
    2fac:	01000005 	tsteq	r0, r5
    2fb0:	0a6c1a50 	beq	1b098f8 <_Min_Stack_Size+0x1b094f8>
    2fb4:	3a010000 	bcc	42fbc <_Min_Stack_Size+0x42bbc>
    2fb8:	0000b801 	andeq	fp, r0, r1, lsl #16
    2fbc:	0009c400 	andeq	ip, r9, r0, lsl #8
    2fc0:	13e21b00 	mvnne	r1, #0, 22
    2fc4:	3c010000 	stccc	0, cr0, [r1], {-0}
    2fc8:	0000b801 	andeq	fp, r0, r1, lsl #16
    2fcc:	0009e200 	andeq	lr, r9, r0, lsl #4
    2fd0:	13e01b00 	mvnne	r1, #0, 22
    2fd4:	3d010000 	stccc	0, cr0, [r1, #-0]
    2fd8:	0000b801 	andeq	fp, r0, r1, lsl #16
    2fdc:	000a0100 	andeq	r0, sl, r0, lsl #2
    2fe0:	14721b00 	ldrbtne	r1, [r2], #-2816	; 0xfffff500
    2fe4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    2fe8:	0000b801 	andeq	fp, r0, r1, lsl #16
    2fec:	000a9a00 	andeq	r9, sl, r0, lsl #20
    2ff0:	6d741c00 	ldclvs	12, cr1, [r4, #-0]
    2ff4:	3f010070 	svccc	0x00010070
    2ff8:	0000b801 	andeq	fp, r0, r1, lsl #16
    2ffc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    3000:	2b1d0000 	blcs	743008 <_Min_Stack_Size+0x742c08>
    3004:	01000014 	tsteq	r0, r4, lsl r0
    3008:	04a0018b 	strteq	r0, [r0], #395	; 0x18b
    300c:	0c2c0000 	stceq	0, cr0, [ip], #-0
    3010:	000c0800 	andeq	r0, ip, r0, lsl #16
    3014:	9c010000 	stcls	0, cr0, [r1], {-0}
    3018:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    301c:	0014901a 	andseq	r9, r4, sl, lsl r0
    3020:	018b0100 	orreq	r0, fp, r0, lsl #2
    3024:	0000052c 	andeq	r0, r0, ip, lsr #10
    3028:	00000b4f 	andeq	r0, r0, pc, asr #22
    302c:	000a6c19 	andeq	r6, sl, r9, lsl ip
    3030:	018b0100 	orreq	r0, fp, r0, lsl #2
    3034:	000000a2 	andeq	r0, r0, r2, lsr #1
    3038:	42165101 	andsmi	r5, r6, #1073741824	; 0x40000000
    303c:	01000014 	tsteq	r0, r4, lsl r0
    3040:	04a0018d 	strteq	r0, [r0], #397	; 0x18d
    3044:	710c0000 	mrsvc	r0, (UNDEF: 12)
    3048:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    304c:	1a00731a 	bne	1fcbc <_Min_Stack_Size+0x1f8bc>
    3050:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    3054:	00145b18 	andseq	r5, r4, r8, lsl fp
    3058:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    305c:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
    3060:	00000008 	andeq	r0, r0, r8
    3064:	06429c01 	strbeq	r9, [r2], -r1, lsl #24
    3068:	90190000 	andsls	r0, r9, r0
    306c:	01000014 	tsteq	r0, r4, lsl r0
    3070:	052c01ae 	streq	r0, [ip, #-430]!	; 0xfffffe52
    3074:	50010000 	andpl	r0, r1, r0
    3078:	000a6c1a 	andeq	r6, sl, sl, lsl ip
    307c:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    3080:	000000a2 	andeq	r0, r0, r2, lsr #1
    3084:	00000b70 	andeq	r0, r0, r0, ror fp
    3088:	0014b419 	andseq	fp, r4, r9, lsl r4
    308c:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    3090:	000004a0 	andeq	r0, r0, r0, lsr #9
    3094:	18005201 	stmdane	r0, {r0, r9, ip, lr}
    3098:	000013f9 	strdeq	r1, [r0], -r9
    309c:	4001c501 	andmi	ip, r1, r1, lsl #10
    30a0:	0808000c 	stmdaeq	r8, {r2, r3}
    30a4:	01000000 	mrseq	r0, (UNDEF: 0)
    30a8:	0006779c 	muleq	r6, ip, r7
    30ac:	14901900 	ldrne	r1, [r0], #2304	; 0x900
    30b0:	c5010000 	strgt	r0, [r1, #-0]
    30b4:	00052c01 	andeq	r2, r5, r1, lsl #24
    30b8:	1a500100 	bne	14034c0 <_Min_Stack_Size+0x14030c0>
    30bc:	00000a6c 	andeq	r0, r0, ip, ror #20
    30c0:	a201c501 	andge	ip, r1, #4194304	; 0x400000
    30c4:	91000000 	mrsls	r0, (UNDEF: 0)
    30c8:	0000000b 	andeq	r0, r0, fp
    30cc:	0013cf1d 	andseq	ip, r3, sp, lsl pc
    30d0:	01d80100 	bicseq	r0, r8, r0, lsl #2
    30d4:	00000430 	andeq	r0, r0, r0, lsr r4
    30d8:	08000c48 	stmdaeq	r0, {r3, r6, sl, fp}
    30dc:	0000002a 	andeq	r0, r0, sl, lsr #32
    30e0:	06bf9c01 	ldrteq	r9, [pc], r1, lsl #24
    30e4:	901a0000 	andsls	r0, sl, r0
    30e8:	01000014 	tsteq	r0, r4, lsl r0
    30ec:	052c01d8 	streq	r0, [ip, #-472]!	; 0xfffffe28
    30f0:	0bb20000 	bleq	fec830f8 <_estack+0xdec530f8>
    30f4:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    30f8:	0100000a 	tsteq	r0, sl
    30fc:	00a201d8 	ldrdeq	r0, [r2], r8	; <UNPREDICTABLE>
    3100:	51010000 	mrspl	r0, (UNDEF: 1)
    3104:	706d741e 	rsbvc	r7, sp, lr, lsl r4
    3108:	01da0100 	bicseq	r0, sl, r0, lsl #2
    310c:	000000ca 	andeq	r0, r0, sl, asr #1
    3110:	007c9102 	rsbseq	r9, ip, r2, lsl #2
    3114:	00062118 	andeq	r2, r6, r8, lsl r1
    3118:	02080100 	andeq	r0, r8, #0, 2
    311c:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
    3120:	00000002 	andeq	r0, r0, r2
    3124:	06e49c01 	strbteq	r9, [r4], r1, lsl #24
    3128:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    312c:	0100000a 	tsteq	r0, sl
    3130:	00a20208 	adceq	r0, r2, r8, lsl #4
    3134:	50010000 	andpl	r0, r1, r0
    3138:	0c631800 	stcleq	8, cr1, [r3], #-0
    313c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    3140:	000c7801 	andeq	r7, ip, r1, lsl #16
    3144:	00001808 	andeq	r1, r0, r8, lsl #16
    3148:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    314c:	1a000007 	bne	3170 <_Min_Stack_Size+0x2d70>
    3150:	00000a6c 	andeq	r0, r0, ip, ror #20
    3154:	a201f901 	andge	pc, r1, #16384	; 0x4000
    3158:	d3000000 	movwle	r0, #0
    315c:	1f00000b 	svcne	0x0000000b
    3160:	08000c88 	stmdaeq	r0, {r3, r7, sl, fp}
    3164:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
    3168:	07f32000 	ldrbeq	r2, [r3, r0]!
    316c:	44080000 	strmi	r0, [r8], #-0
    3170:	00072007 	andeq	r2, r7, r7
    3174:	00ad0500 	adceq	r0, sp, r0, lsl #10
    3178:	ea000000 	b	3180 <_Min_Stack_Size+0x2d80>
    317c:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3180:	000b3a00 	andeq	r3, fp, r0, lsl #20
    3184:	98010400 	stmdals	r1, {sl}
    3188:	01000002 	tsteq	r0, r2
    318c:	000020d3 	ldrdeq	r2, [r0], -r3
    3190:	0000087a 	andeq	r0, r0, sl, ror r8
    3194:	00000e78 	andeq	r0, r0, r8, ror lr
    3198:	00000000 	andeq	r0, r0, r0
    319c:	000013bf 			; <UNDEFINED> instruction: 0x000013bf
    31a0:	cf070802 	svcgt	0x00070802
    31a4:	02000000 	andeq	r0, r0, #0
    31a8:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    31ac:	01020000 	mrseq	r0, (UNDEF: 2)
    31b0:	0007d406 	andeq	sp, r7, r6, lsl #8
    31b4:	00880300 	addeq	r0, r8, r0, lsl #6
    31b8:	1d020000 	stcne	0, cr0, [r2, #-0]
    31bc:	00000045 	andeq	r0, r0, r5, asr #32
    31c0:	d2080102 	andle	r0, r8, #-2147483648	; 0x80000000
    31c4:	02000007 	andeq	r0, r0, #7
    31c8:	08220502 	stmdaeq	r2!, {r1, r8, sl}
    31cc:	5b030000 	blpl	c31d4 <_Min_Stack_Size+0xc2dd4>
    31d0:	02000009 	andeq	r0, r0, #9
    31d4:	00005e2b 	andeq	r5, r0, fp, lsr #28
    31d8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    31dc:	000004f7 	strdeq	r0, [r0], -r7
    31e0:	0005a803 	andeq	sl, r5, r3, lsl #16
    31e4:	703f0200 	eorsvc	r0, pc, r0, lsl #4
    31e8:	02000000 	andeq	r0, r0, #0
    31ec:	04450504 	strbeq	r0, [r5], #-1284	; 0xfffffafc
    31f0:	b1030000 	mrslt	r0, (UNDEF: 3)
    31f4:	02000003 	andeq	r0, r0, #3
    31f8:	00008241 	andeq	r8, r0, r1, asr #4
    31fc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3200:	000000d4 	ldrdeq	r0, [r0], -r4
    3204:	40050802 	andmi	r0, r5, r2, lsl #16
    3208:	04000004 	streq	r0, [r0], #-4
    320c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3210:	8a030074 	bhi	c33e8 <_Min_Stack_Size+0xc2fe8>
    3214:	03000000 	movweq	r0, #0
    3218:	00003a14 	andeq	r3, r0, r4, lsl sl
    321c:	095d0300 	ldmdbeq	sp, {r8, r9}^
    3220:	1a030000 	bne	c3228 <_Min_Stack_Size+0xc2e28>
    3224:	00000053 	andeq	r0, r0, r3, asr r0
    3228:	0005aa03 	andeq	sl, r5, r3, lsl #20
    322c:	651f0300 	ldrvs	r0, [pc, #-768]	; 2f34 <_Min_Stack_Size+0x2b34>
    3230:	03000000 	movweq	r0, #0
    3234:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    3238:	00772003 	rsbseq	r2, r7, r3
    323c:	04020000 	streq	r0, [r2], #-0
    3240:	00064c07 	andeq	r4, r6, r7, lsl #24
    3244:	00b80500 	adcseq	r0, r8, r0, lsl #10
    3248:	a2050000 	andge	r0, r5, #0
    324c:	06000000 	streq	r0, [r0], -r0
    3250:	01730418 	cmneq	r3, r8, lsl r4
    3254:	0000012b 	andeq	r0, r0, fp, lsr #2
    3258:	00524307 	subseq	r4, r2, r7, lsl #6
    325c:	ca017504 	bgt	60674 <_Min_Stack_Size+0x60274>
    3260:	00000000 	andeq	r0, r0, r0
    3264:	001f6408 	andseq	r6, pc, r8, lsl #8
    3268:	01760400 	cmneq	r6, r0, lsl #8
    326c:	000000ca 	andeq	r0, r0, sl, asr #1
    3270:	41500704 	cmpmi	r0, r4, lsl #14
    3274:	77040052 	smlsdvc	r4, r2, r0, r0
    3278:	0000ca01 	andeq	ip, r0, r1, lsl #20
    327c:	c4080800 	strgt	r0, [r8], #-2048	; 0xfffff800
    3280:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    3284:	00ca0178 	sbceq	r0, sl, r8, ror r1
    3288:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    328c:	00001fcf 	andeq	r1, r0, pc, asr #31
    3290:	ca017904 	bgt	616a8 <_Min_Stack_Size+0x612a8>
    3294:	10000000 	andne	r0, r0, r0
    3298:	52434607 	subpl	r4, r3, #7340032	; 0x700000
    329c:	017a0400 	cmneq	sl, r0, lsl #8
    32a0:	000000ca 	andeq	r0, r0, sl, asr #1
    32a4:	82090014 	andhi	r0, r9, #20
    32a8:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    32ac:	00d4017b 	sbcseq	r0, r4, fp, ror r1
    32b0:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    32b4:	c2026f04 	andgt	r6, r2, #4, 30
    32b8:	07000001 	streq	r0, [r0, -r1]
    32bc:	00315243 	eorseq	r5, r1, r3, asr #4
    32c0:	ca027104 	bgt	9f6d8 <_Min_Stack_Size+0x9f2d8>
    32c4:	00000000 	andeq	r0, r0, r0
    32c8:	32524307 	subscc	r4, r2, #469762048	; 0x1c000000
    32cc:	02720400 	rsbseq	r0, r2, #0, 8
    32d0:	000000ca 	andeq	r0, r0, sl, asr #1
    32d4:	20c90804 	sbccs	r0, r9, r4, lsl #16
    32d8:	73040000 	movwvc	r0, #16384	; 0x4000
    32dc:	0000ca02 	andeq	ip, r0, r2, lsl #20
    32e0:	ce080800 	cdpgt	8, 0, cr0, cr8, cr0, {0}
    32e4:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    32e8:	00ca0274 	sbceq	r0, sl, r4, ror r2
    32ec:	070c0000 	streq	r0, [ip, -r0]
    32f0:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    32f4:	00ca0275 	sbceq	r0, sl, r5, ror r2
    32f8:	07100000 	ldreq	r0, [r0, -r0]
    32fc:	00315253 	eorseq	r5, r1, r3, asr r2
    3300:	ca027604 	bgt	a0b18 <_Min_Stack_Size+0xa0718>
    3304:	14000000 	strne	r0, [r0], #-0
    3308:	32525307 	subscc	r5, r2, #469762048	; 0x1c000000
    330c:	02770400 	rsbseq	r0, r7, #0, 8
    3310:	000000ca 	andeq	r0, r0, sl, asr #1
    3314:	43430718 	movtmi	r0, #14104	; 0x3718
    3318:	78040052 	stmdavc	r4, {r1, r4, r6}
    331c:	0000ca02 	andeq	ip, r0, r2, lsl #20
    3320:	b0081c00 	andlt	r1, r8, r0, lsl #24
    3324:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    3328:	00ca0279 	sbceq	r0, sl, r9, ror r2
    332c:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    3330:	000018a8 	andeq	r1, r0, r8, lsr #17
    3334:	ca027a04 	bgt	a1b4c <_Min_Stack_Size+0xa174c>
    3338:	24000000 	strcs	r0, [r0], #-0
    333c:	1d220900 	stcne	9, cr0, [r2, #-0]
    3340:	7b040000 	blvc	103348 <_Min_Stack_Size+0x102f48>
    3344:	00013702 	andeq	r3, r1, r2, lsl #14
    3348:	05010a00 	streq	r0, [r1, #-2560]	; 0xfffff600
    334c:	0001e3c5 	andeq	lr, r1, r5, asr #7
    3350:	19a30b00 	stmibne	r3!, {r8, r9, fp}
    3354:	0c000000 	stceq	0, cr0, [r0], {-0}
    3358:	00544553 	subseq	r4, r4, r3, asr r5
    335c:	e3030001 	movw	r0, #12289	; 0x3001
    3360:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    3364:	0001cec8 	andeq	ip, r1, r8, asr #29
    3368:	02040d00 	andeq	r0, r4, #0, 26
    336c:	07db0801 	ldrbeq	r0, [fp, r1, lsl #16]
    3370:	010a0000 	mrseq	r0, (UNDEF: 10)
    3374:	02183a06 	andseq	r3, r8, #24576	; 0x6000
    3378:	d00b0000 	andle	r0, fp, r0
    337c:	00000004 	andeq	r0, r0, r4
    3380:	0009090b 	andeq	r0, r9, fp, lsl #18
    3384:	000b0100 	andeq	r0, fp, r0, lsl #2
    3388:	02000008 	andeq	r0, r0, #8
    338c:	0004a30b 	andeq	sl, r4, fp, lsl #6
    3390:	03000300 	movweq	r0, #768	; 0x300
    3394:	0000058c 	andeq	r0, r0, ip, lsl #11
    3398:	01f73f06 	mvnseq	r3, r6, lsl #30
    339c:	010a0000 	mrseq	r0, (UNDEF: 10)
    33a0:	02384506 	eorseq	r4, r8, #25165824	; 0x1800000
    33a4:	ad0b0000 	stcge	0, cr0, [fp, #-0]
    33a8:	00000018 	andeq	r0, r0, r8, lsl r0
    33ac:	001bd00b 	andseq	sp, fp, fp
    33b0:	03000100 	movweq	r0, #256	; 0x100
    33b4:	000017fb 	strdeq	r1, [r0], -fp
    33b8:	02234806 	eoreq	r4, r3, #393216	; 0x60000
    33bc:	300e0000 	andcc	r0, lr, r0
    33c0:	02dc4307 	sbcseq	r4, ip, #469762048	; 0x1c000000
    33c4:	040f0000 	streq	r0, [pc], #-0	; 33cc <_Min_Stack_Size+0x2fcc>
    33c8:	0700001d 	smladeq	r0, sp, r0, r0
    33cc:	0000b845 	andeq	fp, r0, r5, asr #16
    33d0:	c50f0000 	strgt	r0, [pc, #-0]	; 33d8 <_Min_Stack_Size+0x2fd8>
    33d4:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    33d8:	0000b848 	andeq	fp, r0, r8, asr #16
    33dc:	250f0400 	strcs	r0, [pc, #-1024]	; 2fe4 <_Min_Stack_Size+0x2be4>
    33e0:	07000018 	smladeq	r0, r8, r0, r0
    33e4:	0000b84c 	andeq	fp, r0, ip, asr #16
    33e8:	c30f0800 	movwgt	r0, #63488	; 0xf800
    33ec:	0700001d 	smladeq	r0, sp, r0, r0
    33f0:	0000b84f 	andeq	fp, r0, pc, asr #16
    33f4:	e40f0c00 	str	r0, [pc], #-3072	; 33fc <_Min_Stack_Size+0x2ffc>
    33f8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    33fc:	0000b852 	andeq	fp, r0, r2, asr r8
    3400:	430f1000 	movwmi	r1, #61440	; 0xf000
    3404:	0700001b 	smladeq	r0, fp, r0, r0
    3408:	0000b855 	andeq	fp, r0, r5, asr r8
    340c:	100f1400 	andne	r1, pc, r0, lsl #8
    3410:	0700002e 	streq	r0, [r0, -lr, lsr #32]
    3414:	0000b858 	andeq	fp, r0, r8, asr r8
    3418:	6c0f1800 	stcvs	8, cr1, [pc], {-0}
    341c:	07000012 	smladeq	r0, r2, r0, r0
    3420:	0000b85d 	andeq	fp, r0, sp, asr r8
    3424:	870f1c00 	strhi	r1, [pc, -r0, lsl #24]
    3428:	0700001e 	smladeq	r0, lr, r0, r0
    342c:	0000b860 	andeq	fp, r0, r0, ror #16
    3430:	9a0f2000 	bls	3cb438 <_Min_Stack_Size+0x3cb038>
    3434:	0700001e 	smladeq	r0, lr, r0, r0
    3438:	0000b865 	andeq	fp, r0, r5, ror #16
    343c:	3f0f2400 	svccc	0x000f2400
    3440:	07000018 	smladeq	r0, r8, r0, r0
    3444:	0000b868 	andeq	fp, r0, r8, ror #16
    3448:	000f2800 	andeq	r2, pc, r0, lsl #16
    344c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    3450:	0000b86e 	andeq	fp, r0, lr, ror #16
    3454:	03002c00 	movweq	r2, #3072	; 0xc00
    3458:	000015ee 	andeq	r1, r0, lr, ror #11
    345c:	02437307 	subeq	r7, r3, #469762048	; 0x1c000000
    3460:	010a0000 	mrseq	r0, (UNDEF: 10)
    3464:	03147a07 	tsteq	r4, #28672	; 0x7000
    3468:	950b0000 	strls	r0, [fp, #-0]
    346c:	00000019 	andeq	r0, r0, r9, lsl r0
    3470:	0016450b 	andseq	r4, r6, fp, lsl #10
    3474:	8a0b0100 	bhi	2c387c <_Min_Stack_Size+0x2c347c>
    3478:	0200001d 	andeq	r0, r0, #29
    347c:	00208f0b 	eoreq	r8, r0, fp, lsl #30
    3480:	570b0300 	strpl	r0, [fp, -r0, lsl #6]
    3484:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    3488:	001a290b 	andseq	r2, sl, fp, lsl #18
    348c:	03000500 	movweq	r0, #1280	; 0x500
    3490:	00001d75 	andeq	r1, r0, r5, ror sp
    3494:	02e78107 	rsceq	r8, r7, #-1073741823	; 0xc0000001
    3498:	a5100000 	ldrge	r0, [r0, #-0]
    349c:	60000020 	andvs	r0, r0, r0, lsr #32
    34a0:	03d49d07 	bicseq	r9, r4, #448	; 0x1c0
    34a4:	910f0000 	mrsls	r0, CPSR
    34a8:	0700001c 	smladeq	r0, ip, r0, r0
    34ac:	0003d49f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    34b0:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 34b8 <_Min_Stack_Size+0x30b8>
    34b4:	07000022 	streq	r0, [r0, -r2, lsr #32]
    34b8:	0002dca1 	andeq	sp, r2, r1, lsr #25
    34bc:	190f0400 	stmdbne	pc, {sl}	; <UNPREDICTABLE>
    34c0:	07000019 	smladeq	r0, r9, r0, r0
    34c4:	000238a3 	andeq	r3, r2, r3, lsr #17
    34c8:	630f3400 	movwvs	r3, #62464	; 0xf400
    34cc:	07000004 	streq	r0, [r0, -r4]
    34d0:	0003daa5 	andeq	sp, r3, r5, lsr #21
    34d4:	f70f3500 			; <UNDEFINED> instruction: 0xf70f3500
    34d8:	07000018 	smladeq	r0, r8, r0, r0
    34dc:	0001eea7 	andeq	lr, r1, r7, lsr #29
    34e0:	ef0f3800 	svc	0x000f3800
    34e4:	07000021 	streq	r0, [r0, -r1, lsr #32]
    34e8:	0003f0a9 	andeq	pc, r3, r9, lsr #1
    34ec:	6a0f3c00 	bvs	3d24f4 <_Min_Stack_Size+0x3d20f4>
    34f0:	07000017 	smladeq	r0, r7, r0, r0
    34f4:	0003f0ab 	andeq	pc, r3, fp, lsr #1
    34f8:	d20f4000 	andle	r4, pc, #0
    34fc:	07000017 	smladeq	r0, r7, r0, r0
    3500:	0003f0ad 	andeq	pc, r3, sp, lsr #1
    3504:	ed0f4400 	cfstrs	mvf4, [pc, #-0]	; 350c <_Min_Stack_Size+0x310c>
    3508:	0700001c 	smladeq	r0, ip, r0, r0
    350c:	0003f0af 	andeq	pc, r3, pc, lsr #1
    3510:	ff0f4800 			; <UNDEFINED> instruction: 0xff0f4800
    3514:	0700001b 	smladeq	r0, fp, r0, r0
    3518:	0003f0b1 	strheq	pc, [r3], -r1	; <UNPREDICTABLE>
    351c:	dd0f4c00 	stcle	12, cr4, [pc, #-0]	; 3524 <_Min_Stack_Size+0x3124>
    3520:	07000021 	streq	r0, [r0, -r1, lsr #32]
    3524:	0003f0b3 	strheq	pc, [r3], -r3	; <UNPREDICTABLE>
    3528:	4d0f5000 	stcmi	0, cr5, [pc, #-0]	; 3530 <_Min_Stack_Size+0x3130>
    352c:	0700001a 	smladeq	r0, sl, r0, r0
    3530:	0000cab5 			; <UNDEFINED> instruction: 0x0000cab5
    3534:	c80f5400 	stmdagt	pc, {sl, ip, lr}	; <UNPREDICTABLE>
    3538:	07000018 	smladeq	r0, r8, r0, r0
    353c:	0000b8b7 			; <UNDEFINED> instruction: 0x0000b8b7
    3540:	ba0f5800 	blt	3d9548 <_Min_Stack_Size+0x3d9148>
    3544:	07000019 	smladeq	r0, r9, r0, r0
    3548:	0000b8b9 			; <UNDEFINED> instruction: 0x0000b8b9
    354c:	11005c00 	tstne	r0, r0, lsl #24
    3550:	00012b04 	andeq	r2, r1, r4, lsl #22
    3554:	03140500 	tsteq	r4, #0, 10
    3558:	ea120000 	b	483560 <_Min_Stack_Size+0x483160>
    355c:	13000003 	movwne	r0, #3
    3560:	000003ea 	andeq	r0, r0, sl, ror #7
    3564:	1f041100 	svcne	0x00041100
    3568:	11000003 	tstne	r0, r3
    356c:	0003df04 	andeq	sp, r3, r4, lsl #30
    3570:	20a70300 	adccs	r0, r7, r0, lsl #6
    3574:	bb070000 	bllt	1c357c <_Min_Stack_Size+0x1c317c>
    3578:	0000031f 	andeq	r0, r0, pc, lsl r3
    357c:	4108200e 	tstmi	r8, lr
    3580:	0000046a 	andeq	r0, r0, sl, ror #8
    3584:	001c1c0f 	andseq	r1, ip, pc, lsl #24
    3588:	b8430800 	stmdalt	r3, {fp}^
    358c:	00000000 	andeq	r0, r0, r0
    3590:	001bf50f 	andseq	pc, fp, pc, lsl #10
    3594:	b8460800 	stmdalt	r6, {fp}^
    3598:	04000000 	streq	r0, [r0], #-0
    359c:	001d690f 	andseq	r6, sp, pc, lsl #18
    35a0:	b8490800 	stmdalt	r9, {fp}^
    35a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    35a8:	001a570f 	andseq	r5, sl, pc, lsl #14
    35ac:	b84c0800 	stmdalt	ip, {fp}^
    35b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    35b4:	001fd40f 	andseq	sp, pc, pc, lsl #8
    35b8:	b84f0800 	stmdalt	pc, {fp}^	; <UNPREDICTABLE>
    35bc:	10000000 	andne	r0, r0, r0
    35c0:	001cb70f 	andseq	fp, ip, pc, lsl #14
    35c4:	b8520800 	ldmdalt	r2, {fp}^
    35c8:	14000000 	strne	r0, [r0], #-0
    35cc:	00216e0f 	eoreq	r6, r1, pc, lsl #28
    35d0:	b8550800 	ldmdalt	r5, {fp}^
    35d4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    35d8:	0018ba0f 	andseq	fp, r8, pc, lsl #20
    35dc:	b8580800 	ldmdalt	r8, {fp}^
    35e0:	1c000000 	stcne	0, cr0, [r0], {-0}
    35e4:	1c5e0300 	mrrcne	3, 0, r0, lr, cr0
    35e8:	5b080000 	blpl	2035f0 <_Min_Stack_Size+0x2031f0>
    35ec:	00000401 	andeq	r0, r0, r1, lsl #8
    35f0:	7808010a 	stmdavc	r8, {r1, r3, r8}
    35f4:	000004c3 	andeq	r0, r0, r3, asr #9
    35f8:	00201c0b 	eoreq	r1, r0, fp, lsl #24
    35fc:	350b0000 	strcc	r0, [fp, #-0]
    3600:	20000015 	andcs	r0, r0, r5, lsl r0
    3604:	001ca40b 	andseq	sl, ip, fp, lsl #8
    3608:	710b2400 	tstvc	fp, r0, lsl #8
    360c:	2100001e 	tstcs	r0, lr, lsl r0
    3610:	0020790b 	eoreq	r7, r0, fp, lsl #18
    3614:	7e0b2200 	cdpvc	2, 0, cr2, cr11, cr0, {0}
    3618:	28000021 	stmdacs	r0, {r0, r5}
    361c:	001bb30b 	andseq	fp, fp, fp, lsl #6
    3620:	350b2900 	strcc	r2, [fp, #-2304]	; 0xfffff700
    3624:	2a00001f 	bcs	36a8 <_Min_Stack_Size+0x32a8>
    3628:	001e290b 	andseq	r2, lr, fp, lsl #18
    362c:	0b00e000 	bleq	3b634 <_Min_Stack_Size+0x3b234>
    3630:	000016c4 	andeq	r1, r0, r4, asr #13
    3634:	a80b01a0 	stmdage	fp, {r5, r7, r8}
    3638:	e000001e 	and	r0, r0, lr, lsl r0
    363c:	04030001 	streq	r0, [r3], #-1
    3640:	08000019 	stmdaeq	r0, {r0, r3, r4}
    3644:	00047587 	andeq	r7, r4, r7, lsl #11
    3648:	08010a00 	stmdaeq	r1, {r9, fp}
    364c:	0004f09b 	muleq	r4, fp, r0
    3650:	1db10b00 	ldcne	11, cr0, [r1]
    3654:	0b000000 	bleq	365c <_Min_Stack_Size+0x325c>
    3658:	00001f69 	andeq	r1, r0, r9, ror #30
    365c:	17310b10 			; <UNDEFINED> instruction: 0x17310b10
    3660:	0b200000 	bleq	803668 <_Min_Stack_Size+0x803268>
    3664:	0000186b 	andeq	r1, r0, fp, ror #16
    3668:	030000c0 	movweq	r0, #192	; 0xc0
    366c:	00001d9d 	muleq	r0, sp, sp
    3670:	04cea108 	strbeq	sl, [lr], #264	; 0x108
    3674:	540e0000 	strpl	r0, [lr], #-0
    3678:	05d0a608 	ldrbeq	sl, [r0, #1544]	; 0x608
    367c:	910f0000 	mrsls	r0, CPSR
    3680:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    3684:	0005d0a8 	andeq	sp, r5, r8, lsr #1
    3688:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 3690 <_Min_Stack_Size+0x3290>
    368c:	08000022 	stmdaeq	r0, {r1, r5}
    3690:	00046aaa 	andeq	r6, r4, sl, lsr #21
    3694:	2e0f0400 	cfcpyscs	mvf0, mvf15
    3698:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    369c:	0005d6ac 	andeq	sp, r5, ip, lsr #13
    36a0:	460f2400 	strmi	r2, [pc], -r0, lsl #8
    36a4:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    36a8:	0000a2ae 	andeq	sl, r0, lr, lsr #5
    36ac:	7a0f2800 	bvc	3cd6b4 <_Min_Stack_Size+0x3cd2b4>
    36b0:	0800002e 	stmdaeq	r0, {r1, r2, r3, r5}
    36b4:	0000cfb0 			; <UNDEFINED> instruction: 0x0000cfb0
    36b8:	a70f2a00 	strge	r2, [pc, -r0, lsl #20]
    36bc:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    36c0:	0000cab2 			; <UNDEFINED> instruction: 0x0000cab2
    36c4:	b60f2c00 	strlt	r2, [pc], -r0, lsl #24
    36c8:	08000016 	stmdaeq	r0, {r1, r2, r4}
    36cc:	0000cab4 			; <UNDEFINED> instruction: 0x0000cab4
    36d0:	570f3000 	strpl	r3, [pc, -r0]
    36d4:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    36d8:	0005dcb7 			; <UNDEFINED> instruction: 0x0005dcb7
    36dc:	370f3400 	strcc	r3, [pc, -r0, lsl #8]
    36e0:	08000019 	stmdaeq	r0, {r0, r3, r4}
    36e4:	0005dcb9 			; <UNDEFINED> instruction: 0x0005dcb9
    36e8:	190f3800 	stmdbne	pc, {fp, ip, sp}	; <UNPREDICTABLE>
    36ec:	08000019 	stmdaeq	r0, {r0, r3, r4}
    36f0:	000238bb 			; <UNDEFINED> instruction: 0x000238bb
    36f4:	630f3c00 	movwvs	r3, #64512	; 0xfc00
    36f8:	08000004 	stmdaeq	r0, {r2}
    36fc:	0005e2bd 			; <UNDEFINED> instruction: 0x0005e2bd
    3700:	100f3d00 	andne	r3, pc, r0, lsl #26
    3704:	0800002e 	stmdaeq	r0, {r1, r2, r3, r5}
    3708:	0005e7bf 			; <UNDEFINED> instruction: 0x0005e7bf
    370c:	4d0f3e00 	stcmi	14, cr3, [pc, #-0]	; 3714 <_Min_Stack_Size+0x3314>
    3710:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    3714:	0000cac1 	andeq	ip, r0, r1, asr #21
    3718:	110f4000 	mrsne	r4, CPSR
    371c:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    3720:	0000cac3 	andeq	ip, r0, r3, asr #21
    3724:	eb0f4400 	bl	3d472c <_Min_Stack_Size+0x3d432c>
    3728:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    372c:	0000cac5 	andeq	ip, r0, r5, asr #21
    3730:	2c0f4800 	stccs	8, cr4, [pc], {-0}
    3734:	08000019 	stmdaeq	r0, {r0, r3, r4}
    3738:	0000cac7 	andeq	ip, r0, r7, asr #21
    373c:	950f4c00 	strls	r4, [pc, #-3072]	; 2b44 <_Min_Stack_Size+0x2744>
    3740:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    3744:	0000cac9 	andeq	ip, r0, r9, asr #21
    3748:	11005000 	mrsne	r5, (UNDEF: 0)
    374c:	0001c204 	andeq	ip, r1, r4, lsl #4
    3750:	97041100 	strls	r1, [r4, -r0, lsl #2]
    3754:	11000000 	mrsne	r0, (UNDEF: 0)
    3758:	0003f604 	andeq	pc, r3, r4, lsl #12
    375c:	04c30500 	strbeq	r0, [r3], #1280	; 0x500
    3760:	f0050000 			; <UNDEFINED> instruction: 0xf0050000
    3764:	03000004 	movweq	r0, #4
    3768:	00001e49 	andeq	r1, r0, r9, asr #28
    376c:	04fbcb08 	ldrbteq	ip, [fp], #2824	; 0xb08
    3770:	f7140000 			; <UNDEFINED> instruction: 0xf7140000
    3774:	0100001a 	tsteq	r0, sl, lsl r0
    3778:	02181479 	andseq	r1, r8, #2030043136	; 0x79000000
    377c:	45010000 	strmi	r0, [r1, #-0]
    3780:	15000006 	strne	r0, [r0, #-6]
    3784:	00001f7d 	andeq	r1, r0, sp, ror pc
    3788:	45147901 	ldrmi	r7, [r4, #-2305]	; 0xfffff6ff
    378c:	15000006 	strne	r0, [r0, #-6]
    3790:	0000182f 	andeq	r1, r0, pc, lsr #16
    3794:	b8147901 	ldmdalt	r4, {r0, r8, fp, ip, sp, lr}
    3798:	15000000 	strne	r0, [r0, #-0]
    379c:	000015e7 	andeq	r1, r0, r7, ror #11
    37a0:	e3147901 	tst	r4, #16384	; 0x4000
    37a4:	15000001 	strne	r0, [r0, #-1]
    37a8:	00002c18 	andeq	r2, r0, r8, lsl ip
    37ac:	b8147901 	ldmdalt	r4, {r0, r8, fp, ip, sp, lr}
    37b0:	15000000 	strne	r0, [r0, #-0]
    37b4:	00001c9a 	muleq	r0, sl, ip
    37b8:	b8147901 	ldmdalt	r4, {r0, r8, fp, ip, sp, lr}
    37bc:	00000000 	andeq	r0, r0, r0
    37c0:	05ec0411 	strbeq	r0, [ip, #1041]!	; 0x411
    37c4:	ac140000 	ldcge	0, cr0, [r4], {-0}
    37c8:	01000015 	tsteq	r0, r5, lsl r0
    37cc:	02181561 	andseq	r1, r8, #406847488	; 0x18400000
    37d0:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    37d4:	15000006 	strne	r0, [r0, #-6]
    37d8:	00001f7d 	andeq	r1, r0, sp, ror pc
    37dc:	45156101 	ldrmi	r6, [r5, #-257]	; 0xfffffeff
    37e0:	00000006 	andeq	r0, r0, r6
    37e4:	0019e714 	andseq	lr, r9, r4, lsl r7
    37e8:	14cb0100 	strbne	r0, [fp], #256	; 0x100
    37ec:	00000218 	andeq	r0, r0, r8, lsl r2
    37f0:	00069f01 	andeq	r9, r6, r1, lsl #30
    37f4:	1f7d1500 	svcne	0x007d1500
    37f8:	cb010000 	blgt	43800 <_Min_Stack_Size+0x43400>
    37fc:	00064514 	andeq	r4, r6, r4, lsl r5
    3800:	2c181500 	cfldr32cs	mvfx1, [r8], {-0}
    3804:	cb010000 	blgt	4380c <_Min_Stack_Size+0x4340c>
    3808:	0000b814 	andeq	fp, r0, r4, lsl r8
    380c:	1c9a1500 	cfldr32ne	mvfx1, [sl], {0}
    3810:	cb010000 	blgt	43818 <_Min_Stack_Size+0x43418>
    3814:	0000b814 	andeq	fp, r0, r4, lsl r8
    3818:	12140000 	andsne	r0, r4, #0
    381c:	0100001a 	tsteq	r0, sl, lsl r0
    3820:	02181318 	andseq	r1, r8, #24, 6	; 0x60000000
    3824:	07010000 	streq	r0, [r1, -r0]
    3828:	15000007 	strne	r0, [r0, #-7]
    382c:	00001f7d 	andeq	r1, r0, sp, ror pc
    3830:	45131801 	ldrmi	r1, [r3, #-2049]	; 0xfffff7ff
    3834:	15000006 	strne	r0, [r0, #-6]
    3838:	00001d4d 	andeq	r1, r0, sp, asr #26
    383c:	a2131801 	andsge	r1, r3, #65536	; 0x10000
    3840:	15000000 	strne	r0, [r0, #-0]
    3844:	000021a4 	andeq	r2, r0, r4, lsr #3
    3848:	a2131801 	andsge	r1, r3, #65536	; 0x10000
    384c:	15000000 	strne	r0, [r0, #-0]
    3850:	00001834 	andeq	r1, r0, r4, lsr r8
    3854:	a2131801 	andsge	r1, r3, #65536	; 0x10000
    3858:	15000000 	strne	r0, [r0, #-0]
    385c:	00002c18 	andeq	r2, r0, r8, lsl ip
    3860:	b8131801 	ldmdalt	r3, {r0, fp, ip}
    3864:	15000000 	strne	r0, [r0, #-0]
    3868:	00001c9a 	muleq	r0, sl, ip
    386c:	b8131801 	ldmdalt	r3, {r0, fp, ip}
    3870:	16000000 	strne	r0, [r0], -r0
    3874:	0001b517 	andeq	fp, r1, r7, lsl r5
    3878:	13340100 	teqne	r4, #0, 2
    387c:	000000ca 	andeq	r0, r0, sl, asr #1
    3880:	0c140000 	ldceq	0, cr0, [r4], {-0}
    3884:	0100001d 	tsteq	r0, sp, lsl r0
    3888:	02181372 	andseq	r1, r8, #-939524095	; 0xc8000001
    388c:	6f010000 	svcvs	0x00010000
    3890:	15000007 	strne	r0, [r0, #-7]
    3894:	00001f7d 	andeq	r1, r0, sp, ror pc
    3898:	45137201 	ldrmi	r7, [r3, #-513]	; 0xfffffdff
    389c:	15000006 	strne	r0, [r0, #-6]
    38a0:	00001d4d 	andeq	r1, r0, sp, asr #26
    38a4:	a2137201 	andsge	r7, r3, #268435456	; 0x10000000
    38a8:	15000000 	strne	r0, [r0, #-0]
    38ac:	000021a4 	andeq	r2, r0, r4, lsr #3
    38b0:	a2137201 	andsge	r7, r3, #268435456	; 0x10000000
    38b4:	15000000 	strne	r0, [r0, #-0]
    38b8:	00001834 	andeq	r1, r0, r4, lsr r8
    38bc:	a2137201 	andsge	r7, r3, #268435456	; 0x10000000
    38c0:	15000000 	strne	r0, [r0, #-0]
    38c4:	00002c18 	andeq	r2, r0, r8, lsl ip
    38c8:	b8137201 	ldmdalt	r3, {r0, r9, ip, sp, lr}
    38cc:	15000000 	strne	r0, [r0, #-0]
    38d0:	00001c9a 	muleq	r0, sl, ip
    38d4:	b8137201 	ldmdalt	r3, {r0, r9, ip, sp, lr}
    38d8:	16000000 	strne	r0, [r0], -r0
    38dc:	0001b517 	andeq	fp, r1, r7, lsl r5
    38e0:	13910100 	orrsne	r0, r1, #0, 2
    38e4:	000000ca 	andeq	r0, r0, sl, asr #1
    38e8:	41140000 	tstmi	r4, r0
    38ec:	01000020 	tsteq	r0, r0, lsr #32
    38f0:	021814f0 	andseq	r1, r8, #240, 8	; 0xf0000000
    38f4:	a5010000 	strge	r0, [r1, #-0]
    38f8:	15000007 	strne	r0, [r0, #-7]
    38fc:	00001f7d 	andeq	r1, r0, sp, ror pc
    3900:	4514f001 	ldrmi	pc, [r4, #-1]
    3904:	15000006 	strne	r0, [r0, #-6]
    3908:	00002c18 	andeq	r2, r0, r8, lsl ip
    390c:	b814f001 	ldmdalt	r4, {r0, ip, sp, lr, pc}
    3910:	15000000 	strne	r0, [r0, #-0]
    3914:	00001c9a 	muleq	r0, sl, ip
    3918:	b814f001 	ldmdalt	r4, {r0, ip, sp, lr, pc}
    391c:	00000000 	andeq	r0, r0, r0
    3920:	0016ef14 	andseq	lr, r6, r4, lsl pc
    3924:	15370100 	ldrne	r0, [r7, #-256]!	; 0xffffff00
    3928:	00000218 	andeq	r0, r0, r8, lsl r2
    392c:	0007db01 	andeq	sp, r7, r1, lsl #22
    3930:	1f7d1500 	svcne	0x007d1500
    3934:	37010000 	strcc	r0, [r1, -r0]
    3938:	00064515 	andeq	r4, r6, r5, lsl r5
    393c:	2c181500 	cfldr32cs	mvfx1, [r8], {-0}
    3940:	37010000 	strcc	r0, [r1, -r0]
    3944:	0000b815 	andeq	fp, r0, r5, lsl r8
    3948:	1c9a1500 	cfldr32ne	mvfx1, [sl], {0}
    394c:	37010000 	strcc	r0, [r1, -r0]
    3950:	0000b815 	andeq	fp, r0, r5, lsl r8
    3954:	20140000 	andscs	r0, r4, r0
    3958:	01000017 	tsteq	r0, r7, lsl r0
    395c:	02181028 	andseq	r1, r8, #40	; 0x28
    3960:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    3964:	15000007 	strne	r0, [r0, #-7]
    3968:	00001f7d 	andeq	r1, r0, sp, ror pc
    396c:	45102801 	ldrmi	r2, [r0, #-2049]	; 0xfffff7ff
    3970:	00000006 	andeq	r0, r0, r6
    3974:	001ad114 	andseq	sp, sl, r4, lsl r1
    3978:	10ea0100 	rscne	r0, sl, r0, lsl #2
    397c:	00000218 	andeq	r0, r0, r8, lsl r2
    3980:	00081701 	andeq	r1, r8, r1, lsl #14
    3984:	1f7d1500 	svcne	0x007d1500
    3988:	ea010000 	b	43990 <_Min_Stack_Size+0x43590>
    398c:	00064510 	andeq	r4, r6, r0, lsl r5
    3990:	30140000 	andscc	r0, r4, r0
    3994:	01000016 	tsteq	r0, r6, lsl r0
    3998:	0218111c 	andseq	r1, r8, #28, 2
    399c:	35010000 	strcc	r0, [r1, #-0]
    39a0:	15000008 	strne	r0, [r0, #-8]
    39a4:	00001f7d 	andeq	r1, r0, sp, ror pc
    39a8:	45111c01 	ldrmi	r1, [r1, #-3073]	; 0xfffff3ff
    39ac:	00000006 	andeq	r0, r0, r6
    39b0:	00168814 	andseq	r8, r6, r4, lsl r8
    39b4:	149b0100 	ldrne	r0, [fp], #256	; 0x100
    39b8:	00000218 	andeq	r0, r0, r8, lsl r2
    39bc:	00087701 	andeq	r7, r8, r1, lsl #14
    39c0:	1f7d1500 	svcne	0x007d1500
    39c4:	9b010000 	blls	439cc <_Min_Stack_Size+0x435cc>
    39c8:	00064514 	andeq	r4, r6, r4, lsl r5
    39cc:	182f1500 	stmdane	pc!, {r8, sl, ip}	; <UNPREDICTABLE>
    39d0:	9b010000 	blls	439d8 <_Min_Stack_Size+0x435d8>
    39d4:	0000b814 	andeq	fp, r0, r4, lsl r8
    39d8:	2c181500 	cfldr32cs	mvfx1, [r8], {-0}
    39dc:	9b010000 	blls	439e4 <_Min_Stack_Size+0x435e4>
    39e0:	0000b814 	andeq	fp, r0, r4, lsl r8
    39e4:	1c9a1500 	cfldr32ne	mvfx1, [sl], {0}
    39e8:	9b010000 	blls	439f0 <_Min_Stack_Size+0x435f0>
    39ec:	0000b814 	andeq	fp, r0, r4, lsl r8
    39f0:	35180000 	ldrcc	r0, [r8, #-0]
    39f4:	90000008 	andls	r0, r0, r8
    39f8:	7408000c 	strvc	r0, [r8], #-12
    39fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3a00:	0008b89c 	muleq	r8, ip, r8
    3a04:	08461900 	stmdaeq	r6, {r8, fp, ip}^
    3a08:	0bf40000 	bleq	ffd03a10 <_estack+0xdfcd3a10>
    3a0c:	5e190000 	cdppl	0, 1, cr0, cr9, cr0, {0}
    3a10:	12000008 	andne	r0, r0, #8
    3a14:	1900000c 	stmdbne	r0, {r2, r3}
    3a18:	0000086a 	andeq	r0, r0, sl, ror #16
    3a1c:	00000c3e 	andeq	r0, r0, lr, lsr ip
    3a20:	0008521a 	andeq	r5, r8, sl, lsl r2
    3a24:	01000200 	mrseq	r0, R8_usr
    3a28:	0cc81b00 	vstmiaeq	r8, {d17-d16}
    3a2c:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    3a30:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3a34:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    3a38:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
    3a3c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    3a40:	0ad69c01 	beq	ff5aaa4c <_estack+0xdf57aa4c>
    3a44:	b0190000 	andslt	r0, r9, r0
    3a48:	6a000006 	bvs	3a68 <_Min_Stack_Size+0x3668>
    3a4c:	1900000c 	stmdbne	r0, {r2, r3}
    3a50:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
    3a54:	00000c88 	andeq	r0, r0, r8, lsl #25
    3a58:	0006c819 	andeq	ip, r6, r9, lsl r8
    3a5c:	000ca900 	andeq	sl, ip, r0, lsl #18
    3a60:	06d41900 	ldrbeq	r1, [r4], r0, lsl #18
    3a64:	0cca0000 	stcleq	0, cr0, [sl], {0}
    3a68:	e0190000 	ands	r0, r9, r0
    3a6c:	eb000006 	bl	3a8c <_Min_Stack_Size+0x368c>
    3a70:	1900000c 	stmdbne	r0, {r2, r3}
    3a74:	000006ec 	andeq	r0, r0, ip, ror #13
    3a78:	00000d0b 	andeq	r0, r0, fp, lsl #26
    3a7c:	0005f71c 	andeq	pc, r5, ip, lsl r7	; <UNPREDICTABLE>
    3a80:	000d2200 	andeq	r2, sp, r0, lsl #4
    3a84:	00038008 	andeq	r8, r3, r8
    3a88:	131e0100 	tstne	lr, #0, 2
    3a8c:	0000097e 	andeq	r0, r0, lr, ror r9
    3a90:	0006141a 	andeq	r1, r6, sl, lsl r4
    3a94:	01000100 	mrseq	r0, (UNDEF: 16)
    3a98:	06201d00 	strteq	r1, [r0], -r0, lsl #26
    3a9c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3aa0:	00000638 	andeq	r0, r0, r8, lsr r6
    3aa4:	00000d2b 	andeq	r0, r0, fp, lsr #26
    3aa8:	00062c19 	andeq	r2, r6, r9, lsl ip
    3aac:	000d6300 	andeq	r6, sp, r0, lsl #6
    3ab0:	06081e00 	streq	r1, [r8], -r0, lsl #28
    3ab4:	55010000 	strpl	r0, [r1, #-0]
    3ab8:	0003a81f 	andeq	sl, r3, pc, lsl r8
    3abc:	00097400 	andeq	r7, r9, r0, lsl #8
    3ac0:	06141900 	ldreq	r1, [r4], -r0, lsl #18
    3ac4:	0dc60000 	stcleq	0, cr0, [r6]
    3ac8:	20190000 	andscs	r0, r9, r0
    3acc:	de000006 	cdple	0, 0, cr0, cr0, cr6, {0}
    3ad0:	1900000d 	stmdbne	r0, {r0, r2, r3}
    3ad4:	0000062c 	andeq	r0, r0, ip, lsr #12
    3ad8:	00000df2 	strdeq	r0, [r0], -r2
    3adc:	00063819 	andeq	r3, r6, r9, lsl r8
    3ae0:	000e0500 	andeq	r0, lr, r0, lsl #10
    3ae4:	06081900 	streq	r1, [r8], -r0, lsl #18
    3ae8:	0e190000 	cdpeq	0, 1, cr0, cr9, cr0, {0}
    3aec:	1b000000 	blne	3af4 <_Min_Stack_Size+0x36f4>
    3af0:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
    3af4:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    3af8:	08351c00 	ldmdaeq	r5!, {sl, fp, ip}
    3afc:	0d320000 	ldceq	0, cr0, [r2, #-0]
    3b00:	03c00800 	biceq	r0, r0, #0, 16
    3b04:	27010000 	strcs	r0, [r1, -r0]
    3b08:	0009bc13 	andeq	fp, r9, r3, lsl ip
    3b0c:	08522000 	ldmdaeq	r2, {sp}^
    3b10:	6a190000 	bvs	643b18 <_Min_Stack_Size+0x643718>
    3b14:	2c000008 	stccs	0, cr0, [r0], {8}
    3b18:	1900000e 	stmdbne	r0, {r1, r2, r3}
    3b1c:	0000085e 	andeq	r0, r0, lr, asr r8
    3b20:	00000e58 	andeq	r0, r0, r8, asr lr
    3b24:	00084619 	andeq	r4, r8, r9, lsl r6
    3b28:	000eb000 	andeq	fp, lr, r0
    3b2c:	0d481b00 	vstreq	d17, [r8, #-0]
    3b30:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    3b34:	21000000 	mrscs	r0, (UNDEF: 0)
    3b38:	000003e0 	andeq	r0, r0, r0, ror #7
    3b3c:	0006bc19 	andeq	fp, r6, r9, lsl ip
    3b40:	000ed900 	andeq	sp, lr, r0, lsl #18
    3b44:	06ec1900 	strbteq	r1, [ip], r0, lsl #18
    3b48:	0f020000 	svceq	0x00020000
    3b4c:	e0190000 	ands	r0, r9, r0
    3b50:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    3b54:	1900000f 	stmdbne	r0, {r0, r1, r2, r3}
    3b58:	000006d4 	ldrdeq	r0, [r0], -r4
    3b5c:	00000f7a 	andeq	r0, r0, sl, ror pc
    3b60:	0006c819 	andeq	ip, r6, r9, lsl r8
    3b64:	000fae00 	andeq	sl, pc, r0, lsl #28
    3b68:	06b01900 	ldrteq	r1, [r0], r0, lsl #18
    3b6c:	0fe20000 	svceq	0x00e20000
    3b70:	62220000 	eorvs	r0, r2, #0
    3b74:	1208000d 	andne	r0, r8, #13
    3b78:	0d000000 	stceq	0, cr0, [r0, #-0]
    3b7c:	2300000a 	movwcs	r0, #10
    3b80:	000006f9 	strdeq	r0, [r0], -r9
    3b84:	00649102 	rsbeq	r9, r4, r2, lsl #2
    3b88:	0006691c 	andeq	r6, r6, ip, lsl r9
    3b8c:	000d7400 	andeq	r7, sp, r0, lsl #8
    3b90:	00040008 	andeq	r0, r4, r8
    3b94:	13370100 	teqne	r7, #0, 2
    3b98:	00000a60 	andeq	r0, r0, r0, ror #20
    3b9c:	00069219 	andeq	r9, r6, r9, lsl r2
    3ba0:	00100b00 	andseq	r0, r0, r0, lsl #22
    3ba4:	06861900 	streq	r1, [r6], r0, lsl #18
    3ba8:	10370000 	eorsne	r0, r7, r0
    3bac:	7a190000 	bvc	643bb4 <_Min_Stack_Size+0x6437b4>
    3bb0:	83000006 	movwhi	r0, #6
    3bb4:	1c000010 	stcne	0, cr0, [r0], {16}
    3bb8:	0000064b 	andeq	r0, r0, fp, asr #12
    3bbc:	08000d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp}
    3bc0:	00000420 	andeq	r0, r0, r0, lsr #8
    3bc4:	5614d001 	ldrpl	sp, [r4], -r1
    3bc8:	2000000a 	andcs	r0, r0, sl
    3bcc:	0000065c 	andeq	r0, r0, ip, asr r6
    3bd0:	0e561b00 	vnmlseq.f64	d17, d6, d0
    3bd4:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    3bd8:	24000000 	strcs	r0, [r0], #-0
    3bdc:	00000669 	andeq	r0, r0, r9, ror #12
    3be0:	08000e1e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, fp}
    3be4:	00000440 	andeq	r0, r0, r0, asr #8
    3be8:	19135201 	ldmdbne	r3, {r0, r9, ip, lr}
    3bec:	00000692 	muleq	r0, r2, r6
    3bf0:	000010ac 	andeq	r1, r0, ip, lsr #1
    3bf4:	00068619 	andeq	r8, r6, r9, lsl r6
    3bf8:	0010d800 	andseq	sp, r0, r0, lsl #16
    3bfc:	067a1900 	ldrbteq	r1, [sl], -r0, lsl #18
    3c00:	110d0000 	mrsne	r0, (UNDEF: 13)
    3c04:	4b1c0000 	blmi	703c0c <_Min_Stack_Size+0x70380c>
    3c08:	24000006 	strcs	r0, [r0], #-6
    3c0c:	5808000e 	stmdapl	r8, {r1, r2, r3}
    3c10:	01000004 	tsteq	r0, r4
    3c14:	0aa514d0 	beq	fe948f5c <_estack+0xde918f5c>
    3c18:	5c200000 	stcpl	0, cr0, [r0], #-0
    3c1c:	00000006 	andeq	r0, r0, r6
    3c20:	000ea022 	andeq	sl, lr, r2, lsr #32
    3c24:	00001808 	andeq	r1, r0, r8, lsl #16
    3c28:	000aca00 	andeq	ip, sl, r0, lsl #20
    3c2c:	06861e00 	streq	r1, [r6], r0, lsl #28
    3c30:	54010000 	strpl	r0, [r1], #-0
    3c34:	00069219 	andeq	r9, r6, r9, lsl r2
    3c38:	00113600 	andseq	r3, r1, r0, lsl #12
    3c3c:	067a1e00 	ldrbteq	r1, [sl], -r0, lsl #28
    3c40:	55010000 	strpl	r0, [r1, #-0]
    3c44:	0e941b00 	vfnmseq.f64	d1, d4, d0
    3c48:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    3c4c:	00000000 	andeq	r0, r0, r0
    3c50:	07071800 	streq	r1, [r7, -r0, lsl #16]
    3c54:	0eb80000 	cdpeq	0, 11, cr0, cr8, cr0, {0}
    3c58:	02400800 	subeq	r0, r0, #0, 16
    3c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c60:	00000da7 	andeq	r0, r0, r7, lsr #27
    3c64:	00071819 	andeq	r1, r7, r9, lsl r8
    3c68:	00114a00 	andseq	r4, r1, r0, lsl #20
    3c6c:	07241900 	streq	r1, [r4, -r0, lsl #18]!
    3c70:	11680000 	cmnne	r8, r0
    3c74:	30190000 	andscc	r0, r9, r0
    3c78:	89000007 	stmdbhi	r0, {r0, r1, r2}
    3c7c:	19000011 	stmdbne	r0, {r0, r4}
    3c80:	0000073c 	andeq	r0, r0, ip, lsr r7
    3c84:	000011aa 	andeq	r1, r0, sl, lsr #3
    3c88:	00074819 	andeq	r4, r7, r9, lsl r8
    3c8c:	0011cb00 	andseq	ip, r1, r0, lsl #22
    3c90:	07541900 	ldrbeq	r1, [r4, -r0, lsl #18]
    3c94:	11eb0000 	mvnne	r0, r0
    3c98:	f71c0000 			; <UNDEFINED> instruction: 0xf71c0000
    3c9c:	e0000005 	and	r0, r0, r5
    3ca0:	7008000e 	andvc	r0, r8, lr
    3ca4:	01000004 	tsteq	r0, r4
    3ca8:	0b65137b 	bleq	1948a9c <_Min_Stack_Size+0x194869c>
    3cac:	141a0000 	ldrne	r0, [sl], #-0
    3cb0:	01000006 	tsteq	r0, r6
    3cb4:	1d000100 	stfnes	f0, [r0, #-0]
    3cb8:	00000620 	andeq	r0, r0, r0, lsr #12
    3cbc:	06381900 	ldrteq	r1, [r8], -r0, lsl #18
    3cc0:	120b0000 	andne	r0, fp, #0
    3cc4:	2c190000 	ldccs	0, cr0, [r9], {-0}
    3cc8:	43000006 	movwmi	r0, #6
    3ccc:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    3cd0:	00000608 	andeq	r0, r0, r8, lsl #12
    3cd4:	541b5501 	ldrpl	r5, [fp], #-1281	; 0xfffffaff
    3cd8:	9f08000f 	svcls	0x0008000f
    3cdc:	00000037 	andeq	r0, r0, r7, lsr r0
    3ce0:	00049021 	andeq	r9, r4, r1, lsr #32
    3ce4:	07541900 	ldrbeq	r1, [r4, -r0, lsl #18]
    3ce8:	12a60000 	adcne	r0, r6, #0
    3cec:	48190000 	ldmdami	r9, {}	; <UNPREDICTABLE>
    3cf0:	de000007 	cdple	0, 0, cr0, cr0, cr7, {0}
    3cf4:	19000012 	stmdbne	r0, {r1, r4}
    3cf8:	0000073c 	andeq	r0, r0, ip, lsr r7
    3cfc:	00001336 	andeq	r1, r0, r6, lsr r3
    3d00:	00073019 	andeq	r3, r7, r9, lsl r0
    3d04:	00138000 	andseq	r8, r3, r0
    3d08:	07241900 	streq	r1, [r4, -r0, lsl #18]!
    3d0c:	13ca0000 	bicne	r0, sl, #0
    3d10:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
    3d14:	dd000007 	stcle	0, cr0, [r0, #-28]	; 0xffffffe4
    3d18:	1c000013 	stcne	0, cr0, [r0], {19}
    3d1c:	00000835 	andeq	r0, r0, r5, lsr r8
    3d20:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
    3d24:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3d28:	de138401 	cfmulsle	mvf8, mvf3, mvf1
    3d2c:	2000000b 	andcs	r0, r0, fp
    3d30:	00000852 	andeq	r0, r0, r2, asr r8
    3d34:	00086a19 	andeq	r6, r8, r9, lsl sl
    3d38:	00141100 	andseq	r1, r4, r0, lsl #2
    3d3c:	085e1900 	ldmdaeq	lr, {r8, fp, ip}^
    3d40:	14490000 	strbne	r0, [r9], #-0
    3d44:	46190000 	ldrmi	r0, [r9], -r0
    3d48:	a1000008 	tstge	r0, r8
    3d4c:	1b000014 	blne	3da4 <_Min_Stack_Size+0x39a4>
    3d50:	08000f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp}
    3d54:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    3d58:	0f042200 	svceq	0x00042200
    3d5c:	00120800 	andseq	r0, r2, r0, lsl #16
    3d60:	0bf40000 	bleq	ffd03d68 <_estack+0xdfcd3d68>
    3d64:	61230000 			; <UNDEFINED> instruction: 0x61230000
    3d68:	02000007 	andeq	r0, r0, #7
    3d6c:	1c006491 	cfstrsne	mvf6, [r0], {145}	; 0x91
    3d70:	00000669 	andeq	r0, r0, r9, ror #12
    3d74:	08000f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp}
    3d78:	000004d8 	ldrdeq	r0, [r0], -r8
    3d7c:	47139401 	ldrmi	r9, [r3, -r1, lsl #8]
    3d80:	1900000c 	stmdbne	r0, {r2, r3}
    3d84:	00000692 	muleq	r0, r2, r6
    3d88:	000014d5 	ldrdeq	r1, [r0], -r5
    3d8c:	00068619 	andeq	r8, r6, r9, lsl r6
    3d90:	00151900 	andseq	r1, r5, r0, lsl #18
    3d94:	067a1900 	ldrbteq	r1, [sl], -r0, lsl #18
    3d98:	15700000 	ldrbne	r0, [r0, #-0]!
    3d9c:	4b1c0000 	blmi	703da4 <_Min_Stack_Size+0x7039a4>
    3da0:	1c000006 	stcne	0, cr0, [r0], {6}
    3da4:	f808000f 			; <UNDEFINED> instruction: 0xf808000f
    3da8:	01000004 	tsteq	r0, r4
    3dac:	0c3d14d0 	cfldrseq	mvf1, [sp], #-832	; 0xfffffcc0
    3db0:	5c200000 	stcpl	0, cr0, [r0], #-0
    3db4:	00000006 	andeq	r0, r0, r6
    3db8:	0010221b 	andseq	r2, r0, fp, lsl r2
    3dbc:	00379f08 	eorseq	r9, r7, r8, lsl #30
    3dc0:	f71c0000 			; <UNDEFINED> instruction: 0xf71c0000
    3dc4:	b0000005 	andlt	r0, r0, r5
    3dc8:	1008000f 	andne	r0, r8, pc
    3dcc:	01000005 	tsteq	r0, r5
    3dd0:	0cc913d4 	stcleq	3, cr1, [r9], {212}	; 0xd4
    3dd4:	14190000 	ldrne	r0, [r9], #-0
    3dd8:	af000006 	svcge	0x00000006
    3ddc:	19000015 	stmdbne	r0, {r0, r2, r4}
    3de0:	00000620 	andeq	r0, r0, r0, lsr #12
    3de4:	000015c7 	andeq	r1, r0, r7, asr #11
    3de8:	00063819 	andeq	r3, r6, r9, lsl r8
    3dec:	0015db00 	andseq	sp, r5, r0, lsl #22
    3df0:	062c1900 	strteq	r1, [ip], -r0, lsl #18
    3df4:	15ef0000 	strbne	r0, [pc, #0]!	; 3dfc <_Min_Stack_Size+0x39fc>
    3df8:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    3dfc:	02000006 	andeq	r0, r0, #6
    3e00:	1f000016 	svcne	0x00000016
    3e04:	00000538 	andeq	r0, r0, r8, lsr r5
    3e08:	00000cbf 			; <UNDEFINED> instruction: 0x00000cbf
    3e0c:	00061419 	andeq	r1, r6, r9, lsl r4
    3e10:	00161500 	andseq	r1, r6, r0, lsl #10
    3e14:	06201900 	strteq	r1, [r0], -r0, lsl #18
    3e18:	162d0000 	strtne	r0, [sp], -r0
    3e1c:	2c190000 	ldccs	0, cr0, [r9], {-0}
    3e20:	41000006 	tstmi	r0, r6
    3e24:	19000016 	stmdbne	r0, {r1, r2, r4}
    3e28:	00000638 	andeq	r0, r0, r8, lsr r6
    3e2c:	00001654 	andeq	r1, r0, r4, asr r6
    3e30:	00060819 	andeq	r0, r6, r9, lsl r8
    3e34:	00166800 	andseq	r6, r6, r0, lsl #16
    3e38:	a21b0000 	andsge	r0, fp, #0
    3e3c:	9f080010 	svcls	0x00080010
    3e40:	00000037 	andeq	r0, r0, r7, lsr r0
    3e44:	0006691c 	andeq	r6, r6, ip, lsl r9
    3e48:	000fe600 	andeq	lr, pc, r0, lsl #12
    3e4c:	00055008 	andeq	r5, r5, r8
    3e50:	13c20100 	bicne	r0, r2, #0, 2
    3e54:	00000d35 	andeq	r0, r0, r5, lsr sp
    3e58:	00069220 	andeq	r9, r6, r0, lsr #4
    3e5c:	06862000 	streq	r2, [r6], r0
    3e60:	7a200000 	bvc	803e68 <_Min_Stack_Size+0x803a68>
    3e64:	1c000006 	stcne	0, cr0, [r0], {6}
    3e68:	0000064b 	andeq	r0, r0, fp, asr #12
    3e6c:	08000fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp}
    3e70:	00000578 	andeq	r0, r0, r8, ror r5
    3e74:	0614d001 	ldreq	sp, [r4], -r1
    3e78:	2000000d 	andcs	r0, r0, sp
    3e7c:	0000065c 	andeq	r0, r0, ip, asr r6
    3e80:	10e02200 	rscne	r2, r0, r0, lsl #4
    3e84:	00180800 	andseq	r0, r8, r0, lsl #16
    3e88:	0d2b0000 	stceq	0, cr0, [fp, #-0]
    3e8c:	861e0000 	ldrhi	r0, [lr], -r0
    3e90:	01000006 	tsteq	r0, r6
    3e94:	06921954 			; <UNDEFINED> instruction: 0x06921954
    3e98:	167b0000 	ldrbtne	r0, [fp], -r0
    3e9c:	7a1e0000 	bvc	783ea4 <_Min_Stack_Size+0x783aa4>
    3ea0:	01000006 	tsteq	r0, r6
    3ea4:	581b0055 	ldmdapl	fp, {r0, r2, r4, r6}
    3ea8:	9f080010 	svcls	0x00080010
    3eac:	00000037 	andeq	r0, r0, r7, lsr r0
    3eb0:	0006691c 	andeq	r6, r6, ip, lsl r9
    3eb4:	00103600 	andseq	r3, r0, r0, lsl #12
    3eb8:	00059808 	andeq	r9, r5, r8, lsl #16
    3ebc:	13af0100 			; <UNDEFINED> instruction: 0x13af0100
    3ec0:	00000d88 	andeq	r0, r0, r8, lsl #27
    3ec4:	00069219 	andeq	r9, r6, r9, lsl r2
    3ec8:	00168f00 	andseq	r8, r6, r0, lsl #30
    3ecc:	06861900 	streq	r1, [r6], r0, lsl #18
    3ed0:	16bb0000 	ldrtne	r0, [fp], r0
    3ed4:	7a190000 	bvc	643edc <_Min_Stack_Size+0x643adc>
    3ed8:	e4000006 	str	r0, [r0], #-6
    3edc:	1c000016 	stcne	0, cr0, [r0], {22}
    3ee0:	0000064b 	andeq	r0, r0, fp, asr #12
    3ee4:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
    3ee8:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    3eec:	7e14d001 	cdpvc	0, 1, cr13, cr4, cr1, {0}
    3ef0:	2000000d 	andcs	r0, r0, sp
    3ef4:	0000065c 	andeq	r0, r0, ip, asr r6
    3ef8:	10d01b00 	sbcsne	r1, r0, r0, lsl #22
    3efc:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    3f00:	25000000 	strcs	r0, [r0, #-0]
    3f04:	0800108e 	stmdaeq	r0, {r1, r2, r3, r7, ip}
    3f08:	00000877 	andeq	r0, r0, r7, ror r8
    3f0c:	03520126 	cmpeq	r2, #-2147483639	; 0x80000009
    3f10:	26060491 			; <UNDEFINED> instruction: 0x26060491
    3f14:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    3f18:	50012600 	andpl	r2, r1, r0, lsl #12
    3f1c:	00007502 	andeq	r7, r0, r2, lsl #10
    3f20:	90270000 	eorls	r0, r7, r0
    3f24:	01000017 	tsteq	r0, r7, lsl r0
    3f28:	10f801da 	ldrsbtne	r0, [r8], #26
    3f2c:	00020800 	andeq	r0, r2, r0, lsl #16
    3f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f34:	00000dcc 	andeq	r0, r0, ip, asr #27
    3f38:	001f7d28 	andseq	r7, pc, r8, lsr #26
    3f3c:	01da0100 	bicseq	r0, sl, r0, lsl #2
    3f40:	00000645 	andeq	r0, r0, r5, asr #12
    3f44:	29005001 	stmdbcs	r0, {r0, ip, lr}
    3f48:	000017a0 	andeq	r1, r0, r0, lsr #15
    3f4c:	18016401 	stmdane	r1, {r0, sl, sp, lr}
    3f50:	fc000002 	stc2	0, cr0, [r0], {2}
    3f54:	f0080010 			; <UNDEFINED> instruction: 0xf0080010
    3f58:	01000000 	mrseq	r0, (UNDEF: 0)
    3f5c:	000e309c 	muleq	lr, ip, r0
    3f60:	1f7d2a00 	svcne	0x007d2a00
    3f64:	64010000 	strvs	r0, [r1], #-0
    3f68:	00064501 	andeq	r4, r6, r1, lsl #10
    3f6c:	00170d00 	andseq	r0, r7, r0, lsl #26
    3f70:	17ad2b00 	strne	r2, [sp, r0, lsl #22]!
    3f74:	66010000 	strvs	r0, [r1], -r0
    3f78:	0000b801 	andeq	fp, r0, r1, lsl #16
    3f7c:	00175a00 	andseq	r5, r7, r0, lsl #20
    3f80:	1c792b00 	ldclne	11, cr2, [r9], #-0
    3f84:	67010000 	strvs	r0, [r1, -r0]
    3f88:	0000b801 	andeq	fp, r0, r1, lsl #16
    3f8c:	00180500 	andseq	r0, r8, r0, lsl #10
    3f90:	11261b00 			; <UNDEFINED> instruction: 0x11261b00
    3f94:	37aa0800 	strcc	r0, [sl, r0, lsl #16]!
    3f98:	b8250000 	stmdalt	r5!, {}	; <UNPREDICTABLE>
    3f9c:	a7080011 	smladge	r8, r1, r0, r0
    3fa0:	2600000d 	strcs	r0, [r0], -sp
    3fa4:	74025001 	strvc	r5, [r2], #-1
    3fa8:	27000000 	strcs	r0, [r0, -r0]
    3fac:	00001f52 	andeq	r1, r0, r2, asr pc
    3fb0:	ec01e901 	stc	9, cr14, [r1], {1}
    3fb4:	02080011 	andeq	r0, r8, #17
    3fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    3fbc:	000e559c 	muleq	lr, ip, r5
    3fc0:	1f7d2800 	svcne	0x007d2800
    3fc4:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    3fc8:	00064501 	andeq	r4, r6, r1, lsl #10
    3fcc:	00500100 	subseq	r0, r0, r0, lsl #2
    3fd0:	00184829 	andseq	r4, r8, r9, lsr #16
    3fd4:	01b60100 			; <UNDEFINED> instruction: 0x01b60100
    3fd8:	00000218 	andeq	r0, r0, r8, lsl r2
    3fdc:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
    3fe0:	00000034 	andeq	r0, r0, r4, lsr r0
    3fe4:	0e909c01 	cdpeq	12, 9, cr9, cr0, cr1, {0}
    3fe8:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    3fec:	0100001f 	tsteq	r0, pc, lsl r0
    3ff0:	064501b6 			; <UNDEFINED> instruction: 0x064501b6
    3ff4:	18520000 	ldmdane	r2, {}^	; <UNPREDICTABLE>
    3ff8:	0a250000 	beq	944000 <_Min_Stack_Size+0x943c00>
    3ffc:	30080012 	andcc	r0, r8, r2, lsl r0
    4000:	2600000e 	strcs	r0, [r0], -lr
    4004:	74025001 	strvc	r5, [r2], #-1
    4008:	14000000 	strne	r0, [r0], #-0
    400c:	00001aba 			; <UNDEFINED> instruction: 0x00001aba
    4010:	18126001 	ldmdane	r2, {r0, sp, lr}
    4014:	01000002 	tsteq	r0, r2
    4018:	00000ede 	ldrdeq	r0, [r0], -lr
    401c:	001f7d15 	andseq	r7, pc, r5, lsl sp	; <UNPREDICTABLE>
    4020:	12600100 	rsbne	r0, r0, #0, 2
    4024:	00000645 	andeq	r0, r0, r5, asr #12
    4028:	001d4d15 	andseq	r4, sp, r5, lsl sp
    402c:	12600100 	rsbne	r0, r0, #0, 2
    4030:	000000a2 	andeq	r0, r0, r2, lsr #1
    4034:	002c1815 	eoreq	r1, ip, r5, lsl r8
    4038:	12600100 	rsbne	r0, r0, #0, 2
    403c:	000000b8 	strheq	r0, [r0], -r8
    4040:	001c9a15 	andseq	r9, ip, r5, lsl sl
    4044:	12600100 	rsbne	r0, r0, #0, 2
    4048:	000000b8 	strheq	r0, [r0], -r8
    404c:	001ba017 	andseq	sl, fp, r7, lsl r0
    4050:	12630100 	rsbne	r0, r3, #0, 2
    4054:	000000b8 	strheq	r0, [r0], -r8
    4058:	157a2900 	ldrbne	r2, [sl, #-2304]!	; 0xfffff700
    405c:	41010000 	mrsmi	r0, (UNDEF: 1)
    4060:	00021802 	andeq	r1, r2, r2, lsl #16
    4064:	00122400 	andseq	r2, r2, r0, lsl #8
    4068:	00032008 	andeq	r2, r3, r8
    406c:	c29c0100 	addsgt	r0, ip, #0, 2
    4070:	2a000011 	bcs	40bc <_Min_Stack_Size+0x3cbc>
    4074:	00001f7d 	andeq	r1, r0, sp, ror pc
    4078:	45024101 	strmi	r4, [r2, #-257]	; 0xfffffeff
    407c:	89000006 	stmdbhi	r0, {r1, r2}
    4080:	2a000018 	bcs	40e8 <_Min_Stack_Size+0x3ce8>
    4084:	00001d4d 	andeq	r1, r0, sp, asr #26
    4088:	a2024101 	andge	r4, r2, #1073741824	; 0x40000000
    408c:	a7000000 	strge	r0, [r0, -r0]
    4090:	2a000018 	bcs	40f8 <_Min_Stack_Size+0x3cf8>
    4094:	000021d7 	ldrdeq	r2, [r0], -r7
    4098:	d6024101 	strle	r4, [r2], -r1, lsl #2
    409c:	c8000005 	stmdagt	r0, {r0, r2}
    40a0:	2a000018 	bcs	4108 <_Min_Stack_Size+0x3d08>
    40a4:	00002d42 	andeq	r2, r0, r2, asr #26
    40a8:	a2024101 	andge	r4, r2, #1073741824	; 0x40000000
    40ac:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    40b0:	2a000019 	bcs	411c <_Min_Stack_Size+0x3d1c>
    40b4:	00002c18 	andeq	r2, r0, r8, lsl ip
    40b8:	b8024101 	stmdalt	r2, {r0, r8, lr}
    40bc:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    40c0:	2b000019 	blcs	412c <_Min_Stack_Size+0x3d2c>
    40c4:	00000eec 	andeq	r0, r0, ip, ror #29
    40c8:	b8024301 	stmdalt	r2, {r0, r8, r9, lr}
    40cc:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    40d0:	1c000019 	stcne	0, cr0, [r0], {25}
    40d4:	000005f7 	strdeq	r0, [r0], -r7
    40d8:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
    40dc:	000005c8 	andeq	r0, r0, r8, asr #11
    40e0:	c6024b01 	strgt	r4, [r2], -r1, lsl #22
    40e4:	2000000f 	andcs	r0, r0, pc
    40e8:	00000614 	andeq	r0, r0, r4, lsl r6
    40ec:	00062020 	andeq	r2, r6, r0, lsr #32
    40f0:	062c2000 	strteq	r2, [ip], -r0
    40f4:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    40f8:	20000006 	andcs	r0, r0, r6
    40fc:	00000608 	andeq	r0, r0, r8, lsl #12
    4100:	0005f01f 	andeq	pc, r5, pc, lsl r0	; <UNPREDICTABLE>
    4104:	000fbc00 	andeq	fp, pc, r0, lsl #24
    4108:	06141900 	ldreq	r1, [r4], -r0, lsl #18
    410c:	19c30000 	stmibne	r3, {}^	; <UNPREDICTABLE>
    4110:	20190000 	andscs	r0, r9, r0
    4114:	db000006 	blle	4134 <_Min_Stack_Size+0x3d34>
    4118:	19000019 	stmdbne	r0, {r0, r3, r4}
    411c:	0000062c 	andeq	r0, r0, ip, lsr #12
    4120:	000019ef 	andeq	r1, r0, pc, ror #19
    4124:	00063819 	andeq	r3, r6, r9, lsl r8
    4128:	001a0300 	andseq	r0, sl, r0, lsl #6
    412c:	06081900 	streq	r1, [r8], -r0, lsl #18
    4130:	1a160000 	bne	584138 <_Min_Stack_Size+0x583d38>
    4134:	1b000000 	blne	413c <_Min_Stack_Size+0x3d3c>
    4138:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
    413c:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    4140:	0e901c00 	cdpeq	12, 9, cr1, cr0, cr0, {0}
    4144:	12a20000 	adcne	r0, r2, #0
    4148:	06080800 	streq	r0, [r8], -r0, lsl #16
    414c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    4150:	0010e802 	andseq	lr, r0, r2, lsl #16
    4154:	0ec51900 	cdpeq	9, 12, cr1, cr5, cr0, {0}
    4158:	1a290000 	bne	a44160 <_Min_Stack_Size+0xa43d60>
    415c:	b9190000 	ldmdblt	r9, {}	; <UNPREDICTABLE>
    4160:	4700000e 	strmi	r0, [r0, -lr]
    4164:	1900001a 	stmdbne	r0, {r1, r3, r4}
    4168:	00000ead 	andeq	r0, r0, sp, lsr #29
    416c:	00001a67 	andeq	r1, r0, r7, ror #20
    4170:	000ea119 	andeq	sl, lr, r9, lsl r1
    4174:	001a8500 	andseq	r8, sl, r0, lsl #10
    4178:	06082100 	streq	r2, [r8], -r0, lsl #2
    417c:	d12c0000 			; <UNDEFINED> instruction: 0xd12c0000
    4180:	a300000e 	movwge	r0, #14
    4184:	1c00001a 	stcne	0, cr0, [r0], {26}
    4188:	000005f7 	strdeq	r0, [r0], -r7
    418c:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
    4190:	00000650 	andeq	r0, r0, r0, asr r6
    4194:	7a127201 	bvc	4a09a0 <_Min_Stack_Size+0x4a05a0>
    4198:	20000010 	andcs	r0, r0, r0, lsl r0
    419c:	00000614 	andeq	r0, r0, r4, lsl r6
    41a0:	00062020 	andeq	r2, r6, r0, lsr #32
    41a4:	06382000 	ldrteq	r2, [r8], -r0
    41a8:	2c200000 	stccs	0, cr0, [r0], #-0
    41ac:	20000006 	andcs	r0, r0, r6
    41b0:	00000608 	andeq	r0, r0, r8, lsl #12
    41b4:	00151022 	andseq	r1, r5, r2, lsr #32
    41b8:	00001408 	andeq	r1, r0, r8, lsl #8
    41bc:	00107000 	andseq	r7, r0, r0
    41c0:	06141900 	ldreq	r1, [r4], -r0, lsl #18
    41c4:	1ab60000 	bne	fed841cc <_estack+0xded541cc>
    41c8:	20190000 	andscs	r0, r9, r0
    41cc:	ce000006 	cdpgt	0, 0, cr0, cr0, cr6, {0}
    41d0:	2000001a 	andcs	r0, r0, sl, lsl r0
    41d4:	0000062c 	andeq	r0, r0, ip, lsr #12
    41d8:	00063819 	andeq	r3, r6, r9, lsl r8
    41dc:	001ae200 	andseq	lr, sl, r0, lsl #4
    41e0:	06081900 	streq	r1, [r8], -r0, lsl #18
    41e4:	1af50000 	bne	ffd441ec <_estack+0xdfd141ec>
    41e8:	1b000000 	blne	41f0 <_Min_Stack_Size+0x3df0>
    41ec:	0800141a 	stmdaeq	r0, {r1, r3, r4, sl, ip}
    41f0:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    41f4:	08351c00 	ldmdaeq	r5!, {sl, fp, ip}
    41f8:	12ea0000 	rscne	r0, sl, #0
    41fc:	06700800 	ldrbteq	r0, [r0], -r0, lsl #16
    4200:	93010000 	movwls	r0, #4096	; 0x1000
    4204:	0010ac12 	andseq	sl, r0, r2, lsl ip
    4208:	08522000 	ldmdaeq	r2, {sp}^
    420c:	6a200000 	bvs	804214 <_Min_Stack_Size+0x803e14>
    4210:	20000008 	andcs	r0, r0, r8
    4214:	0000085e 	andeq	r0, r0, lr, asr r8
    4218:	00084620 	andeq	r4, r8, r0, lsr #12
    421c:	14d61b00 	ldrbne	r1, [r6], #2816	; 0xb00
    4220:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    4224:	24000000 	strcs	r0, [r0], #-0
    4228:	00000835 	andeq	r0, r0, r5, lsr r8
    422c:	08001496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip}
    4230:	00000698 	muleq	r0, r8, r6
    4234:	19128201 	ldmdbne	r2, {r0, r9, pc}
    4238:	0000086a 	andeq	r0, r0, sl, ror #16
    423c:	00001b08 	andeq	r1, r0, r8, lsl #22
    4240:	00085e20 	andeq	r5, r8, r0, lsr #28
    4244:	08521900 	ldmdaeq	r2, {r8, fp, ip}^
    4248:	1b260000 	blne	984250 <_Min_Stack_Size+0x983e50>
    424c:	46190000 	ldrmi	r0, [r9], -r0
    4250:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    4254:	1b00001b 	blne	42c8 <_Min_Stack_Size+0x3ec8>
    4258:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
    425c:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    4260:	22000000 	andcs	r0, r0, #0
    4264:	080012fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip}
    4268:	0000000e 	andeq	r0, r0, lr
    426c:	00001105 	andeq	r1, r0, r5, lsl #2
    4270:	0001b52d 	andeq	fp, r1, sp, lsr #10
    4274:	02790100 	rsbseq	r0, r9, #0, 2
    4278:	000000ca 	andeq	r0, r0, sl, asr #1
    427c:	005c9102 	subseq	r9, ip, r2, lsl #2
    4280:	0006691c 	andeq	r6, r6, ip, lsl r9
    4284:	00131800 	andseq	r1, r3, r0, lsl #16
    4288:	0006b008 	andeq	fp, r6, r8
    428c:	027e0100 	rsbseq	r0, lr, #0, 2
    4290:	0000114c 	andeq	r1, r0, ip, asr #2
    4294:	00069220 	andeq	r9, r6, r0, lsr #4
    4298:	06862000 	streq	r2, [r6], r0
    429c:	7a200000 	bvc	8042a4 <_Min_Stack_Size+0x803ea4>
    42a0:	1c000006 	stcne	0, cr0, [r0], {6}
    42a4:	0000064b 	andeq	r0, r0, fp, asr #12
    42a8:	0800131e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip}
    42ac:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    42b0:	4214d001 	andsmi	sp, r4, #1
    42b4:	20000011 	andcs	r0, r0, r1, lsl r0
    42b8:	0000065c 	andeq	r0, r0, ip, asr r6
    42bc:	13d61b00 	bicsne	r1, r6, #0, 22
    42c0:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    42c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    42c8:	0000076f 	andeq	r0, r0, pc, ror #14
    42cc:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
    42d0:	000006e8 	andeq	r0, r0, r8, ror #13
    42d4:	b8029a01 	stmdalt	r2, {r0, r9, fp, ip, pc}
    42d8:	20000011 	andcs	r0, r0, r1, lsl r0
    42dc:	00000798 	muleq	r0, r8, r7
    42e0:	00078c20 	andeq	r8, r7, r0, lsr #24
    42e4:	07802000 	streq	r2, [r0, r0]
    42e8:	4b1c0000 	blmi	7042f0 <_Min_Stack_Size+0x703ef0>
    42ec:	84000006 	strhi	r0, [r0], #-6
    42f0:	10080013 	andne	r0, r8, r3, lsl r0
    42f4:	01000007 	tsteq	r0, r7
    42f8:	118914f5 	strdne	r1, [r9, r5]
    42fc:	5c200000 	stcpl	0, cr0, [r0], #-0
    4300:	00000006 	andeq	r0, r0, r6
    4304:	0014aa22 	andseq	sl, r4, r2, lsr #20
    4308:	00001808 	andeq	r1, r0, r8, lsl #16
    430c:	0011ae00 	andseq	sl, r1, r0, lsl #28
    4310:	078c2000 	streq	r2, [ip, r0]
    4314:	98190000 	ldmdals	r9, {}	; <UNPREDICTABLE>
    4318:	6c000007 	stcvs	0, cr0, [r0], {7}
    431c:	1900001b 	stmdbne	r0, {r0, r1, r3, r4}
    4320:	00000780 	andeq	r0, r0, r0, lsl #15
    4324:	00001b7f 	andeq	r1, r0, pc, ror fp
    4328:	13fa1b00 	mvnsne	r1, #0, 22
    432c:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    4330:	1b000000 	blne	4338 <_Min_Stack_Size+0x3f38>
    4334:	08001236 	stmdaeq	r0, {r1, r2, r4, r5, r9, ip}
    4338:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    433c:	1a661400 	bne	1989344 <_Min_Stack_Size+0x1988f44>
    4340:	ac010000 	stcge	0, cr0, [r1], {-0}
    4344:	00021812 	andeq	r1, r2, r2, lsl r8
    4348:	121e0100 	andsne	r0, lr, #0, 2
    434c:	7d150000 	ldcvc	0, cr0, [r5, #-0]
    4350:	0100001f 	tsteq	r0, pc, lsl r0
    4354:	064512ac 	strbeq	r1, [r5], -ip, lsr #5
    4358:	4d150000 	ldcmi	0, cr0, [r5, #-0]
    435c:	0100001d 	tsteq	r0, sp, lsl r0
    4360:	00a212ac 	adceq	r1, r2, ip, lsr #5
    4364:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    4368:	0100002c 	tsteq	r0, ip, lsr #32
    436c:	00b812ac 	adcseq	r1, r8, ip, lsr #5
    4370:	9a150000 	bls	544378 <_Min_Stack_Size+0x543f78>
    4374:	0100001c 	tsteq	r0, ip, lsl r0
    4378:	00b812ac 	adcseq	r1, r8, ip, lsr #5
    437c:	a0170000 	andsge	r0, r7, r0
    4380:	0100001b 	tsteq	r0, fp, lsl r0
    4384:	00b812af 	adcseq	r1, r8, pc, lsr #5
    4388:	17160000 	ldrne	r0, [r6, -r0]
    438c:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    4390:	ca12ee01 	bgt	4bfb9c <_Min_Stack_Size+0x4bf79c>
    4394:	00000000 	andeq	r0, r0, r0
    4398:	197e2900 	ldmdbne	lr!, {r8, fp, sp}^
    439c:	c5010000 	strgt	r0, [r1, #-0]
    43a0:	00021802 	andeq	r1, r2, r2, lsl #16
    43a4:	00154400 	andseq	r4, r5, r0, lsl #8
    43a8:	0004f408 	andeq	pc, r4, r8, lsl #8
    43ac:	929c0100 	addsls	r0, ip, #0, 2
    43b0:	2a000016 	bcs	4410 <_Min_Stack_Size+0x4010>
    43b4:	00001f7d 	andeq	r1, r0, sp, ror pc
    43b8:	4502c501 	strmi	ip, [r2, #-1281]	; 0xfffffaff
    43bc:	92000006 	andls	r0, r0, #6
    43c0:	2a00001b 	bcs	4434 <_Min_Stack_Size+0x4034>
    43c4:	00001d4d 	andeq	r1, r0, sp, asr #26
    43c8:	a202c501 	andge	ip, r2, #4194304	; 0x400000
    43cc:	b0000000 	andlt	r0, r0, r0
    43d0:	2a00001b 	bcs	4444 <_Min_Stack_Size+0x4044>
    43d4:	000021d7 	ldrdeq	r2, [r0], -r7
    43d8:	d602c501 	strle	ip, [r2], -r1, lsl #10
    43dc:	d1000005 	tstle	r0, r5
    43e0:	2a00001b 	bcs	4454 <_Min_Stack_Size+0x4054>
    43e4:	00002d42 	andeq	r2, r0, r2, asr #26
    43e8:	a202c501 	andge	ip, r2, #4194304	; 0x400000
    43ec:	7a000000 	bvc	43f4 <_Min_Stack_Size+0x3ff4>
    43f0:	2a00001c 	bcs	4468 <_Min_Stack_Size+0x4068>
    43f4:	00002c18 	andeq	r2, r0, r8, lsl ip
    43f8:	b802c501 	stmdalt	r2, {r0, r8, sl, lr, pc}
    43fc:	9b000000 	blls	4404 <_Min_Stack_Size+0x4004>
    4400:	2b00001c 	blcs	4478 <_Min_Stack_Size+0x4078>
    4404:	00000eec 	andeq	r0, r0, ip, ror #29
    4408:	b802c701 	stmdalt	r2, {r0, r8, r9, sl, lr, pc}
    440c:	bb000000 	bllt	4414 <_Min_Stack_Size+0x4014>
    4410:	1c00001c 	stcne	0, cr0, [r0], {28}
    4414:	000005f7 	strdeq	r0, [r0], -r7
    4418:	0800156a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip}
    441c:	00000730 	andeq	r0, r0, r0, lsr r7
    4420:	0602cf01 	streq	ip, [r2], -r1, lsl #30
    4424:	20000013 	andcs	r0, r0, r3, lsl r0
    4428:	00000614 	andeq	r0, r0, r4, lsl r6
    442c:	00062020 	andeq	r2, r6, r0, lsr #32
    4430:	062c2000 	strteq	r2, [ip], -r0
    4434:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    4438:	20000006 	andcs	r0, r0, r6
    443c:	00000608 	andeq	r0, r0, r8, lsl #12
    4440:	0007581f 	andeq	r5, r7, pc, lsl r8
    4444:	0012fc00 	andseq	pc, r2, r0, lsl #24
    4448:	06141900 	ldreq	r1, [r4], -r0, lsl #18
    444c:	1ce50000 	stclne	0, cr0, [r5]
    4450:	20190000 	andscs	r0, r9, r0
    4454:	fd000006 	stc2	0, cr0, [r0, #-24]	; 0xffffffe8
    4458:	1900001c 	stmdbne	r0, {r2, r3, r4}
    445c:	0000062c 	andeq	r0, r0, ip, lsr #12
    4460:	00001d11 	andeq	r1, r0, r1, lsl sp
    4464:	00063819 	andeq	r3, r6, r9, lsl r8
    4468:	001d2500 	andseq	r2, sp, r0, lsl #10
    446c:	06081900 	streq	r1, [r8], -r0, lsl #18
    4470:	1d380000 	ldcne	0, cr0, [r8, #-0]
    4474:	1b000000 	blne	447c <_Min_Stack_Size+0x407c>
    4478:	0800156e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip}
    447c:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    4480:	11c21c00 	bicne	r1, r2, r0, lsl #24
    4484:	15cc0000 	strbne	r0, [ip]
    4488:	07700800 	ldrbeq	r0, [r0, -r0, lsl #16]!
    448c:	ec010000 	stc	0, cr0, [r1], {-0}
    4490:	0014b102 	andseq	fp, r4, r2, lsl #2
    4494:	11f71900 	mvnsne	r1, r0, lsl #18
    4498:	1d4b0000 	stclne	0, cr0, [fp, #-0]
    449c:	eb190000 	bl	6444a4 <_Min_Stack_Size+0x6440a4>
    44a0:	69000011 	stmdbvs	r0, {r0, r4}
    44a4:	1900001d 	stmdbne	r0, {r0, r2, r3, r4}
    44a8:	000011df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    44ac:	00001db3 			; <UNDEFINED> instruction: 0x00001db3
    44b0:	0011d319 	andseq	sp, r1, r9, lsl r3
    44b4:	001dd100 	andseq	sp, sp, r0, lsl #2
    44b8:	07702100 	ldrbeq	r2, [r0, -r0, lsl #2]!
    44bc:	032c0000 			; <UNDEFINED> instruction: 0x032c0000
    44c0:	ef000012 	svc	0x00000012
    44c4:	1c00001d 	stcne	0, cr0, [r0], {29}
    44c8:	000005f7 	strdeq	r0, [r0], -r7
    44cc:	08001606 	stmdaeq	r0, {r1, r2, r9, sl, ip}
    44d0:	000007c0 	andeq	r0, r0, r0, asr #15
    44d4:	8312c101 	tsthi	r2, #1073741824	; 0x40000000
    44d8:	20000013 	andcs	r0, r0, r3, lsl r0
    44dc:	00000614 	andeq	r0, r0, r4, lsl r6
    44e0:	00062020 	andeq	r2, r6, r0, lsr #32
    44e4:	06382000 	ldrteq	r2, [r8], -r0
    44e8:	2c200000 	stccs	0, cr0, [r0], #-0
    44ec:	20000006 	andcs	r0, r0, r6
    44f0:	00000608 	andeq	r0, r0, r8, lsl #12
    44f4:	0018721b 	andseq	r7, r8, fp, lsl r2
    44f8:	00379f08 	eorseq	r9, r7, r8, lsl #30
    44fc:	351c0000 	ldrcc	r0, [ip, #-0]
    4500:	26000008 	strcs	r0, [r0], -r8
    4504:	e0080016 	and	r0, r8, r6, lsl r0
    4508:	01000007 	tsteq	r0, r7
    450c:	13b512fe 			; <UNDEFINED> instruction: 0x13b512fe
    4510:	52200000 	eorpl	r0, r0, #0
    4514:	20000008 	andcs	r0, r0, r8
    4518:	0000086a 	andeq	r0, r0, sl, ror #16
    451c:	00085e20 	andeq	r5, r8, r0, lsr #28
    4520:	08462000 	stmdaeq	r6, {sp}^
    4524:	741b0000 	ldrvc	r0, [fp], #-0
    4528:	9f080019 	svcls	0x00080019
    452c:	00000037 	andeq	r0, r0, r7, lsr r0
    4530:	0008351c 	andeq	r3, r8, ip, lsl r5
    4534:	0018e200 	andseq	lr, r8, r0, lsl #4
    4538:	00080808 	andeq	r0, r8, r8, lsl #16
    453c:	12d10100 	sbcsne	r0, r1, #0, 2
    4540:	000013f7 	strdeq	r1, [r0], -r7
    4544:	00086a19 	andeq	r6, r8, r9, lsl sl
    4548:	001e0d00 	andseq	r0, lr, r0, lsl #26
    454c:	085e1900 	ldmdaeq	lr, {r8, fp, ip}^
    4550:	1e360000 	cdpne	0, 3, cr0, cr6, cr0, {0}
    4554:	52190000 	andspl	r0, r9, #0
    4558:	5f000008 	svcpl	0x00000008
    455c:	1900001e 	stmdbne	r0, {r1, r2, r3, r4}
    4560:	00000846 	andeq	r0, r0, r6, asr #16
    4564:	00001e97 	muleq	r0, r7, lr
    4568:	0019521b 	andseq	r5, r9, fp, lsl r2
    456c:	00379f08 	eorseq	r9, r7, r8, lsl #30
    4570:	f71c0000 			; <UNDEFINED> instruction: 0xf71c0000
    4574:	a8000005 	stmdage	r0, {r0, r2}
    4578:	20080019 	andcs	r0, r8, r9, lsl r0
    457c:	01000008 	tsteq	r0, r8
    4580:	147d12f4 	ldrbtne	r1, [sp], #-756	; 0xfffffd0c
    4584:	14190000 	ldrne	r0, [r9], #-0
    4588:	c0000006 	andgt	r0, r0, r6
    458c:	1900001e 	stmdbne	r0, {r1, r2, r3, r4}
    4590:	00000620 	andeq	r0, r0, r0, lsr #12
    4594:	00001ed8 	ldrdeq	r1, [r0], -r8
    4598:	00063819 	andeq	r3, r6, r9, lsl r8
    459c:	001eec00 	andseq	lr, lr, r0, lsl #24
    45a0:	062c1900 	strteq	r1, [ip], -r0, lsl #18
    45a4:	1eff0000 	cdpne	0, 15, cr0, cr15, cr0, {0}
    45a8:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    45ac:	12000006 	andne	r0, r0, #6
    45b0:	2200001f 	andcs	r0, r0, #31
    45b4:	080019a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip}
    45b8:	00000016 	andeq	r0, r0, r6, lsl r0
    45bc:	00001473 	andeq	r1, r0, r3, ror r4
    45c0:	00061419 	andeq	r1, r6, r9, lsl r4
    45c4:	001f2500 	andseq	r2, pc, r0, lsl #10
    45c8:	06201900 	strteq	r1, [r0], -r0, lsl #18
    45cc:	1f3d0000 	svcne	0x003d0000
    45d0:	2c190000 	ldccs	0, cr0, [r9], {-0}
    45d4:	51000006 	tstpl	r0, r6
    45d8:	1900001f 	stmdbne	r0, {r0, r1, r2, r3, r4}
    45dc:	00000638 	andeq	r0, r0, r8, lsr r6
    45e0:	00001f64 	andeq	r1, r0, r4, ror #30
    45e4:	00060819 	andeq	r0, r6, r9, lsl r8
    45e8:	001f7700 	andseq	r7, pc, r0, lsl #14
    45ec:	1a1b0000 	bne	6c45f4 <_Min_Stack_Size+0x6c41f4>
    45f0:	9f08001a 	svcls	0x0008001a
    45f4:	00000037 	andeq	r0, r0, r7, lsr r0
    45f8:	0019e022 	andseq	lr, r9, r2, lsr #32
    45fc:	00001008 	andeq	r1, r0, r8
    4600:	00149300 	andseq	r9, r4, r0, lsl #6
    4604:	12102300 	andsne	r2, r0, #0, 6
    4608:	91020000 	mrsls	r0, (UNDEF: 2)
    460c:	fe25005c 	mcr2	0, 1, r0, cr5, cr12, {2}
    4610:	77080018 	smladvc	r8, r8, r0, r0
    4614:	26000008 	strcs	r0, [r0], -r8
    4618:	76025201 	strvc	r5, [r2], -r1, lsl #4
    461c:	51012600 	tstpl	r1, r0, lsl #12
    4620:	26007502 	strcs	r7, [r0], -r2, lsl #10
    4624:	7a025001 	bvc	98630 <_Min_Stack_Size+0x98230>
    4628:	00000000 	andeq	r0, r0, r0
    462c:	00163e22 	andseq	r3, r6, r2, lsr #28
    4630:	00000c08 	andeq	r0, r0, r8, lsl #24
    4634:	0014ce00 	andseq	ip, r4, r0, lsl #28
    4638:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    463c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    4640:	0000ca02 	andeq	ip, r0, r2, lsl #20
    4644:	4c910200 	lfmmi	f0, 4, [r1], {0}
    4648:	05f71c00 	ldrbeq	r1, [r7, #3072]!	; 0xc00
    464c:	16700000 	ldrbtne	r0, [r0], -r0
    4650:	08480800 	stmdaeq	r8, {fp}^
    4654:	56010000 	strpl	r0, [r1], -r0
    4658:	00150503 	andseq	r0, r5, r3, lsl #10
    465c:	06142000 	ldreq	r2, [r4], -r0
    4660:	20200000 	eorcs	r0, r0, r0
    4664:	20000006 	andcs	r0, r0, r6
    4668:	00000638 	andeq	r0, r0, r8, lsr r6
    466c:	00062c20 	andeq	r2, r6, r0, lsr #24
    4670:	06082000 	streq	r2, [r8], -r0
    4674:	361b0000 	ldrcc	r0, [fp], -r0
    4678:	9f080017 	svcls	0x00080017
    467c:	00000037 	andeq	r0, r0, r7, lsr r0
    4680:	0005f71c 	andeq	pc, r5, ip, lsl r7	; <UNPREDICTABLE>
    4684:	0016aa00 	andseq	sl, r6, r0, lsl #20
    4688:	00086008 	andeq	r6, r8, r8
    468c:	03640100 	cmneq	r4, #0, 2
    4690:	00001587 	andeq	r1, r0, r7, lsl #11
    4694:	00061419 	andeq	r1, r6, r9, lsl r4
    4698:	001f8a00 	andseq	r8, pc, r0, lsl #20
    469c:	06201900 	strteq	r1, [r0], -r0, lsl #18
    46a0:	1fb20000 	svcne	0x00b20000
    46a4:	38190000 	ldmdacc	r9, {}	; <UNPREDICTABLE>
    46a8:	d2000006 	andle	r0, r0, #6
    46ac:	1900001f 	stmdbne	r0, {r0, r1, r2, r3, r4}
    46b0:	0000062c 	andeq	r0, r0, ip, lsr #12
    46b4:	00001ff0 	strdeq	r1, [r0], -r0
    46b8:	00060819 	andeq	r0, r6, r9, lsl r8
    46bc:	00200e00 	eoreq	r0, r0, r0, lsl #28
    46c0:	08801f00 	stmeq	r0, {r8, r9, sl, fp, ip}
    46c4:	157d0000 	ldrbne	r0, [sp, #-0]!
    46c8:	14190000 	ldrne	r0, [r9], #-0
    46cc:	2c000006 	stccs	0, cr0, [r0], {6}
    46d0:	19000020 	stmdbne	r0, {r5}
    46d4:	00000620 	andeq	r0, r0, r0, lsr #12
    46d8:	00002044 	andeq	r2, r0, r4, asr #32
    46dc:	00062c19 	andeq	r2, r6, r9, lsl ip
    46e0:	00205800 	eoreq	r5, r0, r0, lsl #16
    46e4:	06381900 	ldrteq	r1, [r8], -r0, lsl #18
    46e8:	206b0000 	rsbcs	r0, fp, r0
    46ec:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    46f0:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
    46f4:	00000020 	andeq	r0, r0, r0, lsr #32
    46f8:	0017621b 	andseq	r6, r7, fp, lsl r2
    46fc:	00379f08 	eorseq	r9, r7, r8, lsl #30
    4700:	f72e0000 			; <UNDEFINED> instruction: 0xf72e0000
    4704:	08000005 	stmdaeq	r0, {r0, r2}
    4708:	22080017 	andcs	r0, r8, #23
    470c:	01000000 	mrseq	r0, (UNDEF: 0)
    4710:	15be0340 	ldrne	r0, [lr, #832]!	; 0x340
    4714:	14200000 	strtne	r0, [r0], #-0
    4718:	20000006 	andcs	r0, r0, r6
    471c:	00000620 	andeq	r0, r0, r0, lsr #12
    4720:	00063820 	andeq	r3, r6, r0, lsr #16
    4724:	062c2000 	strteq	r2, [ip], -r0
    4728:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    472c:	1b000006 	blne	474c <_Min_Stack_Size+0x434c>
    4730:	08001714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip}
    4734:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    4738:	07a51c00 	streq	r1, [r5, r0, lsl #24]!
    473c:	176e0000 	strbne	r0, [lr, -r0]!
    4740:	08980800 	ldmeq	r8, {fp}
    4744:	7a010000 	bvc	4474c <_Min_Stack_Size+0x4434c>
    4748:	00161003 	andseq	r1, r6, r3
    474c:	07ce2000 	strbeq	r2, [lr, r0]
    4750:	c2200000 	eorgt	r0, r0, #0
    4754:	20000007 	andcs	r0, r0, r7
    4758:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    475c:	0017f022 	andseq	pc, r7, r2, lsr #32
    4760:	00001608 	andeq	r1, r0, r8, lsl #12
    4764:	00160600 	andseq	r0, r6, r0, lsl #12
    4768:	07c22000 	strbeq	r2, [r2, r0]
    476c:	ce190000 	cdpgt	0, 1, cr0, cr9, cr0, {0}
    4770:	91000007 	tstls	r0, r7
    4774:	19000020 	stmdbne	r0, {r5}
    4778:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    477c:	000020a4 	andeq	r2, r0, r4, lsr #1
    4780:	17781b00 	ldrbne	r1, [r8, -r0, lsl #22]!
    4784:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    4788:	1c000000 	stcne	0, cr0, [r0], {-0}
    478c:	000007a5 	andeq	r0, r0, r5, lsr #15
    4790:	08001836 	stmdaeq	r0, {r1, r2, r4, r5, fp, ip}
    4794:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    4798:	3d032b01 	vstrcc	d2, [r3, #-4]
    479c:	20000016 	andcs	r0, r0, r6, lsl r0
    47a0:	000007ce 	andeq	r0, r0, lr, asr #15
    47a4:	0007c220 	andeq	ip, r7, r0, lsr #4
    47a8:	07b62000 	ldreq	r2, [r6, r0]!
    47ac:	401b0000 	andsmi	r0, fp, r0
    47b0:	9f080018 	svcls	0x00080018
    47b4:	00000037 	andeq	r0, r0, r7, lsr r0
    47b8:	0008d01f 	andeq	sp, r8, pc, lsl r0
    47bc:	00165600 	andseq	r5, r6, r0, lsl #12
    47c0:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    47c4:	20010000 	andcs	r0, r1, r0
    47c8:	0000ca03 	andeq	ip, r0, r3, lsl #20
    47cc:	58910200 	ldmpl	r1, {r9}
    47d0:	08e81f00 	stmiaeq	r8!, {r8, r9, sl, fp, ip}^
    47d4:	166f0000 	strbtne	r0, [pc], -r0
    47d8:	b52d0000 	strlt	r0, [sp, #-0]!
    47dc:	01000001 	tsteq	r0, r1
    47e0:	00ca030a 	sbceq	r0, sl, sl, lsl #6
    47e4:	91020000 	mrsls	r0, (UNDEF: 2)
    47e8:	001f0050 	andseq	r0, pc, r0, asr r0	; <UNPREDICTABLE>
    47ec:	88000009 	stmdahi	r0, {r0, r3}
    47f0:	2d000016 	stccs	0, cr0, [r0, #-88]	; 0xffffffa8
    47f4:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    47f8:	ca031801 	bgt	ca804 <_Min_Stack_Size+0xca404>
    47fc:	02000000 	andeq	r0, r0, #0
    4800:	1b005491 	blne	19a4c <_Min_Stack_Size+0x1964c>
    4804:	08001558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip}
    4808:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    480c:	1e122900 	cdpne	9, 1, cr2, cr2, cr0, {0}
    4810:	ac010000 	stcge	0, cr0, [r1], {-0}
    4814:	00021803 	andeq	r1, r2, r3, lsl #16
    4818:	001a3800 	andseq	r3, sl, r0, lsl #16
    481c:	0001fc08 	andeq	pc, r1, r8, lsl #24
    4820:	9c9c0100 	ldflss	f0, [ip], {0}
    4824:	2a000018 	bcs	488c <_Min_Stack_Size+0x448c>
    4828:	00001f7d 	andeq	r1, r0, sp, ror pc
    482c:	4503ac01 	strmi	sl, [r3, #-3073]	; 0xfffff3ff
    4830:	b7000006 	strlt	r0, [r0, -r6]
    4834:	2a000020 	bcs	48bc <_Min_Stack_Size+0x44bc>
    4838:	000021d7 	ldrdeq	r2, [r0], -r7
    483c:	d603ac01 	strle	sl, [r3], -r1, lsl #24
    4840:	d5000005 	strle	r0, [r0, #-5]
    4844:	2a000020 	bcs	48cc <_Min_Stack_Size+0x44cc>
    4848:	00002d42 	andeq	r2, r0, r2, asr #26
    484c:	a203ac01 	andge	sl, r3, #256	; 0x100
    4850:	1a000000 	bne	4858 <_Min_Stack_Size+0x4458>
    4854:	2a000021 	bcs	48e0 <_Min_Stack_Size+0x44e0>
    4858:	00002c18 	andeq	r2, r0, r8, lsl ip
    485c:	b803ac01 	stmdalt	r3, {r0, sl, fp, sp, pc}
    4860:	3b000000 	blcc	4868 <_Min_Stack_Size+0x4468>
    4864:	2b000021 	blcs	48f0 <_Min_Stack_Size+0x44f0>
    4868:	00000eec 	andeq	r0, r0, ip, ror #29
    486c:	b803ae01 	stmdalt	r3, {r0, r9, sl, fp, sp, pc}
    4870:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    4874:	1c000021 	stcne	0, cr0, [r0], {33}	; 0x21
    4878:	000005f7 	strdeq	r0, [r0], -r7
    487c:	08001ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip}
    4880:	00000918 	andeq	r0, r0, r8, lsl r9
    4884:	4703d501 	strmi	sp, [r3, -r1, lsl #10]
    4888:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    488c:	00000638 	andeq	r0, r0, r8, lsr r6
    4890:	000021fe 	strdeq	r2, [r0], -lr
    4894:	00062c19 	andeq	r2, r6, r9, lsl ip
    4898:	00221c00 	eoreq	r1, r2, r0, lsl #24
    489c:	06201900 	strteq	r1, [r0], -r0, lsl #18
    48a0:	227b0000 	rsbscs	r0, fp, #0
    48a4:	14190000 	ldrne	r0, [r9], #-0
    48a8:	9b000006 	blls	48c8 <_Min_Stack_Size+0x44c8>
    48ac:	19000022 	stmdbne	r0, {r1, r5}
    48b0:	00000608 	andeq	r0, r0, r8, lsl #12
    48b4:	000022c3 	andeq	r2, r0, r3, asr #5
    48b8:	001c061b 	andseq	r0, ip, fp, lsl r6
    48bc:	00379f08 	eorseq	r9, r7, r8, lsl #30
    48c0:	381f0000 	ldmdacc	pc, {}	; <UNPREDICTABLE>
    48c4:	60000009 	andvs	r0, r0, r9
    48c8:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    48cc:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    48d0:	ca03db01 	bgt	fb4dc <_Min_Stack_Size+0xfb0dc>
    48d4:	02000000 	andeq	r0, r0, #0
    48d8:	1c006091 	stcne	0, cr6, [r0], {145}	; 0x91
    48dc:	00000669 	andeq	r0, r0, r9, ror #12
    48e0:	08001adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip}
    48e4:	00000958 	andeq	r0, r0, r8, asr r9
    48e8:	d003ed01 	andle	lr, r3, r1, lsl #26
    48ec:	20000017 	andcs	r0, r0, r7, lsl r0
    48f0:	00000692 	muleq	r0, r2, r6
    48f4:	00068620 	andeq	r8, r6, r0, lsr #12
    48f8:	067a2000 	ldrbteq	r2, [sl], -r0
    48fc:	4b1c0000 	blmi	704904 <_Min_Stack_Size+0x704504>
    4900:	e2000006 	and	r0, r0, #6
    4904:	7008001a 	andvc	r0, r8, sl, lsl r0
    4908:	01000009 	tsteq	r0, r9
    490c:	179d14d0 			; <UNDEFINED> instruction: 0x179d14d0
    4910:	5c200000 	stcpl	0, cr0, [r0], #-0
    4914:	00000006 	andeq	r0, r0, r6
    4918:	001be222 	andseq	lr, fp, r2, lsr #4
    491c:	00001808 	andeq	r1, r0, r8, lsl #16
    4920:	0017c600 	andseq	ip, r7, r0, lsl #12
    4924:	06861900 	streq	r1, [r6], r0, lsl #18
    4928:	22e10000 	rsccs	r0, r1, #0
    492c:	92190000 	andsls	r0, r9, #0
    4930:	f4000006 	vst4.8	{d0-d3}, [r0], r6
    4934:	19000022 	stmdbne	r0, {r1, r5}
    4938:	0000067a 	andeq	r0, r0, sl, ror r6
    493c:	00002307 	andeq	r2, r0, r7, lsl #6
    4940:	1bd61b00 	blne	ff58b548 <_estack+0xdf55b548>
    4944:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    4948:	1c000000 	stcne	0, cr0, [r0], {-0}
    494c:	000005f7 	strdeq	r0, [r0], -r7
    4950:	08001b16 	stmdaeq	r0, {r1, r2, r4, r8, r9, fp, ip}
    4954:	00000988 	andeq	r0, r0, r8, lsl #19
    4958:	3e040b01 	vmlacc.f64	d0, d4, d1
    495c:	20000018 	andcs	r0, r0, r8, lsl r0
    4960:	00000638 	andeq	r0, r0, r8, lsr r6
    4964:	00062c20 	andeq	r2, r6, r0, lsr #24
    4968:	06202000 	strteq	r2, [r0], -r0
    496c:	14200000 	strtne	r0, [r0], #-0
    4970:	20000006 	andcs	r0, r0, r6
    4974:	00000608 	andeq	r0, r0, r8, lsl #12
    4978:	0009a81f 	andeq	sl, r9, pc, lsl r8
    497c:	00183400 	andseq	r3, r8, r0, lsl #8
    4980:	06141900 	ldreq	r1, [r4], -r0, lsl #18
    4984:	231a0000 	tstcs	sl, #0
    4988:	20190000 	andscs	r0, r9, r0
    498c:	31000006 	tstcc	r0, r6
    4990:	19000023 	stmdbne	r0, {r0, r1, r5}
    4994:	0000062c 	andeq	r0, r0, ip, lsr #12
    4998:	00002345 	andeq	r2, r0, r5, asr #6
    499c:	00063819 	andeq	r3, r6, r9, lsl r8
    49a0:	00235800 	eoreq	r5, r3, r0, lsl #16
    49a4:	06081900 	streq	r1, [r8], -r0, lsl #18
    49a8:	236b0000 	cmncs	fp, #0
    49ac:	1b000000 	blne	49b4 <_Min_Stack_Size+0x45b4>
    49b0:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
    49b4:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    49b8:	05f71c00 	ldrbeq	r1, [r7, #3072]!	; 0xc00
    49bc:	1b580000 	blne	16049c4 <_Min_Stack_Size+0x16045c4>
    49c0:	09c00800 	stmibeq	r0, {fp}^
    49c4:	e1010000 	mrs	r0, (UNDEF: 1)
    49c8:	00187503 	andseq	r7, r8, r3, lsl #10
    49cc:	06382000 	ldrteq	r2, [r8], -r0
    49d0:	2c200000 	stccs	0, cr0, [r0], #-0
    49d4:	20000006 	andcs	r0, r0, r6
    49d8:	00000620 	andeq	r0, r0, r0, lsr #12
    49dc:	00061420 	andeq	r1, r6, r0, lsr #8
    49e0:	06082000 	streq	r2, [r8], -r0
    49e4:	661b0000 	ldrvs	r0, [fp], -r0
    49e8:	9f08001b 	svcls	0x0008001b
    49ec:	00000037 	andeq	r0, r0, r7, lsr r0
    49f0:	001b7c22 	andseq	r7, fp, r2, lsr #24
    49f4:	00001008 	andeq	r1, r0, r8
    49f8:	00189200 	andseq	r9, r8, r0, lsl #4
    49fc:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    4a00:	e7010000 	str	r0, [r1, -r0]
    4a04:	0000ca03 	andeq	ip, r0, r3, lsl #20
    4a08:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4a0c:	1a4a1b00 	bne	128b614 <_Min_Stack_Size+0x128b214>
    4a10:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    4a14:	14000000 	strne	r0, [r0], #-0
    4a18:	00001659 	andeq	r1, r0, r9, asr r6
    4a1c:	18151501 	ldmdane	r5, {r0, r8, sl, ip}
    4a20:	01000002 	tsteq	r0, r2
    4a24:	000018d2 	ldrdeq	r1, [r0], -r2
    4a28:	001f7d15 	andseq	r7, pc, r5, lsl sp	; <UNPREDICTABLE>
    4a2c:	15150100 	ldrne	r0, [r5, #-256]	; 0xffffff00
    4a30:	00000645 	andeq	r0, r0, r5, asr #12
    4a34:	002c1815 	eoreq	r1, ip, r5, lsl r8
    4a38:	15150100 	ldrne	r0, [r5, #-256]	; 0xffffff00
    4a3c:	000000b8 	strheq	r0, [r0], -r8
    4a40:	001c9a15 	andseq	r9, ip, r5, lsl sl
    4a44:	15150100 	ldrne	r0, [r5, #-256]	; 0xffffff00
    4a48:	000000b8 	strheq	r0, [r0], -r8
    4a4c:	1d372900 	ldcne	9, cr2, [r7, #-0]
    4a50:	2d010000 	stccs	0, cr0, [r1, #-0]
    4a54:	00021804 	andeq	r1, r2, r4, lsl #16
    4a58:	001c3400 	andseq	r3, ip, r0, lsl #8
    4a5c:	00022c08 	andeq	r2, r2, r8, lsl #24
    4a60:	a39c0100 	orrsge	r0, ip, #0, 2
    4a64:	2a00001a 	bcs	4ad4 <_Min_Stack_Size+0x46d4>
    4a68:	00001f7d 	andeq	r1, r0, sp, ror pc
    4a6c:	45042d01 	strmi	r2, [r4, #-3329]	; 0xfffff2ff
    4a70:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
    4a74:	2a000023 	bcs	4b08 <_Min_Stack_Size+0x4708>
    4a78:	000021d7 	ldrdeq	r2, [r0], -r7
    4a7c:	d6042d01 	strle	r2, [r4], -r1, lsl #26
    4a80:	9c000005 	stcls	0, cr0, [r0], {5}
    4a84:	2a000023 	bcs	4b18 <_Min_Stack_Size+0x4718>
    4a88:	00002d42 	andeq	r2, r0, r2, asr #26
    4a8c:	a2042d01 	andge	r2, r4, #1, 26	; 0x40
    4a90:	e1000000 	mrs	r0, (UNDEF: 0)
    4a94:	2a000023 	bcs	4b28 <_Min_Stack_Size+0x4728>
    4a98:	00002c18 	andeq	r2, r0, r8, lsl ip
    4a9c:	b8042d01 	stmdalt	r4, {r0, r8, sl, fp, sp}
    4aa0:	02000000 	andeq	r0, r0, #0
    4aa4:	2b000024 	blcs	4b3c <_Min_Stack_Size+0x473c>
    4aa8:	00000eec 	andeq	r0, r0, ip, ror #29
    4aac:	b8042f01 	stmdalt	r4, {r0, r8, r9, sl, fp, sp}
    4ab0:	9d000000 	stcls	0, cr0, [r0, #-0]
    4ab4:	1c000024 	stcne	0, cr0, [r0], {36}	; 0x24
    4ab8:	000005f7 	strdeq	r0, [r0], -r7
    4abc:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
    4ac0:	000009e0 	andeq	r0, r0, r0, ror #19
    4ac4:	be045601 	cfmadd32lt	mvax0, mvfx5, mvfx4, mvfx1
    4ac8:	19000019 	stmdbne	r0, {r0, r3, r4}
    4acc:	00000638 	andeq	r0, r0, r8, lsr r6
    4ad0:	000024dd 	ldrdeq	r2, [r0], -sp
    4ad4:	00062c19 	andeq	r2, r6, r9, lsl ip
    4ad8:	0024fb00 	eoreq	pc, r4, r0, lsl #22
    4adc:	06201900 	strteq	r1, [r0], -r0, lsl #18
    4ae0:	25640000 	strbcs	r0, [r4, #-0]!
    4ae4:	14190000 	ldrne	r0, [r9], #-0
    4ae8:	84000006 	strhi	r0, [r0], #-6
    4aec:	19000025 	stmdbne	r0, {r0, r2, r5}
    4af0:	00000608 	andeq	r0, r0, r8, lsl #12
    4af4:	000025ac 	andeq	r2, r0, ip, lsr #11
    4af8:	000a081f 	andeq	r0, sl, pc, lsl r8
    4afc:	0019b400 	andseq	fp, r9, r0, lsl #8
    4b00:	06141900 	ldreq	r1, [r4], -r0, lsl #18
    4b04:	25ca0000 	strbcs	r0, [sl]
    4b08:	20190000 	andscs	r0, r9, r0
    4b0c:	e2000006 	and	r0, r0, #6
    4b10:	19000025 	stmdbne	r0, {r0, r2, r5}
    4b14:	0000062c 	andeq	r0, r0, ip, lsr #12
    4b18:	000025f6 	strdeq	r2, [r0], -r6
    4b1c:	00063819 	andeq	r3, r6, r9, lsl r8
    4b20:	00260900 	eoreq	r0, r6, r0, lsl #18
    4b24:	06081900 	streq	r1, [r8], -r0, lsl #18
    4b28:	261c0000 	ldrcs	r0, [ip], -r0
    4b2c:	1b000000 	blne	4b34 <_Min_Stack_Size+0x4734>
    4b30:	08001d7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, fp, ip}
    4b34:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    4b38:	1cc22200 	sfmne	f2, 2, [r2], {0}
    4b3c:	00100800 	andseq	r0, r0, r0, lsl #16
    4b40:	19db0000 	ldmibne	fp, {}^	; <UNPREDICTABLE>
    4b44:	b52d0000 	strlt	r0, [sp, #-0]!
    4b48:	01000001 	tsteq	r0, r1
    4b4c:	00ca045c 	sbceq	r0, sl, ip, asr r4
    4b50:	91020000 	mrsls	r0, (UNDEF: 2)
    4b54:	a51c0058 	ldrge	r0, [ip, #-88]	; 0xffffffa8
    4b58:	da000007 	ble	4b7c <_Min_Stack_Size+0x477c>
    4b5c:	2008001c 	andcs	r0, r8, ip, lsl r0
    4b60:	0100000a 	tsteq	r0, sl
    4b64:	1a310461 	bne	c45cf0 <_Min_Stack_Size+0xc458f0>
    4b68:	ce200000 	cdpgt	0, 2, cr0, cr0, cr0, {0}
    4b6c:	20000007 	andcs	r0, r0, r7
    4b70:	000007c2 	andeq	r0, r0, r2, asr #15
    4b74:	0007b620 	andeq	fp, r7, r0, lsr #12
    4b78:	1d462200 	sfmne	f2, 2, [r6, #-0]
    4b7c:	00120800 	andseq	r0, r2, r0, lsl #16
    4b80:	1a270000 	bne	9c4b88 <_Min_Stack_Size+0x9c4788>
    4b84:	c2190000 	andsgt	r0, r9, #0
    4b88:	2f000007 	svccs	0x00000007
    4b8c:	19000026 	stmdbne	r0, {r1, r2, r5}
    4b90:	000007ce 	andeq	r0, r0, lr, asr #15
    4b94:	00002642 	andeq	r2, r0, r2, asr #12
    4b98:	0007b619 	andeq	fp, r7, r9, lsl r6
    4b9c:	00265500 	eoreq	r5, r6, r0, lsl #10
    4ba0:	e41b0000 	ldr	r0, [fp], #-0
    4ba4:	9f08001c 	svcls	0x0008001c
    4ba8:	00000037 	andeq	r0, r0, r7, lsr r0
    4bac:	00189c1c 	andseq	r9, r8, ip, lsl ip
    4bb0:	001dac00 	andseq	sl, sp, r0, lsl #24
    4bb4:	000a4008 	andeq	r4, sl, r8
    4bb8:	047f0100 	ldrbteq	r0, [pc], #-256	; 4bc0 <_Min_Stack_Size+0x47c0>
    4bbc:	00001a7c 	andeq	r1, r0, ip, ror sl
    4bc0:	0018c520 	andseq	ip, r8, r0, lsr #10
    4bc4:	18b92000 	ldmne	r9!, {sp}
    4bc8:	ad200000 	stcge	0, cr0, [r0, #-0]
    4bcc:	1c000018 	stcne	0, cr0, [r0], {24}
    4bd0:	0000064b 	andeq	r0, r0, fp, asr #12
    4bd4:	08001db2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, fp, ip}
    4bd8:	00000a60 	andeq	r0, r0, r0, ror #20
    4bdc:	72151a01 	andsvc	r1, r5, #4096	; 0x1000
    4be0:	1900001a 	stmdbne	r0, {r1, r3, r4}
    4be4:	0000065c 	andeq	r0, r0, ip, asr r6
    4be8:	00002668 	andeq	r2, r0, r8, ror #12
    4bec:	1de61b00 	stclne	11, cr1, [r6]
    4bf0:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    4bf4:	22000000 	andcs	r0, r0, #0
    4bf8:	08001df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip}
    4bfc:	00000012 	andeq	r0, r0, r2, lsl r0
    4c00:	00001a99 	muleq	r0, r9, sl
    4c04:	0001b52d 	andeq	fp, r1, sp, lsr #10
    4c08:	048f0100 	streq	r0, [pc], #256	; 4c10 <_Min_Stack_Size+0x4810>
    4c0c:	000000ca 	andeq	r0, r0, sl, asr #1
    4c10:	005c9102 	subseq	r9, ip, r2, lsl #2
    4c14:	001c461b 	andseq	r4, ip, fp, lsl r6
    4c18:	00379f08 	eorseq	r9, r7, r8, lsl #30
    4c1c:	c3290000 			; <UNDEFINED> instruction: 0xc3290000
    4c20:	0100001c 	tsteq	r0, ip, lsl r0
    4c24:	021804ac 	andseq	r0, r8, #172, 8	; 0xac000000
    4c28:	1e600000 	cdpne	0, 6, cr0, cr0, cr0, {0}
    4c2c:	00bc0800 	adcseq	r0, ip, r0, lsl #16
    4c30:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c34:	00001b09 	andeq	r1, r0, r9, lsl #22
    4c38:	001f7d2a 	andseq	r7, pc, sl, lsr #26
    4c3c:	04ac0100 	strteq	r0, [ip], #256	; 0x100
    4c40:	00000645 	andeq	r0, r0, r5, asr #12
    4c44:	0000267b 	andeq	r2, r0, fp, ror r6
    4c48:	001d4d28 	andseq	r4, sp, r8, lsr #26
    4c4c:	04ac0100 	strteq	r0, [ip], #256	; 0x100
    4c50:	000000a2 	andeq	r0, r0, r2, lsr #1
    4c54:	d7285101 	strle	r5, [r8, -r1, lsl #2]!
    4c58:	01000021 	tsteq	r0, r1, lsr #32
    4c5c:	05d604ac 	ldrbeq	r0, [r6, #1196]	; 0x4ac
    4c60:	52010000 	andpl	r0, r1, #0
    4c64:	002d422a 	eoreq	r4, sp, sl, lsr #4
    4c68:	04ac0100 	strteq	r0, [ip], #256	; 0x100
    4c6c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4c70:	000026ce 	andeq	r2, r0, lr, asr #13
    4c74:	0018fe2d 	andseq	pc, r8, sp, lsr #28
    4c78:	04ae0100 	strteq	r0, [lr], #256	; 0x100
    4c7c:	000000ca 	andeq	r0, r0, sl, asr #1
    4c80:	00649102 	rsbeq	r9, r4, r2, lsl #2
    4c84:	001f1b29 	andseq	r1, pc, r9, lsr #22
    4c88:	04f90100 	ldrbteq	r0, [r9], #256	; 0x100
    4c8c:	00000218 	andeq	r0, r0, r8, lsl r2
    4c90:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
    4c94:	000000c4 	andeq	r0, r0, r4, asr #1
    4c98:	1b6f9c01 	blne	1bebca4 <_Min_Stack_Size+0x1beb8a4>
    4c9c:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    4ca0:	0100001f 	tsteq	r0, pc, lsl r0
    4ca4:	064504f9 			; <UNDEFINED> instruction: 0x064504f9
    4ca8:	27210000 	strcs	r0, [r1, -r0]!
    4cac:	4d280000 	stcmi	0, cr0, [r8, #-0]
    4cb0:	0100001d 	tsteq	r0, sp, lsl r0
    4cb4:	00a204f9 	strdeq	r0, [r2], r9	; <UNPREDICTABLE>
    4cb8:	51010000 	mrspl	r0, (UNDEF: 1)
    4cbc:	0021d728 	eoreq	sp, r1, r8, lsr #14
    4cc0:	04f90100 	ldrbteq	r0, [r9], #256	; 0x100
    4cc4:	000005d6 	ldrdeq	r0, [r0], -r6
    4cc8:	422a5201 	eormi	r5, sl, #268435456	; 0x10000000
    4ccc:	0100002d 	tsteq	r0, sp, lsr #32
    4cd0:	00a204f9 	strdeq	r0, [r2], r9	; <UNPREDICTABLE>
    4cd4:	27740000 	ldrbcs	r0, [r4, -r0]!
    4cd8:	fe2d0000 	cdp2	0, 2, cr0, cr13, cr0, {0}
    4cdc:	01000018 	tsteq	r0, r8, lsl r0
    4ce0:	00ca04fb 	strdeq	r0, [sl], #75	; 0x4b
    4ce4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ce8:	fe290064 	cdp2	0, 2, cr0, cr9, cr4, {3}
    4cec:	01000015 	tsteq	r0, r5, lsl r0
    4cf0:	0218054c 	andseq	r0, r8, #76, 10	; 0x13000000
    4cf4:	1fe00000 	svcne	0x00e00000
    4cf8:	00e40800 	rsceq	r0, r4, r0, lsl #16
    4cfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d00:	00001bf6 	strdeq	r1, [r0], -r6
    4d04:	001f7d2a 	andseq	r7, pc, sl, lsr #26
    4d08:	054c0100 	strbeq	r0, [ip, #-256]	; 0xffffff00
    4d0c:	00000645 	andeq	r0, r0, r5, asr #12
    4d10:	000027c7 	andeq	r2, r0, r7, asr #15
    4d14:	001d4d28 	andseq	r4, sp, r8, lsr #26
    4d18:	054c0100 	strbeq	r0, [ip, #-256]	; 0xffffff00
    4d1c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4d20:	d72a5101 	strle	r5, [sl, -r1, lsl #2]!
    4d24:	01000021 	tsteq	r0, r1, lsr #32
    4d28:	05d6054c 	ldrbeq	r0, [r6, #1356]	; 0x54c
    4d2c:	28250000 	stmdacs	r5!, {}	; <UNPREDICTABLE>
    4d30:	422a0000 	eormi	r0, sl, #0
    4d34:	0100002d 	tsteq	r0, sp, lsr #32
    4d38:	00a2054c 	adceq	r0, r2, ip, asr #10
    4d3c:	28770000 	ldmdacs	r7!, {}^	; <UNPREDICTABLE>
    4d40:	a72a0000 	strge	r0, [sl, -r0]!
    4d44:	0100001b 	tsteq	r0, fp, lsl r0
    4d48:	00b8054c 	adcseq	r0, r8, ip, asr #10
    4d4c:	28d60000 	ldmcs	r6, {}^	; <UNPREDICTABLE>
    4d50:	6e2d0000 	cdpvs	0, 2, cr0, cr13, cr0, {0}
    4d54:	0100001c 	tsteq	r0, ip, lsl r0
    4d58:	00ca054e 	sbceq	r0, sl, lr, asr #10
    4d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    4d60:	18fe2d60 	ldmne	lr!, {r5, r6, r8, sl, fp, sp}^
    4d64:	4f010000 	svcmi	0x00010000
    4d68:	0000ca05 	andeq	ip, r0, r5, lsl #20
    4d6c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4d70:	1c272900 	stcne	9, cr2, [r7], #-0
    4d74:	b3010000 	movwlt	r0, #4096	; 0x1000
    4d78:	00021805 	andeq	r1, r2, r5, lsl #16
    4d7c:	0020c400 	eoreq	ip, r0, r0, lsl #8
    4d80:	0000ec08 	andeq	lr, r0, r8, lsl #24
    4d84:	6e9c0100 	fmlvse	f0, f4, f0
    4d88:	2a00001c 	bcs	4e00 <_Min_Stack_Size+0x4a00>
    4d8c:	00001f7d 	andeq	r1, r0, sp, ror pc
    4d90:	4505b301 	strmi	fp, [r5, #-769]	; 0xfffffcff
    4d94:	02000006 	andeq	r0, r0, #6
    4d98:	28000029 	stmdacs	r0, {r0, r3, r5}
    4d9c:	00001d4d 	andeq	r1, r0, sp, asr #26
    4da0:	a205b301 	andge	fp, r5, #67108864	; 0x4000000
    4da4:	01000000 	mrseq	r0, (UNDEF: 0)
    4da8:	21d72a51 	bicscs	r2, r7, r1, asr sl
    4dac:	b3010000 	movwlt	r0, #4096	; 0x1000
    4db0:	0005d605 	andeq	sp, r5, r5, lsl #12
    4db4:	00296000 	eoreq	r6, r9, r0
    4db8:	2d422a00 	vstrcs	s5, [r2, #-0]
    4dbc:	b3010000 	movwlt	r0, #4096	; 0x1000
    4dc0:	0000a205 	andeq	sl, r0, r5, lsl #4
    4dc4:	0029b200 	eoreq	fp, r9, r0, lsl #4
    4dc8:	1ba72a00 	blne	fe9cf5d0 <_estack+0xde99f5d0>
    4dcc:	b3010000 	movwlt	r0, #4096	; 0x1000
    4dd0:	0000b805 	andeq	fp, r0, r5, lsl #16
    4dd4:	002a1100 	eoreq	r1, sl, r0, lsl #2
    4dd8:	18fe2d00 	ldmne	lr!, {r8, sl, fp, sp}^
    4ddc:	b5010000 	strlt	r0, [r1, #-0]
    4de0:	0000ca05 	andeq	ip, r0, r5, lsl #20
    4de4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4de8:	1bdb2900 	blne	ff6cf1f0 <_estack+0xdf69f1f0>
    4dec:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    4df0:	00021806 	andeq	r1, r2, r6, lsl #16
    4df4:	0021b000 	eoreq	fp, r1, r0
    4df8:	0000c008 	andeq	ip, r0, r8
    4dfc:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    4e00:	2a00001c 	bcs	4e78 <_Min_Stack_Size+0x4a78>
    4e04:	00001f7d 	andeq	r1, r0, sp, ror pc
    4e08:	45061801 	strmi	r1, [r6, #-2049]	; 0xfffff7ff
    4e0c:	3d000006 	stccc	0, cr0, [r0, #-24]	; 0xffffffe8
    4e10:	2800002a 	stmdacs	r0, {r1, r3, r5}
    4e14:	000021d7 	ldrdeq	r2, [r0], -r7
    4e18:	d6061801 	strle	r1, [r6], -r1, lsl #16
    4e1c:	01000005 	tsteq	r0, r5
    4e20:	2d422a51 	vstrcs	s5, [r2, #-324]	; 0xfffffebc
    4e24:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    4e28:	0000a206 	andeq	sl, r0, r6, lsl #4
    4e2c:	002aa900 	eoreq	sl, sl, r0, lsl #18
    4e30:	18fe2d00 	ldmne	lr!, {r8, sl, fp, sp}^
    4e34:	1a010000 	bne	44e3c <_Min_Stack_Size+0x44a3c>
    4e38:	0000ca06 	andeq	ip, r0, r6, lsl #20
    4e3c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4e40:	1b122900 	blne	48f248 <_Min_Stack_Size+0x48ee48>
    4e44:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    4e48:	00021806 	andeq	r1, r2, r6, lsl #16
    4e4c:	00227000 	eoreq	r7, r2, r0
    4e50:	0000bc08 	andeq	fp, r0, r8, lsl #24
    4e54:	209c0100 	addscs	r0, ip, r0, lsl #2
    4e58:	2a00001d 	bcs	4ed4 <_Min_Stack_Size+0x4ad4>
    4e5c:	00001f7d 	andeq	r1, r0, sp, ror pc
    4e60:	45066801 	strmi	r6, [r6, #-2049]	; 0xfffff7ff
    4e64:	fc000006 	stc2	0, cr0, [r0], {6}
    4e68:	2a00002a 	bcs	4f18 <_Min_Stack_Size+0x4b18>
    4e6c:	000021d7 	ldrdeq	r2, [r0], -r7
    4e70:	d6066801 	strle	r6, [r6], -r1, lsl #16
    4e74:	68000005 	stmdavs	r0, {r0, r2}
    4e78:	2a00002b 	bcs	4f2c <_Min_Stack_Size+0x4b2c>
    4e7c:	00002d42 	andeq	r2, r0, r2, asr #26
    4e80:	a2066801 	andge	r6, r6, #65536	; 0x10000
    4e84:	af000000 	svcge	0x00000000
    4e88:	2d00002b 	stccs	0, cr0, [r0, #-172]	; 0xffffff54
    4e8c:	000018fe 	strdeq	r1, [r0], -lr
    4e90:	ca066a01 	bgt	19f69c <_Min_Stack_Size+0x19f29c>
    4e94:	02000000 	andeq	r0, r0, #0
    4e98:	29006491 	stmdbcs	r0, {r0, r4, r7, sl, sp, lr}
    4e9c:	00001a7c 	andeq	r1, r0, ip, ror sl
    4ea0:	1806ba01 	stmdane	r6, {r0, r9, fp, ip, sp, pc}
    4ea4:	2c000002 	stccs	0, cr0, [r0], {2}
    4ea8:	7a080023 	bvc	204f3c <_Min_Stack_Size+0x204b3c>
    4eac:	01000000 	mrseq	r0, (UNDEF: 0)
    4eb0:	001d929c 	mulseq	sp, ip, r2
    4eb4:	1f7d2a00 	svcne	0x007d2a00
    4eb8:	ba010000 	blt	44ec0 <_Min_Stack_Size+0x44ac0>
    4ebc:	00064506 	andeq	r4, r6, r6, lsl #10
    4ec0:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    4ec4:	21d72800 	bicscs	r2, r7, r0, lsl #16
    4ec8:	ba010000 	blt	44ed0 <_Min_Stack_Size+0x44ad0>
    4ecc:	0005d606 	andeq	sp, r5, r6, lsl #12
    4ed0:	2a510100 	bcs	14452d8 <_Min_Stack_Size+0x1444ed8>
    4ed4:	00002d42 	andeq	r2, r0, r2, asr #26
    4ed8:	a206ba01 	andge	fp, r6, #4096	; 0x1000
    4edc:	62000000 	andvs	r0, r0, #0
    4ee0:	2a00002c 	bcs	4f98 <_Min_Stack_Size+0x4b98>
    4ee4:	00001ba7 	andeq	r1, r0, r7, lsr #23
    4ee8:	b806ba01 	stmdalt	r6, {r0, r9, fp, ip, sp, pc}
    4eec:	a7000000 	strge	r0, [r0, -r0]
    4ef0:	2f00002c 	svccs	0x0000002c
    4ef4:	08002382 	stmdaeq	r0, {r1, r7, r8, r9, sp}
    4ef8:	0000000c 	andeq	r0, r0, ip
    4efc:	0001b52d 	andeq	fp, r1, sp, lsr #10
    4f00:	06de0100 	ldrbeq	r0, [lr], r0, lsl #2
    4f04:	000000ca 	andeq	r0, r0, sl, asr #1
    4f08:	00649102 	rsbeq	r9, r4, r2, lsl #2
    4f0c:	1ff82900 	svcne	0x00f82900
    4f10:	fc010000 	stc2	0, cr0, [r1], {-0}
    4f14:	00021806 	andeq	r1, r2, r6, lsl #16
    4f18:	0023a800 	eoreq	sl, r3, r0, lsl #16
    4f1c:	00007a08 	andeq	r7, r0, r8, lsl #20
    4f20:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    4f24:	2a00001e 	bcs	4fa4 <_Min_Stack_Size+0x4ba4>
    4f28:	00001f7d 	andeq	r1, r0, sp, ror pc
    4f2c:	4506fc01 	strmi	pc, [r6, #-3073]	; 0xfffff3ff
    4f30:	ec000006 	stc	0, cr0, [r0], {6}
    4f34:	2800002c 	stmdacs	r0, {r2, r3, r5}
    4f38:	000021d7 	ldrdeq	r2, [r0], -r7
    4f3c:	d606fc01 	strle	pc, [r6], -r1, lsl #24
    4f40:	01000005 	tsteq	r0, r5
    4f44:	2d422a51 	vstrcs	s5, [r2, #-324]	; 0xfffffebc
    4f48:	fc010000 	stc2	0, cr0, [r1], {-0}
    4f4c:	0000a206 	andeq	sl, r0, r6, lsl #4
    4f50:	002d3f00 	eoreq	r3, sp, r0, lsl #30
    4f54:	1ba72a00 	blne	fe9cf75c <_estack+0xde99f75c>
    4f58:	fc010000 	stc2	0, cr0, [r1], {-0}
    4f5c:	0000b806 	andeq	fp, r0, r6, lsl #16
    4f60:	002d8400 	eoreq	r8, sp, r0, lsl #8
    4f64:	23fe2f00 	mvnscs	r2, #0, 30
    4f68:	000c0800 	andeq	r0, ip, r0, lsl #16
    4f6c:	b52d0000 	strlt	r0, [sp, #-0]!
    4f70:	01000001 	tsteq	r0, r1
    4f74:	00ca0720 	sbceq	r0, sl, r0, lsr #14
    4f78:	91020000 	mrsls	r0, (UNDEF: 2)
    4f7c:	29000064 	stmdbcs	r0, {r2, r5, r6}
    4f80:	00001ee8 	andeq	r1, r0, r8, ror #29
    4f84:	18073a01 	stmdane	r7, {r0, r9, fp, ip, sp}
    4f88:	24000002 	strcs	r0, [r0], #-2
    4f8c:	36080024 	strcc	r0, [r8], -r4, lsr #32
    4f90:	01000000 	mrseq	r0, (UNDEF: 0)
    4f94:	001e2f9c 	mulseq	lr, ip, pc	; <UNPREDICTABLE>
    4f98:	1f7d2a00 	svcne	0x007d2a00
    4f9c:	3a010000 	bcc	44fa4 <_Min_Stack_Size+0x44ba4>
    4fa0:	00064507 	andeq	r4, r6, r7, lsl #10
    4fa4:	002dc900 	eoreq	ip, sp, r0, lsl #18
    4fa8:	a1290000 			; <UNDEFINED> instruction: 0xa1290000
    4fac:	0100001a 	tsteq	r0, sl, lsl r0
    4fb0:	0218075b 	andseq	r0, r8, #23855104	; 0x16c0000
    4fb4:	245c0000 	ldrbcs	r0, [ip], #-0
    4fb8:	00440800 	subeq	r0, r4, r0, lsl #16
    4fbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4fc0:	00001e6a 	andeq	r1, r0, sl, ror #28
    4fc4:	001f7d2a 	andseq	r7, pc, sl, lsr #26
    4fc8:	075b0100 	ldrbeq	r0, [fp, -r0, lsl #2]
    4fcc:	00000645 	andeq	r0, r0, r5, asr #12
    4fd0:	00002e03 	andeq	r2, r0, r3, lsl #28
    4fd4:	706d7430 	rsbvc	r7, sp, r0, lsr r4
    4fd8:	075e0100 	ldrbeq	r0, [lr, -r0, lsl #2]
    4fdc:	000000b8 	strheq	r0, [r0], -r8
    4fe0:	00002e3d 	andeq	r2, r0, sp, lsr lr
    4fe4:	155e2900 	ldrbne	r2, [lr, #-2304]	; 0xfffff700
    4fe8:	80010000 	andhi	r0, r1, r0
    4fec:	00021807 	andeq	r1, r2, r7, lsl #16
    4ff0:	0024a000 	eoreq	sl, r4, r0
    4ff4:	00011c08 	andeq	r1, r1, r8, lsl #24
    4ff8:	eb9c0100 	bl	fe705400 <_estack+0xde6d5400>
    4ffc:	2a00001e 	bcs	507c <_Min_Stack_Size+0x4c7c>
    5000:	00001f7d 	andeq	r1, r0, sp, ror pc
    5004:	45078001 	strmi	r8, [r7, #-1]
    5008:	57000006 	strpl	r0, [r0, -r6]
    500c:	2a00002e 	bcs	50cc <_Min_Stack_Size+0x4ccc>
    5010:	00001d4d 	andeq	r1, r0, sp, asr #26
    5014:	a2078001 	andge	r8, r7, #1
    5018:	75000000 	strvc	r0, [r0, #-0]
    501c:	2a00002e 	bcs	50dc <_Min_Stack_Size+0x4cdc>
    5020:	000021d7 	ldrdeq	r2, [r0], -r7
    5024:	d6078001 	strle	r8, [r7], -r1
    5028:	af000005 	svcge	0x00000005
    502c:	2a00002e 	bcs	50ec <_Min_Stack_Size+0x4cec>
    5030:	00002d42 	andeq	r2, r0, r2, asr #26
    5034:	a2078001 	andge	r8, r7, #1
    5038:	0c000000 	stceq	0, cr0, [r0], {-0}
    503c:	2d00002f 	stccs	0, cr0, [r0, #-188]	; 0xffffff44
    5040:	000018fe 	strdeq	r1, [r0], -lr
    5044:	ca078201 	bgt	1e5850 <_Min_Stack_Size+0x1e5450>
    5048:	02000000 	andeq	r0, r0, #0
    504c:	7c256491 	cfstrsvc	mvf6, [r5], #-580	; 0xfffffdbc
    5050:	b6080025 	strlt	r0, [r8], -r5, lsr #32
    5054:	26000037 			; <UNDEFINED> instruction: 0x26000037
    5058:	75025201 	strvc	r5, [r2, #-513]	; 0xfffffdff
    505c:	51012610 	tstpl	r1, r0, lsl r6
    5060:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    5064:	00290000 	eoreq	r0, r9, r0
    5068:	0100001f 	tsteq	r0, pc, lsl r0
    506c:	021807f8 	andseq	r0, r8, #248, 14	; 0x3e00000
    5070:	25bc0000 	ldrcs	r0, [ip, #0]!
    5074:	01180800 	tsteq	r8, r0, lsl #16
    5078:	9c010000 	stcls	0, cr0, [r1], {-0}
    507c:	00001f65 	andeq	r1, r0, r5, ror #30
    5080:	001f7d2a 	andseq	r7, pc, sl, lsr #26
    5084:	07f80100 	ldrbeq	r0, [r8, r0, lsl #2]!
    5088:	00000645 	andeq	r0, r0, r5, asr #12
    508c:	00002f5f 	andeq	r2, r0, pc, asr pc
    5090:	001d4d2a 	andseq	r4, sp, sl, lsr #26
    5094:	07f80100 	ldrbeq	r0, [r8, r0, lsl #2]!
    5098:	000000a2 	andeq	r0, r0, r2, lsr #1
    509c:	00002f7d 	andeq	r2, r0, sp, ror pc
    50a0:	0021d72a 	eoreq	sp, r1, sl, lsr #14
    50a4:	07f80100 	ldrbeq	r0, [r8, r0, lsl #2]!
    50a8:	000005d6 	ldrdeq	r0, [r0], -r6
    50ac:	00002fb7 			; <UNDEFINED> instruction: 0x00002fb7
    50b0:	002d422a 	eoreq	r4, sp, sl, lsr #4
    50b4:	07f80100 	ldrbeq	r0, [r8, r0, lsl #2]!
    50b8:	000000a2 	andeq	r0, r0, r2, lsr #1
    50bc:	00003008 	andeq	r3, r0, r8
    50c0:	0018fe2d 	andseq	pc, r8, sp, lsr #28
    50c4:	07fa0100 	ldrbeq	r0, [sl, r0, lsl #2]!
    50c8:	000000ca 	andeq	r0, r0, sl, asr #1
    50cc:	25649102 	strbcs	r9, [r4, #-258]!	; 0xfffffefe
    50d0:	08002696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, sp}
    50d4:	000037b6 			; <UNDEFINED> instruction: 0x000037b6
    50d8:	02510126 	subseq	r0, r1, #-2147483639	; 0x80000009
    50dc:	00001075 	andeq	r1, r0, r5, ror r0
    50e0:	0021af29 	eoreq	sl, r1, r9, lsr #30
    50e4:	089d0100 	ldmeq	sp, {r8}
    50e8:	00000218 	andeq	r0, r0, r8, lsl r2
    50ec:	080026d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp}
    50f0:	000000fc 	strdeq	r0, [r0], -ip
    50f4:	1fd69c01 	svcne	0x00d69c01
    50f8:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    50fc:	0100001f 	tsteq	r0, pc, lsl r0
    5100:	0645089d 			; <UNDEFINED> instruction: 0x0645089d
    5104:	305b0000 	subscc	r0, fp, r0
    5108:	d72a0000 	strle	r0, [sl, -r0]!
    510c:	01000021 	tsteq	r0, r1, lsr #32
    5110:	05d6089d 	ldrbeq	r0, [r6, #2205]	; 0x89d
    5114:	30a50000 	adccc	r0, r5, r0
    5118:	422a0000 	eormi	r0, sl, #0
    511c:	0100002d 	tsteq	r0, sp, lsr #32
    5120:	00a2089d 	umlaleq	r0, r2, sp, r8
    5124:	30df0000 	sbcscc	r0, pc, r0
    5128:	fe2d0000 	cdp2	0, 2, cr0, cr13, cr0, {0}
    512c:	01000018 	tsteq	r0, r8, lsl r0
    5130:	00ca089f 	smulleq	r0, sl, pc, r8	; <UNPREDICTABLE>
    5134:	91020000 	mrsls	r0, (UNDEF: 2)
    5138:	279a2564 	ldrcs	r2, [sl, r4, ror #10]
    513c:	37b60800 	ldrcc	r0, [r6, r0, lsl #16]!
    5140:	01260000 			; <UNDEFINED> instruction: 0x01260000
    5144:	00760252 	rsbseq	r0, r6, r2, asr r2
    5148:	03510126 	cmpeq	r1, #-2147483639	; 0x80000009
    514c:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
    5150:	15c92900 	strbne	r2, [r9, #2304]	; 0x900
    5154:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    5158:	00021808 	andeq	r1, r2, r8, lsl #16
    515c:	0027d000 	eoreq	sp, r7, r0
    5160:	0000fc08 	andeq	pc, r0, r8, lsl #24
    5164:	409c0100 	addsmi	r0, ip, r0, lsl #2
    5168:	2a000020 	bcs	51f0 <_Min_Stack_Size+0x4df0>
    516c:	00001f7d 	andeq	r1, r0, sp, ror pc
    5170:	4508fe01 	strmi	pc, [r8, #-3585]	; 0xfffff1ff
    5174:	32000006 	andcc	r0, r0, #6
    5178:	2a000031 	bcs	5244 <_Min_Stack_Size+0x4e44>
    517c:	000021d7 	ldrdeq	r2, [r0], -r7
    5180:	d608fe01 	strle	pc, [r8], -r1, lsl #28
    5184:	7c000005 	stcvc	0, cr0, [r0], {5}
    5188:	2a000031 	bcs	5254 <_Min_Stack_Size+0x4e54>
    518c:	00002d42 	andeq	r2, r0, r2, asr #26
    5190:	a208fe01 	andge	pc, r8, #1, 28
    5194:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    5198:	2d000031 	stccs	0, cr0, [r0, #-196]	; 0xffffff3c
    519c:	000018fe 	strdeq	r1, [r0], -lr
    51a0:	ca090001 	bgt	2451ac <_Min_Stack_Size+0x244dac>
    51a4:	02000000 	andeq	r0, r0, #0
    51a8:	96256491 			; <UNDEFINED> instruction: 0x96256491
    51ac:	b6080028 	strlt	r0, [r8], -r8, lsr #32
    51b0:	26000037 			; <UNDEFINED> instruction: 0x26000037
    51b4:	76025201 	strvc	r5, [r2], -r1, lsl #4
    51b8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    51bc:	00001c7f 	andeq	r1, r0, pc, ror ip
    51c0:	18096201 	stmdane	r9, {r0, r9, sp, lr}
    51c4:	cc000002 	stcgt	0, cr0, [r0], {2}
    51c8:	d4080028 	strle	r0, [r8], #-40	; 0xffffffd8
    51cc:	01000001 	tsteq	r0, r1
    51d0:	0022259c 	mlaeq	r2, ip, r5, r2
    51d4:	1f7d2a00 	svcne	0x007d2a00
    51d8:	62010000 	andvs	r0, r1, #0
    51dc:	00064509 	andeq	r4, r6, r9, lsl #10
    51e0:	00321c00 	eorseq	r1, r2, r0, lsl #24
    51e4:	1d4d2a00 	vstrne	s5, [sp, #-0]
    51e8:	62010000 	andvs	r0, r1, #0
    51ec:	0000a209 	andeq	sl, r0, r9, lsl #4
    51f0:	00323a00 	eorseq	r3, r2, r0, lsl #20
    51f4:	21a42a00 			; <UNDEFINED> instruction: 0x21a42a00
    51f8:	62010000 	andvs	r0, r1, #0
    51fc:	0000a209 	andeq	sl, r0, r9, lsl #4
    5200:	00325b00 	eorseq	r5, r2, r0, lsl #22
    5204:	18342a00 	ldmdane	r4!, {r9, fp, sp}
    5208:	62010000 	andvs	r0, r1, #0
    520c:	0000a209 	andeq	sl, r0, r9, lsl #4
    5210:	00327c00 	eorseq	r7, r2, r0, lsl #24
    5214:	21d72a00 	bicscs	r2, r7, r0, lsl #20
    5218:	62010000 	andvs	r0, r1, #0
    521c:	0005d609 	andeq	sp, r5, r9, lsl #12
    5220:	00329d00 	eorseq	r9, r2, r0, lsl #26
    5224:	2d422a00 	vstrcs	s5, [r2, #-0]
    5228:	62010000 	andvs	r0, r1, #0
    522c:	0000a209 	andeq	sl, r0, r9, lsl #4
    5230:	0032bd00 	eorseq	fp, r2, r0, lsl #26
    5234:	2c182a00 	ldccs	10, cr2, [r8], {-0}
    5238:	62010000 	andvs	r0, r1, #0
    523c:	0000b809 	andeq	fp, r0, r9, lsl #16
    5240:	0032dd00 	eorseq	sp, r2, r0, lsl #26
    5244:	0eec2b00 	vfmaeq.f64	d18, d12, d0
    5248:	64010000 	strvs	r0, [r1], #-0
    524c:	0000b809 	andeq	fp, r0, r9, lsl #16
    5250:	0032fd00 	eorseq	pc, r2, r0, lsl #26
    5254:	05f71c00 	ldrbeq	r1, [r7, #3072]!	; 0xc00
    5258:	28f60000 	ldmcs	r6!, {}^	; <UNPREDICTABLE>
    525c:	0a780800 	beq	1e07264 <_Min_Stack_Size+0x1e06e64>
    5260:	6f010000 	svcvs	0x00010000
    5264:	00214809 	eoreq	r4, r1, r9, lsl #16
    5268:	06142000 	ldreq	r2, [r4], -r0
    526c:	20200000 	eorcs	r0, r0, r0
    5270:	20000006 	andcs	r0, r0, r6
    5274:	0000062c 	andeq	r0, r0, ip, lsr #12
    5278:	00063820 	andeq	r3, r6, r0, lsr #16
    527c:	06082000 	streq	r2, [r8], -r0
    5280:	981f0000 	ldmdals	pc, {}	; <UNPREDICTABLE>
    5284:	3e00000a 	cdpcc	0, 0, cr0, cr0, cr10, {0}
    5288:	19000021 	stmdbne	r0, {r0, r5}
    528c:	00000614 	andeq	r0, r0, r4, lsl r6
    5290:	00003327 	andeq	r3, r0, r7, lsr #6
    5294:	00062019 	andeq	r2, r6, r9, lsl r0
    5298:	00333f00 	eorseq	r3, r3, r0, lsl #30
    529c:	062c1900 	strteq	r1, [ip], -r0, lsl #18
    52a0:	33530000 	cmpcc	r3, #0
    52a4:	38190000 	ldmdacc	r9, {}	; <UNPREDICTABLE>
    52a8:	67000006 	strvs	r0, [r0, -r6]
    52ac:	19000033 	stmdbne	r0, {r0, r1, r4, r5}
    52b0:	00000608 	andeq	r0, r0, r8, lsl #12
    52b4:	0000337a 	andeq	r3, r0, sl, ror r3
    52b8:	28fa1b00 	ldmcs	sl!, {r8, r9, fp, ip}^
    52bc:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    52c0:	1c000000 	stcne	0, cr0, [r0], {-0}
    52c4:	00000669 	andeq	r0, r0, r9, ror #12
    52c8:	0800297a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, sp}
    52cc:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
    52d0:	8f099f01 	svchi	0x00099f01
    52d4:	20000021 	andcs	r0, r0, r1, lsr #32
    52d8:	00000692 	muleq	r0, r2, r6
    52dc:	00068620 	andeq	r8, r6, r0, lsr #12
    52e0:	067a2000 	ldrbteq	r2, [sl], -r0
    52e4:	4b1c0000 	blmi	7052ec <_Min_Stack_Size+0x704eec>
    52e8:	80000006 	andhi	r0, r0, r6
    52ec:	c8080029 	stmdagt	r8, {r0, r3, r5}
    52f0:	0100000a 	tsteq	r0, sl
    52f4:	218514d0 	ldrdcs	r1, [r5, r0]
    52f8:	5c200000 	stcpl	0, cr0, [r0], #-0
    52fc:	00000006 	andeq	r0, r0, r6
    5300:	002a421b 	eoreq	r4, sl, fp, lsl r2
    5304:	00379f08 	eorseq	r9, r7, r8, lsl #30
    5308:	6f1c0000 	svcvs	0x001c0000
    530c:	86000007 	strhi	r0, [r0], -r7
    5310:	e0080029 	and	r0, r8, r9, lsr #32
    5314:	0100000a 	tsteq	r0, sl
    5318:	21ff09bc 	ldrhcs	r0, [pc, #156]	; 53bc <_Min_Stack_Size+0x4fbc>
    531c:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
    5320:	20000007 	andcs	r0, r0, r7
    5324:	0000078c 	andeq	r0, r0, ip, lsl #15
    5328:	00078020 	andeq	r8, r7, r0, lsr #32
    532c:	064b1c00 	strbeq	r1, [fp], -r0, lsl #24
    5330:	29860000 	stmibcs	r6, {}	; <UNPREDICTABLE>
    5334:	0b000800 	bleq	733c <_Min_Stack_Size+0x6f3c>
    5338:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    533c:	0021cc14 	eoreq	ip, r1, r4, lsl ip
    5340:	065c2000 	ldrbeq	r2, [ip], -r0
    5344:	22000000 	andcs	r0, r0, #0
    5348:	08002a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, sp}
    534c:	00000018 	andeq	r0, r0, r8, lsl r0
    5350:	000021f5 	strdeq	r2, [r0], -r5
    5354:	00078c19 	andeq	r8, r7, r9, lsl ip
    5358:	00338d00 	eorseq	r8, r3, r0, lsl #26
    535c:	07981900 	ldreq	r1, [r8, r0, lsl #18]
    5360:	33a10000 			; <UNDEFINED> instruction: 0x33a10000
    5364:	80190000 	andshi	r0, r9, r0
    5368:	b4000007 	strlt	r0, [r0], #-7
    536c:	00000033 	andeq	r0, r0, r3, lsr r0
    5370:	0029be1b 	eoreq	fp, r9, fp, lsl lr
    5374:	00379f08 	eorseq	r9, r7, r8, lsl #30
    5378:	e21b0000 	ands	r0, fp, #0
    537c:	9f080028 	svcls	0x00080028
    5380:	25000037 	strcs	r0, [r0, #-55]	; 0xffffffc9
    5384:	08002966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, sp}
    5388:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    538c:	02530126 	subseq	r0, r3, #-2147483639	; 0x80000009
    5390:	01260078 			; <UNDEFINED> instruction: 0x01260078
    5394:	00770252 	rsbseq	r0, r7, r2, asr r2
    5398:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
    539c:	00000075 	andeq	r0, r0, r5, ror r0
    53a0:	00219329 	eoreq	r9, r1, r9, lsr #6
    53a4:	09e70100 	stmibeq	r7!, {r8}^
    53a8:	00000218 	andeq	r0, r0, r8, lsl r2
    53ac:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
    53b0:	0000035a 	andeq	r0, r0, sl, asr r3
    53b4:	253c9c01 	ldrcs	r9, [ip, #-3073]!	; 0xfffff3ff
    53b8:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    53bc:	0100001f 	tsteq	r0, pc, lsl r0
    53c0:	064509e7 	strbeq	r0, [r5], -r7, ror #19
    53c4:	33c70000 	biccc	r0, r7, #0
    53c8:	4d2a0000 	stcmi	0, cr0, [sl, #-0]
    53cc:	0100001d 	tsteq	r0, sp, lsl r0
    53d0:	00a209e7 	adceq	r0, r2, r7, ror #19
    53d4:	33e50000 	mvncc	r0, #0
    53d8:	a42a0000 	strtge	r0, [sl], #-0
    53dc:	01000021 	tsteq	r0, r1, lsr #32
    53e0:	00a209e7 	adceq	r0, r2, r7, ror #19
    53e4:	34060000 	strcc	r0, [r6], #-0
    53e8:	342a0000 	strtcc	r0, [sl], #-0
    53ec:	01000018 	tsteq	r0, r8, lsl r0
    53f0:	00a209e7 	adceq	r0, r2, r7, ror #19
    53f4:	34270000 	strtcc	r0, [r7], #-0
    53f8:	d72a0000 	strle	r0, [sl, -r0]!
    53fc:	01000021 	tsteq	r0, r1, lsr #32
    5400:	05d609e7 	ldrbeq	r0, [r6, #2535]	; 0x9e7
    5404:	34480000 	strbcc	r0, [r8], #-0
    5408:	422a0000 	eormi	r0, sl, #0
    540c:	0100002d 	tsteq	r0, sp, lsr #32
    5410:	00a209e7 	adceq	r0, r2, r7, ror #19
    5414:	34680000 	strbtcc	r0, [r8], #-0
    5418:	182a0000 	stmdane	sl!, {}	; <UNPREDICTABLE>
    541c:	0100002c 	tsteq	r0, ip, lsr #32
    5420:	00b809e7 	adcseq	r0, r8, r7, ror #19
    5424:	34880000 	strcc	r0, [r8], #0
    5428:	ec2b0000 	stc	0, cr0, [fp], #-0
    542c:	0100000e 	tsteq	r0, lr
    5430:	00b809e9 	adcseq	r0, r8, r9, ror #19
    5434:	34a80000 	strtcc	r0, [r8], #0
    5438:	f71c0000 			; <UNDEFINED> instruction: 0xf71c0000
    543c:	cc000005 	stcgt	0, cr0, [r0], {5}
    5440:	2008002a 	andcs	r0, r8, sl, lsr #32
    5444:	0100000b 	tsteq	r0, fp
    5448:	232d09f4 			; <UNDEFINED> instruction: 0x232d09f4
    544c:	14200000 	strtne	r0, [r0], #-0
    5450:	20000006 	andcs	r0, r0, r6
    5454:	00000620 	andeq	r0, r0, r0, lsr #12
    5458:	00062c20 	andeq	r2, r6, r0, lsr #24
    545c:	06382000 	ldrteq	r2, [r8], -r0
    5460:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    5464:	1f000006 	svcne	0x00000006
    5468:	00000b40 	andeq	r0, r0, r0, asr #22
    546c:	00002323 	andeq	r2, r0, r3, lsr #6
    5470:	00061419 	andeq	r1, r6, r9, lsl r4
    5474:	0034d200 	eorseq	sp, r4, r0, lsl #4
    5478:	06201900 	strteq	r1, [r0], -r0, lsl #18
    547c:	34ea0000 	strbtcc	r0, [sl], #0
    5480:	2c190000 	ldccs	0, cr0, [r9], {-0}
    5484:	fe000006 	cdp2	0, 0, cr0, cr0, cr6, {0}
    5488:	19000034 	stmdbne	r0, {r2, r4, r5}
    548c:	00000638 	andeq	r0, r0, r8, lsr r6
    5490:	00003512 	andeq	r3, r0, r2, lsl r5
    5494:	00060819 	andeq	r0, r6, r9, lsl r8
    5498:	00352500 	eorseq	r2, r5, r0, lsl #10
    549c:	d01b0000 	andsle	r0, fp, r0
    54a0:	9f08002a 	svcls	0x0008002a
    54a4:	00000037 	andeq	r0, r0, r7, lsr r0
    54a8:	000b581f 	andeq	r5, fp, pc, lsl r8
    54ac:	00234600 	eoreq	r4, r3, r0, lsl #12
    54b0:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    54b4:	24010000 	strcs	r0, [r1], #-0
    54b8:	0000ca0a 	andeq	ip, r0, sl, lsl #20
    54bc:	48910200 	ldmmi	r1, {r9}
    54c0:	05f71c00 	ldrbeq	r1, [r7, #3072]!	; 0xc00
    54c4:	2bb00000 	blcs	fec054cc <_estack+0xdebd54cc>
    54c8:	0b700800 	bleq	1c074d0 <_Min_Stack_Size+0x1c070d0>
    54cc:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    54d0:	00237d0a 	eoreq	r7, r3, sl, lsl #26
    54d4:	06142000 	ldreq	r2, [r4], -r0
    54d8:	20200000 	eorcs	r0, r0, r0
    54dc:	20000006 	andcs	r0, r0, r6
    54e0:	00000638 	andeq	r0, r0, r8, lsr r6
    54e4:	00062c20 	andeq	r2, r6, r0, lsr #24
    54e8:	06082000 	streq	r2, [r8], -r0
    54ec:	761b0000 	ldrvc	r0, [fp], -r0
    54f0:	9f08002c 	svcls	0x0008002c
    54f4:	00000037 	andeq	r0, r0, r7, lsr r0
    54f8:	0005f71c 	andeq	pc, r5, ip, lsl r7	; <UNPREDICTABLE>
    54fc:	002bea00 	eoreq	lr, fp, r0, lsl #20
    5500:	000b8808 	andeq	r8, fp, r8, lsl #16
    5504:	0a860100 	beq	fe18590c <_estack+0xde15590c>
    5508:	000023ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    550c:	00061419 	andeq	r1, r6, r9, lsl r4
    5510:	00353800 	eorseq	r3, r5, r0, lsl #16
    5514:	06201900 	strteq	r1, [r0], -r0, lsl #18
    5518:	35600000 	strbcc	r0, [r0, #-0]!
    551c:	38190000 	ldmdacc	r9, {}	; <UNPREDICTABLE>
    5520:	80000006 	andhi	r0, r0, r6
    5524:	19000035 	stmdbne	r0, {r0, r2, r4, r5}
    5528:	0000062c 	andeq	r0, r0, ip, lsr #12
    552c:	0000359e 	muleq	r0, lr, r5
    5530:	00060819 	andeq	r0, r6, r9, lsl r8
    5534:	0035bc00 	eorseq	fp, r5, r0, lsl #24
    5538:	0ba81f00 	bleq	fea0d140 <_estack+0xde9dd140>
    553c:	23f50000 	mvnscs	r0, #0
    5540:	14190000 	ldrne	r0, [r9], #-0
    5544:	da000006 	ble	5564 <_Min_Stack_Size+0x5164>
    5548:	19000035 	stmdbne	r0, {r0, r2, r4, r5}
    554c:	00000620 	andeq	r0, r0, r0, lsr #12
    5550:	000035f2 	strdeq	r3, [r0], -r2
    5554:	00062c19 	andeq	r2, r6, r9, lsl ip
    5558:	00360600 	eorseq	r0, r6, r0, lsl #12
    555c:	06381900 	ldrteq	r1, [r8], -r0, lsl #18
    5560:	36190000 	ldrcc	r0, [r9], -r0
    5564:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    5568:	2c000006 	stccs	0, cr0, [r0], {6}
    556c:	00000036 	andeq	r0, r0, r6, lsr r0
    5570:	002ca21b 	eoreq	sl, ip, fp, lsl r2
    5574:	00379f08 	eorseq	r9, r7, r8, lsl #30
    5578:	f72e0000 			; <UNDEFINED> instruction: 0xf72e0000
    557c:	48000005 	stmdami	r0, {r0, r2}
    5580:	2208002c 	andcs	r0, r8, #44	; 0x2c
    5584:	01000000 	mrseq	r0, (UNDEF: 0)
    5588:	24360a62 	ldrtcs	r0, [r6], #-2658	; 0xfffff59e
    558c:	14200000 	strtne	r0, [r0], #-0
    5590:	20000006 	andcs	r0, r0, r6
    5594:	00000620 	andeq	r0, r0, r0, lsr #12
    5598:	00063820 	andeq	r3, r6, r0, lsr #16
    559c:	062c2000 	strteq	r2, [ip], -r0
    55a0:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    55a4:	1b000006 	blne	55c4 <_Min_Stack_Size+0x51c4>
    55a8:	08002c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, sp}
    55ac:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    55b0:	07a51c00 	streq	r1, [r5, r0, lsl #24]!
    55b4:	2cae0000 	stccs	0, cr0, [lr]
    55b8:	0bc00800 	bleq	ff0075c0 <_estack+0xdefd75c0>
    55bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    55c0:	00248c0a 	eoreq	r8, r4, sl, lsl #24
    55c4:	07ce2000 	strbeq	r2, [lr, r0]
    55c8:	c2200000 	eorgt	r0, r0, #0
    55cc:	20000007 	andcs	r0, r0, r7
    55d0:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    55d4:	002d1a22 	eoreq	r1, sp, r2, lsr #20
    55d8:	00001608 	andeq	r1, r0, r8, lsl #12
    55dc:	00248200 	eoreq	r8, r4, r0, lsl #4
    55e0:	07c21900 	strbeq	r1, [r2, r0, lsl #18]
    55e4:	363f0000 	ldrtcc	r0, [pc], -r0
    55e8:	ce190000 	cdpgt	0, 1, cr0, cr9, cr0, {0}
    55ec:	52000007 	andpl	r0, r0, #7
    55f0:	19000036 	stmdbne	r0, {r1, r2, r4, r5}
    55f4:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    55f8:	00003665 	andeq	r3, r0, r5, ror #12
    55fc:	2cb81b00 	vldmiacs	r8!, {d1-d0}
    5600:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    5604:	1c000000 	stcne	0, cr0, [r0], {-0}
    5608:	000007a5 	andeq	r0, r0, r5, lsr #15
    560c:	08002d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, sp}
    5610:	00000be0 	andeq	r0, r0, r0, ror #23
    5614:	b90a4d01 	stmdblt	sl, {r0, r8, sl, fp, lr}
    5618:	20000024 	andcs	r0, r0, r4, lsr #32
    561c:	000007ce 	andeq	r0, r0, lr, asr #15
    5620:	0007c220 	andeq	ip, r7, r0, lsr #4
    5624:	07b62000 	ldreq	r2, [r6, r0]!
    5628:	681b0000 	ldmdavs	fp, {}	; <UNPREDICTABLE>
    562c:	9f08002d 	svcls	0x0008002d
    5630:	00000037 	andeq	r0, r0, r7, lsr r0
    5634:	002d9c22 	eoreq	r9, sp, r2, lsr #24
    5638:	00000e08 	andeq	r0, r0, r8, lsl #28
    563c:	0024d600 	eoreq	sp, r4, r0, lsl #12
    5640:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    5644:	42010000 	andmi	r0, r1, #0
    5648:	0000ca0a 	andeq	ip, r0, sl, lsl #20
    564c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    5650:	2dc22200 	sfmcs	f2, 2, [r2]
    5654:	000c0800 	andeq	r0, ip, r0, lsl #16
    5658:	24f30000 	ldrbtcs	r0, [r3], #0
    565c:	b52d0000 	strlt	r0, [sp, #-0]!
    5660:	01000001 	tsteq	r0, r1
    5664:	00ca0a2f 	sbceq	r0, sl, pc, lsr #20
    5668:	91020000 	mrsls	r0, (UNDEF: 2)
    566c:	ec22004c 	stc	0, cr0, [r2], #-304	; 0xfffffed0
    5670:	0c08002d 	stceq	0, cr0, [r8], {45}	; 0x2d
    5674:	10000000 	andne	r0, r0, r0
    5678:	2d000025 	stccs	0, cr0, [r0, #-148]	; 0xffffff6c
    567c:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    5680:	ca0a3d01 	bgt	294a8c <_Min_Stack_Size+0x29468c>
    5684:	02000000 	andeq	r0, r0, #0
    5688:	1b005091 	blne	198d4 <_Min_Stack_Size+0x194d4>
    568c:	08002ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, sp}
    5690:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    5694:	002b4425 	eoreq	r4, fp, r5, lsr #8
    5698:	00070708 	andeq	r0, r7, r8, lsl #14
    569c:	53012600 	movwpl	r2, #5632	; 0x1600
    56a0:	26007902 	strcs	r7, [r0], -r2, lsl #18
    56a4:	78025201 	stmdavc	r2, {r0, r9, ip, lr}
    56a8:	51012600 	tstpl	r1, r0, lsl #12
    56ac:	26007702 	strcs	r7, [r0], -r2, lsl #14
    56b0:	7a025001 	bvc	996bc <_Min_Stack_Size+0x992bc>
    56b4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    56b8:	00001b8b 	andeq	r1, r0, fp, lsl #23
    56bc:	180ad001 	stmdane	sl, {r0, ip, lr, pc}
    56c0:	fc000002 	stc2	0, cr0, [r0], {2}
    56c4:	cc08002d 	stcgt	0, cr0, [r8], {45}	; 0x2d
    56c8:	01000000 	mrseq	r0, (UNDEF: 0)
    56cc:	0025c49c 	mlaeq	r5, ip, r4, ip
    56d0:	1f7d2a00 	svcne	0x007d2a00
    56d4:	d0010000 	andle	r0, r1, r0
    56d8:	0006450a 	andeq	r4, r6, sl, lsl #10
    56dc:	00367800 	eorseq	r7, r6, r0, lsl #16
    56e0:	1d4d2800 	stclne	8, cr2, [sp, #-0]
    56e4:	d0010000 	andle	r0, r1, r0
    56e8:	0000a20a 	andeq	sl, r0, sl, lsl #4
    56ec:	2a510100 	bcs	1445af4 <_Min_Stack_Size+0x14456f4>
    56f0:	000021a4 	andeq	r2, r0, r4, lsr #3
    56f4:	a20ad001 	andge	sp, sl, #1
    56f8:	cb000000 	blgt	5700 <_Min_Stack_Size+0x5300>
    56fc:	2a000036 	bcs	57dc <_Min_Stack_Size+0x53dc>
    5700:	00001834 	andeq	r1, r0, r4, lsr r8
    5704:	a20ad001 	andge	sp, sl, #1
    5708:	05000000 	streq	r0, [r0, #-0]
    570c:	2a000037 	bcs	57f0 <_Min_Stack_Size+0x53f0>
    5710:	000021d7 	ldrdeq	r2, [r0], -r7
    5714:	d60ad001 	strle	sp, [sl], -r1
    5718:	58000005 	stmdapl	r0, {r0, r2}
    571c:	2a000037 	bcs	5800 <_Min_Stack_Size+0x5400>
    5720:	00002d42 	andeq	r2, r0, r2, asr #26
    5724:	a20ad001 	andge	sp, sl, #1
    5728:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    572c:	2d000037 	stccs	0, cr0, [r0, #-220]	; 0xffffff24
    5730:	000018fe 	strdeq	r1, [r0], -lr
    5734:	ca0ad201 	bgt	2b9f40 <_Min_Stack_Size+0x2b9b40>
    5738:	02000000 	andeq	r0, r0, #0
    573c:	29006491 	stmdbcs	r0, {r0, r4, r7, sl, sp, lr}
    5740:	0000215a 	andeq	r2, r0, sl, asr r1
    5744:	180b2501 	stmdane	fp, {r0, r8, sl, sp}
    5748:	c8000002 	stmdagt	r0, {r1}
    574c:	dc08002e 	stcle	0, cr0, [r8], {46}	; 0x2e
    5750:	01000000 	mrseq	r0, (UNDEF: 0)
    5754:	00264c9c 	mlaeq	r6, ip, ip, r4
    5758:	1f7d2a00 	svcne	0x007d2a00
    575c:	25010000 	strcs	r0, [r1, #-0]
    5760:	0006450b 	andeq	r4, r6, fp, lsl #10
    5764:	00379800 	eorseq	r9, r7, r0, lsl #16
    5768:	1d4d2800 	stclne	8, cr2, [sp, #-0]
    576c:	25010000 	strcs	r0, [r1, #-0]
    5770:	0000a20b 	andeq	sl, r0, fp, lsl #4
    5774:	2a510100 	bcs	1445b7c <_Min_Stack_Size+0x144577c>
    5778:	000021a4 	andeq	r2, r0, r4, lsr #3
    577c:	a20b2501 	andge	r2, fp, #4194304	; 0x400000
    5780:	04000000 	streq	r0, [r0], #-0
    5784:	2a000038 	bcs	586c <_Min_Stack_Size+0x546c>
    5788:	00001834 	andeq	r1, r0, r4, lsr r8
    578c:	a20b2501 	andge	r2, fp, #4194304	; 0x400000
    5790:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5794:	2a000038 	bcs	587c <_Min_Stack_Size+0x547c>
    5798:	000021d7 	ldrdeq	r2, [r0], -r7
    579c:	d60b2501 	strle	r2, [fp], -r1, lsl #10
    57a0:	91000005 	tstls	r0, r5
    57a4:	2a000038 	bcs	588c <_Min_Stack_Size+0x548c>
    57a8:	00002d42 	andeq	r2, r0, r2, asr #26
    57ac:	a20b2501 	andge	r2, fp, #4194304	; 0x400000
    57b0:	b1000000 	mrslt	r0, (UNDEF: 0)
    57b4:	2d000038 	stccs	0, cr0, [r0, #-224]	; 0xffffff20
    57b8:	000018fe 	strdeq	r1, [r0], -lr
    57bc:	ca0b2701 	bgt	2cf3c8 <_Min_Stack_Size+0x2cefc8>
    57c0:	02000000 	andeq	r0, r0, #0
    57c4:	29006491 	stmdbcs	r0, {r0, r4, r7, sl, sp, lr}
    57c8:	00002144 	andeq	r2, r0, r4, asr #2
    57cc:	180b7f01 	stmdane	fp, {r0, r8, r9, sl, fp, ip, sp, lr}
    57d0:	a4000002 	strge	r0, [r0], #-2
    57d4:	3808002f 	stmdacc	r8, {r0, r1, r2, r3, r5}
    57d8:	01000001 	tsteq	r0, r1
    57dc:	0027579c 	mlaeq	r7, ip, r7, r5
    57e0:	1f7d2a00 	svcne	0x007d2a00
    57e4:	7f010000 	svcvc	0x00010000
    57e8:	0006450b 	andeq	r4, r6, fp, lsl #10
    57ec:	0038d100 	eorseq	sp, r8, r0, lsl #2
    57f0:	1d4d2a00 	vstrne	s5, [sp, #-0]
    57f4:	7f010000 	svcvc	0x00010000
    57f8:	0000a20b 	andeq	sl, r0, fp, lsl #4
    57fc:	0038ef00 	eorseq	lr, r8, r0, lsl #30
    5800:	21a42a00 			; <UNDEFINED> instruction: 0x21a42a00
    5804:	7f010000 	svcvc	0x00010000
    5808:	0000a20b 	andeq	sl, r0, fp, lsl #4
    580c:	00391000 	eorseq	r1, r9, r0
    5810:	18342a00 	ldmdane	r4!, {r9, fp, sp}
    5814:	7f010000 	svcvc	0x00010000
    5818:	0000a20b 	andeq	sl, r0, fp, lsl #4
    581c:	00393100 	eorseq	r3, r9, r0, lsl #2
    5820:	21d72a00 	bicscs	r2, r7, r0, lsl #20
    5824:	7f010000 	svcvc	0x00010000
    5828:	0005d60b 	andeq	sp, r5, fp, lsl #12
    582c:	00395200 	eorseq	r5, r9, r0, lsl #4
    5830:	2d422a00 	vstrcs	s5, [r2, #-0]
    5834:	7f010000 	svcvc	0x00010000
    5838:	0000a20b 	andeq	sl, r0, fp, lsl #4
    583c:	00397200 	eorseq	r7, r9, r0, lsl #4
    5840:	18fe2d00 	ldmne	lr!, {r8, sl, fp, sp}^
    5844:	81010000 	mrshi	r0, (UNDEF: 1)
    5848:	0000ca0b 	andeq	ip, r0, fp, lsl #20
    584c:	58910200 	ldmpl	r1, {r9}
    5850:	000eec2b 	andeq	lr, lr, fp, lsr #24
    5854:	0b830100 	bleq	fe0c5c5c <_estack+0xde095c5c>
    5858:	000000b8 	strheq	r0, [r0], -r8
    585c:	00003992 	muleq	r0, r2, r9
    5860:	0030a422 	eorseq	sl, r0, r2, lsr #8
    5864:	00000e08 	andeq	r0, r0, r8, lsl #28
    5868:	00270200 	eoreq	r0, r7, r0, lsl #4
    586c:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    5870:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    5874:	0000ca0b 	andeq	ip, r0, fp, lsl #20
    5878:	5c910200 	lfmpl	f0, 4, [r1], {0}
    587c:	2fbe1b00 	svccs	0x00be1b00
    5880:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    5884:	7e310000 	cdpvc	0, 3, cr0, cr1, cr0, {0}
    5888:	b6080030 			; <UNDEFINED> instruction: 0xb6080030
    588c:	26000037 			; <UNDEFINED> instruction: 0x26000037
    5890:	26000027 	strcs	r0, [r0], -r7, lsr #32
    5894:	75025301 	strvc	r5, [r2, #-769]	; 0xfffffcff
    5898:	51012600 	tstpl	r1, r0, lsl #12
    589c:	06009103 	streq	r9, [r0], -r3, lsl #2
    58a0:	30922500 	addscc	r2, r2, r0, lsl #10
    58a4:	069f0800 	ldreq	r0, [pc], r0, lsl #16
    58a8:	01260000 			; <UNDEFINED> instruction: 0x01260000
    58ac:	00760253 	rsbseq	r0, r6, r3, asr r2
    58b0:	02520126 	subseq	r0, r2, #-2147483639	; 0x80000009
    58b4:	01260077 			; <UNDEFINED> instruction: 0x01260077
    58b8:	00780251 	rsbseq	r0, r8, r1, asr r2
    58bc:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
    58c0:	02260074 	eoreq	r0, r6, #116	; 0x74
    58c4:	7902047d 	stmdbvc	r2, {r0, r2, r3, r4, r5, r6, sl}
    58c8:	7d022600 	stcvc	6, cr2, [r2, #-0]
    58cc:	23080200 	movwcs	r0, #33280	; 0x8200
    58d0:	da290000 	ble	a458d8 <_Min_Stack_Size+0xa454d8>
    58d4:	01000016 	tsteq	r0, r6, lsl r0
    58d8:	02180bf9 	andseq	r0, r8, #254976	; 0x3e400
    58dc:	30dc0000 	sbcscc	r0, ip, r0
    58e0:	01880800 	orreq	r0, r8, r0, lsl #16
    58e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    58e8:	000028ad 	andeq	r2, r0, sp, lsr #17
    58ec:	001f7d2a 	andseq	r7, pc, sl, lsr #26
    58f0:	0bf90100 	bleq	ffe45cf8 <_estack+0xdfe15cf8>
    58f4:	00000645 	andeq	r0, r0, r5, asr #12
    58f8:	000039bc 			; <UNDEFINED> instruction: 0x000039bc
    58fc:	001d4d2a 	andseq	r4, sp, sl, lsr #26
    5900:	0bf90100 	bleq	ffe45d08 <_estack+0xdfe15d08>
    5904:	000000a2 	andeq	r0, r0, r2, lsr #1
    5908:	000039da 	ldrdeq	r3, [r0], -sl
    590c:	0021a42a 	eoreq	sl, r1, sl, lsr #8
    5910:	0bf90100 	bleq	ffe45d18 <_estack+0xdfe15d18>
    5914:	000000a2 	andeq	r0, r0, r2, lsr #1
    5918:	000039fb 	strdeq	r3, [r0], -fp
    591c:	0018342a 	andseq	r3, r8, sl, lsr #8
    5920:	0bf90100 	bleq	ffe45d28 <_estack+0xdfe15d28>
    5924:	000000a2 	andeq	r0, r0, r2, lsr #1
    5928:	00003a1c 	andeq	r3, r0, ip, lsl sl
    592c:	0021d72a 	eoreq	sp, r1, sl, lsr #14
    5930:	0bf90100 	bleq	ffe45d38 <_estack+0xdfe15d38>
    5934:	000005d6 	ldrdeq	r0, [r0], -r6
    5938:	00003a3d 	andeq	r3, r0, sp, lsr sl
    593c:	002d422a 	eoreq	r4, sp, sl, lsr #4
    5940:	0bf90100 	bleq	ffe45d48 <_estack+0xdfe15d48>
    5944:	000000a2 	andeq	r0, r0, r2, lsr #1
    5948:	00003a5d 	andeq	r3, r0, sp, asr sl
    594c:	000eec2b 	andeq	lr, lr, fp, lsr #24
    5950:	0bfb0100 	bleq	ffec5d58 <_estack+0xdfe95d58>
    5954:	000000b8 	strheq	r0, [r0], -r8
    5958:	00003a7d 	andeq	r3, r0, sp, ror sl
    595c:	0018fe2d 	andseq	pc, r8, sp, lsr #28
    5960:	0c000100 	stfeqs	f0, [r0], {-0}
    5964:	000000ca 	andeq	r0, r0, sl, asr #1
    5968:	22549102 	subscs	r9, r4, #-2147483648	; 0x80000000
    596c:	080031d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, ip, sp}
    5970:	0000000e 	andeq	r0, r0, lr
    5974:	0000280d 	andeq	r2, r0, sp, lsl #16
    5978:	0001b52d 	andeq	fp, r1, sp, lsr #10
    597c:	0c5d0100 	ldfeqe	f0, [sp], {-0}
    5980:	000000ca 	andeq	r0, r0, sl, asr #1
    5984:	00589102 	subseq	r9, r8, r2, lsl #2
    5988:	00321022 	eorseq	r1, r2, r2, lsr #32
    598c:	00000e08 	andeq	r0, r0, r8, lsl #28
    5990:	00282a00 	eoreq	r2, r8, r0, lsl #20
    5994:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    5998:	7f010000 	svcvc	0x00010000
    599c:	0000ca0c 	andeq	ip, r0, ip, lsl #20
    59a0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    59a4:	30f21b00 	rscscc	r1, r2, r0, lsl #22
    59a8:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    59ac:	b0310000 	eorslt	r0, r1, r0
    59b0:	b6080031 			; <UNDEFINED> instruction: 0xb6080031
    59b4:	48000037 	stmdami	r0, {r0, r1, r2, r4, r5}
    59b8:	26000028 	strcs	r0, [r0], -r8, lsr #32
    59bc:	91035201 	tstls	r3, r1, lsl #4
    59c0:	31000600 	tstcc	r0, r0, lsl #12
    59c4:	080031c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, sp}
    59c8:	00000707 	andeq	r0, r0, r7, lsl #14
    59cc:	0000287c 	andeq	r2, r0, ip, ror r8
    59d0:	02530126 	subseq	r0, r3, #-2147483639	; 0x80000009
    59d4:	01260076 			; <UNDEFINED> instruction: 0x01260076
    59d8:	00770252 	rsbseq	r0, r7, r2, asr r2
    59dc:	02510126 	subseq	r0, r1, #-2147483639	; 0x80000009
    59e0:	01260078 			; <UNDEFINED> instruction: 0x01260078
    59e4:	00740250 	rsbseq	r0, r4, r0, asr r2
    59e8:	047d0226 	ldrbteq	r0, [sp], #-550	; 0xfffffdda
    59ec:	26007902 	strcs	r7, [r0], -r2, lsl #18
    59f0:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    59f4:	25002308 	strcs	r2, [r0, #-776]	; 0xfffffcf8
    59f8:	0800320e 	stmdaeq	r0, {r1, r2, r3, r9, ip, sp}
    59fc:	00000707 	andeq	r0, r0, r7, lsl #14
    5a00:	02530126 	subseq	r0, r3, #-2147483639	; 0x80000009
    5a04:	01260076 			; <UNDEFINED> instruction: 0x01260076
    5a08:	00770252 	rsbseq	r0, r7, r2, asr r2
    5a0c:	02510126 	subseq	r0, r1, #-2147483639	; 0x80000009
    5a10:	01260078 			; <UNDEFINED> instruction: 0x01260078
    5a14:	00740250 	rsbseq	r0, r4, r0, asr r2
    5a18:	047d0226 	ldrbteq	r0, [sp], #-550	; 0xfffffdda
    5a1c:	26007902 	strcs	r7, [r0], -r2, lsl #18
    5a20:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    5a24:	00002308 	andeq	r2, r0, r8, lsl #6
    5a28:	0017e529 	andseq	lr, r7, r9, lsr #10
    5a2c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    5a30:	00000218 	andeq	r0, r0, r8, lsl r2
    5a34:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
    5a38:	000001d8 	ldrdeq	r0, [r0], -r8
    5a3c:	2b379c01 	blcs	deca48 <_Min_Stack_Size+0xdec648>
    5a40:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    5a44:	0100001f 	tsteq	r0, pc, lsl r0
    5a48:	06450c9c 			; <UNDEFINED> instruction: 0x06450c9c
    5a4c:	3aa70000 	bcc	fe9c5a54 <_estack+0xde995a54>
    5a50:	4d2a0000 	stcmi	0, cr0, [sl, #-0]
    5a54:	0100001d 	tsteq	r0, sp, lsl r0
    5a58:	00a20c9c 	umlaleq	r0, r2, ip, ip
    5a5c:	3ac50000 	bcc	ff145a64 <_estack+0xdf115a64>
    5a60:	e02a0000 	eor	r0, sl, r0
    5a64:	01000019 	tsteq	r0, r9, lsl r0
    5a68:	00b80c9c 	umlalseq	r0, r8, ip, ip
    5a6c:	3ae60000 	bcc	ff985a74 <_estack+0xdf955a74>
    5a70:	182a0000 	stmdane	sl!, {}	; <UNPREDICTABLE>
    5a74:	0100002c 	tsteq	r0, ip, lsr #32
    5a78:	00b80c9c 	umlalseq	r0, r8, ip, ip
    5a7c:	3b040000 	blcc	105a84 <_Min_Stack_Size+0x105684>
    5a80:	ec2b0000 	stc	0, cr0, [fp], #-0
    5a84:	0100000e 	tsteq	r0, lr
    5a88:	00b80c9e 	umlalseq	r0, r8, lr, ip
    5a8c:	3b220000 	blcc	885a94 <_Min_Stack_Size+0x885694>
    5a90:	0e2b0000 	cdpeq	0, 2, cr0, cr11, cr0, {0}
    5a94:	01000017 	tsteq	r0, r7, lsl r0
    5a98:	00b80c9e 	umlalseq	r0, r8, lr, ip
    5a9c:	3b620000 	blcc	1885aa4 <_Min_Stack_Size+0x18856a4>
    5aa0:	442b0000 	strtmi	r0, [fp], #-0
    5aa4:	01000017 	tsteq	r0, r7, lsl r0
    5aa8:	00b80c9e 	umlalseq	r0, r8, lr, ip
    5aac:	3be20000 	blcc	ff885ab4 <_estack+0xdf855ab4>
    5ab0:	492b0000 	stmdbmi	fp!, {}	; <UNPREDICTABLE>
    5ab4:	01000017 	tsteq	r0, r7, lsl r0
    5ab8:	00b80c9e 	umlalseq	r0, r8, lr, ip
    5abc:	3c6e0000 	stclcc	0, cr0, [lr], #-0
    5ac0:	dc2b0000 	stcle	0, cr0, [fp], #-0
    5ac4:	01000019 	tsteq	r0, r9, lsl r0
    5ac8:	00b80c9e 	umlalseq	r0, r8, lr, ip
    5acc:	3cc60000 	stclcc	0, cr0, [r6], {0}
    5ad0:	f71c0000 			; <UNDEFINED> instruction: 0xf71c0000
    5ad4:	88000005 	stmdahi	r0, {r0, r2}
    5ad8:	f8080032 			; <UNDEFINED> instruction: 0xf8080032
    5adc:	0100000b 	tsteq	r0, fp
    5ae0:	29c50ca6 	stmibcs	r5, {r1, r2, r5, r7, sl, fp}^
    5ae4:	14200000 	strtne	r0, [r0], #-0
    5ae8:	20000006 	andcs	r0, r0, r6
    5aec:	00000620 	andeq	r0, r0, r0, lsr #12
    5af0:	00062c20 	andeq	r2, r6, r0, lsr #24
    5af4:	06382000 	ldrteq	r2, [r8], -r0
    5af8:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    5afc:	1f000006 	svcne	0x00000006
    5b00:	00000c18 	andeq	r0, r0, r8, lsl ip
    5b04:	000029bb 			; <UNDEFINED> instruction: 0x000029bb
    5b08:	00061419 	andeq	r1, r6, r9, lsl r4
    5b0c:	003d2600 	eorseq	r2, sp, r0, lsl #12
    5b10:	06201900 	strteq	r1, [r0], -r0, lsl #18
    5b14:	3d3e0000 	ldccc	0, cr0, [lr, #-0]
    5b18:	2c190000 	ldccs	0, cr0, [r9], {-0}
    5b1c:	52000006 	andpl	r0, r0, #6
    5b20:	1900003d 	stmdbne	r0, {r0, r2, r3, r4, r5}
    5b24:	00000638 	andeq	r0, r0, r8, lsr r6
    5b28:	00003d66 	andeq	r3, r0, r6, ror #26
    5b2c:	00060819 	andeq	r0, r6, r9, lsl r8
    5b30:	003d7900 	eorseq	r7, sp, r0, lsl #18
    5b34:	8c1b0000 	ldchi	0, cr0, [fp], {-0}
    5b38:	9f080032 	svcls	0x00080032
    5b3c:	00000037 	andeq	r0, r0, r7, lsr r0
    5b40:	0005f71c 	andeq	pc, r5, ip, lsl r7	; <UNPREDICTABLE>
    5b44:	0032e600 	eorseq	lr, r2, r0, lsl #12
    5b48:	000c3008 	andeq	r3, ip, r8
    5b4c:	0cc20100 	stfeqe	f0, [r2], {0}
    5b50:	00002a43 	andeq	r2, r0, r3, asr #20
    5b54:	00061419 	andeq	r1, r6, r9, lsl r4
    5b58:	003d8c00 	eorseq	r8, sp, r0, lsl #24
    5b5c:	06201900 	strteq	r1, [r0], -r0, lsl #18
    5b60:	3db40000 	ldccc	0, cr0, [r4]
    5b64:	38190000 	ldmdacc	r9, {}	; <UNPREDICTABLE>
    5b68:	d4000006 	strle	r0, [r0], #-6
    5b6c:	1900003d 	stmdbne	r0, {r0, r2, r3, r4, r5}
    5b70:	0000062c 	andeq	r0, r0, ip, lsr #12
    5b74:	00003e08 	andeq	r3, r0, r8, lsl #28
    5b78:	00060820 	andeq	r0, r6, r0, lsr #16
    5b7c:	0c581f00 	mrrceq	15, 0, r1, r8, cr0
    5b80:	2a390000 	bcs	e45b88 <_Min_Stack_Size+0xe45788>
    5b84:	14190000 	ldrne	r0, [r9], #-0
    5b88:	26000006 	strcs	r0, [r0], -r6
    5b8c:	1900003e 	stmdbne	r0, {r1, r2, r3, r4, r5}
    5b90:	00000620 	andeq	r0, r0, r0, lsr #12
    5b94:	00003e3e 	andeq	r3, r0, lr, lsr lr
    5b98:	00062c19 	andeq	r2, r6, r9, lsl ip
    5b9c:	003e5200 	eorseq	r5, lr, r0, lsl #4
    5ba0:	06381900 	ldrteq	r1, [r8], -r0, lsl #18
    5ba4:	3e650000 	cdpcc	0, 6, cr0, cr5, cr0, {0}
    5ba8:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    5bac:	78000006 	stmdavc	r0, {r1, r2}
    5bb0:	0000003e 	andeq	r0, r0, lr, lsr r0
    5bb4:	0033b41b 	eorseq	fp, r3, fp, lsl r4
    5bb8:	00379f08 	eorseq	r9, r7, r8, lsl #30
    5bbc:	f71c0000 			; <UNDEFINED> instruction: 0xf71c0000
    5bc0:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    5bc4:	70080033 	andvc	r0, r8, r3, lsr r0
    5bc8:	0100000c 	tsteq	r0, ip
    5bcc:	2ac10cfd 	bcs	ff048fc8 <_estack+0xdf018fc8>
    5bd0:	14190000 	ldrne	r0, [r9], #-0
    5bd4:	8b000006 	blhi	5bf4 <_Min_Stack_Size+0x57f4>
    5bd8:	1900003e 	stmdbne	r0, {r1, r2, r3, r4, r5}
    5bdc:	00000620 	andeq	r0, r0, r0, lsr #12
    5be0:	00003ea3 	andeq	r3, r0, r3, lsr #29
    5be4:	00062c19 	andeq	r2, r6, r9, lsl ip
    5be8:	003eb700 	eorseq	fp, lr, r0, lsl #14
    5bec:	06381900 	ldrteq	r1, [r8], -r0, lsl #18
    5bf0:	3ecb0000 	cdpcc	0, 12, cr0, cr11, cr0, {0}
    5bf4:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    5bf8:	1f000006 	svcne	0x00000006
    5bfc:	00000c90 	muleq	r0, r0, ip
    5c00:	00002ab7 			; <UNDEFINED> instruction: 0x00002ab7
    5c04:	00061419 	andeq	r1, r6, r9, lsl r4
    5c08:	003ede00 	eorseq	sp, lr, r0, lsl #28
    5c0c:	06201900 	strteq	r1, [r0], -r0, lsl #18
    5c10:	3ef60000 	cdpcc	0, 15, cr0, cr6, cr0, {0}
    5c14:	2c190000 	ldccs	0, cr0, [r9], {-0}
    5c18:	0a000006 	beq	5c38 <_Min_Stack_Size+0x5838>
    5c1c:	1900003f 	stmdbne	r0, {r0, r1, r2, r3, r4, r5}
    5c20:	00000638 	andeq	r0, r0, r8, lsr r6
    5c24:	00003f1e 	andeq	r3, r0, lr, lsl pc
    5c28:	00060819 	andeq	r0, r6, r9, lsl r8
    5c2c:	003f3100 	eorseq	r3, pc, r0, lsl #2
    5c30:	521b0000 	andspl	r0, fp, #0
    5c34:	9f080033 	svcls	0x00080033
    5c38:	00000037 	andeq	r0, r0, r7, lsr r0
    5c3c:	000ca81f 	andeq	sl, ip, pc, lsl r8
    5c40:	002ada00 	eoreq	sp, sl, r0, lsl #20
    5c44:	01b52d00 			; <UNDEFINED> instruction: 0x01b52d00
    5c48:	e5010000 	str	r0, [r1, #-0]
    5c4c:	0000ca0c 	andeq	ip, r0, ip, lsl #20
    5c50:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    5c54:	05f72e00 	ldrbeq	r2, [r7, #3584]!	; 0xe00
    5c58:	34120000 	ldrcc	r0, [r2], #-0
    5c5c:	00160800 	andseq	r0, r6, r0, lsl #16
    5c60:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    5c64:	002b1b0c 	eoreq	r1, fp, ip, lsl #22
    5c68:	06141a00 	ldreq	r1, [r4], -r0, lsl #20
    5c6c:	00020000 	andeq	r0, r2, r0
    5c70:	201d0010 	andscs	r0, sp, r0, lsl r0
    5c74:	01000006 	tsteq	r0, r6
    5c78:	00062c1d 	andeq	r2, r6, sp, lsl ip
    5c7c:	381e1900 	ldmdacc	lr, {r8, fp, ip}
    5c80:	01000006 	tsteq	r0, r6
    5c84:	06081e56 			; <UNDEFINED> instruction: 0x06081e56
    5c88:	55010000 	strpl	r0, [r1, #-0]
    5c8c:	0034161b 	eorseq	r1, r4, fp, lsl r6
    5c90:	00379f08 	eorseq	r9, r7, r8, lsl #30
    5c94:	761b0000 	ldrvc	r0, [fp], -r0
    5c98:	9f080032 	svcls	0x00080032
    5c9c:	1b000037 	blne	5d80 <_Min_Stack_Size+0x5980>
    5ca0:	080032f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, sp}
    5ca4:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    5ca8:	0033881b 	eorseq	r8, r3, fp, lsl r8
    5cac:	00379f08 	eorseq	r9, r7, r8, lsl #30
    5cb0:	da270000 	ble	9c5cb8 <_Min_Stack_Size+0x9c58b8>
    5cb4:	01000018 	tsteq	r0, r8, lsl r0
    5cb8:	343c0dcb 	ldrtcc	r0, [ip], #-3531	; 0xfffff235
    5cbc:	00020800 	andeq	r0, r2, r0, lsl #16
    5cc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5cc4:	00002b5c 	andeq	r2, r0, ip, asr fp
    5cc8:	001f7d28 	andseq	r7, pc, r8, lsr #26
    5ccc:	0dcb0100 	stfeqe	f0, [fp]
    5cd0:	00000645 	andeq	r0, r0, r5, asr #12
    5cd4:	27005001 	strcs	r5, [r0, -r1]
    5cd8:	00001fa0 	andeq	r1, r0, r0, lsr #31
    5cdc:	400ddb01 	andmi	sp, sp, r1, lsl #22
    5ce0:	02080034 	andeq	r0, r8, #52	; 0x34
    5ce4:	01000000 	mrseq	r0, (UNDEF: 0)
    5ce8:	002b819c 	mlaeq	fp, ip, r1, r8
    5cec:	1f7d2800 	svcne	0x007d2800
    5cf0:	db010000 	blle	45cf8 <_Min_Stack_Size+0x458f8>
    5cf4:	0006450d 	andeq	r4, r6, sp, lsl #10
    5cf8:	00500100 	subseq	r0, r0, r0, lsl #2
    5cfc:	001df627 	andseq	pc, sp, r7, lsr #12
    5d00:	0dea0100 	stfeqe	f0, [sl]
    5d04:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
    5d08:	00000002 	andeq	r0, r0, r2
    5d0c:	2ba69c01 	blcs	fe9acd18 <_estack+0xde97cd18>
    5d10:	7d280000 	stcvc	0, cr0, [r8, #-0]
    5d14:	0100001f 	tsteq	r0, pc, lsl r0
    5d18:	06450dea 	strbeq	r0, [r5], -sl, ror #27
    5d1c:	50010000 	andpl	r0, r1, r0
    5d20:	193e2700 	ldmdbne	lr!, {r8, r9, sl, sp}
    5d24:	fa010000 	blx	45d2c <_Min_Stack_Size+0x4592c>
    5d28:	0034480d 	eorseq	r4, r4, sp, lsl #16
    5d2c:	00000208 	andeq	r0, r0, r8, lsl #4
    5d30:	cb9c0100 	blgt	fe706138 <_estack+0xde6d6138>
    5d34:	2800002b 	stmdacs	r0, {r0, r1, r3, r5}
    5d38:	00001f7d 	andeq	r1, r0, sp, ror pc
    5d3c:	450dfa01 	strmi	pc, [sp, #-2561]	; 0xfffff5ff
    5d40:	01000006 	tsteq	r0, r6
    5d44:	93270050 			; <UNDEFINED> instruction: 0x93270050
    5d48:	01000018 	tsteq	r0, r8, lsl r0
    5d4c:	344c0e0c 	strbcc	r0, [ip], #-3596	; 0xfffff1f4
    5d50:	00020800 	andeq	r0, r2, r0, lsl #16
    5d54:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d58:	00002c0c 	andeq	r2, r0, ip, lsl #24
    5d5c:	001f7d28 	andseq	r7, pc, r8, lsr #26
    5d60:	0e0c0100 	adfeqe	f0, f4, f0
    5d64:	00000645 	andeq	r0, r0, r5, asr #12
    5d68:	bd285001 	stclt	0, cr5, [r8, #-4]!
    5d6c:	0100001f 	tsteq	r0, pc, lsl r0
    5d70:	00970e0c 	addseq	r0, r7, ip, lsl #28
    5d74:	51010000 	mrspl	r0, (UNDEF: 1)
    5d78:	00197028 	andseq	r7, r9, r8, lsr #32
    5d7c:	0e0c0100 	adfeqe	f0, f4, f0
    5d80:	000000a2 	andeq	r0, r0, r2, lsr #1
    5d84:	27005201 	strcs	r5, [r0, -r1, lsl #4]
    5d88:	000017b7 			; <UNDEFINED> instruction: 0x000017b7
    5d8c:	500e1e01 	andpl	r1, lr, r1, lsl #28
    5d90:	02080034 	andeq	r0, r8, #52	; 0x34
    5d94:	01000000 	mrseq	r0, (UNDEF: 0)
    5d98:	002c319c 	mlaeq	ip, ip, r1, r3
    5d9c:	1f7d2800 	svcne	0x007d2800
    5da0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    5da4:	0006450e 	andeq	r4, r6, lr, lsl #10
    5da8:	00500100 	subseq	r0, r0, r0, lsl #2
    5dac:	00205f27 	eoreq	r5, r0, r7, lsr #30
    5db0:	0e2e0100 	sufeqe	f0, f6, f0
    5db4:	08003454 	stmdaeq	r0, {r2, r4, r6, sl, ip, sp}
    5db8:	00000002 	andeq	r0, r0, r2
    5dbc:	2c569c01 	mrrccs	12, 0, r9, r6, cr1
    5dc0:	7d280000 	stcvc	0, cr0, [r8, #-0]
    5dc4:	0100001f 	tsteq	r0, pc, lsl r0
    5dc8:	06450e2e 	strbeq	r0, [r5], -lr, lsr #28
    5dcc:	50010000 	andpl	r0, r1, r0
    5dd0:	180b2700 	stmdane	fp, {r8, r9, sl, sp}
    5dd4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5dd8:	0034580e 	eorseq	r5, r4, lr, lsl #16
    5ddc:	00000208 	andeq	r0, r0, r8, lsl #4
    5de0:	7b9c0100 	blvc	fe7061e8 <_estack+0xde6d61e8>
    5de4:	2800002c 	stmdacs	r0, {r2, r3, r5}
    5de8:	00001f7d 	andeq	r1, r0, sp, ror pc
    5dec:	450e3e01 	strmi	r3, [lr, #-3585]	; 0xfffff1ff
    5df0:	01000006 	tsteq	r0, r6
    5df4:	5b270050 	blpl	9c5f3c <_Min_Stack_Size+0x9c5b3c>
    5df8:	0100001e 	tsteq	r0, lr, lsl r0
    5dfc:	345c0e4e 	ldrbcc	r0, [ip], #-3662	; 0xfffff1b2
    5e00:	00020800 	andeq	r0, r2, r0, lsl #16
    5e04:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e08:	00002ca0 	andeq	r2, r0, r0, lsr #25
    5e0c:	001f7d28 	andseq	r7, pc, r8, lsr #26
    5e10:	0e4e0100 	dvfeqe	f0, f6, f0
    5e14:	00000645 	andeq	r0, r0, r5, asr #12
    5e18:	32005001 	andcc	r5, r0, #1
    5e1c:	00001b70 	andeq	r1, r0, r0, ror fp
    5e20:	60143101 	andsvs	r3, r4, r1, lsl #2
    5e24:	2a080034 	bcs	205efc <_Min_Stack_Size+0x205afc>
    5e28:	01000000 	mrseq	r0, (UNDEF: 0)
    5e2c:	002ce09c 	mlaeq	ip, ip, r0, lr
    5e30:	1b542a00 	blne	1510638 <_Min_Stack_Size+0x1510238>
    5e34:	31010000 	mrscc	r0, (UNDEF: 1)
    5e38:	0005dc14 	andeq	sp, r5, r4, lsl ip
    5e3c:	003f4400 	eorseq	r4, pc, r0, lsl #8
    5e40:	1f7d2b00 	svcne	0x007d2b00
    5e44:	33010000 	movwcc	r0, #4096	; 0x1000
    5e48:	00064514 	andeq	r4, r6, r4, lsl r5
    5e4c:	003f6500 	eorseq	r6, pc, r0, lsl #10
    5e50:	34881b00 	strcc	r1, [r8], #2816	; 0xb00
    5e54:	2c7b0800 	ldclcs	8, cr0, [fp], #-0
    5e58:	32000000 	andcc	r0, r0, #0
    5e5c:	00001a3d 	andeq	r1, r0, sp, lsr sl
    5e60:	8c13f101 	ldfhid	f7, [r3], {1}
    5e64:	82080034 	andhi	r0, r8, #52	; 0x34
    5e68:	01000000 	mrseq	r0, (UNDEF: 0)
    5e6c:	002d529c 	mlaeq	sp, ip, r2, r5
    5e70:	1b542a00 	blne	1510678 <_Min_Stack_Size+0x1510278>
    5e74:	f1010000 	setend	le
    5e78:	0005dc13 	andeq	sp, r5, r3, lsl ip
    5e7c:	003f7800 	eorseq	r7, pc, r0, lsl #16
    5e80:	1f7d2b00 	svcne	0x007d2b00
    5e84:	f3010000 	vhadd.u8	d0, d1, d0
    5e88:	00064513 	andeq	r4, r6, r3, lsl r5
    5e8c:	003f9900 	eorseq	r9, pc, r0, lsl #18
    5e90:	1a052b00 	bne	150a98 <_Min_Stack_Size+0x150698>
    5e94:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    5e98:	0000b813 	andeq	fp, r0, r3, lsl r8
    5e9c:	003fc200 	eorseq	ip, pc, r0, lsl #4
    5ea0:	16242b00 	strtne	r2, [r4], -r0, lsl #22
    5ea4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    5ea8:	0000b813 	andeq	fp, r0, r3, lsl r8
    5eac:	003fe000 	eorseq	lr, pc, r0
    5eb0:	34e41b00 	strbtcc	r1, [r4], #2816	; 0xb00
    5eb4:	2b5c0800 	blcs	1707ebc <_Min_Stack_Size+0x1707abc>
    5eb8:	061b0000 	ldreq	r0, [fp], -r0
    5ebc:	56080035 			; <UNDEFINED> instruction: 0x56080035
    5ec0:	1b00002c 	blne	5f78 <_Min_Stack_Size+0x5b78>
    5ec4:	0800350c 	stmdaeq	r0, {r2, r3, r8, sl, ip, sp}
    5ec8:	00002c7b 	andeq	r2, r0, fp, ror ip
    5ecc:	15922700 	ldrne	r2, [r2, #1792]	; 0x700
    5ed0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    5ed4:	0035100e 	eorseq	r1, r5, lr
    5ed8:	00000208 	andeq	r0, r0, r8, lsl #4
    5edc:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    5ee0:	2800002d 	stmdacs	r0, {r0, r2, r3, r5}
    5ee4:	00001f7d 	andeq	r1, r0, sp, ror pc
    5ee8:	450e5e01 	strmi	r5, [lr, #-3585]	; 0xfffff1ff
    5eec:	01000006 	tsteq	r0, r6
    5ef0:	3d330050 	ldccc	0, cr0, [r3, #-320]!	; 0xfffffec0
    5ef4:	0100001e 	tsteq	r0, lr, lsl r0
    5ef8:	9d0111e1 	stflss	f1, [r1, #-900]	; 0xfffffc7c
    5efc:	1500002d 	strne	r0, [r0, #-45]	; 0xffffffd3
    5f00:	00001f7d 	andeq	r1, r0, sp, ror pc
    5f04:	4511e101 	ldrmi	lr, [r1, #-257]	; 0xfffffeff
    5f08:	17000006 	strne	r0, [r0, -r6]
    5f0c:	00001a05 	andeq	r1, r0, r5, lsl #20
    5f10:	b811e401 	ldmdalt	r1, {r0, sl, sp, lr, pc}
    5f14:	00000000 	andeq	r0, r0, r0
    5f18:	002d7734 	eoreq	r7, sp, r4, lsr r7
    5f1c:	00351400 	eorseq	r1, r5, r0, lsl #8
    5f20:	00013c08 	andeq	r3, r1, r8, lsl #24
    5f24:	0d9c0100 	ldfeqs	f0, [ip]
    5f28:	1900002e 	stmdbne	r0, {r1, r2, r3, r5}
    5f2c:	00002d84 	andeq	r2, r0, r4, lsl #27
    5f30:	00004008 	andeq	r4, r0, r8
    5f34:	002d902c 	eoreq	r9, sp, ip, lsr #32
    5f38:	00406800 	subeq	r6, r0, r0, lsl #16
    5f3c:	356a1b00 	strbcc	r1, [sl, #-2816]!	; 0xfffff500
    5f40:	37db0800 	ldrbcc	r0, [fp, r0, lsl #16]
    5f44:	96310000 	ldrtls	r0, [r1], -r0
    5f48:	7b080035 	blvc	206024 <_Min_Stack_Size+0x205c24>
    5f4c:	df00002c 	svcle	0x0000002c
    5f50:	2600002d 	strcs	r0, [r0], -sp, lsr #32
    5f54:	74025001 	strvc	r5, [r2], #-1
    5f58:	bc310000 	ldclt	0, cr0, [r1], #-0
    5f5c:	0c080035 	stceq	0, cr0, [r8], {53}	; 0x35
    5f60:	f300002c 	vhadd.u8	d0, d0, d28
    5f64:	2600002d 	strcs	r0, [r0], -sp, lsr #32
    5f68:	74025001 	strvc	r5, [r2], #-1
    5f6c:	d61b0000 	ldrle	r0, [fp], -r0
    5f70:	db080035 	blle	20604c <_Min_Stack_Size+0x205c4c>
    5f74:	25000037 	strcs	r0, [r0, #-55]	; 0xffffffc9
    5f78:	0800362c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, sp}
    5f7c:	00002d52 	andeq	r2, r0, r2, asr sp
    5f80:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
    5f84:	00000074 	andeq	r0, r0, r4, ror r0
    5f88:	001b2b29 	andseq	r2, fp, r9, lsr #22
    5f8c:	086f0100 	stmdaeq	pc!, {r8}^	; <UNPREDICTABLE>
    5f90:	00000218 	andeq	r0, r0, r8, lsl r2
    5f94:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
    5f98:	0000004c 	andeq	r0, r0, ip, asr #32
    5f9c:	2e599c01 	cdpcs	12, 5, cr9, cr9, cr1, {0}
    5fa0:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    5fa4:	0100001f 	tsteq	r0, pc, lsl r0
    5fa8:	0645086f 	strbeq	r0, [r5], -pc, ror #16
    5fac:	40950000 	addsmi	r0, r5, r0
    5fb0:	4d2a0000 	stcmi	0, cr0, [sl, #-0]
    5fb4:	0100001d 	tsteq	r0, sp, lsl r0
    5fb8:	00a2086f 	adceq	r0, r2, pc, ror #16
    5fbc:	40e80000 	rscmi	r0, r8, r0
    5fc0:	98250000 	stmdals	r5!, {}	; <UNPREDICTABLE>
    5fc4:	77080036 	smladxvc	r8, r6, r0, r0
    5fc8:	2600002d 	strcs	r0, [r0], -sp, lsr #32
    5fcc:	f3035001 	vhadd.u8	d5, d3, d1
    5fd0:	00005001 	andeq	r5, r0, r1
    5fd4:	00191e14 	andseq	r1, r9, r4, lsl lr
    5fd8:	0ff40100 	svceq	0x00f40100
    5fdc:	00000218 	andeq	r0, r0, r8, lsl r2
    5fe0:	002e7701 	eoreq	r7, lr, r1, lsl #14
    5fe4:	1f7d1500 	svcne	0x007d1500
    5fe8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    5fec:	0006450f 	andeq	r4, r6, pc, lsl #10
    5ff0:	b9140000 	ldmdblt	r4, {}	; <UNPREDICTABLE>
    5ff4:	01000020 	tsteq	r0, r0, lsr #32
    5ff8:	02181036 	andseq	r1, r8, #54	; 0x36
    5ffc:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    6000:	1500002f 	strne	r0, [r0, #-47]	; 0xffffffd1
    6004:	00001f7d 	andeq	r1, r0, sp, ror pc
    6008:	45103601 	ldrmi	r3, [r0, #-1537]	; 0xfffff9ff
    600c:	17000006 	strne	r0, [r0, -r6]
    6010:	00001624 	andeq	r1, r0, r4, lsr #12
    6014:	b8103901 	ldmdalt	r0, {r0, r8, fp, ip, sp}
    6018:	17000000 	strne	r0, [r0, -r0]
    601c:	00001ba0 	andeq	r1, r0, r0, lsr #23
    6020:	b8103a01 	ldmdalt	r0, {r0, r9, fp, ip, sp}
    6024:	17000000 	strne	r0, [r0, -r0]
    6028:	00001c6e 	andeq	r1, r0, lr, ror #24
    602c:	b8103b01 	ldmdalt	r0, {r0, r8, r9, fp, ip, sp}
    6030:	35000000 	strcc	r0, [r0, #-0]
    6034:	00002eca 	andeq	r2, r0, sl, asr #29
    6038:	0001b517 	andeq	fp, r1, r7, lsl r5
    603c:	10420100 	subne	r0, r2, r0, lsl #2
    6040:	000000ca 	andeq	r0, r0, sl, asr #1
    6044:	2edc3500 	cdpcs	5, 13, cr3, cr12, cr0, {0}
    6048:	b5170000 	ldrlt	r0, [r7, #-0]
    604c:	01000001 	tsteq	r0, r1
    6050:	00ca1047 	sbceq	r1, sl, r7, asr #32
    6054:	35000000 	strcc	r0, [r0, #-0]
    6058:	00002eee 	andeq	r2, r0, lr, ror #29
    605c:	0001b517 	andeq	fp, r1, r7, lsl r5
    6060:	10530100 	subsne	r0, r3, r0, lsl #2
    6064:	000000ca 	andeq	r0, r0, sl, asr #1
    6068:	2f003500 	svccs	0x00003500
    606c:	b5170000 	ldrlt	r0, [r7, #-0]
    6070:	01000001 	tsteq	r0, r1
    6074:	00ca1065 	sbceq	r1, sl, r5, rrx
    6078:	35000000 	strcc	r0, [r0, #-0]
    607c:	00002f12 	andeq	r2, r0, r2, lsl pc
    6080:	0001b517 	andeq	fp, r1, r7, lsl r5
    6084:	106a0100 	rsbne	r0, sl, r0, lsl #2
    6088:	000000ca 	andeq	r0, r0, sl, asr #1
    608c:	2f243500 	svccs	0x00243500
    6090:	b5170000 	ldrlt	r0, [r7, #-0]
    6094:	01000001 	tsteq	r0, r1
    6098:	00ca1080 	sbceq	r1, sl, r0, lsl #1
    609c:	35000000 	strcc	r0, [r0, #-0]
    60a0:	00002f36 	andeq	r2, r0, r6, lsr pc
    60a4:	0001b517 	andeq	fp, r1, r7, lsl r5
    60a8:	10880100 	addne	r0, r8, r0, lsl #2
    60ac:	000000ca 	andeq	r0, r0, sl, asr #1
    60b0:	2f483500 	svccs	0x00483500
    60b4:	b5170000 	ldrlt	r0, [r7, #-0]
    60b8:	01000001 	tsteq	r0, r1
    60bc:	00ca10a5 	sbceq	r1, sl, r5, lsr #1
    60c0:	35000000 	strcc	r0, [r0, #-0]
    60c4:	00002f5a 	andeq	r2, r0, sl, asr pc
    60c8:	0001b517 	andeq	fp, r1, r7, lsl r5
    60cc:	10b30100 	adcsne	r0, r3, r0, lsl #2
    60d0:	000000ca 	andeq	r0, r0, sl, asr #1
    60d4:	b5171600 	ldrlt	r1, [r7, #-1536]	; 0xfffffa00
    60d8:	01000001 	tsteq	r0, r1
    60dc:	00ca10bd 	strheq	r1, [sl], #13
    60e0:	00000000 	andeq	r0, r0, r0
    60e4:	001b5914 	andseq	r5, fp, r4, lsl r9
    60e8:	0ea70100 	fdveqs	f0, f7, f0
    60ec:	00000218 	andeq	r0, r0, r8, lsl r2
    60f0:	002fab01 	eoreq	sl, pc, r1, lsl #22
    60f4:	1f7d1500 	svcne	0x007d1500
    60f8:	a7010000 	strge	r0, [r1, -r0]
    60fc:	0006450e 	andeq	r4, r6, lr, lsl #10
    6100:	1a051700 	bne	14bd08 <_Min_Stack_Size+0x14b908>
    6104:	aa010000 	bge	4610c <_Min_Stack_Size+0x45d0c>
    6108:	0000b80e 	andeq	fp, r0, lr, lsl #16
    610c:	16241700 	strtne	r1, [r4], -r0, lsl #14
    6110:	ab010000 	blge	46118 <_Min_Stack_Size+0x45d18>
    6114:	0000b80e 	andeq	fp, r0, lr, lsl #16
    6118:	1ba01700 	blne	fe80bd20 <_estack+0xde7dbd20>
    611c:	ac010000 	stcge	0, cr0, [r1], {-0}
    6120:	0000b80e 	andeq	fp, r0, lr, lsl #16
    6124:	7c140000 	ldcvc	0, cr0, [r4], {-0}
    6128:	01000018 	tsteq	r0, r8, lsl r0
    612c:	02180f18 	andseq	r0, r8, #24, 30	; 0x60
    6130:	d5010000 	strle	r0, [r1, #-0]
    6134:	1500002f 	strne	r0, [r0, #-47]	; 0xffffffd1
    6138:	00001f7d 	andeq	r1, r0, sp, ror pc
    613c:	450f1801 	strmi	r1, [pc, #-2049]	; 5943 <_Min_Stack_Size+0x5543>
    6140:	17000006 	strne	r0, [r0, -r6]
    6144:	00001ba0 	andeq	r1, r0, r0, lsr #23
    6148:	b80f1b01 	stmdalt	pc, {r0, r8, r9, fp, ip}	; <UNPREDICTABLE>
    614c:	00000000 	andeq	r0, r0, r0
    6150:	00175314 	andseq	r5, r7, r4, lsl r3
    6154:	0f550100 	svceq	0x00550100
    6158:	00000218 	andeq	r0, r0, r8, lsl r2
    615c:	00300101 	eorseq	r0, r0, r1, lsl #2
    6160:	1f7d1500 	svcne	0x007d1500
    6164:	55010000 	strpl	r0, [r1, #-0]
    6168:	0006450f 	andeq	r4, r6, pc, lsl #10
    616c:	74361600 	ldrtvc	r1, [r6], #-1536	; 0xfffffa00
    6170:	0100706d 	tsteq	r0, sp, rrx
    6174:	00b80f59 	adcseq	r0, r8, r9, asr pc
    6178:	00000000 	andeq	r0, r0, r0
    617c:	001dca14 	andseq	ip, sp, r4, lsl sl
    6180:	0fa20100 	svceq	0x00a20100
    6184:	00000218 	andeq	r0, r0, r8, lsl r2
    6188:	00302b01 	eorseq	r2, r0, r1, lsl #22
    618c:	1f7d1500 	svcne	0x007d1500
    6190:	a2010000 	andge	r0, r1, #0
    6194:	0006450f 	andeq	r4, r6, pc, lsl #10
    6198:	1ba01700 	blne	fe80bda0 <_estack+0xde7dbda0>
    619c:	a5010000 	strge	r0, [r1, #-0]
    61a0:	0000b80f 	andeq	fp, r0, pc, lsl #16
    61a4:	de140000 	cdple	0, 1, cr0, cr4, cr0, {0}
    61a8:	0100001c 	tsteq	r0, ip, lsl r0
    61ac:	0218112d 	andseq	r1, r8, #1073741835	; 0x4000000b
    61b0:	61010000 	mrsvs	r0, (UNDEF: 1)
    61b4:	15000030 	strne	r0, [r0, #-48]	; 0xffffffd0
    61b8:	00001f7d 	andeq	r1, r0, sp, ror pc
    61bc:	45112d01 	ldrmi	r2, [r1, #-3329]	; 0xfffff2ff
    61c0:	17000006 	strne	r0, [r0, -r6]
    61c4:	00001fbd 			; <UNDEFINED> instruction: 0x00001fbd
    61c8:	97112f01 	ldrls	r2, [r1, -r1, lsl #30]
    61cc:	17000000 	strne	r0, [r0, -r0]
    61d0:	00001b7d 	andeq	r1, r0, sp, ror fp
    61d4:	a2113001 	andsge	r3, r1, #1
    61d8:	00000000 	andeq	r0, r0, r0
    61dc:	001ae714 	andseq	lr, sl, r4, lsl r7
    61e0:	114d0100 	mrsne	r0, (UNDEF: 93)
    61e4:	00000218 	andeq	r0, r0, r8, lsl r2
    61e8:	00309901 	eorseq	r9, r0, r1, lsl #18
    61ec:	1f7d1500 	svcne	0x007d1500
    61f0:	4d010000 	stcmi	0, cr0, [r1, #-0]
    61f4:	00064511 	andeq	r4, r6, r1, lsl r5
    61f8:	1a051700 	bne	14be00 <_Min_Stack_Size+0x14ba00>
    61fc:	50010000 	andpl	r0, r1, r0
    6200:	0000b811 	andeq	fp, r0, r1, lsl r8
    6204:	b5171600 	ldrlt	r1, [r7, #-1536]	; 0xfffffa00
    6208:	01000001 	tsteq	r0, r1
    620c:	00ca1156 	sbceq	r1, sl, r6, asr r1
    6210:	00000000 	andeq	r0, r0, r0
    6214:	001ebc14 	andseq	fp, lr, r4, lsl ip
    6218:	10c90100 	sbcne	r0, r9, r0, lsl #2
    621c:	00000218 	andeq	r0, r0, r8, lsl r2
    6220:	0030c301 	eorseq	ip, r0, r1, lsl #6
    6224:	1f7d1500 	svcne	0x007d1500
    6228:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    622c:	00064510 	andeq	r4, r6, r0, lsl r5
    6230:	1a051700 	bne	14be38 <_Min_Stack_Size+0x14ba38>
    6234:	cc010000 	stcgt	0, cr0, [r1], {-0}
    6238:	0000b810 	andeq	fp, r0, r0, lsl r8
    623c:	c6140000 	ldrgt	r0, [r4], -r0
    6240:	01000019 	tsteq	r0, r9, lsl r0
    6244:	021810fb 	andseq	r1, r8, #251	; 0xfb
    6248:	ed010000 	stc	0, cr0, [r1, #-0]
    624c:	15000030 	strne	r0, [r0, #-48]	; 0xffffffd0
    6250:	00001f7d 	andeq	r1, r0, sp, ror pc
    6254:	4510fb01 	ldrmi	pc, [r0, #-2817]	; 0xfffff4ff
    6258:	17000006 	strne	r0, [r0, -r6]
    625c:	00001a05 	andeq	r1, r0, r5, lsl #20
    6260:	b810fe01 	ldmdalt	r0, {r0, r9, sl, fp, ip, sp, lr, pc}
    6264:	00000000 	andeq	r0, r0, r0
    6268:	00195a27 	andseq	r5, r9, r7, lsr #20
    626c:	0d170100 	ldfeqs	f0, [r7, #-0]
    6270:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
    6274:	000007d2 	ldrdeq	r0, [r0], -r2
    6278:	352b9c01 	strcc	r9, [fp, #-3073]!	; 0xfffff3ff
    627c:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    6280:	0100001f 	tsteq	r0, pc, lsl r0
    6284:	06450d17 			; <UNDEFINED> instruction: 0x06450d17
    6288:	41090000 	mrsmi	r0, (UNDEF: 9)
    628c:	e02b0000 	eor	r0, fp, r0
    6290:	0100001d 	tsteq	r0, sp, lsl r0
    6294:	00b80d19 	adcseq	r0, r8, r9, lsl sp
    6298:	41530000 	cmpmi	r3, r0
    629c:	4c2b0000 	stcmi	0, cr0, [fp], #-0
    62a0:	0100001c 	tsteq	r0, ip, lsl r0
    62a4:	00b80d1a 	adcseq	r0, r8, sl, lsl sp
    62a8:	42000000 	andmi	r0, r0, #0
    62ac:	902b0000 	eorls	r0, fp, r0
    62b0:	0100001e 	tsteq	r0, lr, lsl r0
    62b4:	00b80d1b 	adcseq	r0, r8, fp, lsl sp
    62b8:	42ce0000 	sbcmi	r0, lr, #0
    62bc:	242b0000 	strtcs	r0, [fp], #-0
    62c0:	01000016 	tsteq	r0, r6, lsl r0
    62c4:	00b80d1d 	adcseq	r0, r8, sp, lsl sp
    62c8:	439c0000 	orrsmi	r0, ip, #0
    62cc:	f92e0000 			; <UNDEFINED> instruction: 0xf92e0000
    62d0:	ec000007 	stc	0, cr0, [r0], {7}
    62d4:	1e080036 	mcrne	0, 0, r0, cr8, cr6, {1}
    62d8:	01000000 	mrseq	r0, (UNDEF: 0)
    62dc:	31710d67 	cmncc	r1, r7, ror #26
    62e0:	0a190000 	beq	6462e8 <_Min_Stack_Size+0x645ee8>
    62e4:	d0000008 	andle	r0, r0, r8
    62e8:	00000043 	andeq	r0, r0, r3, asr #32
    62ec:	0030611c 	eorseq	r6, r0, ip, lsl r1
    62f0:	00371600 	eorseq	r1, r7, r0, lsl #12
    62f4:	000cc008 	andeq	ip, ip, r8
    62f8:	0d5a0100 	ldfeqe	f0, [sl, #-0]
    62fc:	000031ec 	andeq	r3, r0, ip, ror #3
    6300:	00307219 	eorseq	r7, r0, r9, lsl r2
    6304:	0043e300 	subeq	lr, r3, r0, lsl #6
    6308:	0cc02100 	stfeqe	f2, [r0], {0}
    630c:	7e2c0000 	cdpvc	0, 2, cr0, cr12, cr0, {0}
    6310:	17000030 	smladxne	r0, r0, r0, r0
    6314:	22000044 	andcs	r0, r0, #68	; 0x44
    6318:	08003722 	stmdaeq	r0, {r1, r5, r8, r9, sl, ip, sp}
    631c:	00000010 	andeq	r0, r0, r0, lsl r0
    6320:	000031b2 			; <UNDEFINED> instruction: 0x000031b2
    6324:	00308b23 	eorseq	r8, r0, r3, lsr #22
    6328:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    632c:	37d23100 	ldrbcc	r3, [r2, r0, lsl #2]
    6330:	2ba60800 	blcs	fe988338 <_estack+0xde958338>
    6334:	31c60000 	biccc	r0, r6, r0
    6338:	01260000 			; <UNDEFINED> instruction: 0x01260000
    633c:	00740250 	rsbseq	r0, r4, r0, asr r2
    6340:	3bb23100 	blcc	fec92748 <_estack+0xdec62748>
    6344:	2c0c0800 	stccs	8, cr0, [ip], {-0}
    6348:	31da0000 	bicscc	r0, sl, r0
    634c:	01260000 			; <UNDEFINED> instruction: 0x01260000
    6350:	00740250 	rsbseq	r0, r4, r0, asr r2
    6354:	3c322500 	cfldr32cc	mvfx2, [r2], #-0
    6358:	2d770800 	ldclcs	8, cr0, [r7, #-0]
    635c:	01260000 			; <UNDEFINED> instruction: 0x01260000
    6360:	00740250 	rsbseq	r0, r4, r0, asr r2
    6364:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    6368:	000007db 	ldrdeq	r0, [r0], -fp
    636c:	0800380c 	stmdaeq	r0, {r2, r3, fp, ip, sp}
    6370:	00000006 	andeq	r0, r0, r6
    6374:	0a0d2a01 	beq	350b80 <_Min_Stack_Size+0x350780>
    6378:	19000032 	stmdbne	r0, {r1, r4, r5}
    637c:	000007ec 	andeq	r0, r0, ip, ror #15
    6380:	0000447f 	andeq	r4, r0, pc, ror r4
    6384:	2fd51c00 	svccs	0x00d51c00
    6388:	382e0000 	stmdacc	lr!, {}	; <UNPREDICTABLE>
    638c:	0ce80800 	stcleq	8, cr0, [r8]
    6390:	46010000 	strmi	r0, [r1], -r0
    6394:	0032370d 	eorseq	r3, r2, sp, lsl #14
    6398:	2fe61900 	svccs	0x00e61900
    639c:	44920000 	ldrmi	r0, [r2], #0
    63a0:	08210000 	stmdaeq	r1!, {}	; <UNPREDICTABLE>
    63a4:	2c00000d 	stccs	0, cr0, [r0], {13}
    63a8:	00002ff3 	strdeq	r2, [r0], -r3
    63ac:	000044bb 			; <UNDEFINED> instruction: 0x000044bb
    63b0:	011c0000 	tsteq	ip, r0
    63b4:	82000030 	andhi	r0, r0, #48	; 0x30
    63b8:	28080038 	stmdacs	r8, {r3, r4, r5}
    63bc:	0100000d 	tsteq	r0, sp
    63c0:	32880d4b 	addcc	r0, r8, #4800	; 0x12c0
    63c4:	12190000 	andsne	r0, r9, #0
    63c8:	e7000030 	smladx	r0, r0, r0, r0
    63cc:	21000044 	tstcs	r0, r4, asr #32
    63d0:	00000d28 	andeq	r0, r0, r8, lsr #26
    63d4:	00301e2c 	eorseq	r1, r0, ip, lsr #28
    63d8:	00451000 	subeq	r1, r5, r0
    63dc:	38903100 	ldmcc	r0, {r8, ip, sp}
    63e0:	2c560800 	mrrccs	8, 0, r0, r6, cr0
    63e4:	32760000 	rsbscc	r0, r6, #0
    63e8:	01260000 			; <UNDEFINED> instruction: 0x01260000
    63ec:	00740250 	rsbseq	r0, r4, r0, asr r2
    63f0:	39ac2500 	stmibcc	ip!, {r8, sl, sp}
    63f4:	2b5c0800 	blcs	17083fc <_Min_Stack_Size+0x1707ffc>
    63f8:	01260000 			; <UNDEFINED> instruction: 0x01260000
    63fc:	00740250 	rsbseq	r0, r4, r0, asr r2
    6400:	1c000000 	stcne	0, cr0, [r0], {-0}
    6404:	00002e77 	andeq	r2, r0, r7, ror lr
    6408:	0800389e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, sp}
    640c:	00000d50 	andeq	r0, r0, r0, asr sp
    6410:	980d2f01 	stmdals	sp, {r0, r8, r9, sl, fp, sp}
    6414:	19000033 	stmdbne	r0, {r0, r1, r4, r5}
    6418:	00002e88 	andeq	r2, r0, r8, lsl #29
    641c:	00004539 	andeq	r4, r0, r9, lsr r5
    6420:	000d5021 	andeq	r5, sp, r1, lsr #32
    6424:	2e942c00 	cdpcs	12, 9, cr2, cr4, cr0, {0}
    6428:	45830000 	strmi	r0, [r3]
    642c:	a02c0000 	eorge	r0, ip, r0
    6430:	bb00002e 	bllt	64f0 <_Min_Stack_Size+0x60f0>
    6434:	2c000045 	stccs	0, cr0, [r0], {69}	; 0x45
    6438:	00002eac 	andeq	r2, r0, ip, lsr #29
    643c:	00004605 	andeq	r4, r0, r5, lsl #12
    6440:	0038b622 	eorseq	fp, r8, r2, lsr #12
    6444:	00000e08 	andeq	r0, r0, r8, lsl #28
    6448:	0032db00 	eorseq	sp, r2, r0, lsl #22
    644c:	2f5b2300 	svccs	0x005b2300
    6450:	91020000 	mrsls	r0, (UNDEF: 2)
    6454:	ec220060 	stc	0, cr0, [r2], #-384	; 0xfffffe80
    6458:	0c08003b 	stceq	0, cr0, [r8], {59}	; 0x3b
    645c:	f1000000 	cps	#0
    6460:	23000032 	movwcs	r0, #50	; 0x32
    6464:	00002ee1 	andeq	r2, r0, r1, ror #29
    6468:	00449102 	subeq	r9, r4, r2, lsl #2
    646c:	003c7a22 	eorseq	r7, ip, r2, lsr #20
    6470:	00001008 	andeq	r1, r0, r8
    6474:	00330700 	eorseq	r0, r3, r0, lsl #14
    6478:	2f4d2300 	svccs	0x004d2300
    647c:	91020000 	mrsls	r0, (UNDEF: 2)
    6480:	2e22005c 	mcrcs	0, 1, r0, cr2, cr12, {2}
    6484:	1008003d 	andne	r0, r8, sp, lsr r0
    6488:	1d000000 	stcne	0, cr0, [r0, #-0]
    648c:	23000033 	movwcs	r0, #51	; 0x33
    6490:	00002f17 	andeq	r2, r0, r7, lsl pc
    6494:	00509102 	subseq	r9, r0, r2, lsl #2
    6498:	003d3e22 	eorseq	r3, sp, r2, lsr #28
    649c:	00000e08 	andeq	r0, r0, r8, lsl #28
    64a0:	00333400 	eorseq	r3, r3, r0, lsl #8
    64a4:	2ebd2300 	cdpcs	3, 11, cr2, cr13, cr0, {0}
    64a8:	91030000 	mrsls	r0, (UNDEF: 3)
    64ac:	22007fbc 	andcs	r7, r0, #188, 30	; 0x2f0
    64b0:	08003d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, sp}
    64b4:	0000000c 	andeq	r0, r0, ip
    64b8:	0000334a 	andeq	r3, r0, sl, asr #6
    64bc:	002ecf23 	eoreq	ip, lr, r3, lsr #30
    64c0:	40910200 	addsmi	r0, r1, r0, lsl #4
    64c4:	3d8c2200 	sfmcc	f2, 4, [ip]
    64c8:	00100800 	andseq	r0, r0, r0, lsl #16
    64cc:	33600000 	cmncc	r0, #0
    64d0:	3b230000 	blcc	8c64d8 <_Min_Stack_Size+0x8c60d8>
    64d4:	0200002f 	andeq	r0, r0, #47	; 0x2f
    64d8:	1f005891 	svcne	0x00005891
    64dc:	00000d88 	andeq	r0, r0, r8, lsl #27
    64e0:	00003372 	andeq	r3, r0, r2, ror r3
    64e4:	002f2923 	eoreq	r2, pc, r3, lsr #18
    64e8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    64ec:	0da01f00 	stceq	15, cr1, [r0]
    64f0:	33840000 	orrcc	r0, r4, #0
    64f4:	f3230000 	vhadd.u32	d0, d3, d0
    64f8:	0200002e 	andeq	r0, r0, #46	; 0x2e
    64fc:	2f004891 	svccs	0x00004891
    6500:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
    6504:	0000000c 	andeq	r0, r0, ip
    6508:	002f0523 	eoreq	r0, pc, r3, lsr #10
    650c:	4c910200 	lfmmi	f0, 4, [r1], {0}
    6510:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    6514:	00000817 	andeq	r0, r0, r7, lsl r8
    6518:	080038da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp, ip, sp}
    651c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6520:	b60d7501 	strlt	r7, [sp], -r1, lsl #10
    6524:	19000033 	stmdbne	r0, {r0, r1, r4, r5}
    6528:	00000828 	andeq	r0, r0, r8, lsr #16
    652c:	0000464f 	andeq	r4, r0, pc, asr #12
    6530:	2f691c00 	svccs	0x00691c00
    6534:	39be0000 	ldmibcc	lr!, {}	; <UNPREDICTABLE>
    6538:	0db80800 	ldceq	8, cr0, [r8]
    653c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    6540:	0034050d 	eorseq	r0, r4, sp, lsl #10
    6544:	2f7a1900 	svccs	0x007a1900
    6548:	46620000 	strbtmi	r0, [r2], -r0
    654c:	b8210000 	stmdalt	r1!, {}	; <UNPREDICTABLE>
    6550:	2c00000d 	stccs	0, cr0, [r0], {13}
    6554:	00002f86 	andeq	r2, r0, r6, lsl #31
    6558:	000046a1 	andeq	r4, r0, r1, lsr #13
    655c:	002f922c 	eoreq	r9, pc, ip, lsr #4
    6560:	0046d500 	subeq	sp, r6, r0, lsl #10
    6564:	2f9e2c00 	svccs	0x009e2c00
    6568:	473d0000 	ldrmi	r0, [sp, -r0]!
    656c:	00250000 	eoreq	r0, r5, r0
    6570:	3708003e 	smladxcc	r8, lr, r0, r0
    6574:	2600002b 	strcs	r0, [r0], -fp, lsr #32
    6578:	74025001 	strvc	r5, [r2], #-1
    657c:	00000000 	andeq	r0, r0, r0
    6580:	0030c32e 	eorseq	ip, r0, lr, lsr #6
    6584:	003a2a00 	eorseq	r2, sl, r0, lsl #20
    6588:	00004e08 	andeq	r4, r0, r8, lsl #28
    658c:	0d700100 	ldfeqe	f0, [r0, #-0]
    6590:	00003446 	andeq	r3, r0, r6, asr #8
    6594:	0030d419 	eorseq	sp, r0, r9, lsl r4
    6598:	00478700 	subeq	r8, r7, r0, lsl #14
    659c:	3a2a2f00 	bcc	a921a4 <_Min_Stack_Size+0xa91da4>
    65a0:	004e0800 	subeq	r0, lr, r0, lsl #16
    65a4:	e02c0000 	eor	r0, ip, r0
    65a8:	9a000030 	bls	6670 <_Min_Stack_Size+0x6270>
    65ac:	25000047 	strcs	r0, [r0, #-71]	; 0xffffffb9
    65b0:	08003a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp, ip, sp}
    65b4:	00002ba6 	andeq	r2, r0, r6, lsr #23
    65b8:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
    65bc:	00000074 	andeq	r0, r0, r4, ror r0
    65c0:	30992e00 	addscc	r2, r9, r0, lsl #28
    65c4:	3a880000 	bcc	fe2065cc <_estack+0xde1d65cc>
    65c8:	004c0800 	subeq	r0, ip, r0, lsl #16
    65cc:	62010000 	andvs	r0, r1, #0
    65d0:	0034870d 	eorseq	r8, r4, sp, lsl #14
    65d4:	30aa1900 	adccc	r1, sl, r0, lsl #18
    65d8:	47b20000 	ldrmi	r0, [r2, r0]!
    65dc:	882f0000 	stmdahi	pc!, {}	; <UNPREDICTABLE>
    65e0:	4c08003a 	stcmi	0, cr0, [r8], {58}	; 0x3a
    65e4:	2c000000 	stccs	0, cr0, [r0], {-0}
    65e8:	000030b6 	strheq	r3, [r0], -r6
    65ec:	000047c5 	andeq	r4, r0, r5, asr #15
    65f0:	003ad225 	eorseq	sp, sl, r5, lsr #4
    65f4:	002b8108 	eoreq	r8, fp, r8, lsl #2
    65f8:	50012600 	andpl	r2, r1, r0, lsl #12
    65fc:	00007402 	andeq	r7, r0, r2, lsl #8
    6600:	591c0000 	ldmdbpl	ip, {}	; <UNPREDICTABLE>
    6604:	d400002e 	strle	r0, [r0], #-46	; 0xffffffd2
    6608:	e808003a 	stmda	r8, {r1, r3, r4, r5}
    660c:	0100000d 	tsteq	r0, sp
    6610:	34a50d25 	strtcc	r0, [r5], #3365	; 0xd25
    6614:	6a190000 	bvs	64661c <_Min_Stack_Size+0x64621c>
    6618:	dd00002e 	stcle	0, cr0, [r0, #-184]	; 0xffffff48
    661c:	00000047 	andeq	r0, r0, r7, asr #32
    6620:	00302b2e 	eorseq	r2, r0, lr, lsr #22
    6624:	003b0200 	eorseq	r0, fp, r0, lsl #4
    6628:	00001c08 	andeq	r1, r0, r8, lsl #24
    662c:	0d550100 	ldfeqe	f0, [r5, #-0]
    6630:	000034ef 	andeq	r3, r0, pc, ror #9
    6634:	00303c19 	eorseq	r3, r0, r9, lsl ip
    6638:	00481c00 	subeq	r1, r8, r0, lsl #24
    663c:	3b022f00 	blcc	92244 <_Min_Stack_Size+0x91e44>
    6640:	001c0800 	andseq	r0, ip, r0, lsl #16
    6644:	482c0000 	stmdami	ip!, {}	; <UNPREDICTABLE>
    6648:	2f000030 	svccs	0x00000030
    664c:	2c000048 	stccs	0, cr0, [r0], {72}	; 0x48
    6650:	00003054 	andeq	r3, r0, r4, asr r0
    6654:	0000484e 	andeq	r4, r0, lr, asr #16
    6658:	003b1c25 	eorseq	r1, fp, r5, lsr #24
    665c:	002bcb08 	eoreq	ip, fp, r8, lsl #22
    6660:	50012600 	andpl	r2, r1, r0, lsl #12
    6664:	00007402 	andeq	r7, r0, r2, lsl #8
    6668:	ab240000 	blge	906670 <_Min_Stack_Size+0x906270>
    666c:	3600002f 	strcc	r0, [r0], -pc, lsr #32
    6670:	1808003b 	stmdane	r8, {r0, r1, r3, r4, r5}
    6674:	0100000e 	tsteq	r0, lr
    6678:	bc190d3d 	ldclt	13, cr0, [r9], {61}	; 0x3d
    667c:	6d00002f 	stcvs	0, cr0, [r0, #-188]	; 0xffffff44
    6680:	21000048 	tstcs	r0, r8, asr #32
    6684:	00000e18 	andeq	r0, r0, r8, lsl lr
    6688:	002fc82c 	eoreq	ip, pc, ip, lsr #16
    668c:	00488b00 	subeq	r8, r8, r0, lsl #22
    6690:	3b8a1b00 	blcc	fe28d298 <_estack+0xde25d298>
    6694:	2b370800 	blcs	dc869c <_Min_Stack_Size+0xdc829c>
    6698:	021b0000 	andseq	r0, fp, #0
    669c:	3108003d 	tstcc	r8, sp, lsr r0
    66a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    66a4:	13320000 	teqne	r2, #0
    66a8:	01000017 	tsteq	r0, r7, lsl r0
    66ac:	3e701448 	cdpcc	4, 7, cr1, cr0, cr8, {2}
    66b0:	004c0800 	subeq	r0, ip, r0, lsl #16
    66b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    66b8:	00003574 	andeq	r3, r0, r4, ror r5
    66bc:	001b542a 	andseq	r5, fp, sl, lsr #8
    66c0:	14480100 	strbne	r0, [r8], #-256	; 0xffffff00
    66c4:	000005dc 	ldrdeq	r0, [r0], -ip
    66c8:	000048a9 	andeq	r4, r0, r9, lsr #17
    66cc:	001f7d2b 	andseq	r7, pc, fp, lsr #26
    66d0:	144a0100 	strbne	r0, [sl], #-256	; 0xffffff00
    66d4:	00000645 	andeq	r0, r0, r5, asr #12
    66d8:	000048ca 	andeq	r4, r0, sl, asr #17
    66dc:	003eaa1b 	eorseq	sl, lr, fp, lsl sl
    66e0:	002c7b08 	eoreq	r7, ip, r8, lsl #22
    66e4:	3eba1b00 	vmovcc.f64	d1, #160	; 0xc1000000 -8.0
    66e8:	2d520800 	ldclcs	8, cr0, [r2, #-0]
    66ec:	14000000 	strne	r0, [r0], #-0
    66f0:	000021ca 	andeq	r2, r0, sl, asr #3
    66f4:	1811a501 	ldmdane	r1, {r0, r8, sl, sp, pc}
    66f8:	01000002 	tsteq	r0, r2
    66fc:	000035aa 	andeq	r3, r0, sl, lsr #11
    6700:	001f7d15 	andseq	r7, pc, r5, lsl sp	; <UNPREDICTABLE>
    6704:	11a50100 			; <UNDEFINED> instruction: 0x11a50100
    6708:	00000645 	andeq	r0, r0, r5, asr #12
    670c:	001a0517 	andseq	r0, sl, r7, lsl r5
    6710:	11a80100 			; <UNDEFINED> instruction: 0x11a80100
    6714:	000000b8 	strheq	r0, [r0], -r8
    6718:	001ba017 	andseq	sl, fp, r7, lsl r0
    671c:	11a90100 			; <UNDEFINED> instruction: 0x11a90100
    6720:	000000b8 	strheq	r0, [r0], -r8
    6724:	1ed23700 	cdpne	7, 13, cr3, cr2, cr0, {0}
    6728:	81010000 	mrshi	r0, (UNDEF: 1)
    672c:	003ebc0d 	eorseq	fp, lr, sp, lsl #24
    6730:	00029808 	andeq	r9, r2, r8, lsl #16
    6734:	029c0100 	addseq	r0, ip, #0, 2
    6738:	2a000037 	bcs	681c <_Min_Stack_Size+0x641c>
    673c:	00001f7d 	andeq	r1, r0, sp, ror pc
    6740:	450d8101 	strmi	r8, [sp, #-257]	; 0xfffffeff
    6744:	e8000006 	stmda	r0, {r1, r2}
    6748:	2b000048 	blcs	6870 <_Min_Stack_Size+0x6470>
    674c:	0000170e 	andeq	r1, r0, lr, lsl #14
    6750:	b80d8301 	stmdalt	sp, {r0, r8, r9, pc}
    6754:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6758:	2b000049 	blcs	6884 <_Min_Stack_Size+0x6484>
    675c:	00001744 	andeq	r1, r0, r4, asr #14
    6760:	b80d8301 	stmdalt	sp, {r0, r8, r9, pc}
    6764:	a0000000 	andge	r0, r0, r0
    6768:	2b000049 	blcs	6894 <_Min_Stack_Size+0x6494>
    676c:	00001749 	andeq	r1, r0, r9, asr #14
    6770:	b80d8301 	stmdalt	sp, {r0, r8, r9, pc}
    6774:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    6778:	2b000049 	blcs	68a4 <_Min_Stack_Size+0x64a4>
    677c:	0000174e 	andeq	r1, r0, lr, asr #14
    6780:	b80d8301 	stmdalt	sp, {r0, r8, r9, pc}
    6784:	4a000000 	bmi	678c <_Min_Stack_Size+0x638c>
    6788:	2b00004a 	blcs	68b8 <_Min_Stack_Size+0x64b8>
    678c:	00001c4c 	andeq	r1, r0, ip, asr #24
    6790:	b80d8401 	stmdalt	sp, {r0, sl, pc}
    6794:	a2000000 	andge	r0, r0, #0
    6798:	2b00004a 	blcs	68c8 <_Min_Stack_Size+0x64c8>
    679c:	00001e90 	muleq	r0, r0, lr
    67a0:	b80d8501 	stmdalt	sp, {r0, r8, sl, pc}
    67a4:	e1000000 	mrs	r0, (UNDEF: 0)
    67a8:	1c00004a 	stcne	0, cr0, [r0], {74}	; 0x4a
    67ac:	00002d77 	andeq	r2, r0, r7, ror sp
    67b0:	08003f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
    67b4:	00000e38 	andeq	r0, r0, r8, lsr lr
    67b8:	ab0dc101 	blge	376bc4 <_Min_Stack_Size+0x3767c4>
    67bc:	19000036 	stmdbne	r0, {r1, r2, r4, r5}
    67c0:	00002d84 	andeq	r2, r0, r4, lsl #27
    67c4:	00004b0a 	andeq	r4, r0, sl, lsl #22
    67c8:	000e3821 	andeq	r3, lr, r1, lsr #16
    67cc:	2d902c00 	ldccs	12, cr2, [r0]
    67d0:	4b3e0000 	blmi	f867d8 <_Min_Stack_Size+0xf863d8>
    67d4:	ca310000 	bgt	c467dc <_Min_Stack_Size+0xc463dc>
    67d8:	7b08003f 	blvc	2068dc <_Min_Stack_Size+0x2064dc>
    67dc:	6f00002c 	svcvs	0x0000002c
    67e0:	26000036 			; <UNDEFINED> instruction: 0x26000036
    67e4:	74025001 	strvc	r5, [r2], #-1
    67e8:	f0310000 			; <UNDEFINED> instruction: 0xf0310000
    67ec:	0c08003f 	stceq	0, cr0, [r8], {63}	; 0x3f
    67f0:	8300002c 	movwhi	r0, #44	; 0x2c
    67f4:	26000036 			; <UNDEFINED> instruction: 0x26000036
    67f8:	74025001 	strvc	r5, [r2], #-1
    67fc:	1a1b0000 	bne	6c6804 <_Min_Stack_Size+0x6c6404>
    6800:	db080040 	blle	206908 <_Min_Stack_Size+0x206508>
    6804:	31000037 	tstcc	r0, r7, lsr r0
    6808:	080040d8 	stmdaeq	r0, {r3, r4, r6, r7, lr}
    680c:	00002d52 	andeq	r2, r0, r2, asr sp
    6810:	000036a0 	andeq	r3, r0, r0, lsr #13
    6814:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
    6818:	1b000074 	blne	69f0 <_Min_Stack_Size+0x65f0>
    681c:	080040e4 	stmdaeq	r0, {r2, r5, r6, r7, lr}
    6820:	000037db 	ldrdeq	r3, [r0], -fp
    6824:	74240000 	strtvc	r0, [r4], #-0
    6828:	6c000035 	stcvs	0, cr0, [r0], {53}	; 0x35
    682c:	60080040 	andvs	r0, r8, r0, asr #32
    6830:	0100000e 	tsteq	r0, lr
    6834:	85190da4 	ldrhi	r0, [r9, #-3492]	; 0xfffff25c
    6838:	6b000035 	blvs	6914 <_Min_Stack_Size+0x6514>
    683c:	2100004b 	tstcs	r0, fp, asr #32
    6840:	00000e60 	andeq	r0, r0, r0, ror #28
    6844:	0035912c 	eorseq	r9, r5, ip, lsr #2
    6848:	004b8900 	subeq	r8, fp, r0, lsl #18
    684c:	359d2c00 	ldrcc	r2, [sp, #3072]	; 0xc00
    6850:	4ba70000 	blmi	fe9c6858 <_estack+0xde996858>
    6854:	ae310000 	cdpge	0, 3, cr0, cr1, cr0, {0}
    6858:	81080040 	tsthi	r8, r0, asr #32
    685c:	ef00002b 	svc	0x0000002b
    6860:	26000036 			; <UNDEFINED> instruction: 0x26000036
    6864:	74025001 	strvc	r5, [r2], #-1
    6868:	46250000 	strtmi	r0, [r5], -r0
    686c:	0c080041 	stceq	0, cr0, [r8], {65}	; 0x41
    6870:	2600002c 	strcs	r0, [r0], -ip, lsr #32
    6874:	74025001 	strvc	r5, [r2], #-1
    6878:	00000000 	andeq	r0, r0, r0
    687c:	177f2900 	ldrbne	r2, [pc, -r0, lsl #18]!
    6880:	81010000 	mrshi	r0, (UNDEF: 1)
    6884:	0004c30e 	andeq	ip, r4, lr, lsl #6
    6888:	00415400 	subeq	r5, r1, r0, lsl #8
    688c:	00000608 	andeq	r0, r0, r8, lsl #12
    6890:	2d9c0100 	ldfcss	f0, [ip]
    6894:	2a000037 	bcs	6978 <_Min_Stack_Size+0x6578>
    6898:	00001f7d 	andeq	r1, r0, sp, ror pc
    689c:	450e8101 	strmi	r8, [lr, #-257]	; 0xfffffeff
    68a0:	c5000006 	strgt	r0, [r0, #-6]
    68a4:	0000004b 	andeq	r0, r0, fp, asr #32
    68a8:	00167829 	andseq	r7, r6, r9, lsr #16
    68ac:	0e8d0100 	rmfeqe	f0, f5, f0
    68b0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    68b4:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
    68b8:	00000006 	andeq	r0, r0, r6
    68bc:	37589c01 	ldrbcc	r9, [r8, -r1, lsl #24]
    68c0:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
    68c4:	0100001f 	tsteq	r0, pc, lsl r0
    68c8:	06450e8d 	strbeq	r0, [r5], -sp, lsl #29
    68cc:	4be60000 	blmi	ff9868d4 <_estack+0xdf9568d4>
    68d0:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    68d4:	00002030 	andeq	r2, r0, r0, lsr r0
    68d8:	b80e9801 	stmdalt	lr, {r0, fp, ip, pc}
    68dc:	64000000 	strvs	r0, [r0], #-0
    68e0:	04080041 	streq	r0, [r8], #-65	; 0xffffffbf
    68e4:	01000000 	mrseq	r0, (UNDEF: 0)
    68e8:	0037839c 	mlaseq	r7, ip, r3, r8
    68ec:	1f7d2a00 	svcne	0x007d2a00
    68f0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    68f4:	0006450e 	andeq	r4, r6, lr, lsl #10
    68f8:	004c0700 	subeq	r0, ip, r0, lsl #14
    68fc:	f3380000 	vhadd.u<illegal width 64>	d0, d8, d0
    6900:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6904:	378f0744 	strcc	r0, [pc, r4, asr #14]
    6908:	ad050000 	stcge	0, cr0, [r5, #-0]
    690c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    6910:	00000cf7 	strdeq	r0, [r0], -r7
    6914:	00b84c0a 	adcseq	r4, r8, sl, lsl #24
    6918:	a33a0000 	teqge	sl, #0
    691c:	0b00000e 	bleq	695c <_Min_Stack_Size+0x655c>
    6920:	0000b8d0 	ldrdeq	fp, [r0], -r0
    6924:	15493b00 	strbne	r3, [r9, #-2816]	; 0xfffff500
    6928:	ca0c0000 	bgt	306930 <_Min_Stack_Size+0x306530>
    692c:	0000b804 	andeq	fp, r0, r4, lsl #16
    6930:	1d583c00 	ldclne	12, cr3, [r8, #-0]
    6934:	a0070000 	andge	r0, r7, r0
    6938:	00021802 	andeq	r1, r2, r2, lsl #16
    693c:	0037db00 	eorseq	sp, r7, r0, lsl #22
    6940:	05dc1300 	ldrbeq	r1, [ip, #768]	; 0x300
    6944:	b8130000 	ldmdalt	r3, {}	; <UNPREDICTABLE>
    6948:	13000000 	movwne	r0, #0
    694c:	000000b8 	strheq	r0, [r0], -r8
    6950:	0000b813 	andeq	fp, r0, r3, lsl r8
    6954:	a93d0000 	ldmdbge	sp!, {}	; <UNPREDICTABLE>
    6958:	07000019 	smladeq	r0, r9, r0, r0
    695c:	021802a2 	andseq	r0, r8, #536870922	; 0x2000000a
    6960:	dc130000 	ldcle	0, cr0, [r3], {-0}
    6964:	00000005 	andeq	r0, r0, r5
    6968:	000aa000 	andeq	sl, sl, r0
    696c:	79000400 	stmdbvc	r0, {sl}
    6970:	0400000e 	streq	r0, [r0], #-14
    6974:	00029801 	andeq	r9, r2, r1, lsl #16
    6978:	22c00100 	sbccs	r0, r0, #0, 2
    697c:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    6980:	10c80000 	sbcne	r0, r8, r0
    6984:	00000000 	andeq	r0, r0, r0
    6988:	2e7d0000 	cdpcs	0, 7, cr0, cr13, cr0, {0}
    698c:	04020000 	streq	r0, [r2], #-0
    6990:	0000d907 	andeq	sp, r0, r7, lsl #18
    6994:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6998:	000000cf 	andeq	r0, r0, pc, asr #1
    699c:	d4060102 	strle	r0, [r6], #-258	; 0xfffffefe
    69a0:	03000007 	movweq	r0, #7
    69a4:	00000088 	andeq	r0, r0, r8, lsl #1
    69a8:	00451d02 	subeq	r1, r5, r2, lsl #26
    69ac:	01020000 	mrseq	r0, (UNDEF: 2)
    69b0:	0007d208 	andeq	sp, r7, r8, lsl #4
    69b4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    69b8:	00000822 	andeq	r0, r0, r2, lsr #16
    69bc:	f7070202 			; <UNDEFINED> instruction: 0xf7070202
    69c0:	03000004 	movweq	r0, #4
    69c4:	000005a8 	andeq	r0, r0, r8, lsr #11
    69c8:	00653f02 	rsbeq	r3, r5, r2, lsl #30
    69cc:	04020000 	streq	r0, [r2], #-0
    69d0:	00044505 	andeq	r4, r4, r5, lsl #10
    69d4:	03b10300 			; <UNDEFINED> instruction: 0x03b10300
    69d8:	41020000 	mrsmi	r0, (UNDEF: 2)
    69dc:	00000077 	andeq	r0, r0, r7, ror r0
    69e0:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    69e4:	02000000 	andeq	r0, r0, #0
    69e8:	04400508 	strbeq	r0, [r0], #-1288	; 0xfffffaf8
    69ec:	04040000 	streq	r0, [r4], #-0
    69f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    69f4:	008a0300 	addeq	r0, sl, r0, lsl #6
    69f8:	14030000 	strne	r0, [r3], #-0
    69fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    6a00:	0005aa03 	andeq	sl, r5, r3, lsl #20
    6a04:	5a1f0300 	bpl	7c760c <_Min_Stack_Size+0x7c720c>
    6a08:	03000000 	movweq	r0, #0
    6a0c:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    6a10:	006c2003 	rsbeq	r2, ip, r3
    6a14:	04020000 	streq	r0, [r2], #-0
    6a18:	00064c07 	andeq	r4, r6, r7, lsl #24
    6a1c:	00a20500 	adceq	r0, r2, r0, lsl #10
    6a20:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    6a24:	10017304 	andne	r7, r1, r4, lsl #6
    6a28:	07000001 	streq	r0, [r0, -r1]
    6a2c:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    6a30:	00b40175 	adcseq	r0, r4, r5, ror r1
    6a34:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a38:	00001f64 	andeq	r1, r0, r4, ror #30
    6a3c:	b4017604 	strlt	r7, [r1], #-1540	; 0xfffff9fc
    6a40:	04000000 	streq	r0, [r0], #-0
    6a44:	52415007 	subpl	r5, r1, #7
    6a48:	01770400 	cmneq	r7, r0, lsl #8
    6a4c:	000000b4 	strheq	r0, [r0], -r4
    6a50:	15c40808 	strbne	r0, [r4, #2056]	; 0x808
    6a54:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    6a58:	0000b401 	andeq	fp, r0, r1, lsl #8
    6a5c:	cf080c00 	svcgt	0x00080c00
    6a60:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    6a64:	00b40179 	adcseq	r0, r4, r9, ror r1
    6a68:	07100000 	ldreq	r0, [r0, -r0]
    6a6c:	00524346 	subseq	r4, r2, r6, asr #6
    6a70:	b4017a04 	strlt	r7, [r1], #-2564	; 0xfffff5fc
    6a74:	14000000 	strne	r0, [r0], #-0
    6a78:	1f820900 	svcne	0x00820900
    6a7c:	7b040000 	blvc	106a84 <_Min_Stack_Size+0x106684>
    6a80:	0000b901 	andeq	fp, r0, r1, lsl #18
    6a84:	05010a00 	streq	r0, [r1, #-2560]	; 0xfffff600
    6a88:	000131c5 	andeq	r3, r1, r5, asr #3
    6a8c:	19a30b00 	stmibne	r3!, {r8, r9, fp}
    6a90:	0c000000 	stceq	0, cr0, [r0], {-0}
    6a94:	00544553 	subseq	r4, r4, r3, asr r5
    6a98:	040d0001 	streq	r0, [sp], #-1
    6a9c:	db080102 	blle	206eac <_Min_Stack_Size+0x206aac>
    6aa0:	0a000007 	beq	6ac4 <_Min_Stack_Size+0x66c4>
    6aa4:	5b3a0601 	blpl	e882b0 <_Min_Stack_Size+0xe87eb0>
    6aa8:	0b000001 	bleq	6ab4 <_Min_Stack_Size+0x66b4>
    6aac:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6ab0:	09090b00 	stmdbeq	r9, {r8, r9, fp}
    6ab4:	0b010000 	bleq	46abc <_Min_Stack_Size+0x466bc>
    6ab8:	00000800 	andeq	r0, r0, r0, lsl #16
    6abc:	04a30b02 	strteq	r0, [r3], #2818	; 0xb02
    6ac0:	00030000 	andeq	r0, r3, r0
    6ac4:	00058c03 	andeq	r8, r5, r3, lsl #24
    6ac8:	3a3f0600 	bcc	fc82d0 <_Min_Stack_Size+0xfc7ed0>
    6acc:	0a000001 	beq	6ad8 <_Min_Stack_Size+0x66d8>
    6ad0:	7b450601 	blvc	11482dc <_Min_Stack_Size+0x1147edc>
    6ad4:	0b000001 	bleq	6ae0 <_Min_Stack_Size+0x66e0>
    6ad8:	000018ad 	andeq	r1, r0, sp, lsr #17
    6adc:	1bd00b00 	blne	ff4096e4 <_estack+0xdf3d96e4>
    6ae0:	00010000 	andeq	r0, r1, r0
    6ae4:	0017fb03 	andseq	pc, r7, r3, lsl #22
    6ae8:	66480600 	strbvs	r0, [r8], -r0, lsl #12
    6aec:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    6af0:	1f430730 	svcne	0x00430730
    6af4:	0f000002 	svceq	0x00000002
    6af8:	00001d04 	andeq	r1, r0, r4, lsl #26
    6afc:	00a24507 	adceq	r4, r2, r7, lsl #10
    6b00:	0f000000 	svceq	0x00000000
    6b04:	00001fc5 	andeq	r1, r0, r5, asr #31
    6b08:	00a24807 	adceq	r4, r2, r7, lsl #16
    6b0c:	0f040000 	svceq	0x00040000
    6b10:	00001825 	andeq	r1, r0, r5, lsr #16
    6b14:	00a24c07 	adceq	r4, r2, r7, lsl #24
    6b18:	0f080000 	svceq	0x00080000
    6b1c:	00001dc3 	andeq	r1, r0, r3, asr #27
    6b20:	00a24f07 	adceq	r4, r2, r7, lsl #30
    6b24:	0f0c0000 	svceq	0x000c0000
    6b28:	00001fe4 	andeq	r1, r0, r4, ror #31
    6b2c:	00a25207 	adceq	r5, r2, r7, lsl #4
    6b30:	0f100000 	svceq	0x00100000
    6b34:	00001b43 	andeq	r1, r0, r3, asr #22
    6b38:	00a25507 	adceq	r5, r2, r7, lsl #10
    6b3c:	0f140000 	svceq	0x00140000
    6b40:	00002e10 	andeq	r2, r0, r0, lsl lr
    6b44:	00a25807 	adceq	r5, r2, r7, lsl #16
    6b48:	0f180000 	svceq	0x00180000
    6b4c:	0000126c 	andeq	r1, r0, ip, ror #4
    6b50:	00a25d07 	adceq	r5, r2, r7, lsl #26
    6b54:	0f1c0000 	svceq	0x001c0000
    6b58:	00001e87 	andeq	r1, r0, r7, lsl #29
    6b5c:	00a26007 	adceq	r6, r2, r7
    6b60:	0f200000 	svceq	0x00200000
    6b64:	00001e9a 	muleq	r0, sl, lr
    6b68:	00a26507 	adceq	r6, r2, r7, lsl #10
    6b6c:	0f240000 	svceq	0x00240000
    6b70:	0000183f 	andeq	r1, r0, pc, lsr r8
    6b74:	00a26807 	adceq	r6, r2, r7, lsl #16
    6b78:	0f280000 	svceq	0x00280000
    6b7c:	00002200 	andeq	r2, r0, r0, lsl #4
    6b80:	00a26e07 	adceq	r6, r2, r7, lsl #28
    6b84:	002c0000 	eoreq	r0, ip, r0
    6b88:	0015ee03 	andseq	lr, r5, r3, lsl #28
    6b8c:	86730700 	ldrbthi	r0, [r3], -r0, lsl #14
    6b90:	0a000001 	beq	6b9c <_Min_Stack_Size+0x679c>
    6b94:	577a0701 	ldrbpl	r0, [sl, -r1, lsl #14]!
    6b98:	0b000002 	bleq	6ba8 <_Min_Stack_Size+0x67a8>
    6b9c:	00001995 	muleq	r0, r5, r9
    6ba0:	16450b00 	strbne	r0, [r5], -r0, lsl #22
    6ba4:	0b010000 	bleq	46bac <_Min_Stack_Size+0x467ac>
    6ba8:	00001d8a 	andeq	r1, r0, sl, lsl #27
    6bac:	208f0b02 	addcs	r0, pc, r2, lsl #22
    6bb0:	0b030000 	bleq	c6bb8 <_Min_Stack_Size+0xc67b8>
    6bb4:	00001857 	andeq	r1, r0, r7, asr r8
    6bb8:	1a290b04 	bne	a497d0 <_Min_Stack_Size+0xa493d0>
    6bbc:	00050000 	andeq	r0, r5, r0
    6bc0:	001d7503 	andseq	r7, sp, r3, lsl #10
    6bc4:	2a810700 	bcs	fe0487cc <_estack+0xde0187cc>
    6bc8:	0a000002 	beq	6bd8 <_Min_Stack_Size+0x67d8>
    6bcc:	77870701 	strvc	r0, [r7, r1, lsl #14]
    6bd0:	0b000002 	bleq	6be0 <_Min_Stack_Size+0x67e0>
    6bd4:	0000239a 	muleq	r0, sl, r3
    6bd8:	23590b00 	cmpcs	r9, #0, 22
    6bdc:	00010000 	andeq	r0, r1, r0
    6be0:	00237d03 	eoreq	r7, r3, r3, lsl #26
    6be4:	628a0700 	addvs	r0, sl, #0, 14
    6be8:	0a000002 	beq	6bf8 <_Min_Stack_Size+0x67f8>
    6bec:	b5900701 	ldrlt	r0, [r0, #1793]	; 0x701
    6bf0:	0b000002 	bleq	6c00 <_Min_Stack_Size+0x6800>
    6bf4:	00002280 	andeq	r2, r0, r0, lsl #5
    6bf8:	24920b00 	ldrcs	r0, [r2], #2816	; 0xb00
    6bfc:	0b010000 	bleq	46c04 <_Min_Stack_Size+0x46804>
    6c00:	000022a6 	andeq	r2, r0, r6, lsr #5
    6c04:	24ae0b02 	strtcs	r0, [lr], #2818	; 0xb02
    6c08:	0b030000 	bleq	c6c10 <_Min_Stack_Size+0xc6810>
    6c0c:	00002340 	andeq	r2, r0, r0, asr #6
    6c10:	220c0b04 	andcs	r0, ip, #4, 22	; 0x1000
    6c14:	0b050000 	bleq	146c1c <_Min_Stack_Size+0x14681c>
    6c18:	00002450 	andeq	r2, r0, r0, asr r4
    6c1c:	be030006 	cdplt	0, 0, cr0, cr3, cr6, {0}
    6c20:	07000023 	streq	r0, [r0, -r3, lsr #32]
    6c24:	00028298 	muleq	r2, r8, r2
    6c28:	20a51000 	adccs	r1, r5, r0
    6c2c:	07600000 	strbeq	r0, [r0, -r0]!
    6c30:	0003759d 	muleq	r3, sp, r5
    6c34:	1c910f00 	ldcne	15, cr0, [r1], {0}
    6c38:	9f070000 	svcls	0x00070000
    6c3c:	00000375 	andeq	r0, r0, r5, ror r3
    6c40:	222d0f00 	eorcs	r0, sp, #0, 30
    6c44:	a1070000 	mrsge	r0, (UNDEF: 7)
    6c48:	0000021f 	andeq	r0, r0, pc, lsl r2
    6c4c:	19190f04 	ldmdbne	r9, {r2, r8, r9, sl, fp}
    6c50:	a3070000 	movwge	r0, #28672	; 0x7000
    6c54:	0000017b 	andeq	r0, r0, fp, ror r1
    6c58:	04630f34 	strbteq	r0, [r3], #-3892	; 0xfffff0cc
    6c5c:	a5070000 	strge	r0, [r7, #-0]
    6c60:	0000037b 	andeq	r0, r0, fp, ror r3
    6c64:	18f70f35 	ldmne	r7!, {r0, r2, r4, r5, r8, r9, sl, fp}^
    6c68:	a7070000 	strge	r0, [r7, -r0]
    6c6c:	00000131 	andeq	r0, r0, r1, lsr r1
    6c70:	21ef0f38 	mvncs	r0, r8, lsr pc
    6c74:	a9070000 	stmdbge	r7, {}	; <UNPREDICTABLE>
    6c78:	00000391 	muleq	r0, r1, r3
    6c7c:	176a0f3c 			; <UNDEFINED> instruction: 0x176a0f3c
    6c80:	ab070000 	blge	1c6c88 <_Min_Stack_Size+0x1c6888>
    6c84:	00000391 	muleq	r0, r1, r3
    6c88:	17d20f40 	ldrbne	r0, [r2, r0, asr #30]
    6c8c:	ad070000 	stcge	0, cr0, [r7, #-0]
    6c90:	00000391 	muleq	r0, r1, r3
    6c94:	1ced0f44 	stclne	15, cr0, [sp], #272	; 0x110
    6c98:	af070000 	svcge	0x00070000
    6c9c:	00000391 	muleq	r0, r1, r3
    6ca0:	1bff0f48 	blne	fffca9c8 <_estack+0xdff9a9c8>
    6ca4:	b1070000 	mrslt	r0, (UNDEF: 7)
    6ca8:	00000391 	muleq	r0, r1, r3
    6cac:	21dd0f4c 	bicscs	r0, sp, ip, asr #30
    6cb0:	b3070000 	movwlt	r0, #28672	; 0x7000
    6cb4:	00000391 	muleq	r0, r1, r3
    6cb8:	1a4d0f50 	bne	134aa00 <_Min_Stack_Size+0x134a600>
    6cbc:	b5070000 	strlt	r0, [r7, #-0]
    6cc0:	000000b4 	strheq	r0, [r0], -r4
    6cc4:	18c80f54 	stmiane	r8, {r2, r4, r6, r8, r9, sl, fp}^
    6cc8:	b7070000 	strlt	r0, [r7, -r0]
    6ccc:	000000a2 	andeq	r0, r0, r2, lsr #1
    6cd0:	19ba0f58 	ldmibne	sl!, {r3, r4, r6, r8, r9, sl, fp}
    6cd4:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
    6cd8:	000000a2 	andeq	r0, r0, r2, lsr #1
    6cdc:	0411005c 	ldreq	r0, [r1], #-92	; 0xffffffa4
    6ce0:	00000110 	andeq	r0, r0, r0, lsl r1
    6ce4:	00025705 	andeq	r5, r2, r5, lsl #14
    6ce8:	038b1200 	orreq	r1, fp, #0, 4
    6cec:	8b130000 	blhi	4c6cf4 <_Min_Stack_Size+0x4c68f4>
    6cf0:	00000003 	andeq	r0, r0, r3
    6cf4:	02c00411 	sbceq	r0, r0, #285212672	; 0x11000000
    6cf8:	04110000 	ldreq	r0, [r1], #-0
    6cfc:	00000380 	andeq	r0, r0, r0, lsl #7
    6d00:	0020a703 	eoreq	sl, r0, r3, lsl #14
    6d04:	c0bb0700 	adcsgt	r0, fp, r0, lsl #14
    6d08:	11000002 	tstne	r0, r2
    6d0c:	00039704 	andeq	r9, r3, r4, lsl #14
    6d10:	010c0e00 	tsteq	ip, r0, lsl #28
    6d14:	0003d585 	andeq	sp, r3, r5, lsl #11
    6d18:	53491400 	movtpl	r1, #37888	; 0x9400
    6d1c:	87010052 	smlsdhi	r1, r2, r0, r0
    6d20:	000000b4 	strheq	r0, [r0], -r4
    6d24:	224b0f00 	subcs	r0, fp, #0, 30
    6d28:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    6d2c:	000000b4 	strheq	r0, [r0], -r4
    6d30:	23f40f04 	mvnscs	r0, #4, 30
    6d34:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    6d38:	000000b4 	strheq	r0, [r0], -r4
    6d3c:	67030008 	strvs	r0, [r3, -r8]
    6d40:	01000024 	tsteq	r0, r4, lsr #32
    6d44:	0003a88a 	andeq	sl, r3, sl, lsl #17
    6d48:	247a1500 	ldrbtcs	r1, [sl], #-1280	; 0xfffffb00
    6d4c:	a7010000 	strge	r0, [r1, -r0]
    6d50:	0000a204 	andeq	sl, r0, r4, lsl #4
    6d54:	041f0100 	ldreq	r0, [pc], #-256	; 6d5c <_Min_Stack_Size+0x695c>
    6d58:	54160000 	ldrpl	r0, [r6], #-0
    6d5c:	0100001b 	tsteq	r0, fp, lsl r0
    6d60:	03a204a7 			; <UNDEFINED> instruction: 0x03a204a7
    6d64:	b0170000 	andslt	r0, r7, r0
    6d68:	01000023 	tsteq	r0, r3, lsr #32
    6d6c:	00a204a9 	adceq	r0, r2, r9, lsr #9
    6d70:	55180000 	ldrpl	r0, [r8, #-0]
    6d74:	01000022 	tsteq	r0, r2, lsr #32
    6d78:	042f04ac 	strteq	r0, [pc], #-1196	; 6d80 <_Min_Stack_Size+0x6980>
    6d7c:	00080000 	andeq	r0, r8, r0
    6d80:	00161006 	andseq	r1, r6, r6
    6d84:	00161006 	andseq	r1, r6, r6
    6d88:	00008c19 	andeq	r8, r0, r9, lsl ip
    6d8c:	00042f00 	andeq	r2, r4, r0, lsl #30
    6d90:	00ad1a00 	adceq	r1, sp, r0, lsl #20
    6d94:	00070000 	andeq	r0, r7, r0
    6d98:	00041f1b 	andeq	r1, r4, fp, lsl pc
    6d9c:	236f1c00 	cmncs	pc, #0, 24
    6da0:	85010000 	strhi	r0, [r1, #-0]
    6da4:	04720104 	ldrbteq	r0, [r2], #-260	; 0xfffffefc
    6da8:	54160000 	ldrpl	r0, [r6], #-0
    6dac:	0100001b 	tsteq	r0, fp, lsl r0
    6db0:	03a20485 			; <UNDEFINED> instruction: 0x03a20485
    6db4:	cc160000 	ldcgt	0, cr0, [r6], {-0}
    6db8:	01000024 	tsteq	r0, r4, lsr #32
    6dbc:	00a20485 	adceq	r0, r2, r5, lsl #9
    6dc0:	f9160000 			; <UNDEFINED> instruction: 0xf9160000
    6dc4:	01000023 	tsteq	r0, r3, lsr #32
    6dc8:	00a20485 	adceq	r0, r2, r5, lsl #9
    6dcc:	d7160000 	ldrle	r0, [r6, -r0]
    6dd0:	01000024 	tsteq	r0, r4, lsr #32
    6dd4:	00a20485 	adceq	r0, r2, r5, lsl #9
    6dd8:	15000000 	strne	r0, [r0, #-0]
    6ddc:	0000240f 	andeq	r2, r0, pc, lsl #8
    6de0:	5b04c301 	blpl	1379ec <_Min_Stack_Size+0x1375ec>
    6de4:	01000001 	tsteq	r0, r1
    6de8:	000004a8 	andeq	r0, r0, r8, lsr #9
    6dec:	001b5416 	andseq	r5, fp, r6, lsl r4
    6df0:	04c30100 	strbeq	r0, [r3], #256	; 0x100
    6df4:	000003a2 	andeq	r0, r0, r2, lsr #7
    6df8:	00144517 	andseq	r4, r4, r7, lsl r5
    6dfc:	04c50100 	strbeq	r0, [r5], #256	; 0x100
    6e00:	0000015b 	andeq	r0, r0, fp, asr r1
    6e04:	706d741d 	rsbvc	r7, sp, sp, lsl r4
    6e08:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    6e0c:	000000a2 	andeq	r0, r0, r2, lsr #1
    6e10:	22251e00 	eorcs	r1, r5, #0, 28
    6e14:	c0010000 	andgt	r0, r1, r0
    6e18:	0000015b 	andeq	r0, r0, fp, asr r1
    6e1c:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
    6e20:	00000150 	andeq	r0, r0, r0, asr r1
    6e24:	057e9c01 	ldrbeq	r9, [lr, #-3073]!	; 0xfffff3ff
    6e28:	541f0000 	ldrpl	r0, [pc], #-0	; 6e30 <_Min_Stack_Size+0x6a30>
    6e2c:	0100001b 	tsteq	r0, fp, lsl r0
    6e30:	0003a2c0 	andeq	sl, r3, r0, asr #5
    6e34:	004c2800 	subeq	r2, ip, r0, lsl #16
    6e38:	6d742000 	ldclvs	0, cr2, [r4, #-0]
    6e3c:	c2010070 	andgt	r0, r1, #112	; 0x70
    6e40:	000000a2 	andeq	r0, r0, r2, lsr #1
    6e44:	00004c46 	andeq	r4, r0, r6, asr #24
    6e48:	000eec21 	andeq	lr, lr, r1, lsr #24
    6e4c:	a2c30100 	sbcge	r0, r3, #0, 2
    6e50:	da000000 	ble	6e58 <_Min_Stack_Size+0x6a58>
    6e54:	2100004c 	tstcs	r0, ip, asr #32
    6e58:	00002505 	andeq	r2, r0, r5, lsl #10
    6e5c:	057ec401 	ldrbeq	ip, [lr, #-1025]!	; 0xfffffbff
    6e60:	4cf80000 	ldclmi	0, cr0, [r8]
    6e64:	e0220000 	eor	r0, r2, r0
    6e68:	ea000003 	b	6e7c <_Min_Stack_Size+0x6a7c>
    6e6c:	20080041 	andcs	r0, r8, r1, asr #32
    6e70:	01000010 	tsteq	r0, r0, lsl r0
    6e74:	05350132 	ldreq	r0, [r5, #-306]!	; 0xfffffece
    6e78:	f1230000 			; <UNDEFINED> instruction: 0xf1230000
    6e7c:	0b000003 	bleq	6e90 <_Min_Stack_Size+0x6a90>
    6e80:	2400004d 	strcs	r0, [r0], #-77	; 0xffffffb3
    6e84:	00001020 	andeq	r1, r0, r0, lsr #32
    6e88:	0003fd25 	andeq	pc, r3, r5, lsr #26
    6e8c:	004d1e00 	subeq	r1, sp, r0, lsl #28
    6e90:	04092600 	streq	r2, [r9], #-1536	; 0xfffffa00
    6e94:	03050000 	movweq	r0, #20480	; 0x5000
    6e98:	08007e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, sp, lr}
    6e9c:	72220000 	eorvc	r0, r2, #0
    6ea0:	50000004 	andpl	r0, r0, r4
    6ea4:	38080042 	stmdacc	r8, {r1, r6}
    6ea8:	01000010 	tsteq	r0, r0, lsl r0
    6eac:	056b0121 	strbeq	r0, [fp, #-289]!	; 0xfffffedf
    6eb0:	83230000 			; <UNDEFINED> instruction: 0x83230000
    6eb4:	31000004 	tstcc	r0, r4
    6eb8:	2400004d 	strcs	r0, [r0], #-77	; 0xffffffb3
    6ebc:	00001038 	andeq	r1, r0, r8, lsr r0
    6ec0:	00048f25 	andeq	r8, r4, r5, lsr #30
    6ec4:	004d4f00 	subeq	r4, sp, r0, lsl #30
    6ec8:	049b2500 	ldreq	r2, [fp], #1280	; 0x500
    6ecc:	4d7b0000 	ldclmi	0, cr0, [fp, #-0]
    6ed0:	00000000 	andeq	r0, r0, r0
    6ed4:	00417427 	subeq	r7, r1, r7, lsr #8
    6ed8:	000a9808 	andeq	r9, sl, r8, lsl #16
    6edc:	41962700 	orrsmi	r2, r6, r0, lsl #14
    6ee0:	0a980800 	beq	fe608ee8 <_estack+0xde5d8ee8>
    6ee4:	11000000 	mrsne	r0, (UNDEF: 0)
    6ee8:	0003d504 	andeq	sp, r3, r4, lsl #10
    6eec:	23312800 	teqcs	r1, #0, 16
    6ef0:	46010000 	strmi	r0, [r1], -r0
    6ef4:	00015b01 	andeq	r5, r1, r1, lsl #22
    6ef8:	0042b800 	subeq	fp, r2, r0, lsl #16
    6efc:	00007808 	andeq	r7, r0, r8, lsl #16
    6f00:	f39c0100 	vaddw.u16	q0, q6, d0
    6f04:	29000005 	stmdbcs	r0, {r0, r2}
    6f08:	00001b54 	andeq	r1, r0, r4, asr fp
    6f0c:	a2014601 	andge	r4, r1, #1048576	; 0x100000
    6f10:	a5000003 	strge	r0, [r0, #-3]
    6f14:	2a00004d 	bcs	7050 <_Min_Stack_Size+0x6c50>
    6f18:	00002505 	andeq	r2, r0, r5, lsl #10
    6f1c:	7e014801 	cdpvc	8, 0, cr4, cr1, cr1, {0}
    6f20:	ef000005 	svc	0x00000005
    6f24:	2b00004d 	blcs	7060 <_Min_Stack_Size+0x6c60>
    6f28:	000003e0 	andeq	r0, r0, r0, ror #7
    6f2c:	080042ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, lr}
    6f30:	00001050 	andeq	r1, r0, r0, asr r0
    6f34:	23016d01 	movwcs	r6, #7425	; 0x1d01
    6f38:	000003f1 	strdeq	r0, [r0], -r1
    6f3c:	00004e02 	andeq	r4, r0, r2, lsl #28
    6f40:	00105024 	andseq	r5, r0, r4, lsr #32
    6f44:	03fd2500 	mvnseq	r2, #0, 10
    6f48:	4e150000 	cdpmi	0, 1, cr0, cr5, cr0, {0}
    6f4c:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    6f50:	05000004 	streq	r0, [r0, #-4]
    6f54:	007e6003 	rsbseq	r6, lr, r3
    6f58:	00000008 	andeq	r0, r0, r8
    6f5c:	00229828 	eoreq	r9, r2, r8, lsr #16
    6f60:	019d0100 	orrseq	r0, sp, r0, lsl #2
    6f64:	0000015b 	andeq	r0, r0, fp, asr r1
    6f68:	08004330 	stmdaeq	r0, {r4, r5, r8, r9, lr}
    6f6c:	0000005c 	andeq	r0, r0, ip, asr r0
    6f70:	068b9c01 	streq	r9, [fp], r1, lsl #24
    6f74:	54290000 	strtpl	r0, [r9], #-0
    6f78:	0100001b 	tsteq	r0, fp, lsl r0
    6f7c:	03a2019d 			; <UNDEFINED> instruction: 0x03a2019d
    6f80:	4e550000 	cdpmi	0, 5, cr0, cr5, cr0, {0}
    6f84:	cc2c0000 	stcgt	0, cr0, [ip], #-0
    6f88:	01000024 	tsteq	r0, r4, lsr #32
    6f8c:	00a2019d 	umlaleq	r0, r2, sp, r1
    6f90:	51010000 	mrspl	r0, (UNDEF: 1)
    6f94:	0023f92c 	eoreq	pc, r3, ip, lsr #18
    6f98:	019d0100 	orrseq	r0, sp, r0, lsl #2
    6f9c:	000000a2 	andeq	r0, r0, r2, lsr #1
    6fa0:	d7295201 	strle	r5, [r9, -r1, lsl #4]!
    6fa4:	01000024 	tsteq	r0, r4, lsr #32
    6fa8:	00a2019d 	umlaleq	r0, r2, sp, r1
    6fac:	4ea80000 	cdpmi	0, 10, cr0, cr8, cr0, {0}
    6fb0:	452a0000 	strmi	r0, [sl, #-0]!
    6fb4:	01000014 	tsteq	r0, r4, lsl r0
    6fb8:	015b019f 			; <UNDEFINED> instruction: 0x015b019f
    6fbc:	4eee0000 	cdpmi	0, 14, cr0, cr14, cr0, {0}
    6fc0:	342b0000 	strtcc	r0, [fp], #-0
    6fc4:	5a000004 	bpl	6fdc <_Min_Stack_Size+0x6bdc>
    6fc8:	78080043 	stmdavc	r8, {r0, r1, r6}
    6fcc:	01000010 	tsteq	r0, r0, lsl r0
    6fd0:	652301b0 	strvs	r0, [r3, #-432]!	; 0xfffffe50
    6fd4:	1a000004 	bne	6fec <_Min_Stack_Size+0x6bec>
    6fd8:	2d00004f 	stccs	0, cr0, [r0, #-316]	; 0xfffffec4
    6fdc:	00000459 	andeq	r0, r0, r9, asr r4
    6fe0:	4d2d5201 	sfmmi	f5, 4, [sp, #-4]!
    6fe4:	01000004 	tsteq	r0, r4
    6fe8:	04412351 	strbeq	r2, [r1], #-849	; 0xfffffcaf
    6fec:	4f470000 	svcmi	0x00470000
    6ff0:	00000000 	andeq	r0, r0, r0
    6ff4:	001d5828 	andseq	r5, sp, r8, lsr #16
    6ff8:	01c90100 	biceq	r0, r9, r0, lsl #2
    6ffc:	0000015b 	andeq	r0, r0, fp, asr r1
    7000:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
    7004:	00000084 	andeq	r0, r0, r4, lsl #1
    7008:	073b9c01 	ldreq	r9, [fp, -r1, lsl #24]!
    700c:	54290000 	strtpl	r0, [r9], #-0
    7010:	0100001b 	tsteq	r0, fp, lsl r0
    7014:	03a201c9 			; <UNDEFINED> instruction: 0x03a201c9
    7018:	4f680000 	svcmi	0x00680000
    701c:	cc290000 	stcgt	0, cr0, [r9], #-0
    7020:	01000024 	tsteq	r0, r4, lsr #32
    7024:	00a201c9 	adceq	r0, r2, r9, asr #3
    7028:	4fbb0000 	svcmi	0x00bb0000
    702c:	f9290000 			; <UNDEFINED> instruction: 0xf9290000
    7030:	01000023 	tsteq	r0, r3, lsr #32
    7034:	00a201c9 	adceq	r0, r2, r9, asr #3
    7038:	4fdc0000 	svcmi	0x00dc0000
    703c:	d7290000 	strle	r0, [r9, -r0]!
    7040:	01000024 	tsteq	r0, r4, lsr #32
    7044:	00a201c9 	adceq	r0, r2, r9, asr #3
    7048:	4ffd0000 	svcmi	0x00fd0000
    704c:	452a0000 	strmi	r0, [sl, #-0]!
    7050:	01000014 	tsteq	r0, r4, lsl r0
    7054:	015b01cb 	cmpeq	fp, fp, asr #3
    7058:	50430000 	subpl	r0, r3, r0
    705c:	052a0000 	streq	r0, [sl, #-0]!
    7060:	01000025 	tsteq	r0, r5, lsr #32
    7064:	057e01ce 	ldrbeq	r0, [lr, #-462]!	; 0xfffffe32
    7068:	506f0000 	rsbpl	r0, pc, r0
    706c:	342b0000 	strtcc	r0, [fp], #-0
    7070:	b8000004 	stmdalt	r0, {r2}
    7074:	90080043 	andls	r0, r8, r3, asr #32
    7078:	01000010 	tsteq	r0, r0, lsl r0
    707c:	652301df 	strvs	r0, [r3, #-479]!	; 0xfffffe21
    7080:	d2000004 	andle	r0, r0, #4
    7084:	23000050 	movwcs	r0, #80	; 0x50
    7088:	00000459 	andeq	r0, r0, r9, asr r4
    708c:	000050ff 	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    7090:	00044d23 	andeq	r4, r4, r3, lsr #26
    7094:	00512000 	subseq	r2, r1, r0
    7098:	04412300 	strbeq	r2, [r1], #-768	; 0xfffffd00
    709c:	51410000 	mrspl	r0, (UNDEF: 65)
    70a0:	00000000 	andeq	r0, r0, r0
    70a4:	0023e62e 	eoreq	lr, r3, lr, lsr #12
    70a8:	02080100 	andeq	r0, r8, #0, 2
    70ac:	0000015b 	andeq	r0, r0, fp, asr r1
    70b0:	00077101 	andeq	r7, r7, r1, lsl #2
    70b4:	1b541600 	blne	150c8bc <_Min_Stack_Size+0x150c4bc>
    70b8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    70bc:	0003a202 	andeq	sl, r3, r2, lsl #4
    70c0:	25051700 	strcs	r1, [r5, #-1792]	; 0xfffff900
    70c4:	0b010000 	bleq	470cc <_Min_Stack_Size+0x46ccc>
    70c8:	00057e02 	andeq	r7, r5, r2, lsl #28
    70cc:	0eec1700 	cdpeq	7, 14, cr1, cr12, cr0, {0}
    70d0:	0d010000 	stceq	0, cr0, [r1, #-0]
    70d4:	0000a202 	andeq	sl, r0, r2, lsl #4
    70d8:	3b2f0000 	blcc	bc70e0 <_Min_Stack_Size+0xbc6ce0>
    70dc:	10000007 	andne	r0, r0, r7
    70e0:	8e080044 	cdphi	0, 0, cr0, cr8, cr4, {2}
    70e4:	01000000 	mrseq	r0, (UNDEF: 0)
    70e8:	0007b09c 	muleq	r7, ip, r0
    70ec:	074c2300 	strbeq	r2, [ip, -r0, lsl #6]
    70f0:	51620000 	cmnpl	r2, r0
    70f4:	58260000 	stmdapl	r6!, {}	; <UNPREDICTABLE>
    70f8:	01000007 	tsteq	r0, r7
    70fc:	07642556 			; <UNDEFINED> instruction: 0x07642556
    7100:	51800000 	orrpl	r0, r0, r0
    7104:	1a270000 	bne	9c710c <_Min_Stack_Size+0x9c6d0c>
    7108:	98080044 	stmdals	r8, {r2, r6}
    710c:	2700000a 	strcs	r0, [r0, -sl]
    7110:	0800445e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, lr}
    7114:	00000a98 	muleq	r0, r8, sl
    7118:	19a92800 	stmibne	r9!, {fp, sp}
    711c:	4b010000 	blmi	47124 <_Min_Stack_Size+0x46d24>
    7120:	00015b02 	andeq	r5, r1, r2, lsl #22
    7124:	0044a000 	subeq	sl, r4, r0
    7128:	00002408 	andeq	r2, r0, r8, lsl #8
    712c:	db9c0100 	blle	fe707534 <_estack+0xde6d7534>
    7130:	29000007 	stmdbcs	r0, {r0, r1, r2}
    7134:	00001b54 	andeq	r1, r0, r4, asr fp
    7138:	a2024b01 	andge	r4, r2, #1024	; 0x400
    713c:	93000003 	movwls	r0, #3
    7140:	00000051 	andeq	r0, r0, r1, asr r0
    7144:	00251928 	eoreq	r1, r5, r8, lsr #18
    7148:	02690100 	rsbeq	r0, r9, #0, 2
    714c:	0000015b 	andeq	r0, r0, fp, asr r1
    7150:	080044c4 	stmdaeq	r0, {r2, r6, r7, sl, lr}
    7154:	0000021c 	andeq	r0, r0, ip, lsl r2
    7158:	08c99c01 	stmiaeq	r9, {r0, sl, fp, ip, pc}^
    715c:	54290000 	strtpl	r0, [r9], #-0
    7160:	0100001b 	tsteq	r0, fp, lsl r0
    7164:	03a20269 			; <UNDEFINED> instruction: 0x03a20269
    7168:	51cd0000 	bicpl	r0, sp, r0
    716c:	d8290000 	stmdale	r9!, {}	; <UNPREDICTABLE>
    7170:	01000023 	tsteq	r0, r3, lsr #32
    7174:	02770269 	rsbseq	r0, r7, #-1879048186	; 0x90000006
    7178:	51eb0000 	mvnpl	r0, r0
    717c:	18290000 	stmdane	r9!, {}	; <UNPREDICTABLE>
    7180:	0100002c 	tsteq	r0, ip, lsr #32
    7184:	00a20269 	adceq	r0, r2, r9, ror #4
    7188:	520c0000 	andpl	r0, ip, #0
    718c:	45300000 	ldrmi	r0, [r0, #-0]!
    7190:	01000014 	tsteq	r0, r4, lsl r0
    7194:	015b026b 	cmpeq	fp, fp, ror #4
    7198:	2a000000 	bcs	71a0 <_Min_Stack_Size+0x6da0>
    719c:	0000250a 	andeq	r2, r0, sl, lsl #10
    71a0:	a2026c01 	andge	r6, r2, #256	; 0x100
    71a4:	77000000 	strvc	r0, [r0, -r0]
    71a8:	2a000052 	bcs	72f8 <_Min_Stack_Size+0x6ef8>
    71ac:	00000eec 	andeq	r0, r0, ip, ror #29
    71b0:	a2026d01 	andge	r6, r2, #1, 26	; 0x40
    71b4:	a0000000 	andge	r0, r0, r0
    71b8:	2a000052 	bcs	7308 <_Min_Stack_Size+0x6f08>
    71bc:	00002268 	andeq	r2, r0, r8, ror #4
    71c0:	a2026e01 	andge	r6, r2, #1, 28
    71c4:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    71c8:	2a000052 	bcs	7318 <_Min_Stack_Size+0x6f18>
    71cc:	00002505 	andeq	r2, r0, r5, lsl #10
    71d0:	7e027101 	adfvcs	f7, f2, f1
    71d4:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    71d8:	22000052 	andcs	r0, r0, #82	; 0x52
    71dc:	0000073b 	andeq	r0, r0, fp, lsr r7
    71e0:	0800464a 	stmdaeq	r0, {r1, r3, r6, r9, sl, lr}
    71e4:	000010b0 	strheq	r1, [r0], -r0
    71e8:	b602c801 	strlt	ip, [r2], -r1, lsl #16
    71ec:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    71f0:	0000074c 	andeq	r0, r0, ip, asr #14
    71f4:	b0245401 	eorlt	r5, r4, r1, lsl #8
    71f8:	26000010 			; <UNDEFINED> instruction: 0x26000010
    71fc:	00000758 	andeq	r0, r0, r8, asr r7
    7200:	64255601 	strtvs	r5, [r5], #-1537	; 0xfffff9ff
    7204:	1b000007 	blne	7228 <_Min_Stack_Size+0x6e28>
    7208:	27000053 	smlsdcs	r0, r3, r0, r0
    720c:	08004650 	stmdaeq	r0, {r4, r6, r9, sl, lr}
    7210:	00000a98 	muleq	r0, r8, sl
    7214:	0046a427 	subeq	sl, r6, r7, lsr #8
    7218:	000a9808 	andeq	r9, sl, r8, lsl #16
    721c:	27000000 	strcs	r0, [r0, -r0]
    7220:	080044d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr}
    7224:	00000a98 	muleq	r0, r8, sl
    7228:	00453227 	subeq	r3, r5, r7, lsr #4
    722c:	000a9808 	andeq	r9, sl, r8, lsl #16
    7230:	3d310000 	ldccc	0, cr0, [r1, #-0]
    7234:	01000024 	tsteq	r0, r4, lsr #32
    7238:	46e002f2 			; <UNDEFINED> instruction: 0x46e002f2
    723c:	01a80800 			; <UNDEFINED> instruction: 0x01a80800
    7240:	9c010000 	stcls	0, cr0, [r1], {-0}
    7244:	00000971 	andeq	r0, r0, r1, ror r9
    7248:	001b5429 	andseq	r5, fp, r9, lsr #8
    724c:	02f20100 	rscseq	r0, r2, #0, 2
    7250:	000003a2 	andeq	r0, r0, r2, lsr #7
    7254:	0000535a 	andeq	r5, r0, sl, asr r3
    7258:	00226832 	eoreq	r6, r2, r2, lsr r8
    725c:	02f40100 	rscseq	r0, r4, #0, 2
    7260:	000000a2 	andeq	r0, r0, r2, lsr #1
    7264:	fe325501 	cdp2	5, 3, cr5, cr2, cr1, {0}
    7268:	01000018 	tsteq	r0, r8, lsl r0
    726c:	00b402f5 	ldrshteq	r0, [r4], r5
    7270:	91020000 	mrsls	r0, (UNDEF: 2)
    7274:	24fd3264 	ldrbtcs	r3, [sp], #612	; 0x264
    7278:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    727c:	0000a202 	andeq	sl, r0, r2, lsl #4
    7280:	00760d00 	rsbseq	r0, r6, r0, lsl #26
    7284:	800a25f7 	strdhi	r2, [sl], -r7
    7288:	1b25f725 	blne	984f24 <_Min_Stack_Size+0x984b24>
    728c:	329f00f7 	addscc	r0, pc, #247	; 0xf7
    7290:	00002505 	andeq	r2, r0, r5, lsl #10
    7294:	7e02f901 	cdpvc	9, 0, cr15, cr2, cr1, {0}
    7298:	01000005 	tsteq	r0, r5
    729c:	478c3357 			; <UNDEFINED> instruction: 0x478c3357
    72a0:	09440800 	stmdbeq	r4, {fp}^
    72a4:	01340000 	teqeq	r4, r0
    72a8:	00740250 	rsbseq	r0, r4, r0, asr r2
    72ac:	47b23300 	ldrmi	r3, [r2, r0, lsl #6]!
    72b0:	09540800 	ldmdbeq	r4, {fp}^
    72b4:	01340000 	teqeq	r4, r0
    72b8:	00740250 	rsbseq	r0, r4, r0, asr r2
    72bc:	47d63300 	ldrbmi	r3, [r6, r0, lsl #6]
    72c0:	09640800 	stmdbeq	r4!, {fp}^
    72c4:	01340000 	teqeq	r4, r0
    72c8:	00740250 	rsbseq	r0, r4, r0, asr r2
    72cc:	484c3500 	stmdami	ip, {r8, sl, ip, sp}^
    72d0:	01340800 	teqeq	r4, r0, lsl #16
    72d4:	00740250 	rsbseq	r0, r4, r0, asr r2
    72d8:	32280000 	eorcc	r0, r8, #0
    72dc:	01000022 	tsteq	r0, r2, lsr #32
    72e0:	015b03cf 	cmpeq	fp, pc, asr #7
    72e4:	48880000 	stmmi	r8, {}	; <UNPREDICTABLE>
    72e8:	00660800 	rsbeq	r0, r6, r0, lsl #16
    72ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    72f0:	000009ca 	andeq	r0, r0, sl, asr #19
    72f4:	001b5429 	andseq	r5, fp, r9, lsr #8
    72f8:	03cf0100 	biceq	r0, pc, #0, 2
    72fc:	000003a2 	andeq	r0, r0, r2, lsr #7
    7300:	00005378 	andeq	r5, r0, r8, ror r3
    7304:	0024042c 	eoreq	r0, r4, ip, lsr #8
    7308:	03cf0100 	biceq	r0, pc, #0, 2
    730c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    7310:	f3295101 	vrhadd.u32	d5, d9, d1
    7314:	01000024 	tsteq	r0, r4, lsr #32
    7318:	09d503cf 	ldmibeq	r5, {r0, r1, r2, r3, r6, r7, r8, r9}^
    731c:	53d30000 	bicspl	r0, r3, #0
    7320:	452a0000 	strmi	r0, [sl, #-0]!
    7324:	01000014 	tsteq	r0, r4, lsl r0
    7328:	015b03d2 	ldrsbeq	r0, [fp, #-50]	; 0xffffffce
    732c:	53ff0000 	mvnspl	r0, #0
    7330:	12000000 	andne	r0, r0, #0
    7334:	000009d5 	ldrdeq	r0, [r0], -r5
    7338:	0003a213 	andeq	sl, r3, r3, lsl r2
    733c:	04110000 	ldreq	r0, [r1], #-0
    7340:	000009ca 	andeq	r0, r0, sl, asr #19
    7344:	00242228 	eoreq	r2, r4, r8, lsr #4
    7348:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    734c:	0000015b 	andeq	r0, r0, fp, asr r1
    7350:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    7354:	0000006e 	andeq	r0, r0, lr, rrx
    7358:	0a269c01 	beq	9ae364 <_Min_Stack_Size+0x9adf64>
    735c:	54290000 	strtpl	r0, [r9], #-0
    7360:	0100001b 	tsteq	r0, fp, lsl r0
    7364:	03a2040b 			; <UNDEFINED> instruction: 0x03a2040b
    7368:	542a0000 	strtpl	r0, [sl], #-0
    736c:	04290000 	strteq	r0, [r9], #-0
    7370:	01000024 	tsteq	r0, r4, lsr #32
    7374:	02b5040b 	adcseq	r0, r5, #184549376	; 0xb000000
    7378:	545e0000 	ldrbpl	r0, [lr], #-0
    737c:	452a0000 	strmi	r0, [sl, #-0]!
    7380:	01000014 	tsteq	r0, r4, lsl r0
    7384:	015b040d 	cmpeq	fp, sp, lsl #8
    7388:	548a0000 	strpl	r0, [sl], #0
    738c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7390:	000024e2 	andeq	r2, r0, r2, ror #9
    7394:	57046001 	strpl	r6, [r4, -r1]
    7398:	60000002 	andvs	r0, r0, r2
    739c:	06080049 	streq	r0, [r8], -r9, asr #32
    73a0:	01000000 	mrseq	r0, (UNDEF: 0)
    73a4:	000a519c 	muleq	sl, ip, r1
    73a8:	1b542900 	blne	15117b0 <_Min_Stack_Size+0x15113b0>
    73ac:	60010000 	andvs	r0, r1, r0
    73b0:	0003a204 	andeq	sl, r3, r4, lsl #4
    73b4:	0054b500 	subseq	fp, r4, r0, lsl #10
    73b8:	6f280000 	svcvs	0x00280000
    73bc:	01000022 	tsteq	r0, r2, lsr #32
    73c0:	00a2046b 	adceq	r0, r2, fp, ror #8
    73c4:	49680000 	stmdbmi	r8!, {}^	; <UNPREDICTABLE>
    73c8:	00040800 	andeq	r0, r4, r0, lsl #16
    73cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    73d0:	00000a7c 	andeq	r0, r0, ip, ror sl
    73d4:	001b5429 	andseq	r5, fp, r9, lsr #8
    73d8:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
    73dc:	000003a2 	andeq	r0, r0, r2, lsr #7
    73e0:	000054d6 	ldrdeq	r5, [r0], -r6
    73e4:	07f33600 	ldrbeq	r3, [r3, r0, lsl #12]!
    73e8:	44080000 	strmi	r0, [r8], #-0
    73ec:	000a8807 	andeq	r8, sl, r7, lsl #16
    73f0:	00970500 	addseq	r0, r7, r0, lsl #10
    73f4:	f7370000 			; <UNDEFINED> instruction: 0xf7370000
    73f8:	0900000c 	stmdbeq	r0, {r2, r3}
    73fc:	0000a24c 	andeq	sl, r0, ip, asr #4
    7400:	0ea33800 	cdpeq	8, 10, cr3, cr3, cr0, {0}
    7404:	d00a0000 	andle	r0, sl, r0
    7408:	000000a2 	andeq	r0, r0, r2, lsr #1
    740c:	000d0100 	andeq	r0, sp, r0, lsl #2
    7410:	77000400 	strvc	r0, [r0, -r0, lsl #8]
    7414:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    7418:	00029801 	andeq	r9, r2, r1, lsl #16
    741c:	25450100 	strbcs	r0, [r5, #-256]	; 0xffffff00
    7420:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    7424:	12780000 	rsbsne	r0, r8, #0
    7428:	00000000 	andeq	r0, r0, r0
    742c:	35530000 	ldrbcc	r0, [r3, #-0]
    7430:	01020000 	mrseq	r0, (UNDEF: 2)
    7434:	0007d406 	andeq	sp, r7, r6, lsl #8
    7438:	00880300 	addeq	r0, r8, r0, lsl #6
    743c:	1d030000 	stcne	0, cr0, [r3, #-0]
    7440:	00000037 	andeq	r0, r0, r7, lsr r0
    7444:	d2080102 	andle	r0, r8, #-2147483648	; 0x80000000
    7448:	02000007 	andeq	r0, r0, #7
    744c:	08220502 	stmdaeq	r2!, {r1, r8, sl}
    7450:	5b030000 	blpl	c7458 <_Min_Stack_Size+0xc7058>
    7454:	03000009 	movweq	r0, #9
    7458:	0000502b 	andeq	r5, r0, fp, lsr #32
    745c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7460:	000004f7 	strdeq	r0, [r0], -r7
    7464:	0005a803 	andeq	sl, r5, r3, lsl #16
    7468:	623f0300 	eorsvs	r0, pc, #0, 6
    746c:	02000000 	andeq	r0, r0, #0
    7470:	04450504 	strbeq	r0, [r5], #-1284	; 0xfffffafc
    7474:	b1030000 	mrslt	r0, (UNDEF: 3)
    7478:	03000003 	movweq	r0, #3
    747c:	00007441 	andeq	r7, r0, r1, asr #8
    7480:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7484:	000000d4 	ldrdeq	r0, [r0], -r4
    7488:	40050802 	andmi	r0, r5, r2, lsl #16
    748c:	02000004 	andeq	r0, r0, #4
    7490:	00cf0708 	sbceq	r0, pc, r8, lsl #14
    7494:	04040000 	streq	r0, [r4], #-0
    7498:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    749c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    74a0:	000000d9 	ldrdeq	r0, [r0], -r9
    74a4:	00008a03 	andeq	r8, r0, r3, lsl #20
    74a8:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    74ac:	03000000 	movweq	r0, #0
    74b0:	0000095d 	andeq	r0, r0, sp, asr r9
    74b4:	00451a04 	subeq	r1, r5, r4, lsl #20
    74b8:	aa030000 	bge	c74c0 <_Min_Stack_Size+0xc70c0>
    74bc:	04000005 	streq	r0, [r0], #-5
    74c0:	0000571f 	andeq	r5, r0, pc, lsl r7
    74c4:	03b30300 			; <UNDEFINED> instruction: 0x03b30300
    74c8:	20040000 	andcs	r0, r4, r0
    74cc:	00000069 	andeq	r0, r0, r9, rrx
    74d0:	4c070402 	cfstrsmi	mvf0, [r7], {2}
    74d4:	05000006 	streq	r0, [r0, #-6]
    74d8:	000000b8 	strheq	r0, [r0], -r8
    74dc:	0000b806 	andeq	fp, r0, r6, lsl #16
    74e0:	0000df00 	andeq	sp, r0, r0, lsl #30
    74e4:	00c30700 	sbceq	r0, r3, r0, lsl #14
    74e8:	00010000 	andeq	r0, r1, r0
    74ec:	00051c08 	andeq	r1, r5, r8, lsl #24
    74f0:	00014202 	andeq	r4, r1, r2, lsl #4
    74f4:	43410900 	movtmi	r0, #6400	; 0x1900
    74f8:	02050052 	andeq	r0, r5, #82	; 0x52
    74fc:	0000ca02 	andeq	ip, r0, r2, lsl #20
    7500:	020a0000 	andeq	r0, sl, #0
    7504:	0500000e 	streq	r0, [r0, #-14]
    7508:	00ca0203 	sbceq	r0, sl, r3, lsl #4
    750c:	0a040000 	beq	107514 <_Min_Stack_Size+0x107114>
    7510:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7514:	ca020405 	bgt	88530 <_Min_Stack_Size+0x88130>
    7518:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    751c:	00525309 	subseq	r5, r2, r9, lsl #6
    7520:	ca020505 	bgt	8893c <_Min_Stack_Size+0x8853c>
    7524:	0c000000 	stceq	0, cr0, [r0], {-0}
    7528:	00524309 	subseq	r4, r2, r9, lsl #6
    752c:	ca020605 	bgt	88d48 <_Min_Stack_Size+0x88948>
    7530:	10000000 	andne	r0, r0, r0
    7534:	000dc30a 	andeq	ip, sp, sl, lsl #6
    7538:	02070500 	andeq	r0, r7, #0, 10
    753c:	000000ca 	andeq	r0, r0, sl, asr #1
    7540:	0e5a0a14 	mrceq	10, 2, r0, cr10, cr4, {0}
    7544:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    7548:	0000ca02 	andeq	ip, r0, r2, lsl #20
    754c:	0b001800 	bleq	d554 <_Min_Stack_Size+0xd154>
    7550:	0000103b 	andeq	r1, r0, fp, lsr r0
    7554:	df020905 	svcle	0x00020905
    7558:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    755c:	02510528 	subseq	r0, r1, #40, 10	; 0xa000000
    7560:	000001cd 	andeq	r0, r0, sp, asr #3
    7564:	0000bf0a 	andeq	fp, r0, sl, lsl #30
    7568:	02530500 	subseq	r0, r3, #0, 10
    756c:	000000ca 	andeq	r0, r0, sl, asr #1
    7570:	00920a00 	addseq	r0, r2, r0, lsl #20
    7574:	54050000 	strpl	r0, [r5], #-0
    7578:	0000ca02 	andeq	ip, r0, r2, lsl #20
    757c:	a90a0400 	stmdbge	sl, {sl}
    7580:	05000003 	streq	r0, [r0, #-3]
    7584:	00ca0255 	sbceq	r0, sl, r5, asr r2
    7588:	0a080000 	beq	207590 <_Min_Stack_Size+0x207190>
    758c:	00000000 	andeq	r0, r0, r0
    7590:	ca025605 	bgt	9cdac <_Min_Stack_Size+0x9c9ac>
    7594:	0c000000 	stceq	0, cr0, [r0], {-0}
    7598:	52444909 	subpl	r4, r4, #147456	; 0x24000
    759c:	02570500 	subseq	r0, r7, #0, 10
    75a0:	000000ca 	andeq	r0, r0, sl, asr #1
    75a4:	444f0910 	strbmi	r0, [pc], #-2320	; 75ac <_Min_Stack_Size+0x71ac>
    75a8:	58050052 	stmdapl	r5, {r1, r4, r6}
    75ac:	0000ca02 	andeq	ip, r0, r2, lsl #20
    75b0:	9b0a1400 	blls	28c5b8 <_Min_Stack_Size+0x28c1b8>
    75b4:	05000001 	streq	r0, [r0, #-1]
    75b8:	00ca0259 	sbceq	r0, sl, r9, asr r2
    75bc:	0a180000 	beq	6075c4 <_Min_Stack_Size+0x6071c4>
    75c0:	00000019 	andeq	r0, r0, r9, lsl r0
    75c4:	ca025a05 	bgt	9dde0 <_Min_Stack_Size+0x9d9e0>
    75c8:	1c000000 	stcne	0, cr0, [r0], {-0}
    75cc:	52464109 	subpl	r4, r6, #1073741826	; 0x40000002
    75d0:	025b0500 	subseq	r0, fp, #0, 10
    75d4:	000001cd 	andeq	r0, r0, sp, asr #3
    75d8:	cf050020 	svcgt	0x00050020
    75dc:	0b000000 	bleq	75e4 <_Min_Stack_Size+0x71e4>
    75e0:	00000269 	andeq	r0, r0, r9, ror #4
    75e4:	4e025c05 	cdpmi	12, 0, cr5, cr2, cr5, {0}
    75e8:	08000001 	stmdaeq	r0, {r0}
    75ec:	02bd0508 	adcseq	r0, sp, #8, 10	; 0x2000000
    75f0:	00000201 	andeq	r0, r0, r1, lsl #4
    75f4:	00524309 	subseq	r4, r2, r9, lsl #6
    75f8:	ca02bf05 	bgt	b7214 <_Min_Stack_Size+0xb6e14>
    75fc:	00000000 	andeq	r0, r0, r0
    7600:	52534309 	subspl	r4, r3, #603979776	; 0x24000000
    7604:	02c00500 	sbceq	r0, r0, #0, 10
    7608:	000000ca 	andeq	r0, r0, sl, asr #1
    760c:	a90b0004 	stmdbge	fp, {r2}
    7610:	05000001 	streq	r0, [r0, #-1]
    7614:	01de02c1 	bicseq	r0, lr, r1, asr #5
    7618:	90080000 	andls	r0, r8, r0
    761c:	b602c705 	strlt	ip, [r2], -r5, lsl #14
    7620:	09000003 	stmdbeq	r0, {r0, r1}
    7624:	05005243 	streq	r5, [r0, #-579]	; 0xfffffdbd
    7628:	00ca02c9 	sbceq	r0, sl, r9, asr #5
    762c:	0a000000 	beq	7634 <_Min_Stack_Size+0x7234>
    7630:	00000245 	andeq	r0, r0, r5, asr #4
    7634:	ca02ca05 	bgt	b9e50 <_Min_Stack_Size+0xb9a50>
    7638:	04000000 	streq	r0, [r0], #-0
    763c:	00056b0a 	andeq	r6, r5, sl, lsl #22
    7640:	02cb0500 	sbceq	r0, fp, #0, 10
    7644:	000000ca 	andeq	r0, r0, sl, asr #1
    7648:	49430908 	stmdbmi	r3, {r3, r8, fp}^
    764c:	cc050052 	stcgt	0, cr0, [r5], {82}	; 0x52
    7650:	0000ca02 	andeq	ip, r0, r2, lsl #20
    7654:	a00a0c00 	andge	r0, sl, r0, lsl #24
    7658:	05000001 	streq	r0, [r0, #-1]
    765c:	00ca02cd 	sbceq	r0, sl, sp, asr #5
    7660:	0a100000 	beq	407668 <_Min_Stack_Size+0x407268>
    7664:	00000966 	andeq	r0, r0, r6, ror #18
    7668:	ca02ce05 	bgt	bae84 <_Min_Stack_Size+0xbaa84>
    766c:	14000000 	strne	r0, [r0], #-0
    7670:	00053e0a 	andeq	r3, r5, sl, lsl #28
    7674:	02cf0500 	sbceq	r0, pc, #0, 10
    7678:	000000ca 	andeq	r0, r0, sl, asr #1
    767c:	07690a18 			; <UNDEFINED> instruction: 0x07690a18
    7680:	d0050000 	andle	r0, r5, r0
    7684:	0000b802 	andeq	fp, r0, r2, lsl #16
    7688:	2e0a1c00 	cdpcs	12, 0, cr1, cr10, cr0, {0}
    768c:	05000007 	streq	r0, [r0, #-7]
    7690:	00ca02d1 	ldrdeq	r0, [sl], #33	; 0x21
    7694:	0a200000 	beq	80769c <_Min_Stack_Size+0x80729c>
    7698:	000001c8 	andeq	r0, r0, r8, asr #3
    769c:	ca02d205 	bgt	bbeb8 <_Min_Stack_Size+0xbbab8>
    76a0:	24000000 	strcs	r0, [r0], #-0
    76a4:	0007730a 	andeq	r7, r7, sl, lsl #6
    76a8:	02d30500 	sbcseq	r0, r3, #0, 10
    76ac:	000000cf 	andeq	r0, r0, pc, asr #1
    76b0:	0ab70a28 	beq	fedc9f58 <_estack+0xded99f58>
    76b4:	d4050000 	strle	r0, [r5], #-0
    76b8:	0000ca02 	andeq	ip, r0, r2, lsl #20
    76bc:	d90a3000 	stmdble	sl, {ip, sp}
    76c0:	05000009 	streq	r0, [r0, #-9]
    76c4:	00ca02d5 	ldrdeq	r0, [sl], #37	; 0x25
    76c8:	0a340000 	beq	d076d0 <_Min_Stack_Size+0xd072d0>
    76cc:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    76d0:	ca02d605 	bgt	bceec <_Min_Stack_Size+0xbcaec>
    76d4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    76d8:	00077d0a 	andeq	r7, r7, sl, lsl #26
    76dc:	02d70500 	sbcseq	r0, r7, #0, 10
    76e0:	000000b8 	strheq	r0, [r0], -r8
    76e4:	09d10a3c 	ldmibeq	r1, {r2, r3, r4, r5, r9, fp}^
    76e8:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    76ec:	0000ca02 	andeq	ip, r0, r2, lsl #20
    76f0:	720a4000 	andvc	r4, sl, #0
    76f4:	05000008 	streq	r0, [r0, #-8]
    76f8:	00ca02d9 	ldrdeq	r0, [sl], #41	; 0x29
    76fc:	0a440000 	beq	1107704 <_Min_Stack_Size+0x1107304>
    7700:	000008cd 	andeq	r0, r0, sp, asr #17
    7704:	cf02da05 	svcgt	0x0002da05
    7708:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    770c:	0001520a 	andeq	r5, r1, sl, lsl #4
    7710:	02db0500 	sbcseq	r0, fp, #0, 10
    7714:	000000ca 	andeq	r0, r0, sl, asr #1
    7718:	07110a50 			; <UNDEFINED> instruction: 0x07110a50
    771c:	dc050000 	stcle	0, cr0, [r5], {-0}
    7720:	0000ca02 	andeq	ip, r0, r2, lsl #20
    7724:	340a5400 	strcc	r5, [sl], #-1024	; 0xfffffc00
    7728:	0500000a 	streq	r0, [r0, #-10]
    772c:	00ca02dd 	ldrdeq	r0, [sl], #45	; 0x2d
    7730:	0a580000 	beq	1607738 <_Min_Stack_Size+0x1607338>
    7734:	00000798 	muleq	r0, r8, r7
    7738:	b802de05 	stmdalt	r2, {r0, r2, r9, sl, fp, ip, lr, pc}
    773c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    7740:	00051c0a 	andeq	r1, r5, sl, lsl #24
    7744:	02df0500 	sbcseq	r0, pc, #0, 10
    7748:	000000ca 	andeq	r0, r0, sl, asr #1
    774c:	059e0a60 	ldreq	r0, [lr, #2656]	; 0xa60
    7750:	e0050000 	and	r0, r5, r0
    7754:	0000ca02 	andeq	ip, r0, r2, lsl #20
    7758:	a20a6400 	andge	r6, sl, #0, 8
    775c:	05000007 	streq	r0, [r0, #-7]
    7760:	00cf02e1 	sbceq	r0, pc, r1, ror #5
    7764:	0a680000 	beq	1a0776c <_Min_Stack_Size+0x1a0736c>
    7768:	00000a67 	andeq	r0, r0, r7, ror #20
    776c:	ca02e205 	bgt	bff88 <_Min_Stack_Size+0xbfb88>
    7770:	70000000 	andvc	r0, r0, r0
    7774:	52534309 	subspl	r4, r3, #603979776	; 0x24000000
    7778:	02e30500 	rsceq	r0, r3, #0, 10
    777c:	000000ca 	andeq	r0, r0, sl, asr #1
    7780:	07ac0a74 			; <UNDEFINED> instruction: 0x07ac0a74
    7784:	e4050000 	str	r0, [r5], #-0
    7788:	0000cf02 	andeq	ip, r0, r2, lsl #30
    778c:	2e0a7800 	cdpcs	8, 0, cr7, cr10, cr0, {0}
    7790:	0500000a 	streq	r0, [r0, #-10]
    7794:	00ca02e5 	sbceq	r0, sl, r5, ror #5
    7798:	0a800000 	beq	fe0077a0 <_estack+0xddfd77a0>
    779c:	00000526 	andeq	r0, r0, r6, lsr #10
    77a0:	ca02e605 	bgt	c0fbc <_Min_Stack_Size+0xc0bbc>
    77a4:	84000000 	strhi	r0, [r0], #-0
    77a8:	0005650a 	andeq	r6, r5, sl, lsl #10
    77ac:	02e70500 	rsceq	r0, r7, #0, 10
    77b0:	000000ca 	andeq	r0, r0, sl, asr #1
    77b4:	01720a88 	cmneq	r2, r8, lsl #21
    77b8:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
    77bc:	0000ca02 	andeq	ip, r0, r2, lsl #20
    77c0:	0b008c00 	bleq	2a7c8 <_Min_Stack_Size+0x2a3c8>
    77c4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    77c8:	0d02ea05 	vstreq	s28, [r2, #-20]	; 0xffffffec
    77cc:	0c000002 	stceq	0, cr0, [r0], {2}
    77d0:	d7c50601 	strble	r0, [r5, r1, lsl #12]
    77d4:	0d000003 	stceq	0, cr0, [r0, #-12]
    77d8:	000019a3 	andeq	r1, r0, r3, lsr #19
    77dc:	45530e00 	ldrbmi	r0, [r3, #-3584]	; 0xfffff200
    77e0:	00010054 	andeq	r0, r1, r4, asr r0
    77e4:	cb06010c 	blgt	187c1c <_Min_Stack_Size+0x18781c>
    77e8:	000003ec 	andeq	r0, r0, ip, ror #7
    77ec:	000dc90d 	andeq	ip, sp, sp, lsl #18
    77f0:	f80d0000 			; <UNDEFINED> instruction: 0xf80d0000
    77f4:	0100000d 	tsteq	r0, sp
    77f8:	08010200 	stmdaeq	r1, {r9}
    77fc:	000007db 	ldrdeq	r0, [r0], -fp
    7800:	3a07010c 	bcc	1c7c38 <_Min_Stack_Size+0x1c7838>
    7804:	00000414 	andeq	r0, r0, r4, lsl r4
    7808:	0004d00d 	andeq	sp, r4, sp
    780c:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    7810:	01000009 	tsteq	r0, r9
    7814:	0008000d 	andeq	r0, r8, sp
    7818:	a30d0200 	movwge	r0, #53760	; 0xd200
    781c:	03000004 	movweq	r0, #4
    7820:	058c0300 	streq	r0, [ip, #768]	; 0x300
    7824:	3f070000 	svccc	0x00070000
    7828:	000003f3 	strdeq	r0, [r0], -r3
    782c:	4108180f 	tstmi	r8, pc, lsl #16
    7830:	00000470 	andeq	r0, r0, r0, ror r4
    7834:	00021a10 	andeq	r1, r2, r0, lsl sl
    7838:	b8430800 	stmdalt	r3, {fp}^
    783c:	00000000 	andeq	r0, r0, r0
    7840:	00083c10 	andeq	r3, r8, r0, lsl ip
    7844:	b8460800 	stmdalt	r6, {fp}^
    7848:	04000000 	streq	r0, [r0], #-0
    784c:	0000ab10 	andeq	sl, r0, r0, lsl fp
    7850:	b8490800 	stmdalt	r9, {fp}^
    7854:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7858:	0000b010 	andeq	fp, r0, r0, lsl r0
    785c:	b84c0800 	stmdalt	ip, {fp}^
    7860:	0c000000 	stceq	0, cr0, [r0], {-0}
    7864:	0000b510 	andeq	fp, r0, r0, lsl r5
    7868:	b8500800 	ldmdalt	r0, {fp}^
    786c:	10000000 	andne	r0, r0, r0
    7870:	0000ba10 	andeq	fp, r0, r0, lsl sl
    7874:	b8530800 	ldmdalt	r3, {fp}^
    7878:	14000000 	strne	r0, [r0], #-0
    787c:	0a750300 	beq	1d48484 <_Min_Stack_Size+0x1d48084>
    7880:	5c080000 	stcpl	0, cr0, [r8], {-0}
    7884:	0000041f 	andeq	r0, r0, pc, lsl r4
    7888:	4509300f 	strmi	r3, [r9, #-15]
    788c:	000004d8 	ldrdeq	r0, [r0], -r8
    7890:	00055610 	andeq	r5, r5, r0, lsl r6
    7894:	b8470900 	stmdalt	r7, {r8, fp}^
    7898:	00000000 	andeq	r0, r0, r0
    789c:	00046010 	andeq	r6, r4, r0, lsl r0
    78a0:	b84a0900 	stmdalt	sl, {r8, fp}^
    78a4:	04000000 	streq	r0, [r0], #-0
    78a8:	00011510 	andeq	r1, r1, r0, lsl r5
    78ac:	b84d0900 	stmdalt	sp, {r8, fp}^
    78b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    78b4:	00020310 	andeq	r0, r2, r0, lsl r3
    78b8:	b8500900 	ldmdalt	r0, {r8, fp}^
    78bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    78c0:	00022310 	andeq	r2, r2, r0, lsl r3
    78c4:	b8530900 	ldmdalt	r3, {r8, fp}^
    78c8:	10000000 	andne	r0, r0, r0
    78cc:	0001d110 	andeq	sp, r1, r0, lsl r1
    78d0:	b8560900 	ldmdalt	r6, {r8, fp}^
    78d4:	14000000 	strne	r0, [r0], #-0
    78d8:	4c4c5011 	mcrrmi	0, 1, r5, ip, cr1
    78dc:	70590900 	subsvc	r0, r9, r0, lsl #18
    78e0:	18000004 	stmdane	r0, {r2}
    78e4:	017a0300 	cmneq	sl, r0, lsl #6
    78e8:	5a090000 	bpl	2478f0 <_Min_Stack_Size+0x2474f0>
    78ec:	0000047b 	andeq	r0, r0, fp, ror r4
    78f0:	5f09140f 	svcpl	0x0009140f
    78f4:	00000528 	andeq	r0, r0, r8, lsr #10
    78f8:	00073710 	andeq	r3, r7, r0, lsl r7
    78fc:	b8610900 	stmdalt	r1!, {r8, fp}^
    7900:	00000000 	andeq	r0, r0, r0
    7904:	000b5610 	andeq	r5, fp, r0, lsl r6
    7908:	b8640900 	stmdalt	r4!, {r8, fp}^
    790c:	04000000 	streq	r0, [r0], #-0
    7910:	0005c610 	andeq	ip, r5, r0, lsl r6
    7914:	b8670900 	stmdalt	r7!, {r8, fp}^
    7918:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    791c:	00028910 	andeq	r8, r2, r0, lsl r9
    7920:	b86a0900 	stmdalt	sl!, {r8, fp}^
    7924:	0c000000 	stceq	0, cr0, [r0], {-0}
    7928:	0009af10 	andeq	sl, r9, r0, lsl pc
    792c:	b86d0900 	stmdalt	sp!, {r8, fp}^
    7930:	10000000 	andne	r0, r0, r0
    7934:	071b0300 	ldreq	r0, [fp, -r0, lsl #6]
    7938:	70090000 	andvc	r0, r9, r0
    793c:	000004e3 	andeq	r0, r0, r3, ror #9
    7940:	410a140f 	tstmi	sl, pc, lsl #8
    7944:	00000578 	andeq	r0, r0, r8, ror r5
    7948:	6e695011 	mcrvs	0, 3, r5, cr9, cr1, {0}
    794c:	b8430a00 	stmdalt	r3, {r9, fp}^
    7950:	00000000 	andeq	r0, r0, r0
    7954:	002e1010 	eoreq	r1, lr, r0, lsl r0
    7958:	b8460a00 	stmdalt	r6, {r9, fp}^
    795c:	04000000 	streq	r0, [r0], #-0
    7960:	000abf10 	andeq	fp, sl, r0, lsl pc
    7964:	b8490a00 	stmdalt	r9, {r9, fp}^
    7968:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    796c:	001c2110 	andseq	r2, ip, r0, lsl r1
    7970:	b84c0a00 	stmdalt	ip, {r9, fp}^
    7974:	0c000000 	stceq	0, cr0, [r0], {-0}
    7978:	00015c10 	andeq	r5, r1, r0, lsl ip
    797c:	b84f0a00 	stmdalt	pc, {r9, fp}^	; <UNPREDICTABLE>
    7980:	10000000 	andne	r0, r0, r0
    7984:	07870300 	streq	r0, [r7, r0, lsl #6]
    7988:	510a0000 	mrspl	r0, (UNDEF: 10)
    798c:	00000533 	andeq	r0, r0, r3, lsr r5
    7990:	000e0712 	andeq	r0, lr, r2, lsl r7
    7994:	020e0200 	andeq	r0, lr, #0, 4
    7998:	000000b8 	strheq	r0, [r0], -r8
    799c:	0005ad03 	andeq	sl, r5, r3, lsl #26
    79a0:	118a1300 	orrne	r1, sl, r0, lsl #6
    79a4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    79a8:	0000b802 	andeq	fp, r0, r2, lsl #16
    79ac:	10661400 	rsbne	r1, r6, r0, lsl #8
    79b0:	10020000 	andne	r0, r2, r0
    79b4:	0000b802 	andeq	fp, r0, r2, lsl #16
    79b8:	3b150000 	blcc	5479c0 <_Min_Stack_Size+0x5475c0>
    79bc:	01000026 	tsteq	r0, r6, lsr #32
    79c0:	00b80366 	adcseq	r0, r8, r6, ror #6
    79c4:	ef010000 	svc	0x00010000
    79c8:	14000005 	strne	r0, [r0], #-5
    79cc:	00000ca4 	andeq	r0, r0, r4, lsr #25
    79d0:	b8036801 	stmdalt	r3, {r0, fp, sp, lr}
    79d4:	14000000 	strne	r0, [r0], #-0
    79d8:	00000ce1 	andeq	r0, r0, r1, ror #25
    79dc:	b8036801 	stmdalt	r3, {r0, fp, sp, lr}
    79e0:	14000000 	strne	r0, [r0], #-0
    79e4:	00000ca9 	andeq	r0, r0, r9, lsr #25
    79e8:	b8036801 	stmdalt	r3, {r0, fp, sp, lr}
    79ec:	14000000 	strne	r0, [r0], #-0
    79f0:	000025e3 	andeq	r2, r0, r3, ror #11
    79f4:	b8036901 	stmdalt	r3, {r0, r8, fp, sp, lr}
    79f8:	00000000 	andeq	r0, r0, r0
    79fc:	00268716 	eoreq	r8, r6, r6, lsl r7
    7a00:	039e0100 	orrseq	r0, lr, #0, 2
    7a04:	000000b8 	strheq	r0, [r0], -r8
    7a08:	26531701 	ldrbcs	r1, [r3], -r1, lsl #14
    7a0c:	df010000 	svcle	0x00010000
    7a10:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
    7a14:	00000002 	andeq	r0, r0, r2
    7a18:	34189c01 	ldrcc	r9, [r8], #-3073	; 0xfffff3ff
    7a1c:	01000009 	tsteq	r0, r9
    7a20:	000414f0 	strdeq	r1, [r4], -r0
    7a24:	00497000 	subeq	r7, r9, r0
    7a28:	00031008 	andeq	r1, r3, r8
    7a2c:	1f9c0100 	svcne	0x009c0100
    7a30:	19000008 	stmdbne	r0, {r3}
    7a34:	0000011e 	andeq	r0, r0, lr, lsl r1
    7a38:	081ff001 	ldmdaeq	pc, {r0, ip, sp, lr, pc}	; <UNPREDICTABLE>
    7a3c:	54f70000 	ldrbtpl	r0, [r7], #0
    7a40:	ec1a0000 	ldc	0, cr0, [sl], {-0}
    7a44:	0100000e 	tsteq	r0, lr
    7a48:	0000b8f2 	strdeq	fp, [r0], -r2
    7a4c:	00557600 	subseq	r7, r5, r0, lsl #12
    7a50:	05831b00 	streq	r1, [r3, #2816]	; 0xb00
    7a54:	4a0a0000 	bmi	287a5c <_Min_Stack_Size+0x28765c>
    7a58:	00060800 	andeq	r0, r6, r0, lsl #16
    7a5c:	54010000 	strpl	r0, [r1], #-0
    7a60:	00067501 	andeq	r7, r6, r1, lsl #10
    7a64:	05941c00 	ldreq	r1, [r4, #3072]	; 0xc00
    7a68:	56b50000 	ldrtpl	r0, [r5], r0
    7a6c:	0a1d0000 	beq	747a74 <_Min_Stack_Size+0x747674>
    7a70:	0608004a 	streq	r0, [r8], -sl, asr #32
    7a74:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    7a78:	000005a0 	andeq	r0, r0, r0, lsr #11
    7a7c:	000056ca 	andeq	r5, r0, sl, asr #13
    7a80:	301f0000 	andscc	r0, pc, r0
    7a84:	8e000011 	mcrhi	0, 0, r0, cr0, cr1, {0}
    7a88:	20000006 	andcs	r0, r0, r6
    7a8c:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    7a90:	ca019a01 	bgt	6e29c <_Min_Stack_Size+0x6de9c>
    7a94:	02000000 	andeq	r0, r0, #0
    7a98:	21006491 			; <UNDEFINED> instruction: 0x21006491
    7a9c:	00000583 	andeq	r0, r0, r3, lsl #11
    7aa0:	08004b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, lr}
    7aa4:	00001148 	andeq	r1, r0, r8, asr #2
    7aa8:	bb013c01 	bllt	56ab4 <_Min_Stack_Size+0x566b4>
    7aac:	1c000006 	stcne	0, cr0, [r0], {6}
    7ab0:	00000594 	muleq	r0, r4, r5
    7ab4:	000056dd 	ldrdeq	r5, [r0], -sp
    7ab8:	00114822 	andseq	r4, r1, r2, lsr #16
    7abc:	05a01e00 	streq	r1, [r0, #3584]!	; 0xe00
    7ac0:	56f20000 	ldrbtpl	r0, [r2], r0
    7ac4:	00000000 	andeq	r0, r0, r0
    7ac8:	0005831b 	andeq	r8, r5, fp, lsl r3
    7acc:	004bd200 	subeq	sp, fp, r0, lsl #4
    7ad0:	00000808 	andeq	r0, r0, r8, lsl #16
    7ad4:	01eb0100 	mvneq	r0, r0, lsl #2
    7ad8:	000006ec 	andeq	r0, r0, ip, ror #13
    7adc:	0005941c 	andeq	r9, r5, ip, lsl r4
    7ae0:	00570500 	subseq	r0, r7, r0, lsl #10
    7ae4:	4bd21d00 	blmi	ff48eeec <_estack+0xdf45eeec>
    7ae8:	00080800 	andeq	r0, r8, r0, lsl #16
    7aec:	a01e0000 	andsge	r0, lr, r0
    7af0:	1b000005 	blne	7b0c <_Min_Stack_Size+0x770c>
    7af4:	00000057 	andeq	r0, r0, r7, asr r0
    7af8:	05832100 	streq	r2, [r3, #256]	; 0x100
    7afc:	4bda0000 	blmi	ff687b04 <_estack+0xdf657b04>
    7b00:	11600800 	cmnne	r0, r0, lsl #16
    7b04:	eb010000 	bl	47b0c <_Min_Stack_Size+0x4770c>
    7b08:	00071901 	andeq	r1, r7, r1, lsl #18
    7b0c:	05941c00 	ldreq	r1, [r4, #3072]	; 0xc00
    7b10:	572e0000 	strpl	r0, [lr, -r0]!
    7b14:	60220000 	eorvs	r0, r2, r0
    7b18:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    7b1c:	000005a0 	andeq	r0, r0, r0, lsr #11
    7b20:	00005744 	andeq	r5, r0, r4, asr #14
    7b24:	83210000 			; <UNDEFINED> instruction: 0x83210000
    7b28:	e6000005 	str	r0, [r0], -r5
    7b2c:	7808004b 	stmdavc	r8, {r0, r1, r3, r6}
    7b30:	01000011 	tsteq	r0, r1, lsl r0
    7b34:	074601eb 	strbeq	r0, [r6, -fp, ror #3]
    7b38:	941c0000 	ldrls	r0, [ip], #-0
    7b3c:	57000005 	strpl	r0, [r0, -r5]
    7b40:	22000057 	andcs	r0, r0, #87	; 0x57
    7b44:	00001178 	andeq	r1, r0, r8, ror r1
    7b48:	0005a01e 	andeq	sl, r5, lr, lsl r0
    7b4c:	00576d00 	subseq	r6, r7, r0, lsl #26
    7b50:	23000000 	movwcs	r0, #0
    7b54:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
    7b58:	00000cc6 	andeq	r0, r0, r6, asr #25
    7b5c:	0049b223 	subeq	fp, r9, r3, lsr #4
    7b60:	000cc608 	andeq	ip, ip, r8, lsl #12
    7b64:	49f22300 	ldmibmi	r2!, {r8, r9, sp}^
    7b68:	0cc60800 	stcleq	8, cr0, [r6], {0}
    7b6c:	fa230000 	blx	8c7b74 <_Min_Stack_Size+0x8c7774>
    7b70:	c6080049 	strgt	r0, [r8], -r9, asr #32
    7b74:	2300000c 	movwcs	r0, #12
    7b78:	08004a4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, fp, lr}
    7b7c:	00000cc6 	andeq	r0, r0, r6, asr #25
    7b80:	004a5623 	subeq	r5, sl, r3, lsr #12
    7b84:	000cc608 	andeq	ip, ip, r8, lsl #12
    7b88:	4a7a2300 	bmi	1e90790 <_Min_Stack_Size+0x1e90390>
    7b8c:	0cc60800 	stcleq	8, cr0, [r6], {0}
    7b90:	82230000 	eorhi	r0, r3, #0
    7b94:	c608004a 	strgt	r0, [r8], -sl, asr #32
    7b98:	2300000c 	movwcs	r0, #12
    7b9c:	08004aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, lr}
    7ba0:	00000cc6 	andeq	r0, r0, r6, asr #25
    7ba4:	004ac223 	subeq	ip, sl, r3, lsr #4
    7ba8:	000cc608 	andeq	ip, ip, r8, lsl #12
    7bac:	4ae02300 	bmi	ff8107b4 <_estack+0xdf7e07b4>
    7bb0:	0cc60800 	stcleq	8, cr0, [r6], {0}
    7bb4:	f2230000 	vhadd.s32	d0, d3, d0
    7bb8:	c608004a 	strgt	r0, [r8], -sl, asr #32
    7bbc:	2300000c 	movwcs	r0, #12
    7bc0:	08004b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, lr}
    7bc4:	00000cc6 	andeq	r0, r0, r6, asr #25
    7bc8:	004b2c23 	subeq	r2, fp, r3, lsr #24
    7bcc:	000cc608 	andeq	ip, ip, r8, lsl #12
    7bd0:	4b3e2300 	blmi	f907d8 <_Min_Stack_Size+0xf903d8>
    7bd4:	0cc60800 	stcleq	8, cr0, [r6], {0}
    7bd8:	48230000 	stmdami	r3!, {}	; <UNPREDICTABLE>
    7bdc:	c608004b 	strgt	r0, [r8], -fp, asr #32
    7be0:	2300000c 	movwcs	r0, #12
    7be4:	08004b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, lr}
    7be8:	00000cc6 	andeq	r0, r0, r6, asr #25
    7bec:	004ba623 	subeq	sl, fp, r3, lsr #12
    7bf0:	000cc608 	andeq	ip, ip, r8, lsl #12
    7bf4:	4bbc2300 	blmi	fef107fc <_estack+0xdeee07fc>
    7bf8:	0cc60800 	stcleq	8, cr0, [r6], {0}
    7bfc:	c4230000 	strtgt	r0, [r3], #-0
    7c00:	c608004b 	strgt	r0, [r8], -fp, asr #32
    7c04:	2300000c 	movwcs	r0, #12
    7c08:	08004c28 	stmdaeq	r0, {r3, r5, sl, fp, lr}
    7c0c:	00000cc6 	andeq	r0, r0, r6, asr #25
    7c10:	004c4c23 	subeq	r4, ip, r3, lsr #24
    7c14:	000cc608 	andeq	ip, ip, r8, lsl #12
    7c18:	4c602300 	stclmi	3, cr2, [r0], #-0
    7c1c:	0cc60800 	stcleq	8, cr0, [r6], {0}
    7c20:	74230000 	strtvc	r0, [r3], #-0
    7c24:	c608004c 	strgt	r0, [r8], -ip, asr #32
    7c28:	0000000c 	andeq	r0, r0, ip
    7c2c:	04d80424 	ldrbeq	r0, [r8], #1060	; 0x424
    7c30:	03250000 			; <UNDEFINED> instruction: 0x03250000
    7c34:	01000026 	tsteq	r0, r6, lsr #32
    7c38:	4c8002f8 	sfmmi	f0, 4, [r0], {248}	; 0xf8
    7c3c:	00a80800 	adceq	r0, r8, r0, lsl #16
    7c40:	9c010000 	stcls	0, cr0, [r1], {-0}
    7c44:	000008e3 	andeq	r0, r0, r3, ror #17
    7c48:	00269b26 	eoreq	r9, r6, r6, lsr #22
    7c4c:	02f80100 	rscseq	r0, r8, #0, 2
    7c50:	000000b8 	strheq	r0, [r0], -r8
    7c54:	00005780 	andeq	r5, r0, r0, lsl #15
    7c58:	00266226 	eoreq	r6, r6, r6, lsr #4
    7c5c:	02f80100 	rscseq	r0, r8, #0, 2
    7c60:	000000b8 	strheq	r0, [r0], -r8
    7c64:	000057d0 	ldrdeq	r5, [r0], -r0
    7c68:	0025c626 	eoreq	ip, r5, r6, lsr #12
    7c6c:	02f80100 	rscseq	r0, r8, #0, 2
    7c70:	000000b8 	strheq	r0, [r0], -r8
    7c74:	00005812 	andeq	r5, r0, r2, lsl r8
    7c78:	0025b620 	eoreq	fp, r5, r0, lsr #12
    7c7c:	02fa0100 	rscseq	r0, sl, #0, 2
    7c80:	00000578 	andeq	r0, r0, r8, ror r5
    7c84:	1f549102 	svcne	0x00549102
    7c88:	00001190 	muleq	r0, r0, r1
    7c8c:	00000893 	muleq	r0, r3, r8
    7c90:	0001b520 	andeq	fp, r1, r0, lsr #10
    7c94:	031c0100 	tsteq	ip, #0, 2
    7c98:	000000ca 	andeq	r0, r0, sl, asr #1
    7c9c:	00509102 	subseq	r9, r0, r2, lsl #2
    7ca0:	0011b81f 	andseq	fp, r1, pc, lsl r8
    7ca4:	0008ac00 	andeq	sl, r8, r0, lsl #24
    7ca8:	01b52000 			; <UNDEFINED> instruction: 0x01b52000
    7cac:	04010000 	streq	r0, [r1], #-0
    7cb0:	0000ca03 	andeq	ip, r0, r3, lsl #20
    7cb4:	4c910200 	lfmmi	f0, 4, [r1], {0}
    7cb8:	4cc22700 	stclmi	7, cr2, [r2], {0}
    7cbc:	0cd10800 	ldcleq	8, cr0, [r1], {0}
    7cc0:	08c90000 	stmiaeq	r9, {}^	; <UNPREDICTABLE>
    7cc4:	01280000 			; <UNDEFINED> instruction: 0x01280000
    7cc8:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    7ccc:	05500128 	ldrbeq	r0, [r0, #-296]	; 0xfffffed8
    7cd0:	0208000c 	andeq	r0, r8, #12
    7cd4:	08290040 	stmdaeq	r9!, {r6}
    7cd8:	d108004d 	tstle	r8, sp, asr #32
    7cdc:	2800000c 	stmdacs	r0, {r2, r3}
    7ce0:	91025101 	tstls	r2, r1, lsl #2
    7ce4:	50012854 	andpl	r2, r1, r4, asr r8
    7ce8:	00000c05 	andeq	r0, r0, r5, lsl #24
    7cec:	00004002 	andeq	r4, r0, r2
    7cf0:	0025d12a 	eoreq	sp, r5, sl, lsr #2
    7cf4:	033a0100 	teqeq	sl, #0, 2
    7cf8:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
    7cfc:	0000000c 	andeq	r0, r0, ip
    7d00:	f02a9c01 			; <UNDEFINED> instruction: 0xf02a9c01
    7d04:	01000025 	tsteq	r0, r5, lsr #32
    7d08:	4d340343 	ldcmi	3, cr0, [r4, #-268]!	; 0xfffffef4
    7d0c:	000c0800 	andeq	r0, ip, r0, lsl #16
    7d10:	9c010000 	stcls	0, cr0, [r1], {-0}
    7d14:	0005ad2b 	andeq	sl, r5, fp, lsr #26
    7d18:	004d4000 	subeq	r4, sp, r0
    7d1c:	00008008 	andeq	r8, r0, r8
    7d20:	b29c0100 	addslt	r0, ip, #0, 2
    7d24:	2c000009 	stccs	0, cr0, [r0], {9}
    7d28:	000005be 			; <UNDEFINED> instruction: 0x000005be
    7d2c:	05ca2c00 	strbeq	r2, [sl, #3072]	; 0xc00
    7d30:	2c000000 	stccs	0, cr0, [r0], {-0}
    7d34:	000005d6 	ldrdeq	r0, [r0], -r6
    7d38:	05e21e00 	strbeq	r1, [r2, #3584]!	; 0xe00
    7d3c:	58540000 	ldmdapl	r4, {}^	; <UNPREDICTABLE>
    7d40:	e0220000 	eor	r0, r2, r0
    7d44:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    7d48:	000005be 			; <UNDEFINED> instruction: 0x000005be
    7d4c:	0000587f 	andeq	r5, r0, pc, ror r8
    7d50:	0005ca1e 	andeq	ip, r5, lr, lsl sl
    7d54:	00589200 	subseq	r9, r8, r0, lsl #4
    7d58:	05d62d00 	ldrbeq	r2, [r6, #3328]	; 0xd00
    7d5c:	e21e0000 	ands	r0, lr, #0
    7d60:	a5000005 	strge	r0, [r0, #-5]
    7d64:	21000058 	qaddcs	r0, r8, r0
    7d68:	00000583 	andeq	r0, r0, r3, lsl #11
    7d6c:	08004d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, lr}
    7d70:	00001200 	andeq	r1, r0, r0, lsl #4
    7d74:	87038001 	strhi	r8, [r3, -r1]
    7d78:	1c000009 	stcne	0, cr0, [r0], {9}
    7d7c:	00000594 	muleq	r0, r4, r5
    7d80:	000058b8 			; <UNDEFINED> instruction: 0x000058b8
    7d84:	00120022 	andseq	r0, r2, r2, lsr #32
    7d88:	05a01e00 	streq	r1, [r0, #3584]!	; 0xe00
    7d8c:	58ce0000 	stmiapl	lr, {}^	; <UNPREDICTABLE>
    7d90:	00000000 	andeq	r0, r0, r0
    7d94:	0005832e 	andeq	r8, r5, lr, lsr #6
    7d98:	004d8c00 	subeq	r8, sp, r0, lsl #24
    7d9c:	00121808 	andseq	r1, r2, r8, lsl #16
    7da0:	03870100 	orreq	r0, r7, #0, 2
    7da4:	0005941c 	andeq	r9, r5, ip, lsl r4
    7da8:	0058e100 	subseq	lr, r8, r0, lsl #2
    7dac:	12182200 	andsne	r2, r8, #0, 4
    7db0:	a01e0000 	andsge	r0, lr, r0
    7db4:	f7000005 			; <UNDEFINED> instruction: 0xf7000005
    7db8:	00000058 	andeq	r0, r0, r8, asr r0
    7dbc:	2f000000 	svccs	0x00000000
    7dc0:	00000a53 	andeq	r0, r0, r3, asr sl
    7dc4:	14023201 	strne	r3, [r2], #-513	; 0xfffffdff
    7dc8:	c0000004 	andgt	r0, r0, r4
    7dcc:	6c08004d 	stcvs	0, cr0, [r8], {77}	; 0x4d
    7dd0:	01000001 	tsteq	r0, r1
    7dd4:	000a739c 	muleq	sl, ip, r3
    7dd8:	044e2600 	strbeq	r2, [lr], #-1536	; 0xfffffa00
    7ddc:	32010000 	andcc	r0, r1, #0
    7de0:	000a7302 	andeq	r7, sl, r2, lsl #6
    7de4:	00590a00 	subseq	r0, r9, r0, lsl #20
    7de8:	26a52600 	strtcs	r2, [r5], r0, lsl #12
    7dec:	32010000 	andcc	r0, r1, #0
    7df0:	0000b802 	andeq	fp, r0, r2, lsl #16
    7df4:	00593e00 	subseq	r3, r9, r0, lsl #28
    7df8:	0eec3000 	cdpeq	0, 14, cr3, cr12, cr0, {0}
    7dfc:	34010000 	strcc	r0, [r1], #-0
    7e00:	0000b802 	andeq	fp, r0, r2, lsl #16
    7e04:	00598b00 	subseq	r8, r9, r0, lsl #22
    7e08:	05832100 	streq	r2, [r3, #256]	; 0x100
    7e0c:	4e980000 	cdpmi	0, 9, cr0, cr8, cr0, {0}
    7e10:	12300800 	eorsne	r0, r0, #0, 16
    7e14:	c0010000 	andgt	r0, r1, r0
    7e18:	000a2902 	andeq	r2, sl, r2, lsl #18
    7e1c:	05941c00 	ldreq	r1, [r4, #3072]	; 0xc00
    7e20:	59ef0000 	stmibpl	pc!, {}^	; <UNPREDICTABLE>
    7e24:	30220000 	eorcc	r0, r2, r0
    7e28:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    7e2c:	000005a0 	andeq	r0, r0, r0, lsr #11
    7e30:	00005a04 	andeq	r5, r0, r4, lsl #20
    7e34:	26230000 	strtcs	r0, [r3], -r0
    7e38:	c608004e 	strgt	r0, [r8], -lr, asr #32
    7e3c:	2300000c 	movwcs	r0, #12
    7e40:	08004e40 	stmdaeq	r0, {r6, r9, sl, fp, lr}
    7e44:	00000cc6 	andeq	r0, r0, r6, asr #25
    7e48:	004e9423 	subeq	r9, lr, r3, lsr #8
    7e4c:	0005ad08 	andeq	sl, r5, r8, lsl #26
    7e50:	4ebc2700 	cdpmi	7, 11, cr2, cr12, cr0, {0}
    7e54:	0cf30800 	ldcleq	8, cr0, [r3]
    7e58:	0a570000 	beq	15c7e60 <_Min_Stack_Size+0x15c7a60>
    7e5c:	01280000 			; <UNDEFINED> instruction: 0x01280000
    7e60:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    7e64:	004ec623 	subeq	ip, lr, r3, lsr #12
    7e68:	000cc608 	andeq	ip, ip, r8, lsl #12
    7e6c:	4edc2300 	cdpmi	3, 13, cr2, cr12, cr0, {0}
    7e70:	0cc60800 	stcleq	8, cr0, [r6], {0}
    7e74:	f2230000 	vhadd.s32	d0, d3, d0
    7e78:	c608004e 	strgt	r0, [r8], -lr, asr #32
    7e7c:	0000000c 	andeq	r0, r0, ip
    7e80:	05280424 	streq	r0, [r8, #-1060]!	; 0xfffffbdc
    7e84:	ef310000 	svc	0x00310000
    7e88:	2c000005 	stccs	0, cr0, [r0], {5}
    7e8c:	0c08004f 	stceq	0, cr0, [r8], {79}	; 0x4f
    7e90:	01000000 	mrseq	r0, (UNDEF: 0)
    7e94:	15492f9c 	strbne	r2, [r9, #-3996]	; 0xfffff064
    7e98:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    7e9c:	0000b803 	andeq	fp, r0, r3, lsl #16
    7ea0:	004f3800 	subeq	r3, pc, r0, lsl #16
    7ea4:	00003008 	andeq	r3, r0, r8
    7ea8:	de9c0100 	fmllee	f0, f4, f0
    7eac:	2100000a 	tstcs	r0, sl
    7eb0:	00000583 	andeq	r0, r0, r3, lsl #11
    7eb4:	08004f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, lr}
    7eb8:	00001248 	andeq	r1, r0, r8, asr #4
    7ebc:	cd03ac01 	stcgt	12, cr10, [r3, #-4]
    7ec0:	3200000a 	andcc	r0, r0, #10
    7ec4:	00000594 	muleq	r0, r4, r5
    7ec8:	48221c00 	stmdami	r2!, {sl, fp, ip}
    7ecc:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    7ed0:	000005a0 	andeq	r0, r0, r0, lsr #11
    7ed4:	00005a17 	andeq	r5, r0, r7, lsl sl
    7ed8:	ef330000 	svc	0x00330000
    7edc:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    7ee0:	0208004f 	andeq	r0, r8, #79	; 0x4f
    7ee4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ee8:	2f0003ac 	svccs	0x000003ac
    7eec:	00002615 	andeq	r2, r0, r5, lsl r6
    7ef0:	b803b501 	stmdalt	r3, {r0, r8, sl, ip, sp, pc}
    7ef4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    7ef8:	3008004f 	andcc	r0, r8, pc, asr #32
    7efc:	01000000 	mrseq	r0, (UNDEF: 0)
    7f00:	000b349c 	muleq	fp, ip, r4
    7f04:	05832100 	streq	r2, [r3, #256]	; 0x100
    7f08:	4f6a0000 	svcmi	0x006a0000
    7f0c:	12600800 	rsbne	r0, r0, #0, 16
    7f10:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    7f14:	000b2303 	andeq	r2, fp, r3, lsl #6
    7f18:	05943200 	ldreq	r3, [r4, #512]	; 0x200
    7f1c:	e0000000 	and	r0, r0, r0
    7f20:	00126022 	andseq	r6, r2, r2, lsr #32
    7f24:	05a01e00 	streq	r1, [r0, #3584]!	; 0xe00
    7f28:	5a2a0000 	bpl	a87f30 <_Min_Stack_Size+0xa87b30>
    7f2c:	00000000 	andeq	r0, r0, r0
    7f30:	0005ef33 	andeq	lr, r5, r3, lsr pc
    7f34:	004f7e00 	subeq	r7, pc, r0, lsl #28
    7f38:	00000208 	andeq	r0, r0, r8, lsl #4
    7f3c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    7f40:	26ae2500 	strtcs	r2, [lr], r0, lsl #10
    7f44:	c2010000 	andgt	r0, r1, #0
    7f48:	004f9803 	subeq	r9, pc, r3, lsl #16
    7f4c:	0000d408 	andeq	sp, r0, r8, lsl #8
    7f50:	199c0100 	ldmibne	ip, {r8}
    7f54:	3400000c 	strcc	r0, [r0], #-12
    7f58:	0000011e 	andeq	r0, r0, lr, lsl r1
    7f5c:	1f03c201 	svcne	0x0003c201
    7f60:	01000008 	tsteq	r0, r8
    7f64:	05831b50 	streq	r1, [r3, #2896]	; 0xb50
    7f68:	4fb60000 	svcmi	0x00b60000
    7f6c:	00060800 	andeq	r0, r6, r0, lsl #16
    7f70:	df010000 	svcle	0x00010000
    7f74:	000b8903 	andeq	r8, fp, r3, lsl #18
    7f78:	05941c00 	ldreq	r1, [r4, #3072]	; 0xc00
    7f7c:	5a3d0000 	bpl	f47f84 <_Min_Stack_Size+0xf47b84>
    7f80:	b61d0000 	ldrlt	r0, [sp], -r0
    7f84:	0608004f 	streq	r0, [r8], -pc, asr #32
    7f88:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    7f8c:	000005a0 	andeq	r0, r0, r0, lsr #11
    7f90:	00005a5f 	andeq	r5, r0, pc, asr sl
    7f94:	831b0000 	tsthi	fp, #0
    7f98:	fc000005 	stc2	0, cr0, [r0], {5}
    7f9c:	0808004f 	stmdaeq	r8, {r0, r1, r2, r3, r6}
    7fa0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fa4:	0bba0404 	bleq	fee88fbc <_estack+0xdee58fbc>
    7fa8:	941c0000 	ldrls	r0, [ip], #-0
    7fac:	72000005 	andvc	r0, r0, #5
    7fb0:	1d00005a 	stcne	0, cr0, [r0, #-360]	; 0xfffffe98
    7fb4:	08004ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fb8:	00000008 	andeq	r0, r0, r8
    7fbc:	0005a01e 	andeq	sl, r5, lr, lsl r0
    7fc0:	005a8800 	subseq	r8, sl, r0, lsl #16
    7fc4:	1b000000 	blne	7fcc <_Min_Stack_Size+0x7bcc>
    7fc8:	00000583 	andeq	r0, r0, r3, lsl #11
    7fcc:	08005014 	stmdaeq	r0, {r2, r4, ip, lr}
    7fd0:	00000008 	andeq	r0, r0, r8
    7fd4:	eb040501 	bl	1093e0 <_Min_Stack_Size+0x108fe0>
    7fd8:	1c00000b 	stcne	0, cr0, [r0], {11}
    7fdc:	00000594 	muleq	r0, r4, r5
    7fe0:	00005a9b 	muleq	r0, fp, sl
    7fe4:	0050141d 	subseq	r1, r0, sp, lsl r4
    7fe8:	00000808 	andeq	r0, r0, r8, lsl #16
    7fec:	05a01e00 	streq	r1, [r0, #3584]!	; 0xe00
    7ff0:	5ab10000 	bpl	fec47ff8 <_estack+0xdec17ff8>
    7ff4:	00000000 	andeq	r0, r0, r0
    7ff8:	00058335 	andeq	r8, r5, r5, lsr r3
    7ffc:	00503000 	subseq	r3, r0, r0
    8000:	00000808 	andeq	r0, r0, r8, lsl #16
    8004:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    8008:	0005941c 	andeq	r9, r5, ip, lsl r4
    800c:	005ac400 	subseq	ip, sl, r0, lsl #8
    8010:	50301d00 	eorspl	r1, r0, r0, lsl #26
    8014:	00080800 	andeq	r0, r8, r0, lsl #16
    8018:	a01e0000 	andsge	r0, lr, r0
    801c:	da000005 	ble	8038 <_Min_Stack_Size+0x7c38>
    8020:	0000005a 	andeq	r0, r0, sl, asr r0
    8024:	70250000 	eorvc	r0, r5, r0
    8028:	01000026 	tsteq	r0, r6, lsr #32
    802c:	506c0411 	rsbpl	r0, ip, r1, lsl r4
    8030:	00440800 	subeq	r0, r4, r0, lsl #16
    8034:	9c010000 	stcls	0, cr0, [r1], {-0}
    8038:	00000c4c 	andeq	r0, r0, ip, asr #24
    803c:	00044e34 	andeq	r4, r4, r4, lsr lr
    8040:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
    8044:	00000a73 	andeq	r0, r0, r3, ror sl
    8048:	a4345001 	ldrtge	r5, [r4], #-1
    804c:	01000026 	tsteq	r0, r6, lsr #32
    8050:	0c4c0411 	cfstrdeq	mvd0, [ip], {17}
    8054:	51010000 	mrspl	r0, (UNDEF: 1)
    8058:	b8042400 	stmdalt	r4, {sl, sp}
    805c:	2a000000 	bcs	8064 <_Min_Stack_Size+0x7c64>
    8060:	00002531 	andeq	r2, r0, r1, lsr r5
    8064:	b0043c01 	andlt	r3, r4, r1, lsl #24
    8068:	02080050 	andeq	r0, r8, #80	; 0x50
    806c:	01000000 	mrseq	r0, (UNDEF: 0)
    8070:	26c3259c 			; <UNDEFINED> instruction: 0x26c3259c
    8074:	2b010000 	blcs	4807c <_Min_Stack_Size+0x47c7c>
    8078:	0050b404 	subseq	fp, r0, r4, lsl #8
    807c:	00002008 	andeq	r2, r0, r8
    8080:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    8084:	2300000c 	movwcs	r0, #12
    8088:	080050c2 	stmdaeq	r0, {r1, r6, r7, ip, lr}
    808c:	00000c52 	andeq	r0, r0, r2, asr ip
    8090:	07f33600 	ldrbeq	r3, [r3, r0, lsl #12]!
    8094:	440b0000 	strmi	r0, [fp], #-0
    8098:	000c9007 	andeq	r9, ip, r7
    809c:	00ad0500 	adceq	r0, sp, r0, lsl #10
    80a0:	f7370000 			; <UNDEFINED> instruction: 0xf7370000
    80a4:	0c00000c 	stceq	0, cr0, [r0], {12}
    80a8:	0000b84c 	andeq	fp, r0, ip, asr #16
    80ac:	00970600 	addseq	r0, r7, r0, lsl #12
    80b0:	0cb00000 	ldceq	0, cr0, [r0]
    80b4:	c3070000 	movwgt	r0, #28672	; 0x7000
    80b8:	0f000000 	svceq	0x00000000
    80bc:	262a3800 	strtcs	r3, [sl], -r0, lsl #16
    80c0:	7b010000 	blvc	480c8 <_Min_Stack_Size+0x47cc8>
    80c4:	00000cc1 	andeq	r0, r0, r1, asr #25
    80c8:	7e680305 	cdpvc	3, 6, cr0, cr8, cr5, {0}
    80cc:	a0390800 	eorsge	r0, r9, r0, lsl #16
    80d0:	3a00000c 	bcc	8108 <_Min_Stack_Size+0x7d08>
    80d4:	00000ea3 	andeq	r0, r0, r3, lsr #29
    80d8:	00b8d00d 	adcseq	sp, r8, sp
    80dc:	eb3b0000 	bl	ec80e4 <_Min_Stack_Size+0xec7ce4>
    80e0:	0a000006 	beq	8100 <_Min_Stack_Size+0x7d00>
    80e4:	000ce7f3 	strdeq	lr, [ip], -r3
    80e8:	0ce73c00 	stcleq	12, cr3, [r7]
    80ec:	ed3c0000 	ldc	0, cr0, [ip, #-0]
    80f0:	0000000c 	andeq	r0, r0, ip
    80f4:	01d20424 	bicseq	r0, r2, r4, lsr #8
    80f8:	04240000 	strteq	r0, [r4], #-0
    80fc:	00000578 	andeq	r0, r0, r8, ror r5
    8100:	000ebe3d 	andeq	fp, lr, sp, lsr lr
    8104:	14c50d00 	strbne	r0, [r5], #3328	; 0xd00
    8108:	3c000004 	stccc	0, cr0, [r0], {4}
    810c:	000000b8 	strheq	r0, [r0], -r8
    8110:	092e0000 	stmdbeq	lr!, {}	; <UNPREDICTABLE>
    8114:	00040000 	andeq	r0, r4, r0
    8118:	000014e1 	andeq	r1, r0, r1, ror #9
    811c:	02980104 	addseq	r0, r8, #4, 2
    8120:	17010000 	strne	r0, [r1, -r0]
    8124:	7a000027 	bvc	81c8 <_Min_Stack_Size+0x7dc8>
    8128:	28000008 	stmdacs	r0, {r3}
    812c:	00000013 	andeq	r0, r0, r3, lsl r0
    8130:	5d000000 	stcpl	0, cr0, [r0, #-0]
    8134:	0200003b 	andeq	r0, r0, #59	; 0x3b
    8138:	07d40601 	ldrbeq	r0, [r4, r1, lsl #12]
    813c:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    8140:	03000000 	movweq	r0, #0
    8144:	0000371d 	andeq	r3, r0, sp, lsl r7
    8148:	08010200 	stmdaeq	r1, {r9}
    814c:	000007d2 	ldrdeq	r0, [r0], -r2
    8150:	22050202 	andcs	r0, r5, #536870912	; 0x20000000
    8154:	02000008 	andeq	r0, r0, #8
    8158:	04f70702 	ldrbteq	r0, [r7], #1794	; 0x702
    815c:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    8160:	03000005 	movweq	r0, #5
    8164:	0000573f 	andeq	r5, r0, pc, lsr r7
    8168:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    816c:	00000445 	andeq	r0, r0, r5, asr #8
    8170:	0003b103 	andeq	fp, r3, r3, lsl #2
    8174:	69410300 	stmdbvs	r1, {r8, r9}^
    8178:	02000000 	andeq	r0, r0, #0
    817c:	00d40704 	sbcseq	r0, r4, r4, lsl #14
    8180:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8184:	00044005 	andeq	r4, r4, r5
    8188:	07080200 	streq	r0, [r8, -r0, lsl #4]
    818c:	000000cf 	andeq	r0, r0, pc, asr #1
    8190:	69050404 	stmdbvs	r5, {r2, sl}
    8194:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8198:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    819c:	8a030000 	bhi	c81a4 <_Min_Stack_Size+0xc7da4>
    81a0:	04000000 	streq	r0, [r0], #-0
    81a4:	00002c14 	andeq	r2, r0, r4, lsl ip
    81a8:	05aa0300 	streq	r0, [sl, #768]!	; 0x300
    81ac:	1f040000 	svcne	0x00040000
    81b0:	0000004c 	andeq	r0, r0, ip, asr #32
    81b4:	0003b303 	andeq	fp, r3, r3, lsl #6
    81b8:	5e200400 	cdppl	4, 2, cr0, cr0, cr0, {0}
    81bc:	02000000 	andeq	r0, r0, #0
    81c0:	064c0704 	strbeq	r0, [ip], -r4, lsl #14
    81c4:	a2050000 	andge	r0, r5, #0
    81c8:	06000000 	streq	r0, [r0], -r0
    81cc:	01e5058c 	mvneq	r0, ip, lsl #11
    81d0:	000001d4 	ldrdeq	r0, [r0], -r4
    81d4:	000c7c07 	andeq	r7, ip, r7, lsl #24
    81d8:	01e70500 	mvneq	r0, r0, lsl #10
    81dc:	000001d4 	ldrdeq	r0, [r0], -r4
    81e0:	0c8b0700 	stceq	7, cr0, [fp], {0}
    81e4:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
    81e8:	0000b401 	andeq	fp, r0, r1, lsl #8
    81ec:	e8070400 	stmda	r7, {sl}
    81f0:	0500000c 	streq	r0, [r0, #-12]
    81f4:	00b401e9 	adcseq	r0, r4, r9, ror #3
    81f8:	07080000 	streq	r0, [r8, -r0]
    81fc:	00000cae 	andeq	r0, r0, lr, lsr #25
    8200:	b401ea05 	strlt	lr, [r1], #-2565	; 0xfffff5fb
    8204:	0c000000 	stceq	0, cr0, [r0], {-0}
    8208:	52435308 	subpl	r5, r3, #8, 6	; 0x20000000
    820c:	01eb0500 	mvneq	r0, r0, lsl #10
    8210:	000000b4 	strheq	r0, [r0], -r4
    8214:	43430810 	movtmi	r0, #14352	; 0x3810
    8218:	ec050052 	stc	0, cr0, [r5], {82}	; 0x52
    821c:	0000b401 	andeq	fp, r0, r1, lsl #8
    8220:	53081400 	movwpl	r1, #33792	; 0x8400
    8224:	05005048 	streq	r5, [r0, #-72]	; 0xffffffb8
    8228:	01e901ed 	mvneq	r0, sp, ror #3
    822c:	07180000 	ldreq	r0, [r8, -r0]
    8230:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
    8234:	b401ee05 	strlt	lr, [r1], #-3589	; 0xfffff1fb
    8238:	24000000 	strcs	r0, [r0], #-0
    823c:	000c9507 	andeq	r9, ip, r7, lsl #10
    8240:	01ef0500 	mvneq	r0, r0, lsl #10
    8244:	000000b4 	strheq	r0, [r0], -r4
    8248:	0d070728 	stceq	7, cr0, [r7, #-160]	; 0xffffff60
    824c:	f0050000 			; <UNDEFINED> instruction: 0xf0050000
    8250:	0000b401 	andeq	fp, r0, r1, lsl #8
    8254:	f2072c00 			; <UNDEFINED> instruction: 0xf2072c00
    8258:	0500000c 	streq	r0, [r0, #-12]
    825c:	00b401f1 	ldrshteq	r0, [r4], r1
    8260:	07300000 	ldreq	r0, [r0, -r0]!
    8264:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8268:	b401f205 	strlt	pc, [r1], #-517	; 0xfffffdfb
    826c:	34000000 	strcc	r0, [r0], #-0
    8270:	000c9007 	andeq	r9, ip, r7
    8274:	01f30500 	mvnseq	r0, r0, lsl #10
    8278:	000000b4 	strheq	r0, [r0], -r4
    827c:	0d110738 	ldceq	7, cr0, [r1, #-224]	; 0xffffff20
    8280:	f4050000 	vst4.8	{d0-d3}, [r5], r0
    8284:	0000b401 	andeq	fp, r0, r1, lsl #8
    8288:	50083c00 	andpl	r3, r8, r0, lsl #24
    828c:	05005246 	streq	r5, [r0, #-582]	; 0xfffffdba
    8290:	01fe01f5 	ldrsheq	r0, [lr, #21]!
    8294:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
    8298:	00524644 	subseq	r4, r2, r4, asr #12
    829c:	d401f605 	strle	pc, [r1], #-1541	; 0xfffff9fb
    82a0:	48000001 	stmdami	r0, {r0}
    82a4:	52444108 	subpl	r4, r4, #8, 2
    82a8:	01f70500 	mvnseq	r0, r0, lsl #10
    82ac:	000001d4 	ldrdeq	r0, [r0], -r4
    82b0:	0d0c074c 	stceq	7, cr0, [ip, #-304]	; 0xfffffed0
    82b4:	f8050000 			; <UNDEFINED> instruction: 0xf8050000
    82b8:	00021801 	andeq	r1, r2, r1, lsl #16
    82bc:	ed075000 	stc	0, cr5, [r7, #-0]
    82c0:	0500000c 	streq	r0, [r0, #-12]
    82c4:	023201f9 	eorseq	r0, r2, #1073741886	; 0x4000003e
    82c8:	07600000 	strbeq	r0, [r0, -r0]!
    82cc:	00000769 	andeq	r0, r0, r9, ror #14
    82d0:	2201fa05 	andcs	pc, r1, #20480	; 0x5000
    82d4:	74000002 	strvc	r0, [r0], #-2
    82d8:	000d6d07 	andeq	r6, sp, r7, lsl #26
    82dc:	01fb0500 	mvnseq	r0, r0, lsl #10
    82e0:	000000b4 	strheq	r0, [r0], -r4
    82e4:	b4090088 	strlt	r0, [r9], #-136	; 0xffffff78
    82e8:	0a000000 	beq	82f0 <_Min_Stack_Size+0x7ef0>
    82ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    82f0:	000001e9 	andeq	r0, r0, r9, ror #3
    82f4:	0000ad0b 	andeq	sl, r0, fp, lsl #26
    82f8:	05000b00 	streq	r0, [r0, #-2816]	; 0xfffff500
    82fc:	000001d9 	ldrdeq	r0, [r0], -r9
    8300:	0000a20a 	andeq	sl, r0, sl, lsl #4
    8304:	0001fe00 	andeq	pc, r1, r0, lsl #28
    8308:	00ad0b00 	adceq	r0, sp, r0, lsl #22
    830c:	00010000 	andeq	r0, r1, r0
    8310:	00020309 	andeq	r0, r2, r9, lsl #6
    8314:	01ee0500 	mvneq	r0, r0, lsl #10
    8318:	a20a0000 	andge	r0, sl, #0
    831c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8320:	0b000002 	bleq	8330 <_Min_Stack_Size+0x7f30>
    8324:	000000ad 	andeq	r0, r0, sp, lsr #1
    8328:	1d090003 	stcne	0, cr0, [r9, #-12]
    832c:	05000002 	streq	r0, [r0, #-2]
    8330:	00000208 	andeq	r0, r0, r8, lsl #4
    8334:	0000a20a 	andeq	sl, r0, sl, lsl #4
    8338:	00023200 	andeq	r3, r2, r0, lsl #4
    833c:	00ad0b00 	adceq	r0, sp, r0, lsl #22
    8340:	00040000 	andeq	r0, r4, r0
    8344:	00023709 	andeq	r3, r2, r9, lsl #14
    8348:	02220500 	eoreq	r0, r2, #0, 10
    834c:	820c0000 	andhi	r0, ip, #0
    8350:	0500000c 	streq	r0, [r0, #-12]
    8354:	00b901fc 	ldrshteq	r0, [r9], ip
    8358:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    835c:	6b02bd06 	blvs	b777c <_Min_Stack_Size+0xb737c>
    8360:	08000002 	stmdaeq	r0, {r1}
    8364:	06005243 	streq	r5, [r0], -r3, asr #4
    8368:	00b402bf 	ldrhteq	r0, [r4], pc
    836c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8370:	00525343 	subseq	r5, r2, r3, asr #6
    8374:	b402c006 	strlt	ip, [r2], #-6
    8378:	04000000 	streq	r0, [r0], #-0
    837c:	01a90c00 			; <UNDEFINED> instruction: 0x01a90c00
    8380:	c1060000 	mrsgt	r0, (UNDEF: 6)
    8384:	00024802 	andeq	r4, r2, r2, lsl #16
    8388:	06900600 	ldreq	r0, [r0], r0, lsl #12
    838c:	042002c7 	strteq	r0, [r0], #-711	; 0xfffffd39
    8390:	43080000 	movwmi	r0, #32768	; 0x8000
    8394:	c9060052 	stmdbgt	r6, {r1, r4, r6}
    8398:	0000b402 	andeq	fp, r0, r2, lsl #8
    839c:	45070000 	strmi	r0, [r7, #-0]
    83a0:	06000002 	streq	r0, [r0], -r2
    83a4:	00b402ca 	adcseq	r0, r4, sl, asr #5
    83a8:	07040000 	streq	r0, [r4, -r0]
    83ac:	0000056b 	andeq	r0, r0, fp, ror #10
    83b0:	b402cb06 	strlt	ip, [r2], #-2822	; 0xfffff4fa
    83b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    83b8:	52494308 	subpl	r4, r9, #8, 6	; 0x20000000
    83bc:	02cc0600 	sbceq	r0, ip, #0, 12
    83c0:	000000b4 	strheq	r0, [r0], -r4
    83c4:	01a0070c 	lsleq	r0, ip, #14
    83c8:	cd060000 	stcgt	0, cr0, [r6, #-0]
    83cc:	0000b402 	andeq	fp, r0, r2, lsl #8
    83d0:	66071000 	strvs	r1, [r7], -r0
    83d4:	06000009 	streq	r0, [r0], -r9
    83d8:	00b402ce 	adcseq	r0, r4, lr, asr #5
    83dc:	07140000 	ldreq	r0, [r4, -r0]
    83e0:	0000053e 	andeq	r0, r0, lr, lsr r5
    83e4:	b402cf06 	strlt	ip, [r2], #-3846	; 0xfffff0fa
    83e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    83ec:	00076907 	andeq	r6, r7, r7, lsl #18
    83f0:	02d00600 	sbcseq	r0, r0, #0, 12
    83f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    83f8:	072e071c 			; <UNDEFINED> instruction: 0x072e071c
    83fc:	d1060000 	mrsle	r0, (UNDEF: 6)
    8400:	0000b402 	andeq	fp, r0, r2, lsl #8
    8404:	c8072000 	stmdagt	r7, {sp}
    8408:	06000001 	streq	r0, [r0], -r1
    840c:	00b402d2 	ldrsbteq	r0, [r4], r2
    8410:	07240000 	streq	r0, [r4, -r0]!
    8414:	00000773 	andeq	r0, r0, r3, ror r7
    8418:	ee02d306 	cdp	3, 0, cr13, cr2, cr6, {0}
    841c:	28000001 	stmdacs	r0, {r0}
    8420:	000ab707 	andeq	fp, sl, r7, lsl #14
    8424:	02d40600 	sbcseq	r0, r4, #0, 12
    8428:	000000b4 	strheq	r0, [r0], -r4
    842c:	09d90730 	ldmibeq	r9, {r4, r5, r8, r9, sl}^
    8430:	d5060000 	strle	r0, [r6, #-0]
    8434:	0000b402 	andeq	fp, r0, r2, lsl #8
    8438:	ba073400 	blt	1d5440 <_Min_Stack_Size+0x1d5040>
    843c:	06000008 	streq	r0, [r0], -r8
    8440:	00b402d6 	ldrsbteq	r0, [r4], r6
    8444:	07380000 	ldreq	r0, [r8, -r0]!
    8448:	0000077d 	andeq	r0, r0, sp, ror r7
    844c:	a202d706 	andge	sp, r2, #1572864	; 0x180000
    8450:	3c000000 	stccc	0, cr0, [r0], {-0}
    8454:	0009d107 	andeq	sp, r9, r7, lsl #2
    8458:	02d80600 	sbcseq	r0, r8, #0, 12
    845c:	000000b4 	strheq	r0, [r0], -r4
    8460:	08720740 	ldmdaeq	r2!, {r6, r8, r9, sl}^
    8464:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
    8468:	0000b402 	andeq	fp, r0, r2, lsl #8
    846c:	cd074400 	cfstrsgt	mvf4, [r7, #-0]
    8470:	06000008 	streq	r0, [r0], -r8
    8474:	01ee02da 	ldrdeq	r0, [lr, #42]!	; 0x2a
    8478:	07480000 	strbeq	r0, [r8, -r0]
    847c:	00000152 	andeq	r0, r0, r2, asr r1
    8480:	b402db06 	strlt	sp, [r2], #-2822	; 0xfffff4fa
    8484:	50000000 	andpl	r0, r0, r0
    8488:	00071107 	andeq	r1, r7, r7, lsl #2
    848c:	02dc0600 	sbcseq	r0, ip, #0, 12
    8490:	000000b4 	strheq	r0, [r0], -r4
    8494:	0a340754 	beq	d0a1ec <_Min_Stack_Size+0xd09dec>
    8498:	dd060000 	stcle	0, cr0, [r6, #-0]
    849c:	0000b402 	andeq	fp, r0, r2, lsl #8
    84a0:	98075800 	stmdals	r7, {fp, ip, lr}
    84a4:	06000007 	streq	r0, [r0], -r7
    84a8:	00a202de 	ldrdeq	r0, [r2], lr	; <UNPREDICTABLE>
    84ac:	075c0000 	ldrbeq	r0, [ip, -r0]
    84b0:	0000051c 	andeq	r0, r0, ip, lsl r5
    84b4:	b402df06 	strlt	sp, [r2], #-3846	; 0xfffff0fa
    84b8:	60000000 	andvs	r0, r0, r0
    84bc:	00059e07 	andeq	r9, r5, r7, lsl #28
    84c0:	02e00600 	rsceq	r0, r0, #0, 12
    84c4:	000000b4 	strheq	r0, [r0], -r4
    84c8:	07a20764 	streq	r0, [r2, r4, ror #14]!
    84cc:	e1060000 	mrs	r0, (UNDEF: 6)
    84d0:	0001ee02 	andeq	lr, r1, r2, lsl #28
    84d4:	67076800 	strvs	r6, [r7, -r0, lsl #16]
    84d8:	0600000a 	streq	r0, [r0], -sl
    84dc:	00b402e2 	adcseq	r0, r4, r2, ror #5
    84e0:	08700000 	ldmdaeq	r0!, {}^	; <UNPREDICTABLE>
    84e4:	00525343 	subseq	r5, r2, r3, asr #6
    84e8:	b402e306 	strlt	lr, [r2], #-774	; 0xfffffcfa
    84ec:	74000000 	strvc	r0, [r0], #-0
    84f0:	0007ac07 	andeq	sl, r7, r7, lsl #24
    84f4:	02e40600 	rsceq	r0, r4, #0, 12
    84f8:	000001ee 	andeq	r0, r0, lr, ror #3
    84fc:	0a2e0778 	beq	b8a2e4 <_Min_Stack_Size+0xb89ee4>
    8500:	e5060000 	str	r0, [r6, #-0]
    8504:	0000b402 	andeq	fp, r0, r2, lsl #8
    8508:	26078000 	strcs	r8, [r7], -r0
    850c:	06000005 	streq	r0, [r0], -r5
    8510:	00b402e6 	adcseq	r0, r4, r6, ror #5
    8514:	07840000 	streq	r0, [r4, r0]
    8518:	00000565 	andeq	r0, r0, r5, ror #10
    851c:	b402e706 	strlt	lr, [r2], #-1798	; 0xfffff8fa
    8520:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    8524:	00017207 	andeq	r7, r1, r7, lsl #4
    8528:	02e80600 	rsceq	r0, r8, #0, 12
    852c:	000000b4 	strheq	r0, [r0], -r4
    8530:	bc0c008c 	stclt	0, cr0, [ip], {140}	; 0x8c
    8534:	06000001 	streq	r0, [r0], -r1
    8538:	027702ea 	rsbseq	r0, r7, #-1610612722	; 0xa000000e
    853c:	010d0000 	mrseq	r0, (UNDEF: 13)
    8540:	0441c507 	strbeq	ip, [r1], #-1287	; 0xfffffaf9
    8544:	a30e0000 	movwge	r0, #57344	; 0xe000
    8548:	00000019 	andeq	r0, r0, r9, lsl r0
    854c:	5445530f 	strbpl	r5, [r5], #-783	; 0xfffffcf1
    8550:	0d000100 	stfeqs	f0, [r0, #-0]
    8554:	56cb0701 	strbpl	r0, [fp], r1, lsl #14
    8558:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    855c:	00000dc9 	andeq	r0, r0, r9, asr #27
    8560:	0df80e00 	ldcleq	14, cr0, [r8]
    8564:	00010000 	andeq	r0, r1, r0
    8568:	db080102 	blle	208978 <_Min_Stack_Size+0x208578>
    856c:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    8570:	7e3a0801 	cdpvc	8, 3, cr0, cr10, cr1, {0}
    8574:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    8578:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    857c:	09090e00 	stmdbeq	r9, {r9, sl, fp}
    8580:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    8584:	00000800 	andeq	r0, r0, r0, lsl #16
    8588:	04a30e02 	strteq	r0, [r3], #3586	; 0xe02
    858c:	00030000 	andeq	r0, r3, r0
    8590:	00058c03 	andeq	r8, r5, r3, lsl #24
    8594:	5d3f0800 	ldcpl	8, cr0, [pc, #-0]	; 859c <_Min_Stack_Size+0x819c>
    8598:	10000004 	andne	r0, r0, r4
    859c:	00000e07 	andeq	r0, r0, r7, lsl #28
    85a0:	a2020e02 	andge	r0, r2, #2, 28
    85a4:	03000000 	movweq	r0, #0
    85a8:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    85ac:	00118a11 	andseq	r8, r1, r1, lsl sl
    85b0:	020e0200 	andeq	r0, lr, #0, 4
    85b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    85b8:	00106612 	andseq	r6, r0, r2, lsl r6
    85bc:	02100200 	andseq	r0, r0, #0, 4
    85c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    85c4:	28161300 	ldmdacs	r6, {r8, r9, ip}
    85c8:	7f020000 	svcvc	0x00020000
    85cc:	f8130301 			; <UNDEFINED> instruction: 0xf8130301
    85d0:	02000027 	andeq	r0, r0, #39	; 0x27
    85d4:	1403018a 	strne	r0, [r3], #-394	; 0xfffffe76
    85d8:	000027fe 	strdeq	r2, [r0], -lr
    85dc:	047ea101 	ldrbteq	sl, [lr], #-257	; 0xfffffeff
    85e0:	50d40000 	sbcspl	r0, r4, r0
    85e4:	00440800 	subeq	r0, r4, r0, lsl #16
    85e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    85ec:	0000052e 	andeq	r0, r0, lr, lsr #10
    85f0:	000eec15 	andeq	lr, lr, r5, lsl ip
    85f4:	a2a30100 	adcge	r0, r3, #0, 2
    85f8:	ed000000 	stc	0, cr0, [r0, #-0]
    85fc:	1600005a 			; <UNDEFINED> instruction: 0x1600005a
    8600:	00000489 	andeq	r0, r0, r9, lsl #9
    8604:	080050d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, ip, lr}
    8608:	00000008 	andeq	r0, r0, r8
    860c:	051ba501 	ldreq	sl, [fp, #-1281]	; 0xfffffaff
    8610:	9a170000 	bls	5c8618 <_Min_Stack_Size+0x5c8218>
    8614:	00000004 	andeq	r0, r0, r4
    8618:	50d61802 	sbcspl	r1, r6, r2, lsl #16
    861c:	00080800 	andeq	r0, r8, r0, lsl #16
    8620:	a6190000 	ldrge	r0, [r9], -r0
    8624:	17000004 	strne	r0, [r0, -r4]
    8628:	0000005b 	andeq	r0, r0, fp, asr r0
    862c:	50f01a00 	rscspl	r1, r0, r0, lsl #20
    8630:	09260800 	stmdbeq	r6!, {fp}
    8634:	fa1a0000 	blx	68863c <_Min_Stack_Size+0x68823c>
    8638:	26080050 			; <UNDEFINED> instruction: 0x26080050
    863c:	00000009 	andeq	r0, r0, r9
    8640:	0026fe14 	eoreq	pc, r6, r4, lsl lr	; <UNPREDICTABLE>
    8644:	7eb90100 	frdvce	f0, f1, f0
    8648:	18000004 	stmdane	r0, {r2}
    864c:	44080051 	strmi	r0, [r8], #-81	; 0xffffffaf
    8650:	01000000 	mrseq	r0, (UNDEF: 0)
    8654:	0005979c 	muleq	r5, ip, r7
    8658:	0eec1500 	cdpeq	5, 14, cr1, cr12, cr0, {0}
    865c:	bb010000 	bllt	48664 <_Min_Stack_Size+0x48264>
    8660:	000000a2 	andeq	r0, r0, r2, lsr #1
    8664:	00005b2a 	andeq	r5, r0, sl, lsr #22
    8668:	00048916 	andeq	r8, r4, r6, lsl r9
    866c:	00511a00 	subseq	r1, r1, r0, lsl #20
    8670:	00000808 	andeq	r0, r0, r8, lsl #16
    8674:	84bd0100 	ldrthi	r0, [sp], #256	; 0x100
    8678:	17000005 	strne	r0, [r0, -r5]
    867c:	0000049a 	muleq	r0, sl, r4
    8680:	1a180200 	bne	608e88 <_Min_Stack_Size+0x608a88>
    8684:	08080051 	stmdaeq	r8, {r0, r4, r6}
    8688:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    868c:	000004a6 	andeq	r0, r0, r6, lsr #9
    8690:	00005b54 	andeq	r5, r0, r4, asr fp
    8694:	341a0000 	ldrcc	r0, [sl], #-0
    8698:	26080051 			; <UNDEFINED> instruction: 0x26080051
    869c:	1a000009 	bne	86c8 <_Min_Stack_Size+0x82c8>
    86a0:	0800513e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, ip, lr}
    86a4:	00000926 	andeq	r0, r0, r6, lsr #18
    86a8:	283e1b00 	ldmdacs	lr!, {r8, r9, fp, ip}
    86ac:	d1010000 	mrsle	r0, (UNDEF: 1)
    86b0:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
    86b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    86b8:	05d79c01 	ldrbeq	r9, [r7, #3073]	; 0xc01
    86bc:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    86c0:	5c000004 	stcpl	0, cr0, [r0], {4}
    86c4:	08080051 	stmdaeq	r8, {r0, r4, r6}
    86c8:	01000000 	mrseq	r0, (UNDEF: 0)
    86cc:	049a17d3 	ldreq	r1, [sl], #2003	; 0x7d3
    86d0:	02000000 	andeq	r0, r0, #0
    86d4:	00515c18 	subseq	r5, r1, r8, lsl ip
    86d8:	00000808 	andeq	r0, r0, r8, lsl #16
    86dc:	04a61900 	strteq	r1, [r6], #2304	; 0x900
    86e0:	5b670000 	blpl	19c86e8 <_Min_Stack_Size+0x19c82e8>
    86e4:	00000000 	andeq	r0, r0, r0
    86e8:	27951b00 	ldrcs	r1, [r5, r0, lsl #22]
    86ec:	da010000 	ble	486f4 <_Min_Stack_Size+0x482f4>
    86f0:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    86f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    86f8:	06179c01 	ldreq	r9, [r7], -r1, lsl #24
    86fc:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    8700:	78000004 	stmdavc	r0, {r2}
    8704:	08080051 	stmdaeq	r8, {r0, r4, r6}
    8708:	01000000 	mrseq	r0, (UNDEF: 0)
    870c:	049a17dc 	ldreq	r1, [sl], #2012	; 0x7dc
    8710:	02000000 	andeq	r0, r0, #0
    8714:	00517818 	subseq	r7, r1, r8, lsl r8
    8718:	00000808 	andeq	r0, r0, r8, lsl #16
    871c:	04a61900 	strteq	r1, [r6], #2304	; 0x900
    8720:	5b7a0000 	blpl	1e88728 <_Min_Stack_Size+0x1e88328>
    8724:	00000000 	andeq	r0, r0, r0
    8728:	26e41d00 	strbtcs	r1, [r4], r0, lsl #26
    872c:	e7010000 	str	r0, [r1, -r0]
    8730:	000000a2 	andeq	r0, r0, r2, lsr #1
    8734:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    8738:	00000010 	andeq	r0, r0, r0, lsl r0
    873c:	d81e9c01 	ldmdale	lr, {r0, sl, fp, ip, pc}
    8740:	01000027 	tsteq	r0, r7, lsr #32
    8744:	047e0134 	ldrbteq	r0, [lr], #-308	; 0xfffffecc
    8748:	51a40000 			; <UNDEFINED> instruction: 0x51a40000
    874c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    8750:	9c010000 	stcls	0, cr0, [r1], {-0}
    8754:	000006d3 	ldrdeq	r0, [r0], -r3
    8758:	0027e91f 	eoreq	lr, r7, pc, lsl r9
    875c:	01340100 	teqeq	r4, r0, lsl #2
    8760:	000000a2 	andeq	r0, r0, r2, lsr #1
    8764:	00005b8d 	andeq	r5, r0, sp, lsl #23
    8768:	000eec20 	andeq	lr, lr, r0, lsr #24
    876c:	01360100 	teqeq	r6, r0, lsl #2
    8770:	000000a2 	andeq	r0, r0, r2, lsr #1
    8774:	00005bd2 	ldrdeq	r5, [r0], -r2
    8778:	0051a821 	subseq	sl, r1, r1, lsr #16
    877c:	00001808 	andeq	r1, r0, r8, lsl #16
    8780:	00068300 	andeq	r8, r6, r0, lsl #6
    8784:	01b52200 			; <UNDEFINED> instruction: 0x01b52200
    8788:	3b010000 	blcc	48790 <_Min_Stack_Size+0x48390>
    878c:	0000b401 	andeq	fp, r0, r1, lsl #8
    8790:	68910200 	ldmvs	r1, {r9}
    8794:	12f02300 	rscsne	r2, r0, #0, 6
    8798:	069c0000 	ldreq	r0, [ip], r0
    879c:	b5220000 	strlt	r0, [r2, #-0]!
    87a0:	01000001 	tsteq	r0, r1
    87a4:	00b4014f 	adcseq	r0, r4, pc, asr #2
    87a8:	91020000 	mrsls	r0, (UNDEF: 2)
    87ac:	d41a006c 	ldrle	r0, [sl], #-108	; 0xffffff94
    87b0:	26080051 			; <UNDEFINED> instruction: 0x26080051
    87b4:	1a000009 	bne	87e0 <_Min_Stack_Size+0x83e0>
    87b8:	080051dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, lr}
    87bc:	00000926 	andeq	r0, r0, r6, lsr #18
    87c0:	00520e1a 	subseq	r0, r2, sl, lsl lr
    87c4:	00092608 	andeq	r2, r9, r8, lsl #12
    87c8:	52161a00 	andspl	r1, r6, #0, 20
    87cc:	09260800 	stmdbeq	r6!, {fp}
    87d0:	261a0000 	ldrcs	r0, [sl], -r0
    87d4:	26080052 			; <UNDEFINED> instruction: 0x26080052
    87d8:	1a000009 	bne	8804 <_Min_Stack_Size+0x8404>
    87dc:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    87e0:	00000926 	andeq	r0, r0, r6, lsr #18
    87e4:	0a9d1e00 	beq	fe74ffec <_estack+0xde71ffec>
    87e8:	bf010000 	svclt	0x00010000
    87ec:	00047e01 	andeq	r7, r4, r1, lsl #28
    87f0:	00525c00 	subseq	r5, r2, r0, lsl #24
    87f4:	00009c08 	andeq	r9, r0, r8, lsl #24
    87f8:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    87fc:	20000007 	andcs	r0, r0, r7
    8800:	00000eec 	andeq	r0, r0, ip, ror #29
    8804:	a201c101 	andge	ip, r1, #1073741824	; 0x40000000
    8808:	34000000 	strcc	r0, [r0], #-0
    880c:	2100005c 	qaddcs	r0, ip, r0
    8810:	08005260 	stmdaeq	r0, {r5, r6, r9, ip, lr}
    8814:	00000018 	andeq	r0, r0, r8, lsl r0
    8818:	0000071a 	andeq	r0, r0, sl, lsl r7
    881c:	0001b522 	andeq	fp, r1, r2, lsr #10
    8820:	01c30100 	biceq	r0, r3, r0, lsl #2
    8824:	000000b4 	strheq	r0, [r0], -r4
    8828:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    882c:	00048924 	andeq	r8, r4, r4, lsr #18
    8830:	00527800 	subseq	r7, r2, r0, lsl #16
    8834:	00000808 	andeq	r0, r0, r8, lsl #16
    8838:	01c60100 	biceq	r0, r6, r0, lsl #2
    883c:	0000074b 	andeq	r0, r0, fp, asr #14
    8840:	00049a25 	andeq	r9, r4, r5, lsr #20
    8844:	01000000 	mrseq	r0, (UNDEF: 0)
    8848:	52781800 	rsbspl	r1, r8, #0, 16
    884c:	00080800 	andeq	r0, r8, r0, lsl #16
    8850:	a6190000 	ldrge	r0, [r9], -r0
    8854:	74000004 	strvc	r0, [r0], #-4
    8858:	0000005c 	andeq	r0, r0, ip, asr r0
    885c:	04892400 	streq	r2, [r9], #1024	; 0x400
    8860:	52ae0000 	adcpl	r0, lr, #0
    8864:	00080800 	andeq	r0, r8, r0, lsl #16
    8868:	d4010000 	strle	r0, [r1], #-0
    886c:	00077c01 	andeq	r7, r7, r1, lsl #24
    8870:	049a2600 	ldreq	r2, [sl], #1536	; 0x600
    8874:	5c870000 	stcpl	0, cr0, [r7], {0}
    8878:	ae180000 	cdpge	0, 1, cr0, cr8, cr0, {0}
    887c:	08080052 	stmdaeq	r8, {r1, r4, r6}
    8880:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    8884:	000004a6 	andeq	r0, r0, r6, lsr #9
    8888:	00005c9d 	muleq	r0, sp, ip
    888c:	961a0000 	ldrls	r0, [sl], -r0
    8890:	26080052 			; <UNDEFINED> instruction: 0x26080052
    8894:	1a000009 	bne	88c0 <_Min_Stack_Size+0x84c0>
    8898:	080052a0 	stmdaeq	r0, {r5, r7, r9, ip, lr}
    889c:	00000926 	andeq	r0, r0, r6, lsr #18
    88a0:	0052cc1a 	subseq	ip, r2, sl, lsl ip
    88a4:	00092608 	andeq	r2, r9, r8, lsl #12
    88a8:	52d61a00 	sbcspl	r1, r6, #0, 20
    88ac:	09260800 	stmdbeq	r6!, {fp}
    88b0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    88b4:	000027bd 			; <UNDEFINED> instruction: 0x000027bd
    88b8:	7e01ee01 	cdpvc	14, 0, cr14, cr1, cr1, {0}
    88bc:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    88c0:	9c080052 	stcls	0, cr0, [r8], {82}	; 0x52
    88c4:	01000000 	mrseq	r0, (UNDEF: 0)
    88c8:	00086f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    88cc:	0eec2000 	cdpeq	0, 14, cr2, cr12, cr0, {0}
    88d0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    88d4:	0000a201 	andeq	sl, r0, r1, lsl #4
    88d8:	005cb000 	subseq	fp, ip, r0
    88dc:	52fc2100 	rscspl	r2, ip, #0, 2
    88e0:	00180800 	andseq	r0, r8, r0, lsl #16
    88e4:	07e80000 	strbeq	r0, [r8, r0]!
    88e8:	b5220000 	strlt	r0, [r2, #-0]!
    88ec:	01000001 	tsteq	r0, r1
    88f0:	00b401f2 	ldrshteq	r0, [r4], r2
    88f4:	91020000 	mrsls	r0, (UNDEF: 2)
    88f8:	8924006c 	stmdbhi	r4!, {r2, r3, r5, r6}
    88fc:	14000004 	strne	r0, [r0], #-4
    8900:	08080053 	stmdaeq	r8, {r0, r1, r4, r6}
    8904:	01000000 	mrseq	r0, (UNDEF: 0)
    8908:	081901f5 	ldmdaeq	r9, {r0, r2, r4, r5, r6, r7, r8}
    890c:	9a250000 	bls	948914 <_Min_Stack_Size+0x948514>
    8910:	00000004 	andeq	r0, r0, r4
    8914:	18000200 	stmdane	r0, {r9}
    8918:	08005314 	stmdaeq	r0, {r2, r4, r8, r9, ip, lr}
    891c:	00000008 	andeq	r0, r0, r8
    8920:	0004a619 	andeq	sl, r4, r9, lsl r6
    8924:	005cf000 	subseq	pc, ip, r0
    8928:	24000000 	strcs	r0, [r0], #-0
    892c:	00000489 	andeq	r0, r0, r9, lsl #9
    8930:	0800534a 	stmdaeq	r0, {r1, r3, r6, r8, r9, ip, lr}
    8934:	00000008 	andeq	r0, r0, r8
    8938:	4a020301 	bmi	89544 <_Min_Stack_Size+0x89144>
    893c:	26000008 	strcs	r0, [r0], -r8
    8940:	0000049a 	muleq	r0, sl, r4
    8944:	00005d03 	andeq	r5, r0, r3, lsl #26
    8948:	00534a18 	subseq	r4, r3, r8, lsl sl
    894c:	00000808 	andeq	r0, r0, r8, lsl #16
    8950:	04a61900 	strteq	r1, [r6], #2304	; 0x900
    8954:	5d190000 	ldcpl	0, cr0, [r9, #-0]
    8958:	00000000 	andeq	r0, r0, r0
    895c:	0053321a 	subseq	r3, r3, sl, lsl r2
    8960:	00092608 	andeq	r2, r9, r8, lsl #12
    8964:	533a1a00 	teqpl	sl, #0, 20
    8968:	09260800 	stmdbeq	r6!, {fp}
    896c:	681a0000 	ldmdavs	sl, {}	; <UNPREDICTABLE>
    8970:	26080053 			; <UNDEFINED> instruction: 0x26080053
    8974:	1a000009 	bne	89a0 <_Min_Stack_Size+0x85a0>
    8978:	08005370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip, lr}
    897c:	00000926 	andeq	r0, r0, r6, lsr #18
    8980:	281c1e00 	ldmdacs	ip, {r9, sl, fp, ip}
    8984:	3a010000 	bcc	4898c <_Min_Stack_Size+0x4858c>
    8988:	00047e02 	andeq	r7, r4, r2, lsl #28
    898c:	00539400 	subseq	r9, r3, r0, lsl #8
    8990:	00009808 	andeq	r9, r0, r8, lsl #16
    8994:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    8998:	1f000009 	svcne	0x00000009
    899c:	000026da 	ldrdeq	r2, [r0], -sl
    89a0:	a2023a01 	andge	r3, r2, #4096	; 0x1000
    89a4:	2c000000 	stccs	0, cr0, [r0], {-0}
    89a8:	1f00005d 	svcne	0x0000005d
    89ac:	0000278b 	andeq	r2, r0, fp, lsl #15
    89b0:	8c023a01 	stchi	10, cr3, [r2], {1}
    89b4:	71000000 	mrsvc	r0, (UNDEF: 0)
    89b8:	2000005d 	andcs	r0, r0, sp, asr r0
    89bc:	000027b5 			; <UNDEFINED> instruction: 0x000027b5
    89c0:	a2023c01 	andge	r3, r2, #256	; 0x100
    89c4:	92000000 	andls	r0, r0, #0
    89c8:	2000005d 	andcs	r0, r0, sp, asr r0
    89cc:	00000eec 	andeq	r0, r0, ip, ror #29
    89d0:	a2023d01 	andge	r3, r2, #1, 26	; 0x40
    89d4:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    89d8:	2300005d 	movwcs	r0, #93	; 0x5d
    89dc:	00001310 	andeq	r1, r0, r0, lsl r3
    89e0:	000008e2 	andeq	r0, r0, r2, ror #17
    89e4:	0001b522 	andeq	fp, r1, r2, lsr #10
    89e8:	02440100 	subeq	r0, r4, #0, 2
    89ec:	000000b4 	strheq	r0, [r0], -r4
    89f0:	00649102 	rsbeq	r9, r4, r2, lsl #2
    89f4:	0004bc27 	andeq	fp, r4, r7, lsr #24
    89f8:	00540400 	subseq	r0, r4, r0, lsl #8
    89fc:	00000208 	andeq	r0, r0, r8, lsl #4
    8a00:	026f0100 	rsbeq	r0, pc, #0, 2
    8a04:	0004b327 	andeq	fp, r4, r7, lsr #6
    8a08:	00541c00 	subseq	r1, r4, r0, lsl #24
    8a0c:	00001008 	andeq	r1, r0, r8
    8a10:	026a0100 	rsbeq	r0, sl, #0, 2
    8a14:	0053ca1a 	subseq	ip, r3, sl, lsl sl
    8a18:	00092608 	andeq	r2, r9, r8, lsl #12
    8a1c:	53d21a00 	bicspl	r1, r2, #0, 20
    8a20:	09260800 	stmdbeq	r6!, {fp}
    8a24:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8a28:	000007f3 	strdeq	r0, [r0], -r3
    8a2c:	21074405 	tstcs	r7, r5, lsl #8
    8a30:	05000009 	streq	r0, [r0, #-9]
    8a34:	00000097 	muleq	r0, r7, r0
    8a38:	000ea329 	andeq	sl, lr, r9, lsr #6
    8a3c:	a2d00900 	sbcsge	r0, r0, #0, 18
    8a40:	00000000 	andeq	r0, r0, r0
    8a44:	000021dd 	ldrdeq	r2, [r0], -sp
    8a48:	17230004 	strne	r0, [r3, -r4]!
    8a4c:	01040000 	mrseq	r0, (UNDEF: 4)
    8a50:	00000298 	muleq	r0, r8, r2
    8a54:	002a4c01 	eoreq	r4, sl, r1, lsl #24
    8a58:	00087a00 	andeq	r7, r8, r0, lsl #20
    8a5c:	001a3000 	andseq	r3, sl, r0
    8a60:	00000000 	andeq	r0, r0, r0
    8a64:	003ef700 	eorseq	pc, lr, r0, lsl #14
    8a68:	06010200 	streq	r0, [r1], -r0, lsl #4
    8a6c:	000007d4 	ldrdeq	r0, [r0], -r4
    8a70:	00008803 	andeq	r8, r0, r3, lsl #16
    8a74:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    8a78:	02000000 	andeq	r0, r0, #0
    8a7c:	07d20801 	ldrbeq	r0, [r2, r1, lsl #16]
    8a80:	2f030000 	svccs	0x00030000
    8a84:	0200002a 	andeq	r0, r0, #42	; 0x2a
    8a88:	00004929 	andeq	r4, r0, r9, lsr #18
    8a8c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8a90:	00000822 	andeq	r0, r0, r2, lsr #16
    8a94:	00095b03 	andeq	r5, r9, r3, lsl #22
    8a98:	5b2b0200 	blpl	ac92a0 <_Min_Stack_Size+0xac8ea0>
    8a9c:	02000000 	andeq	r0, r0, #0
    8aa0:	04f70702 	ldrbteq	r0, [r7], #1794	; 0x702
    8aa4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    8aa8:	02000005 	andeq	r0, r0, #5
    8aac:	00006d3f 	andeq	r6, r0, pc, lsr sp
    8ab0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    8ab4:	00000445 	andeq	r0, r0, r5, asr #8
    8ab8:	0003b103 	andeq	fp, r3, r3, lsl #2
    8abc:	7f410200 	svcvc	0x00410200
    8ac0:	02000000 	andeq	r0, r0, #0
    8ac4:	00d40704 	sbcseq	r0, r4, r4, lsl #14
    8ac8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8acc:	00044005 	andeq	r4, r4, r5
    8ad0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8ad4:	000000cf 	andeq	r0, r0, pc, asr #1
    8ad8:	69050404 	stmdbvs	r5, {r2, sl}
    8adc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8ae0:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    8ae4:	8a030000 	bhi	c8aec <_Min_Stack_Size+0xc86ec>
    8ae8:	03000000 	movweq	r0, #0
    8aec:	00002c14 	andeq	r2, r0, r4, lsl ip
    8af0:	2a310300 	bcs	c496f8 <_Min_Stack_Size+0xc492f8>
    8af4:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    8af8:	0000003e 	andeq	r0, r0, lr, lsr r0
    8afc:	00095d03 	andeq	r5, r9, r3, lsl #26
    8b00:	501a0300 	andspl	r0, sl, r0, lsl #6
    8b04:	03000000 	movweq	r0, #0
    8b08:	000005aa 	andeq	r0, r0, sl, lsr #11
    8b0c:	00621f03 	rsbeq	r1, r2, r3, lsl #30
    8b10:	b3030000 	movwlt	r0, #12288	; 0x3000
    8b14:	03000003 	movweq	r0, #3
    8b18:	00007420 	andeq	r7, r0, r0, lsr #8
    8b1c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8b20:	0000064c 	andeq	r0, r0, ip, asr #12
    8b24:	0000ce05 	andeq	ip, r0, r5, lsl #28
    8b28:	00a20500 	adceq	r0, r2, r0, lsl #10
    8b2c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    8b30:	06000000 	streq	r0, [r0], -r0
    8b34:	01730418 	cmneq	r3, r8, lsl r4
    8b38:	00000146 	andeq	r0, r0, r6, asr #2
    8b3c:	00524307 	subseq	r4, r2, r7, lsl #6
    8b40:	e0017504 	and	r7, r1, r4, lsl #10
    8b44:	00000000 	andeq	r0, r0, r0
    8b48:	001f6408 	andseq	r6, pc, r8, lsl #8
    8b4c:	01760400 	cmneq	r6, r0, lsl #8
    8b50:	000000e0 	andeq	r0, r0, r0, ror #1
    8b54:	41500704 	cmpmi	r0, r4, lsl #14
    8b58:	77040052 	smlsdvc	r4, r2, r0, r0
    8b5c:	0000e001 	andeq	lr, r0, r1
    8b60:	c4080800 	strgt	r0, [r8], #-2048	; 0xfffff800
    8b64:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    8b68:	00e00178 	rsceq	r0, r0, r8, ror r1
    8b6c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    8b70:	00001fcf 	andeq	r1, r0, pc, asr #31
    8b74:	e0017904 	and	r7, r1, r4, lsl #18
    8b78:	10000000 	andne	r0, r0, r0
    8b7c:	52434607 	subpl	r4, r3, #7340032	; 0x700000
    8b80:	017a0400 	cmneq	sl, r0, lsl #8
    8b84:	000000e0 	andeq	r0, r0, r0, ror #1
    8b88:	82090014 	andhi	r0, r9, #20
    8b8c:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    8b90:	00ef017b 	rsceq	r0, pc, fp, ror r1	; <UNPREDICTABLE>
    8b94:	24060000 	strcs	r0, [r6], #-0
    8b98:	cf035104 	svcgt	0x00035104
    8b9c:	07000001 	streq	r0, [r0, -r1]
    8ba0:	00315243 	eorseq	r5, r1, r3, asr #4
    8ba4:	e0035304 	and	r5, r3, r4, lsl #6
    8ba8:	00000000 	andeq	r0, r0, r0
    8bac:	32524307 	subscc	r4, r2, #469762048	; 0x1c000000
    8bb0:	03540400 	cmpeq	r4, #0, 8
    8bb4:	000000e0 	andeq	r0, r0, r0, ror #1
    8bb8:	52530704 	subspl	r0, r3, #4, 14	; 0x100000
    8bbc:	03550400 	cmpeq	r5, #0, 8
    8bc0:	000000e0 	andeq	r0, r0, r0, ror #1
    8bc4:	52440708 	subpl	r0, r4, #8, 14	; 0x200000
    8bc8:	03560400 	cmpeq	r6, #0, 8
    8bcc:	000000e0 	andeq	r0, r0, r0, ror #1
    8bd0:	28e7080c 	stmiacs	r7!, {r2, r3, fp}^
    8bd4:	57040000 	strpl	r0, [r4, -r0]
    8bd8:	0000e003 	andeq	lr, r0, r3
    8bdc:	5d081000 	stcpl	0, cr1, [r8, #-0]
    8be0:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    8be4:	00e00358 	rsceq	r0, r0, r8, asr r3
    8be8:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    8bec:	00002a20 	andeq	r2, r0, r0, lsr #20
    8bf0:	e0035904 	and	r5, r3, r4, lsl #18
    8bf4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8bf8:	00052908 	andeq	r2, r5, r8, lsl #18
    8bfc:	035a0400 	cmpeq	sl, #0, 8
    8c00:	000000e0 	andeq	r0, r0, r0, ror #1
    8c04:	29bf081c 	ldmibcs	pc!, {r2, r3, r4, fp}	; <UNPREDICTABLE>
    8c08:	5b040000 	blpl	108c10 <_Min_Stack_Size+0x108810>
    8c0c:	0000e003 	andeq	lr, r0, r3
    8c10:	09002000 	stmdbeq	r0, {sp}
    8c14:	000029fb 	strdeq	r2, [r0], -fp
    8c18:	52035c04 	andpl	r5, r3, #4, 24	; 0x400
    8c1c:	0a000001 	beq	8c28 <_Min_Stack_Size+0x8828>
    8c20:	f0c50501 			; <UNDEFINED> instruction: 0xf0c50501
    8c24:	0b000001 	bleq	8c30 <_Min_Stack_Size+0x8830>
    8c28:	000019a3 	andeq	r1, r0, r3, lsr #19
    8c2c:	45530c00 	ldrbmi	r0, [r3, #-3072]	; 0xfffff400
    8c30:	00010054 	andeq	r0, r1, r4, asr r0
    8c34:	0102040d 	tsteq	r2, sp, lsl #8
    8c38:	0007db08 	andeq	sp, r7, r8, lsl #22
    8c3c:	06010a00 	streq	r0, [r1], -r0, lsl #20
    8c40:	00021a3a 	andeq	r1, r2, sl, lsr sl
    8c44:	04d00b00 	ldrbeq	r0, [r0], #2816	; 0xb00
    8c48:	0b000000 	bleq	8c50 <_Min_Stack_Size+0x8850>
    8c4c:	00000909 	andeq	r0, r0, r9, lsl #18
    8c50:	08000b01 	stmdaeq	r0, {r0, r8, r9, fp}
    8c54:	0b020000 	bleq	88c5c <_Min_Stack_Size+0x8885c>
    8c58:	000004a3 	andeq	r0, r0, r3, lsr #9
    8c5c:	8c030003 	stchi	0, cr0, [r3], {3}
    8c60:	06000005 	streq	r0, [r0], -r5
    8c64:	0001f93f 	andeq	pc, r1, pc, lsr r9	; <UNPREDICTABLE>
    8c68:	06010a00 	streq	r0, [r1], -r0, lsl #20
    8c6c:	00023a45 	andeq	r3, r2, r5, asr #20
    8c70:	18ad0b00 	stmiane	sp!, {r8, r9, fp}
    8c74:	0b000000 	bleq	8c7c <_Min_Stack_Size+0x887c>
    8c78:	00001bd0 	ldrdeq	r1, [r0], -r0
    8c7c:	fb030001 	blx	c8c8a <_Min_Stack_Size+0xc888a>
    8c80:	06000017 			; <UNDEFINED> instruction: 0x06000017
    8c84:	00022548 	andeq	r2, r2, r8, asr #10
    8c88:	07300e00 	ldreq	r0, [r0, -r0, lsl #28]!
    8c8c:	0002de43 	andeq	sp, r2, r3, asr #28
    8c90:	1d040f00 	stcne	15, cr0, [r4, #-0]
    8c94:	45070000 	strmi	r0, [r7, #-0]
    8c98:	000000ce 	andeq	r0, r0, lr, asr #1
    8c9c:	1fc50f00 	svcne	0x00c50f00
    8ca0:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
    8ca4:	000000ce 	andeq	r0, r0, lr, asr #1
    8ca8:	18250f04 	stmdane	r5!, {r2, r8, r9, sl, fp}
    8cac:	4c070000 	stcmi	0, cr0, [r7], {-0}
    8cb0:	000000ce 	andeq	r0, r0, lr, asr #1
    8cb4:	1dc30f08 	stclne	15, cr0, [r3, #32]
    8cb8:	4f070000 	svcmi	0x00070000
    8cbc:	000000ce 	andeq	r0, r0, lr, asr #1
    8cc0:	1fe40f0c 	svcne	0x00e40f0c
    8cc4:	52070000 	andpl	r0, r7, #0
    8cc8:	000000ce 	andeq	r0, r0, lr, asr #1
    8ccc:	1b430f10 	blne	10cc914 <_Min_Stack_Size+0x10cc514>
    8cd0:	55070000 	strpl	r0, [r7, #-0]
    8cd4:	000000ce 	andeq	r0, r0, lr, asr #1
    8cd8:	2e100f14 	mrccs	15, 0, r0, cr0, cr4, {0}
    8cdc:	58070000 	stmdapl	r7, {}	; <UNPREDICTABLE>
    8ce0:	000000ce 	andeq	r0, r0, lr, asr #1
    8ce4:	126c0f18 	rsbne	r0, ip, #24, 30	; 0x60
    8ce8:	5d070000 	stcpl	0, cr0, [r7, #-0]
    8cec:	000000ce 	andeq	r0, r0, lr, asr #1
    8cf0:	1e870f1c 	mcrne	15, 4, r0, cr7, cr12, {0}
    8cf4:	60070000 	andvs	r0, r7, r0
    8cf8:	000000ce 	andeq	r0, r0, lr, asr #1
    8cfc:	1e9a0f20 	cdpne	15, 9, cr0, cr10, cr0, {1}
    8d00:	65070000 	strvs	r0, [r7, #-0]
    8d04:	000000ce 	andeq	r0, r0, lr, asr #1
    8d08:	183f0f24 	ldmdane	pc!, {r2, r5, r8, r9, sl, fp}	; <UNPREDICTABLE>
    8d0c:	68070000 	stmdavs	r7, {}	; <UNPREDICTABLE>
    8d10:	000000ce 	andeq	r0, r0, lr, asr #1
    8d14:	22000f28 	andcs	r0, r0, #40, 30	; 0xa0
    8d18:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    8d1c:	000000ce 	andeq	r0, r0, lr, asr #1
    8d20:	ee03002c 	cdp	0, 0, cr0, cr3, cr12, {1}
    8d24:	07000015 	smladeq	r0, r5, r0, r0
    8d28:	00024573 	andeq	r4, r2, r3, ror r5
    8d2c:	07010a00 	streq	r0, [r1, -r0, lsl #20]
    8d30:	0003167a 	andeq	r1, r3, sl, ror r6
    8d34:	19950b00 	ldmibne	r5, {r8, r9, fp}
    8d38:	0b000000 	bleq	8d40 <_Min_Stack_Size+0x8940>
    8d3c:	00001645 	andeq	r1, r0, r5, asr #12
    8d40:	1d8a0b01 	vstrne	d0, [sl, #4]
    8d44:	0b020000 	bleq	88d4c <_Min_Stack_Size+0x8894c>
    8d48:	0000208f 	andeq	r2, r0, pc, lsl #1
    8d4c:	18570b03 	ldmdane	r7, {r0, r1, r8, r9, fp}^
    8d50:	0b040000 	bleq	108d58 <_Min_Stack_Size+0x108958>
    8d54:	00001a29 	andeq	r1, r0, r9, lsr #20
    8d58:	75030005 	strvc	r0, [r3, #-5]
    8d5c:	0700001d 	smladeq	r0, sp, r0, r0
    8d60:	0002e981 	andeq	lr, r2, r1, lsl #19
    8d64:	20a51000 	adccs	r1, r5, r0
    8d68:	07600000 	strbeq	r0, [r0, -r0]!
    8d6c:	0003d69d 	muleq	r3, sp, r6
    8d70:	1c910f00 	ldcne	15, cr0, [r1], {0}
    8d74:	9f070000 	svcls	0x00070000
    8d78:	000003d6 	ldrdeq	r0, [r0], -r6
    8d7c:	222d0f00 	eorcs	r0, sp, #0, 30
    8d80:	a1070000 	mrsge	r0, (UNDEF: 7)
    8d84:	000002de 	ldrdeq	r0, [r0], -lr
    8d88:	19190f04 	ldmdbne	r9, {r2, r8, r9, sl, fp}
    8d8c:	a3070000 	movwge	r0, #28672	; 0x7000
    8d90:	0000023a 	andeq	r0, r0, sl, lsr r2
    8d94:	04630f34 	strbteq	r0, [r3], #-3892	; 0xfffff0cc
    8d98:	a5070000 	strge	r0, [r7, #-0]
    8d9c:	000003dc 	ldrdeq	r0, [r0], -ip
    8da0:	18f70f35 	ldmne	r7!, {r0, r2, r4, r5, r8, r9, sl, fp}^
    8da4:	a7070000 	strge	r0, [r7, -r0]
    8da8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8dac:	21ef0f38 	mvncs	r0, r8, lsr pc
    8db0:	a9070000 	stmdbge	r7, {}	; <UNPREDICTABLE>
    8db4:	000003f2 	strdeq	r0, [r0], -r2
    8db8:	176a0f3c 			; <UNDEFINED> instruction: 0x176a0f3c
    8dbc:	ab070000 	blge	1c8dc4 <_Min_Stack_Size+0x1c89c4>
    8dc0:	000003f2 	strdeq	r0, [r0], -r2
    8dc4:	17d20f40 	ldrbne	r0, [r2, r0, asr #30]
    8dc8:	ad070000 	stcge	0, cr0, [r7, #-0]
    8dcc:	000003f2 	strdeq	r0, [r0], -r2
    8dd0:	1ced0f44 	stclne	15, cr0, [sp], #272	; 0x110
    8dd4:	af070000 	svcge	0x00070000
    8dd8:	000003f2 	strdeq	r0, [r0], -r2
    8ddc:	1bff0f48 	blne	fffccb04 <_estack+0xdff9cb04>
    8de0:	b1070000 	mrslt	r0, (UNDEF: 7)
    8de4:	000003f2 	strdeq	r0, [r0], -r2
    8de8:	21dd0f4c 	bicscs	r0, sp, ip, asr #30
    8dec:	b3070000 	movwlt	r0, #28672	; 0x7000
    8df0:	000003f2 	strdeq	r0, [r0], -r2
    8df4:	1a4d0f50 	bne	134cb3c <_Min_Stack_Size+0x134c73c>
    8df8:	b5070000 	strlt	r0, [r7, #-0]
    8dfc:	000000e0 	andeq	r0, r0, r0, ror #1
    8e00:	18c80f54 	stmiane	r8, {r2, r4, r6, r8, r9, sl, fp}^
    8e04:	b7070000 	strlt	r0, [r7, -r0]
    8e08:	000000ce 	andeq	r0, r0, lr, asr #1
    8e0c:	19ba0f58 	ldmibne	sl!, {r3, r4, r6, r8, r9, sl, fp}
    8e10:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
    8e14:	000000ce 	andeq	r0, r0, lr, asr #1
    8e18:	0411005c 	ldreq	r0, [r1], #-92	; 0xffffffa4
    8e1c:	00000146 	andeq	r0, r0, r6, asr #2
    8e20:	00031605 	andeq	r1, r3, r5, lsl #12
    8e24:	03ec1200 	mvneq	r1, #0, 4
    8e28:	ec130000 	ldc	0, cr0, [r3], {-0}
    8e2c:	00000003 	andeq	r0, r0, r3
    8e30:	03210411 			; <UNDEFINED> instruction: 0x03210411
    8e34:	04110000 	ldreq	r0, [r1], #-0
    8e38:	000003e1 	andeq	r0, r0, r1, ror #7
    8e3c:	0020a703 	eoreq	sl, r0, r3, lsl #14
    8e40:	21bb0700 			; <UNDEFINED> instruction: 0x21bb0700
    8e44:	11000003 	tstne	r0, r3
    8e48:	0000a204 	andeq	sl, r0, r4, lsl #4
    8e4c:	f8041100 			; <UNDEFINED> instruction: 0xf8041100
    8e50:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    8e54:	9c41082c 	mcrrls	8, 2, r0, r1, cr12
    8e58:	0f000004 	svceq	0x00000004
    8e5c:	00002e10 	andeq	r2, r0, r0, lsl lr
    8e60:	00ce4308 	sbceq	r4, lr, r8, lsl #6
    8e64:	0f000000 	svceq	0x00000000
    8e68:	00001fc5 	andeq	r1, r0, r5, asr #31
    8e6c:	00ce4608 	sbceq	r4, lr, r8, lsl #12
    8e70:	0f040000 	svceq	0x00040000
    8e74:	00002d3e 	andeq	r2, r0, lr, lsr sp
    8e78:	00ce4908 	sbceq	r4, lr, r8, lsl #18
    8e7c:	0f080000 	svceq	0x00080000
    8e80:	00002b14 	andeq	r2, r0, r4, lsl fp
    8e84:	00ce4c08 	sbceq	r4, lr, r8, lsl #24
    8e88:	0f0c0000 	svceq	0x000c0000
    8e8c:	00002c49 	andeq	r2, r0, r9, asr #24
    8e90:	00ce4f08 	sbceq	r4, lr, r8, lsl #30
    8e94:	14100000 	ldrne	r0, [r0], #-0
    8e98:	0053534e 	subseq	r5, r3, lr, asr #6
    8e9c:	00ce5208 	sbceq	r5, lr, r8, lsl #4
    8ea0:	0f140000 	svceq	0x00140000
    8ea4:	00002b84 	andeq	r2, r0, r4, lsl #23
    8ea8:	00ce5608 	sbceq	r5, lr, r8, lsl #12
    8eac:	0f180000 	svceq	0x00180000
    8eb0:	00002c52 	andeq	r2, r0, r2, asr ip
    8eb4:	00ce5c08 	sbceq	r5, lr, r8, lsl #24
    8eb8:	0f1c0000 	svceq	0x001c0000
    8ebc:	00002e0e 	andeq	r2, r0, lr, lsl #28
    8ec0:	00ce5f08 	sbceq	r5, lr, r8, lsl #30
    8ec4:	0f200000 	svceq	0x00200000
    8ec8:	00002e38 	andeq	r2, r0, r8, lsr lr
    8ecc:	00ce6208 	sbceq	r6, lr, r8, lsl #4
    8ed0:	0f240000 	svceq	0x00240000
    8ed4:	000028d3 	ldrdeq	r2, [r0], -r3
    8ed8:	00ce6508 	sbceq	r6, lr, r8, lsl #10
    8edc:	00280000 	eoreq	r0, r8, r0
    8ee0:	00286403 	eoreq	r6, r8, r3, lsl #8
    8ee4:	0f670800 	svceq	0x00670800
    8ee8:	0a000004 	beq	8f00 <_Min_Stack_Size+0x8b00>
    8eec:	da6d0801 	ble	1b4aef8 <_Min_Stack_Size+0x1b4aaf8>
    8ef0:	0b000004 	bleq	8f08 <_Min_Stack_Size+0x8b08>
    8ef4:	00002cec 	andeq	r2, r0, ip, ror #25
    8ef8:	2dfa0b00 	ldclcs	11, cr0, [sl]
    8efc:	0b010000 	bleq	48f04 <_Min_Stack_Size+0x48b04>
    8f00:	00002daf 	andeq	r2, r0, pc, lsr #27
    8f04:	29e50b02 	stmibcs	r5!, {r1, r8, r9, fp}^
    8f08:	0b030000 	bleq	c8f10 <_Min_Stack_Size+0xc8b10>
    8f0c:	00002874 	andeq	r2, r0, r4, ror r8
    8f10:	2bd30b04 	blcs	ff4cbb28 <_estack+0xdf49bb28>
    8f14:	0b050000 	bleq	148f1c <_Min_Stack_Size+0x148b1c>
    8f18:	00002c7d 	andeq	r2, r0, sp, ror ip
    8f1c:	9a030006 	bls	c8f3c <_Min_Stack_Size+0xc8b3c>
    8f20:	0800002d 	stmdaeq	r0, {r0, r2, r3, r5}
    8f24:	0004a775 	andeq	sl, r4, r5, ror r7
    8f28:	2b201000 	blcs	80cf30 <_Min_Stack_Size+0x80cb30>
    8f2c:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
    8f30:	0005a67a 	andeq	sl, r5, sl, ror r6
    8f34:	1c910f00 	ldcne	15, cr0, [r1], {0}
    8f38:	7c080000 	stcvc	0, cr0, [r8], {-0}
    8f3c:	000005a6 	andeq	r0, r0, r6, lsr #11
    8f40:	222d0f00 	eorcs	r0, sp, #0, 30
    8f44:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    8f48:	0000049c 	muleq	r0, ip, r4
    8f4c:	29da0f04 	ldmibcs	sl, {r2, r8, r9, sl, fp}^
    8f50:	80080000 	andhi	r0, r8, r0
    8f54:	00000403 	andeq	r0, r0, r3, lsl #8
    8f58:	2b600f30 	blcs	180cc20 <_Min_Stack_Size+0x180c820>
    8f5c:	82080000 	andhi	r0, r8, #0
    8f60:	000000b8 	strheq	r0, [r0], -r8
    8f64:	2c710f34 	ldclcs	15, cr0, [r1], #-208	; 0xffffff30
    8f68:	84080000 	strhi	r0, [r8], #-0
    8f6c:	000000ea 	andeq	r0, r0, sl, ror #1
    8f70:	2e2d0f36 	mcrcs	15, 1, r0, cr13, cr6, {1}
    8f74:	86080000 	strhi	r0, [r8], -r0
    8f78:	00000403 	andeq	r0, r0, r3, lsl #8
    8f7c:	2b440f38 	blcs	110cc64 <_Min_Stack_Size+0x110c864>
    8f80:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    8f84:	000000b8 	strheq	r0, [r0], -r8
    8f88:	2e780f3c 	mrccs	15, 3, r0, cr8, cr12, {1}
    8f8c:	8a080000 	bhi	208f94 <_Min_Stack_Size+0x208b94>
    8f90:	000000ea 	andeq	r0, r0, sl, ror #1
    8f94:	28e10f3e 	stmiacs	r1!, {r1, r2, r3, r4, r5, r8, r9, sl, fp}^
    8f98:	8c080000 	stchi	0, cr0, [r8], {-0}
    8f9c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    8fa0:	2e840f40 	cdpcs	15, 8, cr0, cr4, cr0, {2}
    8fa4:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
    8fa8:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    8fac:	1c570f44 	mrrcne	15, 4, r0, r7, cr4
    8fb0:	90080000 	andls	r0, r8, r0
    8fb4:	00000409 	andeq	r0, r0, r9, lsl #8
    8fb8:	19370f48 	ldmdbne	r7!, {r3, r6, r8, r9, sl, fp}
    8fbc:	92080000 	andls	r0, r8, #0
    8fc0:	00000409 	andeq	r0, r0, r9, lsl #8
    8fc4:	19190f4c 	ldmdbne	r9, {r2, r3, r6, r8, r9, sl, fp}
    8fc8:	94080000 	strls	r0, [r8], #-0
    8fcc:	0000023a 	andeq	r0, r0, sl, lsr r2
    8fd0:	04630f50 	strbteq	r0, [r3], #-3920	; 0xfffff0b0
    8fd4:	96080000 	strls	r0, [r8], -r0
    8fd8:	000005c3 	andeq	r0, r0, r3, asr #11
    8fdc:	1a4d0f51 	bne	134cd28 <_Min_Stack_Size+0x134c928>
    8fe0:	98080000 	stmdals	r8, {}	; <UNPREDICTABLE>
    8fe4:	000000e0 	andeq	r0, r0, r0, ror #1
    8fe8:	04110054 	ldreq	r0, [r1], #-84	; 0xffffffac
    8fec:	000001cf 	andeq	r0, r0, pc, asr #3
    8ff0:	0005b712 	andeq	fp, r5, r2, lsl r7
    8ff4:	05b71300 	ldreq	r1, [r7, #768]!	; 0x300
    8ff8:	11000000 	mrsne	r0, (UNDEF: 0)
    8ffc:	0004e504 	andeq	lr, r4, r4, lsl #10
    9000:	ac041100 	stfges	f1, [r4], {-0}
    9004:	05000005 	streq	r0, [r0, #-5]
    9008:	000004da 	ldrdeq	r0, [r0], -sl
    900c:	002b2203 	eoreq	r2, fp, r3, lsl #4
    9010:	e59a0800 	ldr	r0, [sl, #2048]	; 0x800
    9014:	15000004 	strne	r0, [r0, #-4]
    9018:	00002c02 	andeq	r2, r0, r2, lsl #24
    901c:	1a09e401 	bne	282028 <_Min_Stack_Size+0x281c28>
    9020:	01000002 	tsteq	r0, r2
    9024:	00000621 	andeq	r0, r0, r1, lsr #12
    9028:	0029ba16 	eoreq	fp, r9, r6, lsl sl
    902c:	09e40100 	stmibeq	r4!, {r8}^
    9030:	00000621 	andeq	r0, r0, r1, lsr #12
    9034:	00182f16 	andseq	r2, r8, r6, lsl pc
    9038:	09e40100 	stmibeq	r4!, {r8}^
    903c:	000000ce 	andeq	r0, r0, lr, asr #1
    9040:	00046316 	andeq	r6, r4, r6, lsl r3
    9044:	09e40100 	stmibeq	r4!, {r8}^
    9048:	000000ce 	andeq	r0, r0, lr, asr #1
    904c:	002c1816 	eoreq	r1, ip, r6, lsl r8
    9050:	09e40100 	stmibeq	r4!, {r8}^
    9054:	000000ce 	andeq	r0, r0, lr, asr #1
    9058:	001c9a16 	andseq	r9, ip, r6, lsl sl
    905c:	09e40100 	stmibeq	r4!, {r8}^
    9060:	000000ce 	andeq	r0, r0, lr, asr #1
    9064:	c8041100 	stmdagt	r4, {r8, ip}
    9068:	17000005 	strne	r0, [r0, -r5]
    906c:	00002d5e 	andeq	r2, r0, lr, asr sp
    9070:	1a04bf01 	bne	138c7c <_Min_Stack_Size+0x13887c>
    9074:	01000002 	tsteq	r0, r2
    9078:	00000695 	muleq	r0, r5, r6
    907c:	0029ba16 	eoreq	fp, r9, r6, lsl sl
    9080:	04bf0100 	ldrteq	r0, [pc], #256	; 9088 <_Min_Stack_Size+0x8c88>
    9084:	00000621 	andeq	r0, r0, r1, lsr #12
    9088:	002c2016 	eoreq	r2, ip, r6, lsl r0
    908c:	04bf0100 	ldrteq	r0, [pc], #256	; 9094 <_Min_Stack_Size+0x8c94>
    9090:	00000403 	andeq	r0, r0, r3, lsl #8
    9094:	002a2716 	eoreq	r2, sl, r6, lsl r7
    9098:	04bf0100 	ldrteq	r0, [pc], #256	; 90a0 <_Min_Stack_Size+0x8ca0>
    909c:	00000403 	andeq	r0, r0, r3, lsl #8
    90a0:	002d4216 	eoreq	r4, sp, r6, lsl r2
    90a4:	04bf0100 	ldrteq	r0, [pc], #256	; 90ac <_Min_Stack_Size+0x8cac>
    90a8:	000000b8 	strheq	r0, [r0], -r8
    90ac:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    90b0:	04c10100 	strbeq	r0, [r1], #256	; 0x100
    90b4:	000000ce 	andeq	r0, r0, lr, asr #1
    90b8:	00170e19 	andseq	r0, r7, r9, lsl lr
    90bc:	04c10100 	strbeq	r0, [r1], #256	; 0x100
    90c0:	000000ce 	andeq	r0, r0, lr, asr #1
    90c4:	002cd219 	eoreq	sp, ip, r9, lsl r2
    90c8:	04c20100 	strbeq	r0, [r2], #256	; 0x100
    90cc:	0000021a 	andeq	r0, r0, sl, lsl r2
    90d0:	002c6b1a 	eoreq	r6, ip, sl, lsl fp
    90d4:	05070100 	streq	r0, [r7, #-256]	; 0xffffff00
    90d8:	2bb71700 	blcs	fedcece0 <_estack+0xded9ece0>
    90dc:	d3010000 	movwle	r0, #4096	; 0x1000
    90e0:	00021a05 	andeq	r1, r2, r5, lsl #20
    90e4:	07030100 	streq	r0, [r3, -r0, lsl #2]
    90e8:	ba160000 	blt	5890f0 <_Min_Stack_Size+0x588cf0>
    90ec:	01000029 	tsteq	r0, r9, lsr #32
    90f0:	062105d3 			; <UNDEFINED> instruction: 0x062105d3
    90f4:	20160000 	andscs	r0, r6, r0
    90f8:	0100002c 	tsteq	r0, ip, lsr #32
    90fc:	040305d3 	streq	r0, [r3], #-1491	; 0xfffffa2d
    9100:	27160000 	ldrcs	r0, [r6, -r0]
    9104:	0100002a 	tsteq	r0, sl, lsr #32
    9108:	040305d3 	streq	r0, [r3], #-1491	; 0xfffffa2d
    910c:	42160000 	andsmi	r0, r6, #0
    9110:	0100002d 	tsteq	r0, sp, lsr #32
    9114:	00b805d3 	ldrsbteq	r0, [r8], r3
    9118:	74180000 	ldrvc	r0, [r8], #-0
    911c:	0100706d 	tsteq	r0, sp, rrx
    9120:	00ce05d5 	ldrdeq	r0, [lr], #85	; 0x55
    9124:	0e190000 	cdpeq	0, 1, cr0, cr9, cr0, {0}
    9128:	01000017 	tsteq	r0, r7, lsl r0
    912c:	00ce05d5 	ldrdeq	r0, [lr], #85	; 0x55
    9130:	d2190000 	andsle	r0, r9, #0
    9134:	0100002c 	tsteq	r0, ip, lsr #32
    9138:	021a05d6 	andseq	r0, sl, #897581056	; 0x35800000
    913c:	6b1a0000 	blvs	689144 <_Min_Stack_Size+0x688d44>
    9140:	0100002c 	tsteq	r0, ip, lsr #32
    9144:	1b000638 	blne	aa2c <_Min_Stack_Size+0xa62c>
    9148:	00002a07 	andeq	r2, r0, r7, lsl #20
    914c:	0109ae01 	tsteq	r9, r1, lsl #28
    9150:	0000071d 	andeq	r0, r0, sp, lsl r7
    9154:	0029ba16 	eoreq	fp, r9, r6, lsl sl
    9158:	09ae0100 	stmibeq	lr!, {r8}
    915c:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    9160:	2c281b00 	stccs	11, cr1, [r8], #-0
    9164:	55010000 	strpl	r0, [r1, #-0]
    9168:	07370109 	ldreq	r0, [r7, -r9, lsl #2]!
    916c:	ba160000 	blt	589174 <_Min_Stack_Size+0x588d74>
    9170:	01000029 	tsteq	r0, r9, lsr #32
    9174:	05b70955 	ldreq	r0, [r7, #2389]!	; 0x955
    9178:	1b000000 	blne	9180 <_Min_Stack_Size+0x8d80>
    917c:	00002cdc 	ldrdeq	r2, [r0], -ip
    9180:	01098d01 	tsteq	r9, r1, lsl #26
    9184:	00000751 	andeq	r0, r0, r1, asr r7
    9188:	0029ba16 	eoreq	fp, r9, r6, lsl sl
    918c:	098d0100 	stmibeq	sp, {r8}
    9190:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    9194:	2abd1b00 	bcs	fef4fd9c <_estack+0xdef1fd9c>
    9198:	c2010000 	andgt	r0, r1, #0
    919c:	076b0108 	strbeq	r0, [fp, -r8, lsl #2]!
    91a0:	ba160000 	blt	5891a8 <_Min_Stack_Size+0x588da8>
    91a4:	01000029 	tsteq	r0, r9, lsr #32
    91a8:	05b708c2 	ldreq	r0, [r7, #2242]!	; 0x8c2
    91ac:	1b000000 	blne	91b4 <_Min_Stack_Size+0x8db4>
    91b0:	000029c5 	andeq	r2, r0, r5, asr #19
    91b4:	01088501 	tsteq	r8, r1, lsl #10
    91b8:	00000785 	andeq	r0, r0, r5, lsl #15
    91bc:	0029ba16 	eoreq	fp, r9, r6, lsl sl
    91c0:	08850100 	stmeq	r5, {r8}
    91c4:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    91c8:	2c371500 	cfldr32cs	mvfx1, [r7], #-0
    91cc:	13010000 	movwne	r0, #4096	; 0x1000
    91d0:	00021a0a 	andeq	r1, r2, sl, lsl #20
    91d4:	07bb0100 	ldreq	r0, [fp, r0, lsl #2]!
    91d8:	ba160000 	blt	5891e0 <_Min_Stack_Size+0x588de0>
    91dc:	01000029 	tsteq	r0, r9, lsr #32
    91e0:	06210a13 			; <UNDEFINED> instruction: 0x06210a13
    91e4:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    91e8:	0100002c 	tsteq	r0, ip, lsr #32
    91ec:	00ce0a13 	sbceq	r0, lr, r3, lsl sl
    91f0:	9a160000 	bls	5891f8 <_Min_Stack_Size+0x588df8>
    91f4:	0100001c 	tsteq	r0, ip, lsl r0
    91f8:	00ce0a13 	sbceq	r0, lr, r3, lsl sl
    91fc:	1c000000 	stcne	0, cr0, [r0], {-0}
    9200:	000028ab 	andeq	r2, r0, fp, lsr #17
    9204:	2c017601 	stccs	6, cr7, [r1], {1}
    9208:	02080054 	andeq	r0, r8, #84	; 0x54
    920c:	01000000 	mrseq	r0, (UNDEF: 0)
    9210:	0007e09c 	muleq	r7, ip, r0
    9214:	29ba1d00 	ldmibcs	sl!, {r8, sl, fp, ip}
    9218:	76010000 	strvc	r0, [r1], -r0
    921c:	00062101 	andeq	r2, r6, r1, lsl #2
    9220:	00500100 	subseq	r0, r0, r0, lsl #2
    9224:	002b961e 	eoreq	r9, fp, lr, lsl r6
    9228:	01020100 	mrseq	r0, (UNDEF: 18)
    922c:	0000021a 	andeq	r0, r0, sl, lsl r2
    9230:	08005430 	stmdaeq	r0, {r4, r5, sl, ip, lr}
    9234:	000000b4 	strheq	r0, [r0], -r4
    9238:	081b9c01 	ldmdaeq	fp, {r0, sl, fp, ip, pc}
    923c:	ba1f0000 	blt	7c9244 <_Min_Stack_Size+0x7c8e44>
    9240:	01000029 	tsteq	r0, r9, lsr #32
    9244:	06210102 	strteq	r0, [r1], -r2, lsl #2
    9248:	5e080000 	cdppl	0, 0, cr0, cr8, cr0, {0}
    924c:	de200000 	cdple	0, 2, cr0, cr0, cr0, {0}
    9250:	bb080054 	bllt	2093a8 <_Min_Stack_Size+0x208fa8>
    9254:	21000007 	tstcs	r0, r7
    9258:	78025001 	stmdavc	r2, {r0, ip, lr}
    925c:	1c000000 	stcne	0, cr0, [r0], {-0}
    9260:	00002c91 	muleq	r0, r1, ip
    9264:	e4018501 	str	r8, [r1], #-1281	; 0xfffffaff
    9268:	02080054 	andeq	r0, r8, #84	; 0x54
    926c:	01000000 	mrseq	r0, (UNDEF: 0)
    9270:	0008409c 	muleq	r8, ip, r0
    9274:	29ba1d00 	ldmibcs	sl!, {r8, sl, fp, ip}
    9278:	85010000 	strhi	r0, [r1, #-0]
    927c:	00062101 	andeq	r2, r6, r1, lsl #2
    9280:	00500100 	subseq	r0, r0, r0, lsl #2
    9284:	002e591e 	eoreq	r5, lr, lr, lsl r9
    9288:	01540100 	cmpeq	r4, r0, lsl #2
    928c:	0000021a 	andeq	r0, r0, sl, lsl r2
    9290:	080054e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, lr}
    9294:	0000002c 	andeq	r0, r0, ip, lsr #32
    9298:	087b9c01 	ldmdaeq	fp!, {r0, sl, fp, ip, pc}^
    929c:	ba1f0000 	blt	7c92a4 <_Min_Stack_Size+0x7c8ea4>
    92a0:	01000029 	tsteq	r0, r9, lsr #32
    92a4:	06210154 			; <UNDEFINED> instruction: 0x06210154
    92a8:	5e550000 	cdppl	0, 5, cr0, cr5, cr0, {0}
    92ac:	02200000 	eoreq	r0, r0, #0
    92b0:	1b080055 	blne	20940c <_Min_Stack_Size+0x20900c>
    92b4:	21000008 	tstcs	r0, r8
    92b8:	74025001 	strvc	r5, [r2], #-1
    92bc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    92c0:	00002930 	andeq	r2, r0, r0, lsr r9
    92c4:	1a01bc01 	bne	782d0 <_Min_Stack_Size+0x77ed0>
    92c8:	14000002 	strne	r0, [r0], #-2
    92cc:	28080055 	stmdacs	r8, {r0, r2, r4, r6}
    92d0:	01000003 	tsteq	r0, r3
    92d4:	000a369c 	muleq	sl, ip, r6
    92d8:	29ba1f00 	ldmibcs	sl!, {r8, r9, sl, fp, ip}
    92dc:	bc010000 	stclt	0, cr0, [r1], {-0}
    92e0:	00062101 	andeq	r2, r6, r1, lsl #2
    92e4:	005e8c00 	subseq	r8, lr, r0, lsl #24
    92e8:	21d71f00 	bicscs	r1, r7, r0, lsl #30
    92ec:	bc010000 	stclt	0, cr0, [r1], {-0}
    92f0:	00040301 	andeq	r0, r4, r1, lsl #6
    92f4:	005eaa00 	subseq	sl, lr, r0, lsl #20
    92f8:	2d421f00 	stclcs	15, cr1, [r2, #-0]
    92fc:	bc010000 	stclt	0, cr0, [r1], {-0}
    9300:	0000b801 	andeq	fp, r0, r1, lsl #16
    9304:	005fa700 	subseq	sl, pc, r0, lsl #14
    9308:	2c181f00 	ldccs	15, cr1, [r8], {-0}
    930c:	bc010000 	stclt	0, cr0, [r1], {-0}
    9310:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9314:	005fc800 	subseq	ip, pc, r0, lsl #16
    9318:	0eec2200 	cdpeq	2, 14, cr2, cr12, cr0, {0}
    931c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    9320:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9324:	005fe600 	subseq	lr, pc, r0, lsl #12
    9328:	2cd22200 	lfmcs	f2, 2, [r2], {0}
    932c:	bf010000 	svclt	0x00010000
    9330:	00021a01 	andeq	r1, r2, r1, lsl #20
    9334:	00601000 	rsbeq	r1, r0, r0
    9338:	2c6b2300 	stclcs	3, cr2, [fp], #-0
    933c:	56010000 	strpl	r0, [r1], -r0
    9340:	00554a02 	subseq	r4, r5, r2, lsl #20
    9344:	05d32408 	ldrbeq	r2, [r3, #1032]	; 0x408
    9348:	55f60000 	ldrbpl	r0, [r6, #0]!
    934c:	13780800 	cmnne	r8, #0, 16
    9350:	36010000 	strcc	r0, [r1], -r0
    9354:	00096f02 	andeq	r6, r9, r2, lsl #30
    9358:	06142500 	ldreq	r2, [r4], -r0, lsl #10
    935c:	08250000 	stmdaeq	r5!, {}	; <UNPREDICTABLE>
    9360:	25000006 	strcs	r0, [r0, #-6]
    9364:	000005fc 	strdeq	r0, [r0], -ip
    9368:	0005f025 	andeq	pc, r5, r5, lsr #32
    936c:	05e42500 	strbeq	r2, [r4, #1280]!	; 0x500
    9370:	98260000 	stmdals	r6!, {}	; <UNPREDICTABLE>
    9374:	65000013 	strvs	r0, [r0, #-19]	; 0xffffffed
    9378:	27000009 	strcs	r0, [r0, -r9]
    937c:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9380:	00006053 	andeq	r6, r0, r3, asr r0
    9384:	0005fc27 	andeq	pc, r5, r7, lsr #24
    9388:	00607300 	rsbeq	r7, r0, r0, lsl #6
    938c:	06082700 	streq	r2, [r8], -r0, lsl #14
    9390:	60930000 	addsvs	r0, r3, r0
    9394:	14270000 	strtne	r0, [r7], #-0
    9398:	b1000006 	tstlt	r0, r6
    939c:	27000060 	strcs	r0, [r0, -r0, rrx]
    93a0:	000005e4 	andeq	r0, r0, r4, ror #11
    93a4:	000060cf 	andeq	r6, r0, pc, asr #1
    93a8:	569a2800 	ldrpl	r2, [sl], r0, lsl #16
    93ac:	21880800 	orrcs	r0, r8, r0, lsl #16
    93b0:	24000000 	strcs	r0, [r0], #-0
    93b4:	00000785 	andeq	r0, r0, r5, lsl #15
    93b8:	08005602 	stmdaeq	r0, {r1, r9, sl, ip, lr}
    93bc:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
    93c0:	fd023d01 	stc2	13, cr3, [r2, #-4]
    93c4:	25000009 	strcs	r0, [r0, #-9]
    93c8:	000007ae 	andeq	r0, r0, lr, lsr #15
    93cc:	0007a225 	andeq	sl, r7, r5, lsr #4
    93d0:	07962500 	ldreq	r2, [r6, r0, lsl #10]
    93d4:	d3290000 			; <UNDEFINED> instruction: 0xd3290000
    93d8:	02000005 	andeq	r0, r0, #5
    93dc:	d8080056 	stmdale	r8, {r1, r2, r4, r6}
    93e0:	01000013 	tsteq	r0, r3, lsl r0
    93e4:	14250a16 	strtne	r0, [r5], #-2582	; 0xfffff5ea
    93e8:	25000006 	strcs	r0, [r0, #-6]
    93ec:	00000608 	andeq	r0, r0, r8, lsl #12
    93f0:	0005fc25 	andeq	pc, r5, r5, lsr #24
    93f4:	05f02500 	ldrbeq	r2, [r0, #1280]!	; 0x500
    93f8:	e4250000 	strt	r0, [r5], #-0
    93fc:	26000005 	strcs	r0, [r0], -r5
    9400:	000013f8 	strdeq	r1, [r0], -r8
    9404:	000009f2 	strdeq	r0, [r0], -r2
    9408:	0005f027 	andeq	pc, r5, r7, lsr #32
    940c:	0060ed00 	rsbeq	lr, r0, r0, lsl #26
    9410:	05fc2700 	ldrbeq	r2, [ip, #1792]!	; 0x700
    9414:	610f0000 	mrsvs	r0, CPSR
    9418:	08270000 	stmdaeq	r7!, {}	; <UNPREDICTABLE>
    941c:	2f000006 	svccs	0x00000006
    9420:	27000061 	strcs	r0, [r0, -r1, rrx]
    9424:	00000614 	andeq	r0, r0, r4, lsl r6
    9428:	0000614d 	andeq	r6, r0, sp, asr #2
    942c:	0005e427 	andeq	lr, r5, r7, lsr #8
    9430:	00616b00 	rsbeq	r6, r1, r0, lsl #22
    9434:	b8280000 	stmdalt	r8!, {}	; <UNPREDICTABLE>
    9438:	88080057 	stmdahi	r8, {r0, r1, r2, r4, r6}
    943c:	00000021 	andeq	r0, r0, r1, lsr #32
    9440:	560c2a00 	strpl	r2, [ip], -r0, lsl #20
    9444:	000c0800 	andeq	r0, ip, r0, lsl #16
    9448:	0a1a0000 	beq	689450 <_Min_Stack_Size+0x689050>
    944c:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    9450:	0100002e 	tsteq	r0, lr, lsr #32
    9454:	00e00247 	rsceq	r0, r0, r7, asr #4
    9458:	91020000 	mrsls	r0, (UNDEF: 2)
    945c:	3c280064 	stccc	0, cr0, [r8], #-400	; 0xfffffe70
    9460:	88080055 	stmdahi	r8, {r0, r2, r4, r6}
    9464:	28000021 	stmdacs	r0, {r0, r5}
    9468:	080055e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, lr}
    946c:	00002188 	andeq	r2, r0, r8, lsl #3
    9470:	00571228 	subseq	r1, r7, r8, lsr #4
    9474:	00218808 	eoreq	r8, r1, r8, lsl #16
    9478:	d41e0000 	ldrle	r0, [lr], #-0
    947c:	0100002e 	tsteq	r0, lr, lsr #32
    9480:	021a032a 	andseq	r0, sl, #-1476395008	; 0xa8000000
    9484:	583c0000 	ldmdapl	ip!, {}	; <UNPREDICTABLE>
    9488:	03fc0800 	mvnseq	r0, #0, 16
    948c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9490:	00000cc2 	andeq	r0, r0, r2, asr #25
    9494:	0029ba1f 	eoreq	fp, r9, pc, lsl sl
    9498:	032a0100 			; <UNDEFINED> instruction: 0x032a0100
    949c:	00000621 	andeq	r0, r0, r1, lsr #12
    94a0:	00006189 	andeq	r6, r0, r9, lsl #3
    94a4:	002c201f 	eoreq	r2, ip, pc, lsl r0
    94a8:	032a0100 			; <UNDEFINED> instruction: 0x032a0100
    94ac:	00000403 	andeq	r0, r0, r3, lsl #8
    94b0:	000061a7 	andeq	r6, r0, r7, lsr #3
    94b4:	002a271f 	eoreq	r2, sl, pc, lsl r7
    94b8:	032a0100 			; <UNDEFINED> instruction: 0x032a0100
    94bc:	00000403 	andeq	r0, r0, r3, lsl #8
    94c0:	00006266 	andeq	r6, r0, r6, ror #4
    94c4:	002d421f 	eoreq	r4, sp, pc, lsl r2
    94c8:	032a0100 			; <UNDEFINED> instruction: 0x032a0100
    94cc:	000000b8 	strheq	r0, [r0], -r8
    94d0:	0000629c 	muleq	r0, ip, r2
    94d4:	002c181f 	eoreq	r1, ip, pc, lsl r8
    94d8:	032a0100 			; <UNDEFINED> instruction: 0x032a0100
    94dc:	000000ce 	andeq	r0, r0, lr, asr #1
    94e0:	000062bd 			; <UNDEFINED> instruction: 0x000062bd
    94e4:	706d742c 	rsbvc	r7, sp, ip, lsr #8
    94e8:	032c0100 			; <UNDEFINED> instruction: 0x032c0100
    94ec:	000000ce 	andeq	r0, r0, lr, asr #1
    94f0:	000062dd 	ldrdeq	r6, [r0], -sp
    94f4:	00170e22 	andseq	r0, r7, r2, lsr #28
    94f8:	032c0100 			; <UNDEFINED> instruction: 0x032c0100
    94fc:	000000ce 	andeq	r0, r0, lr, asr #1
    9500:	00006312 	andeq	r6, r0, r2, lsl r3
    9504:	0027b52b 	eoreq	fp, r7, fp, lsr #10
    9508:	032e0100 			; <UNDEFINED> instruction: 0x032e0100
    950c:	000000ea 	andeq	r0, r0, sl, ror #1
    9510:	225a9102 	subscs	r9, sl, #-2147483648	; 0x80000000
    9514:	00000eec 	andeq	r0, r0, ip, ror #29
    9518:	ce033001 	cdpgt	0, 0, cr3, cr3, cr1, {0}
    951c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    9520:	22000063 	andcs	r0, r0, #99	; 0x63
    9524:	00002a16 	andeq	r2, r0, r6, lsl sl
    9528:	ce033201 	cdpgt	2, 0, cr3, cr3, cr1, {0}
    952c:	d4000000 	strle	r0, [r0], #-0
    9530:	22000063 	andcs	r0, r0, #99	; 0x63
    9534:	00002cd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9538:	1a033301 	bne	d6144 <_Min_Stack_Size+0xd5d44>
    953c:	f1000002 	cps	#2
    9540:	23000064 	movwcs	r0, #100	; 0x64
    9544:	00002c6b 	andeq	r2, r0, fp, ror #24
    9548:	8203fb01 	andhi	pc, r3, #1024	; 0x400
    954c:	24080058 	strcs	r0, [r8], #-88	; 0xffffffa8
    9550:	000005d3 	ldrdeq	r0, [r0], -r3
    9554:	080059e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, lr}
    9558:	00001410 	andeq	r1, r0, r0, lsl r4
    955c:	8d03e701 	stchi	7, cr14, [r3, #-4]
    9560:	2700000b 	strcs	r0, [r0, -fp]
    9564:	00000614 	andeq	r0, r0, r4, lsl r6
    9568:	00006587 	andeq	r6, r0, r7, lsl #11
    956c:	00060827 	andeq	r0, r6, r7, lsr #16
    9570:	00659a00 	rsbeq	r9, r5, r0, lsl #20
    9574:	05fc2700 	ldrbeq	r2, [ip, #1792]!	; 0x700
    9578:	65ad0000 	strvs	r0, [sp, #0]!
    957c:	f0270000 			; <UNDEFINED> instruction: 0xf0270000
    9580:	c1000005 	tstgt	r0, r5
    9584:	27000065 	strcs	r0, [r0, -r5, rrx]
    9588:	000005e4 	andeq	r0, r0, r4, ror #11
    958c:	000065d5 	ldrdeq	r6, [r0], -r5
    9590:	00143026 	andseq	r3, r4, r6, lsr #32
    9594:	000b8300 	andeq	r8, fp, r0, lsl #6
    9598:	05f02700 	ldrbeq	r2, [r0, #1792]!	; 0x700
    959c:	65e80000 	strbvs	r0, [r8, #0]!
    95a0:	fc270000 	stc2	0, cr0, [r7], #-0
    95a4:	08000005 	stmdaeq	r0, {r0, r2}
    95a8:	27000066 	strcs	r0, [r0, -r6, rrx]
    95ac:	00000608 	andeq	r0, r0, r8, lsl #12
    95b0:	00006628 	andeq	r6, r0, r8, lsr #12
    95b4:	00061427 	andeq	r1, r6, r7, lsr #8
    95b8:	00664600 	rsbeq	r4, r6, r0, lsl #12
    95bc:	05e42700 	strbeq	r2, [r4, #1792]!	; 0x700
    95c0:	66640000 	strbtvs	r0, [r4], -r0
    95c4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    95c8:	08005a4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, fp, ip, lr}
    95cc:	00002188 	andeq	r2, r0, r8, lsl #3
    95d0:	07852400 	streq	r2, [r5, r0, lsl #8]
    95d4:	59ee0000 	stmibpl	lr!, {}^	; <UNPREDICTABLE>
    95d8:	14480800 	strbne	r0, [r8], #-2048	; 0xfffff800
    95dc:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    95e0:	000c1b03 	andeq	r1, ip, r3, lsl #22
    95e4:	07ae2500 	streq	r2, [lr, r0, lsl #10]!
    95e8:	a2250000 	eorge	r0, r5, #0
    95ec:	25000007 	strcs	r0, [r0, #-7]
    95f0:	00000796 	muleq	r0, r6, r7
    95f4:	0005d329 	andeq	sp, r5, r9, lsr #6
    95f8:	0059ee00 	subseq	lr, r9, r0, lsl #28
    95fc:	00147008 	andseq	r7, r4, r8
    9600:	0a160100 	beq	589a08 <_Min_Stack_Size+0x589608>
    9604:	00061425 	andeq	r1, r6, r5, lsr #8
    9608:	06082500 	streq	r2, [r8], -r0, lsl #10
    960c:	fc250000 	stc2	0, cr0, [r5], #-0
    9610:	25000005 	strcs	r0, [r0, #-5]
    9614:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9618:	0005e425 	andeq	lr, r5, r5, lsr #8
    961c:	14902600 	ldrne	r2, [r0], #1536	; 0x600
    9620:	0c100000 	ldceq	0, cr0, [r0], {-0}
    9624:	f0270000 			; <UNDEFINED> instruction: 0xf0270000
    9628:	82000005 	andhi	r0, r0, #5
    962c:	27000066 	strcs	r0, [r0, -r6, rrx]
    9630:	000005fc 	strdeq	r0, [r0], -ip
    9634:	000066a4 	andeq	r6, r0, r4, lsr #13
    9638:	00060827 	andeq	r0, r6, r7, lsr #16
    963c:	0066c400 	rsbeq	ip, r6, r0, lsl #8
    9640:	06142700 	ldreq	r2, [r4], -r0, lsl #14
    9644:	66e20000 	strbtvs	r0, [r2], r0
    9648:	e4270000 	strt	r0, [r7], #-0
    964c:	00000005 	andeq	r0, r0, r5
    9650:	00000067 	andeq	r0, r0, r7, rrx
    9654:	005b4828 	subseq	r4, fp, r8, lsr #16
    9658:	00218808 	eoreq	r8, r1, r8, lsl #16
    965c:	2a000000 	bcs	9664 <_Min_Stack_Size+0x9264>
    9660:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
    9664:	00000016 	andeq	r0, r0, r6, lsl r0
    9668:	00000c38 	andeq	r0, r0, r8, lsr ip
    966c:	002eae2b 	eoreq	sl, lr, fp, lsr #28
    9670:	03f80100 	mvnseq	r0, #0, 2
    9674:	000000e0 	andeq	r0, r0, r0, ror #1
    9678:	005c9102 	subseq	r9, ip, r2, lsl #2
    967c:	0005d324 	andeq	sp, r5, r4, lsr #6
    9680:	005a1200 	subseq	r1, sl, r0, lsl #4
    9684:	0014a808 	andseq	sl, r4, r8, lsl #16
    9688:	03ce0100 	biceq	r0, lr, #0, 2
    968c:	00000ca6 	andeq	r0, r0, r6, lsr #25
    9690:	00061425 	andeq	r1, r6, r5, lsr #8
    9694:	06082500 	streq	r2, [r8], -r0, lsl #10
    9698:	fc250000 	stc2	0, cr0, [r5], #-0
    969c:	25000005 	strcs	r0, [r0, #-5]
    96a0:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    96a4:	0005e425 	andeq	lr, r5, r5, lsr #8
    96a8:	14c82600 	strbne	r2, [r8], #1536	; 0x600
    96ac:	0c9c0000 	ldceq	0, cr0, [ip], {0}
    96b0:	f0270000 			; <UNDEFINED> instruction: 0xf0270000
    96b4:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    96b8:	27000067 	strcs	r0, [r0, -r7, rrx]
    96bc:	000005fc 	strdeq	r0, [r0], -ip
    96c0:	0000671e 	andeq	r6, r0, lr, lsl r7
    96c4:	00060827 	andeq	r0, r6, r7, lsr #16
    96c8:	00673e00 	rsbeq	r3, r7, r0, lsl #28
    96cc:	06142700 	ldreq	r2, [r4], -r0, lsl #14
    96d0:	675c0000 	ldrbvs	r0, [ip, -r0]
    96d4:	e4270000 	strt	r0, [r7], #-0
    96d8:	7a000005 	bvc	96f4 <_Min_Stack_Size+0x92f4>
    96dc:	00000067 	andeq	r0, r0, r7, rrx
    96e0:	005baa28 	subseq	sl, fp, r8, lsr #20
    96e4:	00218808 	eoreq	r8, r1, r8, lsl #16
    96e8:	6c280000 	stcvs	0, cr0, [r8], #-0
    96ec:	88080058 	stmdahi	r8, {r3, r4, r6}
    96f0:	28000021 	stmdacs	r0, {r0, r5}
    96f4:	08005988 	stmdaeq	r0, {r3, r7, r8, fp, ip, lr}
    96f8:	00002188 	andeq	r2, r0, r8, lsl #3
    96fc:	005b0228 	subseq	r0, fp, r8, lsr #4
    9700:	00218808 	eoreq	r8, r1, r8, lsl #16
    9704:	8a1e0000 	bhi	78970c <_Min_Stack_Size+0x78930c>
    9708:	0100002e 	tsteq	r0, lr, lsr #32
    970c:	021a0266 	andseq	r0, sl, #1610612742	; 0x60000006
    9710:	5c380000 	ldcpl	0, cr0, [r8], #-0
    9714:	03520800 	cmpeq	r2, #0, 16
    9718:	9c010000 	stcls	0, cr0, [r1], {-0}
    971c:	00000e89 	andeq	r0, r0, r9, lsl #29
    9720:	0029ba1f 	eoreq	fp, r9, pc, lsl sl
    9724:	02660100 	rsbeq	r0, r6, #0, 2
    9728:	00000621 	andeq	r0, r0, r1, lsr #12
    972c:	00006798 	muleq	r0, r8, r7
    9730:	0021d71f 	eoreq	sp, r1, pc, lsl r7
    9734:	02660100 	rsbeq	r0, r6, #0, 2
    9738:	00000403 	andeq	r0, r0, r3, lsl #8
    973c:	000067e2 	andeq	r6, r0, r2, ror #15
    9740:	002d421f 	eoreq	r4, sp, pc, lsl r2
    9744:	02660100 	rsbeq	r0, r6, #0, 2
    9748:	000000b8 	strheq	r0, [r0], -r8
    974c:	00006842 	andeq	r6, r0, r2, asr #16
    9750:	002c181f 	eoreq	r1, ip, pc, lsl r8
    9754:	02660100 	rsbeq	r0, r6, #0, 2
    9758:	000000ce 	andeq	r0, r0, lr, asr #1
    975c:	00006895 	muleq	r0, r5, r8
    9760:	0001b52b 	andeq	fp, r1, fp, lsr #10
    9764:	02690100 	rsbeq	r0, r9, #0, 2
    9768:	000000ea 	andeq	r0, r0, sl, ror #1
    976c:	22669102 	rsbcs	r9, r6, #-2147483648	; 0x80000000
    9770:	00000eec 	andeq	r0, r0, ip, ror #29
    9774:	ce026b01 	vmlagt.f64	d6, d2, d1
    9778:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    977c:	22000068 	andcs	r0, r0, #104	; 0x68
    9780:	00002cd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9784:	1a026c01 	bne	a4790 <_Min_Stack_Size+0xa4390>
    9788:	0a000002 	beq	9798 <_Min_Stack_Size+0x9398>
    978c:	23000069 	movwcs	r0, #105	; 0x69
    9790:	00002c6b 	andeq	r2, r0, fp, ror #24
    9794:	7c031a01 	stcvc	10, cr1, [r3], {1}
    9798:	2408005c 	strcs	r0, [r8], #-92	; 0xffffffa4
    979c:	000005d3 	ldrdeq	r0, [r0], -r3
    97a0:	08005e3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, fp, ip, lr}
    97a4:	000014e0 	andeq	r1, r0, r0, ror #9
    97a8:	c502f801 	strgt	pc, [r2, #-2049]	; 0xfffff7ff
    97ac:	2500000d 	strcs	r0, [r0, #-13]
    97b0:	00000614 	andeq	r0, r0, r4, lsl r6
    97b4:	00060825 	andeq	r0, r6, r5, lsr #16
    97b8:	05fc2500 	ldrbeq	r2, [ip, #1280]!	; 0x500
    97bc:	f0250000 			; <UNDEFINED> instruction: 0xf0250000
    97c0:	25000005 	strcs	r0, [r0, #-5]
    97c4:	000005e4 	andeq	r0, r0, r4, ror #11
    97c8:	00150026 	andseq	r0, r5, r6, lsr #32
    97cc:	000dbb00 	andeq	fp, sp, r0, lsl #22
    97d0:	05f02700 	ldrbeq	r2, [r0, #1792]!	; 0x700
    97d4:	694d0000 	stmdbvs	sp, {}^	; <UNPREDICTABLE>
    97d8:	fc270000 	stc2	0, cr0, [r7], #-0
    97dc:	4d000005 	stcmi	0, cr0, [r0, #-20]	; 0xffffffec
    97e0:	27000069 	strcs	r0, [r0, -r9, rrx]
    97e4:	00000608 	andeq	r0, r0, r8, lsl #12
    97e8:	0000696d 	andeq	r6, r0, sp, ror #18
    97ec:	00061427 	andeq	r1, r6, r7, lsr #8
    97f0:	00698b00 	rsbeq	r8, r9, r0, lsl #22
    97f4:	05e42700 	strbeq	r2, [r4, #1792]!	; 0x700
    97f8:	69a90000 	stmibvs	r9!, {}	; <UNPREDICTABLE>
    97fc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9800:	08005e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, lr}
    9804:	00002188 	andeq	r2, r0, r8, lsl #3
    9808:	05d32400 	ldrbeq	r2, [r3, #1024]	; 0x400
    980c:	5eca0000 	cdppl	0, 12, cr0, cr10, cr0, {0}
    9810:	15180800 	ldrne	r0, [r8, #-2048]	; 0xfffff800
    9814:	e5010000 	str	r0, [r1, #-0]
    9818:	000e4702 	andeq	r4, lr, r2, lsl #14
    981c:	06142700 	ldreq	r2, [r4], -r0, lsl #14
    9820:	69c70000 	stmibvs	r7, {}^	; <UNPREDICTABLE>
    9824:	08270000 	stmdaeq	r7!, {}	; <UNPREDICTABLE>
    9828:	e5000006 	str	r0, [r0, #-6]
    982c:	27000069 	strcs	r0, [r0, -r9, rrx]
    9830:	000005fc 	strdeq	r0, [r0], -ip
    9834:	00006a03 	andeq	r6, r0, r3, lsl #20
    9838:	0005f027 	andeq	pc, r5, r7, lsr #32
    983c:	006a0300 	rsbeq	r0, sl, r0, lsl #6
    9840:	05e42700 	strbeq	r2, [r4, #1792]!	; 0x700
    9844:	6a230000 	bvs	8c984c <_Min_Stack_Size+0x8c944c>
    9848:	38260000 	stmdacc	r6!, {}	; <UNPREDICTABLE>
    984c:	3d000015 	stccc	0, cr0, [r0, #-84]	; 0xffffffac
    9850:	2700000e 	strcs	r0, [r0, -lr]
    9854:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9858:	00006a41 	andeq	r6, r0, r1, asr #20
    985c:	0005fc27 	andeq	pc, r5, r7, lsr #24
    9860:	006a4100 	rsbeq	r4, sl, r0, lsl #2
    9864:	06082700 	streq	r2, [r8], -r0, lsl #14
    9868:	6a610000 	bvs	1849870 <_Min_Stack_Size+0x1849470>
    986c:	14270000 	strtne	r0, [r7], #-0
    9870:	7f000006 	svcvc	0x00000006
    9874:	2700006a 	strcs	r0, [r0, -sl, rrx]
    9878:	000005e4 	andeq	r0, r0, r4, ror #11
    987c:	00006a9d 	muleq	r0, sp, sl
    9880:	5f022800 	svcpl	0x00022800
    9884:	21880800 	orrcs	r0, r8, r0, lsl #16
    9888:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    988c:	08005c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, lr}
    9890:	00002188 	andeq	r2, r0, r8, lsl #3
    9894:	005ca42d 	subseq	sl, ip, sp, lsr #8
    9898:	000a3608 	andeq	r3, sl, r8, lsl #12
    989c:	000e7600 	andeq	r7, lr, r0, lsl #12
    98a0:	53012100 	movwpl	r2, #4352	; 0x1100
    98a4:	21007802 	tstcs	r0, r2, lsl #16
    98a8:	76025201 	strvc	r5, [r2], -r1, lsl #4
    98ac:	51012100 	mrspl	r2, (UNDEF: 17)
    98b0:	21007602 	tstcs	r0, r2, lsl #12
    98b4:	74025001 	strvc	r5, [r2], #-1
    98b8:	10280000 	eorne	r0, r8, r0
    98bc:	8808005d 	stmdahi	r8, {r0, r2, r3, r4, r6}
    98c0:	28000021 	stmdacs	r0, {r0, r5}
    98c4:	08005dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, ip, lr}
    98c8:	00002188 	andeq	r2, r0, r8, lsl #3
    98cc:	2e9a1e00 	cdpcs	14, 9, cr1, cr10, cr0, {0}
    98d0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    98d4:	00021a04 	andeq	r1, r2, r4, lsl #20
    98d8:	005f8c00 	subseq	r8, pc, r0, lsl #24
    98dc:	0000c808 	andeq	ip, r0, r8, lsl #16
    98e0:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    98e4:	1f00000e 	svcne	0x0000000e
    98e8:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    98ec:	21040901 	tstcs	r4, r1, lsl #18
    98f0:	bb000006 	bllt	9910 <_Min_Stack_Size+0x9510>
    98f4:	1f00006a 	svcne	0x0000006a
    98f8:	000021d7 	ldrdeq	r2, [r0], -r7
    98fc:	03040901 	movweq	r0, #18689	; 0x4901
    9900:	21000004 	tstcs	r0, r4
    9904:	1f00006b 	svcne	0x0000006b
    9908:	00002d42 	andeq	r2, r0, r2, asr #26
    990c:	b8040901 	stmdalt	r4, {r0, r8, fp}
    9910:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    9914:	2200006b 	andcs	r0, r0, #107	; 0x6b
    9918:	00002cd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    991c:	1a040b01 	bne	10c528 <_Min_Stack_Size+0x10c128>
    9920:	a8000002 	stmdage	r0, {r1}
    9924:	2300006b 	movwcs	r0, #107	; 0x6b
    9928:	00002c6b 	andeq	r2, r0, fp, ror #24
    992c:	ac045601 	stcge	6, cr5, [r4], {1}
    9930:	0008005f 	andeq	r0, r8, pc, asr r0
    9934:	002dc21e 	eoreq	ip, sp, lr, lsl r2
    9938:	04630100 	strbteq	r0, [r3], #-256	; 0xffffff00
    993c:	0000021a 	andeq	r0, r0, sl, lsl r2
    9940:	08006054 	stmdaeq	r0, {r2, r4, r6, sp, lr}
    9944:	0000016c 	andeq	r0, r0, ip, ror #2
    9948:	10069c01 	andne	r9, r6, r1, lsl #24
    994c:	ba1f0000 	blt	7c9954 <_Min_Stack_Size+0x7c9554>
    9950:	01000029 	tsteq	r0, r9, lsr #32
    9954:	06210463 	strteq	r0, [r1], -r3, ror #8
    9958:	6bd30000 	blvs	ff4c9960 <_estack+0xdf499960>
    995c:	d71f0000 	ldrle	r0, [pc, -r0]
    9960:	01000021 	tsteq	r0, r1, lsr #32
    9964:	04030463 	streq	r0, [r3], #-1123	; 0xfffffb9d
    9968:	6bf10000 	blvs	ffc49970 <_estack+0xdfc19970>
    996c:	421f0000 	andsmi	r0, pc, #0
    9970:	0100002d 	tsteq	r0, sp, lsr #32
    9974:	00b80463 	adcseq	r0, r8, r3, ror #8
    9978:	6c710000 	ldclvs	0, cr0, [r1], #-0
    997c:	d2220000 	eorle	r0, r2, #0
    9980:	0100002c 	tsteq	r0, ip, lsr #32
    9984:	021a0465 	andseq	r0, sl, #1694498816	; 0x65000000
    9988:	6cf10000 	ldclvs	0, cr0, [r1]
    998c:	6b230000 	blvs	8c9994 <_Min_Stack_Size+0x8c9594>
    9990:	0100002c 	tsteq	r0, ip, lsr #32
    9994:	607e04b0 	ldrhtvs	r0, [lr], #-64	; 0xffffffc0
    9998:	27290800 	strcs	r0, [r9, -r0, lsl #16]!
    999c:	88000006 	stmdahi	r0, {r1, r2}
    99a0:	50080060 	andpl	r0, r8, r0, rrx
    99a4:	01000015 	tsteq	r0, r5, lsl r0
    99a8:	5c27046b 	cfstrspl	mvf0, [r7], #-428	; 0xfffffe54
    99ac:	1c000006 	stcne	0, cr0, [r0], {6}
    99b0:	2700006d 	strcs	r0, [r0, -sp, rrx]
    99b4:	00000650 	andeq	r0, r0, r0, asr r6
    99b8:	00006d52 	andeq	r6, r0, r2, asr sp
    99bc:	00064427 	andeq	r4, r6, r7, lsr #8
    99c0:	006d5200 	rsbeq	r5, sp, r0, lsl #4
    99c4:	06382700 	ldrteq	r2, [r8], -r0, lsl #14
    99c8:	6d880000 	stcvs	0, cr0, [r8]
    99cc:	502e0000 	eorpl	r0, lr, r0
    99d0:	2f000015 	svccs	0x00000015
    99d4:	00000668 	andeq	r0, r0, r8, ror #12
    99d8:	00006da6 	andeq	r6, r0, r6, lsr #27
    99dc:	0006742f 	andeq	r7, r6, pc, lsr #8
    99e0:	006da600 	rsbeq	sl, sp, r0, lsl #12
    99e4:	06802f00 	streq	r2, [r0], r0, lsl #30
    99e8:	6da60000 	stcvs	0, cr0, [r6]
    99ec:	8c300000 	ldchi	0, cr0, [r0], #-0
    99f0:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    99f4:	00001580 	andeq	r1, r0, r0, lsl #11
    99f8:	00065c27 	andeq	r5, r6, r7, lsr #24
    99fc:	006dc600 	rsbeq	ip, sp, r0, lsl #12
    9a00:	06502700 	ldrbeq	r2, [r0], -r0, lsl #14
    9a04:	6dfc0000 	ldclvs	0, cr0, [ip]
    9a08:	44270000 	strtmi	r0, [r7], #-0
    9a0c:	fc000006 	stc2	0, cr0, [r0], {6}
    9a10:	2700006d 	strcs	r0, [r0, -sp, rrx]
    9a14:	00000638 	andeq	r0, r0, r8, lsr r6
    9a18:	00006e32 	andeq	r6, r0, r2, lsr lr
    9a1c:	0015802e 	andseq	r8, r5, lr, lsr #32
    9a20:	06682f00 	strbteq	r2, [r8], -r0, lsl #30
    9a24:	6e500000 	cdpvs	0, 5, cr0, cr0, cr0, {0}
    9a28:	742f0000 	strtvc	r0, [pc], #-0	; 9a30 <_Min_Stack_Size+0x9630>
    9a2c:	6e000006 	cdpvs	0, 0, cr0, cr0, cr6, {0}
    9a30:	2f00006e 	svccs	0x0000006e
    9a34:	00000680 	andeq	r0, r0, r0, lsl #13
    9a38:	00006e92 	muleq	r0, r2, lr
    9a3c:	00068c31 	andeq	r8, r6, r1, lsr ip
    9a40:	00619000 	rsbeq	r9, r1, r0
    9a44:	00000008 	andeq	r0, r0, r8
    9a48:	27320000 	ldrcs	r0, [r2, -r0]!
    9a4c:	c0000006 	andgt	r0, r0, r6
    9a50:	d8080061 	stmdale	r8, {r0, r5, r6}
    9a54:	01000000 	mrseq	r0, (UNDEF: 0)
    9a58:	0010a99c 	mulseq	r0, ip, r9
    9a5c:	06382700 	ldrteq	r2, [r8], -r0, lsl #14
    9a60:	6ea50000 	cdpvs	0, 10, cr0, cr5, cr0, {0}
    9a64:	44270000 	strtmi	r0, [r7], #-0
    9a68:	f5000006 			; <UNDEFINED> instruction: 0xf5000006
    9a6c:	2700006e 	strcs	r0, [r0, -lr, rrx]
    9a70:	00000650 	andeq	r0, r0, r0, asr r6
    9a74:	00006f44 	andeq	r6, r0, r4, asr #30
    9a78:	00065c27 	andeq	r5, r6, r7, lsr #24
    9a7c:	006faa00 	rsbeq	sl, pc, r0, lsl #20
    9a80:	06683300 	strbteq	r3, [r8], -r0, lsl #6
    9a84:	33000000 	movwcc	r0, #0
    9a88:	00000674 	andeq	r0, r0, r4, ror r6
    9a8c:	06803300 	streq	r3, [r0], r0, lsl #6
    9a90:	30000000 	andcc	r0, r0, r0
    9a94:	0000068c 	andeq	r0, r0, ip, lsl #13
    9a98:	0015982e 	andseq	r9, r5, lr, lsr #16
    9a9c:	065c2700 	ldrbeq	r2, [ip], -r0, lsl #14
    9aa0:	6ff90000 	svcvs	0x00f90000
    9aa4:	50270000 	eorpl	r0, r7, r0
    9aa8:	48000006 	stmdami	r0, {r1, r2}
    9aac:	27000070 	smlsdxcs	r0, r0, r0, r0
    9ab0:	00000644 	andeq	r0, r0, r4, asr #12
    9ab4:	000070ae 	andeq	r7, r0, lr, lsr #1
    9ab8:	00063827 	andeq	r3, r6, r7, lsr #16
    9abc:	0070fd00 	rsbseq	pc, r0, r0, lsl #26
    9ac0:	15982e00 	ldrne	r2, [r8, #3584]	; 0xe00
    9ac4:	682f0000 	stmdavs	pc!, {}	; <UNPREDICTABLE>
    9ac8:	29000006 	stmdbcs	r0, {r1, r2}
    9acc:	2f000071 	svccs	0x00000071
    9ad0:	00000674 	andeq	r0, r0, r4, ror r6
    9ad4:	00007152 	andeq	r7, r0, r2, asr r1
    9ad8:	0006802f 	andeq	r8, r6, pc, lsr #32
    9adc:	0071ae00 	rsbseq	sl, r1, r0, lsl #28
    9ae0:	068c3100 	streq	r3, [ip], r0, lsl #2
    9ae4:	61e60000 	mvnvs	r0, r0
    9ae8:	00000800 	andeq	r0, r0, r0, lsl #16
    9aec:	29041e00 	stmdbcs	r4, {r9, sl, fp, ip}
    9af0:	15010000 	strne	r0, [r1, #-0]
    9af4:	00021a05 	andeq	r1, r2, r5, lsl #20
    9af8:	00629800 	rsbeq	r9, r2, r0, lsl #16
    9afc:	0000c808 	andeq	ip, r0, r8, lsl #16
    9b00:	199c0100 	ldmibne	ip, {r8}
    9b04:	1f000011 	svcne	0x00000011
    9b08:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    9b0c:	21051501 	tstcs	r5, r1, lsl #10
    9b10:	c1000006 	tstgt	r0, r6
    9b14:	1f000071 	svcne	0x00000071
    9b18:	000021d7 	ldrdeq	r2, [r0], -r7
    9b1c:	03051501 	movweq	r1, #21761	; 0x5501
    9b20:	f5000004 			; <UNDEFINED> instruction: 0xf5000004
    9b24:	1f000071 	svcne	0x00000071
    9b28:	00002d42 	andeq	r2, r0, r2, asr #26
    9b2c:	b8051501 	stmdalt	r5, {r0, r8, sl, ip}
    9b30:	3a000000 	bcc	9b38 <_Min_Stack_Size+0x9738>
    9b34:	22000072 	andcs	r0, r0, #114	; 0x72
    9b38:	00002cd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9b3c:	1a051701 	bne	14f748 <_Min_Stack_Size+0x14f348>
    9b40:	8c000002 	stchi	0, cr0, [r0], {2}
    9b44:	23000072 	movwcs	r0, #114	; 0x72
    9b48:	00002c6b 	andeq	r2, r0, fp, ror #24
    9b4c:	b6056301 	strlt	r6, [r5], -r1, lsl #6
    9b50:	28080062 	stmdacs	r8, {r1, r5, r6}
    9b54:	0800631c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp, lr}
    9b58:	00002193 	muleq	r0, r3, r1
    9b5c:	2ba31e00 	blcs	fe8d1364 <_estack+0xde8a1364>
    9b60:	72010000 	andvc	r0, r1, #0
    9b64:	00021a05 	andeq	r1, r2, r5, lsl #20
    9b68:	00636000 	rsbeq	r6, r3, r0
    9b6c:	0001c408 	andeq	ip, r1, r8, lsl #8
    9b70:	609c0100 	addsvs	r0, ip, r0, lsl #2
    9b74:	1f000012 	svcne	0x00000012
    9b78:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    9b7c:	21057201 	tstcs	r5, r1, lsl #4
    9b80:	b7000006 	strlt	r0, [r0, -r6]
    9b84:	1f000072 	svcne	0x00000072
    9b88:	000021d7 	ldrdeq	r2, [r0], -r7
    9b8c:	03057201 	movweq	r7, #20993	; 0x5201
    9b90:	22000004 	andcs	r0, r0, #4
    9b94:	1f000073 	svcne	0x00000073
    9b98:	00002d42 	andeq	r2, r0, r2, asr #26
    9b9c:	b8057201 	stmdalt	r5, {r0, r9, ip, sp, lr}
    9ba0:	40000000 	andmi	r0, r0, r0
    9ba4:	22000073 	andcs	r0, r0, #115	; 0x73
    9ba8:	00002cd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9bac:	1a057401 	bne	166bb8 <_Min_Stack_Size+0x1667b8>
    9bb0:	e5000002 	str	r0, [r0, #-2]
    9bb4:	23000073 	movwcs	r0, #115	; 0x73
    9bb8:	00002c6b 	andeq	r2, r0, fp, ror #24
    9bbc:	8c05c301 	stchi	3, cr12, [r5], {1}
    9bc0:	24080063 	strcs	r0, [r8], #-99	; 0xffffff9d
    9bc4:	00000695 	muleq	r0, r5, r6
    9bc8:	08006394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp, lr}
    9bcc:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
    9bd0:	4f057a01 	svcmi	0x00057a01
    9bd4:	27000012 	smladcs	r0, r2, r0, r0
    9bd8:	000006ca 	andeq	r0, r0, sl, asr #13
    9bdc:	00007410 	andeq	r7, r0, r0, lsl r4
    9be0:	0006be27 	andeq	fp, r6, r7, lsr #28
    9be4:	00746000 	rsbseq	r6, r4, r0
    9be8:	06b22700 	ldrteq	r2, [r2], r0, lsl #14
    9bec:	74600000 	strbtvc	r0, [r0], #-0
    9bf0:	a6270000 	strtge	r0, [r7], -r0
    9bf4:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
    9bf8:	2e000074 	mcrcs	0, 0, r0, cr0, cr4, {3}
    9bfc:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
    9c00:	0006d62f 	andeq	sp, r6, pc, lsr #12
    9c04:	0074bd00 	rsbseq	fp, r4, r0, lsl #26
    9c08:	06e22f00 	strbteq	r2, [r2], r0, lsl #30
    9c0c:	74bd0000 	ldrtvc	r0, [sp], #0
    9c10:	ee2f0000 	cdp	0, 2, cr0, cr15, cr0, {0}
    9c14:	bd000006 	stclt	0, cr0, [r0, #-24]	; 0xffffffe8
    9c18:	30000074 	andcc	r0, r0, r4, ror r0
    9c1c:	000006fa 	strdeq	r0, [r0], -sl
    9c20:	0015d82e 	andseq	sp, r5, lr, lsr #16
    9c24:	06ca2700 	strbeq	r2, [sl], r0, lsl #14
    9c28:	74dd0000 	ldrbvc	r0, [sp], #0
    9c2c:	be270000 	cdplt	0, 2, cr0, cr7, cr0, {0}
    9c30:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    9c34:	27000075 	smlsdxcs	r0, r5, r0, r0
    9c38:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    9c3c:	0000752d 	andeq	r7, r0, sp, lsr #10
    9c40:	0006a627 	andeq	sl, r6, r7, lsr #12
    9c44:	00754b00 	rsbseq	r4, r5, r0, lsl #22
    9c48:	15d82e00 	ldrbne	r2, [r8, #3584]	; 0xe00
    9c4c:	d62f0000 	strtle	r0, [pc], -r0
    9c50:	8a000006 	bhi	9c70 <_Min_Stack_Size+0x9870>
    9c54:	2f000075 	svccs	0x00000075
    9c58:	000006e2 	andeq	r0, r0, r2, ror #13
    9c5c:	000075a8 	andeq	r7, r0, r8, lsr #11
    9c60:	0006ee2f 	andeq	lr, r6, pc, lsr #28
    9c64:	0075cc00 	rsbseq	ip, r5, r0, lsl #24
    9c68:	06fa3100 	ldrbteq	r3, [sl], r0, lsl #2
    9c6c:	64f60000 	ldrbtvs	r0, [r6], #0
    9c70:	1e2d0800 	cdpne	8, 2, cr0, cr13, cr0, {0}
    9c74:	93080064 	movwls	r0, #32868	; 0x8064
    9c78:	42000021 	andmi	r0, r0, #33	; 0x21
    9c7c:	21000012 	tstcs	r0, r2, lsl r0
    9c80:	75025201 	strvc	r5, [r2, #-513]	; 0xfffffdff
    9c84:	3e280000 	cdpcc	0, 2, cr0, cr8, cr0, {0}
    9c88:	93080064 	movwls	r0, #32868	; 0x8064
    9c8c:	00000021 	andeq	r0, r0, r1, lsr #32
    9c90:	20000000 	andcs	r0, r0, r0
    9c94:	080064be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, sp, lr}
    9c98:	00002193 	muleq	r0, r3, r1
    9c9c:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
    9ca0:	00000075 	andeq	r0, r0, r5, ror r0
    9ca4:	00069532 	andeq	r9, r6, r2, lsr r5
    9ca8:	00652400 	rsbeq	r2, r5, r0, lsl #8
    9cac:	00011408 	andeq	r1, r1, r8, lsl #8
    9cb0:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    9cb4:	27000013 	smladcs	r0, r3, r0, r0
    9cb8:	000006a6 	andeq	r0, r0, r6, lsr #13
    9cbc:	000075df 	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
    9cc0:	0006b227 	andeq	fp, r6, r7, lsr #4
    9cc4:	0075fd00 	rsbseq	pc, r5, r0, lsl #26
    9cc8:	06be2700 	ldrteq	r2, [lr], r0, lsl #14
    9ccc:	765a0000 	ldrbvc	r0, [sl], -r0
    9cd0:	ca270000 	bgt	9c9cd8 <_Min_Stack_Size+0x9c98d8>
    9cd4:	9f000006 	svcls	0x00000006
    9cd8:	33000076 	movwcc	r0, #118	; 0x76
    9cdc:	000006d6 	ldrdeq	r0, [r0], -r6
    9ce0:	06e23300 	strbteq	r3, [r2], r0, lsl #6
    9ce4:	33000000 	movwcc	r0, #0
    9ce8:	000006ee 	andeq	r0, r0, lr, ror #13
    9cec:	06fa3000 	ldrbteq	r3, [sl], r0
    9cf0:	f02e0000 			; <UNDEFINED> instruction: 0xf02e0000
    9cf4:	27000015 	smladcs	r0, r5, r0, r0
    9cf8:	000006ca 	andeq	r0, r0, sl, asr #13
    9cfc:	00007715 	andeq	r7, r0, r5, lsl r7
    9d00:	0006be27 	andeq	fp, r6, r7, lsr #28
    9d04:	00778b00 	rsbseq	r8, r7, r0, lsl #22
    9d08:	06b22700 	ldrteq	r2, [r2], r0, lsl #14
    9d0c:	77d00000 	ldrbvc	r0, [r0, r0]
    9d10:	a6270000 	strtge	r0, [r7], -r0
    9d14:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    9d18:	2e000078 	mcrcs	0, 0, r0, cr0, cr8, {3}
    9d1c:	000015f0 	strdeq	r1, [r0], -r0
    9d20:	0006d62f 	andeq	sp, r6, pc, lsr #12
    9d24:	00784b00 	rsbseq	r4, r8, r0, lsl #22
    9d28:	06e22f00 	strbteq	r2, [r2], r0, lsl #30
    9d2c:	78740000 	ldmdavc	r4!, {}^	; <UNPREDICTABLE>
    9d30:	ee2f0000 	cdp	0, 2, cr0, cr15, cr0, {0}
    9d34:	92000006 	andls	r0, r0, #6
    9d38:	31000078 	tstcc	r0, r8, ror r0
    9d3c:	000006fa 	strdeq	r0, [r0], -sl
    9d40:	0800654a 	stmdaeq	r0, {r1, r3, r6, r8, sl, sp, lr}
    9d44:	0065c028 	rsbeq	ip, r5, r8, lsr #32
    9d48:	00219308 	eoreq	r9, r1, r8, lsl #6
    9d4c:	65e02800 	strbvs	r2, [r0, #2048]!	; 0x800
    9d50:	21930800 	orrscs	r0, r3, r0, lsl #16
    9d54:	00000000 	andeq	r0, r0, r0
    9d58:	2d121e00 	ldccs	14, cr1, [r2, #-0]
    9d5c:	44010000 	strmi	r0, [r1], #-0
    9d60:	00021a06 	andeq	r1, r2, r6, lsl #20
    9d64:	00663800 	rsbeq	r3, r6, r0, lsl #16
    9d68:	00002208 	andeq	r2, r0, r8, lsl #4
    9d6c:	409c0100 	addsmi	r0, ip, r0, lsl #2
    9d70:	1f000013 	svcne	0x00000013
    9d74:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    9d78:	21064401 	tstcs	r6, r1, lsl #8
    9d7c:	b0000006 	andlt	r0, r0, r6
    9d80:	00000078 	andeq	r0, r0, r8, ror r0
    9d84:	002e471e 	eoreq	r4, lr, lr, lsl r7
    9d88:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    9d8c:	0000021a 	andeq	r0, r0, sl, lsl r2
    9d90:	0800665c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp, lr}
    9d94:	00000022 	andeq	r0, r0, r2, lsr #32
    9d98:	136b9c01 	cmnne	fp, #256	; 0x100
    9d9c:	ba1f0000 	blt	7c9da4 <_Min_Stack_Size+0x7c99a4>
    9da0:	01000029 	tsteq	r0, r9, lsr #32
    9da4:	06210658 			; <UNDEFINED> instruction: 0x06210658
    9da8:	78e40000 	stmiavc	r4!, {}^	; <UNPREDICTABLE>
    9dac:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9db0:	00002d8a 	andeq	r2, r0, sl, lsl #27
    9db4:	1a066c01 	bne	1a4dc0 <_Min_Stack_Size+0x1a49c0>
    9db8:	80000002 	andhi	r0, r0, r2
    9dbc:	28080066 	stmdacs	r8, {r1, r2, r5, r6}
    9dc0:	01000000 	mrseq	r0, (UNDEF: 0)
    9dc4:	0013a89c 	mulseq	r3, ip, r8
    9dc8:	29ba1f00 	ldmibcs	sl!, {r8, r9, sl, fp, ip}
    9dcc:	6c010000 	stcvs	0, cr0, [r1], {-0}
    9dd0:	00062106 	andeq	r2, r6, r6, lsl #2
    9dd4:	00791800 	rsbseq	r1, r9, r0, lsl #16
    9dd8:	668c2800 	strvs	r2, [ip], r0, lsl #16
    9ddc:	21b80800 			; <UNDEFINED> instruction: 0x21b80800
    9de0:	94280000 	strtls	r0, [r8], #-0
    9de4:	b8080066 	stmdalt	r8, {r1, r2, r5, r6}
    9de8:	00000021 	andeq	r0, r0, r1, lsr #32
    9dec:	002d471c 	eoreq	r4, sp, ip, lsl r7
    9df0:	06eb0100 	strbteq	r0, [fp], r0, lsl #2
    9df4:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
    9df8:	00000002 	andeq	r0, r0, r2
    9dfc:	13cd9c01 	bicne	r9, sp, #256	; 0x100
    9e00:	ba1d0000 	blt	749e08 <_Min_Stack_Size+0x749a08>
    9e04:	01000029 	tsteq	r0, r9, lsr #32
    9e08:	062106eb 	strteq	r0, [r1], -fp, ror #13
    9e0c:	50010000 	andpl	r0, r1, r0
    9e10:	28ed1c00 	stmiacs	sp!, {sl, fp, ip}^
    9e14:	fa010000 	blx	49e1c <_Min_Stack_Size+0x49a1c>
    9e18:	0066ac06 	rsbeq	sl, r6, r6, lsl #24
    9e1c:	00000208 	andeq	r0, r0, r8, lsl #4
    9e20:	f29c0100 	vaddw.s16	q0, q6, d0
    9e24:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    9e28:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    9e2c:	2106fa01 	tstcs	r6, r1, lsl #20	; <UNPREDICTABLE>
    9e30:	01000006 	tsteq	r0, r6
    9e34:	fb1c0050 	blx	709f7e <_Min_Stack_Size+0x709b7e>
    9e38:	0100002a 	tsteq	r0, sl, lsr #32
    9e3c:	66b00709 	ldrtvs	r0, [r0], r9, lsl #14
    9e40:	00020800 	andeq	r0, r2, r0, lsl #16
    9e44:	9c010000 	stcls	0, cr0, [r1], {-0}
    9e48:	00001417 	andeq	r1, r0, r7, lsl r4
    9e4c:	0029ba1d 	eoreq	fp, r9, sp, lsl sl
    9e50:	07090100 	streq	r0, [r9, -r0, lsl #2]
    9e54:	00000621 	andeq	r0, r0, r1, lsr #12
    9e58:	1c005001 	stcne	0, cr5, [r0], {1}
    9e5c:	00002d23 	andeq	r2, r0, r3, lsr #26
    9e60:	b4071801 	strlt	r1, [r7], #-2049	; 0xfffff7ff
    9e64:	02080066 	andeq	r0, r8, #102	; 0x66
    9e68:	01000000 	mrseq	r0, (UNDEF: 0)
    9e6c:	00143c9c 	mulseq	r4, ip, ip
    9e70:	29ba1d00 	ldmibcs	sl!, {r8, sl, fp, ip}
    9e74:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    9e78:	00062107 	andeq	r2, r6, r7, lsl #2
    9e7c:	00500100 	subseq	r0, r0, r0, lsl #2
    9e80:	0028bb34 	eoreq	fp, r8, r4, lsr fp
    9e84:	083d0100 	ldmdaeq	sp!, {r8}
    9e88:	080066b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, sp, lr}
    9e8c:	0000000a 	andeq	r0, r0, sl
    9e90:	147c9c01 	ldrbtne	r9, [ip], #-3073	; 0xfffff3ff
    9e94:	541f0000 	ldrpl	r0, [pc], #-0	; 9e9c <_Min_Stack_Size+0x9a9c>
    9e98:	0100001b 	tsteq	r0, fp, lsl r0
    9e9c:	0409083d 	streq	r0, [r9], #-2109	; 0xfffff7c3
    9ea0:	79360000 	ldmdbvc	r6!, {}	; <UNPREDICTABLE>
    9ea4:	ba220000 	blt	889eac <_Min_Stack_Size+0x889aac>
    9ea8:	01000029 	tsteq	r0, r9, lsr #32
    9eac:	0621083f 			; <UNDEFINED> instruction: 0x0621083f
    9eb0:	79570000 	ldmdbvc	r7, {}^	; <UNPREDICTABLE>
    9eb4:	c0280000 	eorgt	r0, r8, r0
    9eb8:	17080066 	strne	r0, [r8, -r6, rrx]
    9ebc:	00000014 	andeq	r0, r0, r4, lsl r0
    9ec0:	0029761c 	eoreq	r7, r9, ip, lsl r6
    9ec4:	07270100 	streq	r0, [r7, -r0, lsl #2]!
    9ec8:	080066c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, sp, lr}
    9ecc:	00000002 	andeq	r0, r0, r2
    9ed0:	14a19c01 	strtne	r9, [r1], #3073	; 0xc01
    9ed4:	ba1d0000 	blt	749edc <_Min_Stack_Size+0x749adc>
    9ed8:	01000029 	tsteq	r0, r9, lsr #32
    9edc:	06210727 	strteq	r0, [r1], -r7, lsr #14
    9ee0:	50010000 	andpl	r0, r1, r0
    9ee4:	29193400 	ldmdbcs	r9, {sl, ip, sp}
    9ee8:	4a010000 	bmi	49ef0 <_Min_Stack_Size+0x49af0>
    9eec:	0066c808 	rsbeq	ip, r6, r8, lsl #16
    9ef0:	00000a08 	andeq	r0, r0, r8, lsl #20
    9ef4:	e19c0100 	orrs	r0, ip, r0, lsl #2
    9ef8:	1f000014 	svcne	0x00000014
    9efc:	00001b54 	andeq	r1, r0, r4, asr fp
    9f00:	09084a01 	stmdbeq	r8, {r0, r9, fp, lr}
    9f04:	7a000004 	bvc	9f1c <_Min_Stack_Size+0x9b1c>
    9f08:	22000079 	andcs	r0, r0, #121	; 0x79
    9f0c:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    9f10:	21084c01 	tstcs	r8, r1, lsl #24
    9f14:	9b000006 	blls	9f34 <_Min_Stack_Size+0x9b34>
    9f18:	28000079 	stmdacs	r0, {r0, r3, r4, r5, r6}
    9f1c:	080066d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp, lr}
    9f20:	0000147c 	andeq	r1, r0, ip, ror r4
    9f24:	2ade1c00 	bcs	ff790f2c <_estack+0xdf760f2c>
    9f28:	36010000 	strcc	r0, [r1], -r0
    9f2c:	0066d407 	rsbeq	sp, r6, r7, lsl #8
    9f30:	00000208 	andeq	r0, r0, r8, lsl #4
    9f34:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    9f38:	1d000015 	stcne	0, cr0, [r0, #-84]	; 0xffffffac
    9f3c:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    9f40:	21073601 	tstcs	r7, r1, lsl #12
    9f44:	01000006 	tsteq	r0, r6
    9f48:	41340050 	teqmi	r4, r0, asr r0
    9f4c:	01000029 	tsteq	r0, r9, lsr #32
    9f50:	66d80857 			; <UNDEFINED> instruction: 0x66d80857
    9f54:	000a0800 	andeq	r0, sl, r0, lsl #16
    9f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f5c:	00001546 	andeq	r1, r0, r6, asr #10
    9f60:	001b541f 	andseq	r5, fp, pc, lsl r4
    9f64:	08570100 	ldmdaeq	r7, {r8}^
    9f68:	00000409 	andeq	r0, r0, r9, lsl #8
    9f6c:	000079be 			; <UNDEFINED> instruction: 0x000079be
    9f70:	0029ba22 	eoreq	fp, r9, r2, lsr #20
    9f74:	08590100 	ldmdaeq	r9, {r8}^
    9f78:	00000621 	andeq	r0, r0, r1, lsr #12
    9f7c:	000079df 	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
    9f80:	0066e028 	rsbeq	lr, r6, r8, lsr #32
    9f84:	0014e108 	andseq	lr, r4, r8, lsl #2
    9f88:	ec1c0000 	ldc	0, cr0, [ip], {-0}
    9f8c:	0100002b 	tsteq	r0, fp, lsr #32
    9f90:	66e40745 	strbtvs	r0, [r4], r5, asr #14
    9f94:	00020800 	andeq	r0, r2, r0, lsl #16
    9f98:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f9c:	0000156b 	andeq	r1, r0, fp, ror #10
    9fa0:	0029ba1d 	eoreq	fp, r9, sp, lsl sl
    9fa4:	07450100 	strbeq	r0, [r5, -r0, lsl #2]
    9fa8:	00000621 	andeq	r0, r0, r1, lsr #12
    9fac:	34005001 	strcc	r5, [r0], #-1
    9fb0:	00002e68 	andeq	r2, r0, r8, ror #28
    9fb4:	e80a9f01 	stmda	sl, {r0, r8, r9, sl, fp, ip, pc}
    9fb8:	ec080066 	stc	0, cr0, [r8], {102}	; 0x66
    9fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    9fc0:	0016899c 	mulseq	r6, ip, r9
    9fc4:	29ba1f00 	ldmibcs	sl!, {r8, r9, sl, fp, ip}
    9fc8:	9f010000 	svcls	0x00010000
    9fcc:	0006210a 	andeq	r2, r6, sl, lsl #2
    9fd0:	007a0200 	rsbseq	r0, sl, r0, lsl #4
    9fd4:	0eec2200 	cdpeq	2, 14, cr2, cr12, cr0, {0}
    9fd8:	a1010000 	mrsge	r0, (UNDEF: 1)
    9fdc:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    9fe0:	007a4c00 	rsbseq	r4, sl, r0, lsl #24
    9fe4:	18fe2b00 	ldmne	lr!, {r8, r9, fp, sp}^
    9fe8:	a2010000 	andge	r0, r1, #0
    9fec:	0000e00a 	andeq	lr, r0, sl
    9ff0:	68910200 	ldmvs	r1, {r9}
    9ff4:	00078524 	andeq	r8, r7, r4, lsr #10
    9ff8:	00672c00 	rsbeq	r2, r7, r0, lsl #24
    9ffc:	00160808 	andseq	r0, r6, r8, lsl #16
    a000:	0ab60100 	beq	fed8a408 <_estack+0xded5a408>
    a004:	00001645 	andeq	r1, r0, r5, asr #12
    a008:	0007a235 	andeq	sl, r7, r5, lsr r2
    a00c:	ae366400 	cfabssge	mvf6, mvf6
    a010:	01000007 	tsteq	r0, r7
    a014:	07962755 			; <UNDEFINED> instruction: 0x07962755
    a018:	7a760000 	bvc	1d8a020 <_Min_Stack_Size+0x1d89c20>
    a01c:	d3290000 			; <UNDEFINED> instruction: 0xd3290000
    a020:	2c000005 	stccs	0, cr0, [r0], {5}
    a024:	38080067 	stmdacc	r8, {r0, r1, r2, r5, r6}
    a028:	01000016 	tsteq	r0, r6, lsl r0
    a02c:	08250a16 	stmdaeq	r5!, {r1, r2, r4, r9, fp}
    a030:	25000006 	strcs	r0, [r0, #-6]
    a034:	00000614 	andeq	r0, r0, r4, lsl r6
    a038:	0005fc25 	andeq	pc, r5, r5, lsr #24
    a03c:	05f02500 	ldrbeq	r2, [r0, #1280]!	; 0x500
    a040:	e4250000 	strt	r0, [r5], #-0
    a044:	26000005 	strcs	r0, [r0], -r5
    a048:	00001668 	andeq	r1, r0, r8, ror #12
    a04c:	0000163a 	andeq	r1, r0, sl, lsr r6
    a050:	0005f027 	andeq	pc, r5, r7, lsr #32
    a054:	007ab500 	rsbseq	fp, sl, r0, lsl #10
    a058:	05fc2700 	ldrbeq	r2, [ip, #1792]!	; 0x700
    a05c:	7ad70000 	bvc	ff5ca064 <_estack+0xdf59a064>
    a060:	08270000 	stmdaeq	r7!, {}	; <UNPREDICTABLE>
    a064:	f7000006 			; <UNDEFINED> instruction: 0xf7000006
    a068:	2700007a 	smlsdxcs	r0, sl, r0, r0
    a06c:	00000614 	andeq	r0, r0, r4, lsl r6
    a070:	00007b19 	andeq	r7, r0, r9, lsl fp
    a074:	0005e427 	andeq	lr, r5, r7, lsr #8
    a078:	007b3700 	rsbseq	r3, fp, r0, lsl #14
    a07c:	5a280000 	bpl	a0a084 <_Min_Stack_Size+0xa09c84>
    a080:	88080067 	stmdahi	r8, {r0, r1, r2, r5, r6}
    a084:	00000021 	andeq	r0, r0, r1, lsr #32
    a088:	67362a00 	ldrvs	r2, [r6, -r0, lsl #20]!
    a08c:	000c0800 	andeq	r0, ip, r0, lsl #16
    a090:	16620000 	strbtne	r0, [r2], -r0
    a094:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    a098:	0100002e 	tsteq	r0, lr, lsr #32
    a09c:	00e00abe 	strhteq	r0, [r0], #174	; 0xae
    a0a0:	91020000 	mrsls	r0, (UNDEF: 2)
    a0a4:	0628006c 	strteq	r0, [r8], -ip, rrx
    a0a8:	88080067 	stmdahi	r8, {r0, r1, r2, r5, r6}
    a0ac:	2d000021 	stccs	0, cr0, [r0, #-132]	; 0xffffff7c
    a0b0:	08006752 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, sp, lr}
    a0b4:	000013a8 	andeq	r1, r0, r8, lsr #7
    a0b8:	0000167f 	andeq	r1, r0, pc, ror r6
    a0bc:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    a0c0:	28000074 	stmdacs	r0, {r2, r4, r5, r6}
    a0c4:	080067b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, sp, lr}
    a0c8:	00001546 	andeq	r1, r0, r6, asr #10
    a0cc:	07033200 	streq	r3, [r3, -r0, lsl #4]
    a0d0:	67d40000 	ldrbvs	r0, [r4, r0]
    a0d4:	00360800 	eorseq	r0, r6, r0, lsl #16
    a0d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    a0dc:	000016df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    a0e0:	00071027 	andeq	r1, r7, r7, lsr #32
    a0e4:	007b5500 	rsbseq	r5, fp, r0, lsl #10
    a0e8:	67ee3700 	strbvs	r3, [lr, r0, lsl #14]!
    a0ec:	001c0800 	andseq	r0, ip, r0, lsl #16
    a0f0:	10270000 	eorne	r0, r7, r0
    a0f4:	8f000007 	svchi	0x00000007
    a0f8:	3800007b 	stmdacc	r0, {r0, r1, r3, r4, r5, r6}
    a0fc:	080067fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    a100:	0000156b 	andeq	r1, r0, fp, ror #10
    a104:	000016cc 	andeq	r1, r0, ip, asr #13
    a108:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    a10c:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    a110:	00680a39 	rsbeq	r0, r8, r9, lsr sl
    a114:	00156b08 	andseq	r6, r5, r8, lsl #22
    a118:	50012100 	andpl	r2, r1, r0, lsl #2
    a11c:	5001f303 	andpl	pc, r1, r3, lsl #6
    a120:	34000000 	strcc	r0, [r0], #-0
    a124:	00002c5b 	andeq	r2, r0, fp, asr ip
    a128:	0c09c601 	stceq	6, cr12, [r9], {1}
    a12c:	34080068 	strcc	r0, [r8], #-104	; 0xffffff98
    a130:	01000000 	mrseq	r0, (UNDEF: 0)
    a134:	0017249c 	mulseq	r7, ip, r4
    a138:	29ba1f00 	ldmibcs	sl!, {r8, r9, sl, fp, ip}
    a13c:	c6010000 	strgt	r0, [r1], -r0
    a140:	0005b709 	andeq	fp, r5, r9, lsl #14
    a144:	007bc900 	rsbseq	ip, fp, r0, lsl #18
    a148:	68323800 	ldmdavs	r2!, {fp, ip, sp}
    a14c:	156b0800 	strbne	r0, [fp, #-2048]!	; 0xfffff800
    a150:	171a0000 	ldrne	r0, [sl, -r0]
    a154:	01210000 			; <UNDEFINED> instruction: 0x01210000
    a158:	01f30350 	mvnseq	r0, r0, asr r3
    a15c:	403a0050 	eorsmi	r0, sl, r0, asr r0
    a160:	6b080068 	blvs	20a308 <_Min_Stack_Size+0x209f08>
    a164:	00000015 	andeq	r0, r0, r5, lsl r0
    a168:	002b341b 	eoreq	r3, fp, fp, lsl r4
    a16c:	0a6e0100 	beq	1b8a574 <_Min_Stack_Size+0x1b8a174>
    a170:	00174c01 	andseq	r4, r7, r1, lsl #24
    a174:	29ba1600 	ldmibcs	sl!, {r9, sl, ip}
    a178:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    a17c:	0006210a 	andeq	r2, r6, sl, lsl #2
    a180:	ae193b00 	vnmlsge.f64	d3, d9, d0
    a184:	0100002e 	tsteq	r0, lr, lsr #32
    a188:	00e00a7d 	rsceq	r0, r0, sp, ror sl
    a18c:	00000000 	andeq	r0, r0, r0
    a190:	00073732 	andeq	r3, r7, r2, lsr r7
    a194:	00684000 	rsbeq	r4, r8, r0
    a198:	0000cc08 	andeq	ip, r0, r8, lsl #24
    a19c:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    a1a0:	27000017 	smladcs	r0, r7, r0, r0
    a1a4:	00000744 	andeq	r0, r0, r4, asr #14
    a1a8:	00007c03 	andeq	r7, r0, r3, lsl #24
    a1ac:	0016982e 	andseq	r9, r6, lr, lsr #16
    a1b0:	07442700 	strbeq	r2, [r4, -r0, lsl #14]
    a1b4:	7c610000 	stclvc	0, cr0, [r1], #-0
    a1b8:	24290000 	strtcs	r0, [r9], #-0
    a1bc:	6e000017 	mcrvs	0, 0, r0, cr0, cr7, {0}
    a1c0:	c0080068 	andgt	r0, r8, r8, rrx
    a1c4:	01000016 	tsteq	r0, r6, lsl r0
    a1c8:	312709a4 	smulwbcc	r7, r4, r9
    a1cc:	bf000017 	svclt	0x00000017
    a1d0:	2a00007c 	bcs	a3c8 <_Min_Stack_Size+0x9fc8>
    a1d4:	080068ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, sp, lr}
    a1d8:	0000000e 	andeq	r0, r0, lr
    a1dc:	000017a5 	andeq	r1, r0, r5, lsr #15
    a1e0:	00173e3c 	andseq	r3, r7, ip, lsr lr
    a1e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a1e8:	68982d00 	ldmvs	r8, {r8, sl, fp, sp}
    a1ec:	15460800 	strbne	r0, [r6, #-2048]	; 0xfffff800
    a1f0:	17ba0000 	ldrne	r0, [sl, r0]!
    a1f4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    a1f8:	01f30350 	mvnseq	r0, r0, asr r3
    a1fc:	e6280050 			; <UNDEFINED> instruction: 0xe6280050
    a200:	cd080068 	stcgt	0, cr0, [r8, #-416]	; 0xfffffe60
    a204:	20000013 	andcs	r0, r0, r3, lsl r0
    a208:	080068fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp, lr}
    a20c:	00001546 	andeq	r1, r0, r6, asr #10
    a210:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    a214:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    a218:	34000000 	strcc	r0, [r0], #-0
    a21c:	00002d00 	andeq	r2, r0, r0, lsl #26
    a220:	0c0a2401 	cfstrseq	mvf2, [sl], {1}
    a224:	2c080069 	stccs	0, cr0, [r8], {105}	; 0x69
    a228:	01000001 	tsteq	r0, r1
    a22c:	0019169c 	mulseq	r9, ip, r6
    a230:	29ba1f00 	ldmibcs	sl!, {r8, r9, sl, fp, ip}
    a234:	24010000 	strcs	r0, [r1], #-0
    a238:	0006210a 	andeq	r2, r6, sl, lsl #2
    a23c:	007d1200 	rsbseq	r1, sp, r0, lsl #4
    a240:	0eec2200 	cdpeq	2, 14, cr2, cr12, cr0, {0}
    a244:	26010000 	strcs	r0, [r1], -r0
    a248:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    a24c:	007d5c00 	rsbseq	r5, sp, r0, lsl #24
    a250:	18fe2b00 	ldmne	lr!, {r8, r9, fp, sp}^
    a254:	27010000 	strcs	r0, [r1, -r0]
    a258:	0000e00a 	andeq	lr, r0, sl
    a25c:	68910200 	ldmvs	r1, {r9}
    a260:	00078524 	andeq	r8, r7, r4, lsr #10
    a264:	00695000 	rsbeq	r5, r9, r0
    a268:	0016e008 	andseq	lr, r6, r8
    a26c:	0a3a0100 	beq	e8a674 <_Min_Stack_Size+0xe8a274>
    a270:	000018aa 	andeq	r1, r0, sl, lsr #17
    a274:	0007a225 	andeq	sl, r7, r5, lsr #4
    a278:	07ae2500 	streq	r2, [lr, r0, lsl #10]!
    a27c:	96250000 	strtls	r0, [r5], -r0
    a280:	29000007 	stmdbcs	r0, {r0, r1, r2}
    a284:	000005d3 	ldrdeq	r0, [r0], -r3
    a288:	08006950 	stmdaeq	r0, {r4, r6, r8, fp, sp, lr}
    a28c:	00001710 	andeq	r1, r0, r0, lsl r7
    a290:	250a1601 	strcs	r1, [sl, #-1537]	; 0xfffff9ff
    a294:	00000608 	andeq	r0, r0, r8, lsl #12
    a298:	00061425 	andeq	r1, r6, r5, lsr #8
    a29c:	05fc2500 	ldrbeq	r2, [ip, #1280]!	; 0x500
    a2a0:	f0250000 			; <UNDEFINED> instruction: 0xf0250000
    a2a4:	25000005 	strcs	r0, [r0, #-5]
    a2a8:	000005e4 	andeq	r0, r0, r4, ror #11
    a2ac:	00174026 	andseq	r4, r7, r6, lsr #32
    a2b0:	00189f00 	andseq	r9, r8, r0, lsl #30
    a2b4:	05f02700 	ldrbeq	r2, [r0, #1792]!	; 0x700
    a2b8:	7d860000 	stcvc	0, cr0, [r6]
    a2bc:	fc270000 	stc2	0, cr0, [r7], #-0
    a2c0:	a8000005 	stmdage	r0, {r0, r2}
    a2c4:	2700007d 	smlsdxcs	r0, sp, r0, r0
    a2c8:	00000608 	andeq	r0, r0, r8, lsl #12
    a2cc:	00007dc8 	andeq	r7, r0, r8, asr #27
    a2d0:	00061427 	andeq	r1, r6, r7, lsr #8
    a2d4:	007dea00 	rsbseq	lr, sp, r0, lsl #20
    a2d8:	05e42700 	strbeq	r2, [r4, #1792]!	; 0x700
    a2dc:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    a2e0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    a2e4:	08006990 	stmdaeq	r0, {r4, r7, r8, fp, sp, lr}
    a2e8:	00002188 	andeq	r2, r0, r8, lsl #3
    a2ec:	5a2a0000 	bpl	a8a2f4 <_Min_Stack_Size+0xa89ef4>
    a2f0:	0c080069 	stceq	0, cr0, [r8], {105}	; 0x69
    a2f4:	c7000000 	strgt	r0, [r0, -r0]
    a2f8:	2b000018 	blcs	a360 <_Min_Stack_Size+0x9f60>
    a2fc:	00002eae 	andeq	r2, r0, lr, lsr #29
    a300:	e00a4201 	and	r4, sl, r1, lsl #4
    a304:	02000000 	andeq	r0, r0, #0
    a308:	28006c91 	stmdacs	r0, {r0, r4, r7, sl, fp, sp, lr}
    a30c:	0800692a 	stmdaeq	r0, {r1, r3, r5, r8, fp, sp, lr}
    a310:	00002188 	andeq	r2, r0, r8, lsl #3
    a314:	0069882d 	rsbeq	r8, r9, sp, lsr #16
    a318:	0013f208 	andseq	pc, r3, r8, lsl #4
    a31c:	0018e400 	andseq	lr, r8, r0, lsl #8
    a320:	50012100 	andpl	r2, r1, r0, lsl #2
    a324:	00007402 	andeq	r7, r0, r2, lsl #8
    a328:	0069ee2d 	rsbeq	lr, r9, sp, lsr #28
    a32c:	00154608 	andseq	r4, r5, r8, lsl #12
    a330:	0018f800 	andseq	pc, r8, r0, lsl #16
    a334:	50012100 	andpl	r2, r1, r0, lsl #2
    a338:	00007402 	andeq	r7, r0, r2, lsl #8
    a33c:	006a0c2d 	rsbeq	r0, sl, sp, lsr #24
    a340:	00154608 	andseq	r4, r5, r8, lsl #12
    a344:	00190c00 	andseq	r0, r9, r0, lsl #24
    a348:	50012100 	andpl	r2, r1, r0, lsl #2
    a34c:	00007402 	andeq	r7, r0, r2, lsl #8
    a350:	006a1428 	rsbeq	r1, sl, r8, lsr #8
    a354:	0013cd08 	andseq	ip, r3, r8, lsl #26
    a358:	51320000 	teqpl	r2, r0
    a35c:	38000007 	stmdacc	r0, {r0, r1, r2}
    a360:	5a08006a 	bpl	20a510 <_Min_Stack_Size+0x20a110>
    a364:	01000000 	mrseq	r0, (UNDEF: 0)
    a368:	00194d9c 	mulseq	r9, ip, sp
    a36c:	075e2700 	ldrbeq	r2, [lr, -r0, lsl #14]
    a370:	7e260000 	cdpvc	0, 2, cr0, cr6, cr0, {0}
    a374:	70260000 	eorvc	r0, r6, r0
    a378:	43000017 	movwmi	r0, #23
    a37c:	36000019 			; <UNDEFINED> instruction: 0x36000019
    a380:	0000075e 	andeq	r0, r0, lr, asr r7
    a384:	3a005001 	bcc	1e390 <_Min_Stack_Size+0x1df90>
    a388:	08006a7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, fp, sp, lr}
    a38c:	000017d7 	ldrdeq	r1, [r0], -r7
    a390:	076b3200 	strbeq	r3, [fp, -r0, lsl #4]!
    a394:	6a940000 	bvs	fe50a39c <_estack+0xde4da39c>
    a398:	00500800 	subseq	r0, r0, r0, lsl #16
    a39c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a3a0:	00001982 	andeq	r1, r0, r2, lsl #19
    a3a4:	00077827 	andeq	r7, r7, r7, lsr #16
    a3a8:	007e5200 	rsbseq	r5, lr, r0, lsl #4
    a3ac:	17882e00 	strne	r2, [r8, r0, lsl #28]
    a3b0:	78270000 	stmdavc	r7!, {}	; <UNPREDICTABLE>
    a3b4:	7e000007 	cdpvc	0, 0, cr0, cr0, cr7, {0}
    a3b8:	3a00007e 	bcc	a5b8 <_Min_Stack_Size+0xa1b8>
    a3bc:	08006ad6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, fp, sp, lr}
    a3c0:	000017d7 	ldrdeq	r1, [r0], -r7
    a3c4:	15340000 	ldrne	r0, [r4, #-0]!
    a3c8:	0100002e 	tsteq	r0, lr, lsr #32
    a3cc:	6ae408a7 	bvs	ff90c670 <_estack+0xdf8dc670>
    a3d0:	00300800 	eorseq	r0, r0, r0, lsl #16
    a3d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a3d8:	000019c9 	andeq	r1, r0, r9, asr #19
    a3dc:	0029ba1f 	eoreq	fp, r9, pc, lsl sl
    a3e0:	08a70100 	stmiaeq	r7!, {r8}
    a3e4:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    a3e8:	00007eaa 	andeq	r7, r0, sl, lsr #29
    a3ec:	0001b52b 	andeq	fp, r1, fp, lsr #10
    a3f0:	08a90100 	stmiaeq	r9!, {r8}
    a3f4:	000000e5 	andeq	r0, r0, r5, ror #1
    a3f8:	20779102 	rsbscs	r9, r7, r2, lsl #2
    a3fc:	08006b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, sp, lr}
    a400:	000017d7 	ldrdeq	r1, [r0], -r7
    a404:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    a408:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    a40c:	288a3400 	stmcs	sl, {sl, ip, sp}
    a410:	1d010000 	stcne	0, cr0, [r1, #-0]
    a414:	006b1409 	rsbeq	r1, fp, r9, lsl #8
    a418:	00005608 	andeq	r5, r0, r8, lsl #12
    a41c:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    a420:	1f000019 	svcne	0x00000019
    a424:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    a428:	b7091d01 	strlt	r1, [r9, -r1, lsl #26]
    a42c:	cb000005 	blgt	a448 <_Min_Stack_Size+0xa048>
    a430:	3a00007e 	bcc	a630 <_Min_Stack_Size+0xa230>
    a434:	08006b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, sp, lr}
    a438:	000017d7 	ldrdeq	r1, [r0], -r7
    a43c:	29603400 	stmdbcs	r0!, {sl, ip, sp}^
    a440:	e3010000 	movw	r0, #4096	; 0x1000
    a444:	006b6c08 	rsbeq	r6, fp, r8, lsl #24
    a448:	00005008 	andeq	r5, r0, r8
    a44c:	299c0100 	ldmibcs	ip, {r8}
    a450:	1f00001a 	svcne	0x0000001a
    a454:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    a458:	b708e301 	strlt	lr, [r8, -r1, lsl #6]
    a45c:	f7000005 			; <UNDEFINED> instruction: 0xf7000005
    a460:	3a00007e 	bcc	a660 <_Min_Stack_Size+0xa260>
    a464:	08006bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, sp, lr}
    a468:	000017d7 	ldrdeq	r1, [r0], -r7
    a46c:	2b6b3400 	blcs	1ad7474 <_Min_Stack_Size+0x1ad7074>
    a470:	05010000 	streq	r0, [r1, #-0]
    a474:	006bbc09 	rsbeq	fp, fp, r9, lsl #24
    a478:	00002a08 	andeq	r2, r0, r8, lsl #20
    a47c:	709c0100 	addsvc	r0, ip, r0, lsl #2
    a480:	1f00001a 	svcne	0x0000001a
    a484:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    a488:	b7090501 	strlt	r0, [r9, -r1, lsl #10]
    a48c:	23000005 	movwcs	r0, #5
    a490:	2b00007f 	blcs	a694 <_Min_Stack_Size+0xa294>
    a494:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    a498:	ea090801 	b	24c4a4 <_Min_Stack_Size+0x24c0a4>
    a49c:	02000000 	andeq	r0, r0, #0
    a4a0:	e0207691 	mla	r0, r1, r6, r7
    a4a4:	d708006b 	strle	r0, [r8, -fp, rrx]
    a4a8:	21000017 	tstcs	r0, r7, lsl r0
    a4ac:	f3035001 	vhadd.u8	d5, d3, d1
    a4b0:	00005001 	andeq	r5, r0, r1
    a4b4:	0029ad34 	eoreq	sl, r9, r4, lsr sp
    a4b8:	08640100 	stmdaeq	r4!, {r8}^
    a4bc:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
    a4c0:	00000024 	andeq	r0, r0, r4, lsr #32
    a4c4:	1ab09c01 	bne	fec314d0 <_estack+0xdec014d0>
    a4c8:	541f0000 	ldrpl	r0, [pc], #-0	; a4d0 <_Min_Stack_Size+0xa0d0>
    a4cc:	0100001b 	tsteq	r0, fp, lsl r0
    a4d0:	04090864 	streq	r0, [r9], #-2148	; 0xfffff79c
    a4d4:	7f440000 	svcvc	0x00440000
    a4d8:	ba220000 	blt	88a4e0 <_Min_Stack_Size+0x88a0e0>
    a4dc:	01000029 	tsteq	r0, r9, lsr #32
    a4e0:	06210866 	strteq	r0, [r1], -r6, ror #16
    a4e4:	7f650000 	svcvc	0x00650000
    a4e8:	0a280000 	beq	a0a4f0 <_Min_Stack_Size+0xa0a0f0>
    a4ec:	4608006c 	strmi	r0, [r8], -ip, rrx
    a4f0:	00000015 	andeq	r0, r0, r5, lsl r0
    a4f4:	002cbe34 	eoreq	fp, ip, r4, lsr lr
    a4f8:	078f0100 	streq	r0, [pc, r0, lsl #2]
    a4fc:	08006c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp, lr}
    a500:	000000ca 	andeq	r0, r0, sl, asr #1
    a504:	1bd99c01 	blne	ff671510 <_estack+0xdf641510>
    a508:	541f0000 	ldrpl	r0, [pc], #-0	; a510 <_Min_Stack_Size+0xa110>
    a50c:	0100001b 	tsteq	r0, fp, lsl r0
    a510:	0409078f 	streq	r0, [r9], #-1935	; 0xfffff871
    a514:	7f780000 	svcvc	0x00780000
    a518:	ba2b0000 	blt	aca520 <_Min_Stack_Size+0xaca120>
    a51c:	01000029 	tsteq	r0, r9, lsr #32
    a520:	06210791 			; <UNDEFINED> instruction: 0x06210791
    a524:	54010000 	strpl	r0, [r1], #-0
    a528:	000eec22 	andeq	lr, lr, r2, lsr #24
    a52c:	07920100 	ldreq	r0, [r2, r0, lsl #2]
    a530:	000000ce 	andeq	r0, r0, lr, asr #1
    a534:	00007f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    a538:	00078524 	andeq	r8, r7, r4, lsr #10
    a53c:	006c2c00 	rsbeq	r2, ip, r0, lsl #24
    a540:	0017a008 	andseq	sl, r7, r8
    a544:	079e0100 	ldreq	r0, [lr, r0, lsl #2]
    a548:	00001b8e 	andeq	r1, r0, lr, lsl #23
    a54c:	0007a227 	andeq	sl, r7, r7, lsr #4
    a550:	007fcb00 	rsbseq	ip, pc, r0, lsl #22
    a554:	07ae2700 	streq	r2, [lr, r0, lsl #14]!
    a558:	7fed0000 	svcvc	0x00ed0000
    a55c:	96270000 	strtls	r0, [r7], -r0
    a560:	0b000007 	bleq	a584 <_Min_Stack_Size+0xa184>
    a564:	29000080 	stmdbcs	r0, {r7}
    a568:	000005d3 	ldrdeq	r0, [r0], -r3
    a56c:	08006c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, sp, lr}
    a570:	000017d0 	ldrdeq	r1, [r0], -r0
    a574:	250a1601 	strcs	r1, [sl, #-1537]	; 0xfffff9ff
    a578:	00000608 	andeq	r0, r0, r8, lsl #12
    a57c:	00061425 	andeq	r1, r6, r5, lsr #8
    a580:	05fc2500 	ldrbeq	r2, [ip, #1280]!	; 0x500
    a584:	f0250000 			; <UNDEFINED> instruction: 0xf0250000
    a588:	25000005 	strcs	r0, [r0, #-5]
    a58c:	000005e4 	andeq	r0, r0, r4, ror #11
    a590:	00180026 	andseq	r0, r8, r6, lsr #32
    a594:	001b8300 	andseq	r8, fp, r0, lsl #6
    a598:	05f02700 	ldrbeq	r2, [r0, #1792]!	; 0x700
    a59c:	80290000 	eorhi	r0, r9, r0
    a5a0:	fc270000 	stc2	0, cr0, [r7], #-0
    a5a4:	4b000005 	blmi	a5c0 <_Min_Stack_Size+0xa1c0>
    a5a8:	27000080 	strcs	r0, [r0, -r0, lsl #1]
    a5ac:	00000608 	andeq	r0, r0, r8, lsl #12
    a5b0:	0000806b 	andeq	r8, r0, fp, rrx
    a5b4:	00061427 	andeq	r1, r6, r7, lsr #8
    a5b8:	00808d00 	addeq	r8, r0, r0, lsl #26
    a5bc:	05e42700 	strbeq	r2, [r4, #1792]!	; 0x700
    a5c0:	80ab0000 	adchi	r0, fp, r0
    a5c4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    a5c8:	08006c60 	stmdaeq	r0, {r5, r6, sl, fp, sp, lr}
    a5cc:	00002188 	andeq	r2, r0, r8, lsl #3
    a5d0:	362a0000 	strtcc	r0, [sl], -r0
    a5d4:	0c08006c 	stceq	0, cr0, [r8], {108}	; 0x6c
    a5d8:	ab000000 	blge	a5e0 <_Min_Stack_Size+0xa1e0>
    a5dc:	2b00001b 	blcs	a650 <_Min_Stack_Size+0xa250>
    a5e0:	00002eae 	andeq	r2, r0, lr, lsr #29
    a5e4:	e007a601 	and	sl, r7, r1, lsl #12
    a5e8:	02000000 	andeq	r0, r0, #0
    a5ec:	28006c91 	stmdacs	r0, {r0, r4, r7, sl, fp, sp, lr}
    a5f0:	08006c18 	stmdaeq	r0, {r3, r4, sl, fp, sp, lr}
    a5f4:	00002188 	andeq	r2, r0, r8, lsl #3
    a5f8:	006c582d 	rsbeq	r5, ip, sp, lsr #16
    a5fc:	0013a808 	andseq	sl, r3, r8, lsl #16
    a600:	001bc800 	andseq	ip, fp, r0, lsl #16
    a604:	50012100 	andpl	r2, r1, r0, lsl #2
    a608:	00007402 	andeq	r7, r0, r2, lsl #8
    a60c:	006cbc20 	rsbeq	fp, ip, r0, lsr #24
    a610:	00154608 	andseq	r4, r5, r8, lsl #12
    a614:	50012100 	andpl	r2, r1, r0, lsl #2
    a618:	00007402 	andeq	r7, r0, r2, lsl #8
    a61c:	2a393400 	bcs	e57624 <_Min_Stack_Size+0xe57224>
    a620:	bb010000 	bllt	4a628 <_Min_Stack_Size+0x4a228>
    a624:	006cd807 	rsbeq	sp, ip, r7, lsl #16
    a628:	00010608 	andeq	r0, r1, r8, lsl #12
    a62c:	bb9c0100 	bllt	fe70aa34 <_estack+0xde6daa34>
    a630:	1f00001c 	svcne	0x0000001c
    a634:	00001b54 	andeq	r1, r0, r4, asr fp
    a638:	0907bb01 	stmdbeq	r7, {r0, r8, r9, fp, ip, sp, pc}
    a63c:	c9000004 	stmdbgt	r0, {r2}
    a640:	2b000080 	blcs	a848 <_Min_Stack_Size+0xa448>
    a644:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    a648:	2107bd01 	tstcs	r7, r1, lsl #26
    a64c:	01000006 	tsteq	r0, r6
    a650:	0eec2254 	mcreq	2, 7, r2, cr12, cr4, {2}
    a654:	bf010000 	svclt	0x00010000
    a658:	0000ce07 	andeq	ip, r0, r7, lsl #28
    a65c:	0080f500 	addeq	pc, r0, r0, lsl #10
    a660:	01b52b00 			; <UNDEFINED> instruction: 0x01b52b00
    a664:	c0010000 	andgt	r0, r1, r0
    a668:	0000ea07 	andeq	lr, r0, r7, lsl #20
    a66c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    a670:	0005d324 	andeq	sp, r5, r4, lsr #6
    a674:	006d2c00 	rsbeq	r2, sp, r0, lsl #24
    a678:	00183008 	andseq	r3, r8, r8
    a67c:	07cd0100 	strbeq	r0, [sp, r0, lsl #2]
    a680:	00001c8d 	andeq	r1, r0, sp, lsl #25
    a684:	00060825 	andeq	r0, r6, r5, lsr #16
    a688:	06142500 	ldreq	r2, [r4], -r0, lsl #10
    a68c:	fc250000 	stc2	0, cr0, [r5], #-0
    a690:	25000005 	strcs	r0, [r0, #-5]
    a694:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a698:	0005e425 	andeq	lr, r5, r5, lsr #8
    a69c:	18582600 	ldmdane	r8, {r9, sl, sp}^
    a6a0:	1c830000 	stcne	0, cr0, [r3], {0}
    a6a4:	f0350000 			; <UNDEFINED> instruction: 0xf0350000
    a6a8:	01000005 	tsteq	r0, r5
    a6ac:	0005fc35 	andeq	pc, r5, r5, lsr ip	; <UNPREDICTABLE>
    a6b0:	08350100 	ldmdaeq	r5!, {r8}
    a6b4:	64000006 	strvs	r0, [r0], #-6
    a6b8:	00061436 	andeq	r1, r6, r6, lsr r4
    a6bc:	36560100 	ldrbcc	r0, [r6], -r0, lsl #2
    a6c0:	000005e4 	andeq	r0, r0, r4, ror #11
    a6c4:	28005401 	stmdacs	r0, {r0, sl, ip, lr}
    a6c8:	08006d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, sp, lr}
    a6cc:	00002188 	andeq	r2, r0, r8, lsl #3
    a6d0:	6cea2800 	stclvs	8, cr2, [sl]
    a6d4:	21880800 	orrcs	r0, r8, r0, lsl #16
    a6d8:	282d0000 	stmdacs	sp!, {}	; <UNPREDICTABLE>
    a6dc:	cd08006d 	stcgt	0, cr0, [r8, #-436]	; 0xfffffe4c
    a6e0:	aa000013 	bge	a734 <_Min_Stack_Size+0xa334>
    a6e4:	2100001c 	tstcs	r0, ip, lsl r0
    a6e8:	74025001 	strvc	r5, [r2], #-1
    a6ec:	68200000 	stmdavs	r0!, {}	; <UNPREDICTABLE>
    a6f0:	4608006d 	strmi	r0, [r8], -sp, rrx
    a6f4:	21000015 	tstcs	r0, r5, lsl r0
    a6f8:	74025001 	strvc	r5, [r2], #-1
    a6fc:	34000000 	strcc	r0, [r0], #-0
    a700:	00002ca3 	andeq	r2, r0, r3, lsr #25
    a704:	e007fd01 	and	pc, r7, r1, lsl #26
    a708:	5c08006d 	stcpl	0, cr0, [r8], {109}	; 0x6d
    a70c:	01000001 	tsteq	r0, r1
    a710:	001e2b9c 	mulseq	lr, ip, fp
    a714:	1b541f00 	blne	151231c <_Min_Stack_Size+0x1511f1c>
    a718:	fd010000 	stc2	0, cr0, [r1, #-0]
    a71c:	00040907 	andeq	r0, r4, r7, lsl #18
    a720:	00812a00 	addeq	r2, r1, r0, lsl #20
    a724:	29ba2b00 	ldmibcs	sl!, {r8, r9, fp, sp}
    a728:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    a72c:	00062107 	andeq	r2, r6, r7, lsl #2
    a730:	22540100 	subscs	r0, r4, #0, 2
    a734:	00000eec 	andeq	r0, r0, ip, ror #29
    a738:	ce080001 	cdpgt	0, 0, cr0, cr8, cr1, {0}
    a73c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    a740:	2b000081 	blcs	a94c <_Min_Stack_Size+0xa54c>
    a744:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    a748:	2b080201 	blcs	20af54 <_Min_Stack_Size+0x20ab54>
    a74c:	0200001e 	andeq	r0, r0, #30
    a750:	85246e91 	strhi	r6, [r4, #-3729]!	; 0xfffff16f
    a754:	06000007 	streq	r0, [r0], -r7
    a758:	7808006e 	stmdavc	r8, {r1, r2, r3, r5, r6}
    a75c:	01000018 	tsteq	r0, r8, lsl r0
    a760:	1d9c0819 	ldcne	8, cr0, [ip, #100]	; 0x64
    a764:	a2250000 	eorge	r0, r5, #0
    a768:	25000007 	strcs	r0, [r0, #-7]
    a76c:	000007ae 	andeq	r0, r0, lr, lsr #15
    a770:	00079625 	andeq	r9, r7, r5, lsr #12
    a774:	05d32900 	ldrbeq	r2, [r3, #2304]	; 0x900
    a778:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    a77c:	18a80800 	stmiane	r8!, {fp}
    a780:	16010000 	strne	r0, [r1], -r0
    a784:	0608250a 	streq	r2, [r8], -sl, lsl #10
    a788:	14250000 	strtne	r0, [r5], #-0
    a78c:	25000006 	strcs	r0, [r0, #-6]
    a790:	000005fc 	strdeq	r0, [r0], -ip
    a794:	0005f025 	andeq	pc, r5, r5, lsr #32
    a798:	05e42500 	strbeq	r2, [r4, #1280]!	; 0x500
    a79c:	d8260000 	stmdale	r6!, {}	; <UNPREDICTABLE>
    a7a0:	91000018 	tstls	r0, r8, lsl r0
    a7a4:	2700001d 	smladcs	r0, sp, r0, r0
    a7a8:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a7ac:	0000817d 	andeq	r8, r0, sp, ror r1
    a7b0:	0005fc27 	andeq	pc, r5, r7, lsr #24
    a7b4:	00819f00 	addeq	r9, r1, r0, lsl #30
    a7b8:	06082700 	streq	r2, [r8], -r0, lsl #14
    a7bc:	81bf0000 			; <UNDEFINED> instruction: 0x81bf0000
    a7c0:	14270000 	strtne	r0, [r7], #-0
    a7c4:	e1000006 	tst	r0, r6
    a7c8:	27000081 	strcs	r0, [r0, -r1, lsl #1]
    a7cc:	000005e4 	andeq	r0, r0, r4, ror #11
    a7d0:	000081ff 	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>
    a7d4:	6e5a2800 	cdpvs	8, 5, cr2, cr10, cr0, {0}
    a7d8:	21880800 	orrcs	r0, r8, r0, lsl #16
    a7dc:	00000000 	andeq	r0, r0, r0
    a7e0:	0005d324 	andeq	sp, r5, r4, lsr #6
    a7e4:	006e3600 	rsbeq	r3, lr, r0, lsl #12
    a7e8:	00190808 	andseq	r0, r9, r8, lsl #16
    a7ec:	080e0100 	stmdaeq	lr, {r8}
    a7f0:	00001dfd 	strdeq	r1, [r0], -sp
    a7f4:	00060825 	andeq	r0, r6, r5, lsr #16
    a7f8:	06142500 	ldreq	r2, [r4], -r0, lsl #10
    a7fc:	fc250000 	stc2	0, cr0, [r5], #-0
    a800:	25000005 	strcs	r0, [r0, #-5]
    a804:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a808:	0005e425 	andeq	lr, r5, r5, lsr #8
    a80c:	19302600 	ldmdbne	r0!, {r9, sl, sp}
    a810:	1df30000 	ldclne	0, cr0, [r3]
    a814:	f0350000 			; <UNDEFINED> instruction: 0xf0350000
    a818:	01000005 	tsteq	r0, r5
    a81c:	0005fc35 	andeq	pc, r5, r5, lsr ip	; <UNPREDICTABLE>
    a820:	08350100 	ldmdaeq	r5!, {r8}
    a824:	64000006 	strvs	r0, [r0], #-6
    a828:	00061436 	andeq	r1, r6, r6, lsr r4
    a82c:	36550100 	ldrbcc	r0, [r5], -r0, lsl #2
    a830:	000005e4 	andeq	r0, r0, r4, ror #11
    a834:	28005401 	stmdacs	r0, {r0, sl, ip, lr}
    a838:	08006e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, sp, lr}
    a83c:	00002188 	andeq	r2, r0, r8, lsl #3
    a840:	6df22800 	ldclvs	8, cr2, [r2]
    a844:	21880800 	orrcs	r0, r8, r0, lsl #16
    a848:	322d0000 	eorcc	r0, sp, #0
    a84c:	f208006e 	vhadd.s8	q0, q4, q15
    a850:	1a000013 	bne	a8a4 <_Min_Stack_Size+0xa4a4>
    a854:	2100001e 	tstcs	r0, lr, lsl r0
    a858:	74025001 	strvc	r5, [r2], #-1
    a85c:	b2200000 	eorlt	r0, r0, #0
    a860:	4608006e 	strmi	r0, [r8], -lr, rrx
    a864:	21000015 	tstcs	r0, r5, lsl r0
    a868:	74025001 	strvc	r5, [r2], #-1
    a86c:	05000000 	streq	r0, [r0, #-0]
    a870:	000000ad 	andeq	r0, r0, sp, lsr #1
    a874:	0029911c 	eoreq	r9, r9, ip, lsl r1
    a878:	068b0100 	streq	r0, [fp], r0, lsl #2
    a87c:	08006f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
    a880:	000000e4 	andeq	r0, r0, r4, ror #1
    a884:	1f219c01 	svcne	0x00219c01
    a888:	ba1f0000 	blt	7ca890 <_Min_Stack_Size+0x7ca490>
    a88c:	01000029 	tsteq	r0, r9, lsr #32
    a890:	0621068b 	strteq	r0, [r1], -fp, lsl #13
    a894:	821d0000 	andshi	r0, sp, #0
    a898:	a4220000 	strtge	r0, [r2], #-0
    a89c:	01000029 	tsteq	r0, r9, lsr #32
    a8a0:	00ce068d 	sbceq	r0, lr, sp, lsl #13
    a8a4:	82670000 	rsbhi	r0, r7, #0
    a8a8:	b9220000 	stmdblt	r2!, {}	; <UNPREDICTABLE>
    a8ac:	0100002e 	tsteq	r0, lr, lsr #32
    a8b0:	00ce068e 	sbceq	r0, lr, lr, lsl #13
    a8b4:	82a60000 	adchi	r0, r6, #0
    a8b8:	50260000 	eorpl	r0, r6, r0
    a8bc:	8f000019 	svchi	0x00000019
    a8c0:	2b00001e 	blcs	a940 <_Min_Stack_Size+0xa540>
    a8c4:	00002eae 	andeq	r2, r0, lr, lsr #29
    a8c8:	e006a801 	and	sl, r6, r1, lsl #16
    a8cc:	02000000 	andeq	r0, r0, #0
    a8d0:	26006091 			; <UNDEFINED> instruction: 0x26006091
    a8d4:	00001968 	andeq	r1, r0, r8, ror #18
    a8d8:	00001ea8 	andeq	r1, r0, r8, lsr #29
    a8dc:	002ad22b 	eoreq	sp, sl, fp, lsr #4
    a8e0:	06b50100 	ldrteq	r0, [r5], r0, lsl #2
    a8e4:	000000e0 	andeq	r0, r0, r0, ror #1
    a8e8:	00689102 	rsbeq	r9, r8, r2, lsl #2
    a8ec:	00198026 	andseq	r8, r9, r6, lsr #32
    a8f0:	001ec100 	andseq	ip, lr, r0, lsl #2
    a8f4:	28a02b00 	stmiacs	r0!, {r8, r9, fp, sp}
    a8f8:	bc010000 	stclt	0, cr0, [r1], {-0}
    a8fc:	0000e006 	andeq	lr, r0, r6
    a900:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a904:	700c2a00 	andvc	r2, ip, r0, lsl #20
    a908:	000e0800 	andeq	r0, lr, r0, lsl #16
    a90c:	1ede0000 	cdpne	0, 13, cr0, cr14, cr0, {0}
    a910:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    a914:	0100002e 	tsteq	r0, lr, lsr #32
    a918:	00e006ac 	rsceq	r0, r0, ip, lsr #13
    a91c:	91020000 	mrsls	r0, (UNDEF: 2)
    a920:	de280064 	cdple	0, 2, cr0, cr8, cr4, {3}
    a924:	ce08006f 	cdpgt	0, 0, cr0, cr8, cr15, {3}
    a928:	28000021 	stmdacs	r0, {r0, r5}
    a92c:	08006fea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    a930:	000021ce 	andeq	r2, r0, lr, asr #3
    a934:	006ff83d 	rsbeq	pc, pc, sp, lsr r8	; <UNPREDICTABLE>
    a938:	001f0008 	andseq	r0, pc, r8
    a93c:	50012100 	andpl	r2, r1, r0, lsl #2
    a940:	00007402 	andeq	r7, r0, r2, lsl #8
    a944:	0070023d 	rsbseq	r0, r0, sp, lsr r2
    a948:	001f1008 	andseq	r1, pc, r8
    a94c:	50012100 	andpl	r2, r1, r0, lsl #2
    a950:	00007402 	andeq	r7, r0, r2, lsl #8
    a954:	00700a20 	rsbseq	r0, r0, r0, lsr #20
    a958:	00154608 	andseq	r4, r5, r8, lsl #12
    a95c:	50012100 	andpl	r2, r1, r0, lsl #2
    a960:	00007402 	andeq	r7, r0, r2, lsl #8
    a964:	2ec03400 	cdpcs	4, 12, cr3, cr0, cr0, {0}
    a968:	76010000 	strvc	r0, [r1], -r0
    a96c:	00702008 	rsbseq	r2, r0, r8
    a970:	00001208 	andeq	r1, r0, r8, lsl #4
    a974:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    a978:	1f00001f 	svcne	0x0000001f
    a97c:	00001b54 	andeq	r1, r0, r4, asr fp
    a980:	09087601 	stmdbeq	r8, {r0, r9, sl, ip, sp, lr}
    a984:	da000004 	ble	a99c <_Min_Stack_Size+0xa59c>
    a988:	22000082 	andcs	r0, r0, #130	; 0x82
    a98c:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    a990:	21087801 	tstcs	r8, r1, lsl #16
    a994:	fb000006 	blx	a9b6 <_Min_Stack_Size+0xa5b6>
    a998:	28000082 	stmdacs	r0, {r1, r7}
    a99c:	08007030 	stmdaeq	r0, {r4, r5, ip, sp, lr}
    a9a0:	00001546 	andeq	r1, r0, r6, asr #10
    a9a4:	2dd53400 	cfldrdcs	mvd3, [r5]
    a9a8:	41010000 	mrsmi	r0, (UNDEF: 1)
    a9ac:	00703409 	rsbseq	r3, r0, r9, lsl #8
    a9b0:	00008a08 	andeq	r8, r0, r8, lsl #20
    a9b4:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    a9b8:	1f00001f 	svcne	0x0000001f
    a9bc:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    a9c0:	b7094101 	strlt	r4, [r9, -r1, lsl #2]
    a9c4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    a9c8:	2b000083 	blcs	abdc <_Min_Stack_Size+0xa7dc>
    a9cc:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    a9d0:	e5094301 	str	r4, [r9, #-769]	; 0xfffffcff
    a9d4:	02000000 	andeq	r0, r0, #0
    a9d8:	24297391 	strtcs	r7, [r9], #-913	; 0xfffffc6f
    a9dc:	3a000017 	bcc	aa40 <_Min_Stack_Size+0xa640>
    a9e0:	98080070 	stmdals	r8, {r4, r5, r6}
    a9e4:	01000019 	tsteq	r0, r9, lsl r0
    a9e8:	3127094b 			; <UNDEFINED> instruction: 0x3127094b
    a9ec:	61000017 	tstvs	r0, r7, lsl r0
    a9f0:	2a000083 	bcs	ac04 <_Min_Stack_Size+0xa804>
    a9f4:	08007060 	stmdaeq	r0, {r5, r6, ip, sp, lr}
    a9f8:	0000000c 	andeq	r0, r0, ip
    a9fc:	00001fc5 	andeq	r1, r0, r5, asr #31
    aa00:	00173e3c 	andseq	r3, r7, ip, lsr lr
    aa04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    aa08:	70802d00 	addvc	r2, r0, r0, lsl #26
    aa0c:	15460800 	strbne	r0, [r6, #-2048]	; 0xfffff800
    aa10:	1fda0000 	svcne	0x00da0000
    aa14:	01210000 			; <UNDEFINED> instruction: 0x01210000
    aa18:	01f30350 	mvnseq	r0, r0, asr r3
    aa1c:	8a280050 	bhi	a0ab64 <_Min_Stack_Size+0xa0a764>
    aa20:	cd080070 	stcgt	0, cr0, [r8, #-448]	; 0xfffffe40
    aa24:	20000013 	andcs	r0, r0, r3, lsl r0
    aa28:	080070b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp, lr}
    aa2c:	00001546 	andeq	r1, r0, r6, asr #10
    aa30:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    aa34:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    aa38:	e7340000 	ldr	r0, [r4, -r0]!
    aa3c:	0100002d 	tsteq	r0, sp, lsr #32
    aa40:	70c00976 	sbcvc	r0, r0, r6, ror r9
    aa44:	00920800 	addseq	r0, r2, r0, lsl #16
    aa48:	9c010000 	stcls	0, cr0, [r1], {-0}
    aa4c:	0000208b 	andeq	r2, r0, fp, lsl #1
    aa50:	0029ba1f 	eoreq	fp, r9, pc, lsl sl
    aa54:	09760100 	ldmdbeq	r6!, {r8}^
    aa58:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    aa5c:	000083b4 			; <UNDEFINED> instruction: 0x000083b4
    aa60:	0001b52b 	andeq	fp, r1, fp, lsr #10
    aa64:	09780100 	ldmdbeq	r8!, {r8}^
    aa68:	000000ea 	andeq	r0, r0, sl, ror #1
    aa6c:	29729102 	ldmdbcs	r2!, {r1, r8, ip, pc}^
    aa70:	00001724 	andeq	r1, r0, r4, lsr #14
    aa74:	080070c6 	stmdaeq	r0, {r1, r2, r6, r7, ip, sp, lr}
    aa78:	000019c0 	andeq	r1, r0, r0, asr #19
    aa7c:	27098301 	strcs	r8, [r9, -r1, lsl #6]
    aa80:	00001731 	andeq	r1, r0, r1, lsr r7
    aa84:	00008407 	andeq	r8, r0, r7, lsl #8
    aa88:	0070f42a 	rsbseq	pc, r0, sl, lsr #8
    aa8c:	00000c08 	andeq	r0, r0, r8, lsl #24
    aa90:	00205a00 	eoreq	r5, r0, r0, lsl #20
    aa94:	173e3c00 	ldrne	r3, [lr, -r0, lsl #24]!
    aa98:	91020000 	mrsls	r0, (UNDEF: 2)
    aa9c:	142d0074 	strtne	r0, [sp], #-116	; 0xffffff8c
    aaa0:	46080071 			; <UNDEFINED> instruction: 0x46080071
    aaa4:	6f000015 	svcvs	0x00000015
    aaa8:	21000020 	tstcs	r0, r0, lsr #32
    aaac:	f3035001 	vhadd.u8	d5, d3, d1
    aab0:	28005001 	stmdacs	r0, {r0, ip, lr}
    aab4:	0800711e 	stmdaeq	r0, {r1, r2, r3, r4, r8, ip, sp, lr}
    aab8:	000013cd 	andeq	r1, r0, sp, asr #7
    aabc:	00714c20 	rsbseq	r4, r1, r0, lsr #24
    aac0:	00154608 	andseq	r4, r5, r8, lsl #12
    aac4:	50012100 	andpl	r2, r1, r0, lsl #2
    aac8:	5001f303 	andpl	pc, r1, r3, lsl #6
    aacc:	32000000 	andcc	r0, r0, #0
    aad0:	0000071d 	andeq	r0, r0, sp, lsl r7
    aad4:	08007154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp, lr}
    aad8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    aadc:	21169c01 	tstcs	r6, r1, lsl #24
    aae0:	2a270000 	bcs	9caae8 <_Min_Stack_Size+0x9ca6e8>
    aae4:	5a000007 	bpl	ab08 <_Min_Stack_Size+0xa708>
    aae8:	2e000084 	cdpcs	0, 0, cr0, cr0, cr4, {4}
    aaec:	000019e8 	andeq	r1, r0, r8, ror #19
    aaf0:	00072a27 	andeq	r2, r7, r7, lsr #20
    aaf4:	0084b800 	addeq	fp, r4, r0, lsl #16
    aaf8:	17242900 	strne	r2, [r4, -r0, lsl #18]!
    aafc:	71820000 	orrvc	r0, r2, r0
    ab00:	1a100800 	bne	40cb08 <_Min_Stack_Size+0x40c708>
    ab04:	6b010000 	blvs	4ab0c <_Min_Stack_Size+0x4a70c>
    ab08:	17312709 	ldrne	r2, [r1, -r9, lsl #14]!
    ab0c:	85160000 	ldrhi	r0, [r6, #-0]
    ab10:	ce2a0000 	cdpgt	0, 2, cr0, cr10, cr0, {0}
    ab14:	0e080071 	mcreq	0, 0, r0, cr8, cr1, {3}
    ab18:	e4000000 	str	r0, [r0], #-0
    ab1c:	3c000020 	stccc	0, cr0, [r0], {32}
    ab20:	0000173e 	andeq	r1, r0, lr, lsr r7
    ab24:	00749102 	rsbseq	r9, r4, r2, lsl #2
    ab28:	0071ac2d 	rsbseq	sl, r1, sp, lsr #24
    ab2c:	00154608 	andseq	r4, r5, r8, lsl #12
    ab30:	0020f900 	eoreq	pc, r0, r0, lsl #18
    ab34:	50012100 	andpl	r2, r1, r0, lsl #2
    ab38:	5001f303 	andpl	pc, r1, r3, lsl #6
    ab3c:	71fa2800 	mvnsvc	r2, r0, lsl #16
    ab40:	13cd0800 	bicne	r0, sp, #0, 16
    ab44:	12200000 	eorne	r0, r0, #0
    ab48:	46080072 			; <UNDEFINED> instruction: 0x46080072
    ab4c:	21000015 	tstcs	r0, r5, lsl r0
    ab50:	f3035001 	vhadd.u8	d5, d3, d1
    ab54:	00005001 	andeq	r5, r0, r1
    ab58:	4f1e0000 	svcmi	0x001e0000
    ab5c:	0100002b 	tsteq	r0, fp, lsr #32
    ab60:	04da076a 	ldrbeq	r0, [sl], #1898	; 0x76a
    ab64:	72240000 	eorvc	r0, r4, #0
    ab68:	00060800 	andeq	r0, r6, r0, lsl #16
    ab6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ab70:	00002141 	andeq	r2, r0, r1, asr #2
    ab74:	0029ba1f 	eoreq	fp, r9, pc, lsl sl
    ab78:	076a0100 	strbeq	r0, [sl, -r0, lsl #2]!
    ab7c:	00000621 	andeq	r0, r0, r1, lsr #12
    ab80:	00008569 	andeq	r8, r0, r9, ror #10
    ab84:	2d791e00 	ldclcs	14, cr1, [r9, #-0]
    ab88:	76010000 	strvc	r0, [r1], -r0
    ab8c:	0000ce07 	andeq	ip, r0, r7, lsl #28
    ab90:	00722c00 	rsbseq	r2, r2, r0, lsl #24
    ab94:	00000408 	andeq	r0, r0, r8, lsl #8
    ab98:	6c9c0100 	ldfvss	f0, [ip], {0}
    ab9c:	1f000021 	svcne	0x00000021
    aba0:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    aba4:	21077601 	tstcs	r7, r1, lsl #12
    aba8:	8a000006 	bhi	abc8 <_Min_Stack_Size+0xa7c8>
    abac:	00000085 	andeq	r0, r0, r5, lsl #1
    abb0:	0007f33e 	andeq	pc, r7, lr, lsr r3	; <UNPREDICTABLE>
    abb4:	07440900 	strbeq	r0, [r4, -r0, lsl #18]
    abb8:	00002178 	andeq	r2, r0, r8, ror r1
    abbc:	0000c305 	andeq	ip, r0, r5, lsl #6
    abc0:	0cf73f00 	ldcleq	15, cr3, [r7]
    abc4:	4c0a0000 	stcmi	0, cr0, [sl], {-0}
    abc8:	000000ce 	andeq	r0, r0, lr, asr #1
    abcc:	000ea340 	andeq	sl, lr, r0, asr #6
    abd0:	ced00b00 	vfnmsgt.f64	d16, d0, d0
    abd4:	41000000 	mrsmi	r0, (UNDEF: 0)
    abd8:	00001d58 	andeq	r1, r0, r8, asr sp
    abdc:	1a02a007 	bne	b2c00 <_Min_Stack_Size+0xb2800>
    abe0:	b8000002 	stmdalt	r0, {r1}
    abe4:	13000021 	movwne	r0, #33	; 0x21
    abe8:	00000409 	andeq	r0, r0, r9, lsl #8
    abec:	0000ce13 	andeq	ip, r0, r3, lsl lr
    abf0:	00ce1300 	sbceq	r1, lr, r0, lsl #6
    abf4:	ce130000 	cdpgt	0, 1, cr0, cr3, cr0, {0}
    abf8:	00000000 	andeq	r0, r0, r0
    abfc:	0023e641 	eoreq	lr, r3, r1, asr #12
    ac00:	02a10700 	adceq	r0, r1, #0, 14
    ac04:	0000021a 	andeq	r0, r0, sl, lsl r2
    ac08:	000021ce 	andeq	r2, r0, lr, asr #3
    ac0c:	00040913 	andeq	r0, r4, r3, lsl r9
    ac10:	a9420000 	stmdbge	r2, {}^	; <UNPREDICTABLE>
    ac14:	07000019 	smladeq	r0, r9, r0, r0
    ac18:	021a02a2 	andseq	r0, sl, #536870922	; 0x2000000a
    ac1c:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    ac20:	00000004 	andeq	r0, r0, r4
    ac24:	002b5200 	eoreq	r5, fp, r0, lsl #4
    ac28:	8e000400 	cfcpyshi	mvf0, mvf0
    ac2c:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    ac30:	00029801 	andeq	r9, r2, r1, lsl #16
    ac34:	316d0100 	cmncc	sp, r0, lsl #2
    ac38:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    ac3c:	22c00000 	sbccs	r0, r0, #0
    ac40:	00000000 	andeq	r0, r0, r0
    ac44:	4f2f0000 	svcmi	0x002f0000
    ac48:	01020000 	mrseq	r0, (UNDEF: 2)
    ac4c:	02945502 	addseq	r5, r4, #8388608	; 0x800000
    ac50:	9b030000 	blls	cac58 <_Min_Stack_Size+0xca858>
    ac54:	72000009 	andvc	r0, r0, #9
    ac58:	00048d03 	andeq	r8, r4, r3, lsl #26
    ac5c:	bc037400 	cfstrslt	mvf7, [r3], {-0}
    ac60:	75000003 	strvc	r0, [r0, #-3]
    ac64:	0008f903 	andeq	pc, r8, r3, lsl #18
    ac68:	eb037600 	bl	e8470 <_Min_Stack_Size+0xe8070>
    ac6c:	7b000004 	blvc	ac84 <_Min_Stack_Size+0xa884>
    ac70:	0009fe03 	andeq	pc, r9, r3, lsl #28
    ac74:	22037c00 	andcs	r7, r3, #0, 24
    ac78:	7e000004 	cdpvc	0, 0, cr0, cr0, cr4, {0}
    ac7c:	0005e203 	andeq	lr, r5, r3, lsl #4
    ac80:	3e037f00 	cdpcc	15, 0, cr7, cr3, cr0, {0}
    ac84:	00000001 	andeq	r0, r0, r1
    ac88:	00002c03 	andeq	r2, r0, r3, lsl #24
    ac8c:	e1030100 	mrs	r0, (UNDEF: 19)
    ac90:	02000009 	andeq	r0, r0, #9
    ac94:	00013003 	andeq	r3, r1, r3
    ac98:	c2030300 	andgt	r0, r3, #0, 6
    ac9c:	04000008 	streq	r0, [r0], #-8
    aca0:	000b2703 	andeq	r2, fp, r3, lsl #14
    aca4:	48030500 	stmdami	r3, {r8, sl}
    aca8:	0600000a 	streq	r0, [r0], -sl
    acac:	000b4b03 	andeq	r4, fp, r3, lsl #22
    acb0:	67030700 	strvs	r0, [r3, -r0, lsl #14]
    acb4:	08000008 	stmdaeq	r0, {r3}
    acb8:	0006c403 	andeq	ip, r6, r3, lsl #8
    acbc:	09030900 	stmdbeq	r3, {r8, fp}
    acc0:	0a000008 	beq	ace8 <_Min_Stack_Size+0xa8e8>
    acc4:	00074d03 	andeq	r4, r7, r3, lsl #26
    acc8:	7a030b00 	bvc	cd8d0 <_Min_Stack_Size+0xcd4d0>
    accc:	0c000005 	stceq	0, cr0, [r0], {5}
    acd0:	0006d903 	andeq	sp, r6, r3, lsl #18
    acd4:	69030d00 	stmdbvs	r3, {r8, sl, fp}
    acd8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    acdc:	00069003 	andeq	r9, r6, r3
    ace0:	e4030f00 	str	r0, [r3], #-3840	; 0xfffff100
    ace4:	10000001 	andne	r0, r0, r1
    ace8:	00047b03 	andeq	r7, r4, r3, lsl #22
    acec:	da031100 	ble	cf0f4 <_Min_Stack_Size+0xcecf4>
    acf0:	1200000a 	andne	r0, r0, #10
    acf4:	00053103 	andeq	r3, r5, r3, lsl #2
    acf8:	1e031300 	cdpne	3, 0, cr1, cr3, cr0, {0}
    acfc:	14000000 	strne	r0, [r0], #-0
    ad00:	00004303 	andeq	r4, r0, r3, lsl #6
    ad04:	0b031500 	bleq	d010c <_Min_Stack_Size+0xcfd0c>
    ad08:	1600000b 	strne	r0, [r0], -fp
    ad0c:	0001f603 	andeq	pc, r1, r3, lsl #12
    ad10:	e0031700 	and	r1, r3, r0, lsl #14
    ad14:	18000007 	stmdane	r0, {r0, r1, r2}
    ad18:	00065e03 	andeq	r5, r6, r3, lsl #28
    ad1c:	46031900 	strmi	r1, [r3], -r0, lsl #18
    ad20:	1a000008 	bne	ad48 <_Min_Stack_Size+0xa948>
    ad24:	0005ef03 	andeq	lr, r5, r3, lsl #30
    ad28:	3e031b00 	vmlacc.f64	d1, d3, d0
    ad2c:	1c00000a 	stcne	0, cr0, [r0], {10}
    ad30:	000b4103 	andeq	r4, fp, r3, lsl #2
    ad34:	18031d00 	stmdane	r3, {r8, sl, fp, ip}
    ad38:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    ad3c:	00007b03 	andeq	r7, r0, r3, lsl #22
    ad40:	cd031f00 	stcgt	15, cr1, [r3, #-0]
    ad44:	2000000a 	andcs	r0, r0, sl
    ad48:	00068303 	andeq	r8, r6, r3, lsl #6
    ad4c:	08032100 	stmdaeq	r3, {r8, sp}
    ad50:	22000001 	andcs	r0, r0, #1
    ad54:	00057003 	andeq	r7, r5, r3
    ad58:	cf032300 	svcgt	0x00032300
    ad5c:	24000006 	strcs	r0, [r0], #-6
    ad60:	00016603 	andeq	r6, r1, r3, lsl #12
    ad64:	ed032500 	cfstr32	mvfx2, [r3, #-0]
    ad68:	26000008 	strcs	r0, [r0], -r8
    ad6c:	000a2203 	andeq	r2, sl, r3, lsl #4
    ad70:	47032700 	strmi	r2, [r3, -r0, lsl #14]
    ad74:	28000005 	stmdacs	r0, {r0, r2}
    ad78:	0000f903 	andeq	pc, r0, r3, lsl #18
    ad7c:	58032900 	stmdapl	r3, {r8, fp, sp}
    ad80:	2a000002 	bcs	ad90 <_Min_Stack_Size+0xa990>
    ad84:	0005b203 	andeq	fp, r5, r3, lsl #4
    ad88:	76032b00 	strvc	r2, [r3], -r0, lsl #22
    ad8c:	2c000002 	stccs	0, cr0, [r0], {2}
    ad90:	00060903 	andeq	r0, r6, r3, lsl #18
    ad94:	15032d00 	strne	r2, [r3, #-3328]	; 0xfffff300
    ad98:	2e000004 	cdpcs	0, 0, cr0, cr0, cr4, {0}
    ad9c:	00092203 	andeq	r2, r9, r3, lsl #4
    ada0:	5e032f00 	cdppl	15, 0, cr2, cr3, cr0, {0}
    ada4:	30000008 	andcc	r0, r0, r8
    ada8:	00014803 	andeq	r4, r1, r3, lsl #16
    adac:	ba033100 	blt	d71b4 <_Min_Stack_Size+0xd6db4>
    adb0:	32000006 	andcc	r0, r0, #6
    adb4:	0007b603 	andeq	fp, r7, r3, lsl #12
    adb8:	4d033300 	stcmi	3, cr3, [r3, #-0]
    adbc:	34000002 	strcc	r0, [r0], #-2
    adc0:	0006f903 	andeq	pc, r6, r3, lsl #18
    adc4:	37033500 	strcc	r3, [r3, -r0, lsl #10]
    adc8:	36000002 	strcc	r0, [r0], -r2
    adcc:	00096f03 	andeq	r6, r9, r3, lsl #30
    add0:	10033700 	andne	r3, r3, r0, lsl #14
    add4:	3800000a 	stmdacc	r0, {r1, r3}
    add8:	000ae303 	andeq	lr, sl, r3, lsl #6
    addc:	0a033900 	beq	d91e4 <_Min_Stack_Size+0xd8de4>
    ade0:	3a000005 	bcc	adfc <_Min_Stack_Size+0xa9fc>
    ade4:	00067103 	andeq	r7, r6, r3, lsl #2
    ade8:	c0033b00 	andgt	r3, r3, r0, lsl #22
    adec:	3c000007 	stccc	0, cr0, [r0], {7}
    adf0:	00065503 	andeq	r5, r6, r3, lsl #10
    adf4:	0c033d00 	stceq	13, cr3, [r3], {-0}
    adf8:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    adfc:	00070403 	andeq	r0, r7, r3, lsl #8
    ae00:	35033f00 	strcc	r3, [r3, #-3840]	; 0xfffff100
    ae04:	c0000000 	andgt	r0, r0, r0
    ae08:	018d0300 	orreq	r0, sp, r0, lsl #6
    ae0c:	00c10000 	sbceq	r0, r1, r0
    ae10:	000b1903 	andeq	r1, fp, r3, lsl #18
    ae14:	0300c200 	movweq	ip, #512	; 0x200
    ae18:	000008e1 	andeq	r0, r0, r1, ror #17
    ae1c:	990300c3 	stmdbls	r3, {r0, r1, r6, r7}
    ae20:	c4000000 	strgt	r0, [r0], #-0
    ae24:	00510300 	subseq	r0, r1, r0, lsl #6
    ae28:	00c50000 	sbceq	r0, r5, r0
    ae2c:	00042e03 	andeq	r2, r4, r3, lsl #28
    ae30:	0300c600 	movweq	ip, #1536	; 0x600
    ae34:	000006ae 	andeq	r0, r0, lr, lsr #13
    ae38:	af0300c7 	svcge	0x000300c7
    ae3c:	c8000004 	stmdagt	r0, {r2}
    ae40:	00630300 	rsbeq	r0, r3, r0, lsl #6
    ae44:	00c90000 	sbceq	r0, r9, r0
    ae48:	0004d703 	andeq	sp, r4, r3, lsl #14
    ae4c:	0300ca00 	movweq	ip, #2560	; 0xa00
    ae50:	00000979 	andeq	r0, r0, r9, ror r9
    ae54:	300300cb 	andcc	r0, r3, fp, asr #1
    ae58:	cc00000b 	stcgt	0, cr0, [r0], {11}
    ae5c:	07410300 	strbeq	r0, [r1, -r0, lsl #6]
    ae60:	00cd0000 	sbceq	r0, sp, r0
    ae64:	000a8803 	andeq	r8, sl, r3, lsl #16
    ae68:	0300ce00 	movweq	ip, #3584	; 0xe00
    ae6c:	00000814 	andeq	r0, r0, r4, lsl r8
    ae70:	c40300d0 	strgt	r0, [r3], #-208	; 0xffffff30
    ae74:	d100000a 	tstle	r0, sl
    ae78:	0a920300 	beq	fe48ba80 <_estack+0xde45ba80>
    ae7c:	00d20000 	sbcseq	r0, r2, r0
    ae80:	00007003 	andeq	r7, r0, r3
    ae84:	0300d300 	movweq	sp, #768	; 0x300
    ae88:	000000c5 	andeq	r0, r0, r5, asr #1
    ae8c:	da0300d4 	ble	cb1e4 <_Min_Stack_Size+0xcade4>
    ae90:	d5000001 	strle	r0, [r0, #-1]
    ae94:	04c60300 	strbeq	r0, [r6], #768	; 0x300
    ae98:	00d60000 	sbcseq	r0, r6, r0
    ae9c:	0004bc03 	andeq	fp, r4, r3, lsl #24
    aea0:	0300d700 	movweq	sp, #1792	; 0x700
    aea4:	0000075f 	andeq	r0, r0, pc, asr r7
    aea8:	f10300d8 			; <UNDEFINED> instruction: 0xf10300d8
    aeac:	d9000009 	stmdble	r0, {r0, r3}
    aeb0:	06410300 	strbeq	r0, [r1], -r0, lsl #6
    aeb4:	00da0000 	sbcseq	r0, sl, r0
    aeb8:	08d70400 	ldmeq	r7, {sl}^
    aebc:	ba020000 	blt	8aec4 <_Min_Stack_Size+0x8aac4>
    aec0:	00000025 	andeq	r0, r0, r5, lsr #32
    aec4:	d4060105 	strle	r0, [r6], #-261	; 0xfffffefb
    aec8:	04000007 	streq	r0, [r0], #-7
    aecc:	00000088 	andeq	r0, r0, r8, lsl #1
    aed0:	02b11d03 	adcseq	r1, r1, #3, 26	; 0xc0
    aed4:	01050000 	mrseq	r0, (UNDEF: 5)
    aed8:	0007d208 	andeq	sp, r7, r8, lsl #4
    aedc:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
    aee0:	00000822 	andeq	r0, r0, r2, lsr #16
    aee4:	00095b04 	andeq	r5, r9, r4, lsl #22
    aee8:	ca2b0300 	bgt	acbaf0 <_Min_Stack_Size+0xacb6f0>
    aeec:	05000002 	streq	r0, [r0, #-2]
    aef0:	04f70702 	ldrbteq	r0, [r7], #1794	; 0x702
    aef4:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    aef8:	03000005 	movweq	r0, #5
    aefc:	0002dc3f 	andeq	sp, r2, pc, lsr ip
    af00:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    af04:	00000445 	andeq	r0, r0, r5, asr #8
    af08:	0003b104 	andeq	fp, r3, r4, lsl #2
    af0c:	ee410300 	cdp	3, 4, cr0, cr1, cr0, {0}
    af10:	05000002 	streq	r0, [r0, #-2]
    af14:	00d40704 	sbcseq	r0, r4, r4, lsl #14
    af18:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    af1c:	00044005 	andeq	r4, r4, r5
    af20:	07080500 	streq	r0, [r8, -r0, lsl #10]
    af24:	000000cf 	andeq	r0, r0, pc, asr #1
    af28:	69050406 	stmdbvs	r5, {r1, r2, sl}
    af2c:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    af30:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    af34:	8a040000 	bhi	10af3c <_Min_Stack_Size+0x10ab3c>
    af38:	04000000 	streq	r0, [r0], #-0
    af3c:	0002a614 	andeq	sl, r2, r4, lsl r6
    af40:	095d0400 	ldmdbeq	sp, {sl}^
    af44:	1a040000 	bne	10af4c <_Min_Stack_Size+0x10ab4c>
    af48:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    af4c:	0005aa04 	andeq	sl, r5, r4, lsl #20
    af50:	d11f0400 	tstle	pc, r0, lsl #8
    af54:	04000002 	streq	r0, [r0], #-2
    af58:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    af5c:	02e32004 	rsceq	r2, r3, #4
    af60:	04050000 	streq	r0, [r5], #-0
    af64:	00064c07 	andeq	r4, r6, r7, lsl #24
    af68:	03320700 	teqeq	r2, #0, 14
    af6c:	32080000 	andcc	r0, r8, #0
    af70:	59000003 	stmdbpl	r0, {r0, r1}
    af74:	09000003 	stmdbeq	r0, {r0, r1}
    af78:	0000033d 	andeq	r0, r0, sp, lsr r3
    af7c:	1c070001 	stcne	0, cr0, [r7], {1}
    af80:	0a000003 	beq	af94 <_Min_Stack_Size+0xab94>
    af84:	01730218 	cmneq	r3, r8, lsl r2
    af88:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    af8c:	0052430b 	subseq	r4, r2, fp, lsl #6
    af90:	44017502 	strmi	r7, [r1], #-1282	; 0xfffffafe
    af94:	00000003 	andeq	r0, r0, r3
    af98:	001f640c 	andseq	r6, pc, ip, lsl #8
    af9c:	01760200 	cmneq	r6, r0, lsl #4
    afa0:	00000344 	andeq	r0, r0, r4, asr #6
    afa4:	41500b04 	cmpmi	r0, r4, lsl #22
    afa8:	77020052 	smlsdvc	r2, r2, r0, r0
    afac:	00034401 	andeq	r4, r3, r1, lsl #8
    afb0:	c40c0800 	strgt	r0, [ip], #-2048	; 0xfffff800
    afb4:	02000015 	andeq	r0, r0, #21
    afb8:	03440178 	movteq	r0, #16760	; 0x4178
    afbc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    afc0:	00001fcf 	andeq	r1, r0, pc, asr #31
    afc4:	44017902 	strmi	r7, [r1], #-2306	; 0xfffff6fe
    afc8:	10000003 	andne	r0, r0, r3
    afcc:	5243460b 	subpl	r4, r3, #11534336	; 0xb00000
    afd0:	017a0200 	cmneq	sl, r0, lsl #4
    afd4:	00000344 	andeq	r0, r0, r4, asr #6
    afd8:	820d0014 	andhi	r0, sp, #20
    afdc:	0200001f 	andeq	r0, r0, #31
    afe0:	035e017b 	cmpeq	lr, #-1073741794	; 0xc000001e
    afe4:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    afe8:	40025102 	andmi	r5, r2, r2, lsl #2
    afec:	0c000004 	stceq	0, cr0, [r0], {4}
    aff0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    aff4:	44025302 	strmi	r5, [r2], #-770	; 0xfffffcfe
    aff8:	00000003 	andeq	r0, r0, r3
    affc:	0000920c 	andeq	r9, r0, ip, lsl #4
    b000:	02540200 	subseq	r0, r4, #0, 4
    b004:	00000344 	andeq	r0, r0, r4, asr #6
    b008:	03a90c04 			; <UNDEFINED> instruction: 0x03a90c04
    b00c:	55020000 	strpl	r0, [r2, #-0]
    b010:	00034402 	andeq	r4, r3, r2, lsl #8
    b014:	000c0800 	andeq	r0, ip, r0, lsl #16
    b018:	02000000 	andeq	r0, r0, #0
    b01c:	03440256 	movteq	r0, #16982	; 0x4256
    b020:	0b0c0000 	bleq	30b028 <_Min_Stack_Size+0x30ac28>
    b024:	00524449 	subseq	r4, r2, r9, asr #8
    b028:	44025702 	strmi	r5, [r2], #-1794	; 0xfffff8fe
    b02c:	10000003 	andne	r0, r0, r3
    b030:	52444f0b 	subpl	r4, r4, #11, 30	; 0x2c
    b034:	02580200 	subseq	r0, r8, #0, 4
    b038:	00000344 	andeq	r0, r0, r4, asr #6
    b03c:	019b0c14 	orrseq	r0, fp, r4, lsl ip
    b040:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
    b044:	00034402 	andeq	r4, r3, r2, lsl #8
    b048:	190c1800 	stmdbne	ip, {fp, ip}
    b04c:	02000000 	andeq	r0, r0, #0
    b050:	0344025a 	movteq	r0, #16986	; 0x425a
    b054:	0b1c0000 	bleq	70b05c <_Min_Stack_Size+0x70ac5c>
    b058:	00524641 	subseq	r4, r2, r1, asr #12
    b05c:	40025b02 	andmi	r5, r2, r2, lsl #22
    b060:	20000004 	andcs	r0, r0, r4
    b064:	03490700 	movteq	r0, #38656	; 0x9700
    b068:	690d0000 	stmdbvs	sp, {}	; <UNPREDICTABLE>
    b06c:	02000002 	andeq	r0, r0, #2
    b070:	03c1025c 	biceq	r0, r1, #92, 4	; 0xc0000005
    b074:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    b078:	dc026f02 	stcle	15, cr6, [r2], {2}
    b07c:	0b000004 	bleq	b094 <_Min_Stack_Size+0xac94>
    b080:	00315243 	eorseq	r5, r1, r3, asr #4
    b084:	44027102 	strmi	r7, [r2], #-258	; 0xfffffefe
    b088:	00000003 	andeq	r0, r0, r3
    b08c:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    b090:	02720200 	rsbseq	r0, r2, #0, 4
    b094:	00000344 	andeq	r0, r0, r4, asr #6
    b098:	20c90c04 	sbccs	r0, r9, r4, lsl #24
    b09c:	73020000 	movwvc	r0, #8192	; 0x2000
    b0a0:	00034402 	andeq	r4, r3, r2, lsl #8
    b0a4:	ce0c0800 	cdpgt	8, 0, cr0, cr12, cr0, {0}
    b0a8:	02000020 	andeq	r0, r0, #32
    b0ac:	03440274 	movteq	r0, #17012	; 0x4274
    b0b0:	0b0c0000 	bleq	30b0b8 <_Min_Stack_Size+0x30acb8>
    b0b4:	02005244 	andeq	r5, r0, #68, 4	; 0x40000004
    b0b8:	03440275 	movteq	r0, #17013	; 0x4275
    b0bc:	0b100000 	bleq	40b0c4 <_Min_Stack_Size+0x40acc4>
    b0c0:	00315253 	eorseq	r5, r1, r3, asr r2
    b0c4:	44027602 	strmi	r7, [r2], #-1538	; 0xfffff9fe
    b0c8:	14000003 	strne	r0, [r0], #-3
    b0cc:	3252530b 	subscc	r5, r2, #738197504	; 0x2c000000
    b0d0:	02770200 	rsbseq	r0, r7, #0, 4
    b0d4:	00000344 	andeq	r0, r0, r4, asr #6
    b0d8:	43430b18 	movtmi	r0, #15128	; 0x3b18
    b0dc:	78020052 	stmdavc	r2, {r1, r4, r6}
    b0e0:	00034402 	andeq	r4, r3, r2, lsl #8
    b0e4:	b00c1c00 	andlt	r1, ip, r0, lsl #24
    b0e8:	02000016 	andeq	r0, r0, #22
    b0ec:	03440279 	movteq	r0, #17017	; 0x4279
    b0f0:	0c200000 	stceq	0, cr0, [r0], #-0
    b0f4:	000018a8 	andeq	r1, r0, r8, lsr #17
    b0f8:	44027a02 	strmi	r7, [r2], #-2562	; 0xfffff5fe
    b0fc:	24000003 	strcs	r0, [r0], #-3
    b100:	1d220d00 	stcne	13, cr0, [r2, #-0]
    b104:	7b020000 	blvc	8b10c <_Min_Stack_Size+0x8ad0c>
    b108:	00045102 	andeq	r5, r4, r2, lsl #2
    b10c:	02900a00 	addseq	r0, r0, #0, 20
    b110:	069102c7 	ldreq	r0, [r1], r7, asr #5
    b114:	430b0000 	movwmi	r0, #45056	; 0xb000
    b118:	c9020052 	stmdbgt	r2, {r1, r4, r6}
    b11c:	00034402 	andeq	r4, r3, r2, lsl #8
    b120:	450c0000 	strmi	r0, [ip, #-0]
    b124:	02000002 	andeq	r0, r0, #2
    b128:	034402ca 	movteq	r0, #17098	; 0x42ca
    b12c:	0c040000 	stceq	0, cr0, [r4], {-0}
    b130:	0000056b 	andeq	r0, r0, fp, ror #10
    b134:	4402cb02 	strmi	ip, [r2], #-2818	; 0xfffff4fe
    b138:	08000003 	stmdaeq	r0, {r0, r1}
    b13c:	5249430b 	subpl	r4, r9, #738197504	; 0x2c000000
    b140:	02cc0200 	sbceq	r0, ip, #0, 4
    b144:	00000344 	andeq	r0, r0, r4, asr #6
    b148:	01a00c0c 	lsleq	r0, ip, #24
    b14c:	cd020000 	stcgt	0, cr0, [r2, #-0]
    b150:	00034402 	andeq	r4, r3, r2, lsl #8
    b154:	660c1000 	strvs	r1, [ip], -r0
    b158:	02000009 	andeq	r0, r0, #9
    b15c:	034402ce 	movteq	r0, #17102	; 0x42ce
    b160:	0c140000 	ldceq	0, cr0, [r4], {-0}
    b164:	0000053e 	andeq	r0, r0, lr, lsr r5
    b168:	4402cf02 	strmi	ip, [r2], #-3842	; 0xfffff0fe
    b16c:	18000003 	stmdane	r0, {r0, r1}
    b170:	0007690c 	andeq	r6, r7, ip, lsl #18
    b174:	02d00200 	sbcseq	r0, r0, #0, 4
    b178:	00000332 	andeq	r0, r0, r2, lsr r3
    b17c:	072e0c1c 			; <UNDEFINED> instruction: 0x072e0c1c
    b180:	d1020000 	mrsle	r0, (UNDEF: 2)
    b184:	00034402 	andeq	r4, r3, r2, lsl #8
    b188:	c80c2000 	stmdagt	ip, {sp}
    b18c:	02000001 	andeq	r0, r0, #1
    b190:	034402d2 	movteq	r0, #17106	; 0x42d2
    b194:	0c240000 	stceq	0, cr0, [r4], #-0
    b198:	00000773 	andeq	r0, r0, r3, ror r7
    b19c:	4902d302 	stmdbmi	r2, {r1, r8, r9, ip, lr, pc}
    b1a0:	28000003 	stmdacs	r0, {r0, r1}
    b1a4:	000ab70c 	andeq	fp, sl, ip, lsl #14
    b1a8:	02d40200 	sbcseq	r0, r4, #0, 4
    b1ac:	00000344 	andeq	r0, r0, r4, asr #6
    b1b0:	09d90c30 	ldmibeq	r9, {r4, r5, sl, fp}^
    b1b4:	d5020000 	strle	r0, [r2, #-0]
    b1b8:	00034402 	andeq	r4, r3, r2, lsl #8
    b1bc:	ba0c3400 	blt	3181c4 <_Min_Stack_Size+0x317dc4>
    b1c0:	02000008 	andeq	r0, r0, #8
    b1c4:	034402d6 	movteq	r0, #17110	; 0x42d6
    b1c8:	0c380000 	ldceq	0, cr0, [r8], #-0
    b1cc:	0000077d 	andeq	r0, r0, sp, ror r7
    b1d0:	3202d702 	andcc	sp, r2, #524288	; 0x80000
    b1d4:	3c000003 	stccc	0, cr0, [r0], {3}
    b1d8:	0009d10c 	andeq	sp, r9, ip, lsl #2
    b1dc:	02d80200 	sbcseq	r0, r8, #0, 4
    b1e0:	00000344 	andeq	r0, r0, r4, asr #6
    b1e4:	08720c40 	ldmdaeq	r2!, {r6, sl, fp}^
    b1e8:	d9020000 	stmdble	r2, {}	; <UNPREDICTABLE>
    b1ec:	00034402 	andeq	r4, r3, r2, lsl #8
    b1f0:	cd0c4400 	cfstrsgt	mvf4, [ip, #-0]
    b1f4:	02000008 	andeq	r0, r0, #8
    b1f8:	034902da 	movteq	r0, #37594	; 0x92da
    b1fc:	0c480000 	mareq	acc0, r0, r8
    b200:	00000152 	andeq	r0, r0, r2, asr r1
    b204:	4402db02 	strmi	sp, [r2], #-2818	; 0xfffff4fe
    b208:	50000003 	andpl	r0, r0, r3
    b20c:	0007110c 	andeq	r1, r7, ip, lsl #2
    b210:	02dc0200 	sbcseq	r0, ip, #0, 4
    b214:	00000344 	andeq	r0, r0, r4, asr #6
    b218:	0a340c54 	beq	d0e370 <_Min_Stack_Size+0xd0df70>
    b21c:	dd020000 	stcle	0, cr0, [r2, #-0]
    b220:	00034402 	andeq	r4, r3, r2, lsl #8
    b224:	980c5800 	stmdals	ip, {fp, ip, lr}
    b228:	02000007 	andeq	r0, r0, #7
    b22c:	033202de 	teqeq	r2, #-536870899	; 0xe000000d
    b230:	0c5c0000 	mraeq	r0, ip, acc0
    b234:	0000051c 	andeq	r0, r0, ip, lsl r5
    b238:	4402df02 	strmi	sp, [r2], #-3842	; 0xfffff0fe
    b23c:	60000003 	andvs	r0, r0, r3
    b240:	00059e0c 	andeq	r9, r5, ip, lsl #28
    b244:	02e00200 	rsceq	r0, r0, #0, 4
    b248:	00000344 	andeq	r0, r0, r4, asr #6
    b24c:	07a20c64 	streq	r0, [r2, r4, ror #24]!
    b250:	e1020000 	mrs	r0, (UNDEF: 2)
    b254:	00034902 	andeq	r4, r3, r2, lsl #18
    b258:	670c6800 	strvs	r6, [ip, -r0, lsl #16]
    b25c:	0200000a 	andeq	r0, r0, #10
    b260:	034402e2 	movteq	r0, #17122	; 0x42e2
    b264:	0b700000 	bleq	1c0b26c <_Min_Stack_Size+0x1c0ae6c>
    b268:	00525343 	subseq	r5, r2, r3, asr #6
    b26c:	4402e302 	strmi	lr, [r2], #-770	; 0xfffffcfe
    b270:	74000003 	strvc	r0, [r0], #-3
    b274:	0007ac0c 	andeq	sl, r7, ip, lsl #24
    b278:	02e40200 	rsceq	r0, r4, #0, 4
    b27c:	00000349 	andeq	r0, r0, r9, asr #6
    b280:	0a2e0c78 	beq	b8e468 <_Min_Stack_Size+0xb8e068>
    b284:	e5020000 	str	r0, [r2, #-0]
    b288:	00034402 	andeq	r4, r3, r2, lsl #8
    b28c:	260c8000 	strcs	r8, [ip], -r0
    b290:	02000005 	andeq	r0, r0, #5
    b294:	034402e6 	movteq	r0, #17126	; 0x42e6
    b298:	0c840000 	stceq	0, cr0, [r4], {0}
    b29c:	00000565 	andeq	r0, r0, r5, ror #10
    b2a0:	4402e702 	strmi	lr, [r2], #-1794	; 0xfffff8fe
    b2a4:	88000003 	stmdahi	r0, {r0, r1}
    b2a8:	0001720c 	andeq	r7, r1, ip, lsl #4
    b2ac:	02e80200 	rsceq	r0, r8, #0, 4
    b2b0:	00000344 	andeq	r0, r0, r4, asr #6
    b2b4:	bc0d008c 	stclt	0, cr0, [sp], {140}	; 0x8c
    b2b8:	02000001 	andeq	r0, r0, #1
    b2bc:	04e802ea 	strbteq	r0, [r8], #746	; 0x2ea
    b2c0:	240a0000 	strcs	r0, [sl], #-0
    b2c4:	1a035102 	bne	df6d4 <_Min_Stack_Size+0xdf2d4>
    b2c8:	0b000007 	bleq	b2ec <_Min_Stack_Size+0xaeec>
    b2cc:	00315243 	eorseq	r5, r1, r3, asr #4
    b2d0:	44035302 	strmi	r5, [r3], #-770	; 0xfffffcfe
    b2d4:	00000003 	andeq	r0, r0, r3
    b2d8:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    b2dc:	03540200 	cmpeq	r4, #0, 4
    b2e0:	00000344 	andeq	r0, r0, r4, asr #6
    b2e4:	52530b04 	subspl	r0, r3, #4, 22	; 0x1000
    b2e8:	03550200 	cmpeq	r5, #0, 4
    b2ec:	00000344 	andeq	r0, r0, r4, asr #6
    b2f0:	52440b08 	subpl	r0, r4, #8, 22	; 0x2000
    b2f4:	03560200 	cmpeq	r6, #0, 4
    b2f8:	00000344 	andeq	r0, r0, r4, asr #6
    b2fc:	28e70c0c 	stmiacs	r7!, {r2, r3, sl, fp}^
    b300:	57020000 	strpl	r0, [r2, -r0]
    b304:	00034403 	andeq	r4, r3, r3, lsl #8
    b308:	5d0c1000 	stcpl	0, cr1, [ip, #-0]
    b30c:	02000028 	andeq	r0, r0, #40	; 0x28
    b310:	03440358 	movteq	r0, #17240	; 0x4358
    b314:	0c140000 	ldceq	0, cr0, [r4], {-0}
    b318:	00002a20 	andeq	r2, r0, r0, lsr #20
    b31c:	44035902 	strmi	r5, [r3], #-2306	; 0xfffff6fe
    b320:	18000003 	stmdane	r0, {r0, r1}
    b324:	0005290c 	andeq	r2, r5, ip, lsl #18
    b328:	035a0200 	cmpeq	sl, #0, 4
    b32c:	00000344 	andeq	r0, r0, r4, asr #6
    b330:	29bf0c1c 	ldmibcs	pc!, {r2, r3, r4, sl, fp}	; <UNPREDICTABLE>
    b334:	5b020000 	blpl	8b33c <_Min_Stack_Size+0x8af3c>
    b338:	00034403 	andeq	r4, r3, r3, lsl #8
    b33c:	0d002000 	stceq	0, cr2, [r0, #-0]
    b340:	000029fb 	strdeq	r2, [r0], -fp
    b344:	9d035c02 	stcls	12, cr5, [r3, #-8]
    b348:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    b34c:	08010504 	stmdaeq	r1, {r2, r8, sl}
    b350:	000007db 	ldrdeq	r0, [r0], -fp
    b354:	3a050102 	bcc	14b764 <_Min_Stack_Size+0x14b364>
    b358:	00000750 	andeq	r0, r0, r0, asr r7
    b35c:	0004d003 	andeq	sp, r4, r3
    b360:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    b364:	01000009 	tsteq	r0, r9
    b368:	00080003 	andeq	r0, r8, r3
    b36c:	a3030200 	movwge	r0, #12800	; 0x3200
    b370:	03000004 	movweq	r0, #4
    b374:	058c0400 	streq	r0, [ip, #1024]	; 0x400
    b378:	3f050000 	svccc	0x00050000
    b37c:	0000072f 	andeq	r0, r0, pc, lsr #14
    b380:	45050102 	strmi	r0, [r5, #-258]	; 0xfffffefe
    b384:	00000770 	andeq	r0, r0, r0, ror r7
    b388:	0018ad03 	andseq	sl, r8, r3, lsl #26
    b38c:	d0030000 	andle	r0, r3, r0
    b390:	0100001b 	tsteq	r0, fp, lsl r0
    b394:	17fb0400 	ldrbne	r0, [fp, r0, lsl #8]!
    b398:	48050000 	stmdami	r5, {}	; <UNPREDICTABLE>
    b39c:	0000075b 	andeq	r0, r0, fp, asr r7
    b3a0:	4106140f 	tstmi	r6, pc, lsl #8
    b3a4:	000007c0 	andeq	r0, r0, r0, asr #15
    b3a8:	6e695010 	mcrvs	0, 3, r5, cr9, cr0, {0}
    b3ac:	32430600 	subcc	r0, r3, #0, 12
    b3b0:	00000003 	andeq	r0, r0, r3
    b3b4:	002e1011 	eoreq	r1, lr, r1, lsl r0
    b3b8:	32460600 	subcc	r0, r6, #0, 12
    b3bc:	04000003 	streq	r0, [r0], #-3
    b3c0:	000abf11 	andeq	fp, sl, r1, lsl pc
    b3c4:	32490600 	subcc	r0, r9, #0, 12
    b3c8:	08000003 	stmdaeq	r0, {r0, r1}
    b3cc:	001c2111 	andseq	r2, ip, r1, lsl r1
    b3d0:	324c0600 	subcc	r0, ip, #0, 12
    b3d4:	0c000003 	stceq	0, cr0, [r0], {3}
    b3d8:	00015c11 	andeq	r5, r1, r1, lsl ip
    b3dc:	324f0600 	subcc	r0, pc, #0, 12
    b3e0:	10000003 	andne	r0, r0, r3
    b3e4:	07870400 	streq	r0, [r7, r0, lsl #8]
    b3e8:	51060000 	mrspl	r0, (UNDEF: 6)
    b3ec:	0000077b 	andeq	r0, r0, fp, ror r7
    b3f0:	57060102 	strpl	r0, [r6, -r2, lsl #2]
    b3f4:	000007e0 	andeq	r0, r0, r0, ror #15
    b3f8:	00144c03 	andseq	r4, r4, r3, lsl #24
    b3fc:	11030000 	mrsne	r0, (UNDEF: 3)
    b400:	01000014 	tsteq	r0, r4, lsl r0
    b404:	14af0400 	strtne	r0, [pc], #1024	; b40c <_Min_Stack_Size+0xb00c>
    b408:	5a060000 	bpl	18b410 <_Min_Stack_Size+0x18b010>
    b40c:	000007cb 	andeq	r0, r0, fp, asr #15
    b410:	4307300f 	movwmi	r3, #28687	; 0x700f
    b414:	00000884 	andeq	r0, r0, r4, lsl #17
    b418:	001d0411 	andseq	r0, sp, r1, lsl r4
    b41c:	32450700 	subcc	r0, r5, #0, 14
    b420:	00000003 	andeq	r0, r0, r3
    b424:	001fc511 	andseq	ip, pc, r1, lsl r5	; <UNPREDICTABLE>
    b428:	32480700 	subcc	r0, r8, #0, 14
    b42c:	04000003 	streq	r0, [r0], #-3
    b430:	00182511 	andseq	r2, r8, r1, lsl r5
    b434:	324c0700 	subcc	r0, ip, #0, 14
    b438:	08000003 	stmdaeq	r0, {r0, r1}
    b43c:	001dc311 	andseq	ip, sp, r1, lsl r3
    b440:	324f0700 	subcc	r0, pc, #0, 14
    b444:	0c000003 	stceq	0, cr0, [r0], {3}
    b448:	001fe411 	andseq	lr, pc, r1, lsl r4	; <UNPREDICTABLE>
    b44c:	32520700 	subscc	r0, r2, #0, 14
    b450:	10000003 	andne	r0, r0, r3
    b454:	001b4311 	andseq	r4, fp, r1, lsl r3
    b458:	32550700 	subscc	r0, r5, #0, 14
    b45c:	14000003 	strne	r0, [r0], #-3
    b460:	002e1011 	eoreq	r1, lr, r1, lsl r0
    b464:	32580700 	subscc	r0, r8, #0, 14
    b468:	18000003 	stmdane	r0, {r0, r1}
    b46c:	00126c11 	andseq	r6, r2, r1, lsl ip
    b470:	325d0700 	subscc	r0, sp, #0, 14
    b474:	1c000003 	stcne	0, cr0, [r0], {3}
    b478:	001e8711 	andseq	r8, lr, r1, lsl r7
    b47c:	32600700 	rsbcc	r0, r0, #0, 14
    b480:	20000003 	andcs	r0, r0, r3
    b484:	001e9a11 	andseq	r9, lr, r1, lsl sl
    b488:	32650700 	rsbcc	r0, r5, #0, 14
    b48c:	24000003 	strcs	r0, [r0], #-3
    b490:	00183f11 	andseq	r3, r8, r1, lsl pc
    b494:	32680700 	rsbcc	r0, r8, #0, 14
    b498:	28000003 	stmdacs	r0, {r0, r1}
    b49c:	00220011 	eoreq	r0, r2, r1, lsl r0
    b4a0:	326e0700 	rsbcc	r0, lr, #0, 14
    b4a4:	2c000003 	stccs	0, cr0, [r0], {3}
    b4a8:	15ee0400 	strbne	r0, [lr, #1024]!	; 0x400
    b4ac:	73070000 	movwvc	r0, #28672	; 0x7000
    b4b0:	000007eb 	andeq	r0, r0, fp, ror #15
    b4b4:	7a070102 	bvc	1cb8c4 <_Min_Stack_Size+0x1cb4c4>
    b4b8:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    b4bc:	00199503 	andseq	r9, r9, r3, lsl #10
    b4c0:	45030000 	strmi	r0, [r3, #-0]
    b4c4:	01000016 	tsteq	r0, r6, lsl r0
    b4c8:	001d8a03 	andseq	r8, sp, r3, lsl #20
    b4cc:	8f030200 	svchi	0x00030200
    b4d0:	03000020 	movweq	r0, #32
    b4d4:	00185703 	andseq	r5, r8, r3, lsl #14
    b4d8:	29030400 	stmdbcs	r3, {sl}
    b4dc:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    b4e0:	1d750400 	cfldrdne	mvd0, [r5, #-0]
    b4e4:	81070000 	mrshi	r0, (UNDEF: 7)
    b4e8:	0000088f 	andeq	r0, r0, pc, lsl #17
    b4ec:	0020a512 	eoreq	sl, r0, r2, lsl r5
    b4f0:	9d076000 	stcls	0, cr6, [r7, #-0]
    b4f4:	0000097c 	andeq	r0, r0, ip, ror r9
    b4f8:	001c9111 	andseq	r9, ip, r1, lsl r1
    b4fc:	7c9f0700 	ldcvc	7, cr0, [pc], {0}
    b500:	00000009 	andeq	r0, r0, r9
    b504:	00222d11 	eoreq	r2, r2, r1, lsl sp
    b508:	84a10700 	strthi	r0, [r1], #1792	; 0x700
    b50c:	04000008 	streq	r0, [r0], #-8
    b510:	00191911 	andseq	r1, r9, r1, lsl r9
    b514:	70a30700 	adcvc	r0, r3, r0, lsl #14
    b518:	34000007 	strcc	r0, [r0], #-7
    b51c:	00046311 	andeq	r6, r4, r1, lsl r3
    b520:	82a50700 	adchi	r0, r5, #0, 14
    b524:	35000009 	strcc	r0, [r0, #-9]
    b528:	0018f711 	andseq	pc, r8, r1, lsl r7	; <UNPREDICTABLE>
    b52c:	26a70700 	strtcs	r0, [r7], r0, lsl #14
    b530:	38000007 	stmdacc	r0, {r0, r1, r2}
    b534:	0021ef11 	eoreq	lr, r1, r1, lsl pc
    b538:	98a90700 	stmials	r9!, {r8, r9, sl}
    b53c:	3c000009 	stccc	0, cr0, [r0], {9}
    b540:	00176a11 	andseq	r6, r7, r1, lsl sl
    b544:	98ab0700 	stmials	fp!, {r8, r9, sl}
    b548:	40000009 	andmi	r0, r0, r9
    b54c:	0017d211 	andseq	sp, r7, r1, lsl r2
    b550:	98ad0700 	stmials	sp!, {r8, r9, sl}
    b554:	44000009 	strmi	r0, [r0], #-9
    b558:	001ced11 	andseq	lr, ip, r1, lsl sp
    b55c:	98af0700 	stmials	pc!, {r8, r9, sl}	; <UNPREDICTABLE>
    b560:	48000009 	stmdami	r0, {r0, r3}
    b564:	001bff11 	andseq	pc, fp, r1, lsl pc	; <UNPREDICTABLE>
    b568:	98b10700 	ldmls	r1!, {r8, r9, sl}
    b56c:	4c000009 	stcmi	0, cr0, [r0], {9}
    b570:	0021dd11 	eoreq	sp, r1, r1, lsl sp
    b574:	98b30700 	ldmls	r3!, {r8, r9, sl}
    b578:	50000009 	andpl	r0, r0, r9
    b57c:	001a4d11 	andseq	r4, sl, r1, lsl sp
    b580:	44b50700 	ldrtmi	r0, [r5], #1792	; 0x700
    b584:	54000003 	strpl	r0, [r0], #-3
    b588:	0018c811 	andseq	ip, r8, r1, lsl r8
    b58c:	32b70700 	adcscc	r0, r7, #0, 14
    b590:	58000003 	stmdapl	r0, {r0, r1}
    b594:	0019ba11 	andseq	fp, r9, r1, lsl sl
    b598:	32b90700 	adcscc	r0, r9, #0, 14
    b59c:	5c000003 	stcpl	0, cr0, [r0], {3}
    b5a0:	b5041300 	strlt	r1, [r4, #-768]	; 0xfffffd00
    b5a4:	07000003 	streq	r0, [r0, -r3]
    b5a8:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    b5ac:	00099214 	andeq	r9, r9, r4, lsl r2
    b5b0:	09921500 	ldmibeq	r2, {r8, sl, ip}
    b5b4:	13000000 	movwne	r0, #0
    b5b8:	0008c704 	andeq	ip, r8, r4, lsl #14
    b5bc:	87041300 	strhi	r1, [r4, -r0, lsl #6]
    b5c0:	04000009 	streq	r0, [r0], #-9
    b5c4:	000020a7 	andeq	r2, r0, r7, lsr #1
    b5c8:	08c7bb07 	stmiaeq	r7, {r0, r1, r2, r8, r9, fp, ip, sp, pc}^
    b5cc:	200f0000 	andcs	r0, pc, r0
    b5d0:	0a124108 	beq	49b9f8 <_Min_Stack_Size+0x49b5f8>
    b5d4:	1c110000 	ldcne	0, cr0, [r1], {-0}
    b5d8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    b5dc:	00033243 	andeq	r3, r3, r3, asr #4
    b5e0:	f5110000 			; <UNDEFINED> instruction: 0xf5110000
    b5e4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    b5e8:	00033246 	andeq	r3, r3, r6, asr #4
    b5ec:	69110400 	ldmdbvs	r1, {sl}
    b5f0:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    b5f4:	00033249 	andeq	r3, r3, r9, asr #4
    b5f8:	57110800 	ldrpl	r0, [r1, -r0, lsl #16]
    b5fc:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    b600:	0003324c 	andeq	r3, r3, ip, asr #4
    b604:	d4110c00 	ldrle	r0, [r1], #-3072	; 0xfffff400
    b608:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    b60c:	0003324f 	andeq	r3, r3, pc, asr #4
    b610:	b7111000 	ldrlt	r1, [r1, -r0]
    b614:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    b618:	00033252 	andeq	r3, r3, r2, asr r2
    b61c:	6e111400 	cfmulsvs	mvf1, mvf1, mvf0
    b620:	08000021 	stmdaeq	r0, {r0, r5}
    b624:	00033255 	andeq	r3, r3, r5, asr r2
    b628:	ba111800 	blt	451630 <_Min_Stack_Size+0x451230>
    b62c:	08000018 	stmdaeq	r0, {r3, r4}
    b630:	00033258 	andeq	r3, r3, r8, asr r2
    b634:	04001c00 	streq	r1, [r0], #-3072	; 0xfffff400
    b638:	00001c5e 	andeq	r1, r0, lr, asr ip
    b63c:	09a95b08 	stmibeq	r9!, {r3, r8, r9, fp, ip, lr}
    b640:	01020000 	mrseq	r0, (UNDEF: 2)
    b644:	0a6b7808 	beq	1ae966c <_Min_Stack_Size+0x1ae926c>
    b648:	1c030000 	stcne	0, cr0, [r3], {-0}
    b64c:	00000020 	andeq	r0, r0, r0, lsr #32
    b650:	00153503 	andseq	r3, r5, r3, lsl #10
    b654:	a4032000 	strge	r2, [r3], #-0
    b658:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    b65c:	001e7103 	andseq	r7, lr, r3, lsl #2
    b660:	79032100 	stmdbvc	r3, {r8, sp}
    b664:	22000020 	andcs	r0, r0, #32
    b668:	00217e03 	eoreq	r7, r1, r3, lsl #28
    b66c:	b3032800 	movwlt	r2, #14336	; 0x3800
    b670:	2900001b 	stmdbcs	r0, {r0, r1, r3, r4}
    b674:	001f3503 	andseq	r3, pc, r3, lsl #10
    b678:	29032a00 	stmdbcs	r3, {r9, fp, sp}
    b67c:	e000001e 	and	r0, r0, lr, lsl r0
    b680:	16c40300 	strbne	r0, [r4], r0, lsl #6
    b684:	01a00000 	moveq	r0, r0
    b688:	001ea803 	andseq	sl, lr, r3, lsl #16
    b68c:	0001e000 	andeq	lr, r1, r0
    b690:	00190404 	andseq	r0, r9, r4, lsl #8
    b694:	1d870800 	stcne	8, cr0, [r7]
    b698:	0200000a 	andeq	r0, r0, #10
    b69c:	989b0801 	ldmls	fp, {r0, fp}
    b6a0:	0300000a 	movweq	r0, #10
    b6a4:	00001db1 			; <UNDEFINED> instruction: 0x00001db1
    b6a8:	1f690300 	svcne	0x00690300
    b6ac:	03100000 	tsteq	r0, #0
    b6b0:	00001731 	andeq	r1, r0, r1, lsr r7
    b6b4:	186b0320 	stmdane	fp!, {r5, r8, r9}^
    b6b8:	00c00000 	sbceq	r0, r0, r0
    b6bc:	1d9d0400 	cfldrsne	mvf0, [sp]
    b6c0:	a1080000 	mrsge	r0, (UNDEF: 8)
    b6c4:	00000a76 	andeq	r0, r0, r6, ror sl
    b6c8:	a608540f 	strge	r5, [r8], -pc, lsl #8
    b6cc:	00000b78 	andeq	r0, r0, r8, ror fp
    b6d0:	001c9111 	andseq	r9, ip, r1, lsl r1
    b6d4:	78a80800 	stmiavc	r8!, {fp}
    b6d8:	0000000b 	andeq	r0, r0, fp
    b6dc:	00222d11 	eoreq	r2, r2, r1, lsl sp
    b6e0:	12aa0800 	adcne	r0, sl, #0, 16
    b6e4:	0400000a 	streq	r0, [r0], #-10
    b6e8:	001d2e11 	andseq	r2, sp, r1, lsl lr
    b6ec:	7eac0800 	cdpvc	8, 10, cr0, cr12, cr0, {0}
    b6f0:	2400000b 	strcs	r0, [r0], #-11
    b6f4:	002b4611 	eoreq	r4, fp, r1, lsl r6
    b6f8:	1cae0800 	stcne	8, cr0, [lr]
    b6fc:	28000003 	stmdacs	r0, {r0, r1}
    b700:	002e7a11 	eoreq	r7, lr, r1, lsl sl
    b704:	59b00800 	ldmibpl	r0!, {fp}
    b708:	2a000003 	bcs	b71c <_Min_Stack_Size+0xb31c>
    b70c:	001ba711 	andseq	sl, fp, r1, lsl r7
    b710:	44b20800 	ldrtmi	r0, [r2], #2048	; 0x800
    b714:	2c000003 	stccs	0, cr0, [r0], {3}
    b718:	0016b611 	andseq	fp, r6, r1, lsl r6
    b71c:	44b40800 	ldrtmi	r0, [r4], #2048	; 0x800
    b720:	30000003 	andcc	r0, r0, r3
    b724:	001c5711 	andseq	r5, ip, r1, lsl r7
    b728:	84b70800 	ldrthi	r0, [r7], #2048	; 0x800
    b72c:	3400000b 	strcc	r0, [r0], #-11
    b730:	00193711 	andseq	r3, r9, r1, lsl r7
    b734:	84b90800 	ldrthi	r0, [r9], #2048	; 0x800
    b738:	3800000b 	stmdacc	r0, {r0, r1, r3}
    b73c:	00191911 	andseq	r1, r9, r1, lsl r9
    b740:	70bb0800 	adcsvc	r0, fp, r0, lsl #16
    b744:	3c000007 	stccc	0, cr0, [r0], {7}
    b748:	00046311 	andeq	r6, r4, r1, lsl r3
    b74c:	8abd0800 	bhi	fef4d754 <_estack+0xdef1d754>
    b750:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
    b754:	002e1011 	eoreq	r1, lr, r1, lsl r0
    b758:	8fbf0800 	svchi	0x00bf0800
    b75c:	3e00000b 	cdpcc	0, 0, cr0, cr0, cr11, {0}
    b760:	001a4d11 	andseq	r4, sl, r1, lsl sp
    b764:	44c10800 	strbmi	r0, [r1], #2048	; 0x800
    b768:	40000003 	andmi	r0, r0, r3
    b76c:	001c1111 	andseq	r1, ip, r1, lsl r1
    b770:	44c30800 	strbmi	r0, [r3], #2048	; 0x800
    b774:	44000003 	strmi	r0, [r0], #-3
    b778:	001deb11 	andseq	lr, sp, r1, lsl fp
    b77c:	44c50800 	strbmi	r0, [r5], #2048	; 0x800
    b780:	48000003 	stmdami	r0, {r0, r1}
    b784:	00192c11 	andseq	r2, r9, r1, lsl ip
    b788:	44c70800 	strbmi	r0, [r7], #2048	; 0x800
    b78c:	4c000003 	stcmi	0, cr0, [r0], {3}
    b790:	001f9511 	andseq	r9, pc, r1, lsl r5	; <UNPREDICTABLE>
    b794:	44c90800 	strbmi	r0, [r9], #2048	; 0x800
    b798:	50000003 	andpl	r0, r0, r3
    b79c:	dc041300 	stcle	3, cr1, [r4], {-0}
    b7a0:	13000004 	movwne	r0, #4
    b7a4:	00031104 	andeq	r1, r3, r4, lsl #2
    b7a8:	9e041300 	cdpls	3, 0, cr1, cr4, cr0, {0}
    b7ac:	07000009 	streq	r0, [r0, -r9]
    b7b0:	00000a6b 	andeq	r0, r0, fp, ror #20
    b7b4:	000a9807 	andeq	r9, sl, r7, lsl #16
    b7b8:	1e490400 	cdpne	4, 4, cr0, cr9, cr0, {0}
    b7bc:	cb080000 	blgt	20b7c4 <_Min_Stack_Size+0x20b3c4>
    b7c0:	00000aa3 	andeq	r0, r0, r3, lsr #21
    b7c4:	41092c0f 	tstmi	r9, pc, lsl #24
    b7c8:	00000c2c 	andeq	r0, r0, ip, lsr #24
    b7cc:	002e1011 	eoreq	r1, lr, r1, lsl r0
    b7d0:	32430900 	subcc	r0, r3, #0, 18
    b7d4:	00000003 	andeq	r0, r0, r3
    b7d8:	001fc511 	andseq	ip, pc, r1, lsl r5	; <UNPREDICTABLE>
    b7dc:	32460900 	subcc	r0, r6, #0, 18
    b7e0:	04000003 	streq	r0, [r0], #-3
    b7e4:	002d3e11 	eoreq	r3, sp, r1, lsl lr
    b7e8:	32490900 	subcc	r0, r9, #0, 18
    b7ec:	08000003 	stmdaeq	r0, {r0, r1}
    b7f0:	002b1411 	eoreq	r1, fp, r1, lsl r4
    b7f4:	324c0900 	subcc	r0, ip, #0, 18
    b7f8:	0c000003 	stceq	0, cr0, [r0], {3}
    b7fc:	002c4911 	eoreq	r4, ip, r1, lsl r9
    b800:	324f0900 	subcc	r0, pc, #0, 18
    b804:	10000003 	andne	r0, r0, r3
    b808:	53534e10 	cmppl	r3, #16, 28	; 0x100
    b80c:	32520900 	subscc	r0, r2, #0, 18
    b810:	14000003 	strne	r0, [r0], #-3
    b814:	002b8411 	eoreq	r8, fp, r1, lsl r4
    b818:	32560900 	subscc	r0, r6, #0, 18
    b81c:	18000003 	stmdane	r0, {r0, r1}
    b820:	002c5211 	eoreq	r5, ip, r1, lsl r2
    b824:	325c0900 	subscc	r0, ip, #0, 18
    b828:	1c000003 	stcne	0, cr0, [r0], {3}
    b82c:	002e0e11 	eoreq	r0, lr, r1, lsl lr
    b830:	325f0900 	subscc	r0, pc, #0, 18
    b834:	20000003 	andcs	r0, r0, r3
    b838:	002e3811 	eoreq	r3, lr, r1, lsl r8
    b83c:	32620900 	rsbcc	r0, r2, #0, 18
    b840:	24000003 	strcs	r0, [r0], #-3
    b844:	0028d311 	eoreq	sp, r8, r1, lsl r3
    b848:	32650900 	rsbcc	r0, r5, #0, 18
    b84c:	28000003 	stmdacs	r0, {r0, r1}
    b850:	28640400 	stmdacs	r4!, {sl}^
    b854:	67090000 	strvs	r0, [r9, -r0]
    b858:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    b85c:	6d090102 	stfvss	f0, [r9, #-8]
    b860:	00000c6a 	andeq	r0, r0, sl, ror #24
    b864:	002cec03 	eoreq	lr, ip, r3, lsl #24
    b868:	fa030000 	blx	cb870 <_Min_Stack_Size+0xcb470>
    b86c:	0100002d 	tsteq	r0, sp, lsr #32
    b870:	002daf03 	eoreq	sl, sp, r3, lsl #30
    b874:	e5030200 	str	r0, [r3, #-512]	; 0xfffffe00
    b878:	03000029 	movweq	r0, #41	; 0x29
    b87c:	00287403 	eoreq	r7, r8, r3, lsl #8
    b880:	d3030400 	movwle	r0, #13312	; 0x3400
    b884:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    b888:	002c7d03 	eoreq	r7, ip, r3, lsl #26
    b88c:	04000600 	streq	r0, [r0], #-1536	; 0xfffffa00
    b890:	00002d9a 	muleq	r0, sl, sp
    b894:	0c377509 	cfldr32eq	mvfx7, [r7], #-36	; 0xffffffdc
    b898:	20120000 	andscs	r0, r2, r0
    b89c:	5800002b 	stmdapl	r0, {r0, r1, r3, r5}
    b8a0:	0d367a09 	vldmdbeq	r6!, {s14-s22}
    b8a4:	91110000 	tstls	r1, r0
    b8a8:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    b8ac:	000d367c 	andeq	r3, sp, ip, ror r6
    b8b0:	2d110000 	ldccs	0, cr0, [r1, #-0]
    b8b4:	09000022 	stmdbeq	r0, {r1, r5}
    b8b8:	000c2c7e 	andeq	r2, ip, lr, ror ip
    b8bc:	da110400 	ble	44c8c4 <_Min_Stack_Size+0x44c4c4>
    b8c0:	09000029 	stmdbeq	r0, {r0, r3, r5}
    b8c4:	000b7e80 	andeq	r7, fp, r0, lsl #29
    b8c8:	60113000 	andsvs	r3, r1, r0
    b8cc:	0900002b 	stmdbeq	r0, {r0, r1, r3, r5}
    b8d0:	00031c82 	andeq	r1, r3, r2, lsl #25
    b8d4:	71113400 	tstvc	r1, r0, lsl #8
    b8d8:	0900002c 	stmdbeq	r0, {r2, r3, r5}
    b8dc:	00035984 	andeq	r5, r3, r4, lsl #19
    b8e0:	2d113600 	ldccs	6, cr3, [r1, #-0]
    b8e4:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
    b8e8:	000b7e86 	andeq	r7, fp, r6, lsl #29
    b8ec:	44113800 	ldrmi	r3, [r1], #-2048	; 0xfffff800
    b8f0:	0900002b 	stmdbeq	r0, {r0, r1, r3, r5}
    b8f4:	00031c88 	andeq	r1, r3, r8, lsl #25
    b8f8:	78113c00 	ldmdavc	r1, {sl, fp, ip, sp}
    b8fc:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
    b900:	0003598a 	andeq	r5, r3, sl, lsl #19
    b904:	e1113e00 	tst	r1, r0, lsl #28
    b908:	09000028 	stmdbeq	r0, {r3, r5}
    b90c:	000d4d8c 	andeq	r4, sp, ip, lsl #27
    b910:	84114000 	ldrhi	r4, [r1], #-0
    b914:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
    b918:	000d4d8e 	andeq	r4, sp, lr, lsl #27
    b91c:	57114400 	ldrpl	r4, [r1, -r0, lsl #8]
    b920:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    b924:	000b8490 	muleq	fp, r0, r4
    b928:	37114800 	ldrcc	r4, [r1, -r0, lsl #16]
    b92c:	09000019 	stmdbeq	r0, {r0, r3, r4}
    b930:	000b8492 	muleq	fp, r2, r4
    b934:	19114c00 	ldmdbne	r1, {sl, fp, lr}
    b938:	09000019 	stmdbeq	r0, {r0, r3, r4}
    b93c:	00077094 	muleq	r7, r4, r0
    b940:	63115000 	tstvs	r1, #0
    b944:	09000004 	stmdbeq	r0, {r2}
    b948:	000d5396 	muleq	sp, r6, r3
    b94c:	4d115100 	ldfmis	f5, [r1, #-0]
    b950:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    b954:	00034498 	muleq	r3, r8, r4
    b958:	13005400 	movwne	r5, #1024	; 0x400
    b95c:	00071a04 	andeq	r1, r7, r4, lsl #20
    b960:	0d471400 	cfstrdeq	mvd1, [r7, #-0]
    b964:	47150000 	ldrmi	r0, [r5, -r0]
    b968:	0000000d 	andeq	r0, r0, sp
    b96c:	0c750413 	cfldrdeq	mvd0, [r5], #-76	; 0xffffffb4
    b970:	04130000 	ldreq	r0, [r3], #-0
    b974:	00000d3c 	andeq	r0, r0, ip, lsr sp
    b978:	000c6a07 	andeq	r6, ip, r7, lsl #20
    b97c:	2b220400 	blcs	88c984 <_Min_Stack_Size+0x88c584>
    b980:	9a090000 	bls	24b988 <_Min_Stack_Size+0x24b588>
    b984:	00000c75 	andeq	r0, r0, r5, ror ip
    b988:	420a0102 	andmi	r0, sl, #-2147483648	; 0x80000000
    b98c:	00000d78 	andeq	r0, r0, r8, ror sp
    b990:	00091303 	andeq	r1, r9, r3, lsl #6
    b994:	37030000 	strcc	r0, [r3, -r0]
    b998:	01000008 	tsteq	r0, r8
    b99c:	06a20400 	strteq	r0, [r2], r0, lsl #8
    b9a0:	450a0000 	strmi	r0, [sl, #-0]
    b9a4:	00000d63 	andeq	r0, r0, r3, ror #26
    b9a8:	480a0102 	stmdami	sl, {r1, r8}
    b9ac:	00000d92 	muleq	r0, r2, sp
    b9b0:	00306103 	eorseq	r6, r0, r3, lsl #2
    b9b4:	04000000 	streq	r0, [r0], #-0
    b9b8:	00002fa1 	andeq	r2, r0, r1, lsr #31
    b9bc:	0d834a0a 	vstreq	s8, [r3, #40]	; 0x28
    b9c0:	01020000 	mrseq	r0, (UNDEF: 2)
    b9c4:	0db24d0a 	ldceq	13, cr4, [r2, #40]!	; 0x28
    b9c8:	a7030000 	strge	r0, [r3, -r0]
    b9cc:	00000030 	andeq	r0, r0, r0, lsr r0
    b9d0:	00306c03 	eorseq	r6, r0, r3, lsl #24
    b9d4:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
    b9d8:	00002fca 	andeq	r2, r0, sl, asr #31
    b9dc:	0d9d500a 	ldceq	0, cr5, [sp, #40]	; 0x28
    b9e0:	1b160000 	blne	58b9e8 <_Min_Stack_Size+0x58b5e8>
    b9e4:	01000032 	tsteq	r0, r2, lsr r0
    b9e8:	030102e7 	movweq	r0, #4839	; 0x12e7
    b9ec:	1700000e 	strne	r0, [r0, -lr]
    b9f0:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    b9f4:	0302e701 	movweq	lr, #9985	; 0x2701
    b9f8:	1800000e 	stmdane	r0, {r1, r2, r3}
    b9fc:	000000e6 	andeq	r0, r0, r6, ror #1
    ba00:	c002e901 	andgt	lr, r2, r1, lsl #18
    ba04:	19000007 	stmdbne	r0, {r0, r1, r2}
    ba08:	00000df4 	strdeq	r0, [r0], -r4
    ba0c:	0001b518 	andeq	fp, r1, r8, lsl r5
    ba10:	02ec0100 	rsceq	r0, ip, #0, 2
    ba14:	00000344 	andeq	r0, r0, r4, asr #6
    ba18:	b5181a00 	ldrlt	r1, [r8, #-2560]	; 0xfffff600
    ba1c:	01000001 	tsteq	r0, r1
    ba20:	034402ef 	movteq	r0, #17135	; 0x42ef
    ba24:	00000000 	andeq	r0, r0, r0
    ba28:	0d580413 	cfldrdeq	mvd0, [r8, #-76]	; 0xffffffb4
    ba2c:	4c1b0000 	ldcmi	0, cr0, [fp], {-0}
    ba30:	01000031 	tsteq	r0, r1, lsr r0
    ba34:	1b01027a 	blne	4c424 <_Min_Stack_Size+0x4c024>
    ba38:	00003162 	andeq	r3, r0, r2, ror #2
    ba3c:	0102da01 	tsteq	r2, r1, lsl #20
    ba40:	00310b16 	eorseq	r0, r1, r6, lsl fp
    ba44:	02b50100 	adcseq	r0, r5, #0, 2
    ba48:	000e4101 	andeq	r4, lr, r1, lsl #2
    ba4c:	2f6a1700 	svccs	0x006a1700
    ba50:	b5010000 	strlt	r0, [r1, #-0]
    ba54:	00031c02 	andeq	r1, r3, r2, lsl #24
    ba58:	14451800 	strbne	r1, [r5], #-2048	; 0xfffff800
    ba5c:	b7010000 	strlt	r0, [r1, -r0]
    ba60:	00075002 	andeq	r5, r7, r2
    ba64:	071b0000 	ldreq	r0, [fp, -r0]
    ba68:	01000032 	tsteq	r0, r2, lsr r0
    ba6c:	1b0101a6 	blne	4c10c <_Min_Stack_Size+0x4bd0c>
    ba70:	00002f5c 	andeq	r2, r0, ip, asr pc
    ba74:	01026c01 	tsteq	r2, r1, lsl #24
    ba78:	0030271c 	eorseq	r2, r0, ip, lsl r7
    ba7c:	02c90100 	sbceq	r0, r9, #0, 2
    ba80:	00000311 	andeq	r0, r0, r1, lsl r3
    ba84:	000e7d01 	andeq	r7, lr, r1, lsl #26
    ba88:	30f31700 	rscscc	r1, r3, r0, lsl #14
    ba8c:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    ba90:	00031102 	andeq	r1, r3, r2, lsl #2
    ba94:	31ee1800 	mvncc	r1, r0, lsl #16
    ba98:	cb010000 	blgt	4baa0 <_Min_Stack_Size+0x4b6a0>
    ba9c:	00031102 	andeq	r1, r3, r2, lsl #2
    baa0:	fb160000 	blx	58baaa <_Min_Stack_Size+0x58b6aa>
    baa4:	0100002e 	tsteq	r0, lr, lsr #32
    baa8:	d5010134 	strle	r0, [r1, #-308]	; 0xfffffecc
    baac:	1700000e 	strne	r0, [r0, -lr]
    bab0:	00001f7d 	andeq	r1, r0, sp, ror pc
    bab4:	d5013401 	strle	r3, [r1, #-1025]	; 0xfffffbff
    bab8:	1800000e 	stmdane	r0, {r1, r2, r3}
    babc:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
    bac0:	c0013601 	andgt	r3, r1, r1, lsl #12
    bac4:	19000007 	stmdbne	r0, {r0, r1, r2}
    bac8:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    bacc:	0001b518 	andeq	fp, r1, r8, lsl r5
    bad0:	01430100 	mrseq	r0, (UNDEF: 83)
    bad4:	00000344 	andeq	r0, r0, r4, asr #6
    bad8:	0ec61900 	cdpeq	9, 12, cr1, cr6, cr0, {0}
    badc:	b5180000 	ldrlt	r0, [r8, #-0]
    bae0:	01000001 	tsteq	r0, r1
    bae4:	03440144 	movteq	r0, #16708	; 0x4144
    bae8:	1a000000 	bne	baf0 <_Min_Stack_Size+0xb6f0>
    baec:	0001b518 	andeq	fp, r1, r8, lsl r5
    baf0:	01550100 	cmpeq	r5, r0, lsl #2
    baf4:	00000344 	andeq	r0, r0, r4, asr #6
    baf8:	04130000 	ldreq	r0, [r3], #-0
    bafc:	00000b94 	muleq	r0, r4, fp
    bb00:	000e091d 	andeq	r0, lr, sp, lsl r9
    bb04:	00723000 	rsbseq	r3, r2, r0
    bb08:	0000a808 	andeq	sl, r0, r8, lsl #16
    bb0c:	7c9c0100 	ldfvcs	f0, [ip], {0}
    bb10:	1e00000f 	cdpne	0, 0, cr0, cr0, cr15, {0}
    bb14:	00000dbd 			; <UNDEFINED> instruction: 0x00000dbd
    bb18:	08007244 	stmdaeq	r0, {r2, r6, r9, ip, sp, lr}
    bb1c:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
    bb20:	57029601 	strpl	r9, [r2, -r1, lsl #12]
    bb24:	1f00000f 	svcne	0x0000000f
    bb28:	00000dca 	andeq	r0, r0, sl, asr #27
    bb2c:	000085ab 	andeq	r8, r0, fp, lsr #11
    bb30:	001bb820 	andseq	fp, fp, r0, lsr #16
    bb34:	0dd62100 	ldfeqe	f2, [r6]
    bb38:	91020000 	mrsls	r0, (UNDEF: 2)
    bb3c:	1c10224c 	lfmne	f2, 4, [r0], {76}	; 0x4c
    bb40:	0f2a0000 	svceq	0x002a0000
    bb44:	e7210000 	str	r0, [r1, -r0]!
    bb48:	0200000d 	andeq	r0, r0, #13
    bb4c:	22004491 	andcs	r4, r0, #-1862270976	; 0x91000000
    bb50:	00001c38 	andeq	r1, r0, r8, lsr ip
    bb54:	00000f3c 	andeq	r0, r0, ip, lsr pc
    bb58:	000df521 	andeq	pc, sp, r1, lsr #10
    bb5c:	48910200 	ldmmi	r1, {r9}
    bb60:	72bc2300 	adcsvc	r2, ip, #0, 6
    bb64:	29530800 	ldmdbcs	r3, {fp}^
    bb68:	01240000 			; <UNDEFINED> instruction: 0x01240000
    bb6c:	4c910251 	lfmmi	f0, 4, [r1], {81}	; 0x51
    bb70:	05500124 	ldrbeq	r0, [r0, #-292]	; 0xfffffedc
    bb74:	0214000c 	andseq	r0, r4, #12
    bb78:	00000040 	andeq	r0, r0, r0, asr #32
    bb7c:	00723e25 	rsbseq	r3, r2, r5, lsr #28
    bb80:	00296f08 	eoreq	r6, r9, r8, lsl #30
    bb84:	000f6b00 	andeq	r6, pc, r0, lsl #22
    bb88:	50012400 	andpl	r2, r1, r0, lsl #8
    bb8c:	00007402 	andeq	r7, r0, r2, lsl #8
    bb90:	0072c223 	rsbseq	ip, r2, r3, lsr #4
    bb94:	00298508 	eoreq	r8, r9, r8, lsl #10
    bb98:	50012400 	andpl	r2, r1, r0, lsl #8
    bb9c:	00007402 	andeq	r7, r0, r2, lsl #8
    bba0:	30c72600 	sbccc	r2, r7, r0, lsl #12
    bba4:	b4010000 	strlt	r0, [r1], #-0
    bba8:	00000332 	andeq	r0, r0, r2, lsr r3
    bbac:	080072d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp, lr}
    bbb0:	00000008 	andeq	r0, r0, r8
    bbb4:	fc279c01 	stc2	12, cr9, [r7], #-4
    bbb8:	01000005 	tsteq	r0, r5
    bbbc:	0072e0c0 	rsbseq	lr, r2, r0, asr #1
    bbc0:	00007808 	andeq	r7, r0, r8, lsl #16
    bbc4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    bbc8:	28000010 	stmdacs	r0, {r4}
    bbcc:	0064654c 	rsbeq	r6, r4, ip, asr #10
    bbd0:	0d78c001 	ldcleq	0, cr12, [r8, #-4]!
    bbd4:	85c30000 	strbhi	r0, [r3]
    bbd8:	b6290000 	strtlt	r0, [r9], -r0
    bbdc:	01000025 	tsteq	r0, r5, lsr #32
    bbe0:	0007c0c2 	andeq	ip, r7, r2, asr #1
    bbe4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    bbe8:	00731a2a 	rsbseq	r1, r3, sl, lsr #20
    bbec:	00001a08 	andeq	r1, r0, r8, lsl #20
    bbf0:	000fdf00 	andeq	sp, pc, r0, lsl #30
    bbf4:	01b52900 			; <UNDEFINED> instruction: 0x01b52900
    bbf8:	c5010000 	strgt	r0, [r1, #-0]
    bbfc:	00000344 	andeq	r0, r0, r4, asr #6
    bc00:	00589102 	subseq	r9, r8, r2, lsl #2
    bc04:	0073342a 	rsbseq	r3, r3, sl, lsr #8
    bc08:	00001608 	andeq	r1, r0, r8, lsl #12
    bc0c:	000ffb00 	andeq	pc, pc, r0, lsl #22
    bc10:	01b52900 			; <UNDEFINED> instruction: 0x01b52900
    bc14:	c5010000 	strgt	r0, [r1, #-0]
    bc18:	00000344 	andeq	r0, r0, r4, asr #6
    bc1c:	00549102 	subseq	r9, r4, r2, lsl #2
    bc20:	00730a25 	rsbseq	r0, r3, r5, lsr #20
    bc24:	00295308 	eoreq	r5, r9, r8, lsl #6
    bc28:	00100f00 	andseq	r0, r0, r0, lsl #30
    bc2c:	51012400 	tstpl	r1, r0, lsl #8
    bc30:	005c9102 	subseq	r9, ip, r2, lsl #2
    bc34:	00731623 	rsbseq	r1, r3, r3, lsr #12
    bc38:	00299b08 	eoreq	r9, r9, r8, lsl #22
    bc3c:	52012400 	andpl	r2, r1, #0, 8
    bc40:	01243001 			; <UNDEFINED> instruction: 0x01243001
    bc44:	00760251 	rsbseq	r0, r6, r1, asr r2
    bc48:	2c270000 	stccs	0, cr0, [r7], #-0
    bc4c:	01000008 	tsteq	r0, r8
    bc50:	007358d9 	ldrsbteq	r5, [r3], #-137	; 0xffffff77
    bc54:	00001c08 	andeq	r1, r0, r8, lsl #24
    bc58:	599c0100 	ldmibpl	ip, {r8}
    bc5c:	28000010 	stmdacs	r0, {r4}
    bc60:	0064654c 	rsbeq	r6, r4, ip, asr #10
    bc64:	0d78d901 	ldcleq	9, cr13, [r8, #-4]!
    bc68:	85ef0000 	strbhi	r0, [pc, #0]!	; bc70 <_Min_Stack_Size+0xb870>
    bc6c:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    bc70:	9b080073 	blls	20be44 <_Min_Stack_Size+0x20ba44>
    bc74:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    bc78:	31015201 	tstcc	r1, r1, lsl #4
    bc7c:	7d270000 	stcvc	0, cr0, [r7, #-0]
    bc80:	01000030 	tsteq	r0, r0, lsr r0
    bc84:	007374e5 	rsbseq	r7, r3, r5, ror #9
    bc88:	00001c08 	andeq	r1, r0, r8, lsl #24
    bc8c:	8d9c0100 	ldfhis	f0, [ip]
    bc90:	28000010 	stmdacs	r0, {r4}
    bc94:	0064654c 	rsbeq	r6, r4, ip, asr #10
    bc98:	0d78e501 	cfldr64eq	mvdx14, [r8, #-4]!
    bc9c:	86100000 	ldrhi	r0, [r0], -r0
    bca0:	882b0000 	stmdahi	fp!, {}	; <UNPREDICTABLE>
    bca4:	9b080073 	blls	20be78 <_Min_Stack_Size+0x20ba78>
    bca8:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    bcac:	30015201 	andcc	r5, r1, r1, lsl #4
    bcb0:	8c270000 	stchi	0, cr0, [r7], #-0
    bcb4:	01000009 	tsteq	r0, r9
    bcb8:	007390f1 	ldrshteq	r9, [r3], #-1
    bcbc:	00001c08 	andeq	r1, r0, r8, lsl #24
    bcc0:	bb9c0100 	bllt	fe70c0c8 <_estack+0xde6dc0c8>
    bcc4:	28000010 	stmdacs	r0, {r4}
    bcc8:	0064654c 	rsbeq	r6, r4, ip, asr #10
    bccc:	0d78f101 	ldfeqp	f7, [r8, #-4]!
    bcd0:	86310000 	ldrthi	r0, [r1], -r0
    bcd4:	a22c0000 	eorge	r0, ip, #0
    bcd8:	b6080073 			; <UNDEFINED> instruction: 0xb6080073
    bcdc:	00000029 	andeq	r0, r0, r9, lsr #32
    bce0:	00301b2d 	eorseq	r1, r0, sp, lsr #22
    bce4:	01000100 	mrseq	r0, (UNDEF: 16)
    bce8:	080073ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr}
    bcec:	00000078 	andeq	r0, r0, r8, ror r0
    bcf0:	11739c01 	cmnne	r3, r1, lsl #24
    bcf4:	ec2e0000 	stc	0, cr0, [lr], #-0
    bcf8:	01000030 	tsteq	r0, r0, lsr r0
    bcfc:	0d920100 	ldfeqs	f0, [r2]
    bd00:	86520000 	ldrbhi	r0, [r2], -r0
    bd04:	e12e0000 			; <UNDEFINED> instruction: 0xe12e0000
    bd08:	01000030 	tsteq	r0, r0, lsr r0
    bd0c:	0db20100 	ldfeqs	f0, [r2]
    bd10:	868c0000 	strhi	r0, [ip], r0
    bd14:	b62f0000 	strtlt	r0, [pc], -r0
    bd18:	01000025 	tsteq	r0, r5, lsr #32
    bd1c:	07c00102 	strbeq	r0, [r0, r2, lsl #2]
    bd20:	91020000 	mrsls	r0, (UNDEF: 2)
    bd24:	73b22a64 			; <UNDEFINED> instruction: 0x73b22a64
    bd28:	00160800 	andseq	r0, r6, r0, lsl #16
    bd2c:	111d0000 	tstne	sp, r0
    bd30:	b52f0000 	strlt	r0, [pc, #-0]!	; bd38 <_Min_Stack_Size+0xb938>
    bd34:	01000001 	tsteq	r0, r1
    bd38:	03440105 	movteq	r0, #16645	; 0x4105
    bd3c:	91020000 	mrsls	r0, (UNDEF: 2)
    bd40:	ea250060 	b	94bec8 <_Min_Stack_Size+0x94bac8>
    bd44:	53080073 	movwpl	r0, #32883	; 0x8073
    bd48:	31000029 	tstcc	r0, r9, lsr #32
    bd4c:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    bd50:	91025101 	tstls	r2, r1, lsl #2
    bd54:	04250064 	strteq	r0, [r5], #-100	; 0xffffff9c
    bd58:	53080074 	movwpl	r0, #32884	; 0x8074
    bd5c:	45000029 	strmi	r0, [r0, #-41]	; 0xffffffd7
    bd60:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    bd64:	91025101 	tstls	r2, r1, lsl #2
    bd68:	0e250064 	cdpeq	0, 2, cr0, cr5, cr4, {3}
    bd6c:	cc080074 	stcgt	0, cr0, [r8], {116}	; 0x74
    bd70:	63000029 	movwvs	r0, #41	; 0x29
    bd74:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    bd78:	74025201 	strvc	r5, [r2], #-513	; 0xfffffdff
    bd7c:	51012400 	tstpl	r1, r0, lsl #8
    bd80:	01243f01 			; <UNDEFINED> instruction: 0x01243f01
    bd84:	00360150 	eorseq	r0, r6, r0, asr r1
    bd88:	00741423 	rsbseq	r1, r4, r3, lsr #8
    bd8c:	0029e808 	eoreq	lr, r9, r8, lsl #16
    bd90:	50012400 	andpl	r2, r1, r0, lsl #8
    bd94:	00003601 	andeq	r3, r0, r1, lsl #12
    bd98:	00304730 	eorseq	r4, r0, r0, lsr r7
    bd9c:	01250100 			; <UNDEFINED> instruction: 0x01250100
    bda0:	00000332 	andeq	r0, r0, r2, lsr r3
    bda4:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
    bda8:	00000014 	andeq	r0, r0, r4, lsl r0
    bdac:	11ad9c01 			; <UNDEFINED> instruction: 0x11ad9c01
    bdb0:	ec2e0000 	stc	0, cr0, [lr], #-0
    bdb4:	01000030 	tsteq	r0, r0, lsr r0
    bdb8:	0d920125 	ldfeqs	f0, [r2, #148]	; 0x94
    bdbc:	86c60000 	strbhi	r0, [r6], r0
    bdc0:	32230000 	eorcc	r0, r3, #0
    bdc4:	fa080074 	blx	20bf9c <_Min_Stack_Size+0x20bb9c>
    bdc8:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    bdcc:	31015101 	tstcc	r1, r1, lsl #2
    bdd0:	8b2d0000 	blhi	b4bdd8 <_Min_Stack_Size+0xb4b9d8>
    bdd4:	0100002f 	tsteq	r0, pc, lsr #32
    bdd8:	743802ff 	ldrtvc	r0, [r8], #-767	; 0xfffffd01
    bddc:	00b80800 	adcseq	r0, r8, r0, lsl #16
    bde0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bde4:	000012c4 	andeq	r1, r0, r4, asr #5
    bde8:	0000e62f 	andeq	lr, r0, pc, lsr #12
    bdec:	03010100 	movweq	r0, #4352	; 0x1100
    bdf0:	000007c0 	andeq	r0, r0, r0, asr #15
    bdf4:	22549102 	subscs	r9, r4, #-2147483648	; 0x80000000
    bdf8:	00001c60 	andeq	r1, r0, r0, ror #24
    bdfc:	000011eb 	andeq	r1, r0, fp, ror #3
    be00:	0001b52f 	andeq	fp, r1, pc, lsr #10
    be04:	03080100 	movweq	r0, #33024	; 0x8100
    be08:	00000344 	andeq	r0, r0, r4, asr #6
    be0c:	00489102 	subeq	r9, r8, r2, lsl #2
    be10:	001c9022 	andseq	r9, ip, r2, lsr #32
    be14:	00120400 	andseq	r0, r2, r0, lsl #8
    be18:	01b52f00 			; <UNDEFINED> instruction: 0x01b52f00
    be1c:	0f010000 	svceq	0x00010000
    be20:	00034403 	andeq	r4, r3, r3, lsl #8
    be24:	4c910200 	lfmmi	f0, 4, [r1], {0}
    be28:	1cb82200 	lfmne	f2, 4, [r8]
    be2c:	121d0000 	andsne	r0, sp, #0
    be30:	b52f0000 	strlt	r0, [pc, #-0]!	; be38 <_Min_Stack_Size+0xba38>
    be34:	01000001 	tsteq	r0, r1
    be38:	03440317 	movteq	r0, #17175	; 0x4317
    be3c:	91020000 	mrsls	r0, (UNDEF: 2)
    be40:	74250050 	strtvc	r0, [r5], #-80	; 0xffffffb0
    be44:	53080074 	movwpl	r0, #32884	; 0x8074
    be48:	3a000029 	bcc	bef4 <_Min_Stack_Size+0xbaf4>
    be4c:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    be50:	91025101 	tstls	r2, r1, lsl #2
    be54:	50012454 	andpl	r2, r1, r4, asr r4
    be58:	0c000c05 	stceq	12, cr0, [r0], {5}
    be5c:	25004002 	strcs	r4, [r0, #-2]
    be60:	0800749c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, sp, lr}
    be64:	00002953 	andeq	r2, r0, r3, asr r9
    be68:	00001257 	andeq	r1, r0, r7, asr r2
    be6c:	02510124 	subseq	r0, r1, #36, 2
    be70:	01245491 			; <UNDEFINED> instruction: 0x01245491
    be74:	000c0550 	andeq	r0, ip, r0, asr r5
    be78:	0040020c 	subeq	r0, r0, ip, lsl #4
    be7c:	0074c225 	rsbseq	ip, r4, r5, lsr #4
    be80:	00295308 	eoreq	r5, r9, r8, lsl #6
    be84:	00127400 	andseq	r7, r2, r0, lsl #8
    be88:	51012400 	tstpl	r1, r0, lsl #8
    be8c:	24549102 	ldrbcs	r9, [r4], #-258	; 0xfffffefe
    be90:	0c055001 	stceq	0, cr5, [r5], {1}
    be94:	40020800 	andmi	r0, r2, r0, lsl #16
    be98:	74cc2500 	strbvc	r2, [ip], #1280	; 0x500
    be9c:	299b0800 	ldmibcs	fp, {fp}
    bea0:	12970000 	addsne	r0, r7, #0
    bea4:	01240000 			; <UNDEFINED> instruction: 0x01240000
    bea8:	00740252 	rsbseq	r0, r4, r2, asr r2
    beac:	02510124 	subseq	r0, r1, #36, 2
    beb0:	01240075 			; <UNDEFINED> instruction: 0x01240075
    beb4:	000c0550 	andeq	r0, ip, r0, asr r5
    beb8:	00400208 	subeq	r0, r0, r8, lsl #4
    bebc:	0074d625 	rsbseq	sp, r4, r5, lsr #12
    bec0:	00299b08 	eoreq	r9, r9, r8, lsl #22
    bec4:	0012ba00 	andseq	fp, r2, r0, lsl #20
    bec8:	52012400 	andpl	r2, r1, #0, 8
    becc:	24007602 	strcs	r7, [r0], #-1538	; 0xfffff9fe
    bed0:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    bed4:	50012400 	andpl	r2, r1, r0, lsl #8
    bed8:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
    bedc:	31004002 	tstcc	r0, r2
    bee0:	080074da 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, ip, sp, lr}
    bee4:	00000e09 	andeq	r0, r0, r9, lsl #28
    bee8:	30362d00 	eorscc	r2, r6, r0, lsl #26
    beec:	2b010000 	blcs	4bef4 <_Min_Stack_Size+0x4baf4>
    bef0:	0074f003 	rsbseq	pc, r4, r3
    bef4:	00005808 	andeq	r5, r0, r8, lsl #16
    bef8:	ee9c0100 	fmle	f0, f4, f0
    befc:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    bf00:	00002f67 	andeq	r2, r0, r7, ror #30
    bf04:	1c032b01 	stcne	11, cr2, [r3], {1}
    bf08:	e7000003 	str	r0, [r0, -r3]
    bf0c:	32000086 	andcc	r0, r0, #134	; 0x86
    bf10:	00000e1b 	andeq	r0, r0, fp, lsl lr
    bf14:	0800750e 	stmdaeq	r0, {r1, r2, r3, r8, sl, ip, sp, lr}
    bf18:	0000001c 	andeq	r0, r0, ip, lsl r0
    bf1c:	8c033201 	sfmhi	f3, 4, [r3], {1}
    bf20:	1f000013 	svcne	0x00000013
    bf24:	00000e28 	andeq	r0, r0, r8, lsr #28
    bf28:	00008708 	andeq	r8, r0, r8, lsl #14
    bf2c:	00750e33 	rsbseq	r0, r5, r3, lsr lr
    bf30:	00001c08 	andeq	r1, r0, r8, lsl #24
    bf34:	0e343400 	cfabsseq	mvf3, mvf4
    bf38:	87280000 	strhi	r0, [r8, -r0]!
    bf3c:	202a0000 	eorcs	r0, sl, r0
    bf40:	0a080075 	beq	20c11c <_Min_Stack_Size+0x20bd1c>
    bf44:	6c000000 	stcvs	0, cr0, [r0], {-0}
    bf48:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    bf4c:	00000e28 	andeq	r0, r0, r8, lsr #28
    bf50:	00752033 	rsbseq	r2, r5, r3, lsr r0
    bf54:	00000a08 	andeq	r0, r0, r8, lsl #20
    bf58:	0e343600 	cfmsuba32eq	mvax0, mvax3, mvfx4, mvfx0
    bf5c:	12370000 	eorsne	r0, r7, #0
    bf60:	2000000e 	andcs	r0, r0, lr
    bf64:	0a080075 	beq	20c140 <_Min_Stack_Size+0x20bd40>
    bf68:	01000000 	mrseq	r0, (UNDEF: 0)
    bf6c:	262502bf 			; <UNDEFINED> instruction: 0x262502bf
    bf70:	14080075 	strne	r0, [r8], #-117	; 0xffffff8b
    bf74:	6000002a 	andvs	r0, r0, sl, lsr #32
    bf78:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    bf7c:	03055001 	movweq	r5, #20481	; 0x5001
    bf80:	2000002c 	andcs	r0, r0, ip, lsr #32
    bf84:	752a3100 	strvc	r3, [sl, #-256]!	; 0xffffff00
    bf88:	0e090800 	cdpeq	8, 0, cr0, cr9, cr0, {0}
    bf8c:	00000000 	andeq	r0, r0, r0
    bf90:	751e2300 	ldrvc	r2, [lr, #-768]	; 0xfffffd00
    bf94:	2a2a0800 	bcs	a8df9c <_Min_Stack_Size+0xa8db9c>
    bf98:	01240000 			; <UNDEFINED> instruction: 0x01240000
    bf9c:	24310152 	ldrtcs	r0, [r1], #-338	; 0xfffffeae
    bfa0:	91025101 	tstls	r2, r1, lsl #2
    bfa4:	50012476 	andpl	r2, r1, r6, ror r4
    bfa8:	002c0305 	eoreq	r0, ip, r5, lsl #6
    bfac:	00002000 	andeq	r2, r0, r0
    bfb0:	75022500 	strvc	r2, [r2, #-1280]	; 0xfffffb00
    bfb4:	299b0800 	ldmibcs	fp, {fp}
    bfb8:	13af0000 			; <UNDEFINED> instruction: 0x13af0000
    bfbc:	01240000 			; <UNDEFINED> instruction: 0x01240000
    bfc0:	24310152 	ldrtcs	r0, [r1], #-338	; 0xfffffeae
    bfc4:	0a035101 	beq	e03d0 <_Min_Stack_Size+0xdffd0>
    bfc8:	01242000 			; <UNDEFINED> instruction: 0x01242000
    bfcc:	000c0550 	andeq	r0, ip, r0, asr r5
    bfd0:	0040020c 	subeq	r0, r0, ip, lsl #4
    bfd4:	00750c25 	rsbseq	r0, r5, r5, lsr #24
    bfd8:	00299b08 	eoreq	r9, r9, r8, lsl #22
    bfdc:	0013d000 	andseq	sp, r3, r0
    bfe0:	52012400 	andpl	r2, r1, #0, 8
    bfe4:	01243001 			; <UNDEFINED> instruction: 0x01243001
    bfe8:	24340151 	ldrtcs	r0, [r4], #-337	; 0xfffffeaf
    bfec:	0c055001 	stceq	0, cr5, [r5], {1}
    bff0:	40020800 	andmi	r0, r2, r0, lsl #16
    bff4:	75342300 	ldrvc	r2, [r4, #-768]!	; 0xfffffd00
    bff8:	299b0800 	ldmibcs	fp, {fp}
    bffc:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c000:	24310152 	ldrtcs	r0, [r1], #-338	; 0xfffffeae
    c004:	34015101 	strcc	r5, [r1], #-257	; 0xfffffeff
    c008:	05500124 	ldrbeq	r0, [r0, #-292]	; 0xfffffedc
    c00c:	0208000c 	andeq	r0, r8, #12
    c010:	2d000040 	stccs	0, cr0, [r0, #-256]	; 0xffffff00
    c014:	00002fba 			; <UNDEFINED> instruction: 0x00002fba
    c018:	48033b01 	stmdami	r3, {r0, r8, r9, fp, ip, sp}
    c01c:	58080075 	stmdapl	r8, {r0, r2, r4, r5, r6}
    c020:	01000000 	mrseq	r0, (UNDEF: 0)
    c024:	0015149c 	mulseq	r5, ip, r4
    c028:	65523800 	ldrbvs	r3, [r2, #-2048]	; 0xfffff800
    c02c:	3b010067 	blcc	4c1d0 <_Min_Stack_Size+0x4bdd0>
    c030:	00031103 	andeq	r1, r3, r3, lsl #2
    c034:	00874700 	addeq	r4, r7, r0, lsl #14
    c038:	0e1b1e00 	cdpeq	14, 1, cr1, cr11, cr0, {0}
    c03c:	75660000 	strbvc	r0, [r6, #-0]!
    c040:	1ce00800 	stclne	8, cr0, [r0]
    c044:	42010000 	andmi	r0, r1, #0
    c048:	0014b203 	andseq	fp, r4, r3, lsl #4
    c04c:	0e281f00 	cdpeq	15, 2, cr1, cr8, cr0, {0}
    c050:	87680000 	strbhi	r0, [r8, -r0]!
    c054:	e0200000 	eor	r0, r0, r0
    c058:	3400001c 	strcc	r0, [r0], #-28	; 0xffffffe4
    c05c:	00000e34 	andeq	r0, r0, r4, lsr lr
    c060:	00008788 	andeq	r8, r0, r8, lsl #15
    c064:	0075782a 	rsbseq	r7, r5, sl, lsr #16
    c068:	00000a08 	andeq	r0, r0, r8, lsl #20
    c06c:	00149200 	andseq	r9, r4, r0, lsl #4
    c070:	0e283500 	cfsh64eq	mvdx3, mvdx8, #0
    c074:	78330000 	ldmdavc	r3!, {}	; <UNPREDICTABLE>
    c078:	0a080075 	beq	20c254 <_Min_Stack_Size+0x20be54>
    c07c:	36000000 	strcc	r0, [r0], -r0
    c080:	00000e34 	andeq	r0, r0, r4, lsr lr
    c084:	000e1237 	andeq	r1, lr, r7, lsr r2
    c088:	00757800 	rsbseq	r7, r5, r0, lsl #16
    c08c:	00000a08 	andeq	r0, r0, r8, lsl #20
    c090:	02bf0100 	adcseq	r0, pc, #0, 2
    c094:	00757e25 	rsbseq	r7, r5, r5, lsr #28
    c098:	002a1408 	eoreq	r1, sl, r8, lsl #8
    c09c:	00148600 	andseq	r8, r4, r0, lsl #12
    c0a0:	50012400 	andpl	r2, r1, r0, lsl #8
    c0a4:	002c0305 	eoreq	r0, ip, r5, lsl #6
    c0a8:	31002000 	mrscc	r2, (UNDEF: 0)
    c0ac:	08007582 	stmdaeq	r0, {r1, r7, r8, sl, ip, sp, lr}
    c0b0:	00000e09 	andeq	r0, r0, r9, lsl #28
    c0b4:	23000000 	movwcs	r0, #0
    c0b8:	08007576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp, lr}
    c0bc:	00002a2a 	andeq	r2, r0, sl, lsr #20
    c0c0:	01520124 	cmpeq	r2, r4, lsr #2
    c0c4:	51012431 	tstpl	r1, r1, lsr r4
    c0c8:	24769102 	ldrbtcs	r9, [r6], #-258	; 0xfffffefe
    c0cc:	03055001 	movweq	r5, #20481	; 0x5001
    c0d0:	2000002c 	andcs	r0, r0, ip, lsr #32
    c0d4:	25000000 	strcs	r0, [r0, #-0]
    c0d8:	0800755a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip, sp, lr}
    c0dc:	0000299b 	muleq	r0, fp, r9
    c0e0:	000014d5 	ldrdeq	r1, [r0], -r5
    c0e4:	01520124 	cmpeq	r2, r4, lsr #2
    c0e8:	51012430 	tstpl	r1, r0, lsr r4
    c0ec:	20000a03 	andcs	r0, r0, r3, lsl #20
    c0f0:	05500124 	ldrbeq	r0, [r0, #-292]	; 0xfffffedc
    c0f4:	020c000c 	andeq	r0, ip, #12
    c0f8:	64250040 	strtvs	r0, [r5], #-64	; 0xffffffc0
    c0fc:	9b080075 	blls	20c2d8 <_Min_Stack_Size+0x20bed8>
    c100:	f6000029 			; <UNDEFINED> instruction: 0xf6000029
    c104:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
    c108:	30015201 	andcc	r5, r1, r1, lsl #4
    c10c:	01510124 	cmpeq	r1, r4, lsr #2
    c110:	50012434 	andpl	r2, r1, r4, lsr r4
    c114:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
    c118:	23004002 	movwcs	r4, #2
    c11c:	0800758c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, sp, lr}
    c120:	0000299b 	muleq	r0, fp, r9
    c124:	01520124 	cmpeq	r2, r4, lsr #2
    c128:	51012431 	tstpl	r1, r1, lsr r4
    c12c:	01243401 			; <UNDEFINED> instruction: 0x01243401
    c130:	000c0550 	andeq	r0, ip, r0, asr r5
    c134:	00400208 	subeq	r0, r0, r8, lsl #4
    c138:	2fb01c00 	svccs	0x00b01c00
    c13c:	a0010000 	andge	r0, r1, r0
    c140:	00033202 	andeq	r3, r3, r2, lsl #4
    c144:	154a0100 	strbne	r0, [sl, #-256]	; 0xffffff00
    c148:	4a170000 	bmi	5cc150 <_Min_Stack_Size+0x5cbd50>
    c14c:	0100002f 	tsteq	r0, pc, lsr #32
    c150:	031102a0 	tsteq	r1, #160, 4
    c154:	45180000 	ldrmi	r0, [r8, #-0]
    c158:	01000014 	tsteq	r0, r4, lsl r0
    c15c:	075002a2 	ldrbeq	r0, [r0, -r2, lsr #5]
    c160:	42180000 	andsmi	r0, r8, #0
    c164:	01000031 	tsteq	r0, r1, lsr r0
    c168:	033202a3 	teqeq	r2, #805306378	; 0x3000000a
    c16c:	30000000 	andcc	r0, r0, r0
    c170:	00003089 	andeq	r3, r0, r9, lsl #1
    c174:	32034e01 	andcc	r4, r3, #1, 28
    c178:	a0000003 	andge	r0, r0, r3
    c17c:	84080075 	strhi	r0, [r8], #-117	; 0xffffff8b
    c180:	01000000 	mrseq	r0, (UNDEF: 0)
    c184:	0017409c 	mulseq	r7, ip, r0
    c188:	2f672e00 	svccs	0x00672e00
    c18c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    c190:	00031c03 	andeq	r1, r3, r3, lsl #24
    c194:	0087a700 	addeq	sl, r7, r0, lsl #14
    c198:	2f4a2e00 	svccs	0x004a2e00
    c19c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    c1a0:	00031103 	andeq	r1, r3, r3, lsl #2
    c1a4:	0087c800 	addeq	ip, r7, r0, lsl #16
    c1a8:	31423900 	cmpcc	r2, r0, lsl #18
    c1ac:	50010000 	andpl	r0, r1, r0
    c1b0:	00033203 	andeq	r3, r3, r3, lsl #4
    c1b4:	0087e900 	addeq	lr, r7, r0, lsl #18
    c1b8:	0e1b1e00 	cdpeq	14, 1, cr1, cr11, cr0, {0}
    c1bc:	75ac0000 	strvc	r0, [ip, #0]!
    c1c0:	1cf80800 	ldclne	8, cr0, [r8]
    c1c4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    c1c8:	00163203 	andseq	r3, r6, r3, lsl #4
    c1cc:	0e281f00 	cdpeq	15, 2, cr1, cr8, cr0, {0}
    c1d0:	87fd0000 	ldrbhi	r0, [sp, r0]!
    c1d4:	f8200000 			; <UNDEFINED> instruction: 0xf8200000
    c1d8:	3400001c 	strcc	r0, [r0], #-28	; 0xffffffe4
    c1dc:	00000e34 	andeq	r0, r0, r4, lsr lr
    c1e0:	0000881d 	andeq	r8, r0, sp, lsl r8
    c1e4:	0075d22a 	rsbseq	sp, r5, sl, lsr #4
    c1e8:	00000a08 	andeq	r0, r0, r8, lsl #20
    c1ec:	00161200 	andseq	r1, r6, r0, lsl #4
    c1f0:	0e283500 	cfsh64eq	mvdx3, mvdx8, #0
    c1f4:	d2330000 	eorsle	r0, r3, #0
    c1f8:	0a080075 	beq	20c3d4 <_Min_Stack_Size+0x20bfd4>
    c1fc:	36000000 	strcc	r0, [r0], -r0
    c200:	00000e34 	andeq	r0, r0, r4, lsr lr
    c204:	000e1237 	andeq	r1, lr, r7, lsr r2
    c208:	0075d200 	rsbseq	sp, r5, r0, lsl #4
    c20c:	00000a08 	andeq	r0, r0, r8, lsl #20
    c210:	02bf0100 	adcseq	r0, pc, #0, 2
    c214:	0075d825 	rsbseq	sp, r5, r5, lsr #16
    c218:	002a1408 	eoreq	r1, sl, r8, lsl #8
    c21c:	00160600 	andseq	r0, r6, r0, lsl #12
    c220:	50012400 	andpl	r2, r1, r0, lsl #8
    c224:	002c0305 	eoreq	r0, ip, r5, lsl #6
    c228:	31002000 	mrscc	r2, (UNDEF: 0)
    c22c:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
    c230:	00000e09 	andeq	r0, r0, r9, lsl #28
    c234:	23000000 	movwcs	r0, #0
    c238:	080075d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip, sp, lr}
    c23c:	00002a2a 	andeq	r2, r0, sl, lsr #20
    c240:	01520124 	cmpeq	r2, r4, lsr #2
    c244:	51012431 	tstpl	r1, r1, lsr r4
    c248:	246a9102 	strbtcs	r9, [sl], #-258	; 0xfffffefe
    c24c:	03055001 	movweq	r5, #20481	; 0x5001
    c250:	2000002c 	andcs	r0, r0, ip, lsr #32
    c254:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    c258:	00001514 	andeq	r1, r0, r4, lsl r5
    c25c:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
    c260:	00001d10 	andeq	r1, r0, r0, lsl sp
    c264:	bb035a01 	bllt	e2a70 <_Min_Stack_Size+0xe2670>
    c268:	1f000016 	svcne	0x00000016
    c26c:	00001525 	andeq	r1, r0, r5, lsr #10
    c270:	0000883c 	andeq	r8, r0, ip, lsr r8
    c274:	001d1020 	andseq	r1, sp, r0, lsr #32
    c278:	15313400 	ldrne	r3, [r1, #-1024]!	; 0xfffffc00
    c27c:	884f0000 	stmdahi	pc, {}^	; <UNPREDICTABLE>
    c280:	3d210000 	stccc	0, cr0, [r1, #-0]
    c284:	02000015 	andeq	r0, r0, #21
    c288:	12326c91 	eorsne	r6, r2, #37120	; 0x9100
    c28c:	ea00000e 	b	c2cc <_Min_Stack_Size+0xbecc>
    c290:	0a080075 	beq	20c46c <_Min_Stack_Size+0x20c06c>
    c294:	01000000 	mrseq	r0, (UNDEF: 0)
    c298:	169a02ab 	ldrne	r0, [sl], fp, lsr #5
    c29c:	f0250000 			; <UNDEFINED> instruction: 0xf0250000
    c2a0:	14080075 	strne	r0, [r8], #-117	; 0xffffff8b
    c2a4:	9000002a 	andls	r0, r0, sl, lsr #32
    c2a8:	24000016 	strcs	r0, [r0], #-22	; 0xffffffea
    c2ac:	03055001 	movweq	r5, #20481	; 0x5001
    c2b0:	2000002c 	andcs	r0, r0, ip, lsr #32
    c2b4:	75f43100 	ldrbvc	r3, [r4, #256]!	; 0x100
    c2b8:	0e090800 	cdpeq	8, 0, cr0, cr9, cr0, {0}
    c2bc:	23000000 	movwcs	r0, #0
    c2c0:	080075e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip, sp, lr}
    c2c4:	00002a4f 	andeq	r2, r0, pc, asr #20
    c2c8:	02520124 	subseq	r0, r2, #36, 2
    c2cc:	01240075 			; <UNDEFINED> instruction: 0x01240075
    c2d0:	6c910251 	lfmvs	f0, 4, [r1], {81}	; 0x51
    c2d4:	05500124 	ldrbeq	r0, [r0, #-292]	; 0xfffffedc
    c2d8:	00002c03 	andeq	r2, r0, r3, lsl #24
    c2dc:	00000020 	andeq	r0, r0, r0, lsr #32
    c2e0:	0075b425 	rsbseq	fp, r5, r5, lsr #8
    c2e4:	00299b08 	eoreq	r9, r9, r8, lsl #22
    c2e8:	0016dc00 	andseq	sp, r6, r0, lsl #24
    c2ec:	52012400 	andpl	r2, r1, #0, 8
    c2f0:	01243001 			; <UNDEFINED> instruction: 0x01243001
    c2f4:	24340151 	ldrtcs	r0, [r4], #-337	; 0xfffffeaf
    c2f8:	0c055001 	stceq	0, cr5, [r5], {1}
    c2fc:	40020800 	andmi	r0, r2, r0, lsl #16
    c300:	75c02500 	strbvc	r2, [r0, #1280]	; 0x500
    c304:	299b0800 	ldmibcs	fp, {fp}
    c308:	16ff0000 	ldrbtne	r0, [pc], r0
    c30c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c310:	24300152 	ldrtcs	r0, [r0], #-338	; 0xfffffeae
    c314:	0a035101 	beq	e0720 <_Min_Stack_Size+0xe0320>
    c318:	01242000 			; <UNDEFINED> instruction: 0x01242000
    c31c:	000c0550 	andeq	r0, ip, r0, asr r5
    c320:	0040020c 	subeq	r0, r0, ip, lsl #4
    c324:	00760225 	rsbseq	r0, r6, r5, lsr #4
    c328:	00299b08 	eoreq	r9, r9, r8, lsl #22
    c32c:	00172200 	andseq	r2, r7, r0, lsl #4
    c330:	52012400 	andpl	r2, r1, #0, 8
    c334:	01243101 			; <UNDEFINED> instruction: 0x01243101
    c338:	000a0351 	andeq	r0, sl, r1, asr r3
    c33c:	50012420 	andpl	r2, r1, r0, lsr #8
    c340:	0c000c05 	stceq	12, cr0, [r0], {5}
    c344:	23004002 	movwcs	r4, #2
    c348:	0800760c 	stmdaeq	r0, {r2, r3, r9, sl, ip, sp, lr}
    c34c:	0000299b 	muleq	r0, fp, r9
    c350:	01520124 	cmpeq	r2, r4, lsr #2
    c354:	51012431 	tstpl	r1, r1, lsr r4
    c358:	01243401 			; <UNDEFINED> instruction: 0x01243401
    c35c:	000c0550 	andeq	r0, ip, r0, asr r5
    c360:	00400208 	subeq	r0, r0, r8, lsl #4
    c364:	31222d00 			; <UNDEFINED> instruction: 0x31222d00
    c368:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    c36c:	00762403 	rsbseq	r2, r6, r3, lsl #8
    c370:	00000408 	andeq	r0, r0, r8, lsl #8
    c374:	789c0100 	ldmvc	ip, {r8}
    c378:	2e000017 	mcrcs	0, 0, r0, cr0, cr7, {0}
    c37c:	00003126 	andeq	r3, r0, r6, lsr #2
    c380:	32036901 	andcc	r6, r3, #16384	; 0x4000
    c384:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    c388:	2b000088 	blcs	c5b0 <_Min_Stack_Size+0xc1b0>
    c38c:	08007628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp, lr}
    c390:	00002a74 	andeq	r2, r0, r4, ror sl
    c394:	03500124 	cmpeq	r0, #36, 2
    c398:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    c39c:	2f412d00 	svccs	0x00412d00
    c3a0:	77010000 	strvc	r0, [r1, -r0]
    c3a4:	00762803 	rsbseq	r2, r6, r3, lsl #16
    c3a8:	0000f408 	andeq	pc, r0, r8, lsl #8
    c3ac:	c89c0100 	ldmgt	ip, {r8}
    c3b0:	3a000018 	bcc	c418 <_Min_Stack_Size+0xc018>
    c3b4:	00000e41 	andeq	r0, r0, r1, asr #28
    c3b8:	0800762c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, sp, lr}
    c3bc:	00001d28 	andeq	r1, r0, r8, lsr #26
    c3c0:	1e037901 	cdpne	9, 0, cr7, cr3, cr1, {0}
    c3c4:	00000e7d 	andeq	r0, r0, sp, ror lr
    c3c8:	0800763c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, sp, lr}
    c3cc:	00001d40 	andeq	r1, r0, r0, asr #26
    c3d0:	a201b501 	andge	fp, r1, #4194304	; 0x400000
    c3d4:	1f000018 	svcne	0x00000018
    c3d8:	00000e8a 	andeq	r0, r0, sl, lsl #29
    c3dc:	0000888f 	andeq	r8, r0, pc, lsl #17
    c3e0:	001d4020 	andseq	r4, sp, r0, lsr #32
    c3e4:	0e962100 	fmleqs	f2, f6, f0
    c3e8:	91020000 	mrsls	r0, (UNDEF: 2)
    c3ec:	1d98224c 	lfmne	f2, 4, [r8, #304]	; 0x130
    c3f0:	17da0000 	ldrbne	r0, [sl, r0]
    c3f4:	a7210000 	strge	r0, [r1, -r0]!
    c3f8:	0200000e 	andeq	r0, r0, #14
    c3fc:	22004091 	andcs	r4, r0, #145	; 0x91
    c400:	00001dc0 	andeq	r1, r0, r0, asr #27
    c404:	000017ec 	andeq	r1, r0, ip, ror #15
    c408:	000eb921 	andeq	fp, lr, r1, lsr #18
    c40c:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    c410:	76b42a00 	ldrtvc	r2, [r4], r0, lsl #20
    c414:	00140800 	andseq	r0, r4, r0, lsl #16
    c418:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    c41c:	c7210000 	strgt	r0, [r1, -r0]!
    c420:	0200000e 	andeq	r0, r0, #14
    c424:	25004891 	strcs	r4, [r0, #-2193]	; 0xfffff76f
    c428:	080076a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip, sp, lr}
    c42c:	00002953 	andeq	r2, r0, r3, asr r9
    c430:	0000181f 	andeq	r1, r0, pc, lsl r8
    c434:	02510124 	subseq	r0, r1, #36, 2
    c438:	01244c91 			; <UNDEFINED> instruction: 0x01244c91
    c43c:	000c0550 	andeq	r0, ip, r0, asr r5
    c440:	00400200 	subeq	r0, r0, r0, lsl #4
    c444:	0076b425 	rsbseq	fp, r6, r5, lsr #8
    c448:	00295308 	eoreq	r5, r9, r8, lsl #6
    c44c:	00183c00 	andseq	r3, r8, r0, lsl #24
    c450:	51012400 	tstpl	r1, r0, lsl #8
    c454:	244c9102 	strbcs	r9, [ip], #-258	; 0xfffffefe
    c458:	0c055001 	stceq	0, cr5, [r5], {1}
    c45c:	40020800 	andmi	r0, r2, r0, lsl #16
    c460:	76e22500 	strbtvc	r2, [r2], r0, lsl #10
    c464:	29cc0800 	stmibcs	ip, {fp}^
    c468:	185c0000 	ldmdane	ip, {}^	; <UNPREDICTABLE>
    c46c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c470:	00740252 	rsbseq	r0, r4, r2, asr r2
    c474:	02510124 	subseq	r0, r1, #36, 2
    c478:	01240074 			; <UNDEFINED> instruction: 0x01240074
    c47c:	48080250 	stmdami	r8, {r4, r6, r9}
    c480:	76e82500 	strbtvc	r2, [r8], r0, lsl #10
    c484:	29e80800 	stmibcs	r8!, {fp}^
    c488:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    c48c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c490:	48080250 	stmdami	r8, {r4, r6, r9}
    c494:	76f22500 	ldrbtvc	r2, [r2], r0, lsl #10
    c498:	29cc0800 	stmibcs	ip, {fp}^
    c49c:	18900000 	ldmne	r0, {}	; <UNPREDICTABLE>
    c4a0:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c4a4:	00740252 	rsbseq	r0, r4, r2, asr r2
    c4a8:	02510124 	subseq	r0, r1, #36, 2
    c4ac:	01240074 			; <UNDEFINED> instruction: 0x01240074
    c4b0:	49080250 	stmdbmi	r8, {r4, r6, r9}
    c4b4:	76f82300 	ldrbtvc	r2, [r8], r0, lsl #6
    c4b8:	29e80800 	stmibcs	r8!, {fp}^
    c4bc:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c4c0:	49080250 	stmdbmi	r8, {r4, r6, r9}
    c4c4:	25000000 	strcs	r0, [r0, #-0]
    c4c8:	08007636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, ip, sp, lr}
    c4cc:	00002a85 	andeq	r2, r0, r5, lsl #21
    c4d0:	000018b6 			; <UNDEFINED> instruction: 0x000018b6
    c4d4:	02500124 	subseq	r0, r0, #36, 2
    c4d8:	23000075 	movwcs	r0, #117	; 0x75
    c4dc:	080076fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, sp, lr}
    c4e0:	00002a9b 	muleq	r0, fp, sl
    c4e4:	02500124 	subseq	r0, r0, #36, 2
    c4e8:	00000075 	andeq	r0, r0, r5, ror r0
    c4ec:	30991600 	addscc	r1, r9, r0, lsl #12
    c4f0:	bd010000 	stclt	0, cr0, [r1, #-0]
    c4f4:	18f00101 	ldmne	r0!, {r0, r8}^
    c4f8:	b6180000 	ldrlt	r0, [r8], -r0
    c4fc:	01000025 	tsteq	r0, r5, lsr #32
    c500:	07c001bf 			; <UNDEFINED> instruction: 0x07c001bf
    c504:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    c508:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    c50c:	4401c201 	strmi	ip, [r1], #-513	; 0xfffffdff
    c510:	00000003 	andeq	r0, r0, r3
    c514:	32422d00 	subcc	r2, r2, #0, 26
    c518:	7f010000 	svcvc	0x00010000
    c51c:	00771c03 	rsbseq	r1, r7, r3, lsl #24
    c520:	00005408 	andeq	r5, r0, r8, lsl #8
    c524:	899c0100 	ldmibhi	ip, {r8}
    c528:	37000019 	smladcc	r0, r9, r0, r0
    c52c:	000018c8 	andeq	r1, r0, r8, asr #17
    c530:	08007720 	stmdaeq	r0, {r5, r8, r9, sl, ip, sp, lr}
    c534:	00000040 	andeq	r0, r0, r0, asr #32
    c538:	33038101 	movwcc	r8, #12545	; 0x3101
    c53c:	08007720 	stmdaeq	r0, {r5, r8, r9, sl, ip, sp, lr}
    c540:	00000040 	andeq	r0, r0, r0, asr #32
    c544:	0018d521 	andseq	sp, r8, r1, lsr #10
    c548:	5c910200 	lfmpl	f0, 4, [r1], {0}
    c54c:	001df022 	andseq	pc, sp, r2, lsr #32
    c550:	00193900 	andseq	r3, r9, r0, lsl #18
    c554:	18e22100 	stmiane	r2!, {r8, sp}^
    c558:	91020000 	mrsls	r0, (UNDEF: 2)
    c55c:	50250058 	eorpl	r0, r5, r8, asr r0
    c560:	53080077 	movwpl	r0, #32887	; 0x8077
    c564:	56000029 	strpl	r0, [r0], -r9, lsr #32
    c568:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    c56c:	91025101 	tstls	r2, r1, lsl #2
    c570:	5001245c 	andpl	r2, r1, ip, asr r4
    c574:	00000c05 	andeq	r0, r0, r5, lsl #24
    c578:	25004002 	strcs	r4, [r0, #-2]
    c57c:	0800775a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, ip, sp, lr}
    c580:	000029cc 	andeq	r2, r0, ip, asr #19
    c584:	00001976 	andeq	r1, r0, r6, ror r9
    c588:	02520124 	subseq	r0, r2, #36, 2
    c58c:	01240074 			; <UNDEFINED> instruction: 0x01240074
    c590:	00740251 	rsbseq	r0, r4, r1, asr r2
    c594:	02500124 	subseq	r0, r0, #36, 2
    c598:	23002808 	movwcs	r2, #2056	; 0x808
    c59c:	08007760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp, lr}
    c5a0:	000029e8 	andeq	r2, r0, r8, ror #19
    c5a4:	02500124 	subseq	r0, r0, #36, 2
    c5a8:	00002808 	andeq	r2, r0, r8, lsl #16
    c5ac:	ec160000 	ldc	0, cr0, [r6], {-0}
    c5b0:	0100002e 	tsteq	r0, lr, lsr #32
    c5b4:	c70101d5 			; <UNDEFINED> instruction: 0xc70101d5
    c5b8:	17000019 	smladne	r0, r9, r0, r0
    c5bc:	00002ff3 	strdeq	r2, [r0], -r3
    c5c0:	1101d501 	tstne	r1, r1, lsl #10
    c5c4:	3b000003 	blcc	c5d8 <_Min_Stack_Size+0xc1d8>
    c5c8:	00676552 	rsbeq	r6, r7, r2, asr r5
    c5cc:	1101d501 	tstne	r1, r1, lsl #10
    c5d0:	17000003 	strne	r0, [r0, -r3]
    c5d4:	00002f6a 	andeq	r2, r0, sl, ror #30
    c5d8:	1101d501 	tstne	r1, r1, lsl #10
    c5dc:	18000003 	stmdane	r0, {r0, r1}
    c5e0:	00001445 	andeq	r1, r0, r5, asr #8
    c5e4:	5001d701 	andpl	sp, r1, r1, lsl #14
    c5e8:	00000007 	andeq	r0, r0, r7
    c5ec:	002f192d 	eoreq	r1, pc, sp, lsr #18
    c5f0:	038a0100 	orreq	r0, sl, #0, 2
    c5f4:	08007770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, ip, sp, lr}
    c5f8:	00000124 	andeq	r0, r0, r4, lsr #2
    c5fc:	1bd89c01 	blne	ff633608 <_estack+0xdf603608>
    c600:	f32e0000 	vhadd.u32	d0, d14, d0
    c604:	0100002f 	tsteq	r0, pc, lsr #32
    c608:	0311038a 	tsteq	r1, #671088642	; 0x28000002
    c60c:	88a70000 	stmiahi	r7!, {}	; <UNPREDICTABLE>
    c610:	52380000 	eorspl	r0, r8, #0
    c614:	01006765 	tsteq	r0, r5, ror #14
    c618:	0311038a 	tsteq	r1, #671088642	; 0x28000002
    c61c:	88c80000 	stmiahi	r8, {}^	; <UNPREDICTABLE>
    c620:	6a2e0000 	bvs	b8c628 <_Min_Stack_Size+0xb8c228>
    c624:	0100002f 	tsteq	r0, pc, lsr #32
    c628:	0311038a 	tsteq	r1, #671088642	; 0x28000002
    c62c:	88e90000 	stmiahi	r9!, {}^	; <UNPREDICTABLE>
    c630:	893a0000 	ldmdbhi	sl!, {}	; <UNPREDICTABLE>
    c634:	78000019 	stmdavc	r0, {r0, r3, r4}
    c638:	18080077 	stmdane	r8, {r0, r1, r2, r4, r5, r6}
    c63c:	0100001e 	tsteq	r0, lr, lsl r0
    c640:	ae1f038c 	cdpge	3, 1, cr0, cr15, cr12, {4}
    c644:	17000019 	smladne	r0, r9, r0, r0
    c648:	1f000089 	svcne	0x00000089
    c64c:	000019a2 	andeq	r1, r0, r2, lsr #19
    c650:	000088c8 	andeq	r8, r0, r8, asr #17
    c654:	0019961f 	andseq	r9, r9, pc, lsl r6
    c658:	0088a700 	addeq	sl, r8, r0, lsl #14
    c65c:	1e182000 	cdpne	0, 1, cr2, cr8, cr0, {0}
    c660:	ba340000 	blt	d0c668 <_Min_Stack_Size+0xd0c268>
    c664:	39000019 	stmdbcc	r0, {r0, r3, r4}
    c668:	32000089 	andcc	r0, r0, #137	; 0x89
    c66c:	00000e4a 	andeq	r0, r0, sl, asr #28
    c670:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
    c674:	000000d4 	ldrdeq	r0, [r0], -r4
    c678:	ab01df01 	blge	84284 <_Min_Stack_Size+0x83e84>
    c67c:	3200001b 	andcc	r0, r0, #27
    c680:	00000e41 	andeq	r0, r0, r1, asr #28
    c684:	080077a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, ip, sp, lr}
    c688:	000000ce 	andeq	r0, r0, lr, asr #1
    c68c:	9a027201 	bls	a8e98 <_Min_Stack_Size+0xa8a98>
    c690:	1e00001b 	mcrne	0, 0, r0, cr0, cr11, {0}
    c694:	00000e7d 	andeq	r0, r0, sp, ror lr
    c698:	080077ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, ip, sp, lr}
    c69c:	00001e30 	andeq	r1, r0, r0, lsr lr
    c6a0:	7501b501 	strvc	fp, [r1, #-1281]	; 0xfffffaff
    c6a4:	3c00001b 	stccc	0, cr0, [r0], {27}
    c6a8:	00000e8a 	andeq	r0, r0, sl, lsl #29
    c6ac:	00880306 	addeq	r0, r8, r6, lsl #6
    c6b0:	209f2000 	addscs	r2, pc, r0
    c6b4:	00001e30 	andeq	r1, r0, r0, lsr lr
    c6b8:	000e9621 	andeq	r9, lr, r1, lsr #12
    c6bc:	4c910200 	lfmmi	f0, 4, [r1], {0}
    c6c0:	001e8822 	andseq	r8, lr, r2, lsr #16
    c6c4:	001aad00 	andseq	sl, sl, r0, lsl #26
    c6c8:	0ea72100 	fdveqs	f2, f7, f0
    c6cc:	91020000 	mrsls	r0, (UNDEF: 2)
    c6d0:	b0220040 	eorlt	r0, r2, r0, asr #32
    c6d4:	bf00001e 	svclt	0x0000001e
    c6d8:	2100001a 	tstcs	r0, sl, lsl r0
    c6dc:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    c6e0:	00449102 	subeq	r9, r4, r2, lsl #2
    c6e4:	0078262a 	rsbseq	r2, r8, sl, lsr #12
    c6e8:	00001408 	andeq	r1, r0, r8, lsl #8
    c6ec:	001ad500 	andseq	sp, sl, r0, lsl #10
    c6f0:	0ec72100 	poleqs	f2, f7, f0
    c6f4:	91020000 	mrsls	r0, (UNDEF: 2)
    c6f8:	18250048 	stmdane	r5!, {r3, r6}
    c6fc:	53080078 	movwpl	r0, #32888	; 0x8078
    c700:	f2000029 	vhadd.s8	d0, d0, d25
    c704:	2400001a 	strcs	r0, [r0], #-26	; 0xffffffe6
    c708:	91025101 	tstls	r2, r1, lsl #2
    c70c:	5001244c 	andpl	r2, r1, ip, asr #8
    c710:	00000c05 	andeq	r0, r0, r5, lsl #24
    c714:	25004002 	strcs	r4, [r0, #-2]
    c718:	08007826 	stmdaeq	r0, {r1, r2, r5, fp, ip, sp, lr}
    c71c:	00002953 	andeq	r2, r0, r3, asr r9
    c720:	00001b0f 	andeq	r1, r0, pc, lsl #22
    c724:	02510124 	subseq	r0, r1, #36, 2
    c728:	01244c91 			; <UNDEFINED> instruction: 0x01244c91
    c72c:	000c0550 	andeq	r0, ip, r0, asr r5
    c730:	00400208 	subeq	r0, r0, r8, lsl #4
    c734:	00785425 	rsbseq	r5, r8, r5, lsr #8
    c738:	0029cc08 	eoreq	ip, r9, r8, lsl #24
    c73c:	001b2f00 	andseq	r2, fp, r0, lsl #30
    c740:	52012400 	andpl	r2, r1, #0, 8
    c744:	24007502 	strcs	r7, [r0], #-1282	; 0xfffffafe
    c748:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    c74c:	50012400 	andpl	r2, r1, r0, lsl #8
    c750:	00480802 	subeq	r0, r8, r2, lsl #16
    c754:	00785a25 	rsbseq	r5, r8, r5, lsr #20
    c758:	0029e808 	eoreq	lr, r9, r8, lsl #16
    c75c:	001b4300 	andseq	r4, fp, r0, lsl #6
    c760:	50012400 	andpl	r2, r1, r0, lsl #8
    c764:	00480802 	subeq	r0, r8, r2, lsl #16
    c768:	00786425 	rsbseq	r6, r8, r5, lsr #8
    c76c:	0029cc08 	eoreq	ip, r9, r8, lsl #24
    c770:	001b6300 	andseq	r6, fp, r0, lsl #6
    c774:	52012400 	andpl	r2, r1, #0, 8
    c778:	24007502 	strcs	r7, [r0], #-1282	; 0xfffffafe
    c77c:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    c780:	50012400 	andpl	r2, r1, r0, lsl #8
    c784:	00490802 	subeq	r0, r9, r2, lsl #16
    c788:	00786a23 	rsbseq	r6, r8, r3, lsr #20
    c78c:	0029e808 	eoreq	lr, r9, r8, lsl #16
    c790:	50012400 	andpl	r2, r1, r0, lsl #8
    c794:	00490802 	subeq	r0, r9, r2, lsl #16
    c798:	a8250000 	stmdage	r5!, {}	; <UNPREDICTABLE>
    c79c:	85080077 	strhi	r0, [r8, #-119]	; 0xffffff89
    c7a0:	8900002a 	stmdbhi	r0, {r1, r3, r5}
    c7a4:	2400001b 	strcs	r0, [r0], #-27	; 0xffffffe5
    c7a8:	74025001 	strvc	r5, [r2], #-1
    c7ac:	70230000 	eorvc	r0, r3, r0
    c7b0:	9b080078 	blls	20c998 <_Min_Stack_Size+0x20c598>
    c7b4:	2400002a 	strcs	r0, [r0], #-42	; 0xffffffd6
    c7b8:	74025001 	strvc	r5, [r2], #-1
    c7bc:	23000000 	movwcs	r0, #0
    c7c0:	080077a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, ip, sp, lr}
    c7c4:	00002ab1 			; <UNDEFINED> instruction: 0x00002ab1
    c7c8:	02500124 	subseq	r0, r0, #36, 2
    c7cc:	00000074 	andeq	r0, r0, r4, ror r0
    c7d0:	00779423 	rsbseq	r9, r7, r3, lsr #8
    c7d4:	002ac708 	eoreq	ip, sl, r8, lsl #14
    c7d8:	53012400 	movwpl	r2, #5120	; 0x1400
    c7dc:	01243101 			; <UNDEFINED> instruction: 0x01243101
    c7e0:	00740250 	rsbseq	r0, r4, r0, asr r2
    c7e4:	087d0224 	ldmdaeq	sp!, {r2, r5, r9}^
    c7e8:	24007502 	strcs	r7, [r0], #-1282	; 0xfffffafe
    c7ec:	01047d02 	tsteq	r4, r2, lsl #26
    c7f0:	7d022431 	cfstrsvc	mvf2, [r2, #-196]	; 0xffffff3c
    c7f4:	bf910300 	svclt	0x00910300
    c7f8:	0000007f 	andeq	r0, r0, pc, ror r0
    c7fc:	2ff81c00 	svccs	0x00f81c00
    c800:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    c804:	00031101 	andeq	r1, r3, r1, lsl #2
    c808:	1c1a0100 	ldfnes	f0, [sl], {-0}
    c80c:	f3170000 	vhadd.u16	d0, d7, d0
    c810:	0100002f 	tsteq	r0, pc, lsr #32
    c814:	031101fe 	tsteq	r1, #-2147483585	; 0x8000003f
    c818:	523b0000 	eorspl	r0, fp, #0
    c81c:	01006765 	tsteq	r0, r5, ror #14
    c820:	031101fe 	tsteq	r1, #-2147483585	; 0x8000003f
    c824:	45180000 	ldrmi	r0, [r8, #-0]
    c828:	01000014 	tsteq	r0, r4, lsl r0
    c82c:	07500200 	ldrbeq	r0, [r0, -r0, lsl #4]
    c830:	8a180000 	bhi	60c838 <_Min_Stack_Size+0x60c438>
    c834:	01000011 	tsteq	r0, r1, lsl r0
    c838:	03110201 	tsteq	r1, #268435456	; 0x10000000
    c83c:	30000000 	andcc	r0, r0, r0
    c840:	00002f53 	andeq	r2, r0, r3, asr pc
    c844:	11039501 	tstne	r3, r1, lsl #10
    c848:	94000003 	strls	r0, [r0], #-3
    c84c:	2c080078 	stccs	0, cr0, [r8], {120}	; 0x78
    c850:	01000001 	tsteq	r0, r1
    c854:	001e1f9c 	mulseq	lr, ip, pc	; <UNPREDICTABLE>
    c858:	2ff32e00 	svccs	0x00f32e00
    c85c:	95010000 	strls	r0, [r1, #-0]
    c860:	00031103 	andeq	r1, r3, r3, lsl #2
    c864:	00896300 	addeq	r6, r9, r0, lsl #6
    c868:	65523800 	ldrbvs	r3, [r2, #-2048]	; 0xfffff800
    c86c:	95010067 	strls	r0, [r1, #-103]	; 0xffffff99
    c870:	00031103 	andeq	r1, r3, r3, lsl #2
    c874:	00898400 	addeq	r8, r9, r0, lsl #8
    c878:	1bd83a00 	blne	ff61b080 <_estack+0xdf5eb080>
    c87c:	789a0000 	ldmvc	sl, {}	; <UNPREDICTABLE>
    c880:	1ee00800 	cdpne	8, 14, cr0, cr0, cr0, {0}
    c884:	97010000 	strls	r0, [r1, -r0]
    c888:	1bf51f03 	blne	ffd5449c <_estack+0xdfd2449c>
    c88c:	89840000 	stmibhi	r4, {}	; <UNPREDICTABLE>
    c890:	e91f0000 	ldmdb	pc, {}	; <UNPREDICTABLE>
    c894:	6300001b 	movwvs	r0, #27
    c898:	20000089 	andcs	r0, r0, r9, lsl #1
    c89c:	00001ee0 	andeq	r1, r0, r0, ror #29
    c8a0:	001c0134 	andseq	r0, ip, r4, lsr r1
    c8a4:	0089a500 	addeq	sl, r9, r0, lsl #10
    c8a8:	1c0d2100 	stfnes	f2, [sp], {-0}
    c8ac:	91030000 	mrsls	r0, (UNDEF: 3)
    c8b0:	4a327fbf 	bmi	cac7b4 <_Min_Stack_Size+0xcac3b4>
    c8b4:	c600000e 	strgt	r0, [r0], -lr
    c8b8:	d4080078 	strle	r0, [r8], #-120	; 0xffffff88
    c8bc:	01000000 	mrseq	r0, (UNDEF: 0)
    c8c0:	1df20209 	lfmne	f0, 2, [r2, #36]!	; 0x24
    c8c4:	41320000 	teqmi	r2, r0
    c8c8:	cc00000e 	stcgt	0, cr0, [r0], {14}
    c8cc:	ce080078 	mcrgt	0, 0, r0, cr8, cr8, {3}
    c8d0:	01000000 	mrseq	r0, (UNDEF: 0)
    c8d4:	1de10272 	sfmne	f0, 2, [r1, #456]!	; 0x1c8
    c8d8:	7d1e0000 	ldcvc	0, cr0, [lr, #-0]
    c8dc:	d800000e 	stmdale	r0, {r1, r2, r3}
    c8e0:	f8080078 			; <UNDEFINED> instruction: 0xf8080078
    c8e4:	0100001e 	tsteq	r0, lr, lsl r0
    c8e8:	1dbc01b5 	ldfnes	f0, [ip, #724]!	; 0x2d4
    c8ec:	8a3c0000 	bhi	f0c8f4 <_Min_Stack_Size+0xf0c4f4>
    c8f0:	0600000e 	streq	r0, [r0], -lr
    c8f4:	00008803 	andeq	r8, r0, r3, lsl #16
    c8f8:	f8209f20 			; <UNDEFINED> instruction: 0xf8209f20
    c8fc:	2100001e 	tstcs	r0, lr, lsl r0
    c900:	00000e96 	muleq	r0, r6, lr
    c904:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    c908:	00001f50 	andeq	r1, r0, r0, asr pc
    c90c:	00001cf4 	strdeq	r1, [r0], -r4
    c910:	000ea721 	andeq	sl, lr, r1, lsr #14
    c914:	40910200 	addsmi	r0, r1, r0, lsl #4
    c918:	1f782200 	svcne	0x00782200
    c91c:	1d060000 	stcne	0, cr0, [r6, #-0]
    c920:	b9210000 	stmdblt	r1!, {}	; <UNPREDICTABLE>
    c924:	0200000e 	andeq	r0, r0, #14
    c928:	2a004491 	bcs	1db74 <_Min_Stack_Size+0x1d774>
    c92c:	08007950 	stmdaeq	r0, {r4, r6, r8, fp, ip, sp, lr}
    c930:	00000014 	andeq	r0, r0, r4, lsl r0
    c934:	00001d1c 	andeq	r1, r0, ip, lsl sp
    c938:	000ec721 	andeq	ip, lr, r1, lsr #14
    c93c:	48910200 	ldmmi	r1, {r9}
    c940:	79422500 	stmdbvc	r2, {r8, sl, sp}^
    c944:	29530800 	ldmdbcs	r3, {fp}^
    c948:	1d390000 	ldcne	0, cr0, [r9, #-0]
    c94c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c950:	4c910251 	lfmmi	f0, 4, [r1], {81}	; 0x51
    c954:	05500124 	ldrbeq	r0, [r0, #-292]	; 0xfffffedc
    c958:	0200000c 	andeq	r0, r0, #12
    c95c:	50250040 	eorpl	r0, r5, r0, asr #32
    c960:	53080079 	movwpl	r0, #32889	; 0x8079
    c964:	56000029 	strpl	r0, [r0], -r9, lsr #32
    c968:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    c96c:	91025101 	tstls	r2, r1, lsl #2
    c970:	5001244c 	andpl	r2, r1, ip, asr #8
    c974:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
    c978:	25004002 	strcs	r4, [r0, #-2]
    c97c:	0800797e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, ip, sp, lr}
    c980:	000029cc 	andeq	r2, r0, ip, asr #19
    c984:	00001d76 	andeq	r1, r0, r6, ror sp
    c988:	02520124 	subseq	r0, r2, #36, 2
    c98c:	01240075 			; <UNDEFINED> instruction: 0x01240075
    c990:	00750251 	rsbseq	r0, r5, r1, asr r2
    c994:	02500124 	subseq	r0, r0, #36, 2
    c998:	25004808 	strcs	r4, [r0, #-2056]	; 0xfffff7f8
    c99c:	08007984 	stmdaeq	r0, {r2, r7, r8, fp, ip, sp, lr}
    c9a0:	000029e8 	andeq	r2, r0, r8, ror #19
    c9a4:	00001d8a 	andeq	r1, r0, sl, lsl #27
    c9a8:	02500124 	subseq	r0, r0, #36, 2
    c9ac:	25004808 	strcs	r4, [r0, #-2056]	; 0xfffff7f8
    c9b0:	0800798e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, ip, sp, lr}
    c9b4:	000029cc 	andeq	r2, r0, ip, asr #19
    c9b8:	00001daa 	andeq	r1, r0, sl, lsr #27
    c9bc:	02520124 	subseq	r0, r2, #36, 2
    c9c0:	01240075 			; <UNDEFINED> instruction: 0x01240075
    c9c4:	00750251 	rsbseq	r0, r5, r1, asr r2
    c9c8:	02500124 	subseq	r0, r0, #36, 2
    c9cc:	23004908 	movwcs	r4, #2312	; 0x908
    c9d0:	08007994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp, lr}
    c9d4:	000029e8 	andeq	r2, r0, r8, ror #19
    c9d8:	02500124 	subseq	r0, r0, #36, 2
    c9dc:	00004908 	andeq	r4, r0, r8, lsl #18
    c9e0:	78d22500 	ldmvc	r2, {r8, sl, sp}^
    c9e4:	2a850800 	bcs	fe14e9ec <_estack+0xde11e9ec>
    c9e8:	1dd00000 	ldclne	0, cr0, [r0]
    c9ec:	01240000 			; <UNDEFINED> instruction: 0x01240000
    c9f0:	00740250 	rsbseq	r0, r4, r0, asr r2
    c9f4:	799a2300 	ldmibvc	sl, {r8, r9, sp}
    c9f8:	2a9b0800 	bcs	fe6cea00 <_estack+0xde69ea00>
    c9fc:	01240000 			; <UNDEFINED> instruction: 0x01240000
    ca00:	00740250 	rsbseq	r0, r4, r0, asr r2
    ca04:	cc230000 	stcgt	0, cr0, [r3], #-0
    ca08:	b1080078 	tstlt	r8, r8, ror r0
    ca0c:	2400002a 	strcs	r0, [r0], #-42	; 0xffffffd6
    ca10:	74025001 	strvc	r5, [r2], #-1
    ca14:	23000000 	movwcs	r0, #0
    ca18:	080078ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip, sp, lr}
    ca1c:	00002afb 	strdeq	r2, [r0], -fp
    ca20:	01530124 	cmpeq	r3, r4, lsr #2
    ca24:	50012431 	andpl	r2, r1, r1, lsr r4
    ca28:	24007402 	strcs	r7, [r0], #-1026	; 0xfffffbfe
    ca2c:	02087d02 	andeq	r7, r8, #2, 26	; 0x80
    ca30:	02240075 	eoreq	r0, r4, #117	; 0x75
    ca34:	3101047d 	tstcc	r1, sp, ror r4
    ca38:	007d0224 	rsbseq	r0, sp, r4, lsr #4
    ca3c:	7fbf9103 	svcvc	0x00bf9103
    ca40:	00000000 	andeq	r0, r0, r0
    ca44:	002f7a16 	eoreq	r7, pc, r6, lsl sl	; <UNPREDICTABLE>
    ca48:	01ea0100 	mvneq	r0, r0, lsl #2
    ca4c:	001e6901 	andseq	r6, lr, r1, lsl #18
    ca50:	2ff31700 	svccs	0x00f31700
    ca54:	ea010000 	b	4ca5c <_Min_Stack_Size+0x4c65c>
    ca58:	00031101 	andeq	r1, r3, r1, lsl #2
    ca5c:	65523b00 	ldrbvs	r3, [r2, #-2816]	; 0xfffff500
    ca60:	ea010067 	b	4cc04 <_Min_Stack_Size+0x4c804>
    ca64:	00031101 	andeq	r1, r3, r1, lsl #2
    ca68:	30131700 	andscc	r1, r3, r0, lsl #14
    ca6c:	ea010000 	b	4ca74 <_Min_Stack_Size+0x4c674>
    ca70:	000b7e01 	andeq	r7, fp, r1, lsl #28
    ca74:	24db1700 	ldrbcs	r1, [fp], #1792	; 0x700
    ca78:	ea010000 	b	4ca80 <_Min_Stack_Size+0x4c680>
    ca7c:	00031c01 	andeq	r1, r3, r1, lsl #24
    ca80:	14451800 	strbne	r1, [r5], #-2048	; 0xfffff800
    ca84:	ec010000 	stc	0, cr0, [r1], {-0}
    ca88:	00075001 	andeq	r5, r7, r1
    ca8c:	dd2d0000 	stcle	0, cr0, [sp, #-0]
    ca90:	0100002f 	tsteq	r0, pc, lsr #32
    ca94:	79c003a1 	stmibvc	r0, {r0, r5, r7, r8, r9}^
    ca98:	011c0800 	tsteq	ip, r0, lsl #16
    ca9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    caa0:	0000208d 	andeq	r2, r0, sp, lsl #1
    caa4:	002ff32e 	eoreq	pc, pc, lr, lsr #6
    caa8:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    caac:	00000311 	andeq	r0, r0, r1, lsl r3
    cab0:	000089cf 	andeq	r8, r0, pc, asr #19
    cab4:	67655238 			; <UNDEFINED> instruction: 0x67655238
    cab8:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    cabc:	00000311 	andeq	r0, r0, r1, lsl r3
    cac0:	000089f0 	strdeq	r8, [r0], -r0
    cac4:	0030132e 	eorseq	r1, r0, lr, lsr #6
    cac8:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    cacc:	00000b7e 	andeq	r0, r0, lr, ror fp
    cad0:	00008a11 	andeq	r8, r0, r1, lsl sl
    cad4:	0024db2e 	eoreq	sp, r4, lr, lsr #22
    cad8:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    cadc:	0000031c 	andeq	r0, r0, ip, lsl r3
    cae0:	00008a3e 	andeq	r8, r0, lr, lsr sl
    cae4:	001e1f3a 	andseq	r1, lr, sl, lsr pc
    cae8:	0079c400 	rsbseq	ip, r9, r0, lsl #8
    caec:	001fa808 	andseq	sl, pc, r8, lsl #16
    caf0:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    caf4:	001e501f 	andseq	r5, lr, pc, lsl r0
    caf8:	008a3e00 	addeq	r3, sl, r0, lsl #28
    cafc:	1e441f00 	cdpne	15, 4, cr1, cr4, cr0, {0}
    cb00:	8a110000 	bhi	44cb08 <_Min_Stack_Size+0x44c708>
    cb04:	381f0000 	ldmdacc	pc, {}	; <UNPREDICTABLE>
    cb08:	f000001e 			; <UNDEFINED> instruction: 0xf000001e
    cb0c:	1f000089 	svcne	0x00000089
    cb10:	00001e2c 	andeq	r1, r0, ip, lsr #28
    cb14:	000089cf 	andeq	r8, r0, pc, asr #19
    cb18:	001fa820 	andseq	sl, pc, r0, lsr #16
    cb1c:	1e5c3400 	cdpne	4, 5, cr3, cr12, cr0, {0}
    cb20:	8a5f0000 	bhi	17ccb28 <_Min_Stack_Size+0x17cc728>
    cb24:	4a320000 	bmi	c8cb2c <_Min_Stack_Size+0xc8c72c>
    cb28:	e600000e 	str	r0, [r0], -lr
    cb2c:	d4080079 	strle	r0, [r8], #-121	; 0xffffff87
    cb30:	01000000 	mrseq	r0, (UNDEF: 0)
    cb34:	206601f4 	strdcs	r0, [r6], #-20	; 0xffffffec	; <UNPREDICTABLE>
    cb38:	41320000 	teqmi	r2, r0
    cb3c:	ec00000e 	stc	0, cr0, [r0], {14}
    cb40:	ce080079 	mcrgt	0, 0, r0, cr8, cr9, {3}
    cb44:	01000000 	mrseq	r0, (UNDEF: 0)
    cb48:	20550272 	subscs	r0, r5, r2, ror r2
    cb4c:	7d1e0000 	ldcvc	0, cr0, [lr, #-0]
    cb50:	f800000e 			; <UNDEFINED> instruction: 0xf800000e
    cb54:	c8080079 	stmdagt	r8, {r0, r3, r4, r5, r6}
    cb58:	0100001f 	tsteq	r0, pc, lsl r0
    cb5c:	203001b5 	ldrhtcs	r0, [r0], -r5
    cb60:	8a3c0000 	bhi	f0cb68 <_Min_Stack_Size+0xf0c768>
    cb64:	0600000e 	streq	r0, [r0], -lr
    cb68:	00008803 	andeq	r8, r0, r3, lsl #16
    cb6c:	c8209f20 	stmdagt	r0!, {r5, r8, r9, sl, fp, ip, pc}
    cb70:	2100001f 	tstcs	r0, pc, lsl r0
    cb74:	00000e96 	muleq	r0, r6, lr
    cb78:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    cb7c:	00002020 	andeq	r2, r0, r0, lsr #32
    cb80:	00001f68 	andeq	r1, r0, r8, ror #30
    cb84:	000ea721 	andeq	sl, lr, r1, lsr #14
    cb88:	40910200 	addsmi	r0, r1, r0, lsl #4
    cb8c:	20482200 	subcs	r2, r8, r0, lsl #4
    cb90:	1f7a0000 	svcne	0x007a0000
    cb94:	b9210000 	stmdblt	r1!, {}	; <UNPREDICTABLE>
    cb98:	0200000e 	andeq	r0, r0, #14
    cb9c:	2a004491 	bcs	1dde8 <_Min_Stack_Size+0x1d9e8>
    cba0:	08007a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp, lr}
    cba4:	00000014 	andeq	r0, r0, r4, lsl r0
    cba8:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    cbac:	000ec721 	andeq	ip, lr, r1, lsr #14
    cbb0:	48910200 	ldmmi	r1, {r9}
    cbb4:	7a622500 	bvc	1895fbc <_Min_Stack_Size+0x1895bbc>
    cbb8:	29530800 	ldmdbcs	r3, {fp}^
    cbbc:	1fad0000 	svcne	0x00ad0000
    cbc0:	01240000 			; <UNDEFINED> instruction: 0x01240000
    cbc4:	4c910251 	lfmmi	f0, 4, [r1], {81}	; 0x51
    cbc8:	05500124 	ldrbeq	r0, [r0, #-292]	; 0xfffffedc
    cbcc:	0200000c 	andeq	r0, r0, #12
    cbd0:	70250040 	eorvc	r0, r5, r0, asr #32
    cbd4:	5308007a 	movwpl	r0, #32890	; 0x807a
    cbd8:	ca000029 	bgt	cc84 <_Min_Stack_Size+0xc884>
    cbdc:	2400001f 	strcs	r0, [r0], #-31	; 0xffffffe1
    cbe0:	91025101 	tstls	r2, r1, lsl #2
    cbe4:	5001244c 	andpl	r2, r1, ip, asr #8
    cbe8:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
    cbec:	25004002 	strcs	r4, [r0, #-2]
    cbf0:	08007a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, ip, sp, lr}
    cbf4:	000029cc 	andeq	r2, r0, ip, asr #19
    cbf8:	00001fea 	andeq	r1, r0, sl, ror #31
    cbfc:	02520124 	subseq	r0, r2, #36, 2
    cc00:	01240075 			; <UNDEFINED> instruction: 0x01240075
    cc04:	00750251 	rsbseq	r0, r5, r1, asr r2
    cc08:	02500124 	subseq	r0, r0, #36, 2
    cc0c:	25004808 	strcs	r4, [r0, #-2056]	; 0xfffff7f8
    cc10:	08007aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip, sp, lr}
    cc14:	000029e8 	andeq	r2, r0, r8, ror #19
    cc18:	00001ffe 	strdeq	r1, [r0], -lr
    cc1c:	02500124 	subseq	r0, r0, #36, 2
    cc20:	25004808 	strcs	r4, [r0, #-2056]	; 0xfffff7f8
    cc24:	08007aae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp, ip, sp, lr}
    cc28:	000029cc 	andeq	r2, r0, ip, asr #19
    cc2c:	0000201e 	andeq	r2, r0, lr, lsl r0
    cc30:	02520124 	subseq	r0, r2, #36, 2
    cc34:	01240075 			; <UNDEFINED> instruction: 0x01240075
    cc38:	00750251 	rsbseq	r0, r5, r1, asr r2
    cc3c:	02500124 	subseq	r0, r0, #36, 2
    cc40:	23004908 	movwcs	r4, #2312	; 0x908
    cc44:	08007ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, ip, sp, lr}
    cc48:	000029e8 	andeq	r2, r0, r8, ror #19
    cc4c:	02500124 	subseq	r0, r0, #36, 2
    cc50:	00004908 	andeq	r4, r0, r8, lsl #18
    cc54:	79f22500 	ldmibvc	r2!, {r8, sl, sp}^
    cc58:	2a850800 	bcs	fe14ec60 <_estack+0xde11ec60>
    cc5c:	20440000 	subcs	r0, r4, r0
    cc60:	01240000 			; <UNDEFINED> instruction: 0x01240000
    cc64:	00740250 	rsbseq	r0, r4, r0, asr r2
    cc68:	7aba2300 	bvc	fee95870 <_estack+0xdee65870>
    cc6c:	2a9b0800 	bcs	fe6cec74 <_estack+0xde69ec74>
    cc70:	01240000 			; <UNDEFINED> instruction: 0x01240000
    cc74:	00740250 	rsbseq	r0, r4, r0, asr r2
    cc78:	ec230000 	stc	0, cr0, [r3], #-0
    cc7c:	b1080079 	tstlt	r8, r9, ror r0
    cc80:	2400002a 	strcs	r0, [r0], #-42	; 0xffffffd6
    cc84:	74025001 	strvc	r5, [r2], #-1
    cc88:	23000000 	movwcs	r0, #0
    cc8c:	080079de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}
    cc90:	00002ac7 	andeq	r2, r0, r7, asr #21
    cc94:	01530124 	cmpeq	r3, r4, lsr #2
    cc98:	50012431 	andpl	r2, r1, r1, lsr r4
    cc9c:	24007402 	strcs	r7, [r0], #-1026	; 0xfffffbfe
    cca0:	02087d02 	andeq	r7, r8, #2, 26	; 0x80
    cca4:	02240075 	eoreq	r0, r4, #117	; 0x75
    cca8:	f303007d 	vqadd.u8	q0, <illegal reg q1.5>, <illegal reg q14.5>
    ccac:	00005201 	andeq	r5, r0, r1, lsl #4
    ccb0:	231c0000 	tstcs	ip, #0
    ccb4:	0100002f 	tsteq	r0, pc, lsr #32
    ccb8:	03110217 	tsteq	r1, #1879048193	; 0x70000001
    ccbc:	db010000 	blle	4ccc4 <_Min_Stack_Size+0x4c8c4>
    ccc0:	17000020 	strne	r0, [r0, -r0, lsr #32]
    ccc4:	00002ff3 	strdeq	r2, [r0], -r3
    ccc8:	11021701 	tstne	r2, r1, lsl #14
    cccc:	3b000003 	blcc	cce0 <_Min_Stack_Size+0xc8e0>
    ccd0:	00676552 	rsbeq	r6, r7, r2, asr r5
    ccd4:	11021701 	tstne	r2, r1, lsl #14
    ccd8:	17000003 	strne	r0, [r0, -r3]
    ccdc:	00003013 	andeq	r3, r0, r3, lsl r0
    cce0:	7e021701 	cdpvc	7, 0, cr1, cr2, cr1, {0}
    cce4:	1700000b 	strne	r0, [r0, -fp]
    cce8:	000024db 	ldrdeq	r2, [r0], -fp
    ccec:	1c021701 	stcne	7, cr1, [r2], {1}
    ccf0:	18000003 	stmdane	r0, {r0, r1}
    ccf4:	00001445 	andeq	r1, r0, r5, asr #8
    ccf8:	50021901 	andpl	r1, r2, r1, lsl #18
    ccfc:	00000007 	andeq	r0, r0, r7
    cd00:	002f0830 	eoreq	r0, pc, r0, lsr r8	; <UNPREDICTABLE>
    cd04:	03ae0100 			; <UNDEFINED> instruction: 0x03ae0100
    cd08:	0000031c 	andeq	r0, r0, ip, lsl r3
    cd0c:	08007adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
    cd10:	00000124 	andeq	r0, r0, r4, lsr #2
    cd14:	23039c01 	movwcs	r9, #15361	; 0x3c01
    cd18:	f32e0000 	vhadd.u32	d0, d14, d0
    cd1c:	0100002f 	tsteq	r0, pc, lsr #32
    cd20:	031103ae 	tsteq	r1, #-1207959550	; 0xb8000002
    cd24:	8a890000 	bhi	fe24cd2c <_estack+0xde21cd2c>
    cd28:	52380000 	eorspl	r0, r8, #0
    cd2c:	01006765 	tsteq	r0, r5, ror #14
    cd30:	031103ae 	tsteq	r1, #-1207959550	; 0xb8000002
    cd34:	8aaa0000 	bhi	fea8cd3c <_estack+0xdea5cd3c>
    cd38:	132e0000 			; <UNDEFINED> instruction: 0x132e0000
    cd3c:	01000030 	tsteq	r0, r0, lsr r0
    cd40:	0b7e03ae 	bleq	1f8dc00 <_Min_Stack_Size+0x1f8d800>
    cd44:	8acb0000 	bhi	ff2ccd4c <_estack+0xdf29cd4c>
    cd48:	db2e0000 	blle	b8cd50 <_Min_Stack_Size+0xb8c950>
    cd4c:	01000024 	tsteq	r0, r4, lsr #32
    cd50:	031c03ae 	tsteq	ip, #-1207959550	; 0xb8000002
    cd54:	8af80000 	bhi	ffe0cd5c <_estack+0xdfddcd5c>
    cd58:	8d3a0000 	ldchi	0, cr0, [sl, #-0]
    cd5c:	e0000020 	and	r0, r0, r0, lsr #32
    cd60:	7808007a 	stmdavc	r8, {r1, r3, r4, r5, r6}
    cd64:	01000020 	tsteq	r0, r0, lsr #32
    cd68:	c21f03b0 	andsgt	r0, pc, #176, 6	; 0xc0000002
    cd6c:	f8000020 			; <UNDEFINED> instruction: 0xf8000020
    cd70:	1f00008a 	svcne	0x0000008a
    cd74:	000020b6 	strheq	r2, [r0], -r6
    cd78:	00008acb 	andeq	r8, r0, fp, asr #21
    cd7c:	0020aa1f 	eoreq	sl, r0, pc, lsl sl
    cd80:	008aaa00 	addeq	sl, sl, r0, lsl #20
    cd84:	209e1f00 	addscs	r1, lr, r0, lsl #30
    cd88:	8a890000 	bhi	fe24cd90 <_estack+0xde21cd90>
    cd8c:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
    cd90:	34000020 	strcc	r0, [r0], #-32	; 0xffffffe0
    cd94:	000020ce 	andeq	r2, r0, lr, asr #1
    cd98:	00008b19 	andeq	r8, r0, r9, lsl fp
    cd9c:	000e4a1e 	andeq	r4, lr, lr, lsl sl
    cda0:	007b0200 	rsbseq	r0, fp, r0, lsl #4
    cda4:	00208808 	eoreq	r8, r0, r8, lsl #16
    cda8:	02250100 	eoreq	r0, r5, #0, 2
    cdac:	000022dc 	ldrdeq	r2, [r0], -ip
    cdb0:	000e411e 	andeq	r4, lr, lr, lsl r1
    cdb4:	007b0800 	rsbseq	r0, fp, r0, lsl #16
    cdb8:	0020a008 	eoreq	sl, r0, r8
    cdbc:	02720100 	rsbseq	r0, r2, #0, 2
    cdc0:	000022cb 	andeq	r2, r0, fp, asr #5
    cdc4:	000e7d1e 	andeq	r7, lr, lr, lsl sp
    cdc8:	007b1a00 	rsbseq	r1, fp, r0, lsl #20
    cdcc:	0020b808 	eoreq	fp, r0, r8, lsl #16
    cdd0:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    cdd4:	000022a6 	andeq	r2, r0, r6, lsr #5
    cdd8:	000e8a3c 	andeq	r8, lr, ip, lsr sl
    cddc:	88030600 	stmdahi	r3, {r9, sl}
    cde0:	9f200000 	svcls	0x00200000
    cde4:	0020b820 	eoreq	fp, r0, r0, lsr #16
    cde8:	0e962100 	fmleqs	f2, f6, f0
    cdec:	91020000 	mrsls	r0, (UNDEF: 2)
    cdf0:	2110224c 	tstcs	r0, ip, asr #4
    cdf4:	21de0000 	bicscs	r0, lr, r0
    cdf8:	a7210000 	strge	r0, [r1, -r0]!
    cdfc:	0200000e 	andeq	r0, r0, #14
    ce00:	22004091 	andcs	r4, r0, #145	; 0x91
    ce04:	00002138 	andeq	r2, r0, r8, lsr r1
    ce08:	000021f0 	strdeq	r2, [r0], -r0
    ce0c:	000eb921 	andeq	fp, lr, r1, lsr #18
    ce10:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    ce14:	7b922a00 	blvc	fe49761c <_estack+0xde46761c>
    ce18:	00140800 	andseq	r0, r4, r0, lsl #16
    ce1c:	22060000 	andcs	r0, r6, #0
    ce20:	c7210000 	strgt	r0, [r1, -r0]!
    ce24:	0200000e 	andeq	r0, r0, #14
    ce28:	25004891 	strcs	r4, [r0, #-2193]	; 0xfffff76f
    ce2c:	08007b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip, sp, lr}
    ce30:	00002953 	andeq	r2, r0, r3, asr r9
    ce34:	00002223 	andeq	r2, r0, r3, lsr #4
    ce38:	02510124 	subseq	r0, r1, #36, 2
    ce3c:	01244c91 			; <UNDEFINED> instruction: 0x01244c91
    ce40:	000c0550 	andeq	r0, ip, r0, asr r5
    ce44:	00400200 	subeq	r0, r0, r0, lsl #4
    ce48:	007b9225 	rsbseq	r9, fp, r5, lsr #4
    ce4c:	00295308 	eoreq	r5, r9, r8, lsl #6
    ce50:	00224000 	eoreq	r4, r2, r0
    ce54:	51012400 	tstpl	r1, r0, lsl #8
    ce58:	244c9102 	strbcs	r9, [ip], #-258	; 0xfffffefe
    ce5c:	0c055001 	stceq	0, cr5, [r5], {1}
    ce60:	40020800 	andmi	r0, r2, r0, lsl #16
    ce64:	7bc02500 	blvc	ff01626c <_estack+0xdefe626c>
    ce68:	29cc0800 	stmibcs	ip, {fp}^
    ce6c:	22600000 	rsbcs	r0, r0, #0
    ce70:	01240000 			; <UNDEFINED> instruction: 0x01240000
    ce74:	00750252 	rsbseq	r0, r5, r2, asr r2
    ce78:	02510124 	subseq	r0, r1, #36, 2
    ce7c:	01240075 			; <UNDEFINED> instruction: 0x01240075
    ce80:	48080250 	stmdami	r8, {r4, r6, r9}
    ce84:	7bc62500 	blvc	ff19628c <_estack+0xdf16628c>
    ce88:	29e80800 	stmibcs	r8!, {fp}^
    ce8c:	22740000 	rsbscs	r0, r4, #0
    ce90:	01240000 			; <UNDEFINED> instruction: 0x01240000
    ce94:	48080250 	stmdami	r8, {r4, r6, r9}
    ce98:	7bd02500 	blvc	ff4162a0 <_estack+0xdf3e62a0>
    ce9c:	29cc0800 	stmibcs	ip, {fp}^
    cea0:	22940000 	addscs	r0, r4, #0
    cea4:	01240000 			; <UNDEFINED> instruction: 0x01240000
    cea8:	00750252 	rsbseq	r0, r5, r2, asr r2
    ceac:	02510124 	subseq	r0, r1, #36, 2
    ceb0:	01240075 			; <UNDEFINED> instruction: 0x01240075
    ceb4:	49080250 	stmdbmi	r8, {r4, r6, r9}
    ceb8:	7bd62300 	blvc	ff595ac0 <_estack+0xdf565ac0>
    cebc:	29e80800 	stmibcs	r8!, {fp}^
    cec0:	01240000 			; <UNDEFINED> instruction: 0x01240000
    cec4:	49080250 	stmdbmi	r8, {r4, r6, r9}
    cec8:	25000000 	strcs	r0, [r0, #-0]
    cecc:	08007b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, ip, sp, lr}
    ced0:	00002a85 	andeq	r2, r0, r5, lsl #21
    ced4:	000022ba 			; <UNDEFINED> instruction: 0x000022ba
    ced8:	02500124 	subseq	r0, r0, #36, 2
    cedc:	23000074 	movwcs	r0, #116	; 0x74
    cee0:	08007bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, ip, sp, lr}
    cee4:	00002a9b 	muleq	r0, fp, sl
    cee8:	02500124 	subseq	r0, r0, #36, 2
    ceec:	00000074 	andeq	r0, r0, r4, ror r0
    cef0:	007b0823 	rsbseq	r0, fp, r3, lsr #16
    cef4:	002ab108 	eoreq	fp, sl, r8, lsl #2
    cef8:	50012400 	andpl	r2, r1, r0, lsl #8
    cefc:	00007402 	andeq	r7, r0, r2, lsl #8
    cf00:	7afa2300 	bvc	ffe95b08 <_estack+0xdfe65b08>
    cf04:	2afb0800 	bcs	ffecef0c <_estack+0xdfe9ef0c>
    cf08:	01240000 			; <UNDEFINED> instruction: 0x01240000
    cf0c:	24310153 	ldrtcs	r0, [r1], #-339	; 0xfffffead
    cf10:	74025001 	strvc	r5, [r2], #-1
    cf14:	7d022400 	cfstrsvc	mvf2, [r2, #-0]
    cf18:	00750208 	rsbseq	r0, r5, r8, lsl #4
    cf1c:	007d0224 	rsbseq	r0, sp, r4, lsr #4
    cf20:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    cf24:	00000000 	andeq	r0, r0, r0
    cf28:	0030572d 	eorseq	r5, r0, sp, lsr #14
    cf2c:	03b70100 			; <UNDEFINED> instruction: 0x03b70100
    cf30:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
    cf34:	00000004 	andeq	r0, r0, r4
    cf38:	233b9c01 	teqcs	fp, #256	; 0x100
    cf3c:	262e0000 	strtcs	r0, [lr], -r0
    cf40:	01000031 	tsteq	r0, r1, lsr r0
    cf44:	033203b7 	teqeq	r2, #-603979774	; 0xdc000002
    cf48:	8b380000 	blhi	e0cf50 <_Min_Stack_Size+0xe0cb50>
    cf4c:	042b0000 	strteq	r0, [fp], #-0
    cf50:	7408007c 	strvc	r0, [r8], #-124	; 0xffffff84
    cf54:	2400002a 	strcs	r0, [r0], #-42	; 0xffffffd6
    cf58:	f3035001 	vhadd.u8	d5, d3, d1
    cf5c:	00005001 	andeq	r5, r0, r1
    cf60:	0031e12d 	eorseq	lr, r1, sp, lsr #2
    cf64:	03c10100 	biceq	r0, r1, #0, 2
    cf68:	08007c04 	stmdaeq	r0, {r2, sl, fp, ip, sp, lr}
    cf6c:	0000010c 	andeq	r0, r0, ip, lsl #2
    cf70:	24959c01 	ldrcs	r9, [r5], #3073	; 0xc01
    cf74:	e62f0000 	strt	r0, [pc], -r0
    cf78:	01000000 	mrseq	r0, (UNDEF: 0)
    cf7c:	07c003c3 	strbeq	r0, [r0, r3, asr #7]
    cf80:	91030000 	mrsls	r0, (UNDEF: 3)
    cf84:	68227fb8 	stmdavs	r2!, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    cf88:	7b000021 	blvc	d014 <_Min_Stack_Size+0xcc14>
    cf8c:	2f000023 	svccs	0x00000023
    cf90:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    cf94:	4403c701 	strmi	ip, [r3], #-1793	; 0xfffff8ff
    cf98:	03000003 	movweq	r0, #3
    cf9c:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    cfa0:	000e091e 	andeq	r0, lr, lr, lsl r9
    cfa4:	007c0e00 	rsbseq	r0, ip, r0, lsl #28
    cfa8:	00219808 	eoreq	r9, r1, r8, lsl #16
    cfac:	03d90100 	bicseq	r0, r9, #0, 2
    cfb0:	0000241f 	andeq	r2, r0, pc, lsl r4
    cfb4:	000dbd1e 	andeq	fp, sp, lr, lsl sp
    cfb8:	007c7a00 	rsbseq	r7, ip, r0, lsl #20
    cfbc:	0021b008 	eoreq	fp, r1, r8
    cfc0:	02960100 	addseq	r0, r6, #0, 2
    cfc4:	000023fa 	strdeq	r2, [r0], -sl
    cfc8:	000dca1f 	andeq	ip, sp, pc, lsl sl
    cfcc:	008b5900 	addeq	r5, fp, r0, lsl #18
    cfd0:	21b02000 	movscs	r2, r0
    cfd4:	d6210000 	strtle	r0, [r1], -r0
    cfd8:	0200000d 	andeq	r0, r0, #13
    cfdc:	08224c91 	stmdaeq	r2!, {r0, r4, r7, sl, fp, lr}
    cfe0:	cc000022 	stcgt	0, cr0, [r0], {34}	; 0x22
    cfe4:	21000023 	tstcs	r0, r3, lsr #32
    cfe8:	00000de7 	andeq	r0, r0, r7, ror #27
    cfec:	7fb09103 	svcvc	0x00b09103
    cff0:	22302200 	eorscs	r2, r0, #0, 4
    cff4:	23df0000 	bicscs	r0, pc, #0
    cff8:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
    cffc:	0300000d 	movweq	r0, #13
    d000:	007fb491 			; <UNDEFINED> instruction: 0x007fb491
    d004:	007cec23 	rsbseq	lr, ip, r3, lsr #24
    d008:	00295308 	eoreq	r5, r9, r8, lsl #6
    d00c:	51012400 	tstpl	r1, r0, lsl #8
    d010:	244c9102 	strbcs	r9, [ip], #-258	; 0xfffffefe
    d014:	0c055001 	stceq	0, cr5, [r5], {1}
    d018:	40021400 	andmi	r1, r2, r0, lsl #8
    d01c:	25000000 	strcs	r0, [r0, #-0]
    d020:	08007c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, sp, lr}
    d024:	0000296f 	andeq	r2, r0, pc, ror #18
    d028:	0000240e 	andeq	r2, r0, lr, lsl #8
    d02c:	02500124 	subseq	r0, r0, #36, 2
    d030:	23000075 	movwcs	r0, #117	; 0x75
    d034:	08007cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp, ip, sp, lr}
    d038:	00002985 	andeq	r2, r0, r5, lsl #19
    d03c:	02500124 	subseq	r0, r0, #36, 2
    d040:	00000075 	andeq	r0, r0, r5, ror r0
    d044:	00225822 	eoreq	r5, r2, r2, lsr #16
    d048:	00243900 	eoreq	r3, r4, r0, lsl #18
    d04c:	01b52f00 			; <UNDEFINED> instruction: 0x01b52f00
    d050:	d2010000 	andle	r0, r1, #0
    d054:	00034403 	andeq	r4, r3, r3, lsl #8
    d058:	ac910300 	ldcge	3, cr0, [r1], {0}
    d05c:	3e25007f 	mcrcc	0, 1, r0, cr5, cr15, {3}
    d060:	5308007c 	movwpl	r0, #32892	; 0x807c
    d064:	57000029 	strpl	r0, [r0, -r9, lsr #32]
    d068:	24000024 	strcs	r0, [r0], #-36	; 0xffffffdc
    d06c:	91035101 	tstls	r3, r1, lsl #2
    d070:	01247fb8 			; <UNDEFINED> instruction: 0x01247fb8
    d074:	000c0550 	andeq	r0, ip, r0, asr r5
    d078:	00400208 	subeq	r0, r0, r8, lsl #4
    d07c:	007c4825 	rsbseq	r4, ip, r5, lsr #16
    d080:	00299b08 	eoreq	r9, r9, r8, lsl #22
    d084:	00247a00 	eoreq	r7, r4, r0, lsl #20
    d088:	52012400 	andpl	r2, r1, #0, 8
    d08c:	24007802 	strcs	r7, [r0], #-2050	; 0xfffff7fe
    d090:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    d094:	50012400 	andpl	r2, r1, r0, lsl #8
    d098:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
    d09c:	23004002 	movwcs	r4, #2
    d0a0:	08007c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, sp, lr}
    d0a4:	00002953 	andeq	r2, r0, r3, asr r9
    d0a8:	03510124 	cmpeq	r1, #36, 2
    d0ac:	247fb891 	ldrbtcs	fp, [pc], #-2193	; d0b4 <_Min_Stack_Size+0xccb4>
    d0b0:	0c055001 	stceq	0, cr5, [r5], {1}
    d0b4:	40020000 	andmi	r0, r2, r0
    d0b8:	282d0000 	stmdacs	sp!, {}	; <UNPREDICTABLE>
    d0bc:	01000032 	tsteq	r0, r2, lsr r0
    d0c0:	7d1003e2 	ldcvc	3, cr0, [r0, #-904]	; 0xfffffc78
    d0c4:	00a80800 	adceq	r0, r8, r0, lsl #16
    d0c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    d0cc:	00002664 	andeq	r2, r0, r4, ror #12
    d0d0:	0030132e 	eorseq	r1, r0, lr, lsr #6
    d0d4:	03e20100 	mvneq	r0, #0, 2
    d0d8:	00000b7e 	andeq	r0, r0, lr, ror fp
    d0dc:	00008b71 	andeq	r8, r0, r1, ror fp
    d0e0:	0032112e 	eorseq	r1, r2, lr, lsr #2
    d0e4:	03e20100 	mvneq	r0, #0, 2
    d0e8:	00000311 	andeq	r0, r0, r1, lsl r3
    d0ec:	00008bbf 			; <UNDEFINED> instruction: 0x00008bbf
    d0f0:	0030b82e 	eorseq	fp, r0, lr, lsr #16
    d0f4:	03e20100 	mvneq	r0, #0, 2
    d0f8:	0000031c 	andeq	r0, r0, ip, lsl r3
    d0fc:	00008be8 	andeq	r8, r0, r8, ror #23
    d100:	000e531e 	andeq	r5, lr, lr, lsl r3
    d104:	007d1600 	rsbseq	r1, sp, r0, lsl #12
    d108:	00228008 	eoreq	r8, r2, r8
    d10c:	03f00100 	mvnseq	r0, #0, 2
    d110:	0000257e 	andeq	r2, r0, lr, ror r5
    d114:	000e641f 	andeq	r6, lr, pc, lsl r4
    d118:	008c2f00 	addeq	r2, ip, r0, lsl #30
    d11c:	22802000 	addcs	r2, r0, #0
    d120:	70210000 	eorvc	r0, r1, r0
    d124:	0200000e 	andeq	r0, r0, #14
    d128:	a02a6791 	mlage	sl, r1, r7, r6
    d12c:	1808007d 	stmdane	r8, {r0, r2, r3, r4, r5, r6}
    d130:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    d134:	35000025 	strcc	r0, [r0, #-37]	; 0xffffffdb
    d138:	00000e64 	andeq	r0, r0, r4, ror #28
    d13c:	007da033 	rsbseq	sl, sp, r3, lsr r0
    d140:	00001808 	andeq	r1, r0, r8, lsl #16
    d144:	0e703600 	cdpeq	6, 7, cr3, cr0, cr0, {0}
    d148:	12370000 	eorsne	r0, r7, #0
    d14c:	a000000e 	andge	r0, r0, lr
    d150:	1808007d 	stmdane	r8, {r0, r2, r3, r4, r5, r6}
    d154:	01000000 	mrseq	r0, (UNDEF: 0)
    d158:	a62502d1 			; <UNDEFINED> instruction: 0xa62502d1
    d15c:	1408007d 	strne	r0, [r8], #-125	; 0xffffff83
    d160:	4c00002a 	stcmi	0, cr0, [r0], {42}	; 0x2a
    d164:	24000025 	strcs	r0, [r0], #-37	; 0xffffffdb
    d168:	03055001 	movweq	r5, #20481	; 0x5001
    d16c:	2000002c 	andcs	r0, r0, ip, lsr #32
    d170:	7daa3100 	stfvcs	f3, [sl]
    d174:	0e090800 	cdpeq	8, 0, cr0, cr9, cr0, {0}
    d178:	00000000 	andeq	r0, r0, r0
    d17c:	7d502300 	ldclvc	3, cr2, [r0, #-0]
    d180:	2b2f0800 	blcs	bcf188 <_Min_Stack_Size+0xbced88>
    d184:	01240000 			; <UNDEFINED> instruction: 0x01240000
    d188:	24310153 	ldrtcs	r0, [r1], #-339	; 0xfffffead
    d18c:	91025201 	tstls	r2, r1, lsl #4
    d190:	51012467 	tstpl	r1, r7, ror #8
    d194:	24659102 	strbtcs	r9, [r5], #-258	; 0xfffffefe
    d198:	03055001 	movweq	r5, #20481	; 0x5001
    d19c:	2000002c 	andcs	r0, r0, ip, lsr #32
    d1a0:	32000000 	andcc	r0, r0, #0
    d1a4:	00000e53 	andeq	r0, r0, r3, asr lr
    d1a8:	08007d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip, sp, lr}
    d1ac:	00000032 	andeq	r0, r0, r2, lsr r0
    d1b0:	2503f501 	strcs	pc, [r3, #-1281]	; 0xfffffaff
    d1b4:	1f000026 	svcne	0x00000026
    d1b8:	00000e64 	andeq	r0, r0, r4, ror #28
    d1bc:	00008c4e 	andeq	r8, r0, lr, asr #24
    d1c0:	007d5a33 	rsbseq	r5, sp, r3, lsr sl
    d1c4:	00003208 	andeq	r3, r0, r8, lsl #4
    d1c8:	0e702100 	rpweqs	f2, f0, f0
    d1cc:	91020000 	mrsls	r0, (UNDEF: 2)
    d1d0:	7d822a67 	vstrvc	s4, [r2, #412]	; 0x19c
    d1d4:	000a0800 	andeq	r0, sl, r0, lsl #16
    d1d8:	25ff0000 	ldrbcs	r0, [pc, #0]!	; d1e0 <_Min_Stack_Size+0xcde0>
    d1dc:	64350000 	ldrtvs	r0, [r5], #-0
    d1e0:	3300000e 	movwcc	r0, #14
    d1e4:	08007d82 	stmdaeq	r0, {r1, r7, r8, sl, fp, ip, sp, lr}
    d1e8:	0000000a 	andeq	r0, r0, sl
    d1ec:	000e7036 	andeq	r7, lr, r6, lsr r0
    d1f0:	0e123700 	cdpeq	7, 1, cr3, cr2, cr0, {0}
    d1f4:	7d820000 	stcvc	0, cr0, [r2]
    d1f8:	000a0800 	andeq	r0, sl, r0, lsl #16
    d1fc:	d1010000 	mrsle	r0, (UNDEF: 1)
    d200:	7d882502 	cfstr32vc	mvfx2, [r8, #8]
    d204:	2a140800 	bcs	50f20c <_Min_Stack_Size+0x50ee0c>
    d208:	25f30000 	ldrbcs	r0, [r3, #0]!
    d20c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    d210:	2c030550 	cfstr32cs	mvfx0, [r3], {80}	; 0x50
    d214:	00200000 	eoreq	r0, r0, r0
    d218:	007d8c31 	rsbseq	r8, sp, r1, lsr ip
    d21c:	000e0908 	andeq	r0, lr, r8, lsl #18
    d220:	00000000 	andeq	r0, r0, r0
    d224:	007d8023 	rsbseq	r8, sp, r3, lsr #32
    d228:	002b2f08 	eoreq	r2, fp, r8, lsl #30
    d22c:	53012400 	movwpl	r2, #5120	; 0x1400
    d230:	01243101 			; <UNDEFINED> instruction: 0x01243101
    d234:	67910252 			; <UNDEFINED> instruction: 0x67910252
    d238:	02510124 	subseq	r0, r1, #36, 2
    d23c:	01246691 			; <UNDEFINED> instruction: 0x01246691
    d240:	2c030550 	cfstr32cs	mvfx0, [r3], {80}	; 0x50
    d244:	00200000 	eoreq	r0, r0, r0
    d248:	30250000 	eorcc	r0, r5, r0
    d24c:	9b08007d 	blls	20d448 <_Min_Stack_Size+0x20d048>
    d250:	46000029 	strmi	r0, [r0], -r9, lsr #32
    d254:	24000026 	strcs	r0, [r0], #-38	; 0xffffffda
    d258:	30015201 	andcc	r5, r1, r1, lsl #4
    d25c:	01510124 	cmpeq	r1, r4, lsr #2
    d260:	50012432 	andpl	r2, r1, r2, lsr r4
    d264:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
    d268:	23004002 	movwcs	r4, #2
    d26c:	08007d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp, ip, sp, lr}
    d270:	0000299b 	muleq	r0, fp, r9
    d274:	01520124 	cmpeq	r2, r4, lsr #2
    d278:	51012431 	tstpl	r1, r1, lsr r4
    d27c:	01243201 			; <UNDEFINED> instruction: 0x01243201
    d280:	000c0550 	andeq	r0, ip, r0, asr r5
    d284:	00400208 	subeq	r0, r0, r8, lsl #4
    d288:	30062d00 	andcc	r2, r6, r0, lsl #26
    d28c:	04010000 	streq	r0, [r1], #-0
    d290:	007db804 	rsbseq	fp, sp, r4, lsl #16
    d294:	0000a808 	andeq	sl, r0, r8, lsl #16
    d298:	339c0100 	orrscc	r0, ip, #0, 2
    d29c:	2e000028 	cdpcs	0, 0, cr0, cr0, cr8, {1}
    d2a0:	00003013 	andeq	r3, r0, r3, lsl r0
    d2a4:	7e040401 	cdpvc	4, 0, cr0, cr4, cr1, {0}
    d2a8:	6100000b 	tstvs	r0, fp
    d2ac:	2e00008c 	cdpcs	0, 0, cr0, cr0, cr12, {4}
    d2b0:	00002fef 	andeq	r2, r0, pc, ror #31
    d2b4:	11040401 	tstne	r4, r1, lsl #8
    d2b8:	7f000003 	svcvc	0x00000003
    d2bc:	2e00008c 	cdpcs	0, 0, cr0, cr0, cr12, {4}
    d2c0:	00002f33 	andeq	r2, r0, r3, lsr pc
    d2c4:	1c040401 	cfstrsne	mvf0, [r4], {1}
    d2c8:	b6000003 	strlt	r0, [r0], -r3
    d2cc:	1e00008c 	cdpne	0, 0, cr0, cr0, cr12, {4}
    d2d0:	00000e53 	andeq	r0, r0, r3, asr lr
    d2d4:	08007dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    d2d8:	000022a0 	andeq	r2, r0, r0, lsr #5
    d2dc:	4d041201 	sfmmi	f1, 4, [r4, #-4]
    d2e0:	1f000027 	svcne	0x00000027
    d2e4:	00000e64 	andeq	r0, r0, r4, ror #28
    d2e8:	00008cf0 	strdeq	r8, [r0], -r0
    d2ec:	0022a020 	eoreq	sl, r2, r0, lsr #32
    d2f0:	0e702100 	rpweqs	f2, f0, f0
    d2f4:	91020000 	mrsls	r0, (UNDEF: 2)
    d2f8:	7e482a67 	vmlsvc.f32	s5, s16, s15
    d2fc:	00180800 	andseq	r0, r8, r0, lsl #16
    d300:	27270000 	strcs	r0, [r7, -r0]!
    d304:	64350000 	ldrtvs	r0, [r5], #-0
    d308:	3300000e 	movwcc	r0, #14
    d30c:	08007e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp, lr}
    d310:	00000018 	andeq	r0, r0, r8, lsl r0
    d314:	000e7036 	andeq	r7, lr, r6, lsr r0
    d318:	0e123700 	cdpeq	7, 1, cr3, cr2, cr0, {0}
    d31c:	7e480000 	cdpvc	0, 4, cr0, cr8, cr0, {0}
    d320:	00180800 	andseq	r0, r8, r0, lsl #16
    d324:	d1010000 	mrsle	r0, (UNDEF: 1)
    d328:	7e4e2502 	cdpvc	5, 4, cr2, cr14, cr2, {0}
    d32c:	2a140800 	bcs	50f334 <_Min_Stack_Size+0x50ef34>
    d330:	271b0000 	ldrcs	r0, [fp, -r0]
    d334:	01240000 			; <UNDEFINED> instruction: 0x01240000
    d338:	2c030550 	cfstr32cs	mvfx0, [r3], {80}	; 0x50
    d33c:	00200000 	eoreq	r0, r0, r0
    d340:	007e5231 	rsbseq	r5, lr, r1, lsr r2
    d344:	000e0908 	andeq	r0, lr, r8, lsl #18
    d348:	00000000 	andeq	r0, r0, r0
    d34c:	007df823 	rsbseq	pc, sp, r3, lsr #16
    d350:	002b2f08 	eoreq	r2, fp, r8, lsl #30
    d354:	53012400 	movwpl	r2, #5120	; 0x1400
    d358:	01243101 			; <UNDEFINED> instruction: 0x01243101
    d35c:	67910252 			; <UNDEFINED> instruction: 0x67910252
    d360:	02510124 	subseq	r0, r1, #36, 2
    d364:	01246591 			; <UNDEFINED> instruction: 0x01246591
    d368:	2c030550 	cfstr32cs	mvfx0, [r3], {80}	; 0x50
    d36c:	00200000 	eoreq	r0, r0, r0
    d370:	53320000 	teqpl	r2, #0
    d374:	0600000e 	streq	r0, [r0], -lr
    d378:	2c08007e 	stccs	0, cr0, [r8], {126}	; 0x7e
    d37c:	01000000 	mrseq	r0, (UNDEF: 0)
    d380:	27f40418 			; <UNDEFINED> instruction: 0x27f40418
    d384:	641f0000 	ldrvs	r0, [pc], #-0	; d38c <_Min_Stack_Size+0xcf8c>
    d388:	0f00000e 	svceq	0x0000000e
    d38c:	3300008d 	movwcc	r0, #141	; 0x8d
    d390:	08007e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, ip, sp, lr}
    d394:	0000002c 	andeq	r0, r0, ip, lsr #32
    d398:	000e7021 	andeq	r7, lr, r1, lsr #32
    d39c:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    d3a0:	007e242a 	rsbseq	r2, lr, sl, lsr #8
    d3a4:	00000a08 	andeq	r0, r0, r8, lsl #20
    d3a8:	0027ce00 	eoreq	ip, r7, r0, lsl #28
    d3ac:	0e643500 	cdpeq	5, 6, cr3, cr4, cr0, {0}
    d3b0:	24330000 	ldrtcs	r0, [r3], #-0
    d3b4:	0a08007e 	beq	20d5b4 <_Min_Stack_Size+0x20d1b4>
    d3b8:	36000000 	strcc	r0, [r0], -r0
    d3bc:	00000e70 	andeq	r0, r0, r0, ror lr
    d3c0:	000e1237 	andeq	r1, lr, r7, lsr r2
    d3c4:	007e2400 	rsbseq	r2, lr, r0, lsl #8
    d3c8:	00000a08 	andeq	r0, r0, r8, lsl #20
    d3cc:	02d10100 	sbcseq	r0, r1, #0, 2
    d3d0:	007e2a25 	rsbseq	r2, lr, r5, lsr #20
    d3d4:	002a1408 	eoreq	r1, sl, r8, lsl #8
    d3d8:	0027c200 	eoreq	ip, r7, r0, lsl #4
    d3dc:	50012400 	andpl	r2, r1, r0, lsl #8
    d3e0:	002c0305 	eoreq	r0, ip, r5, lsl #6
    d3e4:	31002000 	mrscc	r2, (UNDEF: 0)
    d3e8:	08007e2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, fp, ip, sp, lr}
    d3ec:	00000e09 	andeq	r0, r0, r9, lsl #28
    d3f0:	23000000 	movwcs	r0, #0
    d3f4:	08007e22 	stmdaeq	r0, {r1, r5, r9, sl, fp, ip, sp, lr}
    d3f8:	00002b2f 	andeq	r2, r0, pc, lsr #22
    d3fc:	01530124 	cmpeq	r3, r4, lsr #2
    d400:	52012431 	andpl	r2, r1, #822083584	; 0x31000000
    d404:	24669102 	strbtcs	r9, [r6], #-258	; 0xfffffefe
    d408:	91025101 	tstls	r2, r1, lsl #2
    d40c:	50012467 	andpl	r2, r1, r7, ror #8
    d410:	002c0305 	eoreq	r0, ip, r5, lsl #6
    d414:	00002000 	andeq	r2, r0, r0
    d418:	7dd82500 	cfldr64vc	mvdx2, [r8]
    d41c:	299b0800 	ldmibcs	fp, {fp}
    d420:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
    d424:	01240000 			; <UNDEFINED> instruction: 0x01240000
    d428:	24300152 	ldrtcs	r0, [r0], #-338	; 0xfffffeae
    d42c:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    d430:	05500124 	ldrbeq	r0, [r0, #-292]	; 0xfffffedc
    d434:	0208000c 	andeq	r0, r8, #12
    d438:	44230040 	strtmi	r0, [r3], #-64	; 0xffffffc0
    d43c:	9b08007e 	blls	20d63c <_Min_Stack_Size+0x20d23c>
    d440:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    d444:	31015201 	tstcc	r1, r1, lsl #4
    d448:	01510124 	cmpeq	r1, r4, lsr #2
    d44c:	50012432 	andpl	r2, r1, r2, lsr r4
    d450:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
    d454:	00004002 	andeq	r4, r0, r2
    d458:	00310129 	eorseq	r0, r1, r9, lsr #2
    d45c:	586a0100 	stmdapl	sl!, {r8}^
    d460:	0500000d 	streq	r0, [r0, #-13]
    d464:	00002c03 	andeq	r2, r0, r3, lsl #24
    d468:	312c2920 			; <UNDEFINED> instruction: 0x312c2920
    d46c:	6b010000 	blvs	4d474 <_Min_Stack_Size+0x4d074>
    d470:	00000311 	andeq	r0, r0, r1, lsl r3
    d474:	00840305 	addeq	r0, r4, r5, lsl #6
    d478:	f33d2000 	vhadd.u<illegal width 64>	d2, d13, d0
    d47c:	0b000007 	bleq	d4a0 <_Min_Stack_Size+0xd0a0>
    d480:	28610744 	stmdacs	r1!, {r2, r6, r8, r9, sl}^
    d484:	27070000 	strcs	r0, [r7, -r0]
    d488:	08000003 	stmdaeq	r0, {r0, r1}
    d48c:	00002876 	andeq	r2, r0, r6, ror r8
    d490:	00002876 	andeq	r2, r0, r6, ror r8
    d494:	00033d09 	andeq	r3, r3, r9, lsl #26
    d498:	13000100 	movwne	r0, #256	; 0x100
    d49c:	00044504 	andeq	r4, r4, r4, lsl #10
    d4a0:	2f973e00 	svccs	0x00973e00
    d4a4:	5c010000 	stcpl	0, cr0, [r1], {-0}
    d4a8:	00002866 	andeq	r2, r0, r6, ror #16
    d4ac:	00140305 	andseq	r0, r4, r5, lsl #6
    d4b0:	1c082000 	stcne	0, cr2, [r8], {-0}
    d4b4:	9d000003 	stcls	0, cr0, [r0, #-12]
    d4b8:	09000028 	stmdbeq	r0, {r3, r5}
    d4bc:	0000033d 	andeq	r0, r0, sp, lsr r3
    d4c0:	f83e0001 			; <UNDEFINED> instruction: 0xf83e0001
    d4c4:	01000030 	tsteq	r0, r0, lsr r0
    d4c8:	0028ae5f 	eoreq	sl, r8, pc, asr lr
    d4cc:	80030500 	andhi	r0, r3, r0, lsl #10
    d4d0:	3f08007e 	svccc	0x0008007e
    d4d4:	0000288d 	andeq	r2, r0, sp, lsl #17
    d4d8:	00287608 	eoreq	r7, r8, r8, lsl #12
    d4dc:	0028c300 	eoreq	ip, r8, r0, lsl #6
    d4e0:	033d0900 	teqeq	sp, #0, 18
    d4e4:	00000000 	andeq	r0, r0, r0
    d4e8:	0031163e 	eorseq	r1, r1, lr, lsr r6
    d4ec:	b3620100 	cmnlt	r2, #0, 2
    d4f0:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    d4f4:	00002003 	andeq	r2, r0, r3
    d4f8:	031c0820 	tsteq	ip, #32, 16	; 0x200000
    d4fc:	28e40000 	stmiacs	r4!, {}^	; <UNPREDICTABLE>
    d500:	3d090000 	stccc	0, cr0, [r9, #-0]
    d504:	00000003 	andeq	r0, r0, r3
    d508:	30d63e00 	sbcscc	r3, r6, r0, lsl #28
    d50c:	63010000 	movwvs	r0, #4096	; 0x1000
    d510:	000028f5 	strdeq	r2, [r0], -r5
    d514:	7e7c0305 	cdpvc	3, 7, cr0, cr12, cr5, {0}
    d518:	d43f0800 	ldrtle	r0, [pc], #-2048	; d520 <_Min_Stack_Size+0xd120>
    d51c:	08000028 	stmdaeq	r0, {r3, r5}
    d520:	00000311 	andeq	r0, r0, r1, lsl r3
    d524:	0000290a 	andeq	r2, r0, sl, lsl #18
    d528:	00033d09 	andeq	r3, r3, r9, lsl #26
    d52c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    d530:	00003156 	andeq	r3, r0, r6, asr r1
    d534:	291b6401 	ldmdbcs	fp, {r0, sl, sp, lr}
    d538:	03050000 	movweq	r0, #20480	; 0x5000
    d53c:	08007e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, sp, lr}
    d540:	0028fa3f 	eoreq	pc, r8, pc, lsr sl	; <UNPREDICTABLE>
    d544:	31fb3e00 	mvnscc	r3, r0, lsl #28
    d548:	66010000 	strvs	r0, [r1], -r0
    d54c:	00000332 	andeq	r0, r0, r2, lsr r3
    d550:	00240305 	eoreq	r0, r4, r5, lsl #6
    d554:	363e2000 	ldrtcc	r2, [lr], -r0
    d558:	01000032 	tsteq	r0, r2, lsr r0
    d55c:	00033267 	andeq	r3, r3, r7, ror #4
    d560:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    d564:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
    d568:	00002f70 	andeq	r2, r0, r0, ror pc
    d56c:	0b946901 	bleq	fe527978 <_estack+0xde4f7978>
    d570:	03050000 	movweq	r0, #20480	; 0x5000
    d574:	20000088 	andcs	r0, r0, r8, lsl #1
    d578:	0006eb40 	andeq	lr, r6, r0, asr #22
    d57c:	69f30600 	ldmibvs	r3!, {r9, sl}^
    d580:	15000029 	strne	r0, [r0, #-41]	; 0xffffffd7
    d584:	00002876 	andeq	r2, r0, r6, ror r8
    d588:	00296915 	eoreq	r6, r9, r5, lsl r9
    d58c:	04130000 	ldreq	r0, [r3], #-0
    d590:	000007c0 	andeq	r0, r0, r0, asr #15
    d594:	002b4f41 	eoreq	r4, fp, r1, asr #30
    d598:	01d60900 	bicseq	r0, r6, r0, lsl #18
    d59c:	00000c6a 	andeq	r0, r0, sl, ror #24
    d5a0:	00002985 	andeq	r2, r0, r5, lsl #19
    d5a4:	000e0315 	andeq	r0, lr, r5, lsl r3
    d5a8:	96410000 	strbls	r0, [r1], -r0
    d5ac:	0900002b 	stmdbeq	r0, {r0, r1, r3, r5}
    d5b0:	075001ad 	ldrbeq	r0, [r0, -sp, lsr #3]
    d5b4:	299b0000 	ldmibcs	fp, {}	; <UNPREDICTABLE>
    d5b8:	03150000 	tsteq	r5, #0
    d5bc:	0000000e 	andeq	r0, r0, lr
    d5c0:	00145b40 	andseq	r5, r4, r0, asr #22
    d5c4:	b6fe0600 	ldrbtlt	r0, [lr], r0, lsl #12
    d5c8:	15000029 	strne	r0, [r0, #-41]	; 0xffffffd7
    d5cc:	00002876 	andeq	r2, r0, r6, ror r8
    d5d0:	00031c15 	andeq	r1, r3, r5, lsl ip
    d5d4:	07e01500 	strbeq	r1, [r0, r0, lsl #10]!
    d5d8:	40000000 	andmi	r0, r0, r0
    d5dc:	000013f9 	strdeq	r1, [r0], -r9
    d5e0:	29ccff06 	stmibcs	ip, {r1, r2, r8, r9, sl, fp, ip, sp, lr, pc}^
    d5e4:	76150000 	ldrvc	r0, [r5], -r0
    d5e8:	15000028 	strne	r0, [r0, #-40]	; 0xffffffd8
    d5ec:	0000031c 	andeq	r0, r0, ip, lsl r3
    d5f0:	09464200 	stmdbeq	r6, {r9, lr}^
    d5f4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    d5f8:	0029e801 	eoreq	lr, r9, r1, lsl #16
    d5fc:	02941500 	addseq	r1, r4, #0, 10
    d600:	32150000 	andscc	r0, r5, #0
    d604:	15000003 	strne	r0, [r0, #-3]
    d608:	00000332 	andeq	r0, r0, r2, lsr r3
    d60c:	00064200 	andeq	r4, r6, r0, lsl #4
    d610:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    d614:	0029fa01 	eoreq	pc, r9, r1, lsl #20
    d618:	02941500 	addseq	r1, r4, #0, 10
    d61c:	43000000 	movwmi	r0, #0
    d620:	0000142b 	andeq	r1, r0, fp, lsr #8
    d624:	07e0fd06 	strbeq	pc, [r0, r6, lsl #26]!	; <UNPREDICTABLE>
    d628:	2a140000 	bcs	50d630 <_Min_Stack_Size+0x50d230>
    d62c:	76150000 	ldrvc	r0, [r5], -r0
    d630:	15000028 	strne	r0, [r0, #-40]	; 0xffffffd8
    d634:	0000031c 	andeq	r0, r0, ip, lsl r3
    d638:	2e594100 	rdfcse	f4, f1, f0
    d63c:	ae090000 	cdpge	0, 0, cr0, cr9, cr0, {0}
    d640:	00075001 	andeq	r5, r7, r1
    d644:	002a2a00 	eoreq	r2, sl, r0, lsl #20
    d648:	0e031500 	cfsh32eq	mvfx1, mvfx3, #0
    d64c:	41000000 	mrsmi	r0, (UNDEF: 0)
    d650:	00002930 	andeq	r2, r0, r0, lsr r9
    d654:	5001b909 	andpl	fp, r1, r9, lsl #18
    d658:	4f000007 	svcmi	0x00000007
    d65c:	1500002a 	strne	r0, [r0, #-42]	; 0xffffffd6
    d660:	00000e03 	andeq	r0, r0, r3, lsl #28
    d664:	000b7e15 	andeq	r7, fp, r5, lsl lr
    d668:	031c1500 	tsteq	ip, #0, 10
    d66c:	32150000 	andscc	r0, r5, #0
    d670:	00000003 	andeq	r0, r0, r3
    d674:	002e8a41 	eoreq	r8, lr, r1, asr #20
    d678:	01ba0900 			; <UNDEFINED> instruction: 0x01ba0900
    d67c:	00000750 	andeq	r0, r0, r0, asr r7
    d680:	00002a74 	andeq	r2, r0, r4, ror sl
    d684:	000e0315 	andeq	r0, lr, r5, lsl r3
    d688:	0b7e1500 	bleq	1f92a90 <_Min_Stack_Size+0x1f92690>
    d68c:	1c150000 	ldcne	0, cr0, [r5], {-0}
    d690:	15000003 	strne	r0, [r0, #-3]
    d694:	00000332 	andeq	r0, r0, r2, lsr r3
    d698:	0fcb4000 	svceq	0x00cb4000
    d69c:	cf0d0000 	svcgt	0x000d0000
    d6a0:	00002a85 	andeq	r2, r0, r5, lsl #21
    d6a4:	00034415 	andeq	r4, r3, r5, lsl r4
    d6a8:	7f410000 	svcvc	0x00410000
    d6ac:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    d6b0:	0a6b0228 	beq	1acdf58 <_Min_Stack_Size+0x1acdb58>
    d6b4:	2a9b0000 	bcs	fe6cd6bc <_estack+0xde69d6bc>
    d6b8:	d5150000 	ldrle	r0, [r5, #-0]
    d6bc:	0000000e 	andeq	r0, r0, lr
    d6c0:	0017a041 	andseq	sl, r7, r1, asr #32
    d6c4:	01e60800 	mvneq	r0, r0, lsl #16
    d6c8:	00000750 	andeq	r0, r0, r0, asr r7
    d6cc:	00002ab1 			; <UNDEFINED> instruction: 0x00002ab1
    d6d0:	000ed515 	andeq	sp, lr, r5, lsl r5
    d6d4:	48410000 	stmdami	r1, {}^	; <UNPREDICTABLE>
    d6d8:	08000018 	stmdaeq	r0, {r3, r4}
    d6dc:	075001e7 	ldrbeq	r0, [r0, -r7, ror #3]
    d6e0:	2ac70000 	bcs	ff1cd6e8 <_estack+0xdf19d6e8>
    d6e4:	d5150000 	ldrle	r0, [r5, #-0]
    d6e8:	0000000e 	andeq	r0, r0, lr
    d6ec:	001c7f41 	andseq	r7, ip, r1, asr #30
    d6f0:	01f70800 	mvnseq	r0, r0, lsl #16
    d6f4:	00000750 	andeq	r0, r0, r0, asr r7
    d6f8:	00002afb 	strdeq	r2, [r0], -fp
    d6fc:	000ed515 	andeq	sp, lr, r5, lsl r5
    d700:	031c1500 	tsteq	ip, #0, 10
    d704:	1c150000 	ldcne	0, cr0, [r5], {-0}
    d708:	15000003 	strne	r0, [r0, #-3]
    d70c:	0000031c 	andeq	r0, r0, ip, lsl r3
    d710:	000b7e15 	andeq	r7, fp, r5, lsl lr
    d714:	031c1500 	tsteq	ip, #0, 10
    d718:	32150000 	andscc	r0, r5, #0
    d71c:	00000003 	andeq	r0, r0, r3
    d720:	00219341 	eoreq	r9, r1, r1, asr #6
    d724:	01f80800 	mvnseq	r0, r0, lsl #16
    d728:	00000750 	andeq	r0, r0, r0, asr r7
    d72c:	00002b2f 	andeq	r2, r0, pc, lsr #22
    d730:	000ed515 	andeq	sp, lr, r5, lsl r5
    d734:	031c1500 	tsteq	ip, #0, 10
    d738:	1c150000 	ldcne	0, cr0, [r5], {-0}
    d73c:	15000003 	strne	r0, [r0, #-3]
    d740:	0000031c 	andeq	r0, r0, ip, lsl r3
    d744:	000b7e15 	andeq	r7, fp, r5, lsl lr
    d748:	031c1500 	tsteq	ip, #0, 10
    d74c:	32150000 	andscc	r0, r5, #0
    d750:	00000003 	andeq	r0, r0, r3
    d754:	002ed444 	eoreq	sp, lr, r4, asr #8
    d758:	01bb0900 			; <UNDEFINED> instruction: 0x01bb0900
    d75c:	00000750 	andeq	r0, r0, r0, asr r7
    d760:	000e0315 	andeq	r0, lr, r5, lsl r3
    d764:	0b7e1500 	bleq	1f92b6c <_Min_Stack_Size+0x1f9276c>
    d768:	7e150000 	cdpvc	0, 1, cr0, cr5, cr0, {0}
    d76c:	1500000b 	strne	r0, [r0, #-11]
    d770:	0000031c 	andeq	r0, r0, ip, lsl r3
    d774:	00033215 	andeq	r3, r3, r5, lsl r2
    d778:	Address 0x000000000000d778 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xfffff4f8
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	130e2501 	movwne	r2, #58625	; 0xe501
      18:	1b0e030b 	blne	380c4c <_Min_Stack_Size+0x38084c>
      1c:	1117550e 	tstne	r7, lr, lsl #10
      20:	00171001 	andseq	r1, r7, r1
      24:	01040200 	mrseq	r0, R12_usr
      28:	0b3a0b0b 	bleq	e82c5c <_Min_Stack_Size+0xe8285c>
      2c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      30:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
      34:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      38:	0400000d 	streq	r0, [r0], #-13
      3c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      40:	0b3b0b3a 	bleq	ec2d30 <_Min_Stack_Size+0xec2930>
      44:	00001349 	andeq	r1, r0, r9, asr #6
      48:	0b002405 	bleq	9064 <_Min_Stack_Size+0x8c64>
      4c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      50:	0600000e 	streq	r0, [r0], -lr
      54:	0b0b0024 	bleq	2c00ec <_Min_Stack_Size+0x2bfcec>
      58:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      5c:	35070000 	strcc	r0, [r7, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <_Min_Heap_Size-0x158>
      78:	0b0b0113 	bleq	2c04cc <_Min_Stack_Size+0x2c00cc>
      7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      80:	00001301 	andeq	r1, r0, r1, lsl #6
      84:	03000d0b 	movweq	r0, #3339	; 0xd0b
      88:	3b0b3a0e 	blcc	2ce8c8 <_Min_Stack_Size+0x2ce4c8>
      8c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
      90:	0c00000b 	stceq	0, cr0, [r0], {11}
      94:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      9c:	0b381349 	bleq	e04dc8 <_Min_Stack_Size+0xe049c8>
      a0:	160d0000 	strne	r0, [sp], -r0
      a4:	3a0e0300 	bcc	380cac <_Min_Stack_Size+0x3808ac>
      a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      b0:	0b0b0113 	bleq	2c0504 <_Min_Stack_Size+0x2c0104>
      b4:	0b3b0b3a 	bleq	ec2da4 <_Min_Stack_Size+0xec29a4>
      b8:	00001301 	andeq	r1, r0, r1, lsl #6
      bc:	03000d0f 	movweq	r0, #3343	; 0xd0f
      c0:	3b0b3a0e 	blcc	2ce900 <_Min_Stack_Size+0x2ce500>
      c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      c8:	1000000b 	andne	r0, r0, fp
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <_Min_Stack_Size+0xec29c0>
      d4:	0b381349 	bleq	e04e00 <_Min_Stack_Size+0xe04a00>
      d8:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
      dc:	3a0e0301 	bcc	380ce8 <_Min_Stack_Size+0x3808e8>
      e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      e4:	010b2019 	tsteq	fp, r9, lsl r0
      e8:	12000013 	andne	r0, r0, #19
      ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      f0:	0b3b0b3a 	bleq	ec2de0 <_Min_Stack_Size+0xec29e0>
      f4:	00001349 	andeq	r1, r0, r9, asr #6
      f8:	01010b13 	tsteq	r1, r3, lsl fp
      fc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     100:	0000010b 	andeq	r0, r0, fp, lsl #2
     104:	03002e15 	movweq	r2, #3605	; 0xe15
     108:	3b0b3a0e 	blcc	2ce948 <_Min_Stack_Size+0x2ce548>
     10c:	2019270b 	andscs	r2, r9, fp, lsl #14
     110:	1600000b 	strne	r0, [r0], -fp
     114:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     118:	0b3a0e03 	bleq	e8392c <_Min_Stack_Size+0xe8352c>
     11c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     120:	01111349 	tsteq	r1, r9, asr #6
     124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     128:	01194297 			; <UNDEFINED> instruction: 0x01194297
     12c:	17000013 	smladne	r0, r3, r0, r0
     130:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     134:	17550152 			; <UNDEFINED> instruction: 0x17550152
     138:	0b590b58 	bleq	1642ea0 <_Min_Stack_Size+0x1642aa0>
     13c:	00001301 	andeq	r1, r0, r1, lsl #6
     140:	55010b18 	strpl	r0, [r1, #-2840]	; 0xfffff4e8
     144:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
     148:	13310034 	teqne	r1, #52	; 0x34
     14c:	00001802 	andeq	r1, r0, r2, lsl #16
     150:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
     154:	00130117 	andseq	r0, r3, r7, lsl r1
     158:	011d1b00 	tsteq	sp, r0, lsl #22
     15c:	01111331 	tsteq	r1, r1, lsr r3
     160:	0b580612 	bleq	16019b0 <_Min_Stack_Size+0x16015b0>
     164:	13010b59 	movwne	r0, #7001	; 0x1b59
     168:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
     16c:	11010182 	smlabbne	r1, r2, r1, r0
     170:	00133101 	andseq	r3, r3, r1, lsl #2
     174:	828a1d00 	addhi	r1, sl, #0, 26
     178:	18020001 	stmdane	r2, {r0}
     17c:	00184291 	mulseq	r8, r1, r2
     180:	82891e00 	addhi	r1, r9, #0, 28
     184:	01110101 	tsteq	r1, r1, lsl #2
     188:	13011331 	movwne	r1, #4913	; 0x1331
     18c:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
     190:	11000182 	smlabbne	r0, r2, r1, r0
     194:	00133101 	andseq	r3, r3, r1, lsl #2
     198:	010b2000 	mrseq	r2, (UNDEF: 11)
     19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1a0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     1a4:	03193f01 	tsteq	r9, #1, 30
     1a8:	3b0b3a0e 	blcc	2ce9e8 <_Min_Stack_Size+0x2ce5e8>
     1ac:	1119270b 	tstne	r9, fp, lsl #14
     1b0:	40061201 	andmi	r1, r6, r1, lsl #4
     1b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     1b8:	00001301 	andeq	r1, r0, r1, lsl #6
     1bc:	03000522 	movweq	r0, #1314	; 0x522
     1c0:	3b0b3a0e 	blcc	2cea00 <_Min_Stack_Size+0x2ce600>
     1c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1c8:	23000017 	movwcs	r0, #23
     1cc:	01018289 	smlabbeq	r1, r9, r2, r8
     1d0:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     1d4:	00133119 	andseq	r3, r3, r9, lsl r1
     1d8:	00342400 	eorseq	r2, r4, r0, lsl #8
     1dc:	0b3a0e03 	bleq	e839f0 <_Min_Stack_Size+0xe835f0>
     1e0:	1349053b 	movtne	r0, #38203	; 0x953b
     1e4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1e8:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     1ec:	03193f01 	tsteq	r9, #1, 30
     1f0:	3b0b3a0e 	blcc	2cea30 <_Min_Stack_Size+0x2ce630>
     1f4:	3c192705 	ldccc	7, cr2, [r9], {5}
     1f8:	00130119 	andseq	r0, r3, r9, lsl r1
     1fc:	00052600 	andeq	r2, r5, r0, lsl #12
     200:	00001349 	andeq	r1, r0, r9, asr #6
     204:	3f012e27 	svccc	0x00012e27
     208:	3a0e0319 	bcc	380e74 <_Min_Stack_Size+0x380a74>
     20c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     210:	3c134919 	ldccc	9, cr4, [r3], {25}
     214:	00130119 	andseq	r0, r3, r9, lsl r1
     218:	000f2800 	andeq	r2, pc, r0, lsl #16
     21c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     220:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
     224:	03193f00 	tsteq	r9, #0, 30
     228:	3b0b3a0e 	blcc	2cea68 <_Min_Stack_Size+0x2ce668>
     22c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     230:	00193c13 	andseq	r3, r9, r3, lsl ip
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     238:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     23c:	0b3b0b3a 	bleq	ec2f2c <_Min_Stack_Size+0xec2b2c>
     240:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     244:	00001301 	andeq	r1, r0, r1, lsl #6
     248:	3f012e2b 	svccc	0x00012e2b
     24c:	3a0e0319 	bcc	380eb8 <_Min_Stack_Size+0x380ab8>
     250:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     254:	00193c19 	andseq	r3, r9, r9, lsl ip
     258:	11010000 	mrsne	r0, (UNDEF: 1)
     25c:	130e2501 	movwne	r2, #58625	; 0xe501
     260:	1b0e030b 	blne	380e94 <_Min_Stack_Size+0x380a94>
     264:	1117550e 	tstne	r7, lr, lsl #10
     268:	00171001 	andseq	r1, r7, r1
     26c:	00240200 	eoreq	r0, r4, r0, lsl #4
     270:	0b3e0b0b 	bleq	f82ea4 <_Min_Stack_Size+0xf82aa4>
     274:	00000e03 	andeq	r0, r0, r3, lsl #28
     278:	03001603 	movweq	r1, #1539	; 0x603
     27c:	3b0b3a0e 	blcc	2ceabc <_Min_Stack_Size+0x2ce6bc>
     280:	0013490b 	andseq	r4, r3, fp, lsl #18
     284:	00240400 	eoreq	r0, r4, r0, lsl #8
     288:	0b3e0b0b 	bleq	f82ebc <_Min_Stack_Size+0xf82abc>
     28c:	00000803 	andeq	r0, r0, r3, lsl #16
     290:	3f002e05 	svccc	0x00002e05
     294:	3a0e0319 	bcc	380f00 <_Min_Stack_Size+0x380b00>
     298:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     29c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     2a0:	97184006 	ldrls	r4, [r8, -r6]
     2a4:	00001942 	andeq	r1, r0, r2, asr #18
     2a8:	3f012e06 	svccc	0x00012e06
     2ac:	3a0e0319 	bcc	380f18 <_Min_Stack_Size+0x380b18>
     2b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     2b8:	97184006 	ldrls	r4, [r8, -r6]
     2bc:	13011942 	movwne	r1, #6466	; 0x1942
     2c0:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     2c4:	11000182 	smlabbne	r0, r2, r1, r0
     2c8:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     2cc:	00001331 	andeq	r1, r0, r1, lsr r3
     2d0:	01828908 	orreq	r8, r2, r8, lsl #18
     2d4:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
     2d8:	13311942 	teqne	r1, #1081344	; 0x108000
     2dc:	8a090000 	bhi	2402e4 <_Min_Stack_Size+0x23fee4>
     2e0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     2e4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     2e8:	340a0000 	strcc	r0, [sl], #-0
     2ec:	3a0e0300 	bcc	380ef4 <_Min_Stack_Size+0x380af4>
     2f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     2f4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     2f8:	0b000019 	bleq	364 <_Min_Heap_Size+0x164>
     2fc:	13490035 	movtne	r0, #36917	; 0x9035
     300:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     304:	03193f00 	tsteq	r9, #0, 30
     308:	3b0b3a0e 	blcc	2ceb48 <_Min_Stack_Size+0x2ce748>
     30c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     310:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
     314:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     318:	0b3a0e03 	bleq	e83b2c <_Min_Stack_Size+0xe8372c>
     31c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     320:	0000193c 	andeq	r1, r0, ip, lsr r9
     324:	4900050e 	stmdbmi	r0, {r1, r2, r3, r8, sl}
     328:	00000013 	andeq	r0, r0, r3, lsl r0
     32c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     330:	030b130e 	movweq	r1, #45838	; 0xb30e
     334:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     338:	10011117 	andne	r1, r1, r7, lsl r1
     33c:	02000017 	andeq	r0, r0, #23
     340:	0b0b0024 	bleq	2c03d8 <_Min_Stack_Size+0x2bffd8>
     344:	0e030b3e 	vmoveq.16	d3[0], r0
     348:	16030000 	strne	r0, [r3], -r0
     34c:	3a0e0300 	bcc	380f54 <_Min_Stack_Size+0x380b54>
     350:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     354:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     358:	0b0b0024 	bleq	2c03f0 <_Min_Stack_Size+0x2bfff0>
     35c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     360:	35050000 	strcc	r0, [r5, #-0]
     364:	00134900 	andseq	r4, r3, r0, lsl #18
     368:	01130600 	tsteq	r3, r0, lsl #12
     36c:	0b3a0b0b 	bleq	e82fa0 <_Min_Stack_Size+0xe82ba0>
     370:	1301053b 	movwne	r0, #5435	; 0x153b
     374:	0d070000 	stceq	0, cr0, [r7, #-0]
     378:	3a0e0300 	bcc	380f80 <_Min_Stack_Size+0x380b80>
     37c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     380:	000b3813 	andeq	r3, fp, r3, lsl r8
     384:	000d0800 	andeq	r0, sp, r0, lsl #16
     388:	0b3a0803 	bleq	e8239c <_Min_Stack_Size+0xe81f9c>
     38c:	1349053b 	movtne	r0, #38203	; 0x953b
     390:	00000b38 	andeq	r0, r0, r8, lsr fp
     394:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
     398:	0a000013 	beq	3ec <_Min_Heap_Size+0x1ec>
     39c:	13490101 	movtne	r0, #37121	; 0x9101
     3a0:	00001301 	andeq	r1, r0, r1, lsl #6
     3a4:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
     3a8:	000b2f13 	andeq	r2, fp, r3, lsl pc
     3ac:	00160c00 	andseq	r0, r6, r0, lsl #24
     3b0:	0b3a0e03 	bleq	e83bc4 <_Min_Stack_Size+0xe837c4>
     3b4:	1349053b 	movtne	r0, #38203	; 0x953b
     3b8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     3bc:	03193f00 	tsteq	r9, #0, 30
     3c0:	3b0b3a0e 	blcc	2cec00 <_Min_Stack_Size+0x2ce800>
     3c4:	1119270b 	tstne	r9, fp, lsl #14
     3c8:	40061201 	andmi	r1, r6, r1, lsl #4
     3cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3d0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     3d4:	03193f01 	tsteq	r9, #1, 30
     3d8:	3b0b3a0e 	blcc	2cec18 <_Min_Stack_Size+0x2ce818>
     3dc:	1119270b 	tstne	r9, fp, lsl #14
     3e0:	40061201 	andmi	r1, r6, r1, lsl #4
     3e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3e8:	00001301 	andeq	r1, r0, r1, lsl #6
     3ec:	0300340f 	movweq	r3, #1039	; 0x40f
     3f0:	3b0b3a08 	blcc	2cec18 <_Min_Stack_Size+0x2ce818>
     3f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3f8:	10000017 	andne	r0, r0, r7, lsl r0
     3fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     400:	0b3b0b3a 	bleq	ec30f0 <_Min_Stack_Size+0xec2cf0>
     404:	17021349 	strne	r1, [r2, -r9, asr #6]
     408:	34110000 	ldrcc	r0, [r1], #-0
     40c:	3a0e0300 	bcc	381014 <_Min_Stack_Size+0x380c14>
     410:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     414:	3c193f13 	ldccc	15, cr3, [r9], {19}
     418:	12000019 	andne	r0, r0, #25
     41c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     420:	0b3b0b3a 	bleq	ec3110 <_Min_Stack_Size+0xec2d10>
     424:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     428:	00001802 	andeq	r1, r0, r2, lsl #16
     42c:	01110100 	tsteq	r1, r0, lsl #2
     430:	0b130e25 	bleq	4c3ccc <_Min_Stack_Size+0x4c38cc>
     434:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     438:	01111755 	tsteq	r1, r5, asr r7
     43c:	00001710 	andeq	r1, r0, r0, lsl r7
     440:	0b010402 	bleq	41450 <_Min_Stack_Size+0x41050>
     444:	3b0b3a0b 	blcc	2cec78 <_Min_Stack_Size+0x2ce878>
     448:	0013010b 	andseq	r0, r3, fp, lsl #2
     44c:	00280300 	eoreq	r0, r8, r0, lsl #6
     450:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     454:	16040000 	strne	r0, [r4], -r0
     458:	3a0e0300 	bcc	381060 <_Min_Stack_Size+0x380c60>
     45c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     460:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     464:	0b0b0024 	bleq	2c04fc <_Min_Stack_Size+0x2c00fc>
     468:	0e030b3e 	vmoveq.16	d3[0], r0
     46c:	24060000 	strcs	r0, [r6], #-0
     470:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     474:	0008030b 	andeq	r0, r8, fp, lsl #6
     478:	00350700 	eorseq	r0, r5, r0, lsl #14
     47c:	00001349 	andeq	r1, r0, r9, asr #6
     480:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
     484:	09000013 	stmdbeq	r0, {r0, r1, r4}
     488:	13490101 	movtne	r0, #37121	; 0x9101
     48c:	00001301 	andeq	r1, r0, r1, lsl #6
     490:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
     494:	000b2f13 	andeq	r2, fp, r3, lsl pc
     498:	01130b00 	tsteq	r3, r0, lsl #22
     49c:	0b3a0b0b 	bleq	e830d0 <_Min_Stack_Size+0xe82cd0>
     4a0:	1301053b 	movwne	r0, #5435	; 0x153b
     4a4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     4a8:	3a0e0300 	bcc	3810b0 <_Min_Stack_Size+0x380cb0>
     4ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4b0:	000b3813 	andeq	r3, fp, r3, lsl r8
     4b4:	000d0d00 	andeq	r0, sp, r0, lsl #26
     4b8:	0b3a0803 	bleq	e824cc <_Min_Stack_Size+0xe820cc>
     4bc:	1349053b 	movtne	r0, #38203	; 0x953b
     4c0:	00000b38 	andeq	r0, r0, r8, lsr fp
     4c4:	0300160e 	movweq	r1, #1550	; 0x60e
     4c8:	3b0b3a0e 	blcc	2ced08 <_Min_Stack_Size+0x2ce908>
     4cc:	00134905 	andseq	r4, r3, r5, lsl #18
     4d0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
     4d4:	0b3a0e03 	bleq	e83ce8 <_Min_Stack_Size+0xe838e8>
     4d8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     4dc:	0b201349 	bleq	805208 <_Min_Stack_Size+0x804e08>
     4e0:	00001301 	andeq	r1, r0, r1, lsl #6
     4e4:	03000510 	movweq	r0, #1296	; 0x510
     4e8:	3b0b3a0e 	blcc	2ced28 <_Min_Stack_Size+0x2ce928>
     4ec:	00134905 	andseq	r4, r3, r5, lsl #18
     4f0:	00341100 	eorseq	r1, r4, r0, lsl #2
     4f4:	0b3a0e03 	bleq	e83d08 <_Min_Stack_Size+0xe83908>
     4f8:	1349053b 	movtne	r0, #38203	; 0x953b
     4fc:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     500:	03193f00 	tsteq	r9, #0, 30
     504:	3b0b3a0e 	blcc	2ced44 <_Min_Stack_Size+0x2ce944>
     508:	1119270b 	tstne	r9, fp, lsl #14
     50c:	40061201 	andmi	r1, r6, r1, lsl #4
     510:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     514:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     518:	03193f01 	tsteq	r9, #1, 30
     51c:	3b0b3a0e 	blcc	2ced5c <_Min_Stack_Size+0x2ce95c>
     520:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     524:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     528:	97184006 	ldrls	r4, [r8, -r6]
     52c:	13011942 	movwne	r1, #6466	; 0x1942
     530:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
     534:	11000182 	smlabbne	r0, r2, r1, r0
     538:	00133101 	andseq	r3, r3, r1, lsl #2
     53c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     540:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     548:	13491927 	movtne	r1, #39207	; 0x9927
     54c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     550:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     554:	00130119 	andseq	r0, r3, r9, lsl r1
     558:	00051600 	andeq	r1, r5, r0, lsl #12
     55c:	0b3a0e03 	bleq	e83d70 <_Min_Stack_Size+0xe83970>
     560:	1349053b 	movtne	r0, #38203	; 0x953b
     564:	00001702 	andeq	r1, r0, r2, lsl #14
     568:	01828917 	orreq	r8, r2, r7, lsl r9
     56c:	31011101 	tstcc	r1, r1, lsl #2
     570:	18000013 	stmdane	r0, {r0, r1, r4}
     574:	0001828a 	andeq	r8, r1, sl, lsl #5
     578:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     57c:	19000018 	stmdbne	r0, {r3, r4}
     580:	01018289 	smlabbeq	r1, r9, r2, r8
     584:	13310111 	teqne	r1, #1073741828	; 0x40000004
     588:	00001301 	andeq	r1, r0, r1, lsl #6
     58c:	3f002e1a 	svccc	0x00002e1a
     590:	3a0e0319 	bcc	3811fc <_Min_Stack_Size+0x380dfc>
     594:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     598:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     59c:	97184006 	ldrls	r4, [r8, -r6]
     5a0:	00001942 	andeq	r1, r0, r2, asr #18
     5a4:	3f002e1b 	svccc	0x00002e1b
     5a8:	3a0e0319 	bcc	381214 <_Min_Stack_Size+0x380e14>
     5ac:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     5b0:	11134919 	tstne	r3, r9, lsl r9
     5b4:	40061201 	andmi	r1, r6, r1, lsl #4
     5b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     5bc:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     5c0:	03193f01 	tsteq	r9, #1, 30
     5c4:	3b0b3a0e 	blcc	2cee04 <_Min_Stack_Size+0x2cea04>
     5c8:	11192705 	tstne	r9, r5, lsl #14
     5cc:	40061201 	andmi	r1, r6, r1, lsl #4
     5d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     5d4:	00001301 	andeq	r1, r0, r1, lsl #6
     5d8:	0300341d 	movweq	r3, #1053	; 0x41d
     5dc:	3b0b3a0e 	blcc	2cee1c <_Min_Stack_Size+0x2cea1c>
     5e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     5e4:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     5e8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     5ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5f0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     5f4:	051f0000 	ldreq	r0, [pc, #-0]	; 5fc <_Min_Stack_Size+0x1fc>
     5f8:	1c133100 	ldfnes	f3, [r3], {-0}
     5fc:	2000000b 	andcs	r0, r0, fp
     600:	0111010b 	tsteq	r1, fp, lsl #2
     604:	00000612 	andeq	r0, r0, r2, lsl r6
     608:	31003421 	tstcc	r0, r1, lsr #8
     60c:	00170213 	andseq	r0, r7, r3, lsl r2
     610:	00052200 	andeq	r2, r5, r0, lsl #4
     614:	051c1331 	ldreq	r1, [ip, #-817]	; 0xfffffccf
     618:	34230000 	strtcc	r0, [r3], #-0
     61c:	3a0e0300 	bcc	381224 <_Min_Stack_Size+0x380e24>
     620:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     624:	3c193f13 	ldccc	15, cr3, [r9], {19}
     628:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
     62c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     630:	0b3b0b3a 	bleq	ec3320 <_Min_Stack_Size+0xec2f20>
     634:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     638:	0000193c 	andeq	r1, r0, ip, lsr r9
     63c:	03003425 	movweq	r3, #1061	; 0x425
     640:	3b0b3a0e 	blcc	2cee80 <_Min_Stack_Size+0x2cea80>
     644:	3f13490b 	svccc	0x0013490b
     648:	00180219 	andseq	r0, r8, r9, lsl r2
     64c:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     650:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     654:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     658:	13491927 	movtne	r1, #39207	; 0x9927
     65c:	1301193c 	movwne	r1, #6460	; 0x193c
     660:	05270000 	streq	r0, [r7, #-0]!
     664:	00134900 	andseq	r4, r3, r0, lsl #18
     668:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
     66c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     670:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     674:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     678:	00001301 	andeq	r1, r0, r1, lsl #6
     67c:	3f012e29 	svccc	0x00012e29
     680:	3a0e0319 	bcc	3812ec <_Min_Stack_Size+0x380eec>
     684:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     688:	00193c19 	andseq	r3, r9, r9, lsl ip
     68c:	11010000 	mrsne	r0, (UNDEF: 1)
     690:	130e2501 	movwne	r2, #58625	; 0xe501
     694:	1b0e030b 	blne	3812c8 <_Min_Stack_Size+0x380ec8>
     698:	1117550e 	tstne	r7, lr, lsl #10
     69c:	00171001 	andseq	r1, r7, r1
     6a0:	01040200 	mrseq	r0, R12_usr
     6a4:	0b3a0b0b 	bleq	e832d8 <_Min_Stack_Size+0xe82ed8>
     6a8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     6ac:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
     6b0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     6b4:	0400000d 	streq	r0, [r0], #-13
     6b8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     6bc:	0b3b0b3a 	bleq	ec33ac <_Min_Stack_Size+0xec2fac>
     6c0:	00001349 	andeq	r1, r0, r9, asr #6
     6c4:	0b002405 	bleq	96e0 <_Min_Stack_Size+0x92e0>
     6c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     6cc:	0600000e 	streq	r0, [r0], -lr
     6d0:	0b0b0024 	bleq	2c0768 <_Min_Stack_Size+0x2c0368>
     6d4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6d8:	13070000 	movwne	r0, #28672	; 0x7000
     6dc:	3a050b01 	bcc	1432e8 <_Min_Stack_Size+0x142ee8>
     6e0:	01053b0b 	tsteq	r5, fp, lsl #22
     6e4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     6e8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     6ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6f0:	0b381349 	bleq	e0541c <_Min_Stack_Size+0xe0501c>
     6f4:	0d090000 	stceq	0, cr0, [r9, #-0]
     6f8:	3a0e0300 	bcc	381300 <_Min_Stack_Size+0x380f00>
     6fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     700:	00053813 	andeq	r3, r5, r3, lsl r8
     704:	000d0a00 	andeq	r0, sp, r0, lsl #20
     708:	0b3a0803 	bleq	e8271c <_Min_Stack_Size+0xe8231c>
     70c:	1349053b 	movtne	r0, #38203	; 0x953b
     710:	00000538 	andeq	r0, r0, r8, lsr r5
     714:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     718:	00130113 	andseq	r0, r3, r3, lsl r1
     71c:	00210c00 	eoreq	r0, r1, r0, lsl #24
     720:	0b2f1349 	bleq	bc544c <_Min_Stack_Size+0xbc504c>
     724:	350d0000 	strcc	r0, [sp, #-0]
     728:	00134900 	andseq	r4, r3, r0, lsl #18
     72c:	00210e00 	eoreq	r0, r1, r0, lsl #28
     730:	052f1349 	streq	r1, [pc, #-841]!	; 3ef <_Min_Heap_Size+0x1ef>
     734:	160f0000 	strne	r0, [pc], -r0
     738:	3a0e0300 	bcc	381340 <_Min_Stack_Size+0x380f40>
     73c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     740:	10000013 	andne	r0, r0, r3, lsl r0
     744:	0b0b0113 	bleq	2c0b98 <_Min_Stack_Size+0x2c0798>
     748:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     74c:	00001301 	andeq	r1, r0, r1, lsl #6
     750:	03000d11 	movweq	r0, #3345	; 0xd11
     754:	3b0b3a08 	blcc	2cef7c <_Min_Stack_Size+0x2ceb7c>
     758:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     75c:	1200000b 	andne	r0, r0, #11
     760:	13490026 	movtne	r0, #36902	; 0x9026
     764:	28130000 	ldmdacs	r3, {}	; <UNPREDICTABLE>
     768:	1c080300 	stcne	3, cr0, [r8], {-0}
     76c:	1400000d 	strne	r0, [r0], #-13
     770:	0b0b0113 	bleq	2c0bc4 <_Min_Stack_Size+0x2c07c4>
     774:	0b3b0b3a 	bleq	ec3464 <_Min_Stack_Size+0xec3064>
     778:	00001301 	andeq	r1, r0, r1, lsl #6
     77c:	03000d15 	movweq	r0, #3349	; 0xd15
     780:	3b0b3a0e 	blcc	2cefc0 <_Min_Stack_Size+0x2cebc0>
     784:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     788:	1600000b 	strne	r0, [r0], -fp
     78c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     790:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     794:	0b201927 	bleq	806c38 <_Min_Stack_Size+0x806838>
     798:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     79c:	3a0e0301 	bcc	3813a8 <_Min_Stack_Size+0x380fa8>
     7a0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     7a4:	010b2019 	tsteq	fp, r9, lsl r0
     7a8:	18000013 	stmdane	r0, {r0, r1, r4}
     7ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     7b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7b4:	00001349 	andeq	r1, r0, r9, asr #6
     7b8:	03003419 	movweq	r3, #1049	; 0x419
     7bc:	3b0b3a0e 	blcc	2ceffc <_Min_Stack_Size+0x2cebfc>
     7c0:	00134905 	andseq	r4, r3, r5, lsl #18
     7c4:	002e1a00 	eoreq	r1, lr, r0, lsl #20
     7c8:	0b3a0e03 	bleq	e83fdc <_Min_Stack_Size+0xe83bdc>
     7cc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     7d0:	0b201349 	bleq	8054fc <_Min_Stack_Size+0x8050fc>
     7d4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     7d8:	3a0e0301 	bcc	3813e4 <_Min_Stack_Size+0x380fe4>
     7dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     7e0:	20134919 	andscs	r4, r3, r9, lsl r9
     7e4:	0013010b 	andseq	r0, r3, fp, lsl #2
     7e8:	000f1c00 	andeq	r1, pc, r0, lsl #24
     7ec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     7f0:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     7f4:	03193f01 	tsteq	r9, #1, 30
     7f8:	3b0b3a0e 	blcc	2cf038 <_Min_Stack_Size+0x2cec38>
     7fc:	1119270b 	tstne	r9, fp, lsl #14
     800:	40061201 	andmi	r1, r6, r1, lsl #4
     804:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     808:	00001301 	andeq	r1, r0, r1, lsl #6
     80c:	0300051e 	movweq	r0, #1310	; 0x51e
     810:	3b0b3a0e 	blcc	2cf050 <_Min_Stack_Size+0x2cec50>
     814:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     818:	1f000017 	svcne	0x00000017
     81c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     820:	06120111 			; <UNDEFINED> instruction: 0x06120111
     824:	0b590b58 	bleq	164358c <_Min_Stack_Size+0x164318c>
     828:	05200000 	streq	r0, [r0, #-0]!
     82c:	02133100 	andseq	r3, r3, #0, 2
     830:	21000017 	tstcs	r0, r7, lsl r0
     834:	0111010b 	tsteq	r1, fp, lsl #2
     838:	00000612 	andeq	r0, r0, r2, lsl r6
     83c:	31003422 	tstcc	r0, r2, lsr #8
     840:	00170213 	andseq	r0, r7, r3, lsl r2
     844:	00342300 	eorseq	r2, r4, r0, lsl #6
     848:	0b3a0e03 	bleq	e8405c <_Min_Stack_Size+0xe83c5c>
     84c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     850:	00001702 	andeq	r1, r0, r2, lsl #14
     854:	31001d24 	tstcc	r0, r4, lsr #26
     858:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     85c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     860:	2500000b 	strcs	r0, [r0, #-11]
     864:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     868:	17550152 			; <UNDEFINED> instruction: 0x17550152
     86c:	0b590b58 	bleq	16435d4 <_Min_Stack_Size+0x16431d4>
     870:	00001301 	andeq	r1, r0, r1, lsl #6
     874:	55010b26 	strpl	r0, [r1, #-2854]	; 0xfffff4da
     878:	27000017 	smladcs	r0, r7, r0, r0
     87c:	13310034 	teqne	r1, #52	; 0x34
     880:	1d280000 	stcne	0, cr0, [r8, #-0]
     884:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     888:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     88c:	000b590b 	andeq	r5, fp, fp, lsl #18
     890:	001d2900 	andseq	r2, sp, r0, lsl #18
     894:	01111331 	tsteq	r1, r1, lsr r3
     898:	0b580612 	bleq	16020e8 <_Min_Stack_Size+0x1601ce8>
     89c:	00000559 	andeq	r0, r0, r9, asr r5
     8a0:	3f012e2a 	svccc	0x00012e2a
     8a4:	3a0e0319 	bcc	381510 <_Min_Stack_Size+0x381110>
     8a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     8ac:	11134919 	tstne	r3, r9, lsl r9
     8b0:	40061201 	andmi	r1, r6, r1, lsl #4
     8b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8b8:	00001301 	andeq	r1, r0, r1, lsl #6
     8bc:	31011d2b 	tstcc	r1, fp, lsr #26
     8c0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     8c4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     8c8:	2c000005 	stccs	0, cr0, [r0], {5}
     8cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8d0:	0b3a0e03 	bleq	e840e4 <_Min_Stack_Size+0xe83ce4>
     8d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8e0:	00130119 	andseq	r0, r3, r9, lsl r1
     8e4:	00052d00 	andeq	r2, r5, r0, lsl #26
     8e8:	0b3a0e03 	bleq	e840fc <_Min_Stack_Size+0xe83cfc>
     8ec:	1349053b 	movtne	r0, #38203	; 0x953b
     8f0:	00001702 	andeq	r1, r0, r2, lsl #14
     8f4:	3f012e2e 	svccc	0x00012e2e
     8f8:	3a0e0319 	bcc	381564 <_Min_Stack_Size+0x381164>
     8fc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     900:	11134919 	tstne	r3, r9, lsl r9
     904:	40061201 	andmi	r1, r6, r1, lsl #4
     908:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     90c:	00001301 	andeq	r1, r0, r1, lsl #6
     910:	0300052f 	movweq	r0, #1327	; 0x52f
     914:	3b0b3a0e 	blcc	2cf154 <_Min_Stack_Size+0x2ced54>
     918:	02134905 	andseq	r4, r3, #81920	; 0x14000
     91c:	30000018 	andcc	r0, r0, r8, lsl r0
     920:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     924:	17550152 			; <UNDEFINED> instruction: 0x17550152
     928:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     92c:	00001301 	andeq	r1, r0, r1, lsl #6
     930:	31011d31 	tstcc	r1, r1, lsr sp
     934:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     938:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     93c:	32000005 	andcc	r0, r0, #5
     940:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     944:	0b3a0e03 	bleq	e84158 <_Min_Stack_Size+0xe83d58>
     948:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     94c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     950:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     954:	33000019 	movwcc	r0, #25
     958:	00018289 	andeq	r8, r1, r9, lsl #5
     95c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     960:	34340000 	ldrtcc	r0, [r4], #-0
     964:	3a0e0300 	bcc	38156c <_Min_Stack_Size+0x38116c>
     968:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     96c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     970:	00000019 	andeq	r0, r0, r9, lsl r0
     974:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     978:	030b130e 	movweq	r1, #45838	; 0xb30e
     97c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     980:	10011117 	andne	r1, r1, r7, lsl r1
     984:	02000017 	andeq	r0, r0, #23
     988:	0b0b0024 	bleq	2c0a20 <_Min_Stack_Size+0x2c0620>
     98c:	0e030b3e 	vmoveq.16	d3[0], r0
     990:	16030000 	strne	r0, [r3], -r0
     994:	3a0e0300 	bcc	38159c <_Min_Stack_Size+0x38119c>
     998:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     99c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     9a0:	0b0b0024 	bleq	2c0a38 <_Min_Stack_Size+0x2c0638>
     9a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     9a8:	35050000 	strcc	r0, [r5, #-0]
     9ac:	00134900 	andseq	r4, r3, r0, lsl #18
     9b0:	01010600 	tsteq	r1, r0, lsl #12
     9b4:	13011349 	movwne	r1, #4937	; 0x1349
     9b8:	21070000 	mrscs	r0, (UNDEF: 7)
     9bc:	2f134900 	svccs	0x00134900
     9c0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     9c4:	0b0b0113 	bleq	2c0e18 <_Min_Stack_Size+0x2c0a18>
     9c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9cc:	00001301 	andeq	r1, r0, r1, lsl #6
     9d0:	03000d09 	movweq	r0, #3337	; 0xd09
     9d4:	3b0b3a08 	blcc	2cf1fc <_Min_Stack_Size+0x2cedfc>
     9d8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     9dc:	0a00000b 	beq	a10 <_Min_Stack_Size+0x610>
     9e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     9e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9e8:	0b381349 	bleq	e05714 <_Min_Stack_Size+0xe05314>
     9ec:	160b0000 	strne	r0, [fp], -r0
     9f0:	3a0e0300 	bcc	3815f8 <_Min_Stack_Size+0x3811f8>
     9f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f8:	0c000013 	stceq	0, cr0, [r0], {19}
     9fc:	0b0b0104 	bleq	2c0e14 <_Min_Stack_Size+0x2c0a14>
     a00:	0b3b0b3a 	bleq	ec36f0 <_Min_Stack_Size+0xec32f0>
     a04:	00001301 	andeq	r1, r0, r1, lsl #6
     a08:	0300280d 	movweq	r2, #2061	; 0x80d
     a0c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     a10:	00280e00 	eoreq	r0, r8, r0, lsl #28
     a14:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     a18:	130f0000 	movwne	r0, #61440	; 0xf000
     a1c:	3a0b0b01 	bcc	2c3628 <_Min_Stack_Size+0x2c3228>
     a20:	010b3b0b 	tsteq	fp, fp, lsl #22
     a24:	10000013 	andne	r0, r0, r3, lsl r0
     a28:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     a2c:	0b3b0b3a 	bleq	ec371c <_Min_Stack_Size+0xec331c>
     a30:	0b381349 	bleq	e0575c <_Min_Stack_Size+0xe0535c>
     a34:	0d110000 	ldceq	0, cr0, [r1, #-0]
     a38:	3a0e0300 	bcc	381640 <_Min_Stack_Size+0x381240>
     a3c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a40:	000b3813 	andeq	r3, fp, r3, lsl r8
     a44:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
     a48:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a4c:	0b3b0b3a 	bleq	ec373c <_Min_Stack_Size+0xec333c>
     a50:	01111927 	tsteq	r1, r7, lsr #18
     a54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a58:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a5c:	13000013 	movwne	r0, #19
     a60:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a64:	0b3b0b3a 	bleq	ec3754 <_Min_Stack_Size+0xec3354>
     a68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a6c:	34140000 	ldrcc	r0, [r4], #-0
     a70:	3a0e0300 	bcc	381678 <_Min_Stack_Size+0x381278>
     a74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a78:	00170213 	andseq	r0, r7, r3, lsl r2
     a7c:	010b1500 	tsteq	fp, r0, lsl #10
     a80:	00001755 	andeq	r1, r0, r5, asr r7
     a84:	03003416 	movweq	r3, #1046	; 0x416
     a88:	3b0b3a0e 	blcc	2cf2c8 <_Min_Stack_Size+0x2ceec8>
     a8c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a90:	17000018 	smladne	r0, r8, r0, r0
     a94:	0b0b000f 	bleq	2c0ad8 <_Min_Stack_Size+0x2c06d8>
     a98:	00001349 	andeq	r1, r0, r9, asr #6
     a9c:	3f012e18 	svccc	0x00012e18
     aa0:	3a0e0319 	bcc	38170c <_Min_Stack_Size+0x38130c>
     aa4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     aa8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     aac:	97184006 	ldrls	r4, [r8, -r6]
     ab0:	13011942 	movwne	r1, #6466	; 0x1942
     ab4:	05190000 	ldreq	r0, [r9, #-0]
     ab8:	3a0e0300 	bcc	3816c0 <_Min_Stack_Size+0x3812c0>
     abc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac0:	00180213 	andseq	r0, r8, r3, lsl r2
     ac4:	00051a00 	andeq	r1, r5, r0, lsl #20
     ac8:	0b3a0e03 	bleq	e842dc <_Min_Stack_Size+0xe83edc>
     acc:	1349053b 	movtne	r0, #38203	; 0x953b
     ad0:	00001702 	andeq	r1, r0, r2, lsl #14
     ad4:	0300341b 	movweq	r3, #1051	; 0x41b
     ad8:	3b0b3a0e 	blcc	2cf318 <_Min_Stack_Size+0x2cef18>
     adc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ae0:	1c000017 	stcne	0, cr0, [r0], {23}
     ae4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     ae8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     aec:	17021349 	strne	r1, [r2, -r9, asr #6]
     af0:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     af4:	03193f01 	tsteq	r9, #1, 30
     af8:	3b0b3a0e 	blcc	2cf338 <_Min_Stack_Size+0x2cef38>
     afc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     b00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b04:	97184006 	ldrls	r4, [r8, -r6]
     b08:	13011942 	movwne	r1, #6466	; 0x1942
     b0c:	341e0000 	ldrcc	r0, [lr], #-0
     b10:	3a080300 	bcc	201718 <_Min_Stack_Size+0x201318>
     b14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	00180213 	andseq	r0, r8, r3, lsl r2
     b1c:	82891f00 	addhi	r1, r9, #0, 30
     b20:	01110001 	tsteq	r1, r1
     b24:	00001331 	andeq	r1, r0, r1, lsr r3
     b28:	03003420 	movweq	r3, #1056	; 0x420
     b2c:	3b0b3a0e 	blcc	2cf36c <_Min_Stack_Size+0x2cef6c>
     b30:	3f134905 	svccc	0x00134905
     b34:	00193c19 	andseq	r3, r9, r9, lsl ip
     b38:	11010000 	mrsne	r0, (UNDEF: 1)
     b3c:	130e2501 	movwne	r2, #58625	; 0xe501
     b40:	1b0e030b 	blne	381774 <_Min_Stack_Size+0x381374>
     b44:	1117550e 	tstne	r7, lr, lsl #10
     b48:	00171001 	andseq	r1, r7, r1
     b4c:	00240200 	eoreq	r0, r4, r0, lsl #4
     b50:	0b3e0b0b 	bleq	f83784 <_Min_Stack_Size+0xf83384>
     b54:	00000e03 	andeq	r0, r0, r3, lsl #28
     b58:	03001603 	movweq	r1, #1539	; 0x603
     b5c:	3b0b3a0e 	blcc	2cf39c <_Min_Stack_Size+0x2cef9c>
     b60:	0013490b 	andseq	r4, r3, fp, lsl #18
     b64:	00240400 	eoreq	r0, r4, r0, lsl #8
     b68:	0b3e0b0b 	bleq	f8379c <_Min_Stack_Size+0xf8339c>
     b6c:	00000803 	andeq	r0, r0, r3, lsl #16
     b70:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     b74:	06000013 			; <UNDEFINED> instruction: 0x06000013
     b78:	0b0b0113 	bleq	2c0fcc <_Min_Stack_Size+0x2c0bcc>
     b7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b80:	00001301 	andeq	r1, r0, r1, lsl #6
     b84:	03000d07 	movweq	r0, #3335	; 0xd07
     b88:	3b0b3a08 	blcc	2cf3b0 <_Min_Stack_Size+0x2cefb0>
     b8c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     b90:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     b94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b9c:	0b381349 	bleq	e058c8 <_Min_Stack_Size+0xe054c8>
     ba0:	16090000 	strne	r0, [r9], -r0
     ba4:	3a0e0300 	bcc	3817ac <_Min_Stack_Size+0x3813ac>
     ba8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bac:	0a000013 	beq	c00 <_Min_Stack_Size+0x800>
     bb0:	0b0b0104 	bleq	2c0fc8 <_Min_Stack_Size+0x2c0bc8>
     bb4:	0b3b0b3a 	bleq	ec38a4 <_Min_Stack_Size+0xec34a4>
     bb8:	00001301 	andeq	r1, r0, r1, lsl #6
     bbc:	0300280b 	movweq	r2, #2059	; 0x80b
     bc0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     bc4:	00280c00 	eoreq	r0, r8, r0, lsl #24
     bc8:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     bcc:	0f0d0000 	svceq	0x000d0000
     bd0:	000b0b00 	andeq	r0, fp, r0, lsl #22
     bd4:	01130e00 	tsteq	r3, r0, lsl #28
     bd8:	0b3a0b0b 	bleq	e8380c <_Min_Stack_Size+0xe8340c>
     bdc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     be0:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; be8 <_Min_Stack_Size+0x7e8>
     be4:	3a0e0300 	bcc	3817ec <_Min_Stack_Size+0x3813ec>
     be8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bec:	000b3813 	andeq	r3, fp, r3, lsl r8
     bf0:	01131000 	tsteq	r3, r0
     bf4:	0b0b0e03 	bleq	2c4408 <_Min_Stack_Size+0x2c4008>
     bf8:	0b3b0b3a 	bleq	ec38e8 <_Min_Stack_Size+0xec34e8>
     bfc:	00001301 	andeq	r1, r0, r1, lsl #6
     c00:	0b000f11 	bleq	484c <_Min_Stack_Size+0x444c>
     c04:	0013490b 	andseq	r4, r3, fp, lsl #18
     c08:	01151200 	tsteq	r5, r0, lsl #4
     c0c:	13011927 	movwne	r1, #6439	; 0x1927
     c10:	05130000 	ldreq	r0, [r3, #-0]
     c14:	00134900 	andseq	r4, r3, r0, lsl #18
     c18:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     c1c:	0b3a0e03 	bleq	e84430 <_Min_Stack_Size+0xe84030>
     c20:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c24:	0b201349 	bleq	805950 <_Min_Stack_Size+0x805550>
     c28:	00001301 	andeq	r1, r0, r1, lsl #6
     c2c:	03000515 	movweq	r0, #1301	; 0x515
     c30:	3b0b3a0e 	blcc	2cf470 <_Min_Stack_Size+0x2cf070>
     c34:	00134905 	andseq	r4, r3, r5, lsl #18
     c38:	010b1600 	tsteq	fp, r0, lsl #12
     c3c:	34170000 	ldrcc	r0, [r7], #-0
     c40:	3a0e0300 	bcc	381848 <_Min_Stack_Size+0x381448>
     c44:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c48:	18000013 	stmdane	r0, {r0, r1, r4}
     c4c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     c50:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c54:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c58:	00130119 	andseq	r0, r3, r9, lsl r1
     c5c:	00051900 	andeq	r1, r5, r0, lsl #18
     c60:	17021331 	smladxne	r2, r1, r3, r1
     c64:	051a0000 	ldreq	r0, [sl, #-0]
     c68:	1c133100 	ldfnes	f3, [r3], {-0}
     c6c:	1b000006 	blne	c8c <_Min_Stack_Size+0x88c>
     c70:	00018289 	andeq	r8, r1, r9, lsl #5
     c74:	13310111 	teqne	r1, #1073741828	; 0x40000004
     c78:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     c7c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     c80:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     c84:	0105590b 	tsteq	r5, fp, lsl #18
     c88:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     c8c:	13310005 	teqne	r1, #5
     c90:	00000b1c 	andeq	r0, r0, ip, lsl fp
     c94:	3100051e 	tstcc	r0, lr, lsl r5
     c98:	00180213 	andseq	r0, r8, r3, lsl r2
     c9c:	010b1f00 	tsteq	fp, r0, lsl #30
     ca0:	13011755 	movwne	r1, #5973	; 0x1755
     ca4:	05200000 	streq	r0, [r0, #-0]!
     ca8:	00133100 	andseq	r3, r3, r0, lsl #2
     cac:	010b2100 	mrseq	r2, (UNDEF: 27)
     cb0:	00001755 	andeq	r1, r0, r5, asr r7
     cb4:	11010b22 	tstne	r1, r2, lsr #22
     cb8:	01061201 	tsteq	r6, r1, lsl #4
     cbc:	23000013 	movwcs	r0, #19
     cc0:	13310034 	teqne	r1, #52	; 0x34
     cc4:	00001802 	andeq	r1, r0, r2, lsl #16
     cc8:	31011d24 	tstcc	r1, r4, lsr #26
     ccc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     cd0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     cd4:	25000005 	strcs	r0, [r0, #-5]
     cd8:	01018289 	smlabbeq	r1, r9, r2, r8
     cdc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ce0:	8a260000 	bhi	980ce8 <_Min_Stack_Size+0x9808e8>
     ce4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     ce8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     cec:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     cf0:	03193f01 	tsteq	r9, #1, 30
     cf4:	3b0b3a0e 	blcc	2cf534 <_Min_Stack_Size+0x2cf134>
     cf8:	11192705 	tstne	r9, r5, lsl #14
     cfc:	40061201 	andmi	r1, r6, r1, lsl #4
     d00:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d04:	00001301 	andeq	r1, r0, r1, lsl #6
     d08:	03000528 	movweq	r0, #1320	; 0x528
     d0c:	3b0b3a0e 	blcc	2cf54c <_Min_Stack_Size+0x2cf14c>
     d10:	02134905 	andseq	r4, r3, #81920	; 0x14000
     d14:	29000018 	stmdbcs	r0, {r3, r4}
     d18:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d1c:	0b3a0e03 	bleq	e84530 <_Min_Stack_Size+0xe84130>
     d20:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     d24:	01111349 	tsteq	r1, r9, asr #6
     d28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d2c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d30:	2a000013 	bcs	d84 <_Min_Stack_Size+0x984>
     d34:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d3c:	17021349 	strne	r1, [r2, -r9, asr #6]
     d40:	342b0000 	strtcc	r0, [fp], #-0
     d44:	3a0e0300 	bcc	38194c <_Min_Stack_Size+0x38154c>
     d48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d4c:	00170213 	andseq	r0, r7, r3, lsl r2
     d50:	00342c00 	eorseq	r2, r4, r0, lsl #24
     d54:	17021331 	smladxne	r2, r1, r3, r1
     d58:	342d0000 	strtcc	r0, [sp], #-0
     d5c:	3a0e0300 	bcc	381964 <_Min_Stack_Size+0x381564>
     d60:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d64:	00180213 	andseq	r0, r8, r3, lsl r2
     d68:	011d2e00 	tsteq	sp, r0, lsl #28
     d6c:	01111331 	tsteq	r1, r1, lsr r3
     d70:	0b580612 	bleq	16025c0 <_Min_Stack_Size+0x16021c0>
     d74:	13010559 	movwne	r0, #5465	; 0x1559
     d78:	0b2f0000 	bleq	bc0d80 <_Min_Stack_Size+0xbc0980>
     d7c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     d80:	30000006 	andcc	r0, r0, r6
     d84:	08030034 	stmdaeq	r3, {r2, r4, r5}
     d88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d8c:	17021349 	strne	r1, [r2, -r9, asr #6]
     d90:	89310000 	ldmdbhi	r1!, {}	; <UNPREDICTABLE>
     d94:	11010182 	smlabbne	r1, r2, r1, r0
     d98:	01133101 	tsteq	r3, r1, lsl #2
     d9c:	32000013 	andcc	r0, r0, #19
     da0:	0e03012e 	adfeqsp	f0, f3, #0.5
     da4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     da8:	01111927 	tsteq	r1, r7, lsr #18
     dac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     db0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     db4:	33000013 	movwcc	r0, #19
     db8:	0e03012e 	adfeqsp	f0, f3, #0.5
     dbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     dc0:	0b201927 	bleq	807264 <_Min_Stack_Size+0x806e64>
     dc4:	00001301 	andeq	r1, r0, r1, lsl #6
     dc8:	31012e34 	tstcc	r1, r4, lsr lr
     dcc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     dd0:	96184006 	ldrls	r4, [r8], -r6
     dd4:	13011942 	movwne	r1, #6466	; 0x1942
     dd8:	0b350000 	bleq	d40de0 <_Min_Stack_Size+0xd409e0>
     ddc:	00130101 	andseq	r0, r3, r1, lsl #2
     de0:	00343600 	eorseq	r3, r4, r0, lsl #12
     de4:	0b3a0803 	bleq	e82df8 <_Min_Stack_Size+0xe829f8>
     de8:	1349053b 	movtne	r0, #38203	; 0x953b
     dec:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     df0:	03193f01 	tsteq	r9, #1, 30
     df4:	3b0b3a0e 	blcc	2cf634 <_Min_Stack_Size+0x2cf234>
     df8:	11192705 	tstne	r9, r5, lsl #14
     dfc:	40061201 	andmi	r1, r6, r1, lsl #4
     e00:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e04:	00001301 	andeq	r1, r0, r1, lsl #6
     e08:	03003438 	movweq	r3, #1080	; 0x438
     e0c:	3b0b3a0e 	blcc	2cf64c <_Min_Stack_Size+0x2cf24c>
     e10:	3f134905 	svccc	0x00134905
     e14:	00193c19 	andseq	r3, r9, r9, lsl ip
     e18:	00343900 	eorseq	r3, r4, r0, lsl #18
     e1c:	0b3a0e03 	bleq	e84630 <_Min_Stack_Size+0xe84230>
     e20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e24:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e28:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
     e2c:	03193f00 	tsteq	r9, #0, 30
     e30:	3b0b3a0e 	blcc	2cf670 <_Min_Stack_Size+0x2cf270>
     e34:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     e38:	00193c13 	andseq	r3, r9, r3, lsl ip
     e3c:	002e3b00 	eoreq	r3, lr, r0, lsl #22
     e40:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e48:	13491927 	movtne	r1, #39207	; 0x9927
     e4c:	0000193c 	andeq	r1, r0, ip, lsr r9
     e50:	3f012e3c 	svccc	0x00012e3c
     e54:	3a0e0319 	bcc	381ac0 <_Min_Stack_Size+0x3816c0>
     e58:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e5c:	3c134919 	ldccc	9, cr4, [r3], {25}
     e60:	00130119 	andseq	r0, r3, r9, lsl r1
     e64:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
     e68:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e70:	13491927 	movtne	r1, #39207	; 0x9927
     e74:	0000193c 	andeq	r1, r0, ip, lsr r9
     e78:	01110100 	tsteq	r1, r0, lsl #2
     e7c:	0b130e25 	bleq	4c4718 <_Min_Stack_Size+0x4c4318>
     e80:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e84:	01111755 	tsteq	r1, r5, asr r7
     e88:	00001710 	andeq	r1, r0, r0, lsl r7
     e8c:	0b002402 	bleq	9e9c <_Min_Stack_Size+0x9a9c>
     e90:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e94:	0300000e 	movweq	r0, #14
     e98:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e9c:	0b3b0b3a 	bleq	ec3b8c <_Min_Stack_Size+0xec378c>
     ea0:	00001349 	andeq	r1, r0, r9, asr #6
     ea4:	0b002404 	bleq	9ebc <_Min_Stack_Size+0x9abc>
     ea8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     eac:	05000008 	streq	r0, [r0, #-8]
     eb0:	13490035 	movtne	r0, #36917	; 0x9035
     eb4:	13060000 	movwne	r0, #24576	; 0x6000
     eb8:	3a0b0b01 	bcc	2c3ac4 <_Min_Stack_Size+0x2c36c4>
     ebc:	01053b0b 	tsteq	r5, fp, lsl #22
     ec0:	07000013 	smladeq	r0, r3, r0, r0
     ec4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ec8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ecc:	0b381349 	bleq	e05bf8 <_Min_Stack_Size+0xe057f8>
     ed0:	0d080000 	stceq	0, cr0, [r8, #-0]
     ed4:	3a0e0300 	bcc	381adc <_Min_Stack_Size+0x3816dc>
     ed8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     edc:	000b3813 	andeq	r3, fp, r3, lsl r8
     ee0:	00160900 	andseq	r0, r6, r0, lsl #18
     ee4:	0b3a0e03 	bleq	e846f8 <_Min_Stack_Size+0xe842f8>
     ee8:	1349053b 	movtne	r0, #38203	; 0x953b
     eec:	040a0000 	streq	r0, [sl], #-0
     ef0:	3a0b0b01 	bcc	2c3afc <_Min_Stack_Size+0x2c36fc>
     ef4:	010b3b0b 	tsteq	fp, fp, lsl #22
     ef8:	0b000013 	bleq	f4c <_Min_Stack_Size+0xb4c>
     efc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     f00:	00000d1c 	andeq	r0, r0, ip, lsl sp
     f04:	0300280c 	movweq	r2, #2060	; 0x80c
     f08:	000d1c08 	andeq	r1, sp, r8, lsl #24
     f0c:	000f0d00 	andeq	r0, pc, r0, lsl #26
     f10:	00000b0b 	andeq	r0, r0, fp, lsl #22
     f14:	0b01130e 	bleq	45b54 <_Min_Stack_Size+0x45754>
     f18:	3b0b3a0b 	blcc	2cf74c <_Min_Stack_Size+0x2cf34c>
     f1c:	0013010b 	andseq	r0, r3, fp, lsl #2
     f20:	000d0f00 	andeq	r0, sp, r0, lsl #30
     f24:	0b3a0e03 	bleq	e84738 <_Min_Stack_Size+0xe84338>
     f28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f2c:	00000b38 	andeq	r0, r0, r8, lsr fp
     f30:	03011310 	movweq	r1, #4880	; 0x1310
     f34:	3a0b0b0e 	bcc	2c3b74 <_Min_Stack_Size+0x2c3774>
     f38:	010b3b0b 	tsteq	fp, fp, lsl #22
     f3c:	11000013 	tstne	r0, r3, lsl r0
     f40:	0b0b000f 	bleq	2c0f84 <_Min_Stack_Size+0x2c0b84>
     f44:	00001349 	andeq	r1, r0, r9, asr #6
     f48:	27011512 	smladcs	r1, r2, r5, r1
     f4c:	00130119 	andseq	r0, r3, r9, lsl r1
     f50:	00051300 	andeq	r1, r5, r0, lsl #6
     f54:	00001349 	andeq	r1, r0, r9, asr #6
     f58:	03000d14 	movweq	r0, #3348	; 0xd14
     f5c:	3b0b3a08 	blcc	2cf784 <_Min_Stack_Size+0x2cf384>
     f60:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     f64:	1500000b 	strne	r0, [r0, #-11]
     f68:	0e03012e 	adfeqsp	f0, f3, #0.5
     f6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f70:	13491927 	movtne	r1, #39207	; 0x9927
     f74:	13010b20 	movwne	r0, #6944	; 0x1b20
     f78:	05160000 	ldreq	r0, [r6, #-0]
     f7c:	3a0e0300 	bcc	381b84 <_Min_Stack_Size+0x381784>
     f80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f84:	17000013 	smladne	r0, r3, r0, r0
     f88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f90:	00001349 	andeq	r1, r0, r9, asr #6
     f94:	03003418 	movweq	r3, #1048	; 0x418
     f98:	3b0b3a0e 	blcc	2cf7d8 <_Min_Stack_Size+0x2cf3d8>
     f9c:	1c134905 	ldcne	9, cr4, [r3], {5}
     fa0:	1900000a 	stmdbne	r0, {r1, r3}
     fa4:	13490101 	movtne	r0, #37121	; 0x9101
     fa8:	00001301 	andeq	r1, r0, r1, lsl #6
     fac:	4900211a 	stmdbmi	r0, {r1, r3, r4, r8, sp}
     fb0:	000b2f13 	andeq	r2, fp, r3, lsl pc
     fb4:	00261b00 	eoreq	r1, r6, r0, lsl #22
     fb8:	00001349 	andeq	r1, r0, r9, asr #6
     fbc:	03012e1c 	movweq	r2, #7708	; 0x1e1c
     fc0:	3b0b3a0e 	blcc	2cf800 <_Min_Stack_Size+0x2cf400>
     fc4:	20192705 	andscs	r2, r9, r5, lsl #14
     fc8:	0013010b 	andseq	r0, r3, fp, lsl #2
     fcc:	00341d00 	eorseq	r1, r4, r0, lsl #26
     fd0:	0b3a0803 	bleq	e82fe4 <_Min_Stack_Size+0xe82be4>
     fd4:	1349053b 	movtne	r0, #38203	; 0x953b
     fd8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     fdc:	03193f01 	tsteq	r9, #1, 30
     fe0:	3b0b3a0e 	blcc	2cf820 <_Min_Stack_Size+0x2cf420>
     fe4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     fe8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     fec:	97184006 	ldrls	r4, [r8, -r6]
     ff0:	13011942 	movwne	r1, #6466	; 0x1942
     ff4:	051f0000 	ldreq	r0, [pc, #-0]	; ffc <_Min_Stack_Size+0xbfc>
     ff8:	3a0e0300 	bcc	381c00 <_Min_Stack_Size+0x381800>
     ffc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1000:	00170213 	andseq	r0, r7, r3, lsl r2
    1004:	00342000 	eorseq	r2, r4, r0
    1008:	0b3a0803 	bleq	e8301c <_Min_Stack_Size+0xe82c1c>
    100c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1010:	00001702 	andeq	r1, r0, r2, lsl #14
    1014:	03003421 	movweq	r3, #1057	; 0x421
    1018:	3b0b3a0e 	blcc	2cf858 <_Min_Stack_Size+0x2cf458>
    101c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1020:	22000017 	andcs	r0, r0, #23
    1024:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1028:	17550152 			; <UNDEFINED> instruction: 0x17550152
    102c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1030:	00001301 	andeq	r1, r0, r1, lsl #6
    1034:	31000523 	tstcc	r0, r3, lsr #10
    1038:	00170213 	andseq	r0, r7, r3, lsl r2
    103c:	010b2400 	tsteq	fp, r0, lsl #8
    1040:	00001755 	andeq	r1, r0, r5, asr r7
    1044:	31003425 	tstcc	r0, r5, lsr #8
    1048:	00170213 	andseq	r0, r7, r3, lsl r2
    104c:	00342600 	eorseq	r2, r4, r0, lsl #12
    1050:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1054:	89270000 	stmdbhi	r7!, {}	; <UNPREDICTABLE>
    1058:	11000182 	smlabbne	r0, r2, r1, r0
    105c:	00133101 	andseq	r3, r3, r1, lsl #2
    1060:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
    1064:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1068:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    106c:	13491927 	movtne	r1, #39207	; 0x9927
    1070:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1074:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1078:	00130119 	andseq	r0, r3, r9, lsl r1
    107c:	00052900 	andeq	r2, r5, r0, lsl #18
    1080:	0b3a0e03 	bleq	e84894 <_Min_Stack_Size+0xe84494>
    1084:	1349053b 	movtne	r0, #38203	; 0x953b
    1088:	00001702 	andeq	r1, r0, r2, lsl #14
    108c:	0300342a 	movweq	r3, #1066	; 0x42a
    1090:	3b0b3a0e 	blcc	2cf8d0 <_Min_Stack_Size+0x2cf4d0>
    1094:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1098:	2b000017 	blcs	10fc <_Min_Stack_Size+0xcfc>
    109c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    10a0:	17550152 			; <UNDEFINED> instruction: 0x17550152
    10a4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    10a8:	052c0000 	streq	r0, [ip, #-0]!
    10ac:	3a0e0300 	bcc	381cb4 <_Min_Stack_Size+0x3818b4>
    10b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b4:	00180213 	andseq	r0, r8, r3, lsl r2
    10b8:	00052d00 	andeq	r2, r5, r0, lsl #26
    10bc:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    10c0:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    10c4:	03193f01 	tsteq	r9, #1, 30
    10c8:	3b0b3a0e 	blcc	2cf908 <_Min_Stack_Size+0x2cf508>
    10cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    10d0:	010b2013 	tsteq	fp, r3, lsl r0
    10d4:	2f000013 	svccs	0x00000013
    10d8:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    10dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    10e4:	00130119 	andseq	r0, r3, r9, lsl r1
    10e8:	00343000 	eorseq	r3, r4, r0
    10ec:	0b3a0e03 	bleq	e84900 <_Min_Stack_Size+0xe84500>
    10f0:	1349053b 	movtne	r0, #38203	; 0x953b
    10f4:	00000b1c 	andeq	r0, r0, ip, lsl fp
    10f8:	3f012e31 	svccc	0x00012e31
    10fc:	3a0e0319 	bcc	381d68 <_Min_Stack_Size+0x381968>
    1100:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1104:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1108:	97184006 	ldrls	r4, [r8, -r6]
    110c:	13011942 	movwne	r1, #6466	; 0x1942
    1110:	34320000 	ldrtcc	r0, [r2], #-0
    1114:	3a0e0300 	bcc	381d1c <_Min_Stack_Size+0x38191c>
    1118:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    111c:	00180213 	andseq	r0, r8, r3, lsl r2
    1120:	82893300 	addhi	r3, r9, #0, 6
    1124:	01110101 	tsteq	r1, r1, lsl #2
    1128:	00001301 	andeq	r1, r0, r1, lsl #6
    112c:	01828a34 	orreq	r8, r2, r4, lsr sl
    1130:	91180200 	tstls	r8, r0, lsl #4
    1134:	00001842 	andeq	r1, r0, r2, asr #16
    1138:	01828935 	orreq	r8, r2, r5, lsr r9
    113c:	00011101 	andeq	r1, r1, r1, lsl #2
    1140:	00343600 	eorseq	r3, r4, r0, lsl #12
    1144:	0b3a0e03 	bleq	e84958 <_Min_Stack_Size+0xe84558>
    1148:	1349053b 	movtne	r0, #38203	; 0x953b
    114c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1150:	34370000 	ldrtcc	r0, [r7], #-0
    1154:	3a0e0300 	bcc	381d5c <_Min_Stack_Size+0x38195c>
    1158:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    115c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1160:	38000019 	stmdacc	r0, {r0, r3, r4}
    1164:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1168:	0b3a0e03 	bleq	e8497c <_Min_Stack_Size+0xe8457c>
    116c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1170:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1174:	01000000 	mrseq	r0, (UNDEF: 0)
    1178:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    117c:	0e030b13 	vmoveq.32	d3[0], r0
    1180:	17550e1b 	smmlane	r5, fp, lr, r0
    1184:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1188:	24020000 	strcs	r0, [r2], #-0
    118c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1190:	000e030b 	andeq	r0, lr, fp, lsl #6
    1194:	00160300 	andseq	r0, r6, r0, lsl #6
    1198:	0b3a0e03 	bleq	e849ac <_Min_Stack_Size+0xe845ac>
    119c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11a0:	24040000 	strcs	r0, [r4], #-0
    11a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11a8:	0008030b 	andeq	r0, r8, fp, lsl #6
    11ac:	00350500 	eorseq	r0, r5, r0, lsl #10
    11b0:	00001349 	andeq	r1, r0, r9, asr #6
    11b4:	49010106 	stmdbmi	r1, {r1, r2, r8}
    11b8:	00130113 	andseq	r0, r3, r3, lsl r1
    11bc:	00210700 	eoreq	r0, r1, r0, lsl #14
    11c0:	0b2f1349 	bleq	bc5eec <_Min_Stack_Size+0xbc5aec>
    11c4:	13080000 	movwne	r0, #32768	; 0x8000
    11c8:	3a0b0b01 	bcc	2c3dd4 <_Min_Stack_Size+0x2c39d4>
    11cc:	01053b0b 	tsteq	r5, fp, lsl #22
    11d0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    11d4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    11d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    11dc:	0b381349 	bleq	e05f08 <_Min_Stack_Size+0xe05b08>
    11e0:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    11e4:	3a0e0300 	bcc	381dec <_Min_Stack_Size+0x3819ec>
    11e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11ec:	000b3813 	andeq	r3, fp, r3, lsl r8
    11f0:	00160b00 	andseq	r0, r6, r0, lsl #22
    11f4:	0b3a0e03 	bleq	e84a08 <_Min_Stack_Size+0xe84608>
    11f8:	1349053b 	movtne	r0, #38203	; 0x953b
    11fc:	040c0000 	streq	r0, [ip], #-0
    1200:	3a0b0b01 	bcc	2c3e0c <_Min_Stack_Size+0x2c3a0c>
    1204:	010b3b0b 	tsteq	fp, fp, lsl #22
    1208:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    120c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1210:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1214:	0300280e 	movweq	r2, #2062	; 0x80e
    1218:	000d1c08 	andeq	r1, sp, r8, lsl #24
    121c:	01130f00 	tsteq	r3, r0, lsl #30
    1220:	0b3a0b0b 	bleq	e83e54 <_Min_Stack_Size+0xe83a54>
    1224:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1228:	0d100000 	ldceq	0, cr0, [r0, #-0]
    122c:	3a0e0300 	bcc	381e34 <_Min_Stack_Size+0x381a34>
    1230:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1234:	000b3813 	andeq	r3, fp, r3, lsl r8
    1238:	000d1100 	andeq	r1, sp, r0, lsl #2
    123c:	0b3a0803 	bleq	e83250 <_Min_Stack_Size+0xe82e50>
    1240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1244:	00000b38 	andeq	r0, r0, r8, lsr fp
    1248:	03012e12 	movweq	r2, #7698	; 0x1e12
    124c:	3b0b3a0e 	blcc	2cfa8c <_Min_Stack_Size+0x2cf68c>
    1250:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1254:	010b2013 	tsteq	fp, r3, lsl r0
    1258:	13000013 	movwne	r0, #19
    125c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1260:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1264:	00001349 	andeq	r1, r0, r9, asr #6
    1268:	03003414 	movweq	r3, #1044	; 0x414
    126c:	3b0b3a0e 	blcc	2cfaac <_Min_Stack_Size+0x2cf6ac>
    1270:	00134905 	andseq	r4, r3, r5, lsl #18
    1274:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
    1278:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    127c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1280:	13491927 	movtne	r1, #39207	; 0x9927
    1284:	13010b20 	movwne	r0, #6944	; 0x1b20
    1288:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    128c:	03193f00 	tsteq	r9, #0, 30
    1290:	3b0b3a0e 	blcc	2cfad0 <_Min_Stack_Size+0x2cf6d0>
    1294:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1298:	000b2013 	andeq	r2, fp, r3, lsl r0
    129c:	002e1700 	eoreq	r1, lr, r0, lsl #14
    12a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12a4:	0b3b0b3a 	bleq	ec3f94 <_Min_Stack_Size+0xec3b94>
    12a8:	01111927 	tsteq	r1, r7, lsr #18
    12ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12b0:	00194297 	mulseq	r9, r7, r2
    12b4:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    12b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12bc:	0b3b0b3a 	bleq	ec3fac <_Min_Stack_Size+0xec3bac>
    12c0:	13491927 	movtne	r1, #39207	; 0x9927
    12c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    12cc:	00130119 	andseq	r0, r3, r9, lsl r1
    12d0:	00051900 	andeq	r1, r5, r0, lsl #18
    12d4:	0b3a0e03 	bleq	e84ae8 <_Min_Stack_Size+0xe846e8>
    12d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12dc:	00001702 	andeq	r1, r0, r2, lsl #14
    12e0:	0300341a 	movweq	r3, #1050	; 0x41a
    12e4:	3b0b3a0e 	blcc	2cfb24 <_Min_Stack_Size+0x2cf724>
    12e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12ec:	1b000017 	blne	1350 <_Min_Stack_Size+0xf50>
    12f0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    12f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12f8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    12fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1300:	3100051c 	tstcc	r0, ip, lsl r5
    1304:	00170213 	andseq	r0, r7, r3, lsl r2
    1308:	010b1d00 	tsteq	fp, r0, lsl #26
    130c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1310:	341e0000 	ldrcc	r0, [lr], #-0
    1314:	02133100 	andseq	r3, r3, #0, 2
    1318:	1f000017 	svcne	0x00000017
    131c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1320:	00001301 	andeq	r1, r0, r1, lsl #6
    1324:	03003420 	movweq	r3, #1056	; 0x420
    1328:	3b0b3a0e 	blcc	2cfb68 <_Min_Stack_Size+0x2cf768>
    132c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1330:	21000018 	tstcs	r0, r8, lsl r0
    1334:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1338:	17550152 			; <UNDEFINED> instruction: 0x17550152
    133c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1340:	00001301 	andeq	r1, r0, r1, lsl #6
    1344:	55010b22 	strpl	r0, [r1, #-2850]	; 0xfffff4de
    1348:	23000017 	movwcs	r0, #23
    134c:	00018289 	andeq	r8, r1, r9, lsl #5
    1350:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1354:	0f240000 	svceq	0x00240000
    1358:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    135c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    1360:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1364:	0b3a0e03 	bleq	e84b78 <_Min_Stack_Size+0xe84778>
    1368:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    136c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1370:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1374:	00130119 	andseq	r0, r3, r9, lsl r1
    1378:	00052600 	andeq	r2, r5, r0, lsl #12
    137c:	0b3a0e03 	bleq	e84b90 <_Min_Stack_Size+0xe84790>
    1380:	1349053b 	movtne	r0, #38203	; 0x953b
    1384:	00001702 	andeq	r1, r0, r2, lsl #14
    1388:	01828927 	orreq	r8, r2, r7, lsr #18
    138c:	31011101 	tstcc	r1, r1, lsl #2
    1390:	00130113 	andseq	r0, r3, r3, lsl r1
    1394:	828a2800 	addhi	r2, sl, #0, 16
    1398:	18020001 	stmdane	r2, {r0}
    139c:	00184291 	mulseq	r8, r1, r2
    13a0:	82892900 	addhi	r2, r9, #0, 18
    13a4:	01110101 	tsteq	r1, r1, lsl #2
    13a8:	00001331 	andeq	r1, r0, r1, lsr r3
    13ac:	3f002e2a 	svccc	0x00002e2a
    13b0:	3a0e0319 	bcc	38201c <_Min_Stack_Size+0x381c1c>
    13b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    13b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    13bc:	97184006 	ldrls	r4, [r8, -r6]
    13c0:	00001942 	andeq	r1, r0, r2, asr #18
    13c4:	31012e2b 	tstcc	r1, fp, lsr #28
    13c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    13cc:	97184006 	ldrls	r4, [r8, -r6]
    13d0:	13011942 	movwne	r1, #6466	; 0x1942
    13d4:	342c0000 	strtcc	r0, [ip], #-0
    13d8:	1c133100 	ldfnes	f3, [r3], {-0}
    13dc:	2d00000b 	stccs	0, cr0, [r0, #-44]	; 0xffffffd4
    13e0:	13310034 	teqne	r1, #52	; 0x34
    13e4:	1d2e0000 	stcne	0, cr0, [lr, #-0]
    13e8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    13ec:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    13f0:	0005590b 	andeq	r5, r5, fp, lsl #18
    13f4:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    13f8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1400:	13491927 	movtne	r1, #39207	; 0x9927
    1404:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1408:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    140c:	00130119 	andseq	r0, r3, r9, lsl r1
    1410:	00343000 	eorseq	r3, r4, r0
    1414:	0b3a0e03 	bleq	e84c28 <_Min_Stack_Size+0xe84828>
    1418:	1349053b 	movtne	r0, #38203	; 0x953b
    141c:	00001702 	andeq	r1, r0, r2, lsl #14
    1420:	31002e31 	tstcc	r0, r1, lsr lr
    1424:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1428:	97184006 	ldrls	r4, [r8, -r6]
    142c:	00001942 	andeq	r1, r0, r2, asr #18
    1430:	31000532 	tstcc	r0, r2, lsr r5
    1434:	00051c13 	andeq	r1, r5, r3, lsl ip
    1438:	001d3300 	andseq	r3, sp, r0, lsl #6
    143c:	01111331 	tsteq	r1, r1, lsr r3
    1440:	0b580612 	bleq	1602c90 <_Min_Stack_Size+0x1602890>
    1444:	00000559 	andeq	r0, r0, r9, asr r5
    1448:	03000534 	movweq	r0, #1332	; 0x534
    144c:	3b0b3a0e 	blcc	2cfc8c <_Min_Stack_Size+0x2cf88c>
    1450:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1454:	35000018 	strcc	r0, [r0, #-24]	; 0xffffffe8
    1458:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    145c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1460:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1464:	34360000 	ldrtcc	r0, [r6], #-0
    1468:	3a0e0300 	bcc	382070 <_Min_Stack_Size+0x381c70>
    146c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1470:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1474:	37000019 	smladcc	r0, r9, r0, r0
    1478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    147c:	0b3b0b3a 	bleq	ec416c <_Min_Stack_Size+0xec3d6c>
    1480:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1484:	0000193c 	andeq	r1, r0, ip, lsr r9
    1488:	03003438 	movweq	r3, #1080	; 0x438
    148c:	3b0b3a0e 	blcc	2cfccc <_Min_Stack_Size+0x2cf8cc>
    1490:	3f13490b 	svccc	0x0013490b
    1494:	00180219 	andseq	r0, r8, r9, lsl r2
    1498:	00263900 	eoreq	r3, r6, r0, lsl #18
    149c:	00001349 	andeq	r1, r0, r9, asr #6
    14a0:	3f002e3a 	svccc	0x00002e3a
    14a4:	3a0e0319 	bcc	382110 <_Min_Stack_Size+0x381d10>
    14a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    14ac:	3c134919 	ldccc	9, cr4, [r3], {25}
    14b0:	3b000019 	blcc	151c <_Min_Stack_Size+0x111c>
    14b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14b8:	0b3a0e03 	bleq	e84ccc <_Min_Stack_Size+0xe848cc>
    14bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    14c0:	1301193c 	movwne	r1, #6460	; 0x193c
    14c4:	053c0000 	ldreq	r0, [ip, #-0]!
    14c8:	00134900 	andseq	r4, r3, r0, lsl #18
    14cc:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
    14d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    14d4:	0b3b0b3a 	bleq	ec41c4 <_Min_Stack_Size+0xec3dc4>
    14d8:	13491927 	movtne	r1, #39207	; 0x9927
    14dc:	0000193c 	andeq	r1, r0, ip, lsr r9
    14e0:	01110100 	tsteq	r1, r0, lsl #2
    14e4:	0b130e25 	bleq	4c4d80 <_Min_Stack_Size+0x4c4980>
    14e8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    14ec:	01111755 	tsteq	r1, r5, asr r7
    14f0:	00001710 	andeq	r1, r0, r0, lsl r7
    14f4:	0b002402 	bleq	a504 <_Min_Stack_Size+0xa104>
    14f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    14fc:	0300000e 	movweq	r0, #14
    1500:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1504:	0b3b0b3a 	bleq	ec41f4 <_Min_Stack_Size+0xec3df4>
    1508:	00001349 	andeq	r1, r0, r9, asr #6
    150c:	0b002404 	bleq	a524 <_Min_Stack_Size+0xa124>
    1510:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1514:	05000008 	streq	r0, [r0, #-8]
    1518:	13490035 	movtne	r0, #36917	; 0x9035
    151c:	13060000 	movwne	r0, #24576	; 0x6000
    1520:	3a0b0b01 	bcc	2c412c <_Min_Stack_Size+0x2c3d2c>
    1524:	01053b0b 	tsteq	r5, fp, lsl #22
    1528:	07000013 	smladeq	r0, r3, r0, r0
    152c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1530:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1534:	0b381349 	bleq	e06260 <_Min_Stack_Size+0xe05e60>
    1538:	0d080000 	stceq	0, cr0, [r8, #-0]
    153c:	3a080300 	bcc	202144 <_Min_Stack_Size+0x201d44>
    1540:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1544:	000b3813 	andeq	r3, fp, r3, lsl r8
    1548:	00260900 	eoreq	r0, r6, r0, lsl #18
    154c:	00001349 	andeq	r1, r0, r9, asr #6
    1550:	4901010a 	stmdbmi	r1, {r1, r3, r8}
    1554:	00130113 	andseq	r0, r3, r3, lsl r1
    1558:	00210b00 	eoreq	r0, r1, r0, lsl #22
    155c:	0b2f1349 	bleq	bc6288 <_Min_Stack_Size+0xbc5e88>
    1560:	160c0000 	strne	r0, [ip], -r0
    1564:	3a0e0300 	bcc	38216c <_Min_Stack_Size+0x381d6c>
    1568:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    156c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1570:	0b0b0104 	bleq	2c1988 <_Min_Stack_Size+0x2c1588>
    1574:	0b3b0b3a 	bleq	ec4264 <_Min_Stack_Size+0xec3e64>
    1578:	00001301 	andeq	r1, r0, r1, lsl #6
    157c:	0300280e 	movweq	r2, #2062	; 0x80e
    1580:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1584:	00280f00 	eoreq	r0, r8, r0, lsl #30
    1588:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    158c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1590:	3a0e0301 	bcc	38219c <_Min_Stack_Size+0x381d9c>
    1594:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1598:	20134919 	andscs	r4, r3, r9, lsl r9
    159c:	0013010b 	andseq	r0, r3, fp, lsl #2
    15a0:	00051100 	andeq	r1, r5, r0, lsl #2
    15a4:	0b3a0e03 	bleq	e84db8 <_Min_Stack_Size+0xe849b8>
    15a8:	1349053b 	movtne	r0, #38203	; 0x953b
    15ac:	34120000 	ldrcc	r0, [r2], #-0
    15b0:	3a0e0300 	bcc	3821b8 <_Min_Stack_Size+0x381db8>
    15b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b8:	13000013 	movwne	r0, #19
    15bc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    15c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    15c4:	0b201927 	bleq	807a68 <_Min_Stack_Size+0x807668>
    15c8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    15cc:	03193f01 	tsteq	r9, #1, 30
    15d0:	3b0b3a0e 	blcc	2cfe10 <_Min_Stack_Size+0x2cfa10>
    15d4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    15d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    15dc:	97184006 	ldrls	r4, [r8, -r6]
    15e0:	13011942 	movwne	r1, #6466	; 0x1942
    15e4:	34150000 	ldrcc	r0, [r5], #-0
    15e8:	3a0e0300 	bcc	3821f0 <_Min_Stack_Size+0x381df0>
    15ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15f0:	00170213 	andseq	r0, r7, r3, lsl r2
    15f4:	011d1600 	tsteq	sp, r0, lsl #12
    15f8:	01111331 	tsteq	r1, r1, lsr r3
    15fc:	0b580612 	bleq	1602e4c <_Min_Stack_Size+0x1602a4c>
    1600:	13010b59 	movwne	r0, #7001	; 0x1b59
    1604:	05170000 	ldreq	r0, [r7, #-0]
    1608:	1c133100 	ldfnes	f3, [r3], {-0}
    160c:	18000005 	stmdane	r0, {r0, r2}
    1610:	0111010b 	tsteq	r1, fp, lsl #2
    1614:	00000612 	andeq	r0, r0, r2, lsl r6
    1618:	31003419 	tstcc	r0, r9, lsl r4
    161c:	00170213 	andseq	r0, r7, r3, lsl r2
    1620:	82891a00 	addhi	r1, r9, #0, 20
    1624:	01110001 	tsteq	r1, r1
    1628:	00001331 	andeq	r1, r0, r1, lsr r3
    162c:	3f012e1b 	svccc	0x00012e1b
    1630:	3a0e0319 	bcc	38229c <_Min_Stack_Size+0x381e9c>
    1634:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1638:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    163c:	97184006 	ldrls	r4, [r8, -r6]
    1640:	13011942 	movwne	r1, #6466	; 0x1942
    1644:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
    1648:	11133101 	tstne	r3, r1, lsl #2
    164c:	58061201 	stmdapl	r6, {r0, r9, ip}
    1650:	000b590b 	andeq	r5, fp, fp, lsl #18
    1654:	002e1d00 	eoreq	r1, lr, r0, lsl #26
    1658:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    165c:	0b3b0b3a 	bleq	ec434c <_Min_Stack_Size+0xec3f4c>
    1660:	13491927 	movtne	r1, #39207	; 0x9927
    1664:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1668:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    166c:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    1670:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1674:	0b3a0e03 	bleq	e84e88 <_Min_Stack_Size+0xe84a88>
    1678:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    167c:	01111349 	tsteq	r1, r9, asr #6
    1680:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1684:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1688:	1f000013 	svcne	0x00000013
    168c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1690:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1694:	17021349 	strne	r1, [r2, -r9, asr #6]
    1698:	34200000 	strtcc	r0, [r0], #-0
    169c:	3a0e0300 	bcc	3822a4 <_Min_Stack_Size+0x381ea4>
    16a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16a4:	00170213 	andseq	r0, r7, r3, lsl r2
    16a8:	010b2100 	mrseq	r2, (UNDEF: 27)
    16ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16b0:	00001301 	andeq	r1, r0, r1, lsl #6
    16b4:	03003422 	movweq	r3, #1058	; 0x422
    16b8:	3b0b3a0e 	blcc	2cfef8 <_Min_Stack_Size+0x2cfaf8>
    16bc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    16c0:	23000018 	movwcs	r0, #24
    16c4:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    16c8:	00001301 	andeq	r1, r0, r1, lsl #6
    16cc:	31011d24 	tstcc	r1, r4, lsr #26
    16d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    16d4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    16d8:	00130105 	andseq	r0, r3, r5, lsl #2
    16dc:	00052500 	andeq	r2, r5, r0, lsl #10
    16e0:	061c1331 			; <UNDEFINED> instruction: 0x061c1331
    16e4:	05260000 	streq	r0, [r6, #-0]!
    16e8:	02133100 	andseq	r3, r3, #0, 2
    16ec:	27000017 	smladcs	r0, r7, r0, r0
    16f0:	1331001d 	teqne	r1, #29
    16f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16f8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    16fc:	34280000 	strtcc	r0, [r8], #-0
    1700:	3a0e0300 	bcc	382308 <_Min_Stack_Size+0x381f08>
    1704:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1708:	3c193f13 	ldccc	15, cr3, [r9], {19}
    170c:	29000019 	stmdbcs	r0, {r0, r3, r4}
    1710:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1714:	0b3a0e03 	bleq	e84f28 <_Min_Stack_Size+0xe84b28>
    1718:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    171c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1720:	01000000 	mrseq	r0, (UNDEF: 0)
    1724:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1728:	0e030b13 	vmoveq.32	d3[0], r0
    172c:	17550e1b 	smmlane	r5, fp, lr, r0
    1730:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1734:	24020000 	strcs	r0, [r2], #-0
    1738:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    173c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1740:	00160300 	andseq	r0, r6, r0, lsl #6
    1744:	0b3a0e03 	bleq	e84f58 <_Min_Stack_Size+0xe84b58>
    1748:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    174c:	24040000 	strcs	r0, [r4], #-0
    1750:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1754:	0008030b 	andeq	r0, r8, fp, lsl #6
    1758:	00350500 	eorseq	r0, r5, r0, lsl #10
    175c:	00001349 	andeq	r1, r0, r9, asr #6
    1760:	0b011306 	bleq	46380 <_Min_Stack_Size+0x45f80>
    1764:	3b0b3a0b 	blcc	2cff98 <_Min_Stack_Size+0x2cfb98>
    1768:	00130105 	andseq	r0, r3, r5, lsl #2
    176c:	000d0700 	andeq	r0, sp, r0, lsl #14
    1770:	0b3a0803 	bleq	e83784 <_Min_Stack_Size+0xe83384>
    1774:	1349053b 	movtne	r0, #38203	; 0x953b
    1778:	00000b38 	andeq	r0, r0, r8, lsr fp
    177c:	03000d08 	movweq	r0, #3336	; 0xd08
    1780:	3b0b3a0e 	blcc	2cffc0 <_Min_Stack_Size+0x2cfbc0>
    1784:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1788:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    178c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1790:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1794:	00001349 	andeq	r1, r0, r9, asr #6
    1798:	0b01040a 	bleq	427c8 <_Min_Stack_Size+0x423c8>
    179c:	3b0b3a0b 	blcc	2cffd0 <_Min_Stack_Size+0x2cfbd0>
    17a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    17a4:	00280b00 	eoreq	r0, r8, r0, lsl #22
    17a8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    17ac:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    17b0:	1c080300 	stcne	3, cr0, [r8], {-0}
    17b4:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    17b8:	0b0b000f 	bleq	2c17fc <_Min_Stack_Size+0x2c13fc>
    17bc:	130e0000 	movwne	r0, #57344	; 0xe000
    17c0:	3a0b0b01 	bcc	2c43cc <_Min_Stack_Size+0x2c3fcc>
    17c4:	010b3b0b 	tsteq	fp, fp, lsl #22
    17c8:	0f000013 	svceq	0x00000013
    17cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    17d0:	0b3b0b3a 	bleq	ec44c0 <_Min_Stack_Size+0xec40c0>
    17d4:	0b381349 	bleq	e06500 <_Min_Stack_Size+0xe06100>
    17d8:	13100000 	tstne	r0, #0
    17dc:	0b0e0301 	bleq	3823e8 <_Min_Stack_Size+0x381fe8>
    17e0:	3b0b3a0b 	blcc	2d0014 <_Min_Stack_Size+0x2cfc14>
    17e4:	0013010b 	andseq	r0, r3, fp, lsl #2
    17e8:	000f1100 	andeq	r1, pc, r0, lsl #2
    17ec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    17f0:	15120000 	ldrne	r0, [r2, #-0]
    17f4:	01192701 	tsteq	r9, r1, lsl #14
    17f8:	13000013 	movwne	r0, #19
    17fc:	13490005 	movtne	r0, #36869	; 0x9005
    1800:	0d140000 	ldceq	0, cr0, [r4, #-0]
    1804:	3a080300 	bcc	20240c <_Min_Stack_Size+0x20200c>
    1808:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    180c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1810:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
    1814:	0b3a0e03 	bleq	e85028 <_Min_Stack_Size+0xe84c28>
    1818:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    181c:	0b201349 	bleq	806548 <_Min_Stack_Size+0x806148>
    1820:	00001301 	andeq	r1, r0, r1, lsl #6
    1824:	03000516 	movweq	r0, #1302	; 0x516
    1828:	3b0b3a0e 	blcc	2d0068 <_Min_Stack_Size+0x2cfc68>
    182c:	00134905 	andseq	r4, r3, r5, lsl #18
    1830:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    1834:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1838:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    183c:	13491927 	movtne	r1, #39207	; 0x9927
    1840:	13010b20 	movwne	r0, #6944	; 0x1b20
    1844:	34180000 	ldrcc	r0, [r8], #-0
    1848:	3a080300 	bcc	202450 <_Min_Stack_Size+0x202050>
    184c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1850:	19000013 	stmdbne	r0, {r0, r1, r4}
    1854:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1858:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    185c:	00001349 	andeq	r1, r0, r9, asr #6
    1860:	03000a1a 	movweq	r0, #2586	; 0xa1a
    1864:	3b0b3a0e 	blcc	2d00a4 <_Min_Stack_Size+0x2cfca4>
    1868:	1b000005 	blne	1884 <_Min_Stack_Size+0x1484>
    186c:	0e03012e 	adfeqsp	f0, f3, #0.5
    1870:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1874:	0b201927 	bleq	807d18 <_Min_Stack_Size+0x807918>
    1878:	00001301 	andeq	r1, r0, r1, lsl #6
    187c:	3f012e1c 	svccc	0x00012e1c
    1880:	3a0e0319 	bcc	3824ec <_Min_Stack_Size+0x3820ec>
    1884:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1888:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    188c:	97184006 	ldrls	r4, [r8, -r6]
    1890:	13011942 	movwne	r1, #6466	; 0x1942
    1894:	051d0000 	ldreq	r0, [sp, #-0]
    1898:	3a0e0300 	bcc	3824a0 <_Min_Stack_Size+0x3820a0>
    189c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18a0:	00180213 	andseq	r0, r8, r3, lsl r2
    18a4:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    18a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    18ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18b0:	13491927 	movtne	r1, #39207	; 0x9927
    18b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    18b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    18bc:	00130119 	andseq	r0, r3, r9, lsl r1
    18c0:	00051f00 	andeq	r1, r5, r0, lsl #30
    18c4:	0b3a0e03 	bleq	e850d8 <_Min_Stack_Size+0xe84cd8>
    18c8:	1349053b 	movtne	r0, #38203	; 0x953b
    18cc:	00001702 	andeq	r1, r0, r2, lsl #14
    18d0:	01828920 	orreq	r8, r2, r0, lsr #18
    18d4:	31011101 	tstcc	r1, r1, lsl #2
    18d8:	21000013 	tstcs	r0, r3, lsl r0
    18dc:	0001828a 	andeq	r8, r1, sl, lsl #5
    18e0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    18e4:	22000018 	andcs	r0, r0, #24
    18e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18f0:	17021349 	strne	r1, [r2, -r9, asr #6]
    18f4:	0a230000 	beq	8c18fc <_Min_Stack_Size+0x8c14fc>
    18f8:	3a0e0300 	bcc	382500 <_Min_Stack_Size+0x382100>
    18fc:	11053b0b 	tstne	r5, fp, lsl #22
    1900:	24000001 	strcs	r0, [r0], #-1
    1904:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1908:	17550152 			; <UNDEFINED> instruction: 0x17550152
    190c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1910:	00001301 	andeq	r1, r0, r1, lsl #6
    1914:	31000525 	tstcc	r0, r5, lsr #10
    1918:	26000013 			; <UNDEFINED> instruction: 0x26000013
    191c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1920:	00001301 	andeq	r1, r0, r1, lsl #6
    1924:	31000527 	tstcc	r0, r7, lsr #10
    1928:	00170213 	andseq	r0, r7, r3, lsl r2
    192c:	82892800 	addhi	r2, r9, #0, 16
    1930:	01110001 	tsteq	r1, r1
    1934:	00001331 	andeq	r1, r0, r1, lsr r3
    1938:	31011d29 	tstcc	r1, r9, lsr #26
    193c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1940:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1944:	2a000005 	bcs	1960 <_Min_Stack_Size+0x1560>
    1948:	0111010b 	tsteq	r1, fp, lsl #2
    194c:	13010612 	movwne	r0, #5650	; 0x1612
    1950:	342b0000 	strtcc	r0, [fp], #-0
    1954:	3a0e0300 	bcc	38255c <_Min_Stack_Size+0x38215c>
    1958:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    195c:	00180213 	andseq	r0, r8, r3, lsl r2
    1960:	00342c00 	eorseq	r2, r4, r0, lsl #24
    1964:	0b3a0803 	bleq	e83978 <_Min_Stack_Size+0xe83578>
    1968:	1349053b 	movtne	r0, #38203	; 0x953b
    196c:	00001702 	andeq	r1, r0, r2, lsl #14
    1970:	0182892d 	orreq	r8, r2, sp, lsr #18
    1974:	31011101 	tstcc	r1, r1, lsl #2
    1978:	00130113 	andseq	r0, r3, r3, lsl r1
    197c:	010b2e00 	tsteq	fp, r0, lsl #28
    1980:	00001755 	andeq	r1, r0, r5, asr r7
    1984:	3100342f 	tstcc	r0, pc, lsr #8
    1988:	00170213 	andseq	r0, r7, r3, lsl r2
    198c:	000a3000 	andeq	r3, sl, r0
    1990:	00001331 	andeq	r1, r0, r1, lsr r3
    1994:	31000a31 	tstcc	r0, r1, lsr sl
    1998:	00011113 	andeq	r1, r1, r3, lsl r1
    199c:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    19a0:	01111331 	tsteq	r1, r1, lsr r3
    19a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    19a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    19ac:	33000013 	movwcc	r0, #19
    19b0:	13310034 	teqne	r1, #52	; 0x34
    19b4:	00000b1c 	andeq	r0, r0, ip, lsl fp
    19b8:	03012e34 	movweq	r2, #7732	; 0x1e34
    19bc:	3b0b3a0e 	blcc	2d01fc <_Min_Stack_Size+0x2cfdfc>
    19c0:	11192705 	tstne	r9, r5, lsl #14
    19c4:	40061201 	andmi	r1, r6, r1, lsl #4
    19c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    19cc:	00001301 	andeq	r1, r0, r1, lsl #6
    19d0:	31000535 	tstcc	r0, r5, lsr r5
    19d4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    19d8:	00053600 	andeq	r3, r5, r0, lsl #12
    19dc:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    19e0:	0b370000 	bleq	dc19e8 <_Min_Stack_Size+0xdc15e8>
    19e4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    19e8:	38000006 	stmdacc	r0, {r1, r2}
    19ec:	01018289 	smlabbeq	r1, r9, r2, r8
    19f0:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    19f4:	01133119 	tsteq	r3, r9, lsl r1
    19f8:	39000013 	stmdbcc	r0, {r0, r1, r4}
    19fc:	01018289 	smlabbeq	r1, r9, r2, r8
    1a00:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1a04:	00133119 	andseq	r3, r3, r9, lsl r1
    1a08:	82893a00 	addhi	r3, r9, #0, 20
    1a0c:	01110001 	tsteq	r1, r1
    1a10:	31194295 			; <UNDEFINED> instruction: 0x31194295
    1a14:	3b000013 	blcc	1a68 <_Min_Stack_Size+0x1668>
    1a18:	0000010b 	andeq	r0, r0, fp, lsl #2
    1a1c:	3100343c 	tstcc	r0, ip, lsr r4
    1a20:	00180213 	andseq	r0, r8, r3, lsl r2
    1a24:	82893d00 	addhi	r3, r9, #0, 26
    1a28:	01110101 	tsteq	r1, r1, lsl #2
    1a2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1a30:	0300343e 	movweq	r3, #1086	; 0x43e
    1a34:	3b0b3a0e 	blcc	2d0274 <_Min_Stack_Size+0x2cfe74>
    1a38:	3f134905 	svccc	0x00134905
    1a3c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1a40:	00343f00 	eorseq	r3, r4, r0, lsl #30
    1a44:	0b3a0e03 	bleq	e85258 <_Min_Stack_Size+0xe84e58>
    1a48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a4c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1a50:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    1a54:	03193f00 	tsteq	r9, #0, 30
    1a58:	3b0b3a0e 	blcc	2d0298 <_Min_Stack_Size+0x2cfe98>
    1a5c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1a60:	00193c13 	andseq	r3, r9, r3, lsl ip
    1a64:	012e4100 			; <UNDEFINED> instruction: 0x012e4100
    1a68:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1a6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a70:	13491927 	movtne	r1, #39207	; 0x9927
    1a74:	1301193c 	movwne	r1, #6460	; 0x193c
    1a78:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
    1a7c:	03193f01 	tsteq	r9, #1, 30
    1a80:	3b0b3a0e 	blcc	2d02c0 <_Min_Stack_Size+0x2cfec0>
    1a84:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1a88:	00193c13 	andseq	r3, r9, r3, lsl ip
    1a8c:	11010000 	mrsne	r0, (UNDEF: 1)
    1a90:	130e2501 	movwne	r2, #58625	; 0xe501
    1a94:	1b0e030b 	blne	3826c8 <_Min_Stack_Size+0x3822c8>
    1a98:	1117550e 	tstne	r7, lr, lsl #10
    1a9c:	00171001 	andseq	r1, r7, r1
    1aa0:	01040200 	mrseq	r0, R12_usr
    1aa4:	0b3a0b0b 	bleq	e846d8 <_Min_Stack_Size+0xe842d8>
    1aa8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1aac:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1ab0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1ab4:	0400000d 	streq	r0, [r0], #-13
    1ab8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1abc:	0b3b0b3a 	bleq	ec47ac <_Min_Stack_Size+0xec43ac>
    1ac0:	00001349 	andeq	r1, r0, r9, asr #6
    1ac4:	0b002405 	bleq	aae0 <_Min_Stack_Size+0xa6e0>
    1ac8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1acc:	0600000e 	streq	r0, [r0], -lr
    1ad0:	0b0b0024 	bleq	2c1b68 <_Min_Stack_Size+0x2c1768>
    1ad4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1ad8:	35070000 	strcc	r0, [r7, #-0]
    1adc:	00134900 	andseq	r4, r3, r0, lsl #18
    1ae0:	01010800 	tsteq	r1, r0, lsl #16
    1ae4:	13011349 	movwne	r1, #4937	; 0x1349
    1ae8:	21090000 	mrscs	r0, (UNDEF: 9)
    1aec:	2f134900 	svccs	0x00134900
    1af0:	0a00000b 	beq	1b24 <_Min_Stack_Size+0x1724>
    1af4:	0b0b0113 	bleq	2c1f48 <_Min_Stack_Size+0x2c1b48>
    1af8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1afc:	00001301 	andeq	r1, r0, r1, lsl #6
    1b00:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1b04:	3b0b3a08 	blcc	2d032c <_Min_Stack_Size+0x2cff2c>
    1b08:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1b0c:	0c00000b 	stceq	0, cr0, [r0], {11}
    1b10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b18:	0b381349 	bleq	e06844 <_Min_Stack_Size+0xe06444>
    1b1c:	160d0000 	strne	r0, [sp], -r0
    1b20:	3a0e0300 	bcc	382728 <_Min_Stack_Size+0x382328>
    1b24:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b28:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1b2c:	0b0b000f 	bleq	2c1b70 <_Min_Stack_Size+0x2c1770>
    1b30:	130f0000 	movwne	r0, #61440	; 0xf000
    1b34:	3a0b0b01 	bcc	2c4740 <_Min_Stack_Size+0x2c4340>
    1b38:	010b3b0b 	tsteq	fp, fp, lsl #22
    1b3c:	10000013 	andne	r0, r0, r3, lsl r0
    1b40:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1b44:	0b3b0b3a 	bleq	ec4834 <_Min_Stack_Size+0xec4434>
    1b48:	0b381349 	bleq	e06874 <_Min_Stack_Size+0xe06474>
    1b4c:	0d110000 	ldceq	0, cr0, [r1, #-0]
    1b50:	3a0e0300 	bcc	382758 <_Min_Stack_Size+0x382358>
    1b54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b58:	000b3813 	andeq	r3, fp, r3, lsl r8
    1b5c:	01131200 	tsteq	r3, r0, lsl #4
    1b60:	0b0b0e03 	bleq	2c5374 <_Min_Stack_Size+0x2c4f74>
    1b64:	0b3b0b3a 	bleq	ec4854 <_Min_Stack_Size+0xec4454>
    1b68:	00001301 	andeq	r1, r0, r1, lsl #6
    1b6c:	0b000f13 	bleq	57c0 <_Min_Stack_Size+0x53c0>
    1b70:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b74:	01151400 	tsteq	r5, r0, lsl #8
    1b78:	13011927 	movwne	r1, #6439	; 0x1927
    1b7c:	05150000 	ldreq	r0, [r5, #-0]
    1b80:	00134900 	andseq	r4, r3, r0, lsl #18
    1b84:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1b88:	0b3a0e03 	bleq	e8539c <_Min_Stack_Size+0xe84f9c>
    1b8c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1b90:	13010b20 	movwne	r0, #6944	; 0x1b20
    1b94:	05170000 	ldreq	r0, [r7, #-0]
    1b98:	3a0e0300 	bcc	3827a0 <_Min_Stack_Size+0x3823a0>
    1b9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ba0:	18000013 	stmdane	r0, {r0, r1, r4}
    1ba4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ba8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1bac:	00001349 	andeq	r1, r0, r9, asr #6
    1bb0:	01010b19 	tsteq	r1, r9, lsl fp
    1bb4:	1a000013 	bne	1c08 <_Min_Stack_Size+0x1808>
    1bb8:	0000010b 	andeq	r0, r0, fp, lsl #2
    1bbc:	03002e1b 	movweq	r2, #3611	; 0xe1b
    1bc0:	3b0b3a0e 	blcc	2d0400 <_Min_Stack_Size+0x2d0000>
    1bc4:	20192705 	andscs	r2, r9, r5, lsl #14
    1bc8:	1c00000b 	stcne	0, cr0, [r0], {11}
    1bcc:	0e03012e 	adfeqsp	f0, f3, #0.5
    1bd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1bd4:	13491927 	movtne	r1, #39207	; 0x9927
    1bd8:	13010b20 	movwne	r0, #6944	; 0x1b20
    1bdc:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    1be0:	11133101 	tstne	r3, r1, lsl #2
    1be4:	40061201 	andmi	r1, r6, r1, lsl #4
    1be8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1bec:	00001301 	andeq	r1, r0, r1, lsl #6
    1bf0:	31011d1e 	tstcc	r1, lr, lsl sp
    1bf4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1bf8:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1bfc:	00130105 	andseq	r0, r3, r5, lsl #2
    1c00:	00051f00 	andeq	r1, r5, r0, lsl #30
    1c04:	17021331 	smladxne	r2, r1, r3, r1
    1c08:	0b200000 	bleq	801c10 <_Min_Stack_Size+0x801810>
    1c0c:	00175501 	andseq	r5, r7, r1, lsl #10
    1c10:	00342100 	eorseq	r2, r4, r0, lsl #2
    1c14:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1c18:	0b220000 	bleq	881c20 <_Min_Stack_Size+0x881820>
    1c1c:	01175501 	tsteq	r7, r1, lsl #10
    1c20:	23000013 	movwcs	r0, #19
    1c24:	01018289 	smlabbeq	r1, r9, r2, r8
    1c28:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1c2c:	8a240000 	bhi	901c34 <_Min_Stack_Size+0x901834>
    1c30:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1c34:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1c38:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
    1c3c:	11010182 	smlabbne	r1, r2, r1, r0
    1c40:	01133101 	tsteq	r3, r1, lsl #2
    1c44:	26000013 			; <UNDEFINED> instruction: 0x26000013
    1c48:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1c4c:	0b3a0e03 	bleq	e85460 <_Min_Stack_Size+0xe85060>
    1c50:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1c54:	01111349 	tsteq	r1, r9, asr #6
    1c58:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1c5c:	00194297 	mulseq	r9, r7, r2
    1c60:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
    1c64:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1c68:	0b3b0b3a 	bleq	ec4958 <_Min_Stack_Size+0xec4558>
    1c6c:	01111927 	tsteq	r1, r7, lsr #18
    1c70:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1c74:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1c78:	28000013 	stmdacs	r0, {r0, r1, r4}
    1c7c:	08030005 	stmdaeq	r3, {r0, r2}
    1c80:	0b3b0b3a 	bleq	ec4970 <_Min_Stack_Size+0xec4570>
    1c84:	17021349 	strne	r1, [r2, -r9, asr #6]
    1c88:	34290000 	strtcc	r0, [r9], #-0
    1c8c:	3a0e0300 	bcc	382894 <_Min_Stack_Size+0x382494>
    1c90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c94:	00180213 	andseq	r0, r8, r3, lsl r2
    1c98:	010b2a00 	tsteq	fp, r0, lsl #20
    1c9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ca0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ca4:	0182892b 	orreq	r8, r2, fp, lsr #18
    1ca8:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    1cac:	13311942 	teqne	r1, #1081344	; 0x108000
    1cb0:	892c0000 	stmdbhi	ip!, {}	; <UNPREDICTABLE>
    1cb4:	11000182 	smlabbne	r0, r2, r1, r0
    1cb8:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1cbc:	00001331 	andeq	r1, r0, r1, lsr r3
    1cc0:	3f012e2d 	svccc	0x00012e2d
    1cc4:	3a0e0319 	bcc	382930 <_Min_Stack_Size+0x382530>
    1cc8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1ccc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1cd0:	97184006 	ldrls	r4, [r8, -r6]
    1cd4:	13011942 	movwne	r1, #6466	; 0x1942
    1cd8:	052e0000 	streq	r0, [lr, #-0]!
    1cdc:	3a0e0300 	bcc	3828e4 <_Min_Stack_Size+0x3824e4>
    1ce0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ce4:	00170213 	andseq	r0, r7, r3, lsl r2
    1ce8:	00342f00 	eorseq	r2, r4, r0, lsl #30
    1cec:	0b3a0e03 	bleq	e85500 <_Min_Stack_Size+0xe85100>
    1cf0:	1349053b 	movtne	r0, #38203	; 0x953b
    1cf4:	00001802 	andeq	r1, r0, r2, lsl #16
    1cf8:	3f012e30 	svccc	0x00012e30
    1cfc:	3a0e0319 	bcc	382968 <_Min_Stack_Size+0x382568>
    1d00:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1d04:	11134919 	tstne	r3, r9, lsl r9
    1d08:	40061201 	andmi	r1, r6, r1, lsl #4
    1d0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1d10:	00001301 	andeq	r1, r0, r1, lsl #6
    1d14:	01828931 	orreq	r8, r2, r1, lsr r9
    1d18:	31011100 	mrscc	r1, (UNDEF: 17)
    1d1c:	32000013 	andcc	r0, r0, #19
    1d20:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1d24:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1d28:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1d2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d30:	11010b33 	tstne	r1, r3, lsr fp
    1d34:	00061201 	andeq	r1, r6, r1, lsl #4
    1d38:	00343400 	eorseq	r3, r4, r0, lsl #8
    1d3c:	17021331 	smladxne	r2, r1, r3, r1
    1d40:	05350000 	ldreq	r0, [r5, #-0]!
    1d44:	00133100 	andseq	r3, r3, r0, lsl #2
    1d48:	00343600 	eorseq	r3, r4, r0, lsl #12
    1d4c:	00001331 	andeq	r1, r0, r1, lsr r3
    1d50:	31011d37 	tstcc	r1, r7, lsr sp
    1d54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1d58:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1d5c:	38000005 	stmdacc	r0, {r0, r2}
    1d60:	08030005 	stmdaeq	r3, {r0, r2}
    1d64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d68:	17021349 	strne	r1, [r2, -r9, asr #6]
    1d6c:	34390000 	ldrtcc	r0, [r9], #-0
    1d70:	3a0e0300 	bcc	382978 <_Min_Stack_Size+0x382578>
    1d74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d78:	00170213 	andseq	r0, r7, r3, lsl r2
    1d7c:	011d3a00 	tsteq	sp, r0, lsl #20
    1d80:	01521331 	cmpeq	r2, r1, lsr r3
    1d84:	0b581755 	bleq	1607ae0 <_Min_Stack_Size+0x16076e0>
    1d88:	00000559 	andeq	r0, r0, r9, asr r5
    1d8c:	0300053b 	movweq	r0, #1339	; 0x53b
    1d90:	3b0b3a08 	blcc	2d05b8 <_Min_Stack_Size+0x2d01b8>
    1d94:	00134905 	andseq	r4, r3, r5, lsl #18
    1d98:	00053c00 	andeq	r3, r5, r0, lsl #24
    1d9c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1da0:	343d0000 	ldrtcc	r0, [sp], #-0
    1da4:	3a0e0300 	bcc	3829ac <_Min_Stack_Size+0x3825ac>
    1da8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dac:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1db0:	3e000019 	mcrcc	0, 0, r0, cr0, cr9, {0}
    1db4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1db8:	0b3b0b3a 	bleq	ec4aa8 <_Min_Stack_Size+0xec46a8>
    1dbc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1dc0:	00001802 	andeq	r1, r0, r2, lsl #16
    1dc4:	4900263f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r5, r9, sl, sp}
    1dc8:	40000013 	andmi	r0, r0, r3, lsl r0
    1dcc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1dd0:	0b3a0e03 	bleq	e855e4 <_Min_Stack_Size+0xe851e4>
    1dd4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1dd8:	1301193c 	movwne	r1, #6460	; 0x193c
    1ddc:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
    1de0:	03193f01 	tsteq	r9, #1, 30
    1de4:	3b0b3a0e 	blcc	2d0624 <_Min_Stack_Size+0x2d0224>
    1de8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1dec:	01193c13 	tsteq	r9, r3, lsl ip
    1df0:	42000013 	andmi	r0, r0, #19
    1df4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1df8:	0b3a0e03 	bleq	e8560c <_Min_Stack_Size+0xe8520c>
    1dfc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1e00:	1301193c 	movwne	r1, #6460	; 0x193c
    1e04:	2e430000 	cdpcs	0, 4, cr0, cr3, cr0, {0}
    1e08:	03193f01 	tsteq	r9, #1, 30
    1e0c:	3b0b3a0e 	blcc	2d064c <_Min_Stack_Size+0x2d024c>
    1e10:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1e14:	01193c13 	tsteq	r9, r3, lsl ip
    1e18:	44000013 	strmi	r0, [r0], #-19	; 0xffffffed
    1e1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1e20:	0b3a0e03 	bleq	e85634 <_Min_Stack_Size+0xe85234>
    1e24:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1e28:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1e2c:	Address 0x0000000000001e2c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080001c0 	stmdaeq	r0, {r6, r7, r8}
  14:	0000004c 	andeq	r0, r0, ip, asr #32
  18:	0800020c 	stmdaeq	r0, {r2, r3, r9}
  1c:	00000002 	andeq	r0, r0, r2
	...
  28:	00000024 	andeq	r0, r0, r4, lsr #32
  2c:	00bc0002 	adcseq	r0, ip, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	08000210 	stmdaeq	r0, {r4, r9}
  3c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  40:	08000300 	stmdaeq	r0, {r8, r9}
  44:	0000000c 	andeq	r0, r0, ip
	...
  50:	00000064 	andeq	r0, r0, r4, rrx
  54:	0b5e0002 	bleq	1780064 <_Min_Stack_Size+0x177fc64>
  58:	00040000 	andeq	r0, r4, r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000310 	stmdaeq	r0, {r4, r8, r9}
  6c:	00000002 	andeq	r0, r0, r2
  70:	08000314 	stmdaeq	r0, {r2, r4, r8, r9}
  74:	00000002 	andeq	r0, r0, r2
  78:	08000318 	stmdaeq	r0, {r3, r4, r8, r9}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
  84:	00000002 	andeq	r0, r0, r2
  88:	08000320 	stmdaeq	r0, {r5, r8, r9}
  8c:	00000002 	andeq	r0, r0, r2
  90:	08000324 	stmdaeq	r0, {r2, r5, r8, r9}
  94:	00000002 	andeq	r0, r0, r2
  98:	08000328 	stmdaeq	r0, {r3, r5, r8, r9}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
  a4:	00000004 	andeq	r0, r0, r4
  a8:	08000330 	stmdaeq	r0, {r4, r5, r8, r9}
  ac:	00000006 	andeq	r0, r0, r6
	...
  b8:	00000024 	andeq	r0, r0, r4, lsr #32
  bc:	0cf60002 	ldcleq	0, cr0, [r6], #8
  c0:	00040000 	andeq	r0, r4, r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
  cc:	00000050 	andeq	r0, r0, r0, asr r0
  d0:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
  d4:	00000078 	andeq	r0, r0, r8, ror r0
	...
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	11b30002 			; <UNDEFINED> instruction: 0x11b30002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	08000400 	stmdaeq	r0, {sl}
  f4:	00000002 	andeq	r0, r0, r2
  f8:	08000404 	stmdaeq	r0, {r2, sl}
  fc:	00000002 	andeq	r0, r0, r2
 100:	08000408 	stmdaeq	r0, {r3, sl}
 104:	0000002c 	andeq	r0, r0, ip, lsr #32
 108:	08000434 	stmdaeq	r0, {r2, r4, r5, sl}
 10c:	0000002c 	andeq	r0, r0, ip, lsr #32
 110:	08000460 	stmdaeq	r0, {r5, r6, sl}
 114:	00000034 	andeq	r0, r0, r4, lsr r0
 118:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 11c:	00000010 	andeq	r0, r0, r0, lsl r0
 120:	080004a4 	stmdaeq	r0, {r2, r5, r7, sl}
 124:	0000000c 	andeq	r0, r0, ip
 128:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	080004cc 	stmdaeq	r0, {r2, r3, r6, r7, sl}
 134:	00000010 	andeq	r0, r0, r0, lsl r0
 138:	080004dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl}
 13c:	00000010 	andeq	r0, r0, r0, lsl r0
 140:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
 144:	00000008 	andeq	r0, r0, r8
 148:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
 14c:	0000000c 	andeq	r0, r0, ip
 150:	08000500 	stmdaeq	r0, {r8, sl}
 154:	00000010 	andeq	r0, r0, r0, lsl r0
 158:	08000510 	stmdaeq	r0, {r4, r8, sl}
 15c:	00000010 	andeq	r0, r0, r0, lsl r0
 160:	08000520 	stmdaeq	r0, {r5, r8, sl}
 164:	00000010 	andeq	r0, r0, r0, lsl r0
 168:	08000530 	stmdaeq	r0, {r4, r5, r8, sl}
 16c:	00000010 	andeq	r0, r0, r0, lsl r0
 170:	08000540 	stmdaeq	r0, {r6, r8, sl}
 174:	00000010 	andeq	r0, r0, r0, lsl r0
 178:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
 17c:	00000010 	andeq	r0, r0, r0, lsl r0
 180:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
 184:	00000010 	andeq	r0, r0, r0, lsl r0
 188:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 18c:	00000018 	andeq	r0, r0, r8, lsl r0
 190:	08000588 	stmdaeq	r0, {r3, r7, r8, sl}
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	080005c0 	stmdaeq	r0, {r6, r7, r8, sl}
 1a4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 1b0:	00000094 	muleq	r0, r4, r0
 1b4:	1ba20002 	blne	fe8801c4 <_estack+0xde8501c4>
 1b8:	00040000 	andeq	r0, r4, r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	080005dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl}
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
 1c8:	08000600 	stmdaeq	r0, {r9, sl}
 1cc:	0000006c 	andeq	r0, r0, ip, rrx
 1d0:	0800066c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl}
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	0800069c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl}
 1e4:	00000024 	andeq	r0, r0, r4, lsr #32
 1e8:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
 1ec:	00000034 	andeq	r0, r0, r4, lsr r0
 1f0:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 1f4:	0000005c 	andeq	r0, r0, ip, asr r0
 1f8:	08000750 	stmdaeq	r0, {r4, r6, r8, r9, sl}
 1fc:	00000010 	andeq	r0, r0, r0, lsl r0
 200:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
 204:	00000060 	andeq	r0, r0, r0, rrx
 208:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
 20c:	00000018 	andeq	r0, r0, r8, lsl r0
 210:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	080007f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl}
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	0800080c 	stmdaeq	r0, {r2, r3, fp}
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	08000828 	stmdaeq	r0, {r3, r5, fp}
 22c:	00000018 	andeq	r0, r0, r8, lsl r0
 230:	08000840 	stmdaeq	r0, {r6, fp}
 234:	00000002 	andeq	r0, r0, r2
 238:	08000844 	stmdaeq	r0, {r2, r6, fp}
 23c:	00000008 	andeq	r0, r0, r8
	...
 248:	00000054 	andeq	r0, r0, r4, asr r0
 24c:	2a550002 	bcs	154025c <_Min_Stack_Size+0x153fe5c>
 250:	00040000 	andeq	r0, r4, r0
 254:	00000000 	andeq	r0, r0, r0
 258:	0800084c 	stmdaeq	r0, {r2, r3, r6, fp}
 25c:	0000027c 	andeq	r0, r0, ip, ror r2
 260:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 264:	00000164 	andeq	r0, r0, r4, ror #2
 268:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
 26c:	0000000c 	andeq	r0, r0, ip
 270:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
 274:	00000008 	andeq	r0, r0, r8
 278:	08000c40 	stmdaeq	r0, {r6, sl, fp}
 27c:	00000008 	andeq	r0, r0, r8
 280:	08000c48 	stmdaeq	r0, {r3, r6, sl, fp}
 284:	0000002a 	andeq	r0, r0, sl, lsr #32
 288:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
 28c:	00000002 	andeq	r0, r0, r2
 290:	08000c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp}
 294:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 2a0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 2a4:	317b0002 	cmncc	fp, r2
 2a8:	00040000 	andeq	r0, r4, r0
 2ac:	00000000 	andeq	r0, r0, r0
 2b0:	08000c90 	stmdaeq	r0, {r4, r7, sl, fp}
 2b4:	00000074 	andeq	r0, r0, r4, ror r0
 2b8:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
 2bc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 2c0:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
 2c4:	00000240 	andeq	r0, r0, r0, asr #4
 2c8:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
 2cc:	00000002 	andeq	r0, r0, r2
 2d0:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
 2d4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2d8:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 2dc:	00000002 	andeq	r0, r0, r2
 2e0:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
 2e4:	00000034 	andeq	r0, r0, r4, lsr r0
 2e8:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
 2ec:	00000320 	andeq	r0, r0, r0, lsr #6
 2f0:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
 2f4:	000004f4 	strdeq	r0, [r0], -r4
 2f8:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
 2fc:	000001fc 	strdeq	r0, [r0], -ip
 300:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
 304:	0000022c 	andeq	r0, r0, ip, lsr #4
 308:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
 30c:	000000bc 	strheq	r0, [r0], -ip
 310:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
 314:	000000c4 	andeq	r0, r0, r4, asr #1
 318:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
 31c:	000000e4 	andeq	r0, r0, r4, ror #1
 320:	080020c4 	stmdaeq	r0, {r2, r6, r7, sp}
 324:	000000ec 	andeq	r0, r0, ip, ror #1
 328:	080021b0 	stmdaeq	r0, {r4, r5, r7, r8, sp}
 32c:	000000c0 	andeq	r0, r0, r0, asr #1
 330:	08002270 	stmdaeq	r0, {r4, r5, r6, r9, sp}
 334:	000000bc 	strheq	r0, [r0], -ip
 338:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
 33c:	0000007a 	andeq	r0, r0, sl, ror r0
 340:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
 344:	0000007a 	andeq	r0, r0, sl, ror r0
 348:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
 34c:	00000036 	andeq	r0, r0, r6, lsr r0
 350:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
 354:	00000044 	andeq	r0, r0, r4, asr #32
 358:	080024a0 	stmdaeq	r0, {r5, r7, sl, sp}
 35c:	0000011c 	andeq	r0, r0, ip, lsl r1
 360:	080025bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp}
 364:	00000118 	andeq	r0, r0, r8, lsl r1
 368:	080026d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp}
 36c:	000000fc 	strdeq	r0, [r0], -ip
 370:	080027d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp}
 374:	000000fc 	strdeq	r0, [r0], -ip
 378:	080028cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, sp}
 37c:	000001d4 	ldrdeq	r0, [r0], -r4
 380:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
 384:	0000035a 	andeq	r0, r0, sl, asr r3
 388:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
 38c:	000000cc 	andeq	r0, r0, ip, asr #1
 390:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
 394:	000000dc 	ldrdeq	r0, [r0], -ip
 398:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
 39c:	00000138 	andeq	r0, r0, r8, lsr r1
 3a0:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
 3a4:	00000188 	andeq	r0, r0, r8, lsl #3
 3a8:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
 3ac:	000001d8 	ldrdeq	r0, [r0], -r8
 3b0:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
 3b4:	00000002 	andeq	r0, r0, r2
 3b8:	08003440 	stmdaeq	r0, {r6, sl, ip, sp}
 3bc:	00000002 	andeq	r0, r0, r2
 3c0:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
 3c4:	00000002 	andeq	r0, r0, r2
 3c8:	08003448 	stmdaeq	r0, {r3, r6, sl, ip, sp}
 3cc:	00000002 	andeq	r0, r0, r2
 3d0:	0800344c 	stmdaeq	r0, {r2, r3, r6, sl, ip, sp}
 3d4:	00000002 	andeq	r0, r0, r2
 3d8:	08003450 	stmdaeq	r0, {r4, r6, sl, ip, sp}
 3dc:	00000002 	andeq	r0, r0, r2
 3e0:	08003454 	stmdaeq	r0, {r2, r4, r6, sl, ip, sp}
 3e4:	00000002 	andeq	r0, r0, r2
 3e8:	08003458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp}
 3ec:	00000002 	andeq	r0, r0, r2
 3f0:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
 3f4:	00000002 	andeq	r0, r0, r2
 3f8:	08003460 	stmdaeq	r0, {r5, r6, sl, ip, sp}
 3fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 400:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
 404:	00000082 	andeq	r0, r0, r2, lsl #1
 408:	08003510 	stmdaeq	r0, {r4, r8, sl, ip, sp}
 40c:	00000002 	andeq	r0, r0, r2
 410:	08003514 	stmdaeq	r0, {r2, r4, r8, sl, ip, sp}
 414:	0000013c 	andeq	r0, r0, ip, lsr r1
 418:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
 41c:	0000004c 	andeq	r0, r0, ip, asr #32
 420:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
 424:	000007d2 	ldrdeq	r0, [r0], -r2
 428:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
 42c:	0000004c 	andeq	r0, r0, ip, asr #32
 430:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
 434:	00000298 	muleq	r0, r8, r2
 438:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
 43c:	00000006 	andeq	r0, r0, r6
 440:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
 444:	00000006 	andeq	r0, r0, r6
 448:	08004164 	stmdaeq	r0, {r2, r5, r6, r8, lr}
 44c:	00000004 	andeq	r0, r0, r4
	...
 458:	00000074 	andeq	r0, r0, r4, ror r0
 45c:	69690002 	stmdbvs	r9!, {r1}^
 460:	00040000 	andeq	r0, r4, r0
 464:	00000000 	andeq	r0, r0, r0
 468:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
 46c:	00000150 	andeq	r0, r0, r0, asr r1
 470:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
 474:	00000078 	andeq	r0, r0, r8, ror r0
 478:	08004330 	stmdaeq	r0, {r4, r5, r8, r9, lr}
 47c:	0000005c 	andeq	r0, r0, ip, asr r0
 480:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
 484:	00000084 	andeq	r0, r0, r4, lsl #1
 488:	08004410 	stmdaeq	r0, {r4, sl, lr}
 48c:	0000008e 	andeq	r0, r0, lr, lsl #1
 490:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
 494:	00000024 	andeq	r0, r0, r4, lsr #32
 498:	080044c4 	stmdaeq	r0, {r2, r6, r7, sl, lr}
 49c:	0000021c 	andeq	r0, r0, ip, lsl r2
 4a0:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
 4a4:	000001a8 	andeq	r0, r0, r8, lsr #3
 4a8:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
 4ac:	00000066 	andeq	r0, r0, r6, rrx
 4b0:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
 4b4:	0000006e 	andeq	r0, r0, lr, rrx
 4b8:	08004960 	stmdaeq	r0, {r5, r6, r8, fp, lr}
 4bc:	00000006 	andeq	r0, r0, r6
 4c0:	08004968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr}
 4c4:	00000004 	andeq	r0, r0, r4
	...
 4d0:	00000084 	andeq	r0, r0, r4, lsl #1
 4d4:	740d0002 	strvc	r0, [sp], #-2
 4d8:	00040000 	andeq	r0, r4, r0
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
 4e4:	00000002 	andeq	r0, r0, r2
 4e8:	08004970 	stmdaeq	r0, {r4, r5, r6, r8, fp, lr}
 4ec:	00000310 	andeq	r0, r0, r0, lsl r3
 4f0:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
 4f4:	000000a8 	andeq	r0, r0, r8, lsr #1
 4f8:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
 4fc:	0000000c 	andeq	r0, r0, ip
 500:	08004d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, lr}
 504:	0000000c 	andeq	r0, r0, ip
 508:	08004d40 	stmdaeq	r0, {r6, r8, sl, fp, lr}
 50c:	00000080 	andeq	r0, r0, r0, lsl #1
 510:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
 514:	0000016c 	andeq	r0, r0, ip, ror #2
 518:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
 51c:	0000000c 	andeq	r0, r0, ip
 520:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
 524:	00000030 	andeq	r0, r0, r0, lsr r0
 528:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
 52c:	00000030 	andeq	r0, r0, r0, lsr r0
 530:	08004f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, lr}
 534:	000000d4 	ldrdeq	r0, [r0], -r4
 538:	0800506c 	stmdaeq	r0, {r2, r3, r5, r6, ip, lr}
 53c:	00000044 	andeq	r0, r0, r4, asr #32
 540:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
 544:	00000002 	andeq	r0, r0, r2
 548:	080050b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, lr}
 54c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 558:	0000005c 	andeq	r0, r0, ip, asr r0
 55c:	81120002 	tsthi	r2, r2
 560:	00040000 	andeq	r0, r4, r0
 564:	00000000 	andeq	r0, r0, r0
 568:	080050d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, lr}
 56c:	00000044 	andeq	r0, r0, r4, asr #32
 570:	08005118 	stmdaeq	r0, {r3, r4, r8, ip, lr}
 574:	00000044 	andeq	r0, r0, r4, asr #32
 578:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
 58c:	00000010 	andeq	r0, r0, r0, lsl r0
 590:	080051a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, lr}
 594:	000000b8 	strheq	r0, [r0], -r8
 598:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
 59c:	0000009c 	muleq	r0, ip, r0
 5a0:	080052f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, lr}
 5a4:	0000009c 	muleq	r0, ip, r0
 5a8:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
 5ac:	00000098 	muleq	r0, r8, r0
	...
 5b8:	00000194 	muleq	r0, r4, r1
 5bc:	8a440002 	bhi	11005cc <_Min_Stack_Size+0x11001cc>
 5c0:	00040000 	andeq	r0, r4, r0
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	0800542c 	stmdaeq	r0, {r2, r3, r5, sl, ip, lr}
 5cc:	00000002 	andeq	r0, r0, r2
 5d0:	08005430 	stmdaeq	r0, {r4, r5, sl, ip, lr}
 5d4:	000000b4 	strheq	r0, [r0], -r4
 5d8:	080054e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, lr}
 5dc:	00000002 	andeq	r0, r0, r2
 5e0:	080054e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, lr}
 5e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 5e8:	08005514 	stmdaeq	r0, {r2, r4, r8, sl, ip, lr}
 5ec:	00000328 	andeq	r0, r0, r8, lsr #6
 5f0:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
 5f4:	000003fc 	strdeq	r0, [r0], -ip
 5f8:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
 5fc:	00000352 	andeq	r0, r0, r2, asr r3
 600:	08005f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
 604:	000000c8 	andeq	r0, r0, r8, asr #1
 608:	08006054 	stmdaeq	r0, {r2, r4, r6, sp, lr}
 60c:	0000016c 	andeq	r0, r0, ip, ror #2
 610:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
 614:	000000d8 	ldrdeq	r0, [r0], -r8
 618:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
 61c:	000000c8 	andeq	r0, r0, r8, asr #1
 620:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
 624:	000001c4 	andeq	r0, r0, r4, asr #3
 628:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
 62c:	00000114 	andeq	r0, r0, r4, lsl r1
 630:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
 634:	00000022 	andeq	r0, r0, r2, lsr #32
 638:	0800665c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp, lr}
 63c:	00000022 	andeq	r0, r0, r2, lsr #32
 640:	08006680 	stmdaeq	r0, {r7, r9, sl, sp, lr}
 644:	00000028 	andeq	r0, r0, r8, lsr #32
 648:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
 64c:	00000002 	andeq	r0, r0, r2
 650:	080066ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, sp, lr}
 654:	00000002 	andeq	r0, r0, r2
 658:	080066b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, sp, lr}
 65c:	00000002 	andeq	r0, r0, r2
 660:	080066b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp, lr}
 664:	00000002 	andeq	r0, r0, r2
 668:	080066b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, sp, lr}
 66c:	0000000a 	andeq	r0, r0, sl
 670:	080066c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, sp, lr}
 674:	00000002 	andeq	r0, r0, r2
 678:	080066c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, sp, lr}
 67c:	0000000a 	andeq	r0, r0, sl
 680:	080066d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp, lr}
 684:	00000002 	andeq	r0, r0, r2
 688:	080066d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, sp, lr}
 68c:	0000000a 	andeq	r0, r0, sl
 690:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
 694:	00000002 	andeq	r0, r0, r2
 698:	080066e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, lr}
 69c:	000000ec 	andeq	r0, r0, ip, ror #1
 6a0:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
 6a4:	00000036 	andeq	r0, r0, r6, lsr r0
 6a8:	0800680c 	stmdaeq	r0, {r2, r3, fp, sp, lr}
 6ac:	00000034 	andeq	r0, r0, r4, lsr r0
 6b0:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
 6b4:	000000cc 	andeq	r0, r0, ip, asr #1
 6b8:	0800690c 	stmdaeq	r0, {r2, r3, r8, fp, sp, lr}
 6bc:	0000012c 	andeq	r0, r0, ip, lsr #2
 6c0:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
 6c4:	0000005a 	andeq	r0, r0, sl, asr r0
 6c8:	08006a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, sp, lr}
 6cc:	00000050 	andeq	r0, r0, r0, asr r0
 6d0:	08006ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp, lr}
 6d4:	00000030 	andeq	r0, r0, r0, lsr r0
 6d8:	08006b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, sp, lr}
 6dc:	00000056 	andeq	r0, r0, r6, asr r0
 6e0:	08006b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
 6e4:	00000050 	andeq	r0, r0, r0, asr r0
 6e8:	08006bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 6ec:	0000002a 	andeq	r0, r0, sl, lsr #32
 6f0:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
 6f4:	00000024 	andeq	r0, r0, r4, lsr #32
 6f8:	08006c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp, lr}
 6fc:	000000ca 	andeq	r0, r0, sl, asr #1
 700:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
 704:	00000106 	andeq	r0, r0, r6, lsl #2
 708:	08006de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp, lr}
 70c:	0000015c 	andeq	r0, r0, ip, asr r1
 710:	08006f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
 714:	000000e4 	andeq	r0, r0, r4, ror #1
 718:	08007020 	stmdaeq	r0, {r5, ip, sp, lr}
 71c:	00000012 	andeq	r0, r0, r2, lsl r0
 720:	08007034 	stmdaeq	r0, {r2, r4, r5, ip, sp, lr}
 724:	0000008a 	andeq	r0, r0, sl, lsl #1
 728:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
 72c:	00000092 	muleq	r0, r2, r0
 730:	08007154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp, lr}
 734:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 738:	08007224 	stmdaeq	r0, {r2, r5, r9, ip, sp, lr}
 73c:	00000006 	andeq	r0, r0, r6
 740:	0800722c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp, lr}
 744:	00000004 	andeq	r0, r0, r4
	...
 750:	000000cc 	andeq	r0, r0, ip, asr #1
 754:	ac250002 	stcge	0, cr0, [r5], #-8
 758:	00040000 	andeq	r0, r4, r0
 75c:	00000000 	andeq	r0, r0, r0
 760:	08007230 	stmdaeq	r0, {r4, r5, r9, ip, sp, lr}
 764:	000000a8 	andeq	r0, r0, r8, lsr #1
 768:	080072d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp, lr}
 76c:	00000008 	andeq	r0, r0, r8
 770:	080072e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp, lr}
 774:	00000078 	andeq	r0, r0, r8, ror r0
 778:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
 77c:	0000001c 	andeq	r0, r0, ip, lsl r0
 780:	08007374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
 784:	0000001c 	andeq	r0, r0, ip, lsl r0
 788:	08007390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp, lr}
 78c:	0000001c 	andeq	r0, r0, ip, lsl r0
 790:	080073ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr}
 794:	00000078 	andeq	r0, r0, r8, ror r0
 798:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
 79c:	00000014 	andeq	r0, r0, r4, lsl r0
 7a0:	08007438 	stmdaeq	r0, {r3, r4, r5, sl, ip, sp, lr}
 7a4:	000000b8 	strheq	r0, [r0], -r8
 7a8:	080074f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, sp, lr}
 7ac:	00000058 	andeq	r0, r0, r8, asr r0
 7b0:	08007548 	stmdaeq	r0, {r3, r6, r8, sl, ip, sp, lr}
 7b4:	00000058 	andeq	r0, r0, r8, asr r0
 7b8:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
 7bc:	00000084 	andeq	r0, r0, r4, lsl #1
 7c0:	08007624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp, lr}
 7c4:	00000004 	andeq	r0, r0, r4
 7c8:	08007628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp, lr}
 7cc:	000000f4 	strdeq	r0, [r0], -r4
 7d0:	0800771c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp, lr}
 7d4:	00000054 	andeq	r0, r0, r4, asr r0
 7d8:	08007770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, ip, sp, lr}
 7dc:	00000124 	andeq	r0, r0, r4, lsr #2
 7e0:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
 7e4:	0000012c 	andeq	r0, r0, ip, lsr #2
 7e8:	080079c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, lr}
 7ec:	0000011c 	andeq	r0, r0, ip, lsl r1
 7f0:	08007adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
 7f4:	00000124 	andeq	r0, r0, r4, lsr #2
 7f8:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
 7fc:	00000004 	andeq	r0, r0, r4
 800:	08007c04 	stmdaeq	r0, {r2, sl, fp, ip, sp, lr}
 804:	0000010c 	andeq	r0, r0, ip, lsl #2
 808:	08007d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, sp, lr}
 80c:	000000a8 	andeq	r0, r0, r8, lsr #1
 810:	08007db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 814:	000000a8 	andeq	r0, r0, r8, lsr #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       4:	00000000 	andeq	r0, r0, r0
       8:	080001c0 	stmdaeq	r0, {r6, r7, r8}
       c:	0800020c 	stmdaeq	r0, {r2, r3, r9}
      10:	0800020c 	stmdaeq	r0, {r2, r3, r9}
      14:	0800020e 	stmdaeq	r0, {r1, r2, r3, r9}
	...
      20:	08000224 	stmdaeq	r0, {r2, r5, r9}
      24:	080002a8 	stmdaeq	r0, {r3, r5, r7, r9}
      28:	080002de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9}
      2c:	08000300 	stmdaeq	r0, {r8, r9}
	...
      38:	08000224 	stmdaeq	r0, {r2, r5, r9}
      3c:	08000226 	stmdaeq	r0, {r1, r2, r5, r9}
      40:	08000228 	stmdaeq	r0, {r3, r5, r9}
      44:	0800023e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9}
	...
      50:	08000226 	stmdaeq	r0, {r1, r2, r5, r9}
      54:	08000228 	stmdaeq	r0, {r3, r5, r9}
      58:	0800023e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9}
      5c:	08000250 	stmdaeq	r0, {r4, r6, r9}
      60:	08000264 	stmdaeq	r0, {r2, r5, r6, r9}
      64:	08000268 	stmdaeq	r0, {r3, r5, r6, r9}
	...
      70:	080002a8 	stmdaeq	r0, {r3, r5, r7, r9}
      74:	080002ac 	stmdaeq	r0, {r2, r3, r5, r7, r9}
      78:	080002b0 	stmdaeq	r0, {r4, r5, r7, r9}
      7c:	080002b8 	stmdaeq	r0, {r3, r4, r5, r7, r9}
      80:	080002ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9}
      84:	080002be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9}
      88:	080002c0 	stmdaeq	r0, {r6, r7, r9}
      8c:	080002c4 	stmdaeq	r0, {r2, r6, r7, r9}
	...
      98:	08000210 	stmdaeq	r0, {r4, r9}
      9c:	08000300 	stmdaeq	r0, {r8, r9}
      a0:	08000300 	stmdaeq	r0, {r8, r9}
      a4:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
	...
      b0:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
      b4:	0800030e 	stmdaeq	r0, {r1, r2, r3, r8, r9}
      b8:	08000310 	stmdaeq	r0, {r4, r8, r9}
      bc:	08000312 	stmdaeq	r0, {r1, r4, r8, r9}
      c0:	08000314 	stmdaeq	r0, {r2, r4, r8, r9}
      c4:	08000316 	stmdaeq	r0, {r1, r2, r4, r8, r9}
      c8:	08000318 	stmdaeq	r0, {r3, r4, r8, r9}
      cc:	0800031a 	stmdaeq	r0, {r1, r3, r4, r8, r9}
      d0:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
      d4:	0800031e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9}
      d8:	08000320 	stmdaeq	r0, {r5, r8, r9}
      dc:	08000322 	stmdaeq	r0, {r1, r5, r8, r9}
      e0:	08000324 	stmdaeq	r0, {r2, r5, r8, r9}
      e4:	08000326 	stmdaeq	r0, {r1, r2, r5, r8, r9}
      e8:	08000328 	stmdaeq	r0, {r3, r5, r8, r9}
      ec:	0800032a 	stmdaeq	r0, {r1, r3, r5, r8, r9}
      f0:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
      f4:	08000330 	stmdaeq	r0, {r4, r5, r8, r9}
      f8:	08000330 	stmdaeq	r0, {r4, r5, r8, r9}
      fc:	08000336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9}
	...
     108:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
     10c:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
     110:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
     114:	08000400 	stmdaeq	r0, {sl}
	...
     120:	08000400 	stmdaeq	r0, {sl}
     124:	08000402 	stmdaeq	r0, {r1, sl}
     128:	08000404 	stmdaeq	r0, {r2, sl}
     12c:	08000406 	stmdaeq	r0, {r1, r2, sl}
     130:	08000408 	stmdaeq	r0, {r3, sl}
     134:	08000434 	stmdaeq	r0, {r2, r4, r5, sl}
     138:	08000434 	stmdaeq	r0, {r2, r4, r5, sl}
     13c:	08000460 	stmdaeq	r0, {r5, r6, sl}
     140:	08000460 	stmdaeq	r0, {r5, r6, sl}
     144:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
     148:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
     14c:	080004a4 	stmdaeq	r0, {r2, r5, r7, sl}
     150:	080004a4 	stmdaeq	r0, {r2, r5, r7, sl}
     154:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
     158:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
     15c:	080004cc 	stmdaeq	r0, {r2, r3, r6, r7, sl}
     160:	080004cc 	stmdaeq	r0, {r2, r3, r6, r7, sl}
     164:	080004dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl}
     168:	080004dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl}
     16c:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
     170:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
     174:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
     178:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
     17c:	08000500 	stmdaeq	r0, {r8, sl}
     180:	08000500 	stmdaeq	r0, {r8, sl}
     184:	08000510 	stmdaeq	r0, {r4, r8, sl}
     188:	08000510 	stmdaeq	r0, {r4, r8, sl}
     18c:	08000520 	stmdaeq	r0, {r5, r8, sl}
     190:	08000520 	stmdaeq	r0, {r5, r8, sl}
     194:	08000530 	stmdaeq	r0, {r4, r5, r8, sl}
     198:	08000530 	stmdaeq	r0, {r4, r5, r8, sl}
     19c:	08000540 	stmdaeq	r0, {r6, r8, sl}
     1a0:	08000540 	stmdaeq	r0, {r6, r8, sl}
     1a4:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
     1a8:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
     1ac:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
     1b0:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
     1b4:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
     1b8:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
     1bc:	08000588 	stmdaeq	r0, {r3, r7, r8, sl}
     1c0:	08000588 	stmdaeq	r0, {r3, r7, r8, sl}
     1c4:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
     1c8:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
     1cc:	080005c0 	stmdaeq	r0, {r6, r7, r8, sl}
     1d0:	080005c0 	stmdaeq	r0, {r6, r7, r8, sl}
     1d4:	080005dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl}
	...
     1e0:	0800060a 	stmdaeq	r0, {r1, r3, r9, sl}
     1e4:	08000630 	stmdaeq	r0, {r4, r5, r9, sl}
     1e8:	08000632 	stmdaeq	r0, {r1, r4, r5, r9, sl}
     1ec:	08000636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl}
     1f0:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     1f4:	08000652 	stmdaeq	r0, {r1, r4, r6, r9, sl}
	...
     200:	08000630 	stmdaeq	r0, {r4, r5, r9, sl}
     204:	08000632 	stmdaeq	r0, {r1, r4, r5, r9, sl}
     208:	08000636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl}
     20c:	08000648 	stmdaeq	r0, {r3, r6, r9, sl}
     210:	08000652 	stmdaeq	r0, {r1, r4, r6, r9, sl}
     214:	08000660 	stmdaeq	r0, {r5, r6, r9, sl}
	...
     220:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     224:	080006ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl}
     228:	080006cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl}
     22c:	080006e0 	stmdaeq	r0, {r5, r6, r7, r9, sl}
     230:	080006e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl}
     234:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
	...
     240:	080006cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl}
     244:	080006ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl}
     248:	080006d0 	stmdaeq	r0, {r4, r6, r7, r9, sl}
     24c:	080006d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl}
	...
     258:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
     25c:	08000762 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl}
     260:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
     264:	08000774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl}
     268:	080007ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl}
     26c:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
	...
     278:	08000774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl}
     27c:	080007a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl}
     280:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
     284:	080007ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl}
	...
     290:	080005dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl}
     294:	08000600 	stmdaeq	r0, {r9, sl}
     298:	08000600 	stmdaeq	r0, {r9, sl}
     29c:	0800066c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl}
     2a0:	0800066c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl}
     2a4:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     2a8:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     2ac:	0800069c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl}
     2b0:	0800069c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl}
     2b4:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     2b8:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     2bc:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
     2c0:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
     2c4:	08000750 	stmdaeq	r0, {r4, r6, r8, r9, sl}
     2c8:	08000750 	stmdaeq	r0, {r4, r6, r8, r9, sl}
     2cc:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
     2d0:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
     2d4:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     2d8:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     2dc:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
     2e0:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
     2e4:	080007f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl}
     2e8:	080007f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl}
     2ec:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     2f0:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     2f4:	08000828 	stmdaeq	r0, {r3, r5, fp}
     2f8:	08000828 	stmdaeq	r0, {r3, r5, fp}
     2fc:	08000840 	stmdaeq	r0, {r6, fp}
     300:	08000840 	stmdaeq	r0, {r6, fp}
     304:	08000842 	stmdaeq	r0, {r1, r6, fp}
     308:	08000844 	stmdaeq	r0, {r2, r6, fp}
     30c:	0800084c 	stmdaeq	r0, {r2, r3, r6, fp}
	...
     318:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
     31c:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
     320:	080008ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp}
     324:	080008fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp}
     328:	080008fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp}
     32c:	08000902 	stmdaeq	r0, {r1, r8, fp}
	...
     338:	0800084c 	stmdaeq	r0, {r2, r3, r6, fp}
     33c:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
     340:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
     344:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     348:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     34c:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
     350:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
     354:	08000c40 	stmdaeq	r0, {r6, sl, fp}
     358:	08000c40 	stmdaeq	r0, {r6, sl, fp}
     35c:	08000c48 	stmdaeq	r0, {r3, r6, sl, fp}
     360:	08000c48 	stmdaeq	r0, {r3, r6, sl, fp}
     364:	08000c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp}
     368:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
     36c:	08000c76 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, fp}
     370:	08000c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp}
     374:	08000c90 	stmdaeq	r0, {r4, r7, sl, fp}
	...
     380:	08000d22 	stmdaeq	r0, {r1, r5, r8, sl, fp}
     384:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
     388:	08000da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp}
     38c:	08000dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp}
     390:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     394:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
     398:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
     39c:	08000e02 	stmdaeq	r0, {r1, r9, sl, fp}
	...
     3a8:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     3ac:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
     3b0:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
     3b4:	08000e02 	stmdaeq	r0, {r1, r9, sl, fp}
	...
     3c0:	08000d32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp}
     3c4:	08000d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp}
     3c8:	08000dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp}
     3cc:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
     3d0:	08000e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp}
     3d4:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
	...
     3e0:	08000d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp}
     3e4:	08000da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp}
     3e8:	08000e02 	stmdaeq	r0, {r1, r9, sl, fp}
     3ec:	08000e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp}
     3f0:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
     3f4:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
	...
     400:	08000d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp}
     404:	08000d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp}
     408:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
     40c:	08000e12 	stmdaeq	r0, {r1, r4, r9, sl, fp}
     410:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     414:	08000e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp}
	...
     420:	08000d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp}
     424:	08000d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp}
     428:	08000d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp}
     42c:	08000d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp}
     430:	08000e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp}
     434:	08000e50 	stmdaeq	r0, {r4, r6, r9, sl, fp}
	...
     440:	08000e1e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, fp}
     444:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     448:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
     44c:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
	...
     458:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
     45c:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     460:	08000e88 	stmdaeq	r0, {r3, r7, r9, sl, fp}
     464:	08000e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp}
	...
     470:	08000ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp}
     474:	08000ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp}
     478:	08000f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp}
     47c:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
     480:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
     484:	08000fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp}
	...
     490:	08000ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp}
     494:	08000f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp}
     498:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
     49c:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
     4a0:	08000fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp}
     4a4:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
	...
     4b0:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
     4b4:	08000f04 	stmdaeq	r0, {r2, r8, r9, sl, fp}
     4b8:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
     4bc:	08000fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp}
     4c0:	080010ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, ip}
     4c4:	080010be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip}
     4c8:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
     4cc:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
	...
     4d8:	08000f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp}
     4dc:	08000f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp}
     4e0:	08000fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp}
     4e4:	08000fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp}
     4e8:	0800100e 	stmdaeq	r0, {r1, r2, r3, ip}
     4ec:	0800102e 	stmdaeq	r0, {r1, r2, r3, r5, ip}
	...
     4f8:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
     4fc:	08000f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp}
     500:	08001014 	stmdaeq	r0, {r2, r4, ip}
     504:	0800101a 	stmdaeq	r0, {r1, r3, r4, ip}
	...
     510:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
     514:	08000fbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp}
     518:	08000fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp}
     51c:	08000fc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp}
     520:	08001078 	stmdaeq	r0, {r3, r4, r5, r6, ip}
     524:	0800107e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, ip}
     528:	08001094 	stmdaeq	r0, {r2, r4, r7, ip}
     52c:	080010ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, ip}
	...
     538:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
     53c:	08000fbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp}
     540:	08000fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp}
     544:	08000fc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp}
	...
     550:	08000fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp}
     554:	0800100e 	stmdaeq	r0, {r1, r2, r3, ip}
     558:	08001044 	stmdaeq	r0, {r2, r6, ip}
     55c:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
     560:	0800106a 	stmdaeq	r0, {r1, r3, r5, r6, ip}
     564:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
     568:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
     56c:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
	...
     578:	08000fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp}
     57c:	08000fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp}
     580:	08000fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp}
     584:	0800100e 	stmdaeq	r0, {r1, r2, r3, ip}
     588:	0800104a 	stmdaeq	r0, {r1, r3, r6, ip}
     58c:	08001050 	stmdaeq	r0, {r4, r6, ip}
	...
     598:	08001036 	stmdaeq	r0, {r1, r2, r4, r5, ip}
     59c:	08001044 	stmdaeq	r0, {r2, r6, ip}
     5a0:	080010be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip}
     5a4:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
	...
     5b0:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
     5b4:	08001044 	stmdaeq	r0, {r2, r6, ip}
     5b8:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
     5bc:	080010ca 	stmdaeq	r0, {r1, r3, r6, r7, ip}
	...
     5c8:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
     5cc:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
     5d0:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
     5d4:	0800126a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip}
     5d8:	080013ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip}
     5dc:	080013b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip}
     5e0:	080013ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip}
     5e4:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
	...
     5f0:	080013ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip}
     5f4:	080013b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip}
     5f8:	080013ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip}
     5fc:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
	...
     608:	080012a2 	stmdaeq	r0, {r1, r5, r7, r9, ip}
     60c:	080012a4 	stmdaeq	r0, {r2, r5, r7, r9, ip}
     610:	080012a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip}
     614:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
     618:	080012aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, ip}
     61c:	080012fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip}
     620:	08001408 	stmdaeq	r0, {r3, sl, ip}
     624:	08001454 	stmdaeq	r0, {r2, r4, r6, sl, ip}
     628:	08001482 	stmdaeq	r0, {r1, r7, sl, ip}
     62c:	080014aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip}
     630:	080014c2 	stmdaeq	r0, {r1, r6, r7, sl, ip}
     634:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
     638:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
     63c:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
     640:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
     644:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
	...
     650:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
     654:	080012d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, ip}
     658:	08001408 	stmdaeq	r0, {r3, sl, ip}
     65c:	08001428 	stmdaeq	r0, {r3, r5, sl, ip}
     660:	08001510 	stmdaeq	r0, {r4, r8, sl, ip}
     664:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
	...
     670:	080012ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, ip}
     674:	080012fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip}
     678:	08001432 	stmdaeq	r0, {r1, r4, r5, sl, ip}
     67c:	08001452 	stmdaeq	r0, {r1, r4, r6, sl, ip}
     680:	080014c2 	stmdaeq	r0, {r1, r6, r7, sl, ip}
     684:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
     688:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
     68c:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
	...
     698:	08001496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip}
     69c:	080014a2 	stmdaeq	r0, {r1, r5, r7, sl, ip}
     6a0:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
     6a4:	08001510 	stmdaeq	r0, {r4, r8, sl, ip}
	...
     6b0:	08001318 	stmdaeq	r0, {r3, r4, r8, r9, ip}
     6b4:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
     6b8:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
     6bc:	08001366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, ip}
     6c0:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
     6c4:	080013e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip}
	...
     6d0:	0800131e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip}
     6d4:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
     6d8:	080013c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, ip}
     6dc:	080013cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip}
	...
     6e8:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
     6ec:	080013aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, ip}
     6f0:	080013e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip}
     6f4:	08001408 	stmdaeq	r0, {r3, sl, ip}
     6f8:	080014aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip}
     6fc:	080014c2 	stmdaeq	r0, {r1, r6, r7, sl, ip}
     700:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
     704:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
	...
     710:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
     714:	08001386 	stmdaeq	r0, {r1, r2, r7, r8, r9, ip}
     718:	0800138c 	stmdaeq	r0, {r2, r3, r7, r8, r9, ip}
     71c:	080013aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, ip}
     720:	080013ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, ip}
     724:	080013f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip}
	...
     730:	0800156a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip}
     734:	08001584 	stmdaeq	r0, {r2, r7, r8, sl, ip}
     738:	0800158a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip}
     73c:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
     740:	080017ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip}
     744:	080017d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip}
     748:	080017da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip}
     74c:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
	...
     758:	080017ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip}
     75c:	080017d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip}
     760:	080017da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip}
     764:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
	...
     770:	080015cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip}
     774:	080015d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, ip}
     778:	080015d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip}
     77c:	080015dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip}
     780:	080015e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip}
     784:	08001604 	stmdaeq	r0, {r2, r9, sl, ip}
     788:	08001606 	stmdaeq	r0, {r1, r2, r9, sl, ip}
     78c:	08001634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip}
     790:	08001860 	stmdaeq	r0, {r5, r6, fp, ip}
     794:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
     798:	080018d0 	stmdaeq	r0, {r4, r6, r7, fp, ip}
     79c:	08001906 	stmdaeq	r0, {r1, r2, r8, fp, ip}
     7a0:	08001918 	stmdaeq	r0, {r3, r4, r8, fp, ip}
     7a4:	08001980 	stmdaeq	r0, {r7, r8, fp, ip}
     7a8:	080019a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip}
     7ac:	080019be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip}
     7b0:	080019dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip}
     7b4:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
	...
     7c0:	08001606 	stmdaeq	r0, {r1, r2, r9, sl, ip}
     7c4:	0800160c 	stmdaeq	r0, {r2, r3, r9, sl, ip}
     7c8:	08001860 	stmdaeq	r0, {r5, r6, fp, ip}
     7cc:	08001880 	stmdaeq	r0, {r7, fp, ip}
     7d0:	080019dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip}
     7d4:	080019e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip}
	...
     7e0:	08001626 	stmdaeq	r0, {r1, r2, r5, r9, sl, ip}
     7e4:	08001634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip}
     7e8:	08001918 	stmdaeq	r0, {r3, r4, r8, fp, ip}
     7ec:	0800193e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip}
     7f0:	0800195e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip}
     7f4:	08001980 	stmdaeq	r0, {r7, r8, fp, ip}
     7f8:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
     7fc:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
	...
     808:	080018e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip}
     80c:	080018ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip}
     810:	0800193e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip}
     814:	0800195e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip}
	...
     820:	080019a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip}
     824:	080019be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip}
     828:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
     82c:	08001a02 	stmdaeq	r0, {r1, r9, fp, ip}
     830:	08001a06 	stmdaeq	r0, {r1, r2, r9, fp, ip}
     834:	08001a08 	stmdaeq	r0, {r3, r9, fp, ip}
     838:	08001a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip}
     83c:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
	...
     848:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
     84c:	08001676 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, ip}
     850:	0800172a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, ip}
     854:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
	...
     860:	080016aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, ip}
     864:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
     868:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
     86c:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
     870:	0800174e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip}
     874:	0800176e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, ip}
	...
     880:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
     884:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
     888:	0800174e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip}
     88c:	08001754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip}
	...
     898:	0800176e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, ip}
     89c:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
     8a0:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
     8a4:	08001806 	stmdaeq	r0, {r1, r2, fp, ip}
     8a8:	08001816 	stmdaeq	r0, {r1, r2, r4, fp, ip}
     8ac:	08001836 	stmdaeq	r0, {r1, r2, r4, r5, fp, ip}
	...
     8b8:	08001836 	stmdaeq	r0, {r1, r2, r4, r5, fp, ip}
     8bc:	08001850 	stmdaeq	r0, {r4, r6, fp, ip}
     8c0:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
     8c4:	0800189c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip}
	...
     8d0:	080018ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip}
     8d4:	080018ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, ip}
     8d8:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
     8dc:	080018be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, ip}
	...
     8e8:	0800198e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, ip}
     8ec:	08001990 	stmdaeq	r0, {r4, r7, r8, fp, ip}
     8f0:	08001992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip}
     8f4:	0800199e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, ip}
	...
     900:	080019c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip}
     904:	080019c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip}
     908:	080019ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip}
     90c:	080019da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip}
	...
     918:	08001ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip}
     91c:	08001abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp, ip}
     920:	08001bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp, ip}
     924:	08001c12 	stmdaeq	r0, {r1, r4, sl, fp, ip}
     928:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
     92c:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
	...
     938:	08001abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp, ip}
     93c:	08001ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, ip}
     940:	08001ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip}
     944:	08001acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip}
     948:	08001ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip}
     94c:	08001ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, ip}
	...
     958:	08001adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip}
     95c:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
     960:	08001bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip}
     964:	08001bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp, ip}
	...
     970:	08001ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, ip}
     974:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
     978:	08001bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip}
     97c:	08001bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip}
	...
     988:	08001b16 	stmdaeq	r0, {r1, r2, r4, r8, r9, fp, ip}
     98c:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
     990:	08001c12 	stmdaeq	r0, {r1, r4, sl, fp, ip}
     994:	08001c20 	stmdaeq	r0, {r5, sl, fp, ip}
     998:	08001c22 	stmdaeq	r0, {r1, r5, sl, fp, ip}
     99c:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
	...
     9a8:	08001c12 	stmdaeq	r0, {r1, r4, sl, fp, ip}
     9ac:	08001c20 	stmdaeq	r0, {r5, sl, fp, ip}
     9b0:	08001c22 	stmdaeq	r0, {r1, r5, sl, fp, ip}
     9b4:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
	...
     9c0:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     9c4:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
     9c8:	08001b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp, ip}
     9cc:	08001b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip}
     9d0:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
     9d4:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
	...
     9e0:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
     9e4:	08001cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, ip}
     9e8:	08001d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip}
     9ec:	08001d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp, ip}
     9f0:	08001e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip}
     9f4:	08001e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, ip}
     9f8:	08001e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip}
     9fc:	08001e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip}
	...
     a08:	08001e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip}
     a0c:	08001e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, ip}
     a10:	08001e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip}
     a14:	08001e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip}
	...
     a20:	08001cda 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, fp, ip}
     a24:	08001cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp, ip}
     a28:	08001d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip}
     a2c:	08001d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip}
     a30:	08001d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp, ip}
     a34:	08001dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip}
	...
     a40:	08001dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip}
     a44:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
     a48:	08001de2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, fp, ip}
     a4c:	08001df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip}
     a50:	08001e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip}
     a54:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
	...
     a60:	08001db2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, fp, ip}
     a64:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
     a68:	08001e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip}
     a6c:	08001e3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, fp, ip}
	...
     a78:	080028f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, sp}
     a7c:	08002910 	stmdaeq	r0, {r4, r8, fp, sp}
     a80:	08002a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, sp}
     a84:	08002a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, sp}
     a88:	08002a28 	stmdaeq	r0, {r3, r5, r9, fp, sp}
     a8c:	08002a2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, sp}
	...
     a98:	08002a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, sp}
     a9c:	08002a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, sp}
     aa0:	08002a28 	stmdaeq	r0, {r3, r5, r9, fp, sp}
     aa4:	08002a2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, sp}
	...
     ab0:	0800297a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, sp}
     ab4:	08002986 	stmdaeq	r0, {r1, r2, r7, r8, fp, sp}
     ab8:	08002a2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, sp}
     abc:	08002a50 	stmdaeq	r0, {r4, r6, r9, fp, sp}
	...
     ac8:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
     acc:	08002986 	stmdaeq	r0, {r1, r2, r7, r8, fp, sp}
     ad0:	08002a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, sp}
     ad4:	08002a3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, fp, sp}
	...
     ae0:	08002986 	stmdaeq	r0, {r1, r2, r7, r8, fp, sp}
     ae4:	0800299e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, sp}
     ae8:	080029a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, sp}
     aec:	080029de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, sp}
     af0:	08002a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, sp}
     af4:	08002a90 	stmdaeq	r0, {r4, r7, r9, fp, sp}
	...
     b00:	08002986 	stmdaeq	r0, {r1, r2, r7, r8, fp, sp}
     b04:	0800299e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, sp}
     b08:	080029ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, fp, sp}
     b0c:	080029b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, sp}
     b10:	080029d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, sp}
     b14:	080029de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, sp}
	...
     b20:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
     b24:	08002ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp}
     b28:	08002b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, sp}
     b2c:	08002b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, sp}
     b30:	08002b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp, sp}
     b34:	08002b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, sp}
	...
     b40:	08002b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, sp}
     b44:	08002b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, sp}
     b48:	08002b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp, sp}
     b4c:	08002b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, sp}
	...
     b58:	08002b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, sp}
     b5c:	08002b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, sp}
     b60:	08002b7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
     b64:	08002b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, sp}
	...
     b70:	08002bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, sp}
     b74:	08002bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp}
     b78:	08002c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp, sp}
     b7c:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
	...
     b88:	08002bea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, fp, sp}
     b8c:	08002bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, sp}
     b90:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
     b94:	08002c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp}
     b98:	08002c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, sp}
     b9c:	08002cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, sp}
	...
     ba8:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
     bac:	08002c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp}
     bb0:	08002c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, sp}
     bb4:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
	...
     bc0:	08002cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, sp}
     bc4:	08002cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, sp}
     bc8:	08002d0a 	stmdaeq	r0, {r1, r3, r8, sl, fp, sp}
     bcc:	08002d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, sp}
     bd0:	08002d3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, fp, sp}
     bd4:	08002d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, sp}
	...
     be0:	08002d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, sp}
     be4:	08002d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, sp}
     be8:	08002d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, sp}
     bec:	08002d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, sp}
	...
     bf8:	08003288 	stmdaeq	r0, {r3, r7, r9, ip, sp}
     bfc:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
     c00:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
     c04:	080033de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, ip, sp}
     c08:	080033e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp}
     c0c:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
	...
     c18:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
     c1c:	080033de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, ip, sp}
     c20:	080033e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp}
     c24:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
	...
     c30:	080032e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, ip, sp}
     c34:	080032ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip, sp}
     c38:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
     c3c:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
     c40:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
     c44:	080033f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, sp}
     c48:	080033f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, ip, sp}
     c4c:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
	...
     c58:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
     c5c:	080033f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, sp}
     c60:	080033f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, ip, sp}
     c64:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
	...
     c70:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
     c74:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     c78:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
     c7c:	080033ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, ip, sp}
     c80:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
     c84:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
	...
     c90:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
     c94:	080033ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, ip, sp}
     c98:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
     c9c:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
	...
     ca8:	08003400 	stmdaeq	r0, {sl, ip, sp}
     cac:	08003402 	stmdaeq	r0, {r1, sl, ip, sp}
     cb0:	08003404 	stmdaeq	r0, {r2, sl, ip, sp}
     cb4:	08003412 	stmdaeq	r0, {r1, r4, sl, ip, sp}
	...
     cc0:	08003716 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, ip, sp}
     cc4:	080037d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, sp}
     cc8:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
     ccc:	08003bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, sp}
     cd0:	08003c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, sp}
     cd4:	08003c12 	stmdaeq	r0, {r1, r4, sl, fp, ip, sp}
     cd8:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
     cdc:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
	...
     ce8:	0800382e 	stmdaeq	r0, {r1, r2, r3, r5, fp, ip, sp}
     cec:	08003882 	stmdaeq	r0, {r1, r7, fp, ip, sp}
     cf0:	08003c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, ip, sp}
     cf4:	08003caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, sp}
     cf8:	08003e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, sp}
     cfc:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
	...
     d08:	08003836 	stmdaeq	r0, {r1, r2, r4, r5, fp, ip, sp}
     d0c:	08003882 	stmdaeq	r0, {r1, r7, fp, ip, sp}
     d10:	08003c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, ip, sp}
     d14:	08003caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, sp}
     d18:	08003e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, sp}
     d1c:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
	...
     d28:	08003882 	stmdaeq	r0, {r1, r7, fp, ip, sp}
     d2c:	08003892 	stmdaeq	r0, {r1, r4, r7, fp, ip, sp}
     d30:	08003924 	stmdaeq	r0, {r2, r5, r8, fp, ip, sp}
     d34:	080039ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, fp, ip, sp}
     d38:	08003c12 	stmdaeq	r0, {r1, r4, sl, fp, ip, sp}
     d3c:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
     d40:	08003c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp}
     d44:	08003c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, ip, sp}
	...
     d50:	0800389e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, sp}
     d54:	080038c4 	stmdaeq	r0, {r2, r6, r7, fp, ip, sp}
     d58:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
     d5c:	08003c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, sp}
     d60:	08003c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, ip, sp}
     d64:	08003c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, ip, sp}
     d68:	08003d04 	stmdaeq	r0, {r2, r8, sl, fp, ip, sp}
     d6c:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
     d70:	08003e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp}
     d74:	08003e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, sp}
     d78:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
     d7c:	08003e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, sp}
	...
     d88:	08003d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp, ip, sp}
     d8c:	08003da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip, sp}
     d90:	08003da6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, fp, ip, sp}
     d94:	08003db2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, fp, ip, sp}
	...
     da0:	08003dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp, ip, sp}
     da4:	08003dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, sp}
     da8:	08003dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, ip, sp}
     dac:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
	...
     db8:	080039be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, sp}
     dbc:	08003a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, ip, sp}
     dc0:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
     dc4:	08003c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp}
     dc8:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
     dcc:	08003cfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
     dd0:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
     dd4:	08003e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp}
     dd8:	08003e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, sp}
     ddc:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
	...
     de8:	08003ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, sp}
     dec:	08003b02 	stmdaeq	r0, {r1, r8, r9, fp, ip, sp}
     df0:	08003b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip, sp}
     df4:	08003b36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, fp, ip, sp}
     df8:	08003b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip, sp}
     dfc:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
     e00:	08003bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, sp}
     e04:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
     e08:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
     e0c:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
	...
     e18:	08003b36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, fp, ip, sp}
     e1c:	08003b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip, sp}
     e20:	08003caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, sp}
     e24:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
     e28:	08003cfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
     e2c:	08003d04 	stmdaeq	r0, {r2, r8, sl, fp, ip, sp}
	...
     e38:	08003f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
     e3c:	08003ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
     e40:	08004000 	stmdaeq	r0, {lr}
     e44:	0800403a 	stmdaeq	r0, {r1, r3, r4, r5, lr}
     e48:	08004044 	stmdaeq	r0, {r2, r6, lr}
     e4c:	08004052 	stmdaeq	r0, {r1, r4, r6, lr}
     e50:	080040b0 	stmdaeq	r0, {r4, r5, r7, lr}
     e54:	08004114 	stmdaeq	r0, {r2, r4, r8, lr}
	...
     e60:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
     e64:	080040b0 	stmdaeq	r0, {r4, r5, r7, lr}
     e68:	08004114 	stmdaeq	r0, {r2, r4, r8, lr}
     e6c:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
	...
     e78:	08000c90 	stmdaeq	r0, {r4, r7, sl, fp}
     e7c:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
     e80:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
     e84:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
     e88:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
     e8c:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
     e90:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
     e94:	080010fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, ip}
     e98:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
     e9c:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
     ea0:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
     ea4:	080011ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, ip}
     ea8:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
     eac:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     eb0:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     eb4:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
     eb8:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
     ebc:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
     ec0:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
     ec4:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
     ec8:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
     ecc:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
     ed0:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
     ed4:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
     ed8:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
     edc:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
     ee0:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
     ee4:	080020c4 	stmdaeq	r0, {r2, r6, r7, sp}
     ee8:	080020c4 	stmdaeq	r0, {r2, r6, r7, sp}
     eec:	080021b0 	stmdaeq	r0, {r4, r5, r7, r8, sp}
     ef0:	080021b0 	stmdaeq	r0, {r4, r5, r7, r8, sp}
     ef4:	08002270 	stmdaeq	r0, {r4, r5, r6, r9, sp}
     ef8:	08002270 	stmdaeq	r0, {r4, r5, r6, r9, sp}
     efc:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
     f00:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
     f04:	080023a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sp}
     f08:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
     f0c:	08002422 	stmdaeq	r0, {r1, r5, sl, sp}
     f10:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
     f14:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
     f18:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
     f1c:	080024a0 	stmdaeq	r0, {r5, r7, sl, sp}
     f20:	080024a0 	stmdaeq	r0, {r5, r7, sl, sp}
     f24:	080025bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp}
     f28:	080025bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp}
     f2c:	080026d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp}
     f30:	080026d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp}
     f34:	080027d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp}
     f38:	080027d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp}
     f3c:	080028cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, sp}
     f40:	080028cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, sp}
     f44:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
     f48:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
     f4c:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
     f50:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
     f54:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
     f58:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
     f5c:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
     f60:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
     f64:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
     f68:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
     f6c:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
     f70:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
     f74:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
     f78:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
     f7c:	0800343e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, ip, sp}
     f80:	08003440 	stmdaeq	r0, {r6, sl, ip, sp}
     f84:	08003442 	stmdaeq	r0, {r1, r6, sl, ip, sp}
     f88:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
     f8c:	08003446 	stmdaeq	r0, {r1, r2, r6, sl, ip, sp}
     f90:	08003448 	stmdaeq	r0, {r3, r6, sl, ip, sp}
     f94:	0800344a 	stmdaeq	r0, {r1, r3, r6, sl, ip, sp}
     f98:	0800344c 	stmdaeq	r0, {r2, r3, r6, sl, ip, sp}
     f9c:	0800344e 	stmdaeq	r0, {r1, r2, r3, r6, sl, ip, sp}
     fa0:	08003450 	stmdaeq	r0, {r4, r6, sl, ip, sp}
     fa4:	08003452 	stmdaeq	r0, {r1, r4, r6, sl, ip, sp}
     fa8:	08003454 	stmdaeq	r0, {r2, r4, r6, sl, ip, sp}
     fac:	08003456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip, sp}
     fb0:	08003458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp}
     fb4:	0800345a 	stmdaeq	r0, {r1, r3, r4, r6, sl, ip, sp}
     fb8:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
     fbc:	0800345e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, ip, sp}
     fc0:	08003460 	stmdaeq	r0, {r5, r6, sl, ip, sp}
     fc4:	0800348a 	stmdaeq	r0, {r1, r3, r7, sl, ip, sp}
     fc8:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     fcc:	0800350e 	stmdaeq	r0, {r1, r2, r3, r8, sl, ip, sp}
     fd0:	08003510 	stmdaeq	r0, {r4, r8, sl, ip, sp}
     fd4:	08003512 	stmdaeq	r0, {r1, r4, r8, sl, ip, sp}
     fd8:	08003514 	stmdaeq	r0, {r2, r4, r8, sl, ip, sp}
     fdc:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
     fe0:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
     fe4:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     fe8:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     fec:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
     ff0:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
     ff4:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     ff8:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     ffc:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
    1000:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
    1004:	0800415a 	stmdaeq	r0, {r1, r3, r4, r6, r8, lr}
    1008:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
    100c:	08004162 	stmdaeq	r0, {r1, r5, r6, r8, lr}
    1010:	08004164 	stmdaeq	r0, {r2, r5, r6, r8, lr}
    1014:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
	...
    1020:	080041ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, lr}
    1024:	080041ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, lr}
    1028:	080041f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, lr}
    102c:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
	...
    1038:	08004250 	stmdaeq	r0, {r4, r6, r9, lr}
    103c:	08004264 	stmdaeq	r0, {r2, r5, r6, r9, lr}
    1040:	0800427a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, lr}
    1044:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
	...
    1050:	080042ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, lr}
    1054:	080042ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, lr}
    1058:	080042d0 	stmdaeq	r0, {r4, r6, r7, r9, lr}
    105c:	080042d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, lr}
    1060:	080042d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, lr}
    1064:	080042dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, lr}
    1068:	080042f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, lr}
    106c:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
	...
    1078:	0800435a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, lr}
    107c:	0800435c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, lr}
    1080:	08004366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, lr}
    1084:	0800437e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, lr}
	...
    1090:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
    1094:	080043ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, lr}
    1098:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
    109c:	080043da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, lr}
    10a0:	080043dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, lr}
    10a4:	080043e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, lr}
	...
    10b0:	0800464a 	stmdaeq	r0, {r1, r3, r6, r9, sl, lr}
    10b4:	08004660 	stmdaeq	r0, {r5, r6, r9, sl, lr}
    10b8:	08004678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, lr}
    10bc:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
	...
    10c8:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
    10cc:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
    10d0:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
    10d4:	08004330 	stmdaeq	r0, {r4, r5, r8, r9, lr}
    10d8:	08004330 	stmdaeq	r0, {r4, r5, r8, r9, lr}
    10dc:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
    10e0:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
    10e4:	08004410 	stmdaeq	r0, {r4, sl, lr}
    10e8:	08004410 	stmdaeq	r0, {r4, sl, lr}
    10ec:	0800449e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, lr}
    10f0:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
    10f4:	080044c4 	stmdaeq	r0, {r2, r6, r7, sl, lr}
    10f8:	080044c4 	stmdaeq	r0, {r2, r6, r7, sl, lr}
    10fc:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
    1100:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
    1104:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
    1108:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
    110c:	080048ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, lr}
    1110:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    1114:	0800495e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, lr}
    1118:	08004960 	stmdaeq	r0, {r5, r6, r8, fp, lr}
    111c:	08004966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, lr}
    1120:	08004968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr}
    1124:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
	...
    1130:	08004a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, lr}
    1134:	08004a96 	stmdaeq	r0, {r1, r2, r4, r7, r9, fp, lr}
    1138:	08004a98 	stmdaeq	r0, {r3, r4, r7, r9, fp, lr}
    113c:	08004aae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp, lr}
	...
    1148:	08004b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, lr}
    114c:	08004b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp, lr}
    1150:	08004b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, lr}
    1154:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
	...
    1160:	08004bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp, lr}
    1164:	08004bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, lr}
    1168:	08004be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp, lr}
    116c:	08004be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp, lr}
	...
    1178:	08004be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp, lr}
    117c:	08004bea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, fp, lr}
    1180:	08004bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, lr}
    1184:	08004bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, lr}
	...
    1190:	08004c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, lr}
    1194:	08004c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, lr}
    1198:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
    119c:	08004c9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, fp, lr}
    11a0:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
    11a4:	08004ca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, lr}
    11a8:	08004cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, lr}
    11ac:	08004cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, lr}
	...
    11b8:	08004cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, lr}
    11bc:	08004cda 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, fp, lr}
    11c0:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
    11c4:	08004ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, lr}
    11c8:	08004ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, lr}
    11cc:	08004cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, lr}
    11d0:	08004cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp, lr}
    11d4:	08004cfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, fp, lr}
	...
    11e0:	08004d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, lr}
    11e4:	08004d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, lr}
    11e8:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    11ec:	08004da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, lr}
    11f0:	08004da6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, fp, lr}
    11f4:	08004daa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, fp, lr}
	...
    1200:	08004d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, lr}
    1204:	08004d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, lr}
    1208:	08004d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, lr}
    120c:	08004d66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp, lr}
	...
    1218:	08004d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, lr}
    121c:	08004d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, lr}
    1220:	08004d92 	stmdaeq	r0, {r1, r4, r7, r8, sl, fp, lr}
    1224:	08004d96 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, fp, lr}
	...
    1230:	08004e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, lr}
    1234:	08004e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, lr}
    1238:	08004e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, lr}
    123c:	08004ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, lr}
	...
    1248:	08004f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, lr}
    124c:	08004f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, lr}
    1250:	08004f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, lr}
    1254:	08004f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, lr}
	...
    1260:	08004f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, lr}
    1264:	08004f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}
    1268:	08004f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, lr}
    126c:	08004f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, lr}
	...
    1278:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
    127c:	0800496e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp, lr}
    1280:	08004970 	stmdaeq	r0, {r4, r5, r6, r8, fp, lr}
    1284:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    1288:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    128c:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
    1290:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
    1294:	08004d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, lr}
    1298:	08004d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, lr}
    129c:	08004d40 	stmdaeq	r0, {r6, r8, sl, fp, lr}
    12a0:	08004d40 	stmdaeq	r0, {r6, r8, sl, fp, lr}
    12a4:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    12a8:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    12ac:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
    12b0:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
    12b4:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    12b8:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    12bc:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    12c0:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    12c4:	08004f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, lr}
    12c8:	08004f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, lr}
    12cc:	0800506c 	stmdaeq	r0, {r2, r3, r5, r6, ip, lr}
    12d0:	0800506c 	stmdaeq	r0, {r2, r3, r5, r6, ip, lr}
    12d4:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    12d8:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    12dc:	080050b2 	stmdaeq	r0, {r1, r4, r5, r7, ip, lr}
    12e0:	080050b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, lr}
    12e4:	080050d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, lr}
	...
    12f0:	080051ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, ip, lr}
    12f4:	080051f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip, lr}
    12f8:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
    12fc:	08005204 	stmdaeq	r0, {r2, r9, ip, lr}
    1300:	08005206 	stmdaeq	r0, {r1, r2, r9, ip, lr}
    1304:	08005208 	stmdaeq	r0, {r3, r9, ip, lr}
	...
    1310:	08005398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, lr}
    1314:	0800539a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, ip, lr}
    1318:	0800539c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip, lr}
    131c:	080053b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, ip, lr}
	...
    1328:	080050d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, lr}
    132c:	08005118 	stmdaeq	r0, {r3, r4, r8, ip, lr}
    1330:	08005118 	stmdaeq	r0, {r3, r4, r8, ip, lr}
    1334:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
    1338:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
    133c:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    1340:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    1344:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    1348:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    134c:	080051a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, lr}
    1350:	080051a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, lr}
    1354:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    1358:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    135c:	080052f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, lr}
    1360:	080052f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, lr}
    1364:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
    1368:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
    136c:	0800542c 	stmdaeq	r0, {r2, r3, r5, sl, ip, lr}
	...
    1378:	080055f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, ip, lr}
    137c:	08005602 	stmdaeq	r0, {r1, r9, sl, ip, lr}
    1380:	0800568e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, ip, lr}
    1384:	080056d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, ip, lr}
    1388:	0800580a 	stmdaeq	r0, {r1, r3, fp, ip, lr}
    138c:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
	...
    1398:	080056a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip, lr}
    139c:	080056d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, ip, lr}
    13a0:	0800580a 	stmdaeq	r0, {r1, r3, fp, ip, lr}
    13a4:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
	...
    13b0:	08005602 	stmdaeq	r0, {r1, r9, sl, ip, lr}
    13b4:	08005608 	stmdaeq	r0, {r3, r9, sl, ip, lr}
    13b8:	080057aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip, lr}
    13bc:	080057f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    13c0:	080057f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    13c4:	080057fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    13c8:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
    13cc:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
	...
    13d8:	08005602 	stmdaeq	r0, {r1, r9, sl, ip, lr}
    13dc:	08005608 	stmdaeq	r0, {r3, r9, sl, ip, lr}
    13e0:	080057aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip, lr}
    13e4:	080057f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    13e8:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
    13ec:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
	...
    13f8:	080057c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip, lr}
    13fc:	080057f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    1400:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
    1404:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
	...
    1410:	080059e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, lr}
    1414:	080059ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, lr}
    1418:	08005a42 	stmdaeq	r0, {r1, r6, r9, fp, ip, lr}
    141c:	08005a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, lr}
    1420:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    1424:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
	...
    1430:	08005a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, ip, lr}
    1434:	08005a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, lr}
    1438:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    143c:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
	...
    1448:	080059ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, lr}
    144c:	080059f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, lr}
    1450:	08005b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip, lr}
    1454:	08005b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip, lr}
    1458:	08005b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, ip, lr}
    145c:	08005b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, ip, lr}
    1460:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
    1464:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
	...
    1470:	080059ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, lr}
    1474:	080059f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, lr}
    1478:	08005b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip, lr}
    147c:	08005b82 	stmdaeq	r0, {r1, r7, r8, r9, fp, ip, lr}
    1480:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
    1484:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
	...
    1490:	08005b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp, ip, lr}
    1494:	08005b82 	stmdaeq	r0, {r1, r7, r8, r9, fp, ip, lr}
    1498:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
    149c:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
	...
    14a8:	08005a12 	stmdaeq	r0, {r1, r4, r9, fp, ip, lr}
    14ac:	08005a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, lr}
    14b0:	08005b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, lr}
    14b4:	08005be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, lr}
    14b8:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
    14bc:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
	...
    14c8:	08005bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, lr}
    14cc:	08005be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, lr}
    14d0:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
    14d4:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
	...
    14e0:	08005e3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, fp, ip, lr}
    14e4:	08005e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, lr}
    14e8:	08005ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, ip, lr}
    14ec:	08005ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip, lr}
    14f0:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    14f4:	08005f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, lr}
	...
    1500:	08005e52 	stmdaeq	r0, {r1, r4, r6, r9, sl, fp, ip, lr}
    1504:	08005e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, lr}
    1508:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    150c:	08005f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, lr}
	...
    1518:	08005eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, ip, lr}
    151c:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    1520:	08005ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    1524:	08005f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    1528:	08005f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, lr}
    152c:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
	...
    1538:	08005f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, ip, lr}
    153c:	08005f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    1540:	08005f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, lr}
    1544:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
	...
    1550:	08006088 	stmdaeq	r0, {r3, r7, sp, lr}
    1554:	0800608a 	stmdaeq	r0, {r1, r3, r7, sp, lr}
    1558:	0800608e 	stmdaeq	r0, {r1, r2, r3, r7, sp, lr}
    155c:	08006092 	stmdaeq	r0, {r1, r4, r7, sp, lr}
    1560:	08006094 	stmdaeq	r0, {r2, r4, r7, sp, lr}
    1564:	08006096 	stmdaeq	r0, {r1, r2, r4, r7, sp, lr}
    1568:	0800609a 	stmdaeq	r0, {r1, r3, r4, r7, sp, lr}
    156c:	08006114 	stmdaeq	r0, {r2, r4, r8, sp, lr}
    1570:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
    1574:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
	...
    1580:	0800609c 	stmdaeq	r0, {r2, r3, r4, r7, sp, lr}
    1584:	08006114 	stmdaeq	r0, {r2, r4, r8, sp, lr}
    1588:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
    158c:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
	...
    1598:	080061cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp, lr}
    159c:	080061ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sp, lr}
    15a0:	080061f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sp, lr}
    15a4:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
	...
    15b0:	08006394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp, lr}
    15b4:	0800639c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sp, lr}
    15b8:	0800639e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sp, lr}
    15bc:	080063a0 	stmdaeq	r0, {r5, r7, r8, r9, sp, lr}
    15c0:	080063a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp, lr}
    15c4:	08006462 	stmdaeq	r0, {r1, r5, r6, sl, sp, lr}
    15c8:	080064f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp, lr}
    15cc:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
	...
    15d8:	080063a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sp, lr}
    15dc:	08006462 	stmdaeq	r0, {r1, r5, r6, sl, sp, lr}
    15e0:	080064f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp, lr}
    15e4:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
	...
    15f0:	08006530 	stmdaeq	r0, {r4, r5, r8, sl, sp, lr}
    15f4:	08006552 	stmdaeq	r0, {r1, r4, r6, r8, sl, sp, lr}
    15f8:	08006556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, sp, lr}
    15fc:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
	...
    1608:	0800672c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, sp, lr}
    160c:	08006734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, sp, lr}
    1610:	08006756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, sp, lr}
    1614:	0800679c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp, lr}
    1618:	0800679e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, sp, lr}
    161c:	080067a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp, lr}
    1620:	080067a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, sp, lr}
    1624:	080067ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp, lr}
    1628:	080067b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
    162c:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
	...
    1638:	0800672c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, sp, lr}
    163c:	08006734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, sp, lr}
    1640:	08006756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, sp, lr}
    1644:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    1648:	0800679e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, sp, lr}
    164c:	080067a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp, lr}
    1650:	080067a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, sp, lr}
    1654:	080067ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp, lr}
    1658:	080067b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
    165c:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
	...
    1668:	0800675e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}
    166c:	08006760 	stmdaeq	r0, {r5, r6, r8, r9, sl, sp, lr}
    1670:	08006762 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, sp, lr}
    1674:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    1678:	0800679e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, sp, lr}
    167c:	080067a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp, lr}
    1680:	080067a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, sp, lr}
    1684:	080067ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp, lr}
    1688:	080067b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
    168c:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
	...
    1698:	08006866 	stmdaeq	r0, {r1, r2, r5, r6, fp, sp, lr}
    169c:	08006898 	stmdaeq	r0, {r3, r4, r7, fp, sp, lr}
    16a0:	0800689e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, sp, lr}
    16a4:	080068a2 	stmdaeq	r0, {r1, r5, r7, fp, sp, lr}
    16a8:	080068ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, sp, lr}
    16ac:	080068e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp, sp, lr}
    16b0:	080068ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, sp, lr}
    16b4:	080068fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, sp, lr}
	...
    16c0:	0800686e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, sp, lr}
    16c4:	08006898 	stmdaeq	r0, {r3, r4, r7, fp, sp, lr}
    16c8:	080068ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, sp, lr}
    16cc:	080068e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp, sp, lr}
    16d0:	080068ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, sp, lr}
    16d4:	080068fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, sp, lr}
	...
    16e0:	08006950 	stmdaeq	r0, {r4, r6, r8, fp, sp, lr}
    16e4:	08006958 	stmdaeq	r0, {r3, r4, r6, r8, fp, sp, lr}
    16e8:	0800698c 	stmdaeq	r0, {r2, r3, r7, r8, fp, sp, lr}
    16ec:	080069d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, sp, lr}
    16f0:	080069d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp, lr}
    16f4:	080069d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, sp, lr}
    16f8:	080069dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, sp, lr}
    16fc:	080069e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp, lr}
    1700:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
    1704:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
	...
    1710:	08006950 	stmdaeq	r0, {r4, r6, r8, fp, sp, lr}
    1714:	08006958 	stmdaeq	r0, {r3, r4, r6, r8, fp, sp, lr}
    1718:	0800698c 	stmdaeq	r0, {r2, r3, r7, r8, fp, sp, lr}
    171c:	080069ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, sp, lr}
    1720:	080069d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp, lr}
    1724:	080069d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, sp, lr}
    1728:	080069dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, sp, lr}
    172c:	080069e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp, lr}
    1730:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
    1734:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
	...
    1740:	08006994 	stmdaeq	r0, {r2, r4, r7, r8, fp, sp, lr}
    1744:	08006996 	stmdaeq	r0, {r1, r2, r4, r7, r8, fp, sp, lr}
    1748:	08006998 	stmdaeq	r0, {r3, r4, r7, r8, fp, sp, lr}
    174c:	080069ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, sp, lr}
    1750:	080069d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp, lr}
    1754:	080069d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, sp, lr}
    1758:	080069dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, sp, lr}
    175c:	080069e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp, lr}
    1760:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
    1764:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
	...
    1770:	08006a7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, fp, sp, lr}
    1774:	08006a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, sp, lr}
    1778:	08006a80 	stmdaeq	r0, {r7, r9, fp, sp, lr}
    177c:	08006a90 	stmdaeq	r0, {r4, r7, r9, fp, sp, lr}
	...
    1788:	08006ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, sp, lr}
    178c:	08006ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, sp, lr}
    1790:	08006ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, sp, lr}
    1794:	08006ad6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, fp, sp, lr}
	...
    17a0:	08006c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, sp, lr}
    17a4:	08006c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, sp, lr}
    17a8:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
    17ac:	08006ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, sp, lr}
    17b0:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
    17b4:	08006ca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, sp, lr}
    17b8:	08006cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, sp, lr}
    17bc:	08006cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, sp, lr}
    17c0:	08006cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp, lr}
    17c4:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
	...
    17d0:	08006c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, sp, lr}
    17d4:	08006c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, sp, lr}
    17d8:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
    17dc:	08006c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, sp, lr}
    17e0:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
    17e4:	08006ca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, sp, lr}
    17e8:	08006cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, sp, lr}
    17ec:	08006cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, sp, lr}
    17f0:	08006cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp, lr}
    17f4:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
	...
    1800:	08006c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, sp, lr}
    1804:	08006c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp, sp, lr}
    1808:	08006c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, sp, lr}
    180c:	08006c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, sp, lr}
    1810:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
    1814:	08006ca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, sp, lr}
    1818:	08006cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, sp, lr}
    181c:	08006cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, sp, lr}
    1820:	08006cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp, lr}
    1824:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
	...
    1830:	08006d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, sp, lr}
    1834:	08006d40 	stmdaeq	r0, {r6, r8, sl, fp, sp, lr}
    1838:	08006d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, sp, lr}
    183c:	08006db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp, sp, lr}
    1840:	08006db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, sp, lr}
    1844:	08006dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp, sp, lr}
    1848:	08006dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, sp, lr}
    184c:	08006dde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp, lr}
	...
    1858:	08006d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, sp, lr}
    185c:	08006db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp, sp, lr}
    1860:	08006db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, sp, lr}
    1864:	08006dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp, sp, lr}
    1868:	08006dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, sp, lr}
    186c:	08006dde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp, lr}
	...
    1878:	08006e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp, lr}
    187c:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
    1880:	08006e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp, lr}
    1884:	08006e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, sp, lr}
    1888:	08006e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, sp, lr}
    188c:	08006e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp, lr}
    1890:	08006e92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp, sp, lr}
    1894:	08006e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, sp, lr}
    1898:	08006eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, sp, lr}
    189c:	08006ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
	...
    18a8:	08006e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp, lr}
    18ac:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
    18b0:	08006e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp, lr}
    18b4:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
    18b8:	08006e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, sp, lr}
    18bc:	08006e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp, lr}
    18c0:	08006e92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp, sp, lr}
    18c4:	08006e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, sp, lr}
    18c8:	08006eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, sp, lr}
    18cc:	08006ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
	...
    18d8:	08006e5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}
    18dc:	08006e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, sp, lr}
    18e0:	08006e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp, sp, lr}
    18e4:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
    18e8:	08006e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, sp, lr}
    18ec:	08006e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp, lr}
    18f0:	08006e92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp, sp, lr}
    18f4:	08006e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, sp, lr}
    18f8:	08006eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, sp, lr}
    18fc:	08006ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
	...
    1908:	08006e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, sp, lr}
    190c:	08006e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, sp, lr}
    1910:	08006ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
    1914:	08006f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, sp, lr}
    1918:	08006f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, sp, lr}
    191c:	08006f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, sp, lr}
    1920:	08006f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, sp, lr}
    1924:	08006f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
	...
    1930:	08006ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
    1934:	08006f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, sp, lr}
    1938:	08006f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, sp, lr}
    193c:	08006f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, sp, lr}
    1940:	08006f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, sp, lr}
    1944:	08006f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
	...
    1950:	08006f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1954:	08006f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1958:	08006f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
    195c:	08006f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp, lr}
	...
    1968:	08006f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, sp, lr}
    196c:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
    1970:	08006f8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, fp, sp, lr}
    1974:	08006f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}
	...
    1980:	08006fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp, lr}
    1984:	08006fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp, sp, lr}
    1988:	08006fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, sp, lr}
    198c:	08006fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr}
	...
    1998:	0800703a 	stmdaeq	r0, {r1, r3, r4, r5, ip, sp, lr}
    199c:	0800703c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp, lr}
    19a0:	0800704e 	stmdaeq	r0, {r1, r2, r3, r6, ip, sp, lr}
    19a4:	08007080 	stmdaeq	r0, {r7, ip, sp, lr}
    19a8:	08007086 	stmdaeq	r0, {r1, r2, r7, ip, sp, lr}
    19ac:	0800708a 	stmdaeq	r0, {r1, r3, r7, ip, sp, lr}
    19b0:	08007090 	stmdaeq	r0, {r4, r7, ip, sp, lr}
    19b4:	080070b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp, lr}
	...
    19c0:	080070c6 	stmdaeq	r0, {r1, r2, r6, r7, ip, sp, lr}
    19c4:	080070c8 	stmdaeq	r0, {r3, r6, r7, ip, sp, lr}
    19c8:	080070e2 	stmdaeq	r0, {r1, r5, r6, r7, ip, sp, lr}
    19cc:	08007114 	stmdaeq	r0, {r2, r4, r8, ip, sp, lr}
    19d0:	0800711a 	stmdaeq	r0, {r1, r3, r4, r8, ip, sp, lr}
    19d4:	0800711e 	stmdaeq	r0, {r1, r2, r3, r4, r8, ip, sp, lr}
    19d8:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    19dc:	0800714c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp, lr}
	...
    19e8:	0800717a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    19ec:	080071ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp, lr}
    19f0:	080071b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip, sp, lr}
    19f4:	080071b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, ip, sp, lr}
    19f8:	080071ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, ip, sp, lr}
    19fc:	080071fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, ip, sp, lr}
    1a00:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    1a04:	08007214 	stmdaeq	r0, {r2, r4, r9, ip, sp, lr}
	...
    1a10:	08007182 	stmdaeq	r0, {r1, r7, r8, ip, sp, lr}
    1a14:	080071ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp, lr}
    1a18:	080071ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, ip, sp, lr}
    1a1c:	080071fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, ip, sp, lr}
    1a20:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    1a24:	08007214 	stmdaeq	r0, {r2, r4, r9, ip, sp, lr}
	...
    1a30:	0800542c 	stmdaeq	r0, {r2, r3, r5, sl, ip, lr}
    1a34:	0800542e 	stmdaeq	r0, {r1, r2, r3, r5, sl, ip, lr}
    1a38:	08005430 	stmdaeq	r0, {r4, r5, sl, ip, lr}
    1a3c:	080054e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, lr}
    1a40:	080054e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, lr}
    1a44:	080054e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, lr}
    1a48:	080054e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, lr}
    1a4c:	08005514 	stmdaeq	r0, {r2, r4, r8, sl, ip, lr}
    1a50:	08005514 	stmdaeq	r0, {r2, r4, r8, sl, ip, lr}
    1a54:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
    1a58:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
    1a5c:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
    1a60:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
    1a64:	08005f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, lr}
    1a68:	08005f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
    1a6c:	08006054 	stmdaeq	r0, {r2, r4, r6, sp, lr}
    1a70:	08006054 	stmdaeq	r0, {r2, r4, r6, sp, lr}
    1a74:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    1a78:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    1a7c:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    1a80:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    1a84:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
    1a88:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
    1a8c:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
    1a90:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
    1a94:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
    1a98:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
    1a9c:	0800665a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp, lr}
    1aa0:	0800665c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp, lr}
    1aa4:	0800667e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, sp, lr}
    1aa8:	08006680 	stmdaeq	r0, {r7, r9, sl, sp, lr}
    1aac:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
    1ab0:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
    1ab4:	080066aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, sp, lr}
    1ab8:	080066ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, sp, lr}
    1abc:	080066ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, sp, lr}
    1ac0:	080066b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, sp, lr}
    1ac4:	080066b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, sp, lr}
    1ac8:	080066b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp, lr}
    1acc:	080066b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, sp, lr}
    1ad0:	080066b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, sp, lr}
    1ad4:	080066c2 	stmdaeq	r0, {r1, r6, r7, r9, sl, sp, lr}
    1ad8:	080066c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, sp, lr}
    1adc:	080066c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, sp, lr}
    1ae0:	080066c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, sp, lr}
    1ae4:	080066d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, sp, lr}
    1ae8:	080066d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp, lr}
    1aec:	080066d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, sp, lr}
    1af0:	080066d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, sp, lr}
    1af4:	080066e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, sp, lr}
    1af8:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
    1afc:	080066e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp, lr}
    1b00:	080066e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, lr}
    1b04:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
    1b08:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
    1b0c:	0800680a 	stmdaeq	r0, {r1, r3, fp, sp, lr}
    1b10:	0800680c 	stmdaeq	r0, {r2, r3, fp, sp, lr}
    1b14:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    1b18:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    1b1c:	0800690c 	stmdaeq	r0, {r2, r3, r8, fp, sp, lr}
    1b20:	0800690c 	stmdaeq	r0, {r2, r3, r8, fp, sp, lr}
    1b24:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
    1b28:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
    1b2c:	08006a92 	stmdaeq	r0, {r1, r4, r7, r9, fp, sp, lr}
    1b30:	08006a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, sp, lr}
    1b34:	08006ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp, lr}
    1b38:	08006ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp, lr}
    1b3c:	08006b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, sp, lr}
    1b40:	08006b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, sp, lr}
    1b44:	08006b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp, sp, lr}
    1b48:	08006b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
    1b4c:	08006bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
    1b50:	08006bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
    1b54:	08006be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp, sp, lr}
    1b58:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
    1b5c:	08006c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp, lr}
    1b60:	08006c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp, lr}
    1b64:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    1b68:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
    1b6c:	08006dde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp, lr}
    1b70:	08006de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp, lr}
    1b74:	08006f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
    1b78:	08006f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
    1b7c:	08007020 	stmdaeq	r0, {r5, ip, sp, lr}
    1b80:	08007020 	stmdaeq	r0, {r5, ip, sp, lr}
    1b84:	08007032 	stmdaeq	r0, {r1, r4, r5, ip, sp, lr}
    1b88:	08007034 	stmdaeq	r0, {r2, r4, r5, ip, sp, lr}
    1b8c:	080070be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip, sp, lr}
    1b90:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
    1b94:	08007152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp, lr}
    1b98:	08007154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp, lr}
    1b9c:	08007224 	stmdaeq	r0, {r2, r5, r9, ip, sp, lr}
    1ba0:	08007224 	stmdaeq	r0, {r2, r5, r9, ip, sp, lr}
    1ba4:	0800722a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp, lr}
    1ba8:	0800722c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp, lr}
    1bac:	08007230 	stmdaeq	r0, {r4, r5, r9, ip, sp, lr}
	...
    1bb8:	08007244 	stmdaeq	r0, {r2, r6, r9, ip, sp, lr}
    1bbc:	08007248 	stmdaeq	r0, {r3, r6, r9, ip, sp, lr}
    1bc0:	0800724c 	stmdaeq	r0, {r2, r3, r6, r9, ip, sp, lr}
    1bc4:	0800724e 	stmdaeq	r0, {r1, r2, r3, r6, r9, ip, sp, lr}
    1bc8:	08007250 	stmdaeq	r0, {r4, r6, r9, ip, sp, lr}
    1bcc:	08007258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp, lr}
    1bd0:	0800725a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp, lr}
    1bd4:	08007266 	stmdaeq	r0, {r1, r2, r5, r6, r9, ip, sp, lr}
    1bd8:	08007268 	stmdaeq	r0, {r3, r5, r6, r9, ip, sp, lr}
    1bdc:	08007272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip, sp, lr}
    1be0:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    1be4:	0800727a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, sp, lr}
    1be8:	0800727e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip, sp, lr}
    1bec:	08007280 	stmdaeq	r0, {r7, r9, ip, sp, lr}
    1bf0:	0800728c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp, lr}
    1bf4:	08007296 	stmdaeq	r0, {r1, r2, r4, r7, r9, ip, sp, lr}
    1bf8:	080072a0 	stmdaeq	r0, {r5, r7, r9, ip, sp, lr}
    1bfc:	080072a2 	stmdaeq	r0, {r1, r5, r7, r9, ip, sp, lr}
    1c00:	080072ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, ip, sp, lr}
    1c04:	080072bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp, lr}
	...
    1c10:	08007244 	stmdaeq	r0, {r2, r6, r9, ip, sp, lr}
    1c14:	08007248 	stmdaeq	r0, {r3, r6, r9, ip, sp, lr}
    1c18:	0800724c 	stmdaeq	r0, {r2, r3, r6, r9, ip, sp, lr}
    1c1c:	0800724e 	stmdaeq	r0, {r1, r2, r3, r6, r9, ip, sp, lr}
    1c20:	08007250 	stmdaeq	r0, {r4, r6, r9, ip, sp, lr}
    1c24:	08007258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp, lr}
    1c28:	0800725a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp, lr}
    1c2c:	08007262 	stmdaeq	r0, {r1, r5, r6, r9, ip, sp, lr}
	...
    1c38:	08007262 	stmdaeq	r0, {r1, r5, r6, r9, ip, sp, lr}
    1c3c:	08007266 	stmdaeq	r0, {r1, r2, r5, r6, r9, ip, sp, lr}
    1c40:	08007268 	stmdaeq	r0, {r3, r5, r6, r9, ip, sp, lr}
    1c44:	08007270 	stmdaeq	r0, {r4, r5, r6, r9, ip, sp, lr}
    1c48:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    1c4c:	0800727a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, sp, lr}
    1c50:	080072a0 	stmdaeq	r0, {r5, r7, r9, ip, sp, lr}
    1c54:	080072a2 	stmdaeq	r0, {r1, r5, r7, r9, ip, sp, lr}
	...
    1c60:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
    1c64:	08007448 	stmdaeq	r0, {r3, r6, sl, ip, sp, lr}
    1c68:	0800744c 	stmdaeq	r0, {r2, r3, r6, sl, ip, sp, lr}
    1c6c:	0800744e 	stmdaeq	r0, {r1, r2, r3, r6, sl, ip, sp, lr}
    1c70:	08007450 	stmdaeq	r0, {r4, r6, sl, ip, sp, lr}
    1c74:	08007458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp, lr}
    1c78:	0800745a 	stmdaeq	r0, {r1, r3, r4, r6, sl, ip, sp, lr}
    1c7c:	08007460 	stmdaeq	r0, {r5, r6, sl, ip, sp, lr}
    1c80:	08007468 	stmdaeq	r0, {r3, r5, r6, sl, ip, sp, lr}
    1c84:	0800746a 	stmdaeq	r0, {r1, r3, r5, r6, sl, ip, sp, lr}
	...
    1c90:	08007474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, sp, lr}
    1c94:	08007478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, sp, lr}
    1c98:	0800747a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, ip, sp, lr}
    1c9c:	08007482 	stmdaeq	r0, {r1, r7, sl, ip, sp, lr}
    1ca0:	08007484 	stmdaeq	r0, {r2, r7, sl, ip, sp, lr}
    1ca4:	0800748a 	stmdaeq	r0, {r1, r3, r7, sl, ip, sp, lr}
    1ca8:	08007490 	stmdaeq	r0, {r4, r7, sl, ip, sp, lr}
    1cac:	08007492 	stmdaeq	r0, {r1, r4, r7, sl, ip, sp, lr}
	...
    1cb8:	0800749c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, sp, lr}
    1cbc:	080074a0 	stmdaeq	r0, {r5, r7, sl, ip, sp, lr}
    1cc0:	080074a2 	stmdaeq	r0, {r1, r5, r7, sl, ip, sp, lr}
    1cc4:	080074aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip, sp, lr}
    1cc8:	080074ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip, sp, lr}
    1ccc:	080074b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp, lr}
    1cd0:	080074b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip, sp, lr}
    1cd4:	080074b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, sp, lr}
	...
    1ce0:	08007566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, sp, lr}
    1ce4:	08007568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, sp, lr}
    1ce8:	0800756c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp, lr}
    1cec:	08007582 	stmdaeq	r0, {r1, r7, r8, sl, ip, sp, lr}
	...
    1cf8:	080075ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, sp, lr}
    1cfc:	080075ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, ip, sp, lr}
    1d00:	080075c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, sp, lr}
    1d04:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
	...
    1d10:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
    1d14:	080075f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip, sp, lr}
    1d18:	080075f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, ip, sp, lr}
    1d1c:	080075f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
	...
    1d28:	0800762c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, sp, lr}
    1d2c:	0800762e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, ip, sp, lr}
    1d30:	08007630 	stmdaeq	r0, {r4, r5, r9, sl, ip, sp, lr}
    1d34:	080076fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, sp, lr}
	...
    1d40:	0800763c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, sp, lr}
    1d44:	08007640 	stmdaeq	r0, {r6, r9, sl, ip, sp, lr}
    1d48:	08007644 	stmdaeq	r0, {r2, r6, r9, sl, ip, sp, lr}
    1d4c:	08007646 	stmdaeq	r0, {r1, r2, r6, r9, sl, ip, sp, lr}
    1d50:	08007648 	stmdaeq	r0, {r3, r6, r9, sl, ip, sp, lr}
    1d54:	08007650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp, lr}
    1d58:	08007652 	stmdaeq	r0, {r1, r4, r6, r9, sl, ip, sp, lr}
    1d5c:	0800765e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, ip, sp, lr}
    1d60:	08007660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp, lr}
    1d64:	08007668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp, lr}
    1d68:	0800766a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, ip, sp, lr}
    1d6c:	0800766c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, sp, lr}
    1d70:	0800766e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, ip, sp, lr}
    1d74:	08007680 	stmdaeq	r0, {r7, r9, sl, ip, sp, lr}
    1d78:	08007684 	stmdaeq	r0, {r2, r7, r9, sl, ip, sp, lr}
    1d7c:	08007690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp, lr}
    1d80:	08007696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, ip, sp, lr}
    1d84:	0800769c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp, lr}
    1d88:	080076a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp, lr}
    1d8c:	080076f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip, sp, lr}
	...
    1d98:	0800763c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, sp, lr}
    1d9c:	08007640 	stmdaeq	r0, {r6, r9, sl, ip, sp, lr}
    1da0:	08007644 	stmdaeq	r0, {r2, r6, r9, sl, ip, sp, lr}
    1da4:	08007646 	stmdaeq	r0, {r1, r2, r6, r9, sl, ip, sp, lr}
    1da8:	08007648 	stmdaeq	r0, {r3, r6, r9, sl, ip, sp, lr}
    1dac:	08007650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp, lr}
    1db0:	08007652 	stmdaeq	r0, {r1, r4, r6, r9, sl, ip, sp, lr}
    1db4:	0800765a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip, sp, lr}
	...
    1dc0:	0800765a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip, sp, lr}
    1dc4:	0800765e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, ip, sp, lr}
    1dc8:	08007660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp, lr}
    1dcc:	08007668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp, lr}
    1dd0:	0800766e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, ip, sp, lr}
    1dd4:	08007672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, sp, lr}
    1dd8:	0800767a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, ip, sp, lr}
    1ddc:	0800767c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp, lr}
    1de0:	08007696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, ip, sp, lr}
    1de4:	0800769a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, ip, sp, lr}
	...
    1df0:	08007720 	stmdaeq	r0, {r5, r8, r9, sl, ip, sp, lr}
    1df4:	08007728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp, lr}
    1df8:	0800772c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp, lr}
    1dfc:	08007734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, sp, lr}
    1e00:	08007736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip, sp, lr}
    1e04:	0800773c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp, lr}
    1e08:	08007748 	stmdaeq	r0, {r3, r6, r8, r9, sl, ip, sp, lr}
    1e0c:	0800774a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, ip, sp, lr}
	...
    1e18:	08007778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
    1e1c:	08007796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, ip, sp, lr}
    1e20:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
    1e24:	08007870 	stmdaeq	r0, {r4, r5, r6, fp, ip, sp, lr}
	...
    1e30:	080077ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, ip, sp, lr}
    1e34:	080077b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e38:	080077b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e3c:	080077b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e40:	080077ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e44:	080077c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, ip, sp, lr}
    1e48:	080077c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip, sp, lr}
    1e4c:	080077d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1e50:	080077d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1e54:	080077da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1e58:	080077dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1e5c:	080077de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1e60:	080077e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, sp, lr}
    1e64:	080077f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    1e68:	080077f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    1e6c:	08007802 	stmdaeq	r0, {r1, fp, ip, sp, lr}
    1e70:	08007808 	stmdaeq	r0, {r3, fp, ip, sp, lr}
    1e74:	0800780e 	stmdaeq	r0, {r1, r2, r3, fp, ip, sp, lr}
    1e78:	08007812 	stmdaeq	r0, {r1, r4, fp, ip, sp, lr}
    1e7c:	0800786a 	stmdaeq	r0, {r1, r3, r5, r6, fp, ip, sp, lr}
	...
    1e88:	080077ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, ip, sp, lr}
    1e8c:	080077b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e90:	080077b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e94:	080077b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e98:	080077ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    1e9c:	080077c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, ip, sp, lr}
    1ea0:	080077c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip, sp, lr}
    1ea4:	080077cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}
	...
    1eb0:	080077cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}
    1eb4:	080077d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1eb8:	080077d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1ebc:	080077da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip, sp, lr}
    1ec0:	080077e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, sp, lr}
    1ec4:	080077e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    1ec8:	080077ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    1ecc:	080077ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    1ed0:	08007808 	stmdaeq	r0, {r3, fp, ip, sp, lr}
    1ed4:	0800780c 	stmdaeq	r0, {r2, r3, fp, ip, sp, lr}
	...
    1ee0:	0800789a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, sp, lr}
    1ee4:	080078bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, sp, lr}
    1ee8:	080078c6 	stmdaeq	r0, {r1, r2, r6, r7, fp, ip, sp, lr}
    1eec:	0800799a 	stmdaeq	r0, {r1, r3, r4, r7, r8, fp, ip, sp, lr}
	...
    1ef8:	080078d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp, lr}
    1efc:	080078dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, sp, lr}
    1f00:	080078e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, sp, lr}
    1f04:	080078e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip, sp, lr}
    1f08:	080078e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp, lr}
    1f0c:	080078ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, sp, lr}
    1f10:	080078ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip, sp, lr}
    1f14:	080078fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, sp, lr}
    1f18:	080078fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}
    1f1c:	08007904 	stmdaeq	r0, {r2, r8, fp, ip, sp, lr}
    1f20:	08007906 	stmdaeq	r0, {r1, r2, r8, fp, ip, sp, lr}
    1f24:	08007908 	stmdaeq	r0, {r3, r8, fp, ip, sp, lr}
    1f28:	0800790a 	stmdaeq	r0, {r1, r3, r8, fp, ip, sp, lr}
    1f2c:	0800791c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, sp, lr}
    1f30:	08007920 	stmdaeq	r0, {r5, r8, fp, ip, sp, lr}
    1f34:	0800792c 	stmdaeq	r0, {r2, r3, r5, r8, fp, ip, sp, lr}
    1f38:	08007932 	stmdaeq	r0, {r1, r4, r5, r8, fp, ip, sp, lr}
    1f3c:	08007938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp, lr}
    1f40:	0800793c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, sp, lr}
    1f44:	08007994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp, lr}
	...
    1f50:	080078d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp, lr}
    1f54:	080078dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, sp, lr}
    1f58:	080078e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, sp, lr}
    1f5c:	080078e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip, sp, lr}
    1f60:	080078e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp, lr}
    1f64:	080078ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, sp, lr}
    1f68:	080078ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip, sp, lr}
    1f6c:	080078f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, ip, sp, lr}
	...
    1f78:	080078f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, ip, sp, lr}
    1f7c:	080078fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, sp, lr}
    1f80:	080078fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}
    1f84:	08007904 	stmdaeq	r0, {r2, r8, fp, ip, sp, lr}
    1f88:	0800790a 	stmdaeq	r0, {r1, r3, r8, fp, ip, sp, lr}
    1f8c:	0800790e 	stmdaeq	r0, {r1, r2, r3, r8, fp, ip, sp, lr}
    1f90:	08007916 	stmdaeq	r0, {r1, r2, r4, r8, fp, ip, sp, lr}
    1f94:	08007918 	stmdaeq	r0, {r3, r4, r8, fp, ip, sp, lr}
    1f98:	08007932 	stmdaeq	r0, {r1, r4, r5, r8, fp, ip, sp, lr}
    1f9c:	08007936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, ip, sp, lr}
	...
    1fa8:	080079c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, ip, sp, lr}
    1fac:	080079ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, ip, sp, lr}
    1fb0:	080079cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, ip, sp, lr}
    1fb4:	080079e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, sp, lr}
    1fb8:	080079e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, sp, lr}
    1fbc:	08007aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, ip, sp, lr}
	...
    1fc8:	080079f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp, lr}
    1fcc:	080079fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, sp, lr}
    1fd0:	08007a00 	stmdaeq	r0, {r9, fp, ip, sp, lr}
    1fd4:	08007a02 	stmdaeq	r0, {r1, r9, fp, ip, sp, lr}
    1fd8:	08007a04 	stmdaeq	r0, {r2, r9, fp, ip, sp, lr}
    1fdc:	08007a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp, lr}
    1fe0:	08007a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, sp, lr}
    1fe4:	08007a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, ip, sp, lr}
    1fe8:	08007a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, ip, sp, lr}
    1fec:	08007a24 	stmdaeq	r0, {r2, r5, r9, fp, ip, sp, lr}
    1ff0:	08007a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip, sp, lr}
    1ff4:	08007a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, sp, lr}
    1ff8:	08007a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp, ip, sp, lr}
    1ffc:	08007a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp, lr}
    2000:	08007a40 	stmdaeq	r0, {r6, r9, fp, ip, sp, lr}
    2004:	08007a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, ip, sp, lr}
    2008:	08007a52 	stmdaeq	r0, {r1, r4, r6, r9, fp, ip, sp, lr}
    200c:	08007a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, sp, lr}
    2010:	08007a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp, lr}
    2014:	08007ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, ip, sp, lr}
	...
    2020:	080079f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp, lr}
    2024:	080079fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, sp, lr}
    2028:	08007a00 	stmdaeq	r0, {r9, fp, ip, sp, lr}
    202c:	08007a02 	stmdaeq	r0, {r1, r9, fp, ip, sp, lr}
    2030:	08007a04 	stmdaeq	r0, {r2, r9, fp, ip, sp, lr}
    2034:	08007a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp, lr}
    2038:	08007a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, sp, lr}
    203c:	08007a16 	stmdaeq	r0, {r1, r2, r4, r9, fp, ip, sp, lr}
	...
    2048:	08007a16 	stmdaeq	r0, {r1, r2, r4, r9, fp, ip, sp, lr}
    204c:	08007a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, ip, sp, lr}
    2050:	08007a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, ip, sp, lr}
    2054:	08007a24 	stmdaeq	r0, {r2, r5, r9, fp, ip, sp, lr}
    2058:	08007a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp, ip, sp, lr}
    205c:	08007a2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, ip, sp, lr}
    2060:	08007a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, ip, sp, lr}
    2064:	08007a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp, lr}
    2068:	08007a52 	stmdaeq	r0, {r1, r4, r6, r9, fp, ip, sp, lr}
    206c:	08007a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, ip, sp, lr}
	...
    2078:	08007ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, sp, lr}
    207c:	08007ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip, sp, lr}
    2080:	08007ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip, sp, lr}
    2084:	08007afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}
    2088:	08007b02 	stmdaeq	r0, {r1, r8, r9, fp, ip, sp, lr}
    208c:	08007b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, ip, sp, lr}
    2090:	08007b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip, sp, lr}
    2094:	08007bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip, sp, lr}
	...
    20a0:	08007b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, sp, lr}
    20a4:	08007b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, ip, sp, lr}
    20a8:	08007b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip, sp, lr}
    20ac:	08007bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip, sp, lr}
	...
    20b8:	08007b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip, sp, lr}
    20bc:	08007b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip, sp, lr}
    20c0:	08007b22 	stmdaeq	r0, {r1, r5, r8, r9, fp, ip, sp, lr}
    20c4:	08007b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp, lr}
    20c8:	08007b26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp, ip, sp, lr}
    20cc:	08007b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, ip, sp, lr}
    20d0:	08007b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp, lr}
    20d4:	08007b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, sp, lr}
    20d8:	08007b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, ip, sp, lr}
    20dc:	08007b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp, ip, sp, lr}
    20e0:	08007b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, sp, lr}
    20e4:	08007b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp, ip, sp, lr}
    20e8:	08007b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, sp, lr}
    20ec:	08007b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, ip, sp, lr}
    20f0:	08007b62 	stmdaeq	r0, {r1, r5, r6, r8, r9, fp, ip, sp, lr}
    20f4:	08007b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp, ip, sp, lr}
    20f8:	08007b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip, sp, lr}
    20fc:	08007b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}
    2100:	08007b7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}
    2104:	08007bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip, sp, lr}
	...
    2110:	08007b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip, sp, lr}
    2114:	08007b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip, sp, lr}
    2118:	08007b22 	stmdaeq	r0, {r1, r5, r8, r9, fp, ip, sp, lr}
    211c:	08007b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp, lr}
    2120:	08007b26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp, ip, sp, lr}
    2124:	08007b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, ip, sp, lr}
    2128:	08007b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp, lr}
    212c:	08007b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip, sp, lr}
	...
    2138:	08007b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip, sp, lr}
    213c:	08007b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, sp, lr}
    2140:	08007b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, ip, sp, lr}
    2144:	08007b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp, ip, sp, lr}
    2148:	08007b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, sp, lr}
    214c:	08007b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, sp, lr}
    2150:	08007b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip, sp, lr}
    2154:	08007b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, ip, sp, lr}
    2158:	08007b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip, sp, lr}
    215c:	08007b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}
	...
    2168:	08007c0a 	stmdaeq	r0, {r1, r3, sl, fp, ip, sp, lr}
    216c:	08007c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, sp, lr}
    2170:	08007c10 	stmdaeq	r0, {r4, sl, fp, ip, sp, lr}
    2174:	08007c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, ip, sp, lr}
    2178:	08007c20 	stmdaeq	r0, {r5, sl, fp, ip, sp, lr}
    217c:	08007c24 	stmdaeq	r0, {r2, r5, sl, fp, ip, sp, lr}
    2180:	08007c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip, sp, lr}
    2184:	08007c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp, lr}
    2188:	08007c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp, ip, sp, lr}
    218c:	08007c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, sp, lr}
	...
    2198:	08007c0e 	stmdaeq	r0, {r1, r2, r3, sl, fp, ip, sp, lr}
    219c:	08007c10 	stmdaeq	r0, {r4, sl, fp, ip, sp, lr}
    21a0:	08007c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, sp, lr}
    21a4:	08007cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp, ip, sp, lr}
	...
    21b0:	08007c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp, ip, sp, lr}
    21b4:	08007c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, sp, lr}
    21b8:	08007c80 	stmdaeq	r0, {r7, sl, fp, ip, sp, lr}
    21bc:	08007c82 	stmdaeq	r0, {r1, r7, sl, fp, ip, sp, lr}
    21c0:	08007c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, sp, lr}
    21c4:	08007c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp, lr}
    21c8:	08007c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, sp, lr}
    21cc:	08007c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, ip, sp, lr}
    21d0:	08007c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, sp, lr}
    21d4:	08007ca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, ip, sp, lr}
    21d8:	08007ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip, sp, lr}
    21dc:	08007cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, ip, sp, lr}
    21e0:	08007cb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, fp, ip, sp, lr}
    21e4:	08007cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip, sp, lr}
    21e8:	08007cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, sp, lr}
    21ec:	08007cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, ip, sp, lr}
    21f0:	08007ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp, ip, sp, lr}
    21f4:	08007cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, ip, sp, lr}
    21f8:	08007ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, sp, lr}
    21fc:	08007cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, sp, lr}
	...
    2208:	08007c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp, ip, sp, lr}
    220c:	08007c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, sp, lr}
    2210:	08007c80 	stmdaeq	r0, {r7, sl, fp, ip, sp, lr}
    2214:	08007c82 	stmdaeq	r0, {r1, r7, sl, fp, ip, sp, lr}
    2218:	08007c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, sp, lr}
    221c:	08007c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp, lr}
    2220:	08007c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, sp, lr}
    2224:	08007c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, ip, sp, lr}
	...
    2230:	08007c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, ip, sp, lr}
    2234:	08007c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, ip, sp, lr}
    2238:	08007c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, sp, lr}
    223c:	08007ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, sp, lr}
    2240:	08007ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip, sp, lr}
    2244:	08007cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, ip, sp, lr}
    2248:	08007cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, ip, sp, lr}
    224c:	08007cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp, lr}
	...
    2258:	08007c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp, lr}
    225c:	08007c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, sp, lr}
    2260:	08007c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp, ip, sp, lr}
    2264:	08007c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp, ip, sp, lr}
    2268:	08007c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip, sp, lr}
    226c:	08007c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip, sp, lr}
    2270:	08007c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp, lr}
    2274:	08007c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp, ip, sp, lr}
	...
    2280:	08007d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, ip, sp, lr}
    2284:	08007d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, sp, lr}
    2288:	08007d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, sp, lr}
    228c:	08007d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, ip, sp, lr}
    2290:	08007da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip, sp, lr}
    2294:	08007db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
	...
    22a0:	08007dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    22a4:	08007dbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    22a8:	08007dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp, lr}
    22ac:	08007dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    22b0:	08007e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp, lr}
    22b4:	08007e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, sp, lr}
	...
    22c0:	08007230 	stmdaeq	r0, {r4, r5, r9, ip, sp, lr}
    22c4:	080072d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp, lr}
    22c8:	080072d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp, lr}
    22cc:	080072e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp, lr}
    22d0:	080072e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp, lr}
    22d4:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
    22d8:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
    22dc:	08007374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    22e0:	08007374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    22e4:	08007390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp, lr}
    22e8:	08007390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp, lr}
    22ec:	080073ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr}
    22f0:	080073ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr}
    22f4:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
    22f8:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
    22fc:	08007438 	stmdaeq	r0, {r3, r4, r5, sl, ip, sp, lr}
    2300:	08007438 	stmdaeq	r0, {r3, r4, r5, sl, ip, sp, lr}
    2304:	080074f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, sp, lr}
    2308:	080074f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, sp, lr}
    230c:	08007548 	stmdaeq	r0, {r3, r6, r8, sl, ip, sp, lr}
    2310:	08007548 	stmdaeq	r0, {r3, r6, r8, sl, ip, sp, lr}
    2314:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
    2318:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
    231c:	08007624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp, lr}
    2320:	08007624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp, lr}
    2324:	08007628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp, lr}
    2328:	08007628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp, lr}
    232c:	0800771c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp, lr}
    2330:	0800771c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp, lr}
    2334:	08007770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, ip, sp, lr}
    2338:	08007770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, ip, sp, lr}
    233c:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
    2340:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
    2344:	080079c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, lr}
    2348:	080079c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, lr}
    234c:	08007adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
    2350:	08007adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
    2354:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
    2358:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
    235c:	08007c04 	stmdaeq	r0, {r2, sl, fp, ip, sp, lr}
    2360:	08007c04 	stmdaeq	r0, {r2, sl, fp, ip, sp, lr}
    2364:	08007d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, sp, lr}
    2368:	08007d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, sp, lr}
    236c:	08007db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    2370:	08007db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    2374:	08007e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, sp, lr}
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000300 	stmdaeq	r0, {r8, r9}
       4:	08000308 	stmdaeq	r0, {r3, r8, r9}
       8:	08500001 	ldmdaeq	r0, {r0}^
       c:	0c080003 	stceq	0, cr0, [r8], {3}
      10:	04080003 	streq	r0, [r8], #-3
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
      20:	00038800 	andeq	r8, r3, r0, lsl #16
      24:	00038c08 	andeq	r8, r3, r8, lsl #24
      28:	30000208 	andcc	r0, r0, r8, lsl #4
      2c:	00038c9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
      30:	00039008 	andeq	r9, r3, r8
      34:	73000508 	movwvc	r0, #1288	; 0x508
      38:	9f1a3c00 	svcls	0x001a3c00
      3c:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
      40:	0800039a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9}
      44:	a8530001 	ldmdage	r3, {r0}^
      48:	ae080003 	cdpge	0, 0, cr0, cr8, cr3, {0}
      4c:	01080003 	tsteq	r8, r3
      50:	03ae5200 			; <UNDEFINED> instruction: 0x03ae5200
      54:	03b00800 	movseq	r0, #0, 16
      58:	00010800 	andeq	r0, r1, r0, lsl #16
      5c:	0003e853 	andeq	lr, r3, r3, asr r8
      60:	0003ea08 	andeq	lr, r3, r8, lsl #20
      64:	53000108 	movwpl	r0, #264	; 0x108
	...
      70:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
      74:	0800039a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9}
      78:	9f300002 	svcls	0x00300002
      7c:	080003ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9}
      80:	080003d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9}
      84:	9f300002 	svcls	0x00300002
      88:	080003d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9}
      8c:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
      90:	e8520001 	ldmda	r2, {r0}^
      94:	00080003 	andeq	r0, r8, r3
      98:	02080004 	andeq	r0, r8, #4
      9c:	009f3000 	addseq	r3, pc, r0
      a0:	00000000 	andeq	r0, r0, r0
      a4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
      a8:	9a080003 	bls	2000bc <_Min_Stack_Size+0x1ffcbc>
      ac:	02080003 	andeq	r0, r8, #3
      b0:	ae9f3200 	cdpge	2, 9, cr3, cr15, cr0, {0}
      b4:	da080003 	ble	2000c8 <_Min_Stack_Size+0x1ffcc8>
      b8:	02080003 	andeq	r0, r8, #3
      bc:	da9f3200 	ble	fe7cc8c4 <_estack+0xde79c8c4>
      c0:	de080003 	cdple	0, 0, cr0, cr8, cr3, {0}
      c4:	0d080003 	stceq	0, cr0, [r8, #-12]
      c8:	48007300 	stmdami	r0, {r8, r9, ip, sp, lr}
      cc:	401a243d 	andsmi	r2, sl, sp, lsr r4
      d0:	31012325 	tstcc	r1, r5, lsr #6
      d4:	03e89f24 	mvneq	r9, #36, 30	; 0x90
      d8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
      dc:	00020800 	andeq	r0, r2, r0, lsl #16
      e0:	00009f32 	andeq	r9, r0, r2, lsr pc
      e4:	00000000 	andeq	r0, r0, r0
      e8:	03880000 	orreq	r0, r8, #0
      ec:	039a0800 	orrseq	r0, sl, #0, 16
      f0:	00020800 	andeq	r0, r2, r0, lsl #16
      f4:	03ae9f30 			; <UNDEFINED> instruction: 0x03ae9f30
      f8:	03b00800 	movseq	r0, #0, 16
      fc:	00020800 	andeq	r0, r2, r0, lsl #16
     100:	03b09f30 	movseq	r9, #48, 30	; 0xc0
     104:	03b80800 			; <UNDEFINED> instruction: 0x03b80800
     108:	00090800 	andeq	r0, r9, r0, lsl #16
     10c:	42400073 	submi	r0, r0, #115	; 0x73
     110:	25461a24 	strbcs	r1, [r6, #-2596]	; 0xfffff5dc
     114:	0003e89f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
     118:	00040008 	andeq	r0, r4, r8
     11c:	30000208 	andcc	r0, r0, r8, lsl #4
     120:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     124:	00000000 	andeq	r0, r0, r0
     128:	00038800 	andeq	r8, r3, r0, lsl #16
     12c:	00039a08 	andeq	r9, r3, r8, lsl #20
     130:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     134:	0003ae9f 	muleq	r3, pc, lr	; <UNPREDICTABLE>
     138:	0003c008 	andeq	ip, r3, r8
     13c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     140:	0003c09f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
     144:	0003d608 	andeq	sp, r3, r8, lsl #12
     148:	52000108 	andpl	r0, r0, #8, 2
     14c:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
     150:	08000400 	stmdaeq	r0, {sl}
     154:	9f320002 	svcls	0x00320002
	...
     160:	08000434 	stmdaeq	r0, {r2, r4, r5, sl}
     164:	08000444 	stmdaeq	r0, {r2, r6, sl}
     168:	44500001 	ldrbmi	r0, [r0], #-1
     16c:	58080004 	stmdapl	r8, {r2}
     170:	01080004 	tsteq	r8, r4
     174:	04585400 	ldrbeq	r5, [r8], #-1024	; 0xfffffc00
     178:	04600800 	strbteq	r0, [r0], #-2048	; 0xfffff800
     17c:	00040800 	andeq	r0, r4, r0, lsl #16
     180:	9f5001f3 	svcls	0x005001f3
	...
     18c:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
     190:	080004b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl}
     194:	b9500001 	ldmdblt	r0, {r0}^
     198:	cc080004 	stcgt	0, cr0, [r8], {4}
     19c:	02080004 	andeq	r0, r8, #4
     1a0:	00749100 	rsbseq	r9, r4, r0, lsl #2
     1a4:	00000000 	andeq	r0, r0, r0
     1a8:	b0000000 	andlt	r0, r0, r0
     1ac:	bc080004 	stclt	0, cr0, [r8], {4}
     1b0:	02080004 	andeq	r0, r8, #4
     1b4:	bc9f3000 	ldclt	0, cr3, [pc], {0}
     1b8:	cc080004 	stcgt	0, cr0, [r8], {4}
     1bc:	01080004 	tsteq	r8, r4
     1c0:	00005400 	andeq	r5, r0, r0, lsl #8
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	05760000 	ldrbeq	r0, [r6, #-0]!
     1cc:	057c0800 	ldrbeq	r0, [ip, #-2048]!	; 0xfffff800
     1d0:	00010800 	andeq	r0, r1, r0, lsl #16
     1d4:	00000052 	andeq	r0, r0, r2, asr r0
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	00058e00 	andeq	r8, r5, r0, lsl #28
     1e0:	00059408 	andeq	r9, r5, r8, lsl #8
     1e4:	52000108 	andpl	r0, r0, #8, 2
	...
     1f0:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
     1f4:	080005b0 	stmdaeq	r0, {r4, r5, r7, r8, sl}
     1f8:	00530001 	subseq	r0, r3, r1
     1fc:	00000000 	andeq	r0, r0, r0
     200:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     204:	cc080005 	stcgt	0, cr0, [r8], {5}
     208:	01080005 	tsteq	r8, r5
     20c:	00005300 	andeq	r5, r0, r0, lsl #6
     210:	00000000 	andeq	r0, r0, r0
     214:	05dc0000 	ldrbeq	r0, [ip]
     218:	05ee0800 	strbeq	r0, [lr, #2048]!	; 0x800
     21c:	00010800 	andeq	r0, r1, r0, lsl #16
     220:	0005ee50 	andeq	lr, r5, r0, asr lr
     224:	00060008 	andeq	r0, r6, r8
     228:	f3000408 	vshl.u8	d0, d8, d0
     22c:	009f5001 	addseq	r5, pc, r1
     230:	00000000 	andeq	r0, r0, r0
     234:	e0000000 	and	r0, r0, r0
     238:	e6080005 	str	r0, [r8], -r5
     23c:	07080005 	streq	r0, [r8, -r5]
     240:	0a007100 	beq	1c648 <_Min_Stack_Size+0x1c248>
     244:	9f1af8ff 	svcls	0x001af8ff
     248:	080005e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl}
     24c:	080005ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl}
     250:	ea530001 	b	14c025c <_Min_Stack_Size+0x14bfe5c>
     254:	f6080005 			; <UNDEFINED> instruction: 0xf6080005
     258:	07080005 	streq	r0, [r8, -r5]
     25c:	0a007100 	beq	1c664 <_Min_Stack_Size+0x1c264>
     260:	9f1af8ff 	svcls	0x001af8ff
     264:	080005f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl}
     268:	08000600 	stmdaeq	r0, {r9, sl}
     26c:	00530001 	subseq	r0, r3, r1
     270:	00000000 	andeq	r0, r0, r0
     274:	dc000000 	stcle	0, cr0, [r0], {-0}
     278:	ee080005 	cdp	0, 0, cr0, cr8, cr5, {0}
     27c:	05080005 	streq	r0, [r8, #-5]
     280:	37007000 	strcc	r7, [r0, -r0]
     284:	05ee9f1a 	strbeq	r9, [lr, #3866]!	; 0xf1a
     288:	06000800 	streq	r0, [r0], -r0, lsl #16
     28c:	00010800 	andeq	r0, r1, r0, lsl #16
     290:	00000050 	andeq	r0, r0, r0, asr r0
     294:	00000000 	andeq	r0, r0, r0
     298:	00060000 	andeq	r0, r6, r0
     29c:	00063c08 	andeq	r3, r6, r8, lsl #24
     2a0:	50000108 	andpl	r0, r0, r8, lsl #2
     2a4:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
     2a8:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     2ac:	01f30004 	mvnseq	r0, r4
     2b0:	064c9f50 			; <UNDEFINED> instruction: 0x064c9f50
     2b4:	06580800 	ldrbeq	r0, [r8], -r0, lsl #16
     2b8:	00010800 	andeq	r0, r1, r0, lsl #16
     2bc:	00065850 	andeq	r5, r6, r0, asr r8
     2c0:	00066c08 	andeq	r6, r6, r8, lsl #24
     2c4:	f3000408 	vshl.u8	d0, d8, d0
     2c8:	009f5001 	addseq	r5, pc, r1
	...
     2d4:	2e080006 	cdpcs	0, 0, cr0, cr8, cr6, {0}
     2d8:	01080006 	tsteq	r8, r6
     2dc:	062e5100 	strteq	r5, [lr], -r0, lsl #2
     2e0:	064c0800 	strbeq	r0, [ip], -r0, lsl #16
     2e4:	00040800 	andeq	r0, r4, r0, lsl #16
     2e8:	9f5101f3 	svcls	0x005101f3
     2ec:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     2f0:	08000652 	stmdaeq	r0, {r1, r4, r6, r9, sl}
     2f4:	52510001 	subspl	r0, r1, #1
     2f8:	6c080006 	stcvs	0, cr0, [r8], {6}
     2fc:	04080006 	streq	r0, [r8], #-6
     300:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     304:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     308:	00000000 	andeq	r0, r0, r0
     30c:	00060000 	andeq	r0, r6, r0
     310:	00062608 	andeq	r2, r6, r8, lsl #12
     314:	52000108 	andpl	r0, r0, #8, 2
     318:	08000626 	stmdaeq	r0, {r1, r2, r5, r9, sl}
     31c:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     320:	01f30004 	mvnseq	r0, r4
     324:	064c9f52 			; <UNDEFINED> instruction: 0x064c9f52
     328:	064e0800 	strbeq	r0, [lr], -r0, lsl #16
     32c:	00010800 	andeq	r0, r1, r0, lsl #16
     330:	00064e52 	andeq	r4, r6, r2, asr lr
     334:	00066c08 	andeq	r6, r6, r8, lsl #24
     338:	f3000408 	vshl.u8	d0, d8, d0
     33c:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     348:	08080006 	stmdaeq	r8, {r1, r2}
     34c:	02080006 	andeq	r0, r8, #6
     350:	009f3000 	addseq	r3, pc, r0
     354:	00000000 	andeq	r0, r0, r0
     358:	14000000 	strne	r0, [r0], #-0
     35c:	26080006 	strcs	r0, [r8], -r6
     360:	01080006 	tsteq	r8, r6
     364:	06265200 	strteq	r5, [r6], -r0, lsl #4
     368:	064c0800 	strbeq	r0, [ip], -r0, lsl #16
     36c:	00040800 	andeq	r0, r4, r0, lsl #16
     370:	9f5201f3 	svcls	0x005201f3
     374:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     378:	0800064e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl}
     37c:	4e520001 	cdpmi	0, 5, cr0, cr2, cr1, {0}
     380:	6c080006 	stcvs	0, cr0, [r8], {6}
     384:	04080006 	streq	r0, [r8], #-6
     388:	5201f300 	andpl	pc, r1, #0, 6
     38c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     390:	00000000 	andeq	r0, r0, r0
     394:	00061400 	andeq	r1, r6, r0, lsl #8
     398:	00062e08 	andeq	r2, r6, r8, lsl #28
     39c:	51000108 	tstpl	r0, r8, lsl #2
     3a0:	0800062e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl}
     3a4:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     3a8:	01f30004 	mvnseq	r0, r4
     3ac:	064c9f51 			; <UNDEFINED> instruction: 0x064c9f51
     3b0:	06520800 	ldrbeq	r0, [r2], -r0, lsl #16
     3b4:	00010800 	andeq	r0, r1, r0, lsl #16
     3b8:	00065251 	andeq	r5, r6, r1, asr r2
     3bc:	00066c08 	andeq	r6, r6, r8, lsl #24
     3c0:	f3000408 	vshl.u8	d0, d8, d0
     3c4:	009f5101 	addseq	r5, pc, r1, lsl #2
     3c8:	00000000 	andeq	r0, r0, r0
     3cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3d0:	1e080006 	cdpne	0, 0, cr0, cr8, cr6, {0}
     3d4:	01080006 	tsteq	r8, r6
     3d8:	061e5300 	ldreq	r5, [lr], -r0, lsl #6
     3dc:	06260800 	strteq	r0, [r6], -r0, lsl #16
     3e0:	00030800 	andeq	r0, r3, r0, lsl #16
     3e4:	4c9f0373 	ldcmi	3, cr0, [pc], {115}	; 0x73
     3e8:	50080006 	andpl	r0, r8, r6
     3ec:	01080006 	tsteq	r8, r6
     3f0:	06505300 	ldrbeq	r5, [r0], -r0, lsl #6
     3f4:	06520800 	ldrbeq	r0, [r2], -r0, lsl #16
     3f8:	00030800 	andeq	r0, r3, r0, lsl #16
     3fc:	009f7c74 	addseq	r7, pc, r4, ror ip	; <UNPREDICTABLE>
     400:	00000000 	andeq	r0, r0, r0
     404:	14000000 	strne	r0, [r0], #-0
     408:	1e080006 	cdpne	0, 0, cr0, cr8, cr6, {0}
     40c:	01080006 	tsteq	r8, r6
     410:	061e5300 	ldreq	r5, [lr], -r0, lsl #6
     414:	06260800 	strteq	r0, [r6], -r0, lsl #16
     418:	00030800 	andeq	r0, r3, r0, lsl #16
     41c:	4c9f0373 	ldcmi	3, cr0, [pc], {115}	; 0x73
     420:	50080006 	andpl	r0, r8, r6
     424:	01080006 	tsteq	r8, r6
     428:	06505300 	ldrbeq	r5, [r0], -r0, lsl #6
     42c:	06520800 	ldrbeq	r0, [r2], -r0, lsl #16
     430:	00030800 	andeq	r0, r3, r0, lsl #16
     434:	009f7c74 	addseq	r7, pc, r4, ror ip	; <UNPREDICTABLE>
     438:	00000000 	andeq	r0, r0, r0
     43c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     440:	4a080006 	bmi	200460 <_Min_Stack_Size+0x200060>
     444:	01080006 	tsteq	r8, r6
     448:	064c5500 	strbeq	r5, [ip], -r0, lsl #10
     44c:	06620800 	strbteq	r0, [r2], -r0, lsl #16
     450:	00010800 	andeq	r0, r1, r0, lsl #16
     454:	00000055 	andeq	r0, r0, r5, asr r0
     458:	00000000 	andeq	r0, r0, r0
     45c:	00063600 	andeq	r3, r6, r0, lsl #12
     460:	00064208 	andeq	r4, r6, r8, lsl #4
     464:	52000108 	andpl	r0, r0, #8, 2
     468:	08000652 	stmdaeq	r0, {r1, r4, r6, r9, sl}
     46c:	0800065a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl}
     470:	00520001 	subseq	r0, r2, r1
     474:	00000000 	andeq	r0, r0, r0
     478:	36000000 	strcc	r0, [r0], -r0
     47c:	3c080006 	stccc	0, cr0, [r8], {6}
     480:	01080006 	tsteq	r8, r6
     484:	063c5000 	ldrteq	r5, [ip], -r0
     488:	064c0800 	strbeq	r0, [ip], -r0, lsl #16
     48c:	00040800 	andeq	r0, r4, r0, lsl #16
     490:	9f5001f3 	svcls	0x005001f3
     494:	08000652 	stmdaeq	r0, {r1, r4, r6, r9, sl}
     498:	08000658 	stmdaeq	r0, {r3, r4, r6, r9, sl}
     49c:	58500001 	ldmdapl	r0, {r0}^
     4a0:	6c080006 	stcvs	0, cr0, [r8], {6}
     4a4:	04080006 	streq	r0, [r8], #-6
     4a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     4ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	00066c00 	andeq	r6, r6, r0, lsl #24
     4b8:	00067408 	andeq	r7, r6, r8, lsl #8
     4bc:	50000108 	andpl	r0, r0, r8, lsl #2
     4c0:	08000674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl}
     4c4:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     4c8:	01f30004 	mvnseq	r0, r4
     4cc:	00009f50 	andeq	r9, r0, r0, asr pc
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	06840000 	streq	r0, [r4], r0
     4d8:	068c0800 	streq	r0, [ip], r0, lsl #16
     4dc:	00010800 	andeq	r0, r1, r0, lsl #16
     4e0:	00068c50 	andeq	r8, r6, r0, asr ip
     4e4:	00069c08 	andeq	r9, r6, r8, lsl #24
     4e8:	f3000408 	vshl.u8	d0, d8, d0
     4ec:	009f5001 	addseq	r5, pc, r1
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	c0000000 	andgt	r0, r0, r0
     4f8:	c2080006 	andgt	r0, r8, #6
     4fc:	01080006 	tsteq	r8, r6
     500:	06c25000 	strbeq	r5, [r2], r0
     504:	06d20800 	ldrbeq	r0, [r2], r0, lsl #16
     508:	00030800 	andeq	r0, r3, r0, lsl #16
     50c:	d29f0170 	addsle	r0, pc, #112, 2
     510:	d6080006 	strle	r0, [r8], -r6
     514:	06080006 	streq	r0, [r8], -r6
     518:	06047300 	streq	r7, [r4], -r0, lsl #6
     51c:	d69f0123 	ldrle	r0, [pc], r3, lsr #2
     520:	f4080006 	vst4.8	{d0-d3}, [r8], r6
     524:	04080006 	streq	r0, [r8], #-6
     528:	5001f300 	andpl	pc, r1, r0, lsl #6
     52c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     530:	00000000 	andeq	r0, r0, r0
     534:	0006d000 	andeq	sp, r6, r0
     538:	0006e608 	andeq	lr, r6, r8, lsl #12
     53c:	3f000208 	svccc	0x00000208
     540:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     544:	00000000 	andeq	r0, r0, r0
     548:	0006d000 	andeq	sp, r6, r0
     54c:	0006e608 	andeq	lr, r6, r8, lsl #12
     550:	09000308 	stmdbeq	r0, {r3, r8, r9}
     554:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
     558:	00000000 	andeq	r0, r0, r0
     55c:	06f40000 	ldrbteq	r0, [r4], r0
     560:	07280800 	streq	r0, [r8, -r0, lsl #16]!
     564:	00010800 	andeq	r0, r1, r0, lsl #16
     568:	00072850 	andeq	r2, r7, r0, asr r8
     56c:	00075008 	andeq	r5, r7, r8
     570:	f3000408 	vshl.u8	d0, d8, d0
     574:	009f5001 	addseq	r5, pc, r1
     578:	00000000 	andeq	r0, r0, r0
     57c:	60000000 	andvs	r0, r0, r0
     580:	62080007 	andvs	r0, r8, #7
     584:	01080007 	tsteq	r8, r7
     588:	07625000 	strbeq	r5, [r2, -r0]!
     58c:	07c00800 	strbeq	r0, [r0, r0, lsl #16]
     590:	00040800 	andeq	r0, r4, r0, lsl #16
     594:	9f5001f3 	svcls	0x005001f3
	...
     5a0:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
     5a4:	08000778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl}
     5a8:	78510001 	ldmdavc	r1, {r0}^
     5ac:	ae080007 	cdpge	0, 0, cr0, cr8, cr7, {0}
     5b0:	04080007 	streq	r0, [r8], #-7
     5b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     5b8:	0007ae9f 	muleq	r7, pc, lr	; <UNPREDICTABLE>
     5bc:	0007c008 	andeq	ip, r7, r8
     5c0:	51000108 	tstpl	r0, r8, lsl #2
	...
     5cc:	08000774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl}
     5d0:	080007ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl}
     5d4:	00530001 	subseq	r0, r3, r1
     5d8:	00000000 	andeq	r0, r0, r0
     5dc:	74000000 	strvc	r0, [r0], #-0
     5e0:	ae080007 	cdpge	0, 0, cr0, cr8, cr7, {0}
     5e4:	01080007 	tsteq	r8, r7
     5e8:	00005200 	andeq	r5, r0, r0, lsl #4
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	07740000 	ldrbeq	r0, [r4, -r0]!
     5f4:	07780800 	ldrbeq	r0, [r8, -r0, lsl #16]!
     5f8:	00010800 	andeq	r0, r1, r0, lsl #16
     5fc:	00077851 	andeq	r7, r7, r1, asr r8
     600:	0007ae08 	andeq	sl, r7, r8, lsl #28
     604:	f3000408 	vshl.u8	d0, d8, d0
     608:	009f5101 	addseq	r5, pc, r1, lsl #2
     60c:	00000000 	andeq	r0, r0, r0
     610:	74000000 	strvc	r0, [r0], #-0
     614:	9a080007 	bls	200638 <_Min_Stack_Size+0x200238>
     618:	01080007 	tsteq	r8, r7
     61c:	07a85400 	streq	r5, [r8, r0, lsl #8]!
     620:	07ae0800 	streq	r0, [lr, r0, lsl #16]!
     624:	00010800 	andeq	r0, r1, r0, lsl #16
     628:	00000054 	andeq	r0, r0, r4, asr r0
     62c:	00000000 	andeq	r0, r0, r0
     630:	00077800 	andeq	r7, r7, r0, lsl #16
     634:	00078c08 	andeq	r8, r7, r8, lsl #24
     638:	51000108 	tstpl	r0, r8, lsl #2
     63c:	0800078c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl}
     640:	08000794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl}
     644:	03710003 	cmneq	r1, #3
     648:	0007949f 	muleq	r7, pc, r4	; <UNPREDICTABLE>
     64c:	00079608 	andeq	r9, r7, r8, lsl #12
     650:	70000308 	andvc	r0, r0, r8, lsl #6
     654:	07969f7c 			; <UNDEFINED> instruction: 0x07969f7c
     658:	07a80800 	streq	r0, [r8, r0, lsl #16]!
     65c:	00060800 	andeq	r0, r6, r0, lsl #16
     660:	375101f3 	smmlsrcc	r1, r3, r1, r0
     664:	07a89f1a 			; <UNDEFINED> instruction: 0x07a89f1a
     668:	07ac0800 	streq	r0, [ip, r0, lsl #16]!
     66c:	00010800 	andeq	r0, r1, r0, lsl #16
     670:	0007ac51 	andeq	sl, r7, r1, asr ip
     674:	0007ae08 	andeq	sl, r7, r8, lsl #28
     678:	70000308 	andvc	r0, r0, r8, lsl #6
     67c:	00009f7c 	andeq	r9, r0, ip, ror pc
     680:	00000000 	andeq	r0, r0, r0
     684:	07860000 	streq	r0, [r6, r0]
     688:	07a60800 	streq	r0, [r6, r0, lsl #16]!
     68c:	00010800 	andeq	r0, r1, r0, lsl #16
     690:	0007a656 	andeq	sl, r7, r6, asr r6
     694:	0007a808 	andeq	sl, r7, r8, lsl #16
     698:	34001d08 	strcc	r1, [r0], #-3336	; 0xfffff2f8
     69c:	205101f3 	ldrshcs	r0, [r1], #-19	; 0xffffffed
     6a0:	01f31a37 	mvnseq	r1, r7, lsr sl
     6a4:	1a372051 	bne	dc87f0 <_Min_Stack_Size+0xdc83f0>
     6a8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     6ac:	0000040c 	andeq	r0, r0, ip, lsl #8
     6b0:	01282a80 	smlawbeq	r8, r0, sl, r2
     6b4:	9f131600 	svcls	0x00131600
     6b8:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
     6bc:	080007ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl}
     6c0:	00560001 	subseq	r0, r6, r1
     6c4:	00000000 	andeq	r0, r0, r0
     6c8:	c0000000 	andgt	r0, r0, r0
     6cc:	c8080007 	stmdagt	r8, {r0, r1, r2}
     6d0:	01080007 	tsteq	r8, r7
     6d4:	07c85000 	strbeq	r5, [r8, r0]
     6d8:	07d80800 	ldrbeq	r0, [r8, r0, lsl #16]
     6dc:	00040800 	andeq	r0, r4, r0, lsl #16
     6e0:	9f5001f3 	svcls	0x005001f3
	...
     6ec:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
     6f0:	080007ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl}
     6f4:	ea500001 	b	1400700 <_Min_Stack_Size+0x1400300>
     6f8:	f4080007 	vst4.8	{d0-d3}, [r8], r7
     6fc:	04080007 	streq	r0, [r8], #-7
     700:	5001f300 	andpl	pc, r1, r0, lsl #6
     704:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     708:	00000000 	andeq	r0, r0, r0
     70c:	0007f400 	andeq	pc, r7, r0, lsl #8
     710:	0007fc08 	andeq	pc, r7, r8, lsl #24
     714:	50000108 	andpl	r0, r0, r8, lsl #2
     718:	080007fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
     71c:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     720:	01f30004 	mvnseq	r0, r4
     724:	00009f50 	andeq	r9, r0, r0, asr pc
     728:	00000000 	andeq	r0, r0, r0
     72c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     730:	081e0800 	ldmdaeq	lr, {fp}
     734:	00010800 	andeq	r0, r1, r0, lsl #16
     738:	00081e50 	andeq	r1, r8, r0, asr lr
     73c:	00082808 	andeq	r2, r8, r8, lsl #16
     740:	f3000408 	vshl.u8	d0, d8, d0
     744:	009f5001 	addseq	r5, pc, r1
     748:	00000000 	andeq	r0, r0, r0
     74c:	4c000000 	stcmi	0, cr0, [r0], {-0}
     750:	64080008 	strvs	r0, [r8], #-8
     754:	02080008 	andeq	r0, r8, #8
     758:	649f3000 	ldrvs	r3, [pc], #0	; 760 <_Min_Stack_Size+0x360>
     75c:	b0080008 	andlt	r0, r8, r8
     760:	01080009 	tsteq	r8, r9
     764:	09b05300 	ldmibeq	r0!, {r8, r9, ip, lr}
     768:	09b80800 	ldmibeq	r8!, {fp}
     76c:	00030800 	andeq	r0, r3, r0, lsl #16
     770:	b89f7f73 	ldmlt	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
     774:	c8080009 	stmdagt	r8, {r0, r3}
     778:	0108000a 	tsteq	r8, sl
     77c:	00005300 	andeq	r5, r0, r0, lsl #6
     780:	00000000 	andeq	r0, r0, r0
     784:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
     788:	08640800 	stmdaeq	r4!, {fp}^
     78c:	00020800 	andeq	r0, r2, r0, lsl #16
     790:	08649f30 	stmdaeq	r4!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     794:	08660800 	stmdaeq	r6!, {fp}^
     798:	00050800 	andeq	r0, r5, r0, lsl #16
     79c:	24007331 	strcs	r7, [r0], #-817	; 0xfffffccf
     7a0:	0008669f 	muleq	r8, pc, r6	; <UNPREDICTABLE>
     7a4:	00086c08 	andeq	r6, r8, r8, lsl #24
     7a8:	31000508 	tstcc	r0, r8, lsl #10
     7ac:	9f247f73 	svcls	0x00247f73
     7b0:	08000872 	stmdaeq	r0, {r1, r4, r5, r6, fp}
     7b4:	0800088c 	stmdaeq	r0, {r2, r3, r7, fp}
     7b8:	8c520001 	mrrchi	0, 0, r0, r2, cr1
     7bc:	b0080008 	andlt	r0, r8, r8
     7c0:	05080009 	streq	r0, [r8, #-9]
     7c4:	00733100 	rsbseq	r3, r3, r0, lsl #2
     7c8:	09b09f24 	ldmibeq	r0!, {r2, r5, r8, r9, sl, fp, ip, pc}
     7cc:	09c00800 	stmibeq	r0, {fp}^
     7d0:	00050800 	andeq	r0, r5, r0, lsl #16
     7d4:	247f7331 	ldrbtcs	r7, [pc], #-817	; 7dc <_Min_Stack_Size+0x3dc>
     7d8:	0009c69f 	muleq	r9, pc, r6	; <UNPREDICTABLE>
     7dc:	0009d608 	andeq	sp, r9, r8, lsl #12
     7e0:	52000108 	andpl	r0, r0, #8, 2
     7e4:	080009d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp}
     7e8:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
     7ec:	73310005 	teqvc	r1, #5
     7f0:	4c9f2400 	cfldrsmi	mvf2, [pc], {0}
     7f4:	5008000a 	andpl	r0, r8, sl
     7f8:	0608000a 	streq	r0, [r8], -sl
     7fc:	73007a00 	movwvc	r7, #2560	; 0xa00
     800:	509f2400 	addspl	r2, pc, r0, lsl #8
     804:	c808000a 	stmdagt	r8, {r1, r3}
     808:	0508000a 	streq	r0, [r8, #-10]
     80c:	00733100 	rsbseq	r3, r3, r0, lsl #2
     810:	00009f24 	andeq	r9, r0, r4, lsr #30
     814:	00000000 	andeq	r0, r0, r0
     818:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
     81c:	08640800 	stmdaeq	r4!, {fp}^
     820:	00020800 	andeq	r0, r2, r0, lsl #16
     824:	08649f30 	stmdaeq	r4!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     828:	086c0800 	stmdaeq	ip!, {fp}^
     82c:	00010800 	andeq	r0, r1, r0, lsl #16
     830:	00087454 	andeq	r7, r8, r4, asr r4
     834:	0009b608 	andeq	fp, r9, r8, lsl #12
     838:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
     83c:	080009b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp}
     840:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
     844:	00780004 	rsbseq	r0, r8, r4
     848:	09c69f20 	stmibeq	r6, {r5, r8, r9, sl, fp, ip, pc}^
     84c:	0ac80800 	beq	ff202854 <_estack+0xdf1d2854>
     850:	00010800 	andeq	r0, r1, r0, lsl #16
     854:	00000054 	andeq	r0, r0, r4, asr r0
     858:	00000000 	andeq	r0, r0, r0
     85c:	00084c00 	andeq	r4, r8, r0, lsl #24
     860:	00086408 	andeq	r6, r8, r8, lsl #8
     864:	30000208 	andcc	r0, r0, r8, lsl #4
     868:	0008909f 	muleq	r8, pc, r0	; <UNPREDICTABLE>
     86c:	0008aa08 	andeq	sl, r8, r8, lsl #20
     870:	5b000108 	blpl	c98 <_Min_Stack_Size+0x898>
     874:	080008aa 	stmdaeq	r0, {r1, r3, r5, r7, fp}
     878:	080008c0 	stmdaeq	r0, {r6, r7, fp}
     87c:	c0580001 	subsgt	r0, r8, r1
     880:	cc080008 	stcgt	0, cr0, [r8], {8}
     884:	01080008 	tsteq	r8, r8
     888:	08cc5200 	stmiaeq	ip, {r9, ip, lr}^
     88c:	08d60800 	ldmeq	r6, {fp}^
     890:	00020800 	andeq	r0, r2, r0, lsl #16
     894:	09060c70 	stmdbeq	r6, {r4, r5, r6, sl, fp}
     898:	09180800 	ldmdbeq	r8, {fp}
     89c:	00010800 	andeq	r0, r1, r0, lsl #16
     8a0:	0009185b 	andeq	r1, r9, fp, asr r8
     8a4:	00097608 	andeq	r7, r9, r8, lsl #12
     8a8:	59000108 	stmdbpl	r0, {r3, r8}
     8ac:	08000976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp}
     8b0:	0800097c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp}
     8b4:	7c5a0001 	mrrcvc	0, 0, r0, sl, cr1
     8b8:	80080009 	andhi	r0, r8, r9
     8bc:	01080009 	tsteq	r8, r9
     8c0:	09805200 	stmibeq	r0, {r9, ip, lr}
     8c4:	09860800 	stmibeq	r6, {fp}
     8c8:	00060800 	andeq	r0, r6, r0, lsl #16
     8cc:	00720078 	rsbseq	r0, r2, r8, ror r0
     8d0:	098a9f1a 	stmibeq	sl, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
     8d4:	098e0800 	stmibeq	lr, {fp}
     8d8:	00010800 	andeq	r0, r1, r0, lsl #16
     8dc:	00098e52 	andeq	r8, r9, r2, asr lr
     8e0:	00099408 	andeq	r9, r9, r8, lsl #8
     8e4:	78000608 	stmdavc	r0, {r3, r9, sl}
     8e8:	1a007200 	bne	1d0f0 <_Min_Stack_Size+0x1ccf0>
     8ec:	0009989f 	muleq	r9, pc, r8	; <UNPREDICTABLE>
     8f0:	00099c08 	andeq	r9, r9, r8, lsl #24
     8f4:	52000108 	andpl	r0, r0, #8, 2
     8f8:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     8fc:	080009a2 	stmdaeq	r0, {r1, r5, r7, r8, fp}
     900:	00780006 	rsbseq	r0, r8, r6
     904:	9f1a0072 	svcls	0x001a0072
     908:	080009a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, fp}
     90c:	080009aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp}
     910:	aa520001 	bge	148091c <_Min_Stack_Size+0x148051c>
     914:	b8080009 	stmdalt	r8, {r0, r3}
     918:	06080009 	streq	r0, [r8], -r9
     91c:	72007800 	andvc	r7, r0, #0, 16
     920:	b89f1a00 	ldmlt	pc, {r9, fp, ip}	; <UNPREDICTABLE>
     924:	c0080009 	andgt	r0, r8, r9
     928:	01080009 	tsteq	r8, r9
     92c:	09d65400 	ldmibeq	r6, {sl, ip, lr}^
     930:	09e60800 	stmibeq	r6!, {fp}^
     934:	00010800 	andeq	r0, r1, r0, lsl #16
     938:	0009e652 	andeq	lr, r9, r2, asr r6
     93c:	0009f008 	andeq	pc, r9, r8
     940:	5a000108 	bpl	d68 <_Min_Stack_Size+0x968>
     944:	080009f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp}
     948:	080009fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp}
     94c:	fa520001 	blx	1480958 <_Min_Stack_Size+0x1480558>
     950:	fe080009 	cdp2	0, 0, cr0, cr8, cr9, {0}
     954:	0b080009 	bleq	200980 <_Min_Stack_Size+0x200580>
     958:	33007300 	movwcc	r7, #768	; 0x300
     95c:	70243225 	eorvc	r3, r4, r5, lsr #4
     960:	20232200 	eorcs	r2, r3, r0, lsl #4
     964:	080009fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp}
     968:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
     96c:	145a0001 	ldrbne	r0, [sl], #-1
     970:	1808000a 	stmdane	r8, {r1, r3}
     974:	0108000a 	tsteq	r8, sl
     978:	0a1c5800 	beq	716980 <_Min_Stack_Size+0x716580>
     97c:	0a220800 	beq	882984 <_Min_Stack_Size+0x882584>
     980:	00010800 	andeq	r0, r1, r0, lsl #16
     984:	000a2258 	andeq	r2, sl, r8, asr r2
     988:	000a2a08 	andeq	r2, sl, r8, lsl #20
     98c:	5a000108 	bpl	db4 <_Min_Stack_Size+0x9b4>
     990:	08000a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp}
     994:	08000a32 	stmdaeq	r0, {r1, r4, r5, r9, fp}
     998:	32580001 	subscc	r0, r8, #1
     99c:	4208000a 	andmi	r0, r8, #10
     9a0:	0108000a 	tsteq	r8, sl
     9a4:	0a425a00 	beq	10971ac <_Min_Stack_Size+0x1096dac>
     9a8:	0a480800 	beq	12029b0 <_Min_Stack_Size+0x12025b0>
     9ac:	00010800 	andeq	r0, r1, r0, lsl #16
     9b0:	000a4858 	andeq	r4, sl, r8, asr r8
     9b4:	000ac808 	andeq	ip, sl, r8, lsl #16
     9b8:	59000108 	stmdbpl	r0, {r3, r8}
	...
     9c4:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
     9c8:	08000ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp}
     9cc:	de510001 	cdple	0, 5, cr0, cr1, cr1, {0}
     9d0:	2c08000a 	stccs	0, cr0, [r8], {10}
     9d4:	0108000c 	tsteq	r8, ip
     9d8:	00005b00 	andeq	r5, r0, r0, lsl #22
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	0ac80000 	beq	ff2009e8 <_estack+0xdf1d09e8>
     9e4:	0ade0800 	beq	ff7829ec <_estack+0xdf7529ec>
     9e8:	00020800 	andeq	r0, r2, r0, lsl #16
     9ec:	0ade9f30 	beq	ff7a86b4 <_estack+0xdf7786b4>
     9f0:	0c2c0800 	stceq	8, cr0, [ip], #-0
     9f4:	00010800 	andeq	r0, r1, r0, lsl #16
     9f8:	00000053 	andeq	r0, r0, r3, asr r0
     9fc:	00000000 	andeq	r0, r0, r0
     a00:	000ac800 	andeq	ip, sl, r0, lsl #16
     a04:	000ade08 	andeq	sp, sl, r8, lsl #28
     a08:	30000208 	andcc	r0, r0, r8, lsl #4
     a0c:	000ade9f 	muleq	sl, pc, lr	; <UNPREDICTABLE>
     a10:	000ae008 	andeq	lr, sl, r8
     a14:	31000508 	tstcc	r0, r8, lsl #10
     a18:	9f240073 	svcls	0x00240073
     a1c:	08000ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp}
     a20:	08000ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp}
     a24:	73310005 	teqvc	r1, #5
     a28:	ea9f247f 	b	fe7c9c2c <_estack+0xde799c2c>
     a2c:	fa08000a 	blx	200a5c <_Min_Stack_Size+0x20065c>
     a30:	0108000a 	tsteq	r8, sl
     a34:	0afa5100 	beq	ffe94e3c <_estack+0xdfe64e3c>
     a38:	0b5c0800 	bleq	1702a40 <_Min_Stack_Size+0x1702640>
     a3c:	00060800 	andeq	r0, r6, r0, lsl #16
     a40:	00730074 	rsbseq	r0, r3, r4, ror r0
     a44:	0b5c9f24 	bleq	17286dc <_Min_Stack_Size+0x17282dc>
     a48:	0bbe0800 	bleq	fef82a50 <_estack+0xdef52a50>
     a4c:	00050800 	andeq	r0, r5, r0, lsl #16
     a50:	24007331 	strcs	r7, [r0], #-817	; 0xfffffccf
     a54:	000bbe9f 	muleq	fp, pc, lr	; <UNPREDICTABLE>
     a58:	000bc808 	andeq	ip, fp, r8, lsl #16
     a5c:	31000508 	tstcc	r0, r8, lsl #10
     a60:	9f247f73 	svcls	0x00247f73
     a64:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
     a68:	08000bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp}
     a6c:	73310005 	teqvc	r1, #5
     a70:	d29f2400 	addsle	r2, pc, #0, 8
     a74:	d408000b 	strle	r0, [r8], #-11
     a78:	0608000b 	streq	r0, [r8], -fp
     a7c:	73007400 	movwvc	r7, #1024	; 0x400
     a80:	d49f2400 	ldrle	r2, [pc], #1024	; a88 <_Min_Stack_Size+0x688>
     a84:	2c08000b 	stccs	0, cr0, [r8], {11}
     a88:	0508000c 	streq	r0, [r8, #-12]
     a8c:	00733100 	rsbseq	r3, r3, r0, lsl #2
     a90:	00009f24 	andeq	r9, r0, r4, lsr #30
     a94:	00000000 	andeq	r0, r0, r0
     a98:	0ac80000 	beq	ff200aa0 <_estack+0xdf1d0aa0>
     a9c:	0ade0800 	beq	ff782aa4 <_estack+0xdf752aa4>
     aa0:	00020800 	andeq	r0, r2, r0, lsl #16
     aa4:	0ade9f30 	beq	ff7a876c <_estack+0xdf77876c>
     aa8:	0ae00800 	beq	ff802ab0 <_estack+0xdf7d2ab0>
     aac:	00080800 	andeq	r0, r8, r0, lsl #16
     ab0:	24007331 	strcs	r7, [r0], #-817	; 0xfffffccf
     ab4:	9f1a007b 	svcls	0x001a007b
     ab8:	08000ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp}
     abc:	08000ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp}
     ac0:	73310008 	teqvc	r1, #8
     ac4:	007b247f 	rsbseq	r2, fp, pc, ror r4
     ac8:	0aee9f1a 	beq	ffba8738 <_estack+0xdfb78738>
     acc:	0b2e0800 	bleq	b82ad4 <_Min_Stack_Size+0xb826d4>
     ad0:	00010800 	andeq	r0, r1, r0, lsl #16
     ad4:	000b2e52 	andeq	r2, fp, r2, asr lr
     ad8:	000bc008 	andeq	ip, fp, r8
     adc:	72000408 	andvc	r0, r0, #8, 8	; 0x8000000
     ae0:	c09f2000 	addsgt	r2, pc, r0
     ae4:	c808000b 	stmdagt	r8, {r0, r1, r3}
     ae8:	0808000b 	stmdaeq	r8, {r0, r1, r3}
     aec:	7f733100 	svcvc	0x00733100
     af0:	1a007b24 	bne	1f788 <_Min_Stack_Size+0x1f388>
     af4:	000bcc9f 	muleq	fp, pc, ip	; <UNPREDICTABLE>
     af8:	000c2c08 	andeq	r2, ip, r8, lsl #24
     afc:	72000408 	andvc	r0, r0, #8, 8	; 0x8000000
     b00:	009f2000 	addseq	r2, pc, r0
     b04:	00000000 	andeq	r0, r0, r0
     b08:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     b0c:	de08000a 	cdple	0, 0, cr0, cr8, cr10, {0}
     b10:	0208000a 	andeq	r0, r8, #10
     b14:	4a9f3000 	bmi	fe7ccb1c <_estack+0xde79cb1c>
     b18:	9208000b 	andls	r0, r8, #11
     b1c:	0108000b 	tsteq	r8, fp
     b20:	0b925600 	bleq	fe496328 <_estack+0xde466328>
     b24:	0b980800 	bleq	fe602b2c <_estack+0xde5d2b2c>
     b28:	00010800 	andeq	r0, r1, r0, lsl #16
     b2c:	000b9855 	andeq	r9, fp, r5, asr r8
     b30:	000bc808 	andeq	ip, fp, r8, lsl #16
     b34:	3f000508 	svccc	0x00000508
     b38:	9f240077 	svcls	0x00240077
     b3c:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
     b40:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     b44:	00560001 	subseq	r0, r6, r1
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	2c000000 	stccs	0, cr0, [r0], {-0}
     b50:	3408000c 	strcc	r0, [r8], #-12
     b54:	0108000c 	tsteq	r8, ip
     b58:	0c345000 	ldceq	0, cr5, [r4], #-0
     b5c:	0c380800 	ldceq	8, cr0, [r8], #-0
     b60:	00040800 	andeq	r0, r4, r0, lsl #16
     b64:	9f5001f3 	svcls	0x005001f3
	...
     b70:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
     b74:	08000c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp}
     b78:	3c510001 	mrrccc	0, 0, r0, r1, cr1
     b7c:	4008000c 	andmi	r0, r8, ip
     b80:	0408000c 	streq	r0, [r8], #-12
     b84:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     b88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	000c4000 	andeq	r4, ip, r0
     b94:	000c4408 	andeq	r4, ip, r8, lsl #8
     b98:	51000108 	tstpl	r0, r8, lsl #2
     b9c:	08000c44 	stmdaeq	r0, {r2, r6, sl, fp}
     ba0:	08000c48 	stmdaeq	r0, {r3, r6, sl, fp}
     ba4:	01f30004 	mvnseq	r0, r4
     ba8:	00009f51 	andeq	r9, r0, r1, asr pc
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	0c480000 	mareq	acc0, r0, r8
     bb4:	0c660800 	stcleq	8, cr0, [r6], #-0
     bb8:	00010800 	andeq	r0, r1, r0, lsl #16
     bbc:	000c6650 	andeq	r6, ip, r0, asr r6
     bc0:	000c7208 	andeq	r7, ip, r8, lsl #4
     bc4:	f3000408 	vshl.u8	d0, d8, d0
     bc8:	009f5001 	addseq	r5, pc, r1
     bcc:	00000000 	andeq	r0, r0, r0
     bd0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     bd4:	8708000c 	strhi	r0, [r8, -ip]
     bd8:	0108000c 	tsteq	r8, ip
     bdc:	0c875000 	stceq	0, cr5, [r7], {0}
     be0:	0c900800 	ldceq	8, cr0, [r0], {0}
     be4:	00040800 	andeq	r0, r4, r0, lsl #16
     be8:	9f5001f3 	svcls	0x005001f3
	...
     bf4:	08000c90 	stmdaeq	r0, {r4, r7, sl, fp}
     bf8:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
     bfc:	98500001 	ldmdals	r0, {r0}^
     c00:	0408000c 	streq	r0, [r8], #-12
     c04:	0108000d 	tsteq	r8, sp
     c08:	00005400 	andeq	r5, r0, r0, lsl #8
     c0c:	00000000 	andeq	r0, r0, r0
     c10:	0c900000 	ldceq	0, cr0, [r0], {0}
     c14:	0c980800 	ldceq	8, cr0, [r8], {0}
     c18:	00010800 	andeq	r0, r1, r0, lsl #16
     c1c:	000c9851 	andeq	r9, ip, r1, asr r8
     c20:	000cf008 	andeq	pc, ip, r8
     c24:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
     c28:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
     c2c:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
     c30:	01f30004 	mvnseq	r0, r4
     c34:	00009f51 	andeq	r9, r0, r1, asr pc
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	0c900000 	ldceq	0, cr0, [r0], {0}
     c40:	0c980800 	ldceq	8, cr0, [r8], {0}
     c44:	00010800 	andeq	r0, r1, r0, lsl #16
     c48:	000c9852 	andeq	r9, ip, r2, asr r8
     c4c:	000cee08 	andeq	lr, ip, r8, lsl #28
     c50:	56000108 	strpl	r0, [r0], -r8, lsl #2
     c54:	08000cee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, fp}
     c58:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
     c5c:	01f30004 	mvnseq	r0, r4
     c60:	00009f52 	andeq	r9, r0, r2, asr pc
     c64:	00000000 	andeq	r0, r0, r0
     c68:	0d040000 	stceq	0, cr0, [r4, #-0]
     c6c:	0d0c0800 	stceq	8, cr0, [ip, #-0]
     c70:	00010800 	andeq	r0, r1, r0, lsl #16
     c74:	000d0c50 	andeq	r0, sp, r0, asr ip
     c78:	000eb808 	andeq	fp, lr, r8, lsl #16
     c7c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
     c88:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
     c8c:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     c90:	18510001 	ldmdane	r1, {r0}^
     c94:	b808000d 	stmdalt	r8, {r0, r2, r3}
     c98:	0408000e 	streq	r0, [r8], #-14
     c9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     ca0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ca4:	00000000 	andeq	r0, r0, r0
     ca8:	000d0400 	andeq	r0, sp, r0, lsl #8
     cac:	000d1e08 	andeq	r1, sp, r8, lsl #28
     cb0:	52000108 	andpl	r0, r0, #8, 2
     cb4:	08000d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp}
     cb8:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
     cbc:	01f30004 	mvnseq	r0, r4
     cc0:	00009f52 	andeq	r9, r0, r2, asr pc
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	0d040000 	stceq	0, cr0, [r4, #-0]
     ccc:	0d1e0800 	ldceq	8, cr0, [lr, #-0]
     cd0:	00010800 	andeq	r0, r1, r0, lsl #16
     cd4:	000d1e53 	andeq	r1, sp, r3, asr lr
     cd8:	000eb808 	andeq	fp, lr, r8, lsl #16
     cdc:	f3000408 	vshl.u8	d0, d8, d0
     ce0:	009f5301 	addseq	r5, pc, r1, lsl #6
     ce4:	00000000 	andeq	r0, r0, r0
     ce8:	04000000 	streq	r0, [r0], #-0
     cec:	ec08000d 	stc	0, cr0, [r8], {13}
     cf0:	0208000d 	andeq	r0, r8, #13
     cf4:	ec009100 	stfd	f1, [r0], {-0}
     cf8:	b808000d 	stmdalt	r8, {r0, r2, r3}
     cfc:	0208000e 	andeq	r0, r8, #14
     d00:	00009100 	andeq	r9, r0, r0, lsl #2
     d04:	00000000 	andeq	r0, r0, r0
     d08:	04000000 	streq	r0, [r0], #-0
     d0c:	ec08000d 	stc	0, cr0, [r8], {13}
     d10:	0208000d 	andeq	r0, r8, #13
     d14:	ec049100 	stfd	f1, [r4], {-0}
     d18:	b808000d 	stmdalt	r8, {r0, r2, r3}
     d1c:	0208000e 	andeq	r0, r8, #14
     d20:	00049100 	andeq	r9, r4, r0, lsl #2
     d24:	00000000 	andeq	r0, r0, r0
     d28:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     d2c:	9a08000d 	bls	200d68 <_Min_Stack_Size+0x200968>
     d30:	0208000d 	andeq	r0, r8, #13
     d34:	a4049100 	strge	r9, [r4], #-256	; 0xffffff00
     d38:	e608000d 	str	r0, [r8], -sp
     d3c:	0208000d 	andeq	r0, r8, #13
     d40:	ec049100 	stfd	f1, [r4], {-0}
     d44:	0208000d 	andeq	r0, r8, #13
     d48:	0208000e 	andeq	r0, r8, #14
     d4c:	10049100 	andne	r9, r4, r0, lsl #2
     d50:	ac08000e 	stcge	0, cr0, [r8], {14}
     d54:	0208000e 	andeq	r0, r8, #14
     d58:	00049100 	andeq	r9, r4, r0, lsl #2
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     d64:	8808000d 	stmdahi	r8, {r0, r2, r3}
     d68:	0108000d 	tsteq	r8, sp
     d6c:	0d885400 	cfstrseq	mvf5, [r8]
     d70:	0d9a0800 	ldceq	8, cr0, [sl]
     d74:	00020800 	andeq	r0, r2, r0, lsl #16
     d78:	0da40091 	stceq	0, cr0, [r4, #580]!	; 0x244
     d7c:	0dca0800 	stcleq	8, cr0, [sl]
     d80:	00010800 	andeq	r0, r1, r0, lsl #16
     d84:	000dca54 	andeq	ip, sp, r4, asr sl
     d88:	000de608 	andeq	lr, sp, r8, lsl #12
     d8c:	91000208 	tstls	r0, r8, lsl #4
     d90:	000dec00 	andeq	lr, sp, r0, lsl #24
     d94:	000e0208 	andeq	r0, lr, r8, lsl #4
     d98:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
     d9c:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
     da0:	08000e30 	stmdaeq	r0, {r4, r5, r9, sl, fp}
     da4:	30540001 	subscc	r0, r4, r1
     da8:	4408000e 	strmi	r0, [r8], #-14
     dac:	0208000e 	andeq	r0, r8, #14
     db0:	44009100 	strmi	r9, [r0], #-256	; 0xffffff00
     db4:	b808000e 	stmdalt	r8, {r1, r2, r3}
     db8:	0108000e 	tsteq	r8, lr
     dbc:	00005400 	andeq	r5, r0, r0, lsl #8
     dc0:	00000000 	andeq	r0, r0, r0
     dc4:	0dec0000 	stcleq	0, cr0, [ip]
     dc8:	0e020800 	cdpeq	8, 0, cr0, cr2, cr0, {0}
     dcc:	00060800 	andeq	r0, r6, r0, lsl #16
     dd0:	0100010c 	tsteq	r0, ip, lsl #2
     dd4:	00009f00 	andeq	r9, r0, r0, lsl #30
     dd8:	00000000 	andeq	r0, r0, r0
     ddc:	0dec0000 	stcleq	0, cr0, [ip]
     de0:	0e020800 	cdpeq	8, 0, cr0, cr2, cr0, {0}
     de4:	00020800 	andeq	r0, r2, r0, lsl #16
     de8:	00009f30 	andeq	r9, r0, r0, lsr pc
     dec:	00000000 	andeq	r0, r0, r0
     df0:	0dec0000 	stcleq	0, cr0, [ip]
     df4:	0e020800 	cdpeq	8, 0, cr0, cr2, cr0, {0}
     df8:	00010800 	andeq	r0, r1, r0, lsl #16
     dfc:	00000054 	andeq	r0, r0, r4, asr r0
     e00:	00000000 	andeq	r0, r0, r0
     e04:	000dec00 	andeq	lr, sp, r0, lsl #24
     e08:	000e0208 	andeq	r0, lr, r8, lsl #4
     e0c:	91000208 	tstls	r0, r8, lsl #4
     e10:	00000004 	andeq	r0, r0, r4
     e14:	00000000 	andeq	r0, r0, r0
     e18:	000dec00 	andeq	lr, sp, r0, lsl #24
     e1c:	000e0208 	andeq	r0, lr, r8, lsl #4
     e20:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
     e2c:	08000d2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, fp}
     e30:	08000d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp}
     e34:	04910002 	ldreq	r0, [r1], #2
     e38:	08000dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp}
     e3c:	08000de6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, fp}
     e40:	04910002 	ldreq	r0, [r1], #2
     e44:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
     e48:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     e4c:	04910002 	ldreq	r0, [r1], #2
	...
     e58:	08000d2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, fp}
     e5c:	08000d88 	stmdaeq	r0, {r3, r7, r8, sl, fp}
     e60:	88540001 	ldmdahi	r4, {r0}^
     e64:	9a08000d 	bls	200ea0 <_Min_Stack_Size+0x200aa0>
     e68:	0208000d 	andeq	r0, r8, #13
     e6c:	bc009100 	stfltd	f1, [r0], {-0}
     e70:	ca08000d 	bgt	200eac <_Min_Stack_Size+0x200aac>
     e74:	0108000d 	tsteq	r8, sp
     e78:	0dca5400 	cfstrdeq	mvd5, [sl]
     e7c:	0de60800 	stcleq	8, cr0, [r6]
     e80:	00020800 	andeq	r0, r2, r0, lsl #16
     e84:	0e100091 	mrceq	0, 0, r0, cr0, cr1, {4}
     e88:	0e300800 	cdpeq	8, 3, cr0, cr0, cr0, {0}
     e8c:	00010800 	andeq	r0, r1, r0, lsl #16
     e90:	000e3054 	andeq	r3, lr, r4, asr r0
     e94:	000e4408 	andeq	r4, lr, r8, lsl #8
     e98:	91000208 	tstls	r0, r8, lsl #4
     e9c:	000e4400 	andeq	r4, lr, r0, lsl #8
     ea0:	000eb808 	andeq	fp, lr, r8, lsl #16
     ea4:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
     eb0:	08000d2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, fp}
     eb4:	08000da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp}
     eb8:	bc550001 	mrrclt	0, 0, r0, r5, cr1
     ebc:	e608000d 	str	r0, [r8], -sp
     ec0:	0108000d 	tsteq	r8, sp
     ec4:	0e025500 	cfsh32eq	mvfx5, mvfx2, #0
     ec8:	0eb80800 	cdpeq	8, 11, cr0, cr8, cr0, {0}
     ecc:	00010800 	andeq	r0, r1, r0, lsl #16
     ed0:	00000055 	andeq	r0, r0, r5, asr r0
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	000d6200 	andeq	r6, sp, r0, lsl #4
     edc:	000da408 	andeq	sl, sp, r8, lsl #8
     ee0:	58000108 	stmdapl	r0, {r3, r8}
     ee4:	08000e02 	stmdaeq	r0, {r1, r9, sl, fp}
     ee8:	08000e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp}
     eec:	82580001 	subshi	r0, r8, #1
     ef0:	b808000e 	stmdalt	r8, {r1, r2, r3}
     ef4:	0108000e 	tsteq	r8, lr
     ef8:	00005800 	andeq	r5, r0, r0, lsl #16
     efc:	00000000 	andeq	r0, r0, r0
     f00:	0d620000 	stcleq	0, cr0, [r2, #-0]
     f04:	0d9a0800 	ldceq	8, cr0, [sl]
     f08:	00020800 	andeq	r0, r2, r0, lsl #16
     f0c:	0e100491 	cfcmpseq	r0, mvf0, mvf1
     f10:	0e720800 	cdpeq	8, 7, cr0, cr2, cr0, {0}
     f14:	00020800 	andeq	r0, r2, r0, lsl #16
     f18:	0e820491 	mcreq	4, 4, r0, cr2, cr1, {4}
     f1c:	0eac0800 	cdpeq	8, 10, cr0, cr12, cr0, {0}
     f20:	00020800 	andeq	r0, r2, r0, lsl #16
     f24:	00000491 	muleq	r0, r1, r4
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	0d620000 	stcleq	0, cr0, [r2, #-0]
     f30:	0d880800 	stceq	8, cr0, [r8]
     f34:	00010800 	andeq	r0, r1, r0, lsl #16
     f38:	000d8854 	andeq	r8, sp, r4, asr r8
     f3c:	000d9a08 	andeq	r9, sp, r8, lsl #20
     f40:	91000208 	tstls	r0, r8, lsl #4
     f44:	000e1000 	andeq	r1, lr, r0
     f48:	000e3008 	andeq	r3, lr, r8
     f4c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
     f50:	08000e30 	stmdaeq	r0, {r4, r5, r9, sl, fp}
     f54:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     f58:	00910002 	addseq	r0, r1, r2
     f5c:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     f60:	08000e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp}
     f64:	82540001 	subshi	r0, r4, #1
     f68:	b808000e 	stmdalt	r8, {r1, r2, r3}
     f6c:	0108000e 	tsteq	r8, lr
     f70:	00005400 	andeq	r5, r0, r0, lsl #8
     f74:	00000000 	andeq	r0, r0, r0
     f78:	0d620000 	stcleq	0, cr0, [r2, #-0]
     f7c:	0d9a0800 	ldceq	8, cr0, [sl]
     f80:	00010800 	andeq	r0, r1, r0, lsl #16
     f84:	000e1057 	andeq	r1, lr, r7, asr r0
     f88:	000e1a08 	andeq	r1, lr, r8, lsl #20
     f8c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
     f90:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     f94:	08000e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp}
     f98:	6a570001 	bvs	15c0fa4 <_Min_Stack_Size+0x15c0ba4>
     f9c:	7208000e 	andvc	r0, r8, #14
     fa0:	0108000e 	tsteq	r8, lr
     fa4:	00005700 	andeq	r5, r0, r0, lsl #14
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	0d620000 	stcleq	0, cr0, [r2, #-0]
     fb0:	0da40800 	stceq	8, cr0, [r4]
     fb4:	00010800 	andeq	r0, r1, r0, lsl #16
     fb8:	000e0256 	andeq	r0, lr, r6, asr r2
     fbc:	000e6408 	andeq	r6, lr, r8, lsl #8
     fc0:	56000108 	strpl	r0, [r0], -r8, lsl #2
     fc4:	08000e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp}
     fc8:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
     fcc:	82560001 	subshi	r0, r6, #1
     fd0:	b808000e 	stmdalt	r8, {r1, r2, r3}
     fd4:	0108000e 	tsteq	r8, lr
     fd8:	00005600 	andeq	r5, r0, r0, lsl #12
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	0d620000 	stcleq	0, cr0, [r2, #-0]
     fe4:	0da40800 	stceq	8, cr0, [r4]
     fe8:	00010800 	andeq	r0, r1, r0, lsl #16
     fec:	000e0255 	andeq	r0, lr, r5, asr r2
     ff0:	000e7208 	andeq	r7, lr, r8, lsl #4
     ff4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
     ff8:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
     ffc:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
    1000:	00550001 	subseq	r0, r5, r1
    1004:	00000000 	andeq	r0, r0, r0
    1008:	70000000 	andvc	r0, r0, r0
    100c:	9a08000d 	bls	201048 <_Min_Stack_Size+0x200c48>
    1010:	0208000d 	andeq	r0, r8, #13
    1014:	10049100 	andne	r9, r4, r0, lsl #2
    1018:	7208000e 	andvc	r0, r8, #14
    101c:	0208000e 	andeq	r0, r8, #14
    1020:	82049100 	andhi	r9, r4, #0, 2
    1024:	ac08000e 	stcge	0, cr0, [r8], {14}
    1028:	0208000e 	andeq	r0, r8, #14
    102c:	00049100 	andeq	r9, r4, r0, lsl #2
    1030:	00000000 	andeq	r0, r0, r0
    1034:	70000000 	andvc	r0, r0, r0
    1038:	8808000d 	stmdahi	r8, {r0, r2, r3}
    103c:	0108000d 	tsteq	r8, sp
    1040:	0d885400 	cfstrseq	mvf5, [r8]
    1044:	0d9a0800 	ldceq	8, cr0, [sl]
    1048:	00020800 	andeq	r0, r2, r0, lsl #16
    104c:	0e100091 	mrceq	0, 0, r0, cr0, cr1, {4}
    1050:	0e300800 	cdpeq	8, 3, cr0, cr0, cr0, {0}
    1054:	00010800 	andeq	r0, r1, r0, lsl #16
    1058:	000e3054 	andeq	r3, lr, r4, asr r0
    105c:	000e4408 	andeq	r4, lr, r8, lsl #8
    1060:	91000208 	tstls	r0, r8, lsl #4
    1064:	000e4400 	andeq	r4, lr, r0, lsl #8
    1068:	000e7208 	andeq	r7, lr, r8, lsl #4
    106c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    1070:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
    1074:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
    1078:	00540001 	subseq	r0, r4, r1
    107c:	00000000 	andeq	r0, r0, r0
    1080:	70000000 	andvc	r0, r0, r0
    1084:	a408000d 	strge	r0, [r8], #-13
    1088:	0108000d 	tsteq	r8, sp
    108c:	0e025500 	cfsh32eq	mvfx5, mvfx2, #0
    1090:	0e720800 	cdpeq	8, 7, cr0, cr2, cr0, {0}
    1094:	00010800 	andeq	r0, r1, r0, lsl #16
    1098:	000e8255 	andeq	r8, lr, r5, asr r2
    109c:	000eb808 	andeq	fp, lr, r8, lsl #16
    10a0:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    10ac:	08000e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp}
    10b0:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
    10b4:	04910002 	ldreq	r0, [r1], #2
    10b8:	08000e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp}
    10bc:	08000e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp}
    10c0:	04910002 	ldreq	r0, [r1], #2
    10c4:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
    10c8:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
    10cc:	04910002 	ldreq	r0, [r1], #2
	...
    10d8:	08000e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp}
    10dc:	08000e30 	stmdaeq	r0, {r4, r5, r9, sl, fp}
    10e0:	30540001 	subscc	r0, r4, r1
    10e4:	4408000e 	strmi	r0, [r8], #-14
    10e8:	0208000e 	andeq	r0, r8, #14
    10ec:	62009100 	andvs	r9, r0, #0, 2
    10f0:	6a08000e 	bvs	201130 <_Min_Stack_Size+0x200d30>
    10f4:	0108000e 	tsteq	r8, lr
    10f8:	0e825400 	cdpeq	4, 8, cr5, cr2, cr0, {0}
    10fc:	0ea00800 	cdpeq	8, 10, cr0, cr0, cr0, {0}
    1100:	00010800 	andeq	r0, r1, r0, lsl #16
    1104:	00000054 	andeq	r0, r0, r4, asr r0
    1108:	00000000 	andeq	r0, r0, r0
    110c:	000e1a00 	andeq	r1, lr, r0, lsl #20
    1110:	000e4408 	andeq	r4, lr, r8, lsl #8
    1114:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    1118:	08000e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp}
    111c:	08000e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp}
    1120:	82550001 	subshi	r0, r5, #1
    1124:	a008000e 	andge	r0, r8, lr
    1128:	0108000e 	tsteq	r8, lr
    112c:	00005500 	andeq	r5, r0, r0, lsl #10
    1130:	00000000 	andeq	r0, r0, r0
    1134:	0ea00000 	cdpeq	0, 10, cr0, cr0, cr0, {0}
    1138:	0eac0800 	cdpeq	8, 10, cr0, cr12, cr0, {0}
    113c:	00020800 	andeq	r0, r2, r0, lsl #16
    1140:	00000491 	muleq	r0, r1, r4
    1144:	00000000 	andeq	r0, r0, r0
    1148:	0eb80000 	cdpeq	0, 11, cr0, cr8, cr0, {0}
    114c:	0ec00800 	cdpeq	8, 12, cr0, cr0, cr0, {0}
    1150:	00010800 	andeq	r0, r1, r0, lsl #16
    1154:	000ec050 	andeq	ip, lr, r0, asr r0
    1158:	0010f808 	andseq	pc, r0, r8, lsl #16
    115c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    1168:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
    116c:	08000ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp}
    1170:	c4510001 	ldrbgt	r0, [r1], #-1
    1174:	f808000e 			; <UNDEFINED> instruction: 0xf808000e
    1178:	04080010 	streq	r0, [r8], #-16
    117c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1180:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1184:	00000000 	andeq	r0, r0, r0
    1188:	000eb800 	andeq	fp, lr, r0, lsl #16
    118c:	000eda08 	andeq	sp, lr, r8, lsl #20
    1190:	52000108 	andpl	r0, r0, #8, 2
    1194:	08000eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp}
    1198:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
    119c:	01f30004 	mvnseq	r0, r4
    11a0:	00009f52 	andeq	r9, r0, r2, asr pc
    11a4:	00000000 	andeq	r0, r0, r0
    11a8:	0eb80000 	cdpeq	0, 11, cr0, cr8, cr0, {0}
    11ac:	0eda0800 	cdpeq	8, 13, cr0, cr10, cr0, {0}
    11b0:	00010800 	andeq	r0, r1, r0, lsl #16
    11b4:	000eda53 	andeq	sp, lr, r3, asr sl
    11b8:	0010f808 	andseq	pc, r0, r8, lsl #16
    11bc:	f3000408 	vshl.u8	d0, d8, d0
    11c0:	009f5301 	addseq	r5, pc, r1, lsl #6
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    11cc:	4808000e 	stmdami	r8, {r1, r2, r3}
    11d0:	0208000f 	andeq	r0, r8, #15
    11d4:	48009100 	stmdami	r0, {r8, ip, pc}
    11d8:	f808000f 			; <UNDEFINED> instruction: 0xf808000f
    11dc:	02080010 	andeq	r0, r8, #16
    11e0:	00009100 	andeq	r9, r0, r0, lsl #2
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    11ec:	4808000e 	stmdami	r8, {r1, r2, r3}
    11f0:	0208000f 	andeq	r0, r8, #15
    11f4:	48049100 	stmdami	r4, {r8, ip, pc}
    11f8:	f808000f 			; <UNDEFINED> instruction: 0xf808000f
    11fc:	02080010 	andeq	r0, r8, #16
    1200:	00049100 	andeq	r9, r4, r0, lsl #2
    1204:	00000000 	andeq	r0, r0, r0
    1208:	da000000 	ble	1210 <_Min_Stack_Size+0xe10>
    120c:	3a08000e 	bcc	20124c <_Min_Stack_Size+0x200e4c>
    1210:	0208000f 	andeq	r0, r8, #15
    1214:	48049100 	stmdami	r4, {r8, ip, pc}
    1218:	b608000f 	strlt	r0, [r8], -pc
    121c:	0208000f 	andeq	r0, r8, #15
    1220:	d4049100 	strle	r9, [r4], #-256	; 0xffffff00
    1224:	0008000f 	andeq	r0, r8, pc
    1228:	02080010 	andeq	r0, r8, #16
    122c:	0e049100 	mvfeqs	f1, f0
    1230:	ec080010 	stc	0, cr0, [r8], {16}
    1234:	02080010 	andeq	r0, r8, #16
    1238:	00049100 	andeq	r9, r4, r0, lsl #2
    123c:	00000000 	andeq	r0, r0, r0
    1240:	da000000 	ble	1248 <_Min_Stack_Size+0xe48>
    1244:	2808000e 	stmdacs	r8, {r1, r2, r3}
    1248:	0108000f 	tsteq	r8, pc
    124c:	0f285400 	svceq	0x00285400
    1250:	0f3a0800 	svceq	0x003a0800
    1254:	00020800 	andeq	r0, r2, r0, lsl #16
    1258:	0f480091 	svceq	0x00480091
    125c:	0f940800 	svceq	0x00940800
    1260:	00010800 	andeq	r0, r1, r0, lsl #16
    1264:	000f9454 	andeq	r9, pc, r4, asr r4	; <UNPREDICTABLE>
    1268:	000fb008 	andeq	fp, pc, r8
    126c:	91000208 	tstls	r0, r8, lsl #4
    1270:	000fb000 	andeq	fp, pc, r0
    1274:	000fc608 	andeq	ip, pc, r8, lsl #12
    1278:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    127c:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
    1280:	08000ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    1284:	fa540001 	blx	1501290 <_Min_Stack_Size+0x1500e90>
    1288:	0008000f 	andeq	r0, r8, pc
    128c:	02080010 	andeq	r0, r8, #16
    1290:	0e009100 	mvfeqs	f1, f0
    1294:	f8080010 			; <UNDEFINED> instruction: 0xf8080010
    1298:	01080010 	tsteq	r8, r0, lsl r0
    129c:	00005400 	andeq	r5, r0, r0, lsl #8
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	0ee60000 	cdpeq	0, 14, cr0, cr6, cr0, {0}
    12a8:	0f3a0800 	svceq	0x003a0800
    12ac:	00020800 	andeq	r0, r2, r0, lsl #16
    12b0:	0f600491 	svceq	0x00600491
    12b4:	0fb00800 	svceq	0x00b00800
    12b8:	00020800 	andeq	r0, r2, r0, lsl #16
    12bc:	0fd80491 	svceq	0x00d80491
    12c0:	10000800 	andne	r0, r0, r0, lsl #16
    12c4:	00020800 	andeq	r0, r2, r0, lsl #16
    12c8:	100e0491 	mulne	lr, r1, r4
    12cc:	10ec0800 	rscne	r0, ip, r0, lsl #16
    12d0:	00020800 	andeq	r0, r2, r0, lsl #16
    12d4:	00000491 	muleq	r0, r1, r4
    12d8:	00000000 	andeq	r0, r0, r0
    12dc:	0ee60000 	cdpeq	0, 14, cr0, cr6, cr0, {0}
    12e0:	0f280800 	svceq	0x00280800
    12e4:	00010800 	andeq	r0, r1, r0, lsl #16
    12e8:	000f2854 	andeq	r2, pc, r4, asr r8	; <UNPREDICTABLE>
    12ec:	000f3a08 	andeq	r3, pc, r8, lsl #20
    12f0:	91000208 	tstls	r0, r8, lsl #4
    12f4:	000f6000 	andeq	r6, pc, r0
    12f8:	000f9408 	andeq	r9, pc, r8, lsl #8
    12fc:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    1300:	08000f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp}
    1304:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
    1308:	00910002 	addseq	r0, r1, r2
    130c:	08000fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp}
    1310:	08000ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    1314:	fa540001 	blx	1501320 <_Min_Stack_Size+0x1500f20>
    1318:	0008000f 	andeq	r0, r8, pc
    131c:	02080010 	andeq	r0, r8, #16
    1320:	0e009100 	mvfeqs	f1, f0
    1324:	f8080010 			; <UNDEFINED> instruction: 0xf8080010
    1328:	01080010 	tsteq	r8, r0, lsl r0
    132c:	00005400 	andeq	r5, r0, r0, lsl #8
    1330:	00000000 	andeq	r0, r0, r0
    1334:	0ee60000 	cdpeq	0, 14, cr0, cr6, cr0, {0}
    1338:	0f3a0800 	svceq	0x003a0800
    133c:	00010800 	andeq	r0, r1, r0, lsl #16
    1340:	000f6057 	andeq	r6, pc, r7, asr r0	; <UNPREDICTABLE>
    1344:	000fa608 	andeq	sl, pc, r8, lsl #12
    1348:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    134c:	08000fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp}
    1350:	08000fe2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, fp}
    1354:	0e570001 	cdpeq	0, 5, cr0, cr7, cr1, {0}
    1358:	32080010 	andcc	r0, r8, #16
    135c:	01080010 	tsteq	r8, r0, lsl r0
    1360:	10ae5700 	adcne	r5, lr, r0, lsl #14
    1364:	10be0800 	adcsne	r0, lr, r0, lsl #16
    1368:	00010800 	andeq	r0, r1, r0, lsl #16
    136c:	0010dc57 	andseq	sp, r0, r7, asr ip
    1370:	0010e008 	andseq	lr, r0, r8
    1374:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1380:	08000ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp}
    1384:	08000f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp}
    1388:	60560001 	subsvs	r0, r6, r1
    138c:	8e08000f 	cdphi	0, 0, cr0, cr8, cr15, {0}
    1390:	0108000f 	tsteq	r8, pc
    1394:	0fd85600 	svceq	0x00d85600
    1398:	0fe00800 	svceq	0x00e00800
    139c:	00010800 	andeq	r0, r1, r0, lsl #16
    13a0:	00100e56 	andseq	r0, r0, r6, asr lr
    13a4:	00104408 	andseq	r4, r0, r8, lsl #8
    13a8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    13ac:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
    13b0:	08001066 	stmdaeq	r0, {r1, r2, r5, r6, ip}
    13b4:	ae560001 	cdpge	0, 5, cr0, cr6, cr1, {0}
    13b8:	e0080010 	and	r0, r8, r0, lsl r0
    13bc:	01080010 	tsteq	r8, r0, lsl r0
    13c0:	00005600 	andeq	r5, r0, r0, lsl #12
    13c4:	00000000 	andeq	r0, r0, r0
    13c8:	0ee60000 	cdpeq	0, 14, cr0, cr6, cr0, {0}
    13cc:	0eea0800 	cdpeq	8, 14, cr0, cr10, cr0, {0}
    13d0:	00010800 	andeq	r0, r1, r0, lsl #16
    13d4:	00000059 	andeq	r0, r0, r9, asr r0
    13d8:	00000000 	andeq	r0, r0, r0
    13dc:	000ee600 	andeq	lr, lr, r0, lsl #12
    13e0:	000f4208 	andeq	r4, pc, r8, lsl #4
    13e4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    13e8:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    13ec:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
    13f0:	c6550001 	ldrbgt	r0, [r5], -r1
    13f4:	d408000f 	strle	r0, [r8], #-15
    13f8:	0108000f 	tsteq	r8, pc
    13fc:	0fd85500 	svceq	0x00d85500
    1400:	10f80800 	rscsne	r0, r8, r0, lsl #16
    1404:	00010800 	andeq	r0, r1, r0, lsl #16
    1408:	00000055 	andeq	r0, r0, r5, asr r0
    140c:	00000000 	andeq	r0, r0, r0
    1410:	000ef000 	andeq	pc, lr, r0
    1414:	000f3a08 	andeq	r3, pc, r8, lsl #20
    1418:	91000208 	tstls	r0, r8, lsl #4
    141c:	000f6004 	andeq	r6, pc, r4
    1420:	000fb008 	andeq	fp, pc, r8
    1424:	91000208 	tstls	r0, r8, lsl #4
    1428:	000fd804 	andeq	sp, pc, r4, lsl #16
    142c:	00100008 	andseq	r0, r0, r8
    1430:	91000208 	tstls	r0, r8, lsl #4
    1434:	00100e04 	andseq	r0, r0, r4, lsl #28
    1438:	0010ec08 	andseq	lr, r0, r8, lsl #24
    143c:	91000208 	tstls	r0, r8, lsl #4
    1440:	00000004 	andeq	r0, r0, r4
    1444:	00000000 	andeq	r0, r0, r0
    1448:	000ef000 	andeq	pc, lr, r0
    144c:	000f2808 	andeq	r2, pc, r8, lsl #16
    1450:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    1454:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
    1458:	08000f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp}
    145c:	00910002 	addseq	r0, r1, r2
    1460:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    1464:	08000f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp}
    1468:	94540001 	ldrbls	r0, [r4], #-1
    146c:	b008000f 	andlt	r0, r8, pc
    1470:	0208000f 	andeq	r0, r8, #15
    1474:	d8009100 	stmdale	r0, {r8, ip, pc}
    1478:	fa08000f 	blx	2014bc <_Min_Stack_Size+0x2010bc>
    147c:	0108000f 	tsteq	r8, pc
    1480:	0ffa5400 	svceq	0x00fa5400
    1484:	10000800 	andne	r0, r0, r0, lsl #16
    1488:	00020800 	andeq	r0, r2, r0, lsl #16
    148c:	100e0091 	mulne	lr, r1, r0
    1490:	10f80800 	rscsne	r0, r8, r0, lsl #16
    1494:	00010800 	andeq	r0, r1, r0, lsl #16
    1498:	00000054 	andeq	r0, r0, r4, asr r0
    149c:	00000000 	andeq	r0, r0, r0
    14a0:	000ef000 	andeq	pc, lr, r0
    14a4:	000f4208 	andeq	r4, pc, r8, lsl #4
    14a8:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    14ac:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    14b0:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
    14b4:	c6550001 	ldrbgt	r0, [r5], -r1
    14b8:	d408000f 	strle	r0, [r8], #-15
    14bc:	0108000f 	tsteq	r8, pc
    14c0:	0fd85500 	svceq	0x00d85500
    14c4:	10f80800 	rscsne	r0, r8, r0, lsl #16
    14c8:	00010800 	andeq	r0, r1, r0, lsl #16
    14cc:	00000055 	andeq	r0, r0, r5, asr r0
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	000f1200 	andeq	r1, pc, r0, lsl #4
    14d8:	000f3a08 	andeq	r3, pc, r8, lsl #20
    14dc:	91000208 	tstls	r0, r8, lsl #4
    14e0:	000fd804 	andeq	sp, pc, r4, lsl #16
    14e4:	00100008 	andseq	r0, r0, r8
    14e8:	91000208 	tstls	r0, r8, lsl #4
    14ec:	00100e04 	andseq	r0, r0, r4, lsl #28
    14f0:	0010ae08 	andseq	sl, r0, r8, lsl #28
    14f4:	91000208 	tstls	r0, r8, lsl #4
    14f8:	0010be04 	andseq	fp, r0, r4, lsl #28
    14fc:	0010dc08 	andseq	sp, r0, r8, lsl #24
    1500:	91000208 	tstls	r0, r8, lsl #4
    1504:	0010e004 	andseq	lr, r0, r4
    1508:	0010ec08 	andseq	lr, r0, r8, lsl #24
    150c:	91000208 	tstls	r0, r8, lsl #4
    1510:	00000004 	andeq	r0, r0, r4
    1514:	00000000 	andeq	r0, r0, r0
    1518:	000f1200 	andeq	r1, pc, r0, lsl #4
    151c:	000f2808 	andeq	r2, pc, r8, lsl #16
    1520:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    1524:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
    1528:	08000f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp}
    152c:	00910002 	addseq	r0, r1, r2
    1530:	08000fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp}
    1534:	08000ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    1538:	fa540001 	blx	1501544 <_Min_Stack_Size+0x1501144>
    153c:	0008000f 	andeq	r0, r8, pc
    1540:	02080010 	andeq	r0, r8, #16
    1544:	0e009100 	mvfeqs	f1, f0
    1548:	ae080010 	mcrge	0, 0, r0, cr8, cr0, {0}
    154c:	01080010 	tsteq	r8, r0, lsl r0
    1550:	10be5400 	adcsne	r5, lr, r0, lsl #8
    1554:	10dc0800 	sbcsne	r0, ip, r0, lsl #16
    1558:	00010800 	andeq	r0, r1, r0, lsl #16
    155c:	0010e054 	andseq	lr, r0, r4, asr r0
    1560:	0010f808 	andseq	pc, r0, r8, lsl #16
    1564:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    1570:	08000f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp}
    1574:	08000f40 	stmdaeq	r0, {r6, r8, r9, sl, fp}
    1578:	c6550001 	ldrbgt	r0, [r5], -r1
    157c:	d408000f 	strle	r0, [r8], #-15
    1580:	0108000f 	tsteq	r8, pc
    1584:	0fd85500 	svceq	0x00d85500
    1588:	10ae0800 	adcne	r0, lr, r0, lsl #16
    158c:	00010800 	andeq	r0, r1, r0, lsl #16
    1590:	0010be55 	andseq	fp, r0, r5, asr lr
    1594:	0010dc08 	andseq	sp, r0, r8, lsl #24
    1598:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    159c:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
    15a0:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
    15a4:	00550001 	subseq	r0, r5, r1
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	74000000 	strvc	r0, [r0], #-0
    15b0:	ae080010 	mcrge	0, 0, r0, cr8, cr0, {0}
    15b4:	06080010 			; <UNDEFINED> instruction: 0x06080010
    15b8:	00010c00 	andeq	r0, r1, r0, lsl #24
    15bc:	009f0001 	addseq	r0, pc, r1
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	74000000 	strvc	r0, [r0], #-0
    15c8:	ae080010 	mcrge	0, 0, r0, cr8, cr0, {0}
    15cc:	02080010 	andeq	r0, r8, #16
    15d0:	009f3000 	addseq	r3, pc, r0
    15d4:	00000000 	andeq	r0, r0, r0
    15d8:	74000000 	strvc	r0, [r0], #-0
    15dc:	ae080010 	mcrge	0, 0, r0, cr8, cr0, {0}
    15e0:	02080010 	andeq	r0, r8, #16
    15e4:	00049100 	andeq	r9, r4, r0, lsl #2
    15e8:	00000000 	andeq	r0, r0, r0
    15ec:	74000000 	strvc	r0, [r0], #-0
    15f0:	ae080010 	mcrge	0, 0, r0, cr8, cr0, {0}
    15f4:	01080010 	tsteq	r8, r0, lsl r0
    15f8:	00005400 	andeq	r5, r0, r0, lsl #8
    15fc:	00000000 	andeq	r0, r0, r0
    1600:	10740000 	rsbsne	r0, r4, r0
    1604:	10ae0800 	adcne	r0, lr, r0, lsl #16
    1608:	00010800 	andeq	r0, r1, r0, lsl #16
    160c:	00000055 	andeq	r0, r0, r5, asr r0
    1610:	00000000 	andeq	r0, r0, r0
    1614:	000fb000 	andeq	fp, pc, r0
    1618:	000fc608 	andeq	ip, pc, r8, lsl #12
    161c:	0c000608 	stceq	6, cr0, [r0], {8}
    1620:	00010001 	andeq	r0, r1, r1
    1624:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1628:	00000000 	andeq	r0, r0, r0
    162c:	000fb000 	andeq	fp, pc, r0
    1630:	000fc608 	andeq	ip, pc, r8, lsl #12
    1634:	30000208 	andcc	r0, r0, r8, lsl #4
    1638:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    163c:	00000000 	andeq	r0, r0, r0
    1640:	000fb000 	andeq	fp, pc, r0
    1644:	000fc608 	andeq	ip, pc, r8, lsl #12
    1648:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    1654:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
    1658:	08000fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp}
    165c:	04910002 	ldreq	r0, [r1], #2
	...
    1668:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
    166c:	08000fc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp}
    1670:	00550001 	subseq	r0, r5, r1
    1674:	00000000 	andeq	r0, r0, r0
    1678:	e0000000 	and	r0, r0, r0
    167c:	ec080010 	stc	0, cr0, [r8], {16}
    1680:	02080010 	andeq	r0, r8, #16
    1684:	00049100 	andeq	r9, r4, r0, lsl #2
    1688:	00000000 	andeq	r0, r0, r0
    168c:	32000000 	andcc	r0, r0, #0
    1690:	44080010 	strmi	r0, [r8], #-16
    1694:	02080010 	andeq	r0, r8, #16
    1698:	64049100 	strvs	r9, [r4], #-256	; 0xffffff00
    169c:	6a080010 	bvs	2016e4 <_Min_Stack_Size+0x2012e4>
    16a0:	02080010 	andeq	r0, r8, #16
    16a4:	be049100 	mvflts	f1, f0
    16a8:	dc080010 	stcle	0, cr0, [r8], {16}
    16ac:	02080010 	andeq	r0, r8, #16
    16b0:	00049100 	andeq	r9, r4, r0, lsl #2
    16b4:	00000000 	andeq	r0, r0, r0
    16b8:	32000000 	andcc	r0, r0, #0
    16bc:	44080010 	strmi	r0, [r8], #-16
    16c0:	01080010 	tsteq	r8, r0, lsl r0
    16c4:	10645400 	rsbne	r5, r4, r0, lsl #8
    16c8:	106a0800 	rsbne	r0, sl, r0, lsl #16
    16cc:	00010800 	andeq	r0, r1, r0, lsl #16
    16d0:	0010be54 	andseq	fp, r0, r4, asr lr
    16d4:	0010dc08 	andseq	sp, r0, r8, lsl #24
    16d8:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    16e4:	08001032 	stmdaeq	r0, {r1, r4, r5, ip}
    16e8:	08001044 	stmdaeq	r0, {r2, r6, ip}
    16ec:	64550001 	ldrbvs	r0, [r5], #-1
    16f0:	6a080010 	bvs	201738 <_Min_Stack_Size+0x201338>
    16f4:	01080010 	tsteq	r8, r0, lsl r0
    16f8:	10be5500 	adcsne	r5, lr, r0, lsl #10
    16fc:	10dc0800 	sbcsne	r0, ip, r0, lsl #16
    1700:	00010800 	andeq	r0, r1, r0, lsl #16
    1704:	00000055 	andeq	r0, r0, r5, asr r0
    1708:	00000000 	andeq	r0, r0, r0
    170c:	0010fc00 	andseq	pc, r0, r0, lsl #24
    1710:	00111008 	andseq	r1, r1, r8
    1714:	50000108 	andpl	r0, r0, r8, lsl #2
    1718:	08001110 	stmdaeq	r0, {r4, r8, ip}
    171c:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
    1720:	b0540001 	subslt	r0, r4, r1
    1724:	b7080011 	smladlt	r8, r1, r0, r0
    1728:	01080011 	tsteq	r8, r1, lsl r0
    172c:	11b75000 			; <UNDEFINED> instruction: 0x11b75000
    1730:	11da0800 	bicsne	r0, sl, r0, lsl #16
    1734:	00010800 	andeq	r0, r1, r0, lsl #16
    1738:	0011da54 	andseq	sp, r1, r4, asr sl
    173c:	0011dc08 	andseq	sp, r1, r8, lsl #24
    1740:	50000108 	andpl	r0, r0, r8, lsl #2
    1744:	080011dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip}
    1748:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
    174c:	01f30004 	mvnseq	r0, r4
    1750:	00009f50 	andeq	r9, r0, r0, asr pc
    1754:	00000000 	andeq	r0, r0, r0
    1758:	10fc0000 	rscsne	r0, ip, r0
    175c:	11320800 	teqne	r2, r0, lsl #16
    1760:	00020800 	andeq	r0, r2, r0, lsl #16
    1764:	11329f30 	teqne	r2, r0, lsr pc
    1768:	11440800 	cmpne	r4, r0, lsl #16
    176c:	00010800 	andeq	r0, r1, r0, lsl #16
    1770:	00114452 	andseq	r4, r1, r2, asr r4
    1774:	00114808 	andseq	r4, r1, r8, lsl #16
    1778:	73000208 	movwvc	r0, #520	; 0x208
    177c:	00114804 	andseq	r4, r1, r4, lsl #16
    1780:	00114c08 	andseq	r4, r1, r8, lsl #24
    1784:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    1788:	11869f7f 	orrne	r9, r6, pc, ror pc
    178c:	11920800 	orrsne	r0, r2, r0, lsl #16
    1790:	00010800 	andeq	r0, r1, r0, lsl #16
    1794:	00119252 	andseq	r9, r1, r2, asr r2
    1798:	00119c08 	andseq	r9, r1, r8, lsl #24
    179c:	73000208 	movwvc	r0, #520	; 0x208
    17a0:	00119c04 	andseq	r9, r1, r4, lsl #24
    17a4:	0011a608 	andseq	sl, r1, r8, lsl #12
    17a8:	70001808 	andvc	r1, r0, r8, lsl #16
    17ac:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    17b0:	de830c25 	cdple	12, 8, cr0, cr3, cr5, {1}
    17b4:	25f7431b 	ldrbcs	r4, [r7, #795]!	; 0x31b
    17b8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    17bc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    17c0:	b09f2542 	addslt	r2, pc, r2, asr #10
    17c4:	ba080011 	blt	201810 <_Min_Stack_Size+0x201410>
    17c8:	02080011 	andeq	r0, r8, #17
    17cc:	ba9f3000 	blt	fe7cd7d4 <_estack+0xde79d7d4>
    17d0:	c6080011 			; <UNDEFINED> instruction: 0xc6080011
    17d4:	18080011 	stmdane	r8, {r0, r4}
    17d8:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    17dc:	0c25f72c 	stceq	7, cr15, [r5], #-176	; 0xffffff50
    17e0:	431bde83 	tstmi	fp, #2096	; 0x830
    17e4:	081e25f7 	ldmdaeq	lr, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}
    17e8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0xfffff8e0
    17ec:	25422cf7 	strbcs	r2, [r2, #-3319]	; 0xfffff309
    17f0:	0011da9f 	mulseq	r1, pc, sl	; <UNPREDICTABLE>
    17f4:	0011ec08 	andseq	lr, r1, r8, lsl #24
    17f8:	30000208 	andcc	r0, r0, r8, lsl #4
    17fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1800:	00000000 	andeq	r0, r0, r0
    1804:	0010fc00 	andseq	pc, r0, r0, lsl #24
    1808:	00112608 	andseq	r2, r1, r8, lsl #12
    180c:	30000208 	andcc	r0, r0, r8, lsl #4
    1810:	0011269f 	mulseq	r1, pc, r6	; <UNPREDICTABLE>
    1814:	00113e08 	andseq	r3, r1, r8, lsl #28
    1818:	50000108 	andpl	r0, r0, r8, lsl #2
    181c:	08001186 	stmdaeq	r0, {r1, r2, r7, r8, ip}
    1820:	080011a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, ip}
    1824:	b0500001 	subslt	r0, r0, r1
    1828:	ba080011 	blt	201874 <_Min_Stack_Size+0x201474>
    182c:	02080011 	andeq	r0, r8, #17
    1830:	ba9f3000 	blt	fe7cd838 <_estack+0xde79d838>
    1834:	c6080011 			; <UNDEFINED> instruction: 0xc6080011
    1838:	01080011 	tsteq	r8, r1, lsl r0
    183c:	11da5000 	bicsne	r5, sl, r0
    1840:	11ec0800 	mvnne	r0, r0, lsl #16
    1844:	00020800 	andeq	r0, r2, r0, lsl #16
    1848:	00009f30 	andeq	r9, r0, r0, lsr pc
    184c:	00000000 	andeq	r0, r0, r0
    1850:	11f00000 	mvnsne	r0, r0
    1854:	12090800 	andne	r0, r9, #0, 16
    1858:	00010800 	andeq	r0, r1, r0, lsl #16
    185c:	00120950 	andseq	r0, r2, r0, asr r9
    1860:	00122008 	andseq	r2, r2, r8
    1864:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    1868:	08001220 	stmdaeq	r0, {r5, r9, ip}
    186c:	08001222 	stmdaeq	r0, {r1, r5, r9, ip}
    1870:	22500001 	subscs	r0, r0, #1
    1874:	24080012 	strcs	r0, [r8], #-18	; 0xffffffee
    1878:	04080012 	streq	r0, [r8], #-18	; 0xffffffee
    187c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1880:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1884:	00000000 	andeq	r0, r0, r0
    1888:	00122400 	andseq	r2, r2, r0, lsl #8
    188c:	00123508 	andseq	r3, r2, r8, lsl #10
    1890:	50000108 	andpl	r0, r0, r8, lsl #2
    1894:	08001235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip}
    1898:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    189c:	00540001 	subseq	r0, r4, r1
    18a0:	00000000 	andeq	r0, r0, r0
    18a4:	24000000 	strcs	r0, [r0], #-0
    18a8:	35080012 	strcc	r0, [r8, #-18]	; 0xffffffee
    18ac:	01080012 	tsteq	r8, r2, lsl r0
    18b0:	12355100 	eorsne	r5, r5, #0, 2
    18b4:	15440800 	strbne	r0, [r4, #-2048]	; 0xfffff800
    18b8:	00040800 	andeq	r0, r4, r0, lsl #16
    18bc:	9f5101f3 	svcls	0x005101f3
	...
    18c8:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
    18cc:	08001235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip}
    18d0:	35520001 	ldrbcc	r0, [r2, #-1]
    18d4:	42080012 	andmi	r0, r8, #18
    18d8:	01080012 	tsteq	r8, r2, lsl r0
    18dc:	12425700 	subne	r5, r2, #0, 14
    18e0:	12480800 	subne	r0, r8, #0, 16
    18e4:	00040800 	andeq	r0, r4, r0, lsl #16
    18e8:	9f5201f3 	svcls	0x005201f3
    18ec:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
    18f0:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
    18f4:	cc570001 	mrrcgt	0, 0, r0, r7, cr1
    18f8:	ac080012 	stcge	0, cr0, [r8], {18}
    18fc:	04080013 	streq	r0, [r8], #-19	; 0xffffffed
    1900:	5201f300 	andpl	pc, r1, #0, 6
    1904:	0013ac9f 	mulseq	r3, pc, ip	; <UNPREDICTABLE>
    1908:	0013c008 	andseq	ip, r3, r8
    190c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1910:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
    1914:	08001408 	stmdaeq	r0, {r3, sl, ip}
    1918:	01f30004 	mvnseq	r0, r4
    191c:	14089f52 	strne	r9, [r8], #-3922	; 0xfffff0ae
    1920:	14320800 	ldrtne	r0, [r2], #-2048	; 0xfffff800
    1924:	00010800 	andeq	r0, r1, r0, lsl #16
    1928:	00143257 	andseq	r3, r4, r7, asr r2
    192c:	00151008 	andseq	r1, r5, r8
    1930:	f3000408 	vshl.u8	d0, d8, d0
    1934:	109f5201 	addsne	r5, pc, r1, lsl #4
    1938:	24080015 	strcs	r0, [r8], #-21	; 0xffffffeb
    193c:	01080015 	tsteq	r8, r5, lsl r0
    1940:	15245700 	strne	r5, [r4, #-1792]!	; 0xfffff900
    1944:	15440800 	strbne	r0, [r4, #-2048]	; 0xfffff800
    1948:	00040800 	andeq	r0, r4, r0, lsl #16
    194c:	9f5201f3 	svcls	0x005201f3
	...
    1958:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
    195c:	08001235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip}
    1960:	35530001 	ldrbcc	r0, [r3, #-1]
    1964:	44080012 	strmi	r0, [r8], #-18	; 0xffffffee
    1968:	04080015 	streq	r0, [r8], #-21	; 0xffffffeb
    196c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1970:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1974:	00000000 	andeq	r0, r0, r0
    1978:	00122400 	andseq	r2, r2, r0, lsl #8
    197c:	00124808 	andseq	r4, r2, r8, lsl #16
    1980:	91000208 	tstls	r0, r8, lsl #4
    1984:	00124800 	andseq	r4, r2, r0, lsl #16
    1988:	00154408 	andseq	r4, r5, r8, lsl #8
    198c:	91000208 	tstls	r0, r8, lsl #4
	...
    1998:	00122e00 	andseq	r2, r2, r0, lsl #28
    199c:	00123e08 	andseq	r3, r2, r8, lsl #28
    19a0:	30000208 	andcc	r0, r0, r8, lsl #4
    19a4:	00123e9f 	mulseq	r2, pc, lr	; <UNPREDICTABLE>
    19a8:	00124008 	andseq	r4, r2, r8
    19ac:	50000108 	andpl	r0, r0, r8, lsl #2
    19b0:	08001240 	stmdaeq	r0, {r6, r9, ip}
    19b4:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    19b8:	00590001 	subseq	r0, r9, r1
    19bc:	00000000 	andeq	r0, r0, r0
    19c0:	ac000000 	stcge	0, cr0, [r0], {-0}
    19c4:	c0080013 	andgt	r0, r8, r3, lsl r0
    19c8:	06080013 			; <UNDEFINED> instruction: 0x06080013
    19cc:	00020c00 	andeq	r0, r2, r0, lsl #24
    19d0:	009f0010 	addseq	r0, pc, r0, lsl r0	; <UNPREDICTABLE>
    19d4:	00000000 	andeq	r0, r0, r0
    19d8:	ac000000 	stcge	0, cr0, [r0], {-0}
    19dc:	c0080013 	andgt	r0, r8, r3, lsl r0
    19e0:	02080013 	andeq	r0, r8, #19
    19e4:	009f3100 	addseq	r3, pc, r0, lsl #2
    19e8:	00000000 	andeq	r0, r0, r0
    19ec:	ac000000 	stcge	0, cr0, [r0], {-0}
    19f0:	c0080013 	andgt	r0, r8, r3, lsl r0
    19f4:	02080013 	andeq	r0, r8, #19
    19f8:	009f4900 	addseq	r4, pc, r0, lsl #18
    19fc:	00000000 	andeq	r0, r0, r0
    1a00:	ac000000 	stcge	0, cr0, [r0], {-0}
    1a04:	c0080013 	andgt	r0, r8, r3, lsl r0
    1a08:	01080013 	tsteq	r8, r3, lsl r0
    1a0c:	00005900 	andeq	r5, r0, r0, lsl #18
    1a10:	00000000 	andeq	r0, r0, r0
    1a14:	13ac0000 			; <UNDEFINED> instruction: 0x13ac0000
    1a18:	13c00800 	bicne	r0, r0, #0, 16
    1a1c:	00010800 	andeq	r0, r1, r0, lsl #16
    1a20:	00000054 	andeq	r0, r0, r4, asr r0
    1a24:	00000000 	andeq	r0, r0, r0
    1a28:	0012aa00 	andseq	sl, r2, r0, lsl #20
    1a2c:	0013ac08 	andseq	sl, r3, r8, lsl #24
    1a30:	59000108 	stmdbpl	r0, {r3, r8}
    1a34:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
    1a38:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    1a3c:	00590001 	subseq	r0, r9, r1
    1a40:	00000000 	andeq	r0, r0, r0
    1a44:	aa000000 	bge	1a4c <_Min_Stack_Size+0x164c>
    1a48:	c4080012 	strgt	r0, [r8], #-18	; 0xffffffee
    1a4c:	02080012 	andeq	r0, r8, #18
    1a50:	28009100 	stmdacs	r0, {r8, ip, pc}
    1a54:	30080014 	andcc	r0, r8, r4, lsl r0
    1a58:	02080014 	andeq	r0, r8, #20
    1a5c:	00009100 	andeq	r9, r0, r0, lsl #2
    1a60:	00000000 	andeq	r0, r0, r0
    1a64:	aa000000 	bge	1a6c <_Min_Stack_Size+0x166c>
    1a68:	ac080012 	stcge	0, cr0, [r8], {18}
    1a6c:	01080013 	tsteq	r8, r3, lsl r0
    1a70:	13c05800 	bicne	r5, r0, #0, 16
    1a74:	15440800 	strbne	r0, [r4, #-2048]	; 0xfffff800
    1a78:	00010800 	andeq	r0, r1, r0, lsl #16
    1a7c:	00000058 	andeq	r0, r0, r8, asr r0
    1a80:	00000000 	andeq	r0, r0, r0
    1a84:	0012aa00 	andseq	sl, r2, r0, lsl #20
    1a88:	0013ac08 	andseq	sl, r3, r8, lsl #24
    1a8c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    1a90:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
    1a94:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    1a98:	00540001 	subseq	r0, r4, r1
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	aa000000 	bge	1aa8 <_Min_Stack_Size+0x16a8>
    1aa4:	be080012 	mcrlt	0, 0, r0, cr8, cr2, {0}
    1aa8:	01080012 	tsteq	r8, r2, lsl r0
    1aac:	00005300 	andeq	r5, r0, r0, lsl #6
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	15100000 	ldrne	r0, [r0, #-0]
    1ab8:	15240800 	strne	r0, [r4, #-2048]!	; 0xfffff800
    1abc:	00060800 	andeq	r0, r6, r0, lsl #16
    1ac0:	0100010c 	tsteq	r0, ip, lsl #2
    1ac4:	00009f00 	andeq	r9, r0, r0, lsl #30
    1ac8:	00000000 	andeq	r0, r0, r0
    1acc:	15100000 	ldrne	r0, [r0, #-0]
    1ad0:	15240800 	strne	r0, [r4, #-2048]!	; 0xfffff800
    1ad4:	00020800 	andeq	r0, r2, r0, lsl #16
    1ad8:	00009f30 	andeq	r9, r0, r0, lsr pc
    1adc:	00000000 	andeq	r0, r0, r0
    1ae0:	15100000 	ldrne	r0, [r0, #-0]
    1ae4:	15240800 	strne	r0, [r4, #-2048]!	; 0xfffff800
    1ae8:	00010800 	andeq	r0, r1, r0, lsl #16
    1aec:	00000059 	andeq	r0, r0, r9, asr r0
    1af0:	00000000 	andeq	r0, r0, r0
    1af4:	00151000 	andseq	r1, r5, r0
    1af8:	00152408 	andseq	r2, r5, r8, lsl #8
    1afc:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    1b08:	0800148e 	stmdaeq	r0, {r1, r2, r3, r7, sl, ip}
    1b0c:	080014aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip}
    1b10:	e8590001 	ldmda	r9, {r0}^
    1b14:	10080014 	andne	r0, r8, r4, lsl r0
    1b18:	01080015 	tsteq	r8, r5, lsl r0
    1b1c:	00005900 	andeq	r5, r0, r0, lsl #18
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	148e0000 	strne	r0, [lr], #0
    1b28:	14aa0800 	strtne	r0, [sl], #2048	; 0x800
    1b2c:	00060800 	andeq	r0, r6, r0, lsl #16
    1b30:	0100080c 	tsteq	r0, ip, lsl #16
    1b34:	14e89f00 	strbtne	r9, [r8], #3840	; 0xf00
    1b38:	15100800 	ldrne	r0, [r0, #-2048]	; 0xfffff800
    1b3c:	00060800 	andeq	r0, r6, r0, lsl #16
    1b40:	0100080c 	tsteq	r0, ip, lsl #16
    1b44:	00009f00 	andeq	r9, r0, r0, lsl #30
    1b48:	00000000 	andeq	r0, r0, r0
    1b4c:	148e0000 	strne	r0, [lr], #0
    1b50:	14aa0800 	strtne	r0, [sl], #2048	; 0x800
    1b54:	00010800 	andeq	r0, r1, r0, lsl #16
    1b58:	0014e854 	andseq	lr, r4, r4, asr r8
    1b5c:	00151008 	andseq	r1, r5, r8
    1b60:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    1b6c:	080014aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip}
    1b70:	080014c2 	stmdaeq	r0, {r1, r6, r7, sl, ip}
    1b74:	00590001 	subseq	r0, r9, r1
    1b78:	00000000 	andeq	r0, r0, r0
    1b7c:	aa000000 	bge	1b84 <_Min_Stack_Size+0x1784>
    1b80:	c2080014 	andgt	r0, r8, #20
    1b84:	01080014 	tsteq	r8, r4, lsl r0
    1b88:	00005400 	andeq	r5, r0, r0, lsl #8
    1b8c:	00000000 	andeq	r0, r0, r0
    1b90:	15440000 	strbne	r0, [r4, #-0]
    1b94:	15570800 	ldrbne	r0, [r7, #-2048]	; 0xfffff800
    1b98:	00010800 	andeq	r0, r1, r0, lsl #16
    1b9c:	00155750 	andseq	r5, r5, r0, asr r7
    1ba0:	001a3808 	andseq	r3, sl, r8, lsl #16
    1ba4:	5a000108 	bpl	1fcc <_Min_Stack_Size+0x1bcc>
	...
    1bb0:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    1bb4:	08001557 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, sl, ip}
    1bb8:	57510001 	ldrbpl	r0, [r1, -r1]
    1bbc:	38080015 	stmdacc	r8, {r0, r2, r4}
    1bc0:	0408001a 	streq	r0, [r8], #-26	; 0xffffffe6
    1bc4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1bc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	00154400 	andseq	r4, r5, r0, lsl #8
    1bd4:	00155708 	andseq	r5, r5, r8, lsl #14
    1bd8:	52000108 	andpl	r0, r0, #8, 2
    1bdc:	08001557 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, sl, ip}
    1be0:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
    1be4:	64570001 	ldrbvs	r0, [r7], #-1
    1be8:	6a080015 	bvs	201c44 <_Min_Stack_Size+0x201844>
    1bec:	04080015 	streq	r0, [r8], #-21	; 0xffffffeb
    1bf0:	5201f300 	andpl	pc, r1, #0, 6
    1bf4:	00156a9f 	mulseq	r5, pc, sl	; <UNPREDICTABLE>
    1bf8:	00162008 	andseq	r2, r6, r8
    1bfc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1c00:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
    1c04:	080017ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip}
    1c08:	01f30004 	mvnseq	r0, r4
    1c0c:	17ca9f52 			; <UNDEFINED> instruction: 0x17ca9f52
    1c10:	17e00800 	strbne	r0, [r0, r0, lsl #16]!
    1c14:	00010800 	andeq	r0, r1, r0, lsl #16
    1c18:	0017e057 	andseq	lr, r7, r7, asr r0
    1c1c:	00186008 	andseq	r6, r8, r8
    1c20:	f3000408 	vshl.u8	d0, d8, d0
    1c24:	609f5201 	addsvs	r5, pc, r1, lsl #4
    1c28:	90080018 	andls	r0, r8, r8, lsl r0
    1c2c:	01080018 	tsteq	r8, r8, lsl r0
    1c30:	18905700 	ldmne	r0, {r8, r9, sl, ip, lr}
    1c34:	18d00800 	ldmne	r0, {fp}^
    1c38:	00040800 	andeq	r0, r4, r0, lsl #16
    1c3c:	9f5201f3 	svcls	0x005201f3
    1c40:	080018d0 	stmdaeq	r0, {r4, r6, r7, fp, ip}
    1c44:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
    1c48:	dc570001 	mrrcle	0, 0, r0, r7, cr1
    1c4c:	dc080018 	stcle	0, cr0, [r8], {24}
    1c50:	04080019 	streq	r0, [r8], #-25	; 0xffffffe7
    1c54:	5201f300 	andpl	pc, r1, #0, 6
    1c58:	0019dc9f 	mulseq	r9, pc, ip	; <UNPREDICTABLE>
    1c5c:	0019e008 	andseq	lr, r9, r8
    1c60:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1c64:	080019e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip}
    1c68:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
    1c6c:	01f30004 	mvnseq	r0, r4
    1c70:	00009f52 	andeq	r9, r0, r2, asr pc
    1c74:	00000000 	andeq	r0, r0, r0
    1c78:	15440000 	strbne	r0, [r4, #-0]
    1c7c:	15570800 	ldrbne	r0, [r7, #-2048]	; 0xfffff800
    1c80:	00010800 	andeq	r0, r1, r0, lsl #16
    1c84:	00155753 	andseq	r5, r5, r3, asr r7
    1c88:	001a3808 	andseq	r3, sl, r8, lsl #16
    1c8c:	f3000408 	vshl.u8	d0, d8, d0
    1c90:	009f5301 	addseq	r5, pc, r1, lsl #6
    1c94:	00000000 	andeq	r0, r0, r0
    1c98:	44000000 	strmi	r0, [r0], #-0
    1c9c:	6a080015 	bvs	201cf8 <_Min_Stack_Size+0x2018f8>
    1ca0:	02080015 	andeq	r0, r8, #21
    1ca4:	6a009100 	bvs	260ac <_Min_Stack_Size+0x25cac>
    1ca8:	38080015 	stmdacc	r8, {r0, r2, r4}
    1cac:	0208001a 	andeq	r0, r8, #26
    1cb0:	00009100 	andeq	r9, r0, r0, lsl #2
    1cb4:	00000000 	andeq	r0, r0, r0
    1cb8:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    1cbc:	60080015 	andvs	r0, r8, r5, lsl r0
    1cc0:	02080015 	andeq	r0, r8, #21
    1cc4:	609f3000 	addsvs	r3, pc, r0
    1cc8:	62080015 	andvs	r0, r8, #21
    1ccc:	01080015 	tsteq	r8, r5, lsl r0
    1cd0:	15625000 	strbne	r5, [r2, #-0]!
    1cd4:	1a380800 	bne	e03cdc <_Min_Stack_Size+0xe038dc>
    1cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    1cdc:	00000056 	andeq	r0, r0, r6, asr r0
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	0017ca00 	andseq	ip, r7, r0, lsl #20
    1ce8:	0017e008 	andseq	lr, r7, r8
    1cec:	0c000608 	stceq	6, cr0, [r0], {8}
    1cf0:	00100002 	andseq	r0, r0, r2
    1cf4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cf8:	00000000 	andeq	r0, r0, r0
    1cfc:	0017ca00 	andseq	ip, r7, r0, lsl #20
    1d00:	0017e008 	andseq	lr, r7, r8
    1d04:	31000208 	tstcc	r0, r8, lsl #4
    1d08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d0c:	00000000 	andeq	r0, r0, r0
    1d10:	0017ca00 	andseq	ip, r7, r0, lsl #20
    1d14:	0017e008 	andseq	lr, r7, r8
    1d18:	49000208 	stmdbmi	r0, {r3, r9}
    1d1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d20:	00000000 	andeq	r0, r0, r0
    1d24:	0017ca00 	andseq	ip, r7, r0, lsl #20
    1d28:	0017e008 	andseq	lr, r7, r8
    1d2c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    1d38:	080017ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip}
    1d3c:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
    1d40:	005a0001 	subseq	r0, sl, r1
    1d44:	00000000 	andeq	r0, r0, r0
    1d48:	e0000000 	and	r0, r0, r0
    1d4c:	ca080015 	bgt	201da8 <_Min_Stack_Size+0x2019a8>
    1d50:	01080017 	tsteq	r8, r7, lsl r0
    1d54:	17e05600 	strbne	r5, [r0, r0, lsl #12]!
    1d58:	1a380800 	bne	e03d60 <_Min_Stack_Size+0xe03960>
    1d5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1d60:	00000056 	andeq	r0, r0, r6, asr r0
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	0015e000 	andseq	lr, r5, r0
    1d6c:	0017ca08 	andseq	ip, r7, r8, lsl #20
    1d70:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    1d74:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
    1d78:	080017ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip}
    1d7c:	32550001 	subscc	r0, r5, #1
    1d80:	02080018 	andeq	r0, r8, #24
    1d84:	01080019 	tsteq	r8, r9, lsl r0
    1d88:	19185500 	ldmdbne	r8, {r8, sl, ip, lr}
    1d8c:	19200800 	stmdbne	r0!, {fp}
    1d90:	00010800 	andeq	r0, r1, r0, lsl #16
    1d94:	00193e55 	andseq	r3, r9, r5, asr lr
    1d98:	00198008 	andseq	r8, r9, r8
    1d9c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    1da0:	0800198a 	stmdaeq	r0, {r1, r3, r7, r8, fp, ip}
    1da4:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
    1da8:	00550001 	subseq	r0, r5, r1
    1dac:	00000000 	andeq	r0, r0, r0
    1db0:	e0000000 	and	r0, r0, r0
    1db4:	ca080015 	bgt	201e10 <_Min_Stack_Size+0x201a10>
    1db8:	01080017 	tsteq	r8, r7, lsl r0
    1dbc:	17e05900 	strbne	r5, [r0, r0, lsl #18]!
    1dc0:	1a380800 	bne	e03dc8 <_Min_Stack_Size+0xe039c8>
    1dc4:	00010800 	andeq	r0, r1, r0, lsl #16
    1dc8:	00000059 	andeq	r0, r0, r9, asr r0
    1dcc:	00000000 	andeq	r0, r0, r0
    1dd0:	0015e000 	andseq	lr, r5, r0
    1dd4:	0017ca08 	andseq	ip, r7, r8, lsl #20
    1dd8:	5a000108 	bpl	2200 <_Min_Stack_Size+0x1e00>
    1ddc:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
    1de0:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
    1de4:	005a0001 	subseq	r0, sl, r1
    1de8:	00000000 	andeq	r0, r0, r0
    1dec:	e0000000 	and	r0, r0, r0
    1df0:	fe080015 	mcr2	0, 0, r0, cr8, cr5, {0}
    1df4:	01080015 	tsteq	r8, r5, lsl r0
    1df8:	18805000 	stmne	r0, {ip, lr}
    1dfc:	18900800 	ldmne	r0, {fp}
    1e00:	00010800 	andeq	r0, r1, r0, lsl #16
    1e04:	00000050 	andeq	r0, r0, r0, asr r0
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	0018dc00 	andseq	sp, r8, r0, lsl #24
    1e10:	00190208 	andseq	r0, r9, r8, lsl #4
    1e14:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1e18:	0800193e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip}
    1e1c:	0800195e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip}
    1e20:	e0560001 	subs	r0, r6, r1
    1e24:	26080019 			; <UNDEFINED> instruction: 0x26080019
    1e28:	0108001a 	tsteq	r8, sl, lsl r0
    1e2c:	00005600 	andeq	r5, r0, r0, lsl #12
    1e30:	00000000 	andeq	r0, r0, r0
    1e34:	18dc0000 	ldmne	ip, {}^	; <UNPREDICTABLE>
    1e38:	19020800 	stmdbne	r2, {fp}
    1e3c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e40:	00193e55 	andseq	r3, r9, r5, asr lr
    1e44:	00195e08 	andseq	r5, r9, r8, lsl #28
    1e48:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    1e4c:	080019e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip}
    1e50:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
    1e54:	00550001 	subseq	r0, r5, r1
    1e58:	00000000 	andeq	r0, r0, r0
    1e5c:	dc000000 	stcle	0, cr0, [r0], {-0}
    1e60:	02080018 	andeq	r0, r8, #24
    1e64:	06080019 			; <UNDEFINED> instruction: 0x06080019
    1e68:	00080c00 	andeq	r0, r8, r0, lsl #24
    1e6c:	3e9f0001 	cdpcc	0, 9, cr0, cr15, cr1, {0}
    1e70:	5e080019 	mcrpl	0, 0, r0, cr8, cr9, {0}
    1e74:	06080019 			; <UNDEFINED> instruction: 0x06080019
    1e78:	00080c00 	andeq	r0, r8, r0, lsl #24
    1e7c:	e09f0001 	adds	r0, pc, r1
    1e80:	26080019 			; <UNDEFINED> instruction: 0x26080019
    1e84:	0608001a 			; <UNDEFINED> instruction: 0x0608001a
    1e88:	00080c00 	andeq	r0, r8, r0, lsl #24
    1e8c:	009f0001 	addseq	r0, pc, r1
    1e90:	00000000 	andeq	r0, r0, r0
    1e94:	dc000000 	stcle	0, cr0, [r0], {-0}
    1e98:	02080018 	andeq	r0, r8, #24
    1e9c:	01080019 	tsteq	r8, r9, lsl r0
    1ea0:	193e5a00 	ldmdbne	lr!, {r9, fp, ip, lr}
    1ea4:	195e0800 	ldmdbne	lr, {fp}^
    1ea8:	00010800 	andeq	r0, r1, r0, lsl #16
    1eac:	0019e05a 	andseq	lr, r9, sl, asr r0
    1eb0:	001a2608 	andseq	r2, sl, r8, lsl #12
    1eb4:	5a000108 	bpl	22dc <_Min_Stack_Size+0x1edc>
	...
    1ec0:	080019f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip}
    1ec4:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
    1ec8:	010c0006 	tsteq	ip, r6
    1ecc:	9f000100 	svcls	0x00000100
	...
    1ed8:	080019f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip}
    1edc:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
    1ee0:	9f300002 	svcls	0x00300002
	...
    1eec:	080019f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip}
    1ef0:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
    1ef4:	00560001 	subseq	r0, r6, r1
    1ef8:	00000000 	andeq	r0, r0, r0
    1efc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1f00:	26080019 			; <UNDEFINED> instruction: 0x26080019
    1f04:	0108001a 	tsteq	r8, sl, lsl r0
    1f08:	00005500 	andeq	r5, r0, r0, lsl #10
    1f0c:	00000000 	andeq	r0, r0, r0
    1f10:	19f80000 	ldmibne	r8!, {}^	; <UNPREDICTABLE>
    1f14:	1a260800 	bne	983f1c <_Min_Stack_Size+0x983b1c>
    1f18:	00010800 	andeq	r0, r1, r0, lsl #16
    1f1c:	0000005a 	andeq	r0, r0, sl, asr r0
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	0019a800 	andseq	sl, r9, r0, lsl #16
    1f28:	0019be08 	andseq	fp, r9, r8, lsl #28
    1f2c:	0c000608 	stceq	6, cr0, [r0], {8}
    1f30:	00010001 	andeq	r0, r1, r1
    1f34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f38:	00000000 	andeq	r0, r0, r0
    1f3c:	0019a800 	andseq	sl, r9, r0, lsl #16
    1f40:	0019be08 	andseq	fp, r9, r8, lsl #28
    1f44:	30000208 	andcc	r0, r0, r8, lsl #4
    1f48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f4c:	00000000 	andeq	r0, r0, r0
    1f50:	0019a800 	andseq	sl, r9, r0, lsl #16
    1f54:	0019be08 	andseq	fp, r9, r8, lsl #28
    1f58:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    1f64:	080019a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip}
    1f68:	080019be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip}
    1f6c:	00560001 	subseq	r0, r6, r1
    1f70:	00000000 	andeq	r0, r0, r0
    1f74:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1f78:	be080019 	mcrlt	0, 0, r0, cr8, cr9, {0}
    1f7c:	01080019 	tsteq	r8, r9, lsl r0
    1f80:	00005a00 	andeq	r5, r0, r0, lsl #20
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	169e0000 	ldrne	r0, [lr], r0
    1f8c:	16b00800 	ldrtne	r0, [r0], r0, lsl #16
    1f90:	00060800 	andeq	r0, r6, r0, lsl #16
    1f94:	0100040c 	tsteq	r0, ip, lsl #8
    1f98:	17549f00 	ldrbne	r9, [r4, -r0, lsl #30]
    1f9c:	176a0800 	strbne	r0, [sl, -r0, lsl #16]!
    1fa0:	00060800 	andeq	r0, r6, r0, lsl #16
    1fa4:	0100040c 	tsteq	r0, ip, lsl #8
    1fa8:	00009f00 	andeq	r9, r0, r0, lsl #30
    1fac:	00000000 	andeq	r0, r0, r0
    1fb0:	169e0000 	ldrne	r0, [lr], r0
    1fb4:	16b00800 	ldrtne	r0, [r0], r0, lsl #16
    1fb8:	00020800 	andeq	r0, r2, r0, lsl #16
    1fbc:	17549f30 	smmlarne	r4, r0, pc, r9	; <UNPREDICTABLE>
    1fc0:	176a0800 	strbne	r0, [sl, -r0, lsl #16]!
    1fc4:	00020800 	andeq	r0, r2, r0, lsl #16
    1fc8:	00009f30 	andeq	r9, r0, r0, lsr pc
    1fcc:	00000000 	andeq	r0, r0, r0
    1fd0:	169e0000 	ldrne	r0, [lr], r0
    1fd4:	16b00800 	ldrtne	r0, [r0], r0, lsl #16
    1fd8:	00010800 	andeq	r0, r1, r0, lsl #16
    1fdc:	00175456 	andseq	r5, r7, r6, asr r4
    1fe0:	00176a08 	andseq	r6, r7, r8, lsl #20
    1fe4:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    1ff0:	0800169e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip}
    1ff4:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
    1ff8:	54550001 	ldrbpl	r0, [r5], #-1
    1ffc:	6a080017 	bvs	202060 <_Min_Stack_Size+0x201c60>
    2000:	01080017 	tsteq	r8, r7, lsl r0
    2004:	00005500 	andeq	r5, r0, r0, lsl #10
    2008:	00000000 	andeq	r0, r0, r0
    200c:	169e0000 	ldrne	r0, [lr], r0
    2010:	16b00800 	ldrtne	r0, [r0], r0, lsl #16
    2014:	00010800 	andeq	r0, r1, r0, lsl #16
    2018:	0017545a 	andseq	r5, r7, sl, asr r4
    201c:	00176a08 	andseq	r6, r7, r8, lsl #20
    2020:	5a000108 	bpl	2448 <_Min_Stack_Size+0x2048>
	...
    202c:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
    2030:	08001754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip}
    2034:	040c0006 	streq	r0, [ip], #-6
    2038:	9f000100 	svcls	0x00000100
	...
    2044:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
    2048:	08001754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip}
    204c:	9f300002 	svcls	0x00300002
	...
    2058:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
    205c:	08001754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip}
    2060:	00550001 	subseq	r0, r5, r1
    2064:	00000000 	andeq	r0, r0, r0
    2068:	3c000000 	stccc	0, cr0, [r0], {-0}
    206c:	54080017 	strpl	r0, [r8], #-23	; 0xffffffe9
    2070:	01080017 	tsteq	r8, r7, lsl r0
    2074:	00005600 	andeq	r5, r0, r0, lsl #12
    2078:	00000000 	andeq	r0, r0, r0
    207c:	173c0000 	ldrne	r0, [ip, -r0]!
    2080:	17540800 	ldrbne	r0, [r4, -r0, lsl #16]
    2084:	00010800 	andeq	r0, r1, r0, lsl #16
    2088:	0000005a 	andeq	r0, r0, sl, asr r0
    208c:	00000000 	andeq	r0, r0, r0
    2090:	0017f000 	andseq	pc, r7, r0
    2094:	00180608 	andseq	r0, r8, r8, lsl #12
    2098:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    20a4:	080017f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip}
    20a8:	08001806 	stmdaeq	r0, {r1, r2, fp, ip}
    20ac:	005a0001 	subseq	r0, sl, r1
    20b0:	00000000 	andeq	r0, r0, r0
    20b4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    20b8:	4908001a 	stmdbmi	r8, {r1, r3, r4}
    20bc:	0108001a 	tsteq	r8, sl, lsl r0
    20c0:	1a495000 	bne	12560c8 <_Min_Stack_Size+0x1255cc8>
    20c4:	1c340800 	ldcne	8, cr0, [r4], #-0
    20c8:	00010800 	andeq	r0, r1, r0, lsl #16
    20cc:	00000054 	andeq	r0, r0, r4, asr r0
    20d0:	00000000 	andeq	r0, r0, r0
    20d4:	001a3800 	andseq	r3, sl, r0, lsl #16
    20d8:	001a4908 	andseq	r4, sl, r8, lsl #18
    20dc:	51000108 	tstpl	r0, r8, lsl #2
    20e0:	08001a49 	stmdaeq	r0, {r0, r3, r6, r9, fp, ip}
    20e4:	08001a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, ip}
    20e8:	54560001 	ldrbpl	r0, [r6], #-1
    20ec:	5a08001a 	bpl	20215c <_Min_Stack_Size+0x201d5c>
    20f0:	0408001a 	streq	r0, [r8], #-26	; 0xffffffe6
    20f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    20f8:	001a5a9f 	mulseq	sl, pc, sl	; <UNPREDICTABLE>
    20fc:	001ab008 	andseq	fp, sl, r8
    2100:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2104:	08001ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip}
    2108:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    210c:	01f30004 	mvnseq	r0, r4
    2110:	00009f51 	andeq	r9, r0, r1, asr pc
    2114:	00000000 	andeq	r0, r0, r0
    2118:	1a380000 	bne	e02120 <_Min_Stack_Size+0xe01d20>
    211c:	1a490800 	bne	1244124 <_Min_Stack_Size+0x1243d24>
    2120:	00010800 	andeq	r0, r1, r0, lsl #16
    2124:	001a4952 	andseq	r4, sl, r2, asr r9
    2128:	001c3408 	andseq	r3, ip, r8, lsl #8
    212c:	f3000408 	vshl.u8	d0, d8, d0
    2130:	009f5201 	addseq	r5, pc, r1, lsl #4
    2134:	00000000 	andeq	r0, r0, r0
    2138:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    213c:	4908001a 	stmdbmi	r8, {r1, r3, r4}
    2140:	0108001a 	tsteq	r8, sl, lsl r0
    2144:	1a495300 	bne	1256d4c <_Min_Stack_Size+0x125694c>
    2148:	1a540800 	bne	1504150 <_Min_Stack_Size+0x1503d50>
    214c:	00010800 	andeq	r0, r1, r0, lsl #16
    2150:	001a5455 	andseq	r5, sl, r5, asr r4
    2154:	001a5a08 	andseq	r5, sl, r8, lsl #20
    2158:	f3000408 	vshl.u8	d0, d8, d0
    215c:	5a9f5301 	bpl	fe7d6d68 <_estack+0xde7a6d68>
    2160:	ee08001a 	mcr	0, 0, r0, cr8, cr10, {0}
    2164:	0108001a 	tsteq	r8, sl, lsl r0
    2168:	1aee5500 	bne	ffb97570 <_estack+0xdfb67570>
    216c:	1af00800 	bne	ffc04174 <_estack+0xdfbd4174>
    2170:	00030800 	andeq	r0, r3, r0, lsl #16
    2174:	f09f7f70 			; <UNDEFINED> instruction: 0xf09f7f70
    2178:	1608001a 			; <UNDEFINED> instruction: 0x1608001a
    217c:	0408001b 	streq	r0, [r8], #-27	; 0xffffffe5
    2180:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2184:	001b169f 	mulseq	fp, pc, r6	; <UNPREDICTABLE>
    2188:	001b4208 	andseq	r4, fp, r8, lsl #4
    218c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    2190:	08001b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip}
    2194:	08001b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp, ip}
    2198:	7f700003 	svcvc	0x00700003
    219c:	001b4a9f 	mulseq	fp, pc, sl	; <UNPREDICTABLE>
    21a0:	001b5808 	andseq	r5, fp, r8, lsl #16
    21a4:	f3000408 	vshl.u8	d0, d8, d0
    21a8:	589f5301 	ldmpl	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
    21ac:	3408001b 	strcc	r0, [r8], #-27	; 0xffffffe5
    21b0:	0108001c 	tsteq	r8, ip, lsl r0
    21b4:	00005500 	andeq	r5, r0, r0, lsl #10
    21b8:	00000000 	andeq	r0, r0, r0
    21bc:	1a460000 	bne	11821c4 <_Min_Stack_Size+0x1181dc4>
    21c0:	1a4a0800 	bne	12841c8 <_Min_Stack_Size+0x1283dc8>
    21c4:	00020800 	andeq	r0, r2, r0, lsl #16
    21c8:	1a4a9f30 	bne	12a9e90 <_Min_Stack_Size+0x12a9a90>
    21cc:	1a540800 	bne	15041d4 <_Min_Stack_Size+0x1503dd4>
    21d0:	00010800 	andeq	r0, r1, r0, lsl #16
    21d4:	001a5a50 	andseq	r5, sl, r0, asr sl
    21d8:	001a7408 	andseq	r7, sl, r8, lsl #8
    21dc:	50000108 	andpl	r0, r0, r8, lsl #2
    21e0:	08001a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip}
    21e4:	08001b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, ip}
    21e8:	16580001 	ldrbne	r0, [r8], -r1
    21ec:	3408001b 	strcc	r0, [r8], #-27	; 0xffffffe5
    21f0:	0108001c 	tsteq	r8, ip, lsl r0
    21f4:	00005800 	andeq	r5, r0, r0, lsl #16
    21f8:	00000000 	andeq	r0, r0, r0
    21fc:	1ab00000 	bne	fec02204 <_estack+0xdebd2204>
    2200:	1b120800 	blne	484208 <_Min_Stack_Size+0x483e08>
    2204:	00010800 	andeq	r0, r1, r0, lsl #16
    2208:	001b1658 	andseq	r1, fp, r8, asr r6
    220c:	001c3408 	andseq	r3, ip, r8, lsl #8
    2210:	58000108 	stmdapl	r0, {r3, r8}
	...
    221c:	08001ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip}
    2220:	08001aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, ip}
    2224:	ee550001 	cdp	0, 5, cr0, cr5, cr1, {0}
    2228:	f008001a 			; <UNDEFINED> instruction: 0xf008001a
    222c:	0308001a 	movweq	r0, #32794	; 0x801a
    2230:	9f7f7000 	svcls	0x007f7000
    2234:	08001af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip}
    2238:	08001b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, ip}
    223c:	01f30004 	mvnseq	r0, r4
    2240:	1b169f53 	blne	5a9f94 <_Min_Stack_Size+0x5a9b94>
    2244:	1b420800 	blne	108424c <_Min_Stack_Size+0x1083e4c>
    2248:	00010800 	andeq	r0, r1, r0, lsl #16
    224c:	001b4255 	andseq	r4, fp, r5, asr r2
    2250:	001b4a08 	andseq	r4, fp, r8, lsl #20
    2254:	70000308 	andvc	r0, r0, r8, lsl #6
    2258:	1b4a9f7f 	blne	12aa05c <_Min_Stack_Size+0x12a9c5c>
    225c:	1b580800 	blne	1604264 <_Min_Stack_Size+0x1603e64>
    2260:	00040800 	andeq	r0, r4, r0, lsl #16
    2264:	9f5301f3 	svcls	0x005301f3
    2268:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
    226c:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    2270:	00550001 	subseq	r0, r5, r1
    2274:	00000000 	andeq	r0, r0, r0
    2278:	b0000000 	andlt	r0, r0, r0
    227c:	1208001a 	andne	r0, r8, #26
    2280:	0208001b 	andeq	r0, r8, #27
    2284:	169f3000 	ldrne	r3, [pc], r0
    2288:	3408001b 	strcc	r0, [r8], #-27	; 0xffffffe5
    228c:	0208001c 	andeq	r0, r8, #28
    2290:	009f3000 	addseq	r3, pc, r0
    2294:	00000000 	andeq	r0, r0, r0
    2298:	b0000000 	andlt	r0, r0, r0
    229c:	1208001a 	andne	r0, r8, #26
    22a0:	0608001b 			; <UNDEFINED> instruction: 0x0608001b
    22a4:	00020c00 	andeq	r0, r2, r0, lsl #24
    22a8:	169f0001 	ldrne	r0, [pc], r1
    22ac:	3408001b 	strcc	r0, [r8], #-27	; 0xffffffe5
    22b0:	0608001c 			; <UNDEFINED> instruction: 0x0608001c
    22b4:	00020c00 	andeq	r0, r2, r0, lsl #24
    22b8:	009f0001 	addseq	r0, pc, r1
    22bc:	00000000 	andeq	r0, r0, r0
    22c0:	b0000000 	andlt	r0, r0, r0
    22c4:	1208001a 	andne	r0, r8, #26
    22c8:	0108001b 	tsteq	r8, fp, lsl r0
    22cc:	1b165400 	blne	5972d4 <_Min_Stack_Size+0x596ed4>
    22d0:	1c340800 	ldcne	8, cr0, [r4], #-0
    22d4:	00010800 	andeq	r0, r1, r0, lsl #16
    22d8:	00000054 	andeq	r0, r0, r4, asr r0
    22dc:	00000000 	andeq	r0, r0, r0
    22e0:	001be200 	andseq	lr, fp, r0, lsl #4
    22e4:	001bfa08 	andseq	pc, fp, r8, lsl #20
    22e8:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    22f4:	08001be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp, ip}
    22f8:	08001bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp, ip}
    22fc:	00580001 	subseq	r0, r8, r1
    2300:	00000000 	andeq	r0, r0, r0
    2304:	e2000000 	and	r0, r0, #0
    2308:	fa08001b 	blx	20237c <_Min_Stack_Size+0x201f7c>
    230c:	0108001b 	tsteq	r8, fp, lsl r0
    2310:	00005400 	andeq	r5, r0, r0, lsl #8
    2314:	00000000 	andeq	r0, r0, r0
    2318:	1c120000 	ldcne	0, cr0, [r2], {-0}
    231c:	1c280800 	stcne	8, cr0, [r8], #-0
    2320:	00050800 	andeq	r0, r5, r0, lsl #16
    2324:	24398208 	ldrtcs	r8, [r9], #-520	; 0xfffffdf8
    2328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    232c:	00000000 	andeq	r0, r0, r0
    2330:	001c1200 	andseq	r1, ip, r0, lsl #4
    2334:	001c2808 	andseq	r2, ip, r8, lsl #16
    2338:	30000208 	andcc	r0, r0, r8, lsl #4
    233c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2340:	00000000 	andeq	r0, r0, r0
    2344:	001c1200 	andseq	r1, ip, r0, lsl #4
    2348:	001c2808 	andseq	r2, ip, r8, lsl #16
    234c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    2358:	08001c12 	stmdaeq	r0, {r1, r4, sl, fp, ip}
    235c:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
    2360:	00580001 	subseq	r0, r8, r1
    2364:	00000000 	andeq	r0, r0, r0
    2368:	12000000 	andne	r0, r0, #0
    236c:	2808001c 	stmdacs	r8, {r2, r3, r4}
    2370:	0108001c 	tsteq	r8, ip, lsl r0
    2374:	00005400 	andeq	r5, r0, r0, lsl #8
    2378:	00000000 	andeq	r0, r0, r0
    237c:	1c340000 	ldcne	0, cr0, [r4], #-0
    2380:	1c450800 	mcrrne	8, 0, r0, r5, cr0
    2384:	00010800 	andeq	r0, r1, r0, lsl #16
    2388:	001c4550 	andseq	r4, ip, r0, asr r5
    238c:	001e6008 	andseq	r6, lr, r8
    2390:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    239c:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    23a0:	08001c45 	stmdaeq	r0, {r0, r2, r6, sl, fp, ip}
    23a4:	45510001 	ldrbmi	r0, [r1, #-1]
    23a8:	5008001c 	andpl	r0, r8, ip, lsl r0
    23ac:	0108001c 	tsteq	r8, ip, lsl r0
    23b0:	1c505700 	mrrcne	7, 0, r5, r0, cr0
    23b4:	1c560800 	mrrcne	8, 0, r0, r6, cr0
    23b8:	00040800 	andeq	r0, r4, r0, lsl #16
    23bc:	9f5101f3 	svcls	0x005101f3
    23c0:	08001c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp, ip}
    23c4:	08001cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip}
    23c8:	b8570001 	ldmdalt	r7, {r0}^
    23cc:	6008001c 	andvs	r0, r8, ip, lsl r0
    23d0:	0408001e 	streq	r0, [r8], #-30	; 0xffffffe2
    23d4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    23d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	001c3400 	andseq	r3, ip, r0, lsl #8
    23e4:	001c4508 	andseq	r4, ip, r8, lsl #10
    23e8:	52000108 	andpl	r0, r0, #8, 2
    23ec:	08001c45 	stmdaeq	r0, {r0, r2, r6, sl, fp, ip}
    23f0:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
    23f4:	01f30004 	mvnseq	r0, r4
    23f8:	00009f52 	andeq	r9, r0, r2, asr pc
    23fc:	00000000 	andeq	r0, r0, r0
    2400:	1c340000 	ldcne	0, cr0, [r4], #-0
    2404:	1c450800 	mcrrne	8, 0, r0, r5, cr0
    2408:	00010800 	andeq	r0, r1, r0, lsl #16
    240c:	001c4553 	andseq	r4, ip, r3, asr r5
    2410:	001c5008 	andseq	r5, ip, r8
    2414:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    2418:	08001c50 	stmdaeq	r0, {r4, r6, sl, fp, ip}
    241c:	08001c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp, ip}
    2420:	01f30004 	mvnseq	r0, r4
    2424:	1c569f53 	mrrcne	15, 5, r9, r6, cr3
    2428:	1d360800 	ldcne	8, cr0, [r6, #-0]
    242c:	00010800 	andeq	r0, r1, r0, lsl #16
    2430:	001d3655 	andseq	r3, sp, r5, asr r6
    2434:	001d3a08 	andseq	r3, sp, r8, lsl #20
    2438:	f3000408 	vshl.u8	d0, d8, d0
    243c:	3a9f5301 	bcc	fe7d7048 <_estack+0xde7a7048>
    2440:	b808001d 	stmdalt	r8, {r0, r2, r3, r4}
    2444:	0108001d 	tsteq	r8, sp, lsl r0
    2448:	1db85500 	cfldr32ne	mvfx5, [r8]
    244c:	1de20800 	stclne	8, cr0, [r2]
    2450:	00040800 	andeq	r0, r4, r0, lsl #16
    2454:	9f5301f3 	svcls	0x005301f3
    2458:	08001de2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, fp, ip}
    245c:	08001df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip}
    2460:	f0550001 			; <UNDEFINED> instruction: 0xf0550001
    2464:	1c08001d 	stcne	0, cr0, [r8], {29}
    2468:	0408001e 	streq	r0, [r8], #-30	; 0xffffffe2
    246c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2470:	001e1c9f 	mulseq	lr, pc, ip	; <UNPREDICTABLE>
    2474:	001e3608 	andseq	r3, lr, r8, lsl #12
    2478:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    247c:	08001e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, ip}
    2480:	08001e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip}
    2484:	01f30004 	mvnseq	r0, r4
    2488:	1e589f53 	mrcne	15, 2, r9, cr8, cr3, {2}
    248c:	1e600800 	cdpne	8, 6, cr0, cr0, cr0, {0}
    2490:	00010800 	andeq	r0, r1, r0, lsl #16
    2494:	00000055 	andeq	r0, r0, r5, asr r0
    2498:	00000000 	andeq	r0, r0, r0
    249c:	001c4200 	andseq	r4, ip, r0, lsl #4
    24a0:	001c4608 	andseq	r4, ip, r8, lsl #12
    24a4:	30000208 	andcc	r0, r0, r8, lsl #4
    24a8:	001c469f 	mulseq	ip, pc, r6	; <UNPREDICTABLE>
    24ac:	001c5008 	andseq	r5, ip, r8
    24b0:	50000108 	andpl	r0, r0, r8, lsl #2
    24b4:	08001c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp, ip}
    24b8:	08001c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip}
    24bc:	74500001 	ldrbvc	r0, [r0], #-1
    24c0:	3608001c 			; <UNDEFINED> instruction: 0x3608001c
    24c4:	0108001d 	tsteq	r8, sp, lsl r0
    24c8:	1d3a5600 	ldcne	6, cr5, [sl, #-0]
    24cc:	1e600800 	cdpne	8, 6, cr0, cr0, cr0, {0}
    24d0:	00010800 	andeq	r0, r1, r0, lsl #16
    24d4:	00000056 	andeq	r0, r0, r6, asr r0
    24d8:	00000000 	andeq	r0, r0, r0
    24dc:	001cb800 	andseq	fp, ip, r0, lsl #16
    24e0:	001d3608 	andseq	r3, sp, r8, lsl #12
    24e4:	56000108 	strpl	r0, [r0], -r8, lsl #2
    24e8:	08001d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip}
    24ec:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
    24f0:	00560001 	subseq	r0, r6, r1
    24f4:	00000000 	andeq	r0, r0, r0
    24f8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    24fc:	3608001c 			; <UNDEFINED> instruction: 0x3608001c
    2500:	0108001d 	tsteq	r8, sp, lsl r0
    2504:	1d3a5500 	cfldr32ne	mvfx5, [sl, #-0]
    2508:	1db80800 	ldcne	8, cr0, [r8]
    250c:	00010800 	andeq	r0, r1, r0, lsl #16
    2510:	001db855 	andseq	fp, sp, r5, asr r8
    2514:	001de208 	andseq	lr, sp, r8, lsl #4
    2518:	f3000408 	vshl.u8	d0, d8, d0
    251c:	e29f5301 	adds	r5, pc, #67108864	; 0x4000000
    2520:	f008001d 			; <UNDEFINED> instruction: 0xf008001d
    2524:	0108001d 	tsteq	r8, sp, lsl r0
    2528:	1df05500 	cfldr64ne	mvdx5, [r0]
    252c:	1e1c0800 	cdpne	8, 1, cr0, cr12, cr0, {0}
    2530:	00040800 	andeq	r0, r4, r0, lsl #16
    2534:	9f5301f3 	svcls	0x005301f3
    2538:	08001e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip}
    253c:	08001e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, ip}
    2540:	36550001 	ldrbcc	r0, [r5], -r1
    2544:	5808001e 	stmdapl	r8, {r1, r2, r3, r4}
    2548:	0408001e 	streq	r0, [r8], #-30	; 0xffffffe2
    254c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2550:	001e589f 	mulseq	lr, pc, r8	; <UNPREDICTABLE>
    2554:	001e6008 	andseq	r6, lr, r8
    2558:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    2564:	08001cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip}
    2568:	08001d36 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, fp, ip}
    256c:	9f300002 	svcls	0x00300002
    2570:	08001d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip}
    2574:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
    2578:	9f300002 	svcls	0x00300002
	...
    2584:	08001cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip}
    2588:	08001d36 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, fp, ip}
    258c:	020c0006 	andeq	r0, ip, #6
    2590:	9f000100 	svcls	0x00000100
    2594:	08001d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip}
    2598:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
    259c:	020c0006 	andeq	r0, ip, #6
    25a0:	9f000100 	svcls	0x00000100
	...
    25ac:	08001cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip}
    25b0:	08001d36 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, fp, ip}
    25b4:	3a540001 	bcc	15025c0 <_Min_Stack_Size+0x15021c0>
    25b8:	6008001d 	andvs	r0, r8, sp, lsl r0
    25bc:	0108001e 	tsteq	r8, lr, lsl r0
    25c0:	00005400 	andeq	r5, r0, r0, lsl #8
    25c4:	00000000 	andeq	r0, r0, r0
    25c8:	1e1c0000 	cdpne	0, 1, cr0, cr12, cr0, {0}
    25cc:	1e320800 	cdpne	8, 3, cr0, cr2, cr0, {0}
    25d0:	00060800 	andeq	r0, r6, r0, lsl #16
    25d4:	0100020c 	tsteq	r0, ip, lsl #4
    25d8:	00009f00 	andeq	r9, r0, r0, lsl #30
    25dc:	00000000 	andeq	r0, r0, r0
    25e0:	1e1c0000 	cdpne	0, 1, cr0, cr12, cr0, {0}
    25e4:	1e320800 	cdpne	8, 3, cr0, cr2, cr0, {0}
    25e8:	00020800 	andeq	r0, r2, r0, lsl #16
    25ec:	00009f30 	andeq	r9, r0, r0, lsr pc
    25f0:	00000000 	andeq	r0, r0, r0
    25f4:	1e1c0000 	cdpne	0, 1, cr0, cr12, cr0, {0}
    25f8:	1e320800 	cdpne	8, 3, cr0, cr2, cr0, {0}
    25fc:	00010800 	andeq	r0, r1, r0, lsl #16
    2600:	00000055 	andeq	r0, r0, r5, asr r0
    2604:	00000000 	andeq	r0, r0, r0
    2608:	001e1c00 	andseq	r1, lr, r0, lsl #24
    260c:	001e3208 	andseq	r3, lr, r8, lsl #4
    2610:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    261c:	08001e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip}
    2620:	08001e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip}
    2624:	00540001 	subseq	r0, r4, r1
    2628:	00000000 	andeq	r0, r0, r0
    262c:	46000000 	strmi	r0, [r0], -r0
    2630:	5808001d 	stmdapl	r8, {r0, r2, r3, r4}
    2634:	0108001d 	tsteq	r8, sp, lsl r0
    2638:	00005500 	andeq	r5, r0, r0, lsl #10
    263c:	00000000 	andeq	r0, r0, r0
    2640:	1d460000 	stclne	0, cr0, [r6, #-0]
    2644:	1d580800 	ldclne	8, cr0, [r8, #-0]
    2648:	00010800 	andeq	r0, r1, r0, lsl #16
    264c:	00000056 	andeq	r0, r0, r6, asr r0
    2650:	00000000 	andeq	r0, r0, r0
    2654:	001d4600 	andseq	r4, sp, r0, lsl #12
    2658:	001d5808 	andseq	r5, sp, r8, lsl #16
    265c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    2668:	08001e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip}
    266c:	08001e3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, fp, ip}
    2670:	00540001 	subseq	r0, r4, r1
    2674:	00000000 	andeq	r0, r0, r0
    2678:	60000000 	andvs	r0, r0, r0
    267c:	7208001e 	andvc	r0, r8, #30
    2680:	0108001e 	tsteq	r8, lr, lsl r0
    2684:	1e725000 	cdpne	0, 7, cr5, cr2, cr0, {0}
    2688:	1e760800 	cdpne	8, 7, cr0, cr6, cr0, {0}
    268c:	00040800 	andeq	r0, r4, r0, lsl #16
    2690:	9f5001f3 	svcls	0x005001f3
    2694:	08001e76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, ip}
    2698:	08001eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip}
    269c:	b0500001 	subslt	r0, r0, r1
    26a0:	b208001e 	andlt	r0, r8, #30
    26a4:	0408001e 	streq	r0, [r8], #-30	; 0xffffffe2
    26a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    26ac:	001eb29f 	mulseq	lr, pc, r2	; <UNPREDICTABLE>
    26b0:	001f0a08 	andseq	r0, pc, r8, lsl #20
    26b4:	50000108 	andpl	r0, r0, r8, lsl #2
    26b8:	08001f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, ip}
    26bc:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
    26c0:	01f30004 	mvnseq	r0, r4
    26c4:	00009f50 	andeq	r9, r0, r0, asr pc
    26c8:	00000000 	andeq	r0, r0, r0
    26cc:	1e600000 	cdpne	0, 6, cr0, cr0, cr0, {0}
    26d0:	1e720800 	cdpne	8, 7, cr0, cr2, cr0, {0}
    26d4:	00010800 	andeq	r0, r1, r0, lsl #16
    26d8:	001e7253 	andseq	r7, lr, r3, asr r2
    26dc:	001e7608 	andseq	r7, lr, r8, lsl #12
    26e0:	f3000408 	vshl.u8	d0, d8, d0
    26e4:	769f5301 	ldrvc	r5, [pc], r1, lsl #6
    26e8:	a408001e 	strge	r0, [r8], #-30	; 0xffffffe2
    26ec:	0108001e 	tsteq	r8, lr, lsl r0
    26f0:	1ea45300 	cdpne	3, 10, cr5, cr4, cr0, {0}
    26f4:	1eb20800 	cdpne	8, 11, cr0, cr2, cr0, {0}
    26f8:	00040800 	andeq	r0, r4, r0, lsl #16
    26fc:	9f5301f3 	svcls	0x005301f3
    2700:	08001eb2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, fp, ip}
    2704:	08001ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip}
    2708:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    270c:	1c08001e 	stcne	0, cr0, [r8], {30}
    2710:	0408001f 	streq	r0, [r8], #-31	; 0xffffffe1
    2714:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2718:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    271c:	00000000 	andeq	r0, r0, r0
    2720:	001f1c00 	andseq	r1, pc, r0, lsl #24
    2724:	001f2e08 	andseq	r2, pc, r8, lsl #28
    2728:	50000108 	andpl	r0, r0, r8, lsl #2
    272c:	08001f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip}
    2730:	08001f32 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, fp, ip}
    2734:	01f30004 	mvnseq	r0, r4
    2738:	1f329f50 	svcne	0x00329f50
    273c:	1f6c0800 	svcne	0x006c0800
    2740:	00010800 	andeq	r0, r1, r0, lsl #16
    2744:	001f6c50 	andseq	r6, pc, r0, asr ip	; <UNPREDICTABLE>
    2748:	001f6e08 	andseq	r6, pc, r8, lsl #28
    274c:	f3000408 	vshl.u8	d0, d8, d0
    2750:	6e9f5001 	cdpvs	0, 9, cr5, cr15, cr1, {0}
    2754:	ce08001f 	mcrgt	0, 0, r0, cr8, cr15, {0}
    2758:	0108001f 	tsteq	r8, pc, lsl r0
    275c:	1fce5000 	svcne	0x00ce5000
    2760:	1fe00800 	svcne	0x00e00800
    2764:	00040800 	andeq	r0, r4, r0, lsl #16
    2768:	9f5001f3 	svcls	0x005001f3
	...
    2774:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
    2778:	08001f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip}
    277c:	2e530001 	cdpcs	0, 5, cr0, cr3, cr1, {0}
    2780:	3208001f 	andcc	r0, r8, #31
    2784:	0408001f 	streq	r0, [r8], #-31	; 0xffffffe1
    2788:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    278c:	001f329f 	mulseq	pc, pc, r2	; <UNPREDICTABLE>
    2790:	001f6008 	andseq	r6, pc, r8
    2794:	53000108 	movwpl	r0, #264	; 0x108
    2798:	08001f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip}
    279c:	08001f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip}
    27a0:	01f30004 	mvnseq	r0, r4
    27a4:	1f6e9f53 	svcne	0x006e9f53
    27a8:	1fb00800 	svcne	0x00b00800
    27ac:	00010800 	andeq	r0, r1, r0, lsl #16
    27b0:	001fb053 	andseq	fp, pc, r3, asr r0	; <UNPREDICTABLE>
    27b4:	001fe008 	andseq	lr, pc, r8
    27b8:	f3000408 	vshl.u8	d0, d8, d0
    27bc:	009f5301 	addseq	r5, pc, r1, lsl #6
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	e0000000 	and	r0, r0, r0
    27c8:	f408001f 	vst4.8	{d0-d3}, [r8 :64]
    27cc:	0108001f 	tsteq	r8, pc, lsl r0
    27d0:	1ff45000 	svcne	0x00f45000
    27d4:	1ff80800 	svcne	0x00f80800
    27d8:	00040800 	andeq	r0, r4, r0, lsl #16
    27dc:	9f5001f3 	svcls	0x005001f3
    27e0:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    27e4:	08002072 	stmdaeq	r0, {r1, r4, r5, r6, sp}
    27e8:	72500001 	subsvc	r0, r0, #1
    27ec:	76080020 	strvc	r0, [r8], -r0, lsr #32
    27f0:	04080020 	streq	r0, [r8], #-32	; 0xffffffe0
    27f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    27f8:	0020769f 	mlaeq	r0, pc, r6, r7	; <UNPREDICTABLE>
    27fc:	0020b008 	eoreq	fp, r0, r8
    2800:	50000108 	andpl	r0, r0, r8, lsl #2
    2804:	080020b0 	stmdaeq	r0, {r4, r5, r7, sp}
    2808:	080020b2 	stmdaeq	r0, {r1, r4, r5, r7, sp}
    280c:	01f30004 	mvnseq	r0, r4
    2810:	20b29f50 	adcscs	r9, r2, r0, asr pc
    2814:	20c40800 	sbccs	r0, r4, r0, lsl #16
    2818:	00010800 	andeq	r0, r1, r0, lsl #16
    281c:	00000050 	andeq	r0, r0, r0, asr r0
    2820:	00000000 	andeq	r0, r0, r0
    2824:	001fe000 	andseq	lr, pc, r0
    2828:	001ff408 	andseq	pc, pc, r8, lsl #8
    282c:	52000108 	andpl	r0, r0, #8, 2
    2830:	08001ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2834:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2838:	01f30004 	mvnseq	r0, r4
    283c:	1ff89f52 	svcne	0x00f89f52
    2840:	20660800 	rsbcs	r0, r6, r0, lsl #16
    2844:	00010800 	andeq	r0, r1, r0, lsl #16
    2848:	00206652 	eoreq	r6, r0, r2, asr r6
    284c:	00207208 	eoreq	r7, r0, r8, lsl #4
    2850:	70000208 	andvc	r0, r0, r8, lsl #4
    2854:	00207224 	eoreq	r7, r0, r4, lsr #4
    2858:	00207608 	eoreq	r7, r0, r8, lsl #12
    285c:	f3000508 	vrshl.u8	d0, d8, d0
    2860:	24235001 	strtcs	r5, [r3], #-1
    2864:	08002076 	stmdaeq	r0, {r1, r2, r4, r5, r6, sp}
    2868:	080020c4 	stmdaeq	r0, {r2, r6, r7, sp}
    286c:	00520001 	subseq	r0, r2, r1
    2870:	00000000 	andeq	r0, r0, r0
    2874:	e0000000 	and	r0, r0, r0
    2878:	f408001f 	vst4.8	{d0-d3}, [r8 :64]
    287c:	0108001f 	tsteq	r8, pc, lsl r0
    2880:	1ff45300 	svcne	0x00f45300
    2884:	1ff80800 	svcne	0x00f80800
    2888:	00040800 	andeq	r0, r4, r0, lsl #16
    288c:	9f5301f3 	svcls	0x005301f3
    2890:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2894:	0800203c 	stmdaeq	r0, {r2, r3, r4, r5, sp}
    2898:	3c530001 	mrrccc	0, 0, r0, r3, cr1
    289c:	3e080020 	cdpcc	0, 0, cr0, cr8, cr0, {1}
    28a0:	02080020 	andeq	r0, r8, #32
    28a4:	3e2a7000 	cdpcc	0, 2, cr7, cr10, cr0, {0}
    28a8:	76080020 	strvc	r0, [r8], -r0, lsr #32
    28ac:	04080020 	streq	r0, [r8], #-32	; 0xffffffe0
    28b0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    28b4:	0020769f 	mlaeq	r0, pc, r6, r7	; <UNPREDICTABLE>
    28b8:	0020a408 	eoreq	sl, r0, r8, lsl #8
    28bc:	53000108 	movwpl	r0, #264	; 0x108
    28c0:	080020a4 	stmdaeq	r0, {r2, r5, r7, sp}
    28c4:	080020c4 	stmdaeq	r0, {r2, r6, r7, sp}
    28c8:	01f30004 	mvnseq	r0, r4
    28cc:	00009f53 	andeq	r9, r0, r3, asr pc
    28d0:	00000000 	andeq	r0, r0, r0
    28d4:	1fe00000 	svcne	0x00e00000
    28d8:	1ff40800 	svcne	0x00f40800
    28dc:	00020800 	andeq	r0, r2, r0, lsl #16
    28e0:	1ff80091 	svcne	0x00f80091
    28e4:	20640800 	rsbcs	r0, r4, r0, lsl #16
    28e8:	00020800 	andeq	r0, r2, r0, lsl #16
    28ec:	20760091 			; <UNDEFINED> instruction: 0x20760091
    28f0:	20ba0800 	adcscs	r0, sl, r0, lsl #16
    28f4:	00020800 	andeq	r0, r2, r0, lsl #16
    28f8:	00000091 	muleq	r0, r1, r0
    28fc:	00000000 	andeq	r0, r0, r0
    2900:	20c40000 	sbccs	r0, r4, r0
    2904:	20d60800 	sbcscs	r0, r6, r0, lsl #16
    2908:	00010800 	andeq	r0, r1, r0, lsl #16
    290c:	0020d650 	eoreq	sp, r0, r0, asr r6
    2910:	0020da08 	eoreq	sp, r0, r8, lsl #20
    2914:	f3000408 	vshl.u8	d0, d8, d0
    2918:	da9f5001 	ble	fe7d6924 <_estack+0xde7a6924>
    291c:	56080020 	strpl	r0, [r8], -r0, lsr #32
    2920:	01080021 	tsteq	r8, r1, lsr #32
    2924:	21565000 	cmpcs	r6, r0
    2928:	215a0800 	cmpcs	sl, r0, lsl #16
    292c:	00040800 	andeq	r0, r4, r0, lsl #16
    2930:	9f5001f3 	svcls	0x005001f3
    2934:	0800215a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sp}
    2938:	08002194 	stmdaeq	r0, {r2, r4, r7, r8, sp}
    293c:	94500001 	ldrbls	r0, [r0], #-1
    2940:	96080021 	strls	r0, [r8], -r1, lsr #32
    2944:	04080021 	streq	r0, [r8], #-33	; 0xffffffdf
    2948:	5001f300 	andpl	pc, r1, r0, lsl #6
    294c:	0021969f 	mlaeq	r1, pc, r6, r9	; <UNPREDICTABLE>
    2950:	0021b008 	eoreq	fp, r1, r8
    2954:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    2960:	080020c4 	stmdaeq	r0, {r2, r6, r7, sp}
    2964:	080020d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sp}
    2968:	d6520001 	ldrble	r0, [r2], -r1
    296c:	da080020 	ble	2029f4 <_Min_Stack_Size+0x2025f4>
    2970:	04080020 	streq	r0, [r8], #-32	; 0xffffffe0
    2974:	5201f300 	andpl	pc, r1, #0, 6
    2978:	0020da9f 	mlaeq	r0, pc, sl, sp	; <UNPREDICTABLE>
    297c:	00214a08 	eoreq	r4, r1, r8, lsl #20
    2980:	52000108 	andpl	r0, r0, #8, 2
    2984:	0800214a 	stmdaeq	r0, {r1, r3, r6, r8, sp}
    2988:	08002156 	stmdaeq	r0, {r1, r2, r4, r6, r8, sp}
    298c:	24700002 	ldrbtcs	r0, [r0], #-2
    2990:	08002156 	stmdaeq	r0, {r1, r2, r4, r6, r8, sp}
    2994:	0800215a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sp}
    2998:	01f30005 	mvnseq	r0, r5
    299c:	5a242350 	bpl	90b6e4 <_Min_Stack_Size+0x90b2e4>
    29a0:	b0080021 	andlt	r0, r8, r1, lsr #32
    29a4:	01080021 	tsteq	r8, r1, lsr #32
    29a8:	00005200 	andeq	r5, r0, r0, lsl #4
    29ac:	00000000 	andeq	r0, r0, r0
    29b0:	20c40000 	sbccs	r0, r4, r0
    29b4:	20d60800 	sbcscs	r0, r6, r0, lsl #16
    29b8:	00010800 	andeq	r0, r1, r0, lsl #16
    29bc:	0020d653 	eoreq	sp, r0, r3, asr r6
    29c0:	0020da08 	eoreq	sp, r0, r8, lsl #20
    29c4:	f3000408 	vshl.u8	d0, d8, d0
    29c8:	da9f5301 	ble	fe7d75d4 <_estack+0xde7a75d4>
    29cc:	1e080020 	cdpne	0, 0, cr0, cr8, cr0, {1}
    29d0:	01080021 	tsteq	r8, r1, lsr #32
    29d4:	211e5300 	tstcs	lr, r0, lsl #6
    29d8:	21200800 			; <UNDEFINED> instruction: 0x21200800
    29dc:	00020800 	andeq	r0, r2, r0, lsl #16
    29e0:	21202a70 			; <UNDEFINED> instruction: 0x21202a70
    29e4:	215a0800 	cmpcs	sl, r0, lsl #16
    29e8:	00040800 	andeq	r0, r4, r0, lsl #16
    29ec:	9f5301f3 	svcls	0x005301f3
    29f0:	0800215a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sp}
    29f4:	08002188 	stmdaeq	r0, {r3, r7, r8, sp}
    29f8:	88530001 	ldmdahi	r3, {r0}^
    29fc:	b0080021 	andlt	r0, r8, r1, lsr #32
    2a00:	04080021 	streq	r0, [r8], #-33	; 0xffffffdf
    2a04:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2a08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a0c:	00000000 	andeq	r0, r0, r0
    2a10:	0020c400 	eoreq	ip, r0, r0, lsl #8
    2a14:	0020d608 	eoreq	sp, r0, r8, lsl #12
    2a18:	91000208 	tstls	r0, r8, lsl #4
    2a1c:	0020da00 	eoreq	sp, r0, r0, lsl #20
    2a20:	00214808 	eoreq	r4, r1, r8, lsl #16
    2a24:	91000208 	tstls	r0, r8, lsl #4
    2a28:	00215a00 	eoreq	r5, r1, r0, lsl #20
    2a2c:	00219e08 	eoreq	r9, r1, r8, lsl #28
    2a30:	91000208 	tstls	r0, r8, lsl #4
	...
    2a3c:	0021b000 	eoreq	fp, r1, r0
    2a40:	0021c208 	eoreq	ip, r1, r8, lsl #4
    2a44:	50000108 	andpl	r0, r0, r8, lsl #2
    2a48:	080021c2 	stmdaeq	r0, {r1, r6, r7, r8, sp}
    2a4c:	080021c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sp}
    2a50:	01f30004 	mvnseq	r0, r4
    2a54:	21c69f50 	biccs	r9, r6, r0, asr pc
    2a58:	22040800 	andcs	r0, r4, #0, 16
    2a5c:	00010800 	andeq	r0, r1, r0, lsl #16
    2a60:	00220450 	eoreq	r0, r2, r0, asr r4
    2a64:	00220608 	eoreq	r0, r2, r8, lsl #12
    2a68:	f3000408 	vshl.u8	d0, d8, d0
    2a6c:	069f5001 	ldreq	r5, [pc], r1
    2a70:	08080022 	stmdaeq	r8, {r1, r5}
    2a74:	01080022 	tsteq	r8, r2, lsr #32
    2a78:	22085000 	andcs	r5, r8, #0
    2a7c:	220a0800 	andcs	r0, sl, #0, 16
    2a80:	00040800 	andeq	r0, r4, r0, lsl #16
    2a84:	9f5001f3 	svcls	0x005001f3
    2a88:	0800220a 	stmdaeq	r0, {r1, r3, r9, sp}
    2a8c:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
    2a90:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    2a94:	70080022 	andvc	r0, r8, r2, lsr #32
    2a98:	04080022 	streq	r0, [r8], #-34	; 0xffffffde
    2a9c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2aa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2aa4:	00000000 	andeq	r0, r0, r0
    2aa8:	0021b000 	eoreq	fp, r1, r0
    2aac:	0021c208 	eoreq	ip, r1, r8, lsl #4
    2ab0:	52000108 	andpl	r0, r0, #8, 2
    2ab4:	080021c2 	stmdaeq	r0, {r1, r6, r7, r8, sp}
    2ab8:	080021c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sp}
    2abc:	01f30004 	mvnseq	r0, r4
    2ac0:	21c69f52 	biccs	r9, r6, r2, asr pc
    2ac4:	21f80800 	mvnscs	r0, r0, lsl #16
    2ac8:	00010800 	andeq	r0, r1, r0, lsl #16
    2acc:	0021f852 	eoreq	pc, r1, r2, asr r8	; <UNPREDICTABLE>
    2ad0:	00220608 	eoreq	r0, r2, r8, lsl #12
    2ad4:	f3000408 	vshl.u8	d0, d8, d0
    2ad8:	069f5201 	ldreq	r5, [pc], r1, lsl #4
    2adc:	48080022 	stmdami	r8, {r1, r5}
    2ae0:	01080022 	tsteq	r8, r2, lsr #32
    2ae4:	22485200 	subcs	r5, r8, #0, 4
    2ae8:	22700800 	rsbscs	r0, r0, #0, 16
    2aec:	00040800 	andeq	r0, r4, r0, lsl #16
    2af0:	9f5201f3 	svcls	0x005201f3
	...
    2afc:	08002270 	stmdaeq	r0, {r4, r5, r6, r9, sp}
    2b00:	08002282 	stmdaeq	r0, {r1, r7, r9, sp}
    2b04:	82500001 	subshi	r0, r0, #1
    2b08:	86080022 	strhi	r0, [r8], -r2, lsr #32
    2b0c:	04080022 	streq	r0, [r8], #-34	; 0xffffffde
    2b10:	5001f300 	andpl	pc, r1, r0, lsl #6
    2b14:	0022869f 	mlaeq	r2, pc, r6, r8	; <UNPREDICTABLE>
    2b18:	0022c408 	eoreq	ip, r2, r8, lsl #8
    2b1c:	50000108 	andpl	r0, r0, r8, lsl #2
    2b20:	080022c4 	stmdaeq	r0, {r2, r6, r7, r9, sp}
    2b24:	080022c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sp}
    2b28:	01f30004 	mvnseq	r0, r4
    2b2c:	22c69f50 	sbccs	r9, r6, #80, 30	; 0x140
    2b30:	22c80800 	sbccs	r0, r8, #0, 16
    2b34:	00010800 	andeq	r0, r1, r0, lsl #16
    2b38:	0022c850 	eoreq	ip, r2, r0, asr r8
    2b3c:	0022ca08 	eoreq	ip, r2, r8, lsl #20
    2b40:	f3000408 	vshl.u8	d0, d8, d0
    2b44:	ca9f5001 	bgt	fe7d6b50 <_estack+0xde7a6b50>
    2b48:	1c080022 	stcne	0, cr0, [r8], {34}	; 0x22
    2b4c:	01080023 	tsteq	r8, r3, lsr #32
    2b50:	231c5000 	tstcs	ip, #0
    2b54:	232c0800 			; <UNDEFINED> instruction: 0x232c0800
    2b58:	00040800 	andeq	r0, r4, r0, lsl #16
    2b5c:	9f5001f3 	svcls	0x005001f3
	...
    2b68:	08002270 	stmdaeq	r0, {r4, r5, r6, r9, sp}
    2b6c:	08002282 	stmdaeq	r0, {r1, r7, r9, sp}
    2b70:	82510001 	subshi	r0, r1, #1
    2b74:	86080022 	strhi	r0, [r8], -r2, lsr #32
    2b78:	04080022 	streq	r0, [r8], #-34	; 0xffffffde
    2b7c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2b80:	0022869f 	mlaeq	r2, pc, r6, r8	; <UNPREDICTABLE>
    2b84:	00230c08 	eoreq	r0, r3, r8, lsl #24
    2b88:	51000108 	tstpl	r0, r8, lsl #2
    2b8c:	0800230c 	stmdaeq	r0, {r2, r3, r8, r9, sp}
    2b90:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
    2b94:	24700002 	ldrbtcs	r0, [r0], #-2
    2b98:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
    2b9c:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    2ba0:	01f30005 	mvnseq	r0, r5
    2ba4:	00242350 	eoreq	r2, r4, r0, asr r3
    2ba8:	00000000 	andeq	r0, r0, r0
    2bac:	70000000 	andvc	r0, r0, r0
    2bb0:	82080022 	andhi	r0, r8, #34	; 0x22
    2bb4:	01080022 	tsteq	r8, r2, lsr #32
    2bb8:	22825200 	addcs	r5, r2, #0, 4
    2bbc:	22860800 	addcs	r0, r6, #0, 16
    2bc0:	00040800 	andeq	r0, r4, r0, lsl #16
    2bc4:	9f5201f3 	svcls	0x005201f3
    2bc8:	08002286 	stmdaeq	r0, {r1, r2, r7, r9, sp}
    2bcc:	080022b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sp}
    2bd0:	b8520001 	ldmdalt	r2, {r0}^
    2bd4:	c6080022 	strgt	r0, [r8], -r2, lsr #32
    2bd8:	04080022 	streq	r0, [r8], #-34	; 0xffffffde
    2bdc:	5201f300 	andpl	pc, r1, #0, 6
    2be0:	0022c69f 	mlaeq	r2, pc, r6, ip	; <UNPREDICTABLE>
    2be4:	00231208 	eoreq	r1, r3, r8, lsl #4
    2be8:	52000108 	andpl	r0, r0, #8, 2
    2bec:	08002312 	stmdaeq	r0, {r1, r4, r8, r9, sp}
    2bf0:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
    2bf4:	28700002 	ldmdacs	r0!, {r1}^
    2bf8:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
    2bfc:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    2c00:	01f30005 	mvnseq	r0, r5
    2c04:	00282350 	eoreq	r2, r8, r0, asr r3
    2c08:	00000000 	andeq	r0, r0, r0
    2c0c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2c10:	3a080023 	bcc	202ca4 <_Min_Stack_Size+0x2028a4>
    2c14:	01080023 	tsteq	r8, r3, lsr #32
    2c18:	233a5000 	teqcs	sl, #0
    2c1c:	233e0800 	teqcs	lr, #0, 16
    2c20:	00040800 	andeq	r0, r4, r0, lsl #16
    2c24:	9f5001f3 	svcls	0x005001f3
    2c28:	0800233e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sp}
    2c2c:	0800239e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sp}
    2c30:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    2c34:	a2080023 	andge	r0, r8, #35	; 0x23
    2c38:	04080023 	streq	r0, [r8], #-35	; 0xffffffdd
    2c3c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2c40:	0023a29f 	mlaeq	r3, pc, r2, sl	; <UNPREDICTABLE>
    2c44:	0023a408 	eoreq	sl, r3, r8, lsl #8
    2c48:	50000108 	andpl	r0, r0, r8, lsl #2
    2c4c:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
    2c50:	080023a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sp}
    2c54:	01f30004 	mvnseq	r0, r4
    2c58:	00009f50 	andeq	r9, r0, r0, asr pc
    2c5c:	00000000 	andeq	r0, r0, r0
    2c60:	232c0000 			; <UNDEFINED> instruction: 0x232c0000
    2c64:	233a0800 	teqcs	sl, #0, 16
    2c68:	00010800 	andeq	r0, r1, r0, lsl #16
    2c6c:	00233a52 	eoreq	r3, r3, r2, asr sl
    2c70:	00233e08 	eoreq	r3, r3, r8, lsl #28
    2c74:	f3000408 	vshl.u8	d0, d8, d0
    2c78:	3e9f5201 	cdpcc	2, 9, cr5, cr15, cr1, {0}
    2c7c:	82080023 	andhi	r0, r8, #35	; 0x23
    2c80:	01080023 	tsteq	r8, r3, lsr #32
    2c84:	23825200 	orrcs	r5, r2, #0, 4
    2c88:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    2c8c:	00040800 	andeq	r0, r4, r0, lsl #16
    2c90:	9f5201f3 	svcls	0x005201f3
    2c94:	080023a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sp}
    2c98:	080023a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sp}
    2c9c:	00520001 	subseq	r0, r2, r1
    2ca0:	00000000 	andeq	r0, r0, r0
    2ca4:	2c000000 	stccs	0, cr0, [r0], {-0}
    2ca8:	3a080023 	bcc	202d3c <_Min_Stack_Size+0x20293c>
    2cac:	01080023 	tsteq	r8, r3, lsr #32
    2cb0:	233a5300 	teqcs	sl, #0, 6
    2cb4:	233e0800 	teqcs	lr, #0, 16
    2cb8:	00040800 	andeq	r0, r4, r0, lsl #16
    2cbc:	9f5301f3 	svcls	0x005301f3
    2cc0:	0800233e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sp}
    2cc4:	08002386 	stmdaeq	r0, {r1, r2, r7, r8, r9, sp}
    2cc8:	86530001 	ldrbhi	r0, [r3], -r1
    2ccc:	a2080023 	andge	r0, r8, #35	; 0x23
    2cd0:	04080023 	streq	r0, [r8], #-35	; 0xffffffdd
    2cd4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2cd8:	0023a29f 	mlaeq	r3, pc, r2, sl	; <UNPREDICTABLE>
    2cdc:	0023a608 	eoreq	sl, r3, r8, lsl #12
    2ce0:	53000108 	movwpl	r0, #264	; 0x108
	...
    2cec:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
    2cf0:	080023b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp}
    2cf4:	b6500001 	ldrblt	r0, [r0], -r1
    2cf8:	ba080023 	blt	202d8c <_Min_Stack_Size+0x20298c>
    2cfc:	04080023 	streq	r0, [r8], #-35	; 0xffffffdd
    2d00:	5001f300 	andpl	pc, r1, r0, lsl #6
    2d04:	0023ba9f 	mlaeq	r3, pc, sl, fp	; <UNPREDICTABLE>
    2d08:	00241a08 	eoreq	r1, r4, r8, lsl #20
    2d0c:	50000108 	andpl	r0, r0, r8, lsl #2
    2d10:	0800241a 	stmdaeq	r0, {r1, r3, r4, sl, sp}
    2d14:	0800241e 	stmdaeq	r0, {r1, r2, r3, r4, sl, sp}
    2d18:	01f30004 	mvnseq	r0, r4
    2d1c:	241e9f50 	ldrcs	r9, [lr], #-3920	; 0xfffff0b0
    2d20:	24200800 	strtcs	r0, [r0], #-2048	; 0xfffff800
    2d24:	00010800 	andeq	r0, r1, r0, lsl #16
    2d28:	00242050 	eoreq	r2, r4, r0, asr r0
    2d2c:	00242208 	eoreq	r2, r4, r8, lsl #4
    2d30:	f3000408 	vshl.u8	d0, d8, d0
    2d34:	009f5001 	addseq	r5, pc, r1
    2d38:	00000000 	andeq	r0, r0, r0
    2d3c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2d40:	b6080023 	strlt	r0, [r8], -r3, lsr #32
    2d44:	01080023 	tsteq	r8, r3, lsr #32
    2d48:	23b65200 			; <UNDEFINED> instruction: 0x23b65200
    2d4c:	23ba0800 			; <UNDEFINED> instruction: 0x23ba0800
    2d50:	00040800 	andeq	r0, r4, r0, lsl #16
    2d54:	9f5201f3 	svcls	0x005201f3
    2d58:	080023ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sp}
    2d5c:	080023fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sp}
    2d60:	fe520001 	cdp2	0, 5, cr0, cr2, cr1, {0}
    2d64:	1e080023 	cdpne	0, 0, cr0, cr8, cr3, {1}
    2d68:	04080024 	streq	r0, [r8], #-36	; 0xffffffdc
    2d6c:	5201f300 	andpl	pc, r1, #0, 6
    2d70:	00241e9f 	mlaeq	r4, pc, lr, r1	; <UNPREDICTABLE>
    2d74:	00242208 	eoreq	r2, r4, r8, lsl #4
    2d78:	52000108 	andpl	r0, r0, #8, 2
	...
    2d84:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
    2d88:	080023b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp}
    2d8c:	b6530001 	ldrblt	r0, [r3], -r1
    2d90:	ba080023 	blt	202e24 <_Min_Stack_Size+0x202a24>
    2d94:	04080023 	streq	r0, [r8], #-35	; 0xffffffdd
    2d98:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2d9c:	0023ba9f 	mlaeq	r3, pc, sl, fp	; <UNPREDICTABLE>
    2da0:	00240208 	eoreq	r0, r4, r8, lsl #4
    2da4:	53000108 	movwpl	r0, #264	; 0x108
    2da8:	08002402 	stmdaeq	r0, {r1, sl, sp}
    2dac:	0800241e 	stmdaeq	r0, {r1, r2, r3, r4, sl, sp}
    2db0:	01f30004 	mvnseq	r0, r4
    2db4:	241e9f53 	ldrcs	r9, [lr], #-3923	; 0xfffff0ad
    2db8:	24220800 	strtcs	r0, [r2], #-2048	; 0xfffff800
    2dbc:	00010800 	andeq	r0, r1, r0, lsl #16
    2dc0:	00000053 	andeq	r0, r0, r3, asr r0
    2dc4:	00000000 	andeq	r0, r0, r0
    2dc8:	00242400 	eoreq	r2, r4, r0, lsl #8
    2dcc:	00242e08 	eoreq	r2, r4, r8, lsl #28
    2dd0:	50000108 	andpl	r0, r0, r8, lsl #2
    2dd4:	0800242e 	stmdaeq	r0, {r1, r2, r3, r5, sl, sp}
    2dd8:	08002430 	stmdaeq	r0, {r4, r5, sl, sp}
    2ddc:	01f30004 	mvnseq	r0, r4
    2de0:	24309f50 	ldrtcs	r9, [r0], #-3920	; 0xfffff0b0
    2de4:	24580800 	ldrbcs	r0, [r8], #-2048	; 0xfffff800
    2de8:	00010800 	andeq	r0, r1, r0, lsl #16
    2dec:	00245850 	eoreq	r5, r4, r0, asr r8
    2df0:	00245a08 	eoreq	r5, r4, r8, lsl #20
    2df4:	f3000408 	vshl.u8	d0, d8, d0
    2df8:	009f5001 	addseq	r5, pc, r1
    2dfc:	00000000 	andeq	r0, r0, r0
    2e00:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2e04:	66080024 	strvs	r0, [r8], -r4, lsr #32
    2e08:	01080024 	tsteq	r8, r4, lsr #32
    2e0c:	24665000 	strbtcs	r5, [r6], #-0
    2e10:	24680800 	strbtcs	r0, [r8], #-2048	; 0xfffff800
    2e14:	00040800 	andeq	r0, r4, r0, lsl #16
    2e18:	9f5001f3 	svcls	0x005001f3
    2e1c:	08002468 	stmdaeq	r0, {r3, r5, r6, sl, sp}
    2e20:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
    2e24:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2e28:	a0080024 	andge	r0, r8, r4, lsr #32
    2e2c:	04080024 	streq	r0, [r8], #-36	; 0xffffffdc
    2e30:	5001f300 	andpl	pc, r1, r0, lsl #6
    2e34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2e38:	00000000 	andeq	r0, r0, r0
    2e3c:	00246c00 	eoreq	r6, r4, r0, lsl #24
    2e40:	00247608 	eoreq	r7, r4, r8, lsl #12
    2e44:	73000808 	movwvc	r0, #2056	; 0x808
    2e48:	081a3300 	ldmdaeq	sl, {r8, r9, ip, sp}
    2e4c:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	a0000000 	andge	r0, r0, r0
    2e58:	a8080024 	stmdage	r8, {r2, r5}
    2e5c:	01080024 	tsteq	r8, r4, lsr #32
    2e60:	24a85000 	strtcs	r5, [r8], #0
    2e64:	25bc0800 	ldrcs	r0, [ip, #2048]!	; 0x800
    2e68:	00010800 	andeq	r0, r1, r0, lsl #16
    2e6c:	00000054 	andeq	r0, r0, r4, asr r0
    2e70:	00000000 	andeq	r0, r0, r0
    2e74:	0024a000 	eoreq	sl, r4, r0
    2e78:	0024b408 	eoreq	fp, r4, r8, lsl #8
    2e7c:	51000108 	tstpl	r0, r8, lsl #2
    2e80:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
    2e84:	080024b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, sp}
    2e88:	01f30004 	mvnseq	r0, r4
    2e8c:	24b89f51 	ldrtcs	r9, [r8], #3921	; 0xf51
    2e90:	25680800 	strbcs	r0, [r8, #-2048]!	; 0xfffff800
    2e94:	00010800 	andeq	r0, r1, r0, lsl #16
    2e98:	00256851 	eoreq	r6, r5, r1, asr r8
    2e9c:	0025bc08 	eoreq	fp, r5, r8, lsl #24
    2ea0:	f3000408 	vshl.u8	d0, d8, d0
    2ea4:	009f5101 	addseq	r5, pc, r1, lsl #2
    2ea8:	00000000 	andeq	r0, r0, r0
    2eac:	a0000000 	andge	r0, r0, r0
    2eb0:	b4080024 	strlt	r0, [r8], #-36	; 0xffffffdc
    2eb4:	01080024 	tsteq	r8, r4, lsr #32
    2eb8:	24b45200 	ldrtcs	r5, [r4], #512	; 0x200
    2ebc:	24b80800 	ldrtcs	r0, [r8], #2048	; 0x800
    2ec0:	00040800 	andeq	r0, r4, r0, lsl #16
    2ec4:	9f5201f3 	svcls	0x005201f3
    2ec8:	080024b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, sp}
    2ecc:	08002540 	stmdaeq	r0, {r6, r8, sl, sp}
    2ed0:	40520001 	subsmi	r0, r2, r1
    2ed4:	5c080025 	stcpl	0, cr0, [r8], {37}	; 0x25
    2ed8:	02080025 	andeq	r0, r8, #37	; 0x25
    2edc:	5c247400 	cfstrspl	mvf7, [r4], #-0
    2ee0:	6e080025 	cdpvs	0, 0, cr0, cr8, cr5, {1}
    2ee4:	01080025 	tsteq	r8, r5, lsr #32
    2ee8:	256e5200 	strbcs	r5, [lr, #-512]!	; 0xfffffe00
    2eec:	257b0800 	ldrbcs	r0, [fp, #-2048]!	; 0xfffff800
    2ef0:	00020800 	andeq	r0, r2, r0, lsl #16
    2ef4:	257b2474 	ldrbcs	r2, [fp, #-1140]!	; 0xfffffb8c
    2ef8:	25bc0800 	ldrcs	r0, [ip, #2048]!	; 0x800
    2efc:	00040800 	andeq	r0, r4, r0, lsl #16
    2f00:	9f5201f3 	svcls	0x005201f3
	...
    2f0c:	080024a0 	stmdaeq	r0, {r5, r7, sl, sp}
    2f10:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
    2f14:	b4530001 	ldrblt	r0, [r3], #-1
    2f18:	b8080024 	stmdalt	r8, {r2, r5}
    2f1c:	04080024 	streq	r0, [r8], #-36	; 0xffffffdc
    2f20:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2f24:	0024b89f 	mlaeq	r4, pc, r8, fp	; <UNPREDICTABLE>
    2f28:	0024e608 	eoreq	lr, r4, r8, lsl #12
    2f2c:	53000108 	movwpl	r0, #264	; 0x108
    2f30:	080024e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, sp}
    2f34:	080024f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, sp}
    2f38:	01f30004 	mvnseq	r0, r4
    2f3c:	24f49f53 	ldrbtcs	r9, [r4], #3923	; 0xf53
    2f40:	25320800 	ldrcs	r0, [r2, #-2048]!	; 0xfffff800
    2f44:	00010800 	andeq	r0, r1, r0, lsl #16
    2f48:	00253253 	eoreq	r3, r5, r3, asr r2
    2f4c:	0025bc08 	eoreq	fp, r5, r8, lsl #24
    2f50:	f3000408 	vshl.u8	d0, d8, d0
    2f54:	009f5301 	addseq	r5, pc, r1, lsl #6
    2f58:	00000000 	andeq	r0, r0, r0
    2f5c:	bc000000 	stclt	0, cr0, [r0], {-0}
    2f60:	c4080025 	strgt	r0, [r8], #-37	; 0xffffffdb
    2f64:	01080025 	tsteq	r8, r5, lsr #32
    2f68:	25c45000 	strbcs	r5, [r4]
    2f6c:	26d40800 	ldrbcs	r0, [r4], r0, lsl #16
    2f70:	00010800 	andeq	r0, r1, r0, lsl #16
    2f74:	00000054 	andeq	r0, r0, r4, asr r0
    2f78:	00000000 	andeq	r0, r0, r0
    2f7c:	0025bc00 	eoreq	fp, r5, r0, lsl #24
    2f80:	0025d008 	eoreq	sp, r5, r8
    2f84:	51000108 	tstpl	r0, r8, lsl #2
    2f88:	080025d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp}
    2f8c:	080025d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, sp}
    2f90:	01f30004 	mvnseq	r0, r4
    2f94:	25d49f51 	ldrbcs	r9, [r4, #3921]	; 0xf51
    2f98:	26860800 	strcs	r0, [r6], r0, lsl #16
    2f9c:	00010800 	andeq	r0, r1, r0, lsl #16
    2fa0:	00268651 	eoreq	r8, r6, r1, asr r6
    2fa4:	0026d408 	eoreq	sp, r6, r8, lsl #8
    2fa8:	f3000408 	vshl.u8	d0, d8, d0
    2fac:	009f5101 	addseq	r5, pc, r1, lsl #2
    2fb0:	00000000 	andeq	r0, r0, r0
    2fb4:	bc000000 	stclt	0, cr0, [r0], {-0}
    2fb8:	d0080025 	andle	r0, r8, r5, lsr #32
    2fbc:	01080025 	tsteq	r8, r5, lsr #32
    2fc0:	25d05200 	ldrbcs	r5, [r0, #512]	; 0x200
    2fc4:	25d40800 	ldrbcs	r0, [r4, #2048]	; 0x800
    2fc8:	00040800 	andeq	r0, r4, r0, lsl #16
    2fcc:	9f5201f3 	svcls	0x005201f3
    2fd0:	080025d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, sp}
    2fd4:	0800265c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp}
    2fd8:	5c520001 	mrrcpl	0, 0, r0, r2, cr1
    2fdc:	78080026 	stmdavc	r8, {r1, r2, r5}
    2fe0:	02080026 	andeq	r0, r8, #38	; 0x26
    2fe4:	78247400 	stmdavc	r4!, {sl, ip, sp, lr}
    2fe8:	95080026 	strls	r0, [r8, #-38]	; 0xffffffda
    2fec:	01080026 	tsteq	r8, r6, lsr #32
    2ff0:	26955200 	ldrcs	r5, [r5], r0, lsl #4
    2ff4:	26d40800 	ldrbcs	r0, [r4], r0, lsl #16
    2ff8:	00040800 	andeq	r0, r4, r0, lsl #16
    2ffc:	9f5201f3 	svcls	0x005201f3
	...
    3008:	080025bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp}
    300c:	080025d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp}
    3010:	d0530001 	subsle	r0, r3, r1
    3014:	d4080025 	strle	r0, [r8], #-37	; 0xffffffdb
    3018:	04080025 	streq	r0, [r8], #-37	; 0xffffffdb
    301c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3020:	0025d49f 	mlaeq	r5, pc, r4, sp	; <UNPREDICTABLE>
    3024:	00260208 	eoreq	r0, r6, r8, lsl #4
    3028:	53000108 	movwpl	r0, #264	; 0x108
    302c:	08002602 	stmdaeq	r0, {r1, r9, sl, sp}
    3030:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
    3034:	01f30004 	mvnseq	r0, r4
    3038:	26109f53 	ssaxcs	r9, r0, r3
    303c:	264e0800 	strbcs	r0, [lr], -r0, lsl #16
    3040:	00010800 	andeq	r0, r1, r0, lsl #16
    3044:	00264e53 	eoreq	r4, r6, r3, asr lr
    3048:	0026d408 	eoreq	sp, r6, r8, lsl #8
    304c:	f3000408 	vshl.u8	d0, d8, d0
    3050:	009f5301 	addseq	r5, pc, r1, lsl #6
    3054:	00000000 	andeq	r0, r0, r0
    3058:	d4000000 	strle	r0, [r0], #-0
    305c:	e8080026 	stmda	r8, {r1, r2, r5}
    3060:	01080026 	tsteq	r8, r6, lsr #32
    3064:	26e85000 	strbtcs	r5, [r8], r0
    3068:	26f00800 	ldrbtcs	r0, [r0], r0, lsl #16
    306c:	00010800 	andeq	r0, r1, r0, lsl #16
    3070:	0026f054 	eoreq	pc, r6, r4, asr r0	; <UNPREDICTABLE>
    3074:	0026f808 	eoreq	pc, r6, r8, lsl #16
    3078:	50000108 	andpl	r0, r0, r8, lsl #2
    307c:	080026f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, sp}
    3080:	08002730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp}
    3084:	30540001 	subscc	r0, r4, r1
    3088:	32080027 	andcc	r0, r8, #39	; 0x27
    308c:	01080027 	tsteq	r8, r7, lsr #32
    3090:	27325000 	ldrcs	r5, [r2, -r0]!
    3094:	27d00800 	ldrbcs	r0, [r0, r0, lsl #16]
    3098:	00010800 	andeq	r0, r1, r0, lsl #16
    309c:	00000054 	andeq	r0, r0, r4, asr r0
    30a0:	00000000 	andeq	r0, r0, r0
    30a4:	0026d400 	eoreq	sp, r6, r0, lsl #8
    30a8:	0026ea08 	eoreq	lr, r6, r8, lsl #20
    30ac:	51000108 	tstpl	r0, r8, lsl #2
    30b0:	080026ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, sp}
    30b4:	080026f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp}
    30b8:	01f30004 	mvnseq	r0, r4
    30bc:	26f09f51 	usatcs	r9, #16, r1, asr #30
    30c0:	27990800 	ldrcs	r0, [r9, r0, lsl #16]
    30c4:	00010800 	andeq	r0, r1, r0, lsl #16
    30c8:	00279951 	eoreq	r9, r7, r1, asr r9
    30cc:	0027d008 	eoreq	sp, r7, r8
    30d0:	f3000408 	vshl.u8	d0, d8, d0
    30d4:	009f5101 	addseq	r5, pc, r1, lsl #2
    30d8:	00000000 	andeq	r0, r0, r0
    30dc:	d4000000 	strle	r0, [r0], #-0
    30e0:	ea080026 	b	203180 <_Min_Stack_Size+0x202d80>
    30e4:	01080026 	tsteq	r8, r6, lsr #32
    30e8:	26ea5200 	strbtcs	r5, [sl], r0, lsl #4
    30ec:	26f00800 	ldrbtcs	r0, [r0], r0, lsl #16
    30f0:	00040800 	andeq	r0, r4, r0, lsl #16
    30f4:	9f5201f3 	svcls	0x005201f3
    30f8:	080026f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp}
    30fc:	08002722 	stmdaeq	r0, {r1, r5, r8, r9, sl, sp}
    3100:	22520001 	subscs	r0, r2, #1
    3104:	30080027 	andcc	r0, r8, r7, lsr #32
    3108:	04080027 	streq	r0, [r8], #-39	; 0xffffffd9
    310c:	5201f300 	andpl	pc, r1, #0, 6
    3110:	0027309f 	mlaeq	r7, pc, r0, r3	; <UNPREDICTABLE>
    3114:	00278808 	eoreq	r8, r7, r8, lsl #16
    3118:	52000108 	andpl	r0, r0, #8, 2
    311c:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
    3120:	080027d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp}
    3124:	01f30004 	mvnseq	r0, r4
    3128:	00009f52 	andeq	r9, r0, r2, asr pc
    312c:	00000000 	andeq	r0, r0, r0
    3130:	27d00000 	ldrbcs	r0, [r0, r0]
    3134:	27e40800 	strbcs	r0, [r4, r0, lsl #16]!
    3138:	00010800 	andeq	r0, r1, r0, lsl #16
    313c:	0027e450 	eoreq	lr, r7, r0, asr r4
    3140:	0027ec08 	eoreq	lr, r7, r8, lsl #24
    3144:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    3148:	080027ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, sp}
    314c:	0800280c 	stmdaeq	r0, {r2, r3, fp, sp}
    3150:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3154:	2e080028 	cdpcs	0, 0, cr0, cr8, cr8, {1}
    3158:	01080028 	tsteq	r8, r8, lsr #32
    315c:	282e5400 	stmdacs	lr!, {sl, ip, lr}
    3160:	28300800 	ldmdacs	r0!, {fp}
    3164:	00010800 	andeq	r0, r1, r0, lsl #16
    3168:	00283050 	eoreq	r3, r8, r0, asr r0
    316c:	0028cc08 	eoreq	ip, r8, r8, lsl #24
    3170:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    317c:	080027d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp}
    3180:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
    3184:	e4510001 	ldrb	r0, [r1], #-1
    3188:	ec080027 	stc	0, cr0, [r8], {39}	; 0x27
    318c:	04080027 	streq	r0, [r8], #-39	; 0xffffffd9
    3190:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3194:	0027ec9f 	mlaeq	r7, pc, ip, lr	; <UNPREDICTABLE>
    3198:	0027f608 	eoreq	pc, r7, r8, lsl #12
    319c:	51000108 	tstpl	r0, r8, lsl #2
    31a0:	080027f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, sp}
    31a4:	0800282e 	stmdaeq	r0, {r1, r2, r3, r5, fp, sp}
    31a8:	2e560001 	cdpcs	0, 5, cr0, cr6, cr1, {0}
    31ac:	32080028 	andcc	r0, r8, #40	; 0x28
    31b0:	01080028 	tsteq	r8, r8, lsr #32
    31b4:	28325100 	ldmdacs	r2!, {r8, ip, lr}
    31b8:	28cc0800 	stmiacs	ip, {fp}^
    31bc:	00010800 	andeq	r0, r1, r0, lsl #16
    31c0:	00000056 	andeq	r0, r0, r6, asr r0
    31c4:	00000000 	andeq	r0, r0, r0
    31c8:	0027d000 	eoreq	sp, r7, r0
    31cc:	0027e608 	eoreq	lr, r7, r8, lsl #12
    31d0:	52000108 	andpl	r0, r0, #8, 2
    31d4:	080027e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp}
    31d8:	080027ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, sp}
    31dc:	01f30004 	mvnseq	r0, r4
    31e0:	27ec9f52 	ubfxcs	r9, r2, #30, #13
    31e4:	28200800 	stmdacs	r0!, {fp}
    31e8:	00010800 	andeq	r0, r1, r0, lsl #16
    31ec:	00282052 	eoreq	r2, r8, r2, asr r0
    31f0:	00282e08 	eoreq	r2, r8, r8, lsl #28
    31f4:	f3000408 	vshl.u8	d0, d8, d0
    31f8:	2e9f5201 	cdpcs	2, 9, cr5, cr15, cr1, {0}
    31fc:	84080028 	strhi	r0, [r8], #-40	; 0xffffffd8
    3200:	01080028 	tsteq	r8, r8, lsr #32
    3204:	28845200 	stmcs	r4, {r9, ip, lr}
    3208:	28cc0800 	stmiacs	ip, {fp}^
    320c:	00040800 	andeq	r0, r4, r0, lsl #16
    3210:	9f5201f3 	svcls	0x005201f3
	...
    321c:	080028cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, sp}
    3220:	080028e1 	stmdaeq	r0, {r0, r5, r6, r7, fp, sp}
    3224:	e1500001 	cmp	r0, r1
    3228:	a0080028 	andge	r0, r8, r8, lsr #32
    322c:	0108002a 	tsteq	r8, sl, lsr #32
    3230:	00005500 	andeq	r5, r0, r0, lsl #10
    3234:	00000000 	andeq	r0, r0, r0
    3238:	28cc0000 	stmiacs	ip, {}^	; <UNPREDICTABLE>
    323c:	28e10800 	stmiacs	r1!, {fp}^
    3240:	00010800 	andeq	r0, r1, r0, lsl #16
    3244:	0028e151 	eoreq	lr, r8, r1, asr r1
    3248:	002aa008 	eoreq	sl, sl, r8
    324c:	f3000408 	vshl.u8	d0, d8, d0
    3250:	009f5101 	addseq	r5, pc, r1, lsl #2
    3254:	00000000 	andeq	r0, r0, r0
    3258:	cc000000 	stcgt	0, cr0, [r0], {-0}
    325c:	e1080028 	tst	r8, r8, lsr #32
    3260:	01080028 	tsteq	r8, r8, lsr #32
    3264:	28e15200 	stmiacs	r1!, {r9, ip, lr}^
    3268:	2aa00800 	bcs	fe805270 <_estack+0xde7d5270>
    326c:	00040800 	andeq	r0, r4, r0, lsl #16
    3270:	9f5201f3 	svcls	0x005201f3
	...
    327c:	080028cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, sp}
    3280:	080028e1 	stmdaeq	r0, {r0, r5, r6, r7, fp, sp}
    3284:	e1530001 	cmp	r3, r1
    3288:	a0080028 	andge	r0, r8, r8, lsr #32
    328c:	0408002a 	streq	r0, [r8], #-42	; 0xffffffd6
    3290:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3294:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3298:	00000000 	andeq	r0, r0, r0
    329c:	0028cc00 	eoreq	ip, r8, r0, lsl #24
    32a0:	0028f608 	eoreq	pc, r8, r8, lsl #12
    32a4:	91000208 	tstls	r0, r8, lsl #4
    32a8:	0028f600 	eoreq	pc, r8, r0, lsl #12
    32ac:	002aa008 	eoreq	sl, sl, r8
    32b0:	91000208 	tstls	r0, r8, lsl #4
	...
    32bc:	0028cc00 	eoreq	ip, r8, r0, lsl #24
    32c0:	0028f608 	eoreq	pc, r8, r8, lsl #12
    32c4:	91000208 	tstls	r0, r8, lsl #4
    32c8:	0028f604 	eoreq	pc, r8, r4, lsl #12
    32cc:	002aa008 	eoreq	sl, sl, r8
    32d0:	91000208 	tstls	r0, r8, lsl #4
    32d4:	00000004 	andeq	r0, r0, r4
    32d8:	00000000 	andeq	r0, r0, r0
    32dc:	0028cc00 	eoreq	ip, r8, r0, lsl #24
    32e0:	0028f608 	eoreq	pc, r8, r8, lsl #12
    32e4:	91000208 	tstls	r0, r8, lsl #4
    32e8:	0028f608 	eoreq	pc, r8, r8, lsl #12
    32ec:	002aa008 	eoreq	sl, sl, r8
    32f0:	91000208 	tstls	r0, r8, lsl #4
    32f4:	00000008 	andeq	r0, r0, r8
    32f8:	00000000 	andeq	r0, r0, r0
    32fc:	0028de00 	eoreq	sp, r8, r0, lsl #28
    3300:	0028ea08 	eoreq	lr, r8, r8, lsl #20
    3304:	30000208 	andcc	r0, r0, r8, lsl #4
    3308:	0028ea9f 	mlaeq	r8, pc, sl, lr	; <UNPREDICTABLE>
    330c:	0028ec08 	eoreq	lr, r8, r8, lsl #24
    3310:	50000108 	andpl	r0, r0, r8, lsl #2
    3314:	080028ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, sp}
    3318:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
    331c:	005a0001 	subseq	r0, sl, r1
    3320:	00000000 	andeq	r0, r0, r0
    3324:	1a000000 	bne	332c <_Min_Stack_Size+0x2f2c>
    3328:	2e08002a 	cdpcs	0, 0, cr0, cr8, cr10, {1}
    332c:	0608002a 	streq	r0, [r8], -sl, lsr #32
    3330:	00020c00 	andeq	r0, r2, r0, lsl #24
    3334:	009f0010 	addseq	r0, pc, r0, lsl r0	; <UNPREDICTABLE>
    3338:	00000000 	andeq	r0, r0, r0
    333c:	1a000000 	bne	3344 <_Min_Stack_Size+0x2f44>
    3340:	2e08002a 	cdpcs	0, 0, cr0, cr8, cr10, {1}
    3344:	0208002a 	andeq	r0, r8, #42	; 0x2a
    3348:	009f3100 	addseq	r3, pc, r0, lsl #2
    334c:	00000000 	andeq	r0, r0, r0
    3350:	1a000000 	bne	3358 <_Min_Stack_Size+0x2f58>
    3354:	2e08002a 	cdpcs	0, 0, cr0, cr8, cr10, {1}
    3358:	0208002a 	andeq	r0, r8, #42	; 0x2a
    335c:	009f4900 	addseq	r4, pc, r0, lsl #18
    3360:	00000000 	andeq	r0, r0, r0
    3364:	1a000000 	bne	336c <_Min_Stack_Size+0x2f6c>
    3368:	2e08002a 	cdpcs	0, 0, cr0, cr8, cr10, {1}
    336c:	0108002a 	tsteq	r8, sl, lsr #32
    3370:	00005a00 	andeq	r5, r0, r0, lsl #20
    3374:	00000000 	andeq	r0, r0, r0
    3378:	2a1a0000 	bcs	683380 <_Min_Stack_Size+0x682f80>
    337c:	2a2e0800 	bcs	b85384 <_Min_Stack_Size+0xb84f84>
    3380:	00010800 	andeq	r0, r1, r0, lsl #16
    3384:	00000055 	andeq	r0, r0, r5, asr r0
    3388:	00000000 	andeq	r0, r0, r0
    338c:	002a7800 	eoreq	r7, sl, r0, lsl #16
    3390:	002a8408 	eoreq	r8, sl, r8, lsl #8
    3394:	91000208 	tstls	r0, r8, lsl #4
    3398:	00000008 	andeq	r0, r0, r8
    339c:	00000000 	andeq	r0, r0, r0
    33a0:	002a7800 	eoreq	r7, sl, r0, lsl #16
    33a4:	002a9008 	eoreq	r9, sl, r8
    33a8:	5a000108 	bpl	37d0 <_Min_Stack_Size+0x33d0>
	...
    33b4:	08002a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, sp}
    33b8:	08002a90 	stmdaeq	r0, {r4, r7, r9, fp, sp}
    33bc:	00550001 	subseq	r0, r5, r1
    33c0:	00000000 	andeq	r0, r0, r0
    33c4:	a0000000 	andge	r0, r0, r0
    33c8:	b708002a 	strlt	r0, [r8, -sl, lsr #32]
    33cc:	0108002a 	tsteq	r8, sl, lsr #32
    33d0:	2ab75000 	bcs	fedd73d8 <_estack+0xdeda73d8>
    33d4:	2dfa0800 	ldclcs	8, cr0, [sl]
    33d8:	00010800 	andeq	r0, r1, r0, lsl #16
    33dc:	0000005a 	andeq	r0, r0, sl, asr r0
    33e0:	00000000 	andeq	r0, r0, r0
    33e4:	002aa000 	eoreq	sl, sl, r0
    33e8:	002ab708 	eoreq	fp, sl, r8, lsl #14
    33ec:	51000108 	tstpl	r0, r8, lsl #2
    33f0:	08002ab7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r9, fp, sp}
    33f4:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    33f8:	01f30004 	mvnseq	r0, r4
    33fc:	00009f51 	andeq	r9, r0, r1, asr pc
    3400:	00000000 	andeq	r0, r0, r0
    3404:	2aa00000 	bcs	fe80340c <_estack+0xde7d340c>
    3408:	2ab70800 	bcs	fedc5410 <_estack+0xded95410>
    340c:	00010800 	andeq	r0, r1, r0, lsl #16
    3410:	002ab752 	eoreq	fp, sl, r2, asr r7
    3414:	002dfa08 	eoreq	pc, sp, r8, lsl #20
    3418:	f3000408 	vshl.u8	d0, d8, d0
    341c:	009f5201 	addseq	r5, pc, r1, lsl #4
    3420:	00000000 	andeq	r0, r0, r0
    3424:	a0000000 	andge	r0, r0, r0
    3428:	b708002a 	strlt	r0, [r8, -sl, lsr #32]
    342c:	0108002a 	tsteq	r8, sl, lsr #32
    3430:	2ab75300 	bcs	fedd8038 <_estack+0xdeda8038>
    3434:	2dfa0800 	ldclcs	8, cr0, [sl]
    3438:	00040800 	andeq	r0, r4, r0, lsl #16
    343c:	9f5301f3 	svcls	0x005301f3
	...
    3448:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
    344c:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
    3450:	00910002 	addseq	r0, r1, r2
    3454:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
    3458:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    345c:	00910002 	addseq	r0, r1, r2
	...
    3468:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
    346c:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
    3470:	04910002 	ldreq	r0, [r1], #2
    3474:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
    3478:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    347c:	04910002 	ldreq	r0, [r1], #2
	...
    3488:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
    348c:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
    3490:	08910002 	ldmeq	r1, {r1}
    3494:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
    3498:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    349c:	08910002 	ldmeq	r1, {r1}
	...
    34a8:	08002ab2 	stmdaeq	r0, {r1, r4, r5, r7, r9, fp, sp}
    34ac:	08002ac0 	stmdaeq	r0, {r6, r7, r9, fp, sp}
    34b0:	9f300002 	svcls	0x00300002
    34b4:	08002ac0 	stmdaeq	r0, {r6, r7, r9, fp, sp}
    34b8:	08002ac2 	stmdaeq	r0, {r1, r6, r7, r9, fp, sp}
    34bc:	c2500001 	subsgt	r0, r0, #1
    34c0:	fa08002a 	blx	203570 <_Min_Stack_Size+0x203170>
    34c4:	0108002d 	tsteq	r8, sp, lsr #32
    34c8:	00005400 	andeq	r5, r0, r0, lsl #8
    34cc:	00000000 	andeq	r0, r0, r0
    34d0:	2b5a0000 	blcs	16834d8 <_Min_Stack_Size+0x16830d8>
    34d4:	2b700800 	blcs	1c054dc <_Min_Stack_Size+0x1c050dc>
    34d8:	00060800 	andeq	r0, r6, r0, lsl #16
    34dc:	1000020c 	andne	r0, r0, ip, lsl #4
    34e0:	00009f00 	andeq	r9, r0, r0, lsl #30
    34e4:	00000000 	andeq	r0, r0, r0
    34e8:	2b5a0000 	blcs	16834f0 <_Min_Stack_Size+0x16830f0>
    34ec:	2b700800 	blcs	1c054f4 <_Min_Stack_Size+0x1c050f4>
    34f0:	00020800 	andeq	r0, r2, r0, lsl #16
    34f4:	00009f31 	andeq	r9, r0, r1, lsr pc
    34f8:	00000000 	andeq	r0, r0, r0
    34fc:	2b5a0000 	blcs	1683504 <_Min_Stack_Size+0x1683104>
    3500:	2b700800 	blcs	1c05508 <_Min_Stack_Size+0x1c05108>
    3504:	00020800 	andeq	r0, r2, r0, lsl #16
    3508:	00009f49 	andeq	r9, r0, r9, asr #30
    350c:	00000000 	andeq	r0, r0, r0
    3510:	2b5a0000 	blcs	1683518 <_Min_Stack_Size+0x1683118>
    3514:	2b700800 	blcs	1c0551c <_Min_Stack_Size+0x1c0511c>
    3518:	00010800 	andeq	r0, r1, r0, lsl #16
    351c:	00000054 	andeq	r0, r0, r4, asr r0
    3520:	00000000 	andeq	r0, r0, r0
    3524:	002b5a00 	eoreq	r5, fp, r0, lsl #20
    3528:	002b7008 	eoreq	r7, fp, r8
    352c:	5a000108 	bpl	3954 <_Min_Stack_Size+0x3554>
	...
    3538:	08002bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp}
    353c:	08002bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, sp}
    3540:	040c0006 	streq	r0, [ip], #-6
    3544:	9f000100 	svcls	0x00000100
    3548:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
    354c:	08002caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, sp}
    3550:	040c0006 	streq	r0, [ip], #-6
    3554:	9f000100 	svcls	0x00000100
	...
    3560:	08002bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp}
    3564:	08002bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, sp}
    3568:	9f300002 	svcls	0x00300002
    356c:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
    3570:	08002caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, sp}
    3574:	9f300002 	svcls	0x00300002
	...
    3580:	08002bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp}
    3584:	08002bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, sp}
    3588:	94540001 	ldrbls	r0, [r4], #-1
    358c:	aa08002c 	bge	203644 <_Min_Stack_Size+0x203244>
    3590:	0108002c 	tsteq	r8, ip, lsr #32
    3594:	00005400 	andeq	r5, r0, r0, lsl #8
    3598:	00000000 	andeq	r0, r0, r0
    359c:	2bde0000 	blcs	ff7835a4 <_estack+0xdf7535a4>
    35a0:	2bf00800 	blcs	ffc055a8 <_estack+0xdfbd55a8>
    35a4:	00010800 	andeq	r0, r1, r0, lsl #16
    35a8:	002c9455 	eoreq	r9, ip, r5, asr r4
    35ac:	002caa08 	eoreq	sl, ip, r8, lsl #20
    35b0:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    35bc:	08002bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp}
    35c0:	08002bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, sp}
    35c4:	945a0001 	ldrbls	r0, [sl], #-1
    35c8:	aa08002c 	bge	203680 <_Min_Stack_Size+0x203280>
    35cc:	0108002c 	tsteq	r8, ip, lsr #32
    35d0:	00005a00 	andeq	r5, r0, r0, lsl #20
    35d4:	00000000 	andeq	r0, r0, r0
    35d8:	2c7c0000 	ldclcs	0, cr0, [ip], #-0
    35dc:	2c940800 	ldccs	8, cr0, [r4], {0}
    35e0:	00060800 	andeq	r0, r6, r0, lsl #16
    35e4:	0100040c 	tsteq	r0, ip, lsl #8
    35e8:	00009f00 	andeq	r9, r0, r0, lsl #30
    35ec:	00000000 	andeq	r0, r0, r0
    35f0:	2c7c0000 	ldclcs	0, cr0, [ip], #-0
    35f4:	2c940800 	ldccs	8, cr0, [r4], {0}
    35f8:	00020800 	andeq	r0, r2, r0, lsl #16
    35fc:	00009f30 	andeq	r9, r0, r0, lsr pc
    3600:	00000000 	andeq	r0, r0, r0
    3604:	2c7c0000 	ldclcs	0, cr0, [ip], #-0
    3608:	2c940800 	ldccs	8, cr0, [r4], {0}
    360c:	00010800 	andeq	r0, r1, r0, lsl #16
    3610:	00000055 	andeq	r0, r0, r5, asr r0
    3614:	00000000 	andeq	r0, r0, r0
    3618:	002c7c00 	eoreq	r7, ip, r0, lsl #24
    361c:	002c9408 	eoreq	r9, ip, r8, lsl #8
    3620:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    362c:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
    3630:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
    3634:	005a0001 	subseq	r0, sl, r1
    3638:	00000000 	andeq	r0, r0, r0
    363c:	1a000000 	bne	3644 <_Min_Stack_Size+0x3244>
    3640:	3008002d 	andcc	r0, r8, sp, lsr #32
    3644:	0108002d 	tsteq	r8, sp, lsr #32
    3648:	00005500 	andeq	r5, r0, r0, lsl #10
    364c:	00000000 	andeq	r0, r0, r0
    3650:	2d1a0000 	ldccs	0, cr0, [sl, #-0]
    3654:	2d300800 	ldccs	8, cr0, [r0, #-0]
    3658:	00010800 	andeq	r0, r1, r0, lsl #16
    365c:	00000054 	andeq	r0, r0, r4, asr r0
    3660:	00000000 	andeq	r0, r0, r0
    3664:	002d1a00 	eoreq	r1, sp, r0, lsl #20
    3668:	002d3008 	eoreq	r3, sp, r8
    366c:	5a000108 	bpl	3a94 <_Min_Stack_Size+0x3694>
	...
    3678:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    367c:	08002e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, sp}
    3680:	14500001 	ldrbne	r0, [r0], #-1
    3684:	1a08002e 	bne	203744 <_Min_Stack_Size+0x203344>
    3688:	0408002e 	streq	r0, [r8], #-46	; 0xffffffd2
    368c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3690:	002e1a9f 	mlaeq	lr, pc, sl, r1	; <UNPREDICTABLE>
    3694:	002e5408 	eoreq	r5, lr, r8, lsl #8
    3698:	50000108 	andpl	r0, r0, r8, lsl #2
    369c:	08002e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, sp}
    36a0:	08002e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp}
    36a4:	01f30004 	mvnseq	r0, r4
    36a8:	2e569f50 	mrccs	15, 2, r9, cr6, cr0, {2}
    36ac:	2eb80800 	cdpcs	8, 11, cr0, cr8, cr0, {0}
    36b0:	00010800 	andeq	r0, r1, r0, lsl #16
    36b4:	002eb850 	eoreq	fp, lr, r0, asr r8
    36b8:	002ec808 	eoreq	ip, lr, r8, lsl #16
    36bc:	f3000408 	vshl.u8	d0, d8, d0
    36c0:	009f5001 	addseq	r5, pc, r1
    36c4:	00000000 	andeq	r0, r0, r0
    36c8:	fc000000 	stc2	0, cr0, [r0], {-0}
    36cc:	1408002d 	strne	r0, [r8], #-45	; 0xffffffd3
    36d0:	0108002e 	tsteq	r8, lr, lsr #32
    36d4:	2e145200 	cdpcs	2, 1, cr5, cr4, cr0, {0}
    36d8:	2e1a0800 	cdpcs	8, 1, cr0, cr10, cr0, {0}
    36dc:	00040800 	andeq	r0, r4, r0, lsl #16
    36e0:	9f5201f3 	svcls	0x005201f3
    36e4:	08002e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, sp}
    36e8:	08002ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, sp}
    36ec:	a2520001 	subsge	r0, r2, #1
    36f0:	c808002e 	stmdagt	r8, {r1, r2, r3, r5}
    36f4:	0408002e 	streq	r0, [r8], #-46	; 0xffffffd2
    36f8:	5201f300 	andpl	pc, r1, #0, 6
    36fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3700:	00000000 	andeq	r0, r0, r0
    3704:	002dfc00 	eoreq	pc, sp, r0, lsl #24
    3708:	002e1408 	eoreq	r1, lr, r8, lsl #8
    370c:	53000108 	movwpl	r0, #264	; 0x108
    3710:	08002e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, sp}
    3714:	08002e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, sp}
    3718:	01f30004 	mvnseq	r0, r4
    371c:	2e1a9f53 	mrccs	15, 0, r9, cr10, cr3, {2}
    3720:	2e480800 	cdpcs	8, 4, cr0, cr8, cr0, {0}
    3724:	00010800 	andeq	r0, r1, r0, lsl #16
    3728:	002e4853 	eoreq	r4, lr, r3, asr r8
    372c:	002e5608 	eoreq	r5, lr, r8, lsl #12
    3730:	f3000408 	vshl.u8	d0, d8, d0
    3734:	569f5301 	ldrpl	r5, [pc], r1, lsl #6
    3738:	a008002e 	andge	r0, r8, lr, lsr #32
    373c:	0108002e 	tsteq	r8, lr, lsr #32
    3740:	2ea05300 	cdpcs	3, 10, cr5, cr0, cr0, {0}
    3744:	2ec80800 	cdpcs	8, 12, cr0, cr8, cr0, {0}
    3748:	00040800 	andeq	r0, r4, r0, lsl #16
    374c:	9f5301f3 	svcls	0x005301f3
	...
    3758:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    375c:	08002e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, sp}
    3760:	00910002 	addseq	r0, r1, r2
    3764:	08002e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, sp}
    3768:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
    376c:	00910002 	addseq	r0, r1, r2
	...
    3778:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    377c:	08002e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, sp}
    3780:	04910002 	ldreq	r0, [r1], #2
    3784:	08002e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, sp}
    3788:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
    378c:	04910002 	ldreq	r0, [r1], #2
	...
    3798:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
    379c:	08002ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, sp}
    37a0:	e0500001 	subs	r0, r0, r1
    37a4:	e608002e 	str	r0, [r8], -lr, lsr #32
    37a8:	0408002e 	streq	r0, [r8], #-46	; 0xffffffd2
    37ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    37b0:	002ee69f 	mlaeq	lr, pc, r6, lr	; <UNPREDICTABLE>
    37b4:	002f2008 	eoreq	r2, pc, r8
    37b8:	50000108 	andpl	r0, r0, r8, lsl #2
    37bc:	08002f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, sp}
    37c0:	08002f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp, sp}
    37c4:	01f30004 	mvnseq	r0, r4
    37c8:	2f229f50 	svccs	0x00229f50
    37cc:	2f8e0800 	svccs	0x008e0800
    37d0:	00010800 	andeq	r0, r1, r0, lsl #16
    37d4:	002f8e50 	eoreq	r8, pc, r0, asr lr	; <UNPREDICTABLE>
    37d8:	002f9208 	eoreq	r9, pc, r8, lsl #4
    37dc:	f3000408 	vshl.u8	d0, d8, d0
    37e0:	929f5001 	addsls	r5, pc, #1
    37e4:	9408002f 	strls	r0, [r8], #-47	; 0xffffffd1
    37e8:	0108002f 	tsteq	r8, pc, lsr #32
    37ec:	2f945000 	svccs	0x00945000
    37f0:	2fa40800 	svccs	0x00a40800
    37f4:	00040800 	andeq	r0, r4, r0, lsl #16
    37f8:	9f5001f3 	svcls	0x005001f3
	...
    3804:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
    3808:	08002ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, sp}
    380c:	e0520001 	subs	r0, r2, r1
    3810:	e608002e 	str	r0, [r8], -lr, lsr #32
    3814:	0408002e 	streq	r0, [r8], #-46	; 0xffffffd2
    3818:	5201f300 	andpl	pc, r1, #0, 6
    381c:	002ee69f 	mlaeq	lr, pc, r6, lr	; <UNPREDICTABLE>
    3820:	002f6e08 	eoreq	r6, pc, r8, lsl #28
    3824:	52000108 	andpl	r0, r0, #8, 2
    3828:	08002f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}
    382c:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
    3830:	01f30004 	mvnseq	r0, r4
    3834:	00009f52 	andeq	r9, r0, r2, asr pc
    3838:	00000000 	andeq	r0, r0, r0
    383c:	2ec80000 	cdpcs	0, 12, cr0, cr8, cr0, {0}
    3840:	2ee00800 	cdpcs	8, 14, cr0, cr0, cr0, {0}
    3844:	00010800 	andeq	r0, r1, r0, lsl #16
    3848:	002ee053 	eoreq	lr, lr, r3, asr r0
    384c:	002ee608 	eoreq	lr, lr, r8, lsl #12
    3850:	f3000408 	vshl.u8	d0, d8, d0
    3854:	e69f5301 	ldr	r5, [pc], r1, lsl #6
    3858:	1408002e 	strne	r0, [r8], #-46	; 0xffffffd2
    385c:	0108002f 	tsteq	r8, pc, lsr #32
    3860:	2f145300 	svccs	0x00145300
    3864:	2f220800 	svccs	0x00220800
    3868:	00040800 	andeq	r0, r4, r0, lsl #16
    386c:	9f5301f3 	svcls	0x005301f3
    3870:	08002f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp, sp}
    3874:	08002f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, sp}
    3878:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
    387c:	a408002f 	strge	r0, [r8], #-47	; 0xffffffd1
    3880:	0408002f 	streq	r0, [r8], #-47	; 0xffffffd1
    3884:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3888:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    388c:	00000000 	andeq	r0, r0, r0
    3890:	002ec800 	eoreq	ip, lr, r0, lsl #16
    3894:	002ee608 	eoreq	lr, lr, r8, lsl #12
    3898:	91000208 	tstls	r0, r8, lsl #4
    389c:	002ee600 	eoreq	lr, lr, r0, lsl #12
    38a0:	002fa408 	eoreq	sl, pc, r8, lsl #8
    38a4:	91000208 	tstls	r0, r8, lsl #4
	...
    38b0:	002ec800 	eoreq	ip, lr, r0, lsl #16
    38b4:	002ee608 	eoreq	lr, lr, r8, lsl #12
    38b8:	91000208 	tstls	r0, r8, lsl #4
    38bc:	002ee604 	eoreq	lr, lr, r4, lsl #12
    38c0:	002fa408 	eoreq	sl, pc, r8, lsl #8
    38c4:	91000208 	tstls	r0, r8, lsl #4
    38c8:	00000004 	andeq	r0, r0, r4
    38cc:	00000000 	andeq	r0, r0, r0
    38d0:	002fa400 	eoreq	sl, pc, r0, lsl #8
    38d4:	002fae08 	eoreq	sl, pc, r8, lsl #28
    38d8:	50000108 	andpl	r0, r0, r8, lsl #2
    38dc:	08002fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, sp}
    38e0:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
    38e4:	00540001 	subseq	r0, r4, r1
    38e8:	00000000 	andeq	r0, r0, r0
    38ec:	a4000000 	strge	r0, [r0], #-0
    38f0:	bd08002f 	stclt	0, cr0, [r8, #-188]	; 0xffffff44
    38f4:	0108002f 	tsteq	r8, pc, lsr #32
    38f8:	2fbd5100 	svccs	0x00bd5100
    38fc:	30dc0800 	sbcscc	r0, ip, r0, lsl #16
    3900:	00040800 	andeq	r0, r4, r0, lsl #16
    3904:	9f5101f3 	svcls	0x005101f3
	...
    3910:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
    3914:	08002fbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp}
    3918:	bd520001 	ldcllt	0, cr0, [r2, #-4]
    391c:	dc08002f 	stcle	0, cr0, [r8], {47}	; 0x2f
    3920:	04080030 	streq	r0, [r8], #-48	; 0xffffffd0
    3924:	5201f300 	andpl	pc, r1, #0, 6
    3928:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    392c:	00000000 	andeq	r0, r0, r0
    3930:	002fa400 	eoreq	sl, pc, r0, lsl #8
    3934:	002fbd08 	eoreq	fp, pc, r8, lsl #26
    3938:	53000108 	movwpl	r0, #264	; 0x108
    393c:	08002fbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp}
    3940:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
    3944:	01f30004 	mvnseq	r0, r4
    3948:	00009f53 	andeq	r9, r0, r3, asr pc
    394c:	00000000 	andeq	r0, r0, r0
    3950:	2fa40000 	svccs	0x00a40000
    3954:	2fce0800 	svccs	0x00ce0800
    3958:	00020800 	andeq	r0, r2, r0, lsl #16
    395c:	2fce0091 	svccs	0x00ce0091
    3960:	30dc0800 	sbcscc	r0, ip, r0, lsl #16
    3964:	00020800 	andeq	r0, r2, r0, lsl #16
    3968:	00000091 	muleq	r0, r1, r0
    396c:	00000000 	andeq	r0, r0, r0
    3970:	2fa40000 	svccs	0x00a40000
    3974:	2fce0800 	svccs	0x00ce0800
    3978:	00020800 	andeq	r0, r2, r0, lsl #16
    397c:	2fce0491 	svccs	0x00ce0491
    3980:	30dc0800 	sbcscc	r0, ip, r0, lsl #16
    3984:	00020800 	andeq	r0, r2, r0, lsl #16
    3988:	00000491 	muleq	r0, r1, r4
    398c:	00000000 	andeq	r0, r0, r0
    3990:	2fb60000 	svccs	0x00b60000
    3994:	2fbe0800 	svccs	0x00be0800
    3998:	00020800 	andeq	r0, r2, r0, lsl #16
    399c:	2fbe9f30 	svccs	0x00be9f30
    39a0:	2fc60800 	svccs	0x00c60800
    39a4:	00010800 	andeq	r0, r1, r0, lsl #16
    39a8:	002fce59 	eoreq	ip, pc, r9, asr lr	; <UNPREDICTABLE>
    39ac:	002fe608 	eoreq	lr, pc, r8, lsl #12
    39b0:	59000108 	stmdbpl	r0, {r3, r8}
	...
    39bc:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
    39c0:	080030f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, sp}
    39c4:	f1500001 			; <UNDEFINED> instruction: 0xf1500001
    39c8:	64080030 	strvs	r0, [r8], #-48	; 0xffffffd0
    39cc:	01080032 	tsteq	r8, r2, lsr r0
    39d0:	00005400 	andeq	r5, r0, r0, lsl #8
    39d4:	00000000 	andeq	r0, r0, r0
    39d8:	30dc0000 	sbcscc	r0, ip, r0
    39dc:	30f10800 	rscscc	r0, r1, r0, lsl #16
    39e0:	00010800 	andeq	r0, r1, r0, lsl #16
    39e4:	0030f151 	eorseq	pc, r0, r1, asr r1	; <UNPREDICTABLE>
    39e8:	00326408 	eorseq	r6, r2, r8, lsl #8
    39ec:	f3000408 	vshl.u8	d0, d8, d0
    39f0:	009f5101 	addseq	r5, pc, r1, lsl #2
    39f4:	00000000 	andeq	r0, r0, r0
    39f8:	dc000000 	stcle	0, cr0, [r0], {-0}
    39fc:	f1080030 			; <UNDEFINED> instruction: 0xf1080030
    3a00:	01080030 	tsteq	r8, r0, lsr r0
    3a04:	30f15200 	rscscc	r5, r1, r0, lsl #4
    3a08:	32640800 	rsbcc	r0, r4, #0, 16
    3a0c:	00040800 	andeq	r0, r4, r0, lsl #16
    3a10:	9f5201f3 	svcls	0x005201f3
	...
    3a1c:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
    3a20:	080030f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, sp}
    3a24:	f1530001 			; <UNDEFINED> instruction: 0xf1530001
    3a28:	64080030 	strvs	r0, [r8], #-48	; 0xffffffd0
    3a2c:	04080032 	streq	r0, [r8], #-50	; 0xffffffce
    3a30:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3a34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a38:	00000000 	andeq	r0, r0, r0
    3a3c:	0030dc00 	eorseq	sp, r0, r0, lsl #24
    3a40:	00310608 	eorseq	r0, r1, r8, lsl #12
    3a44:	91000208 	tstls	r0, r8, lsl #4
    3a48:	00310600 	eorseq	r0, r1, r0, lsl #12
    3a4c:	00326408 	eorseq	r6, r2, r8, lsl #8
    3a50:	91000208 	tstls	r0, r8, lsl #4
	...
    3a5c:	0030dc00 	eorseq	sp, r0, r0, lsl #24
    3a60:	00310608 	eorseq	r0, r1, r8, lsl #12
    3a64:	91000208 	tstls	r0, r8, lsl #4
    3a68:	00310604 	eorseq	r0, r1, r4, lsl #12
    3a6c:	00326408 	eorseq	r6, r2, r8, lsl #8
    3a70:	91000208 	tstls	r0, r8, lsl #4
    3a74:	00000004 	andeq	r0, r0, r4
    3a78:	00000000 	andeq	r0, r0, r0
    3a7c:	0030dc00 	eorseq	sp, r0, r0, lsl #24
    3a80:	0030f208 	eorseq	pc, r0, r8, lsl #4
    3a84:	30000208 	andcc	r0, r0, r8, lsl #4
    3a88:	0030f29f 	mlaseq	r0, pc, r2, pc	; <UNPREDICTABLE>
    3a8c:	0030fe08 	eorseq	pc, r0, r8, lsl #28
    3a90:	59000108 	stmdbpl	r0, {r3, r8}
    3a94:	08003106 	stmdaeq	r0, {r1, r2, r8, ip, sp}
    3a98:	0800311e 	stmdaeq	r0, {r1, r2, r3, r4, r8, ip, sp}
    3a9c:	00590001 	subseq	r0, r9, r1
    3aa0:	00000000 	andeq	r0, r0, r0
    3aa4:	64000000 	strvs	r0, [r0], #-0
    3aa8:	75080032 	strvc	r0, [r8, #-50]	; 0xffffffce
    3aac:	01080032 	tsteq	r8, r2, lsr r0
    3ab0:	32755000 	rsbscc	r5, r5, #0
    3ab4:	343c0800 	ldrtcc	r0, [ip], #-2048	; 0xfffff800
    3ab8:	00010800 	andeq	r0, r1, r0, lsl #16
    3abc:	00000055 	andeq	r0, r0, r5, asr r0
    3ac0:	00000000 	andeq	r0, r0, r0
    3ac4:	00326400 	eorseq	r6, r2, r0, lsl #8
    3ac8:	00327508 	eorseq	r7, r2, r8, lsl #10
    3acc:	51000108 	tstpl	r0, r8, lsl #2
    3ad0:	08003275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, ip, sp}
    3ad4:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
    3ad8:	01f30004 	mvnseq	r0, r4
    3adc:	00009f51 	andeq	r9, r0, r1, asr pc
    3ae0:	00000000 	andeq	r0, r0, r0
    3ae4:	32640000 	rsbcc	r0, r4, #0
    3ae8:	32750800 	rsbscc	r0, r5, #0, 16
    3aec:	00010800 	andeq	r0, r1, r0, lsl #16
    3af0:	00327552 	eorseq	r7, r2, r2, asr r5
    3af4:	00343c08 	eorseq	r3, r4, r8, lsl #24
    3af8:	5a000108 	bpl	3f20 <_Min_Stack_Size+0x3b20>
	...
    3b04:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
    3b08:	08003275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, ip, sp}
    3b0c:	75530001 	ldrbvc	r0, [r3, #-1]
    3b10:	3c080032 	stccc	0, cr0, [r8], {50}	; 0x32
    3b14:	01080034 	tsteq	r8, r4, lsr r0
    3b18:	00005700 	andeq	r5, r0, r0, lsl #14
    3b1c:	00000000 	andeq	r0, r0, r0
    3b20:	32720000 	rsbscc	r0, r2, #0
    3b24:	327e0800 	rsbscc	r0, lr, #0, 16
    3b28:	00020800 	andeq	r0, r2, r0, lsl #16
    3b2c:	327e9f30 	rsbscc	r9, lr, #48, 30	; 0xc0
    3b30:	32800800 	addcc	r0, r0, #0, 16
    3b34:	00010800 	andeq	r0, r1, r0, lsl #16
    3b38:	00328050 	eorseq	r8, r2, r0, asr r0
    3b3c:	0032e608 	eorseq	lr, r2, r8, lsl #12
    3b40:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3b44:	080032f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, sp}
    3b48:	080032fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, ip, sp}
    3b4c:	fa500001 	blx	1403b58 <_Min_Stack_Size+0x1403758>
    3b50:	3c080032 	stccc	0, cr0, [r8], {50}	; 0x32
    3b54:	01080034 	tsteq	r8, r4, lsr r0
    3b58:	00005600 	andeq	r5, r0, r0, lsl #12
    3b5c:	00000000 	andeq	r0, r0, r0
    3b60:	32720000 	rsbscc	r0, r2, #0
    3b64:	32820800 	addcc	r0, r2, #0, 16
    3b68:	00020800 	andeq	r0, r2, r0, lsl #16
    3b6c:	32889f30 	addcc	r9, r8, #48, 30	; 0xc0
    3b70:	32da0800 	sbcscc	r0, sl, #0, 16
    3b74:	00020800 	andeq	r0, r2, r0, lsl #16
    3b78:	32fa9f30 	rscscc	r9, sl, #48, 30	; 0xc0
    3b7c:	33140800 	tstcc	r4, #0, 16
    3b80:	000a0800 	andeq	r0, sl, r0, lsl #16
    3b84:	1a320070 	bne	c83d4c <_Min_Stack_Size+0xc8394c>
    3b88:	ff082e30 			; <UNDEFINED> instruction: 0xff082e30
    3b8c:	331a9f1a 	tstcc	sl, #26, 30	; 0x68
    3b90:	33200800 	nopcc	{0}	; <UNPREDICTABLE>
    3b94:	00020800 	andeq	r0, r2, r0, lsl #16
    3b98:	33209f30 			; <UNDEFINED> instruction: 0x33209f30
    3b9c:	33280800 			; <UNDEFINED> instruction: 0x33280800
    3ba0:	000a0800 	andeq	r0, sl, r0, lsl #16
    3ba4:	1a320070 	bne	c83d6c <_Min_Stack_Size+0xc8396c>
    3ba8:	ff082e30 			; <UNDEFINED> instruction: 0xff082e30
    3bac:	33849f1a 	orrcc	r9, r4, #26, 30	; 0x68
    3bb0:	33960800 	orrscc	r0, r6, #0, 16
    3bb4:	00020800 	andeq	r0, r2, r0, lsl #16
    3bb8:	33969f30 	orrscc	r9, r6, #48, 30	; 0xc0
    3bbc:	339e0800 	orrscc	r0, lr, #0, 16
    3bc0:	000a0800 	andeq	r0, sl, r0, lsl #16
    3bc4:	1a320070 	bne	c83d8c <_Min_Stack_Size+0xc8398c>
    3bc8:	ff082e30 			; <UNDEFINED> instruction: 0xff082e30
    3bcc:	33d29f1a 	bicscc	r9, r2, #26, 30	; 0x68
    3bd0:	33e60800 	mvncc	r0, #0, 16
    3bd4:	00020800 	andeq	r0, r2, r0, lsl #16
    3bd8:	00009f30 	andeq	r9, r0, r0, lsr pc
    3bdc:	00000000 	andeq	r0, r0, r0
    3be0:	32720000 	rsbscc	r0, r2, #0
    3be4:	32820800 	addcc	r0, r2, #0, 16
    3be8:	00020800 	andeq	r0, r2, r0, lsl #16
    3bec:	32889f30 	addcc	r9, r8, #48, 30	; 0xc0
    3bf0:	32da0800 	sbcscc	r0, sl, #0, 16
    3bf4:	00020800 	andeq	r0, r2, r0, lsl #16
    3bf8:	33069f30 	movwcc	r9, #28464	; 0x6f30
    3bfc:	331a0800 	tstcc	sl, #0, 16
    3c00:	00080800 	andeq	r0, r8, r0, lsl #16
    3c04:	2e300072 	mrccs	0, 1, r0, cr0, cr2, {3}
    3c08:	9f1aff08 	svcls	0x001aff08
    3c0c:	0800331a 	stmdaeq	r0, {r1, r3, r4, r8, r9, ip, sp}
    3c10:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
    3c14:	9f300002 	svcls	0x00300002
    3c18:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
    3c1c:	08003330 	stmdaeq	r0, {r4, r5, r8, r9, ip, sp}
    3c20:	00720008 	rsbseq	r0, r2, r8
    3c24:	ff082e30 			; <UNDEFINED> instruction: 0xff082e30
    3c28:	337c9f1a 	cmncc	ip, #26, 30	; 0x68
    3c2c:	33840800 	orrcc	r0, r4, #0, 16
    3c30:	00080800 	andeq	r0, r8, r0, lsl #16
    3c34:	2e300072 	mrccs	0, 1, r0, cr0, cr2, {3}
    3c38:	9f1aff08 	svcls	0x001aff08
    3c3c:	08003384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp}
    3c40:	080033a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, ip, sp}
    3c44:	9f300002 	svcls	0x00300002
    3c48:	080033a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, ip, sp}
    3c4c:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
    3c50:	00720008 	rsbseq	r0, r2, r8
    3c54:	ff082e30 			; <UNDEFINED> instruction: 0xff082e30
    3c58:	33d29f1a 	bicscc	r9, r2, #26, 30	; 0x68
    3c5c:	33e60800 	mvncc	r0, #0, 16
    3c60:	00020800 	andeq	r0, r2, r0, lsl #16
    3c64:	00009f30 	andeq	r9, r0, r0, lsr pc
    3c68:	00000000 	andeq	r0, r0, r0
    3c6c:	32720000 	rsbscc	r0, r2, #0
    3c70:	32820800 	addcc	r0, r2, #0, 16
    3c74:	00020800 	andeq	r0, r2, r0, lsl #16
    3c78:	32889f30 	addcc	r9, r8, #48, 30	; 0xc0
    3c7c:	32da0800 	sbcscc	r0, sl, #0, 16
    3c80:	00020800 	andeq	r0, r2, r0, lsl #16
    3c84:	33089f30 	movwcc	r9, #36656	; 0x8f30
    3c88:	331a0800 	tstcc	sl, #0, 16
    3c8c:	00010800 	andeq	r0, r1, r0, lsl #16
    3c90:	00332e51 	eorseq	r2, r3, r1, asr lr
    3c94:	00333008 	eorseq	r3, r3, r8
    3c98:	51000108 	tstpl	r0, r8, lsl #2
    3c9c:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
    3ca0:	08003384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp}
    3ca4:	a4510001 	ldrbge	r0, [r1], #-1
    3ca8:	a8080033 	stmdage	r8, {r0, r1, r4, r5}
    3cac:	01080033 	tsteq	r8, r3, lsr r0
    3cb0:	33d25100 	bicscc	r5, r2, #0, 2
    3cb4:	33e60800 	mvncc	r0, #0, 16
    3cb8:	00020800 	andeq	r0, r2, r0, lsl #16
    3cbc:	00009f30 	andeq	r9, r0, r0, lsr pc
    3cc0:	00000000 	andeq	r0, r0, r0
    3cc4:	32720000 	rsbscc	r0, r2, #0
    3cc8:	32820800 	addcc	r0, r2, #0, 16
    3ccc:	00020800 	andeq	r0, r2, r0, lsl #16
    3cd0:	32889f31 	addcc	r9, r8, #49, 30	; 0xc4
    3cd4:	32da0800 	sbcscc	r0, sl, #0, 16
    3cd8:	00020800 	andeq	r0, r2, r0, lsl #16
    3cdc:	32da9f31 	sbcscc	r9, sl, #49, 30	; 0xc4
    3ce0:	33640800 	cmncc	r4, #0, 16
    3ce4:	00030800 	andeq	r0, r3, r0, lsl #16
    3ce8:	649f017b 	ldrvs	r0, [pc], #379	; 3cf0 <_Min_Stack_Size+0x38f0>
    3cec:	68080033 	stmdavs	r8, {r0, r1, r4, r5}
    3cf0:	03080033 	movweq	r0, #32819	; 0x8033
    3cf4:	9f027b00 	svcls	0x00027b00
    3cf8:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
    3cfc:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
    3d00:	017b0003 	cmneq	fp, r3
    3d04:	0033d29f 	mlaseq	r3, pc, r2, sp	; <UNPREDICTABLE>
    3d08:	0033e608 	eorseq	lr, r3, r8, lsl #12
    3d0c:	31000208 	tstcc	r0, r8, lsl #4
    3d10:	0033e69f 	mlaseq	r3, pc, r6, lr	; <UNPREDICTABLE>
    3d14:	00343c08 	eorseq	r3, r4, r8, lsl #24
    3d18:	7b000308 	blvc	4940 <_Min_Stack_Size+0x4540>
    3d1c:	00009f01 	andeq	r9, r0, r1, lsl #30
    3d20:	00000000 	andeq	r0, r0, r0
    3d24:	33d20000 	bicscc	r0, r2, #0
    3d28:	33e60800 	mvncc	r0, #0, 16
    3d2c:	00060800 	andeq	r0, r6, r0, lsl #16
    3d30:	1000020c 	andne	r0, r0, ip, lsl #4
    3d34:	00009f00 	andeq	r9, r0, r0, lsl #30
    3d38:	00000000 	andeq	r0, r0, r0
    3d3c:	33d20000 	bicscc	r0, r2, #0
    3d40:	33e60800 	mvncc	r0, #0, 16
    3d44:	00020800 	andeq	r0, r2, r0, lsl #16
    3d48:	00009f31 	andeq	r9, r0, r1, lsr pc
    3d4c:	00000000 	andeq	r0, r0, r0
    3d50:	33d20000 	bicscc	r0, r2, #0
    3d54:	33e60800 	mvncc	r0, #0, 16
    3d58:	00020800 	andeq	r0, r2, r0, lsl #16
    3d5c:	00009f49 	andeq	r9, r0, r9, asr #30
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	33d20000 	bicscc	r0, r2, #0
    3d68:	33e60800 	mvncc	r0, #0, 16
    3d6c:	00010800 	andeq	r0, r1, r0, lsl #16
    3d70:	00000056 	andeq	r0, r0, r6, asr r0
    3d74:	00000000 	andeq	r0, r0, r0
    3d78:	0033d200 	eorseq	sp, r3, r0, lsl #4
    3d7c:	0033e608 	eorseq	lr, r3, r8, lsl #12
    3d80:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    3d8c:	080032e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, ip, sp}
    3d90:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
    3d94:	010c0006 	tsteq	ip, r6
    3d98:	9f000100 	svcls	0x00000100
    3d9c:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
    3da0:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
    3da4:	010c0006 	tsteq	ip, r6
    3da8:	9f000100 	svcls	0x00000100
	...
    3db4:	080032e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, ip, sp}
    3db8:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
    3dbc:	9f300002 	svcls	0x00300002
    3dc0:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
    3dc4:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
    3dc8:	9f300002 	svcls	0x00300002
	...
    3dd4:	080032e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, ip, sp}
    3dd8:	080032e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, ip, sp}
    3ddc:	f4560001 			; <UNDEFINED> instruction: 0xf4560001
    3de0:	fa080032 	blx	203eb0 <_Min_Stack_Size+0x203ab0>
    3de4:	01080032 	tsteq	r8, r2, lsr r0
    3de8:	32fa5000 	rscscc	r5, sl, #0
    3dec:	33d20800 	bicscc	r0, r2, #0, 16
    3df0:	00010800 	andeq	r0, r1, r0, lsl #16
    3df4:	0033e656 	eorseq	lr, r3, r6, asr r6
    3df8:	00343c08 	eorseq	r3, r4, r8, lsl #24
    3dfc:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    3e08:	080032e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, ip, sp}
    3e0c:	080033d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, sp}
    3e10:	e6570001 	ldrb	r0, [r7], -r1
    3e14:	3c080033 	stccc	0, cr0, [r8], {51}	; 0x33
    3e18:	01080034 	tsteq	r8, r4, lsr r0
    3e1c:	00005700 	andeq	r5, r0, r0, lsl #14
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	33e60000 	mvncc	r0, #0
    3e28:	33fc0800 	mvnscc	r0, #0, 16
    3e2c:	00060800 	andeq	r0, r6, r0, lsl #16
    3e30:	0100010c 	tsteq	r0, ip, lsl #2
    3e34:	00009f00 	andeq	r9, r0, r0, lsl #30
    3e38:	00000000 	andeq	r0, r0, r0
    3e3c:	33e60000 	mvncc	r0, #0
    3e40:	33fc0800 	mvnscc	r0, #0, 16
    3e44:	00020800 	andeq	r0, r2, r0, lsl #16
    3e48:	00009f30 	andeq	r9, r0, r0, lsr pc
    3e4c:	00000000 	andeq	r0, r0, r0
    3e50:	33e60000 	mvncc	r0, #0
    3e54:	33fc0800 	mvnscc	r0, #0, 16
    3e58:	00010800 	andeq	r0, r1, r0, lsl #16
    3e5c:	00000057 	andeq	r0, r0, r7, asr r0
    3e60:	00000000 	andeq	r0, r0, r0
    3e64:	0033e600 	eorseq	lr, r3, r0, lsl #12
    3e68:	0033fc08 	eorseq	pc, r3, r8, lsl #24
    3e6c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    3e78:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
    3e7c:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
    3e80:	00550001 	subseq	r0, r5, r1
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	4c000000 	stcmi	0, cr0, [r0], {-0}
    3e8c:	7c080033 	stcvc	0, cr0, [r8], {51}	; 0x33
    3e90:	06080033 			; <UNDEFINED> instruction: 0x06080033
    3e94:	00020c00 	andeq	r0, r2, r0, lsl #24
    3e98:	009f0010 	addseq	r0, pc, r0, lsl r0	; <UNPREDICTABLE>
    3e9c:	00000000 	andeq	r0, r0, r0
    3ea0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    3ea4:	7c080033 	stcvc	0, cr0, [r8], {51}	; 0x33
    3ea8:	02080033 	andeq	r0, r8, #51	; 0x33
    3eac:	009f3100 	addseq	r3, pc, r0, lsl #2
    3eb0:	00000000 	andeq	r0, r0, r0
    3eb4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    3eb8:	7c080033 	stcvc	0, cr0, [r8], {51}	; 0x33
    3ebc:	02080033 	andeq	r0, r8, #51	; 0x33
    3ec0:	009f4900 	addseq	r4, pc, r0, lsl #18
    3ec4:	00000000 	andeq	r0, r0, r0
    3ec8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    3ecc:	7c080033 	stcvc	0, cr0, [r8], {51}	; 0x33
    3ed0:	01080033 	tsteq	r8, r3, lsr r0
    3ed4:	00005600 	andeq	r5, r0, r0, lsl #12
    3ed8:	00000000 	andeq	r0, r0, r0
    3edc:	33be0000 			; <UNDEFINED> instruction: 0x33be0000
    3ee0:	33d20800 	bicscc	r0, r2, #0, 16
    3ee4:	00060800 	andeq	r0, r6, r0, lsl #16
    3ee8:	1000020c 	andne	r0, r0, ip, lsl #4
    3eec:	00009f00 	andeq	r9, r0, r0, lsl #30
    3ef0:	00000000 	andeq	r0, r0, r0
    3ef4:	33be0000 			; <UNDEFINED> instruction: 0x33be0000
    3ef8:	33d20800 	bicscc	r0, r2, #0, 16
    3efc:	00020800 	andeq	r0, r2, r0, lsl #16
    3f00:	00009f31 	andeq	r9, r0, r1, lsr pc
    3f04:	00000000 	andeq	r0, r0, r0
    3f08:	33be0000 			; <UNDEFINED> instruction: 0x33be0000
    3f0c:	33d20800 	bicscc	r0, r2, #0, 16
    3f10:	00020800 	andeq	r0, r2, r0, lsl #16
    3f14:	00009f49 	andeq	r9, r0, r9, asr #30
    3f18:	00000000 	andeq	r0, r0, r0
    3f1c:	33be0000 			; <UNDEFINED> instruction: 0x33be0000
    3f20:	33d20800 	bicscc	r0, r2, #0, 16
    3f24:	00010800 	andeq	r0, r1, r0, lsl #16
    3f28:	00000056 	andeq	r0, r0, r6, asr r0
    3f2c:	00000000 	andeq	r0, r0, r0
    3f30:	0033be00 	eorseq	fp, r3, r0, lsl #28
    3f34:	0033d208 	eorseq	sp, r3, r8, lsl #4
    3f38:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    3f44:	08003460 	stmdaeq	r0, {r5, r6, sl, ip, sp}
    3f48:	08003462 	stmdaeq	r0, {r1, r5, r6, sl, ip, sp}
    3f4c:	62500001 	subsvs	r0, r0, #1
    3f50:	8a080034 	bhi	204028 <_Min_Stack_Size+0x203c28>
    3f54:	04080034 	streq	r0, [r8], #-52	; 0xffffffcc
    3f58:	5001f300 	andpl	pc, r1, r0, lsl #6
    3f5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f60:	00000000 	andeq	r0, r0, r0
    3f64:	00346200 	eorseq	r6, r4, r0, lsl #4
    3f68:	00348708 	eorseq	r8, r4, r8, lsl #14
    3f6c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    3f78:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
    3f7c:	0800348e 	stmdaeq	r0, {r1, r2, r3, r7, sl, ip, sp}
    3f80:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    3f84:	0e080034 	mcreq	0, 0, r0, cr8, cr4, {1}
    3f88:	04080035 	streq	r0, [r8], #-53	; 0xffffffcb
    3f8c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3f90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f94:	00000000 	andeq	r0, r0, r0
    3f98:	00348e00 	eorseq	r8, r4, r0, lsl #28
    3f9c:	0034e308 	eorseq	lr, r4, r8, lsl #6
    3fa0:	50000108 	andpl	r0, r0, r8, lsl #2
    3fa4:	080034e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, sp}
    3fa8:	08003505 	stmdaeq	r0, {r0, r2, r8, sl, ip, sp}
    3fac:	08500001 	ldmdaeq	r0, {r0}^
    3fb0:	0b080035 	bleq	20408c <_Min_Stack_Size+0x203c8c>
    3fb4:	01080035 	tsteq	r8, r5, lsr r0
    3fb8:	00005000 	andeq	r5, r0, r0
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	349a0000 	ldrcc	r0, [sl], #0
    3fc4:	34a60800 	strtcc	r0, [r6], #2048	; 0x800
    3fc8:	00010800 	andeq	r0, r1, r0, lsl #16
    3fcc:	0034e653 	eorseq	lr, r4, r3, asr r6
    3fd0:	0034ec08 	eorseq	lr, r4, r8, lsl #24
    3fd4:	53000108 	movwpl	r0, #264	; 0x108
	...
    3fe0:	0800349e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, ip, sp}
    3fe4:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
    3fe8:	00720006 	rsbseq	r0, r2, r6
    3fec:	9f1aff08 	svcls	0x001aff08
    3ff0:	080034e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, sp}
    3ff4:	080034ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip, sp}
    3ff8:	00720006 	rsbseq	r0, r2, r6
    3ffc:	9f1aff08 	svcls	0x001aff08
	...
    4008:	08003514 	stmdaeq	r0, {r2, r4, r8, sl, ip, sp}
    400c:	08003554 	stmdaeq	r0, {r2, r4, r6, r8, sl, ip, sp}
    4010:	54500001 	ldrbpl	r0, [r0], #-1
    4014:	78080035 	stmdavc	r8, {r0, r2, r4, r5}
    4018:	01080035 	tsteq	r8, r5, lsr r0
    401c:	35785400 	ldrbcc	r5, [r8, #-1024]!	; 0xfffffc00
    4020:	35920800 	ldrcc	r0, [r2, #2048]	; 0x800
    4024:	00010800 	andeq	r0, r1, r0, lsl #16
    4028:	00359250 	eorseq	r9, r5, r0, asr r2
    402c:	0035be08 	eorseq	fp, r5, r8, lsl #28
    4030:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4034:	080035be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, ip, sp}
    4038:	080035cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip, sp}
    403c:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4040:	04080035 	streq	r0, [r8], #-53	; 0xffffffcb
    4044:	01080036 	tsteq	r8, r6, lsr r0
    4048:	36045400 	strcc	r5, [r4], -r0, lsl #8
    404c:	36280800 	strtcc	r0, [r8], -r0, lsl #16
    4050:	00010800 	andeq	r0, r1, r0, lsl #16
    4054:	00362850 	eorseq	r2, r6, r0, asr r8
    4058:	00365008 	eorseq	r5, r6, r8
    405c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    4068:	0800351a 	stmdaeq	r0, {r1, r3, r4, r8, sl, ip, sp}
    406c:	0800351c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, sp}
    4070:	1c530001 	mrrcne	0, 0, r0, r3, cr1
    4074:	26080035 			; <UNDEFINED> instruction: 0x26080035
    4078:	03080035 	movweq	r0, #32821	; 0x8035
    407c:	9f297300 	svcls	0x00297300
    4080:	080035be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, ip, sp}
    4084:	080035c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, sp}
    4088:	29730003 	ldmdbcs	r3!, {r0, r1}^
    408c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4090:	00000000 	andeq	r0, r0, r0
    4094:	00365000 	eorseq	r5, r6, r0
    4098:	00365a08 	eorseq	r5, r6, r8, lsl #20
    409c:	50000108 	andpl	r0, r0, r8, lsl #2
    40a0:	0800365a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip, sp}
    40a4:	0800365c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip, sp}
    40a8:	01f30004 	mvnseq	r0, r4
    40ac:	365c9f50 	usaxcc	r9, ip, r0
    40b0:	36660800 	strbtcc	r0, [r6], -r0, lsl #16
    40b4:	00010800 	andeq	r0, r1, r0, lsl #16
    40b8:	00366650 	eorseq	r6, r6, r0, asr r6
    40bc:	00366808 	eorseq	r6, r6, r8, lsl #16
    40c0:	f3000408 	vshl.u8	d0, d8, d0
    40c4:	689f5001 	ldmvs	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    40c8:	97080036 	smladxls	r8, r6, r0, r0
    40cc:	01080036 	tsteq	r8, r6, lsr r0
    40d0:	36975000 	ldrcc	r5, [r7], r0
    40d4:	369c0800 	ldrcc	r0, [ip], r0, lsl #16
    40d8:	00040800 	andeq	r0, r4, r0, lsl #16
    40dc:	9f5001f3 	svcls	0x005001f3
	...
    40e8:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
    40ec:	08003670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip, sp}
    40f0:	70510001 	subsvc	r0, r1, r1
    40f4:	9c080036 	stcls	0, cr0, [r8], {54}	; 0x36
    40f8:	04080036 	streq	r0, [r8], #-54	; 0xffffffca
    40fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4100:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4104:	00000000 	andeq	r0, r0, r0
    4108:	00369c00 	eorseq	r9, r6, r0, lsl #24
    410c:	0036a808 	eorseq	sl, r6, r8, lsl #16
    4110:	50000108 	andpl	r0, r0, r8, lsl #2
    4114:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
    4118:	08003b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, ip, sp}
    411c:	86540001 	ldrbhi	r0, [r4], -r1
    4120:	8908003b 	stmdbhi	r8, {r0, r1, r3, r4, r5}
    4124:	0108003b 	tsteq	r8, fp, lsr r0
    4128:	3b895000 	blcc	fe258130 <_estack+0xde228130>
    412c:	3cfe0800 	ldclcc	8, cr0, [lr]
    4130:	00010800 	andeq	r0, r1, r0, lsl #16
    4134:	003cfe54 	eorseq	pc, ip, r4, asr lr	; <UNPREDICTABLE>
    4138:	003d0108 	eorseq	r0, sp, r8, lsl #2
    413c:	50000108 	andpl	r0, r0, r8, lsl #2
    4140:	08003d01 	stmdaeq	r0, {r0, r8, sl, fp, ip, sp}
    4144:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
    4148:	00540001 	subseq	r0, r4, r1
    414c:	00000000 	andeq	r0, r0, r0
    4150:	a4000000 	strge	r0, [r0], #-0
    4154:	dc080036 	stcle	0, cr0, [r8], {54}	; 0x36
    4158:	01080036 	tsteq	r8, r6, lsr r0
    415c:	370a5500 	strcc	r5, [sl, -r0, lsl #10]
    4160:	37fc0800 	ldrbcc	r0, [ip, r0, lsl #16]!
    4164:	00010800 	andeq	r0, r1, r0, lsl #16
    4168:	00380055 	eorseq	r0, r8, r5, asr r0
    416c:	00382408 	eorseq	r2, r8, r8, lsl #8
    4170:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    4174:	08003892 	stmdaeq	r0, {r1, r4, r7, fp, ip, sp}
    4178:	080038e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip, sp}
    417c:	ae550001 	cdpge	0, 5, cr0, cr5, cr1, {0}
    4180:	c4080039 	strgt	r0, [r8], #-57	; 0xffffffc7
    4184:	01080039 	tsteq	r8, r9, lsr r0
    4188:	3a1a5500 	bcc	699590 <_Min_Stack_Size+0x699190>
    418c:	3a620800 	bcc	1886194 <_Min_Stack_Size+0x1885d94>
    4190:	00010800 	andeq	r0, r1, r0, lsl #16
    4194:	003a7855 	eorseq	r7, sl, r5, asr r8
    4198:	003a7a08 	eorseq	r7, sl, r8, lsl #20
    419c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    41a0:	08003ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, sp}
    41a4:	08003b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, ip, sp}
    41a8:	8c550001 	mrrchi	0, 0, r0, r5, cr1
    41ac:	1208003b 	andne	r0, r8, #59	; 0x3b
    41b0:	0108003c 	tsteq	r8, ip, lsr r0
    41b4:	3c2c5500 	cfstr32cc	mvfx5, [ip], #-0
    41b8:	3c400800 	mcrrcc	8, 0, r0, r0, cr0
    41bc:	00010800 	andeq	r0, r1, r0, lsl #16
    41c0:	003c5255 	eorseq	r5, ip, r5, asr r2
    41c4:	003c8a08 	eorseq	r8, ip, r8, lsl #20
    41c8:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    41cc:	08003caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, sp}
    41d0:	08003cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp}
    41d4:	04550001 	ldrbeq	r0, [r5], #-1
    41d8:	e408003d 	str	r0, [r8], #-61	; 0xffffffc3
    41dc:	0108003d 	tsteq	r8, sp, lsr r0
    41e0:	3e245500 	cfsh64cc	mvdx5, mvdx4, #0
    41e4:	3e2c0800 	cdpcc	8, 2, cr0, cr12, cr0, {0}
    41e8:	00010800 	andeq	r0, r1, r0, lsl #16
    41ec:	003e3455 	eorseq	r3, lr, r5, asr r4
    41f0:	003e4a08 	eorseq	r4, lr, r8, lsl #20
    41f4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    4200:	080036a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip, sp}
    4204:	080036ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, ip, sp}
    4208:	0a520001 	beq	1484214 <_Min_Stack_Size+0x1483e14>
    420c:	1a080037 	bne	2042f0 <_Min_Stack_Size+0x203ef0>
    4210:	01080037 	tsteq	r8, r7, lsr r0
    4214:	37d45200 	ldrbcc	r5, [r4, r0, lsl #4]
    4218:	37fc0800 	ldrbcc	r0, [ip, r0, lsl #16]!
    421c:	00010800 	andeq	r0, r1, r0, lsl #16
    4220:	00380052 	eorseq	r0, r8, r2, asr r0
    4224:	00383208 	eorseq	r3, r8, r8, lsl #4
    4228:	52000108 	andpl	r0, r0, #8, 2
    422c:	08003892 	stmdaeq	r0, {r1, r4, r7, fp, ip, sp}
    4230:	080038d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp}
    4234:	14520001 	ldrbne	r0, [r2], #-1
    4238:	28080039 	stmdacs	r8, {r0, r3, r4, r5}
    423c:	01080039 	tsteq	r8, r9, lsr r0
    4240:	39ae5200 	stmibcc	lr!, {r9, ip, lr}
    4244:	39c20800 	stmibcc	r2, {fp}^
    4248:	00010800 	andeq	r0, r1, r0, lsl #16
    424c:	003a1a52 	eorseq	r1, sl, r2, asr sl
    4250:	003a3008 	eorseq	r3, sl, r8
    4254:	52000108 	andpl	r0, r0, #8, 2
    4258:	08003a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, sp}
    425c:	08003a8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, fp, ip, sp}
    4260:	d4520001 	ldrble	r0, [r2], #-1
    4264:	1408003a 	strne	r0, [r8], #-58	; 0xffffffc6
    4268:	0108003b 	tsteq	r8, fp, lsr r0
    426c:	3b1e5200 	blcc	798a74 <_Min_Stack_Size+0x798674>
    4270:	3b3c0800 	blcc	f06278 <_Min_Stack_Size+0xf05e78>
    4274:	00010800 	andeq	r0, r1, r0, lsl #16
    4278:	003b8c52 	eorseq	r8, fp, r2, asr ip
    427c:	003b9c08 	eorseq	r9, fp, r8, lsl #24
    4280:	52000108 	andpl	r0, r0, #8, 2
    4284:	08003bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, sp}
    4288:	08003c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, sp}
    428c:	34520001 	ldrbcc	r0, [r2], #-1
    4290:	4008003c 	andmi	r0, r8, ip, lsr r0
    4294:	0108003c 	tsteq	r8, ip, lsr r0
    4298:	3c525200 	lfmcc	f5, 2, [r2], {-0}
    429c:	3c8a0800 	stccc	8, cr0, [sl], {0}
    42a0:	00010800 	andeq	r0, r1, r0, lsl #16
    42a4:	003d0452 	eorseq	r0, sp, r2, asr r4
    42a8:	003de408 	eorseq	lr, sp, r8, lsl #8
    42ac:	52000108 	andpl	r0, r0, #8, 2
    42b0:	08003e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp}
    42b4:	08003e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, sp}
    42b8:	34520001 	ldrbcc	r0, [r2], #-1
    42bc:	4a08003e 	bmi	2043bc <_Min_Stack_Size+0x203fbc>
    42c0:	0108003e 	tsteq	r8, lr, lsr r0
    42c4:	00005200 	andeq	r5, r0, r0, lsl #4
    42c8:	00000000 	andeq	r0, r0, r0
    42cc:	36a80000 	strtcc	r0, [r8], r0
    42d0:	36e80800 	strbtcc	r0, [r8], r0, lsl #16
    42d4:	00010800 	andeq	r0, r1, r0, lsl #16
    42d8:	00370a50 	eorseq	r0, r7, r0, asr sl
    42dc:	00371c08 	eorseq	r1, r7, r8, lsl #24
    42e0:	50000108 	andpl	r0, r0, r8, lsl #2
    42e4:	080037d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, sp}
    42e8:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    42ec:	00500001 	subseq	r0, r0, r1
    42f0:	82080038 	andhi	r0, r8, #56	; 0x38
    42f4:	01080038 	tsteq	r8, r8, lsr r0
    42f8:	38925000 	ldmcc	r2, {ip, lr}
    42fc:	38e20800 	stmiacc	r2!, {fp}^
    4300:	00010800 	andeq	r0, r1, r0, lsl #16
    4304:	00391450 	eorseq	r1, r9, r0, asr r4
    4308:	00392008 	eorseq	r2, r9, r8
    430c:	50000108 	andpl	r0, r0, r8, lsl #2
    4310:	080039ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, fp, ip, sp}
    4314:	080039ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, ip, sp}
    4318:	1a500001 	bne	1404324 <_Min_Stack_Size+0x1403f24>
    431c:	4008003a 	andmi	r0, r8, sl, lsr r0
    4320:	0108003a 	tsteq	r8, sl, lsr r0
    4324:	3a785000 	bcc	1e1832c <_Min_Stack_Size+0x1e17f2c>
    4328:	3a9c0800 	bcc	fe706330 <_estack+0xde6d6330>
    432c:	00010800 	andeq	r0, r1, r0, lsl #16
    4330:	003ad450 	eorseq	sp, sl, r0, asr r4
    4334:	003b1808 	eorseq	r1, fp, r8, lsl #16
    4338:	50000108 	andpl	r0, r0, r8, lsl #2
    433c:	08003b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip, sp}
    4340:	08003b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp, ip, sp}
    4344:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4348:	9c08003b 	stcls	0, cr0, [r8], {59}	; 0x3b
    434c:	0108003b 	tsteq	r8, fp, lsr r0
    4350:	3bb45000 	blcc	fed18358 <_estack+0xdece8358>
    4354:	3c060800 	stccc	8, cr0, [r6], {-0}
    4358:	00010800 	andeq	r0, r1, r0, lsl #16
    435c:	003c3450 	eorseq	r3, ip, r0, asr r4
    4360:	003c4008 	eorseq	r4, ip, r8
    4364:	50000108 	andpl	r0, r0, r8, lsl #2
    4368:	08003c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, ip, sp}
    436c:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
    4370:	aa500001 	bge	140437c <_Min_Stack_Size+0x1403f7c>
    4374:	b808003c 	stmdalt	r8, {r2, r3, r4, r5}
    4378:	0108003c 	tsteq	r8, ip, lsr r0
    437c:	3d045000 	stccc	0, cr5, [r4, #-0]
    4380:	3de40800 	stclcc	8, cr0, [r4]
    4384:	00010800 	andeq	r0, r1, r0, lsl #16
    4388:	003e2450 	eorseq	r2, lr, r0, asr r4
    438c:	003e4a08 	eorseq	r4, lr, r8, lsl #20
    4390:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    439c:	080036ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip, sp}
    43a0:	080036be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, sp}
    43a4:	d4510001 	ldrble	r0, [r1], #-1
    43a8:	e0080037 	and	r0, r8, r7, lsr r0
    43ac:	01080037 	tsteq	r8, r7, lsr r0
    43b0:	38005100 	stmdacc	r0, {r8, ip, lr}
    43b4:	38020800 	stmdacc	r2, {fp}
    43b8:	00010800 	andeq	r0, r1, r0, lsl #16
    43bc:	003ad451 	eorseq	sp, sl, r1, asr r4
    43c0:	003ad808 	eorseq	sp, sl, r8, lsl #16
    43c4:	51000108 	tstpl	r0, r8, lsl #2
	...
    43d0:	080036ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
    43d4:	080036f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, ip, sp}
    43d8:	00540001 	subseq	r0, r4, r1
    43dc:	00000000 	andeq	r0, r0, r0
    43e0:	16000000 	strne	r0, [r0], -r0
    43e4:	d4080037 	strle	r0, [r8], #-55	; 0xffffffc9
    43e8:	01080037 	tsteq	r8, r7, lsr r0
    43ec:	3b9c5400 	blcc	fe7193f4 <_estack+0xde6e93f4>
    43f0:	3bb40800 	blcc	fed063f8 <_estack+0xdecd63f8>
    43f4:	00010800 	andeq	r0, r1, r0, lsl #16
    43f8:	003c0654 	eorseq	r0, ip, r4, asr r6
    43fc:	003c1208 	eorseq	r1, ip, r8, lsl #4
    4400:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4404:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
    4408:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
    440c:	00540001 	subseq	r0, r4, r1
    4410:	00000000 	andeq	r0, r0, r0
    4414:	42000000 	andmi	r0, r0, #0
    4418:	c2080037 	andgt	r0, r8, #55	; 0x37
    441c:	06080037 			; <UNDEFINED> instruction: 0x06080037
    4420:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    4424:	c29f1aff 	addsgt	r1, pc, #1044480	; 0xff000
    4428:	d1080037 	tstle	r8, r7, lsr r0
    442c:	06080037 			; <UNDEFINED> instruction: 0x06080037
    4430:	08287100 	stmdaeq	r8!, {r8, ip, sp, lr}
    4434:	9c9f1aff 	vldmials	pc, {s2-s256}
    4438:	9e08003b 	mcrls	0, 0, r0, cr8, cr11, {1}
    443c:	0608003b 			; <UNDEFINED> instruction: 0x0608003b
    4440:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    4444:	9e9f1aff 	mrcls	10, 4, r1, cr15, cr15, {7}
    4448:	b108003b 	tstlt	r8, fp, lsr r0
    444c:	0608003b 			; <UNDEFINED> instruction: 0x0608003b
    4450:	08287100 	stmdaeq	r8!, {r8, ip, sp, lr}
    4454:	069f1aff 			; <UNDEFINED> instruction: 0x069f1aff
    4458:	1208003c 	andne	r0, r8, #60	; 0x3c
    445c:	0608003c 			; <UNDEFINED> instruction: 0x0608003c
    4460:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    4464:	2c9f1aff 	vldmiacs	pc, {s2-s256}
    4468:	3108003c 	tstcc	r8, ip, lsr r0
    446c:	0608003c 			; <UNDEFINED> instruction: 0x0608003c
    4470:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    4474:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    4478:	00000000 	andeq	r0, r0, r0
    447c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4480:	1a080038 	bne	204568 <_Min_Stack_Size+0x204168>
    4484:	01080038 	tsteq	r8, r8, lsr r0
    4488:	00005400 	andeq	r5, r0, r0, lsl #8
    448c:	00000000 	andeq	r0, r0, r0
    4490:	382e0000 	stmdacc	lr!, {}	; <UNPREDICTABLE>
    4494:	38820800 	stmcc	r2, {fp}
    4498:	00010800 	andeq	r0, r1, r0, lsl #16
    449c:	003c8a54 	eorseq	r8, ip, r4, asr sl
    44a0:	003ca008 	eorseq	sl, ip, r8
    44a4:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    44a8:	08003e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, sp}
    44ac:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
    44b0:	00540001 	subseq	r0, r4, r1
    44b4:	00000000 	andeq	r0, r0, r0
    44b8:	36000000 	strcc	r0, [r0], -r0
    44bc:	3a080038 	bcc	2045a4 <_Min_Stack_Size+0x2041a4>
    44c0:	02080038 	andeq	r0, r8, #56	; 0x38
    44c4:	3a9f3000 	bcc	fe7d04cc <_estack+0xde7a04cc>
    44c8:	40080038 	andmi	r0, r8, r8, lsr r0
    44cc:	01080038 	tsteq	r8, r8, lsr r0
    44d0:	38405200 	stmdacc	r0, {r9, ip, lr}^
    44d4:	38440800 	stmdacc	r4, {fp}^
    44d8:	00030800 	andeq	r0, r3, r0, lsl #16
    44dc:	009f0272 	addseq	r0, pc, r2, ror r2	; <UNPREDICTABLE>
    44e0:	00000000 	andeq	r0, r0, r0
    44e4:	24000000 	strcs	r0, [r0], #-0
    44e8:	9c080039 	stcls	0, cr0, [r8], {57}	; 0x39
    44ec:	01080039 	tsteq	r8, r9, lsr r0
    44f0:	3c125400 	cfldrscc	mvf5, [r2], {-0}
    44f4:	3c2c0800 	stccc	8, cr0, [ip], #-0
    44f8:	00010800 	andeq	r0, r1, r0, lsl #16
    44fc:	003c4854 	eorseq	r4, ip, r4, asr r8
    4500:	003c5208 	eorseq	r5, ip, r8, lsl #4
    4504:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    4510:	08003926 	stmdaeq	r0, {r1, r2, r5, r8, fp, ip, sp}
    4514:	08003962 	stmdaeq	r0, {r1, r5, r6, r8, fp, ip, sp}
    4518:	12510001 	subsne	r0, r1, #1
    451c:	2c08003c 	stccs	0, cr0, [r8], {60}	; 0x3c
    4520:	0108003c 	tsteq	r8, ip, lsr r0
    4524:	3c485100 	stfcce	f5, [r8], {-0}
    4528:	3c520800 	mrrccc	8, 0, r0, r2, cr0
    452c:	00010800 	andeq	r0, r1, r0, lsl #16
    4530:	00000051 	andeq	r0, r0, r1, asr r0
    4534:	00000000 	andeq	r0, r0, r0
    4538:	00389e00 	eorseq	r9, r8, r0, lsl #28
    453c:	0038c408 	eorseq	ip, r8, r8, lsl #8
    4540:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4544:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
    4548:	08003c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, sp}
    454c:	52540001 	subspl	r0, r4, #1
    4550:	8a08003c 	bhi	204648 <_Min_Stack_Size+0x204248>
    4554:	0108003c 	tsteq	r8, ip, lsr r0
    4558:	3d045400 	cfstrscc	mvf5, [r4, #-0]
    455c:	3de40800 	stclcc	8, cr0, [r4]
    4560:	00010800 	andeq	r0, r1, r0, lsl #16
    4564:	003e2454 	eorseq	r2, lr, r4, asr r4
    4568:	003e2c08 	eorseq	r2, lr, r8, lsl #24
    456c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4570:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
    4574:	08003e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, sp}
    4578:	00540001 	subseq	r0, r4, r1
    457c:	00000000 	andeq	r0, r0, r0
    4580:	b2000000 	andlt	r0, r0, #0
    4584:	c4080038 	strgt	r0, [r8], #-56	; 0xffffffc8
    4588:	06080038 			; <UNDEFINED> instruction: 0x06080038
    458c:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    4590:	cc9f1aff 	vldmiagt	pc, {s2-s256}
    4594:	d808003b 	stmdale	r8, {r0, r1, r3, r4, r5}
    4598:	0608003b 			; <UNDEFINED> instruction: 0x0608003b
    459c:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    45a0:	3e9f1aff 	mrccc	10, 4, r1, cr15, cr15, {7}
    45a4:	4c08003d 	stcmi	0, cr0, [r8], {61}	; 0x3d
    45a8:	0608003d 			; <UNDEFINED> instruction: 0x0608003d
    45ac:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    45b0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    45b4:	00000000 	andeq	r0, r0, r0
    45b8:	b2000000 	andlt	r0, r0, #0
    45bc:	c4080038 	strgt	r0, [r8], #-56	; 0xffffffc8
    45c0:	01080038 	tsteq	r8, r8, lsr r0
    45c4:	3bcc5e00 	blcc	ff31bdcc <_estack+0xdf2ebdcc>
    45c8:	3c060800 	stccc	8, cr0, [r6], {-0}
    45cc:	00010800 	andeq	r0, r1, r0, lsl #16
    45d0:	003c525e 	eorseq	r5, ip, lr, asr r2
    45d4:	003c8a08 	eorseq	r8, ip, r8, lsl #20
    45d8:	5e000108 	adfpls	f0, f0, #0.0
    45dc:	08003d04 	stmdaeq	r0, {r2, r8, sl, fp, ip, sp}
    45e0:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
    45e4:	245e0001 	ldrbcs	r0, [lr], #-1
    45e8:	2c08003e 	stccs	0, cr0, [r8], {62}	; 0x3e
    45ec:	0108003e 	tsteq	r8, lr, lsr r0
    45f0:	3e345e00 	cdpcc	14, 3, cr5, cr4, cr0, {0}
    45f4:	3e4a0800 	cdpcc	8, 4, cr0, cr10, cr0, {0}
    45f8:	00010800 	andeq	r0, r1, r0, lsl #16
    45fc:	0000005e 	andeq	r0, r0, lr, asr r0
    4600:	00000000 	andeq	r0, r0, r0
    4604:	0038b200 	eorseq	fp, r8, r0, lsl #4
    4608:	0038c408 	eorseq	ip, r8, r8, lsl #8
    460c:	5c000108 	stfpls	f0, [r0], {8}
    4610:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
    4614:	08003c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, sp}
    4618:	525c0001 	subspl	r0, ip, #1
    461c:	8a08003c 	bhi	204714 <_Min_Stack_Size+0x204314>
    4620:	0108003c 	tsteq	r8, ip, lsr r0
    4624:	3d045c00 	stccc	12, cr5, [r4, #-0]
    4628:	3de40800 	stclcc	8, cr0, [r4]
    462c:	00010800 	andeq	r0, r1, r0, lsl #16
    4630:	003e245c 	eorseq	r2, lr, ip, asr r4
    4634:	003e2c08 	eorseq	r2, lr, r8, lsl #24
    4638:	5c000108 	stfpls	f0, [r0], {8}
    463c:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
    4640:	08003e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, sp}
    4644:	005c0001 	subseq	r0, ip, r1
    4648:	00000000 	andeq	r0, r0, r0
    464c:	da000000 	ble	4654 <_Min_Stack_Size+0x4254>
    4650:	e2080038 	and	r0, r8, #56	; 0x38
    4654:	01080038 	tsteq	r8, r8, lsr r0
    4658:	00005400 	andeq	r5, r0, r0, lsl #8
    465c:	00000000 	andeq	r0, r0, r0
    4660:	39be0000 	ldmibcc	lr!, {}	; <UNPREDICTABLE>
    4664:	3a1a0800 	bcc	68666c <_Min_Stack_Size+0x68626c>
    4668:	00010800 	andeq	r0, r1, r0, lsl #16
    466c:	003c4054 	eorseq	r4, ip, r4, asr r0
    4670:	003c4808 	eorseq	r4, ip, r8, lsl #16
    4674:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4678:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
    467c:	08003cfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
    4680:	e4540001 	ldrb	r0, [r4], #-1
    4684:	2408003d 	strcs	r0, [r8], #-61	; 0xffffffc3
    4688:	0108003e 	tsteq	r8, lr, lsr r0
    468c:	3e4a5400 	cdpcc	4, 4, cr5, cr10, cr0, {0}
    4690:	3e6e0800 	cdpcc	8, 6, cr0, cr14, cr0, {0}
    4694:	00010800 	andeq	r0, r1, r0, lsl #16
    4698:	00000054 	andeq	r0, r0, r4, asr r0
    469c:	00000000 	andeq	r0, r0, r0
    46a0:	0039cc00 	eorseq	ip, r9, r0, lsl #24
    46a4:	0039e808 	eorseq	lr, r9, r8, lsl #16
    46a8:	52000108 	andpl	r0, r0, #8, 2
    46ac:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
    46b0:	08003c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp}
    46b4:	c4520001 	ldrbgt	r0, [r2], #-1
    46b8:	d608003c 			; <UNDEFINED> instruction: 0xd608003c
    46bc:	0108003c 	tsteq	r8, ip, lsr r0
    46c0:	3de45200 	sfmcc	f5, 2, [r4]
    46c4:	3de60800 	stclcc	8, cr0, [r6]
    46c8:	00010800 	andeq	r0, r1, r0, lsl #16
    46cc:	00000052 	andeq	r0, r0, r2, asr r0
    46d0:	00000000 	andeq	r0, r0, r0
    46d4:	0039ce00 	eorseq	ip, r9, r0, lsl #28
    46d8:	003a1a08 	eorseq	r1, sl, r8, lsl #20
    46dc:	71000608 	tstvc	r0, r8, lsl #12
    46e0:	1aff0800 	bne	fffc66e8 <_estack+0xdff966e8>
    46e4:	003c409f 	mlaseq	ip, pc, r0, r4	; <UNPREDICTABLE>
    46e8:	003c4808 	eorseq	r4, ip, r8, lsl #16
    46ec:	71000608 	tstvc	r0, r8, lsl #12
    46f0:	1aff0800 	bne	fffc66f8 <_estack+0xdff966f8>
    46f4:	003cc49f 	mlaseq	ip, pc, r4, ip	; <UNPREDICTABLE>
    46f8:	003cde08 	eorseq	sp, ip, r8, lsl #28
    46fc:	71000608 	tstvc	r0, r8, lsl #12
    4700:	1aff0800 	bne	fffc6708 <_estack+0xdff96708>
    4704:	003de49f 	mlaseq	sp, pc, r4, lr	; <UNPREDICTABLE>
    4708:	003dee08 	eorseq	lr, sp, r8, lsl #28
    470c:	71000608 	tstvc	r0, r8, lsl #12
    4710:	1aff0800 	bne	fffc6718 <_estack+0xdff96718>
    4714:	003e029f 	mlaseq	lr, pc, r2, r0	; <UNPREDICTABLE>
    4718:	003e2408 	eorseq	r2, lr, r8, lsl #8
    471c:	71000608 	tstvc	r0, r8, lsl #12
    4720:	1aff0800 	bne	fffc6728 <_estack+0xdff96728>
    4724:	003e4a9f 	mlaseq	lr, pc, sl, r4	; <UNPREDICTABLE>
    4728:	003e6e08 	eorseq	r6, lr, r8, lsl #28
    472c:	71000608 	tstvc	r0, r8, lsl #12
    4730:	1aff0800 	bne	fffc6738 <_estack+0xdff96738>
    4734:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4738:	00000000 	andeq	r0, r0, r0
    473c:	0039ce00 	eorseq	ip, r9, r0, lsl #28
    4740:	003a1a08 	eorseq	r1, sl, r8, lsl #20
    4744:	50000108 	andpl	r0, r0, r8, lsl #2
    4748:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
    474c:	08003c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp}
    4750:	c4500001 	ldrbgt	r0, [r0], #-1
    4754:	e208003c 	and	r0, r8, #60	; 0x3c
    4758:	0108003c 	tsteq	r8, ip, lsr r0
    475c:	3de45000 	stclcc	0, cr5, [r4]
    4760:	3df20800 	ldclcc	8, cr0, [r2]
    4764:	00010800 	andeq	r0, r1, r0, lsl #16
    4768:	003e0250 	eorseq	r0, lr, r0, asr r2
    476c:	003e2408 	eorseq	r2, lr, r8, lsl #8
    4770:	50000108 	andpl	r0, r0, r8, lsl #2
    4774:	08003e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, sp}
    4778:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
    477c:	00500001 	subseq	r0, r0, r1
    4780:	00000000 	andeq	r0, r0, r0
    4784:	2a000000 	bcs	478c <_Min_Stack_Size+0x438c>
    4788:	7808003a 	stmdavc	r8, {r1, r3, r4, r5}
    478c:	0108003a 	tsteq	r8, sl, lsr r0
    4790:	00005400 	andeq	r5, r0, r0, lsl #8
    4794:	00000000 	andeq	r0, r0, r0
    4798:	3a340000 	bcc	d047a0 <_Min_Stack_Size+0xd043a0>
    479c:	3a680800 	bcc	1a067a4 <_Min_Stack_Size+0x1a063a4>
    47a0:	00060800 	andeq	r0, r6, r0, lsl #16
    47a4:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    47a8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    47ac:	00000000 	andeq	r0, r0, r0
    47b0:	3a880000 	bcc	fe2047b8 <_estack+0xde1d47b8>
    47b4:	3ad40800 	bcc	ff5067bc <_estack+0xdf4d67bc>
    47b8:	00010800 	andeq	r0, r1, r0, lsl #16
    47bc:	00000054 	andeq	r0, r0, r4, asr r0
    47c0:	00000000 	andeq	r0, r0, r0
    47c4:	003a9200 	eorseq	r9, sl, r0, lsl #4
    47c8:	003ac408 	eorseq	ip, sl, r8, lsl #8
    47cc:	71000608 	tstvc	r0, r8, lsl #12
    47d0:	1aff0800 	bne	fffc67d8 <_estack+0xdff967d8>
    47d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	003ad400 	eorseq	sp, sl, r0, lsl #8
    47e0:	003b0208 	eorseq	r0, fp, r8, lsl #4
    47e4:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    47e8:	08003b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip, sp}
    47ec:	08003b36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, fp, ip, sp}
    47f0:	8c540001 	mrrchi	0, 0, r0, r4, cr1
    47f4:	9c08003b 	stcls	0, cr0, [r8], {59}	; 0x3b
    47f8:	0108003b 	tsteq	r8, fp, lsr r0
    47fc:	3bb45400 	blcc	fed19804 <_estack+0xdece9804>
    4800:	3bcc0800 	blcc	ff306808 <_estack+0xdf2d6808>
    4804:	00010800 	andeq	r0, r1, r0, lsl #16
    4808:	003c3454 	eorseq	r3, ip, r4, asr r4
    480c:	003c4008 	eorseq	r4, ip, r8
    4810:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    481c:	08003b02 	stmdaeq	r0, {r1, r8, r9, fp, ip, sp}
    4820:	08003b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip, sp}
    4824:	00540001 	subseq	r0, r4, r1
    4828:	00000000 	andeq	r0, r0, r0
    482c:	02000000 	andeq	r0, r0, #0
    4830:	1008003b 	andne	r0, r8, fp, lsr r0
    4834:	0208003b 	andeq	r0, r8, #59	; 0x3b
    4838:	109f3000 	addsne	r3, pc, r0
    483c:	1b08003b 	blne	204930 <_Min_Stack_Size+0x204530>
    4840:	0108003b 	tsteq	r8, fp, lsr r0
    4844:	00005100 	andeq	r5, r0, r0, lsl #2
    4848:	00000000 	andeq	r0, r0, r0
    484c:	3b020000 	blcc	84854 <_Min_Stack_Size+0x84454>
    4850:	3b140800 	blcc	506858 <_Min_Stack_Size+0x506458>
    4854:	00020800 	andeq	r0, r2, r0, lsl #16
    4858:	3b149f30 	blcc	52c520 <_Min_Stack_Size+0x52c120>
    485c:	3b1b0800 	blcc	6c6864 <_Min_Stack_Size+0x6c6464>
    4860:	00010800 	andeq	r0, r1, r0, lsl #16
    4864:	00000052 	andeq	r0, r0, r2, asr r0
    4868:	00000000 	andeq	r0, r0, r0
    486c:	003b3600 	eorseq	r3, fp, r0, lsl #12
    4870:	003b8608 	eorseq	r8, fp, r8, lsl #12
    4874:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4878:	08003caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, sp}
    487c:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
    4880:	00540001 	subseq	r0, r4, r1
    4884:	00000000 	andeq	r0, r0, r0
    4888:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    488c:	6808003b 	stmdavs	r8, {r0, r1, r3, r4, r5}
    4890:	0108003b 	tsteq	r8, fp, lsr r0
    4894:	3caa5100 	stfccs	f5, [sl]
    4898:	3cac0800 	stccc	8, cr0, [ip]
    489c:	00010800 	andeq	r0, r1, r0, lsl #16
    48a0:	00000051 	andeq	r0, r0, r1, asr r0
    48a4:	00000000 	andeq	r0, r0, r0
    48a8:	003e7000 	eorseq	r7, lr, r0
    48ac:	003e7208 	eorseq	r7, lr, r8, lsl #4
    48b0:	50000108 	andpl	r0, r0, r8, lsl #2
    48b4:	08003e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
    48b8:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    48bc:	01f30004 	mvnseq	r0, r4
    48c0:	00009f50 	andeq	r9, r0, r0, asr pc
    48c4:	00000000 	andeq	r0, r0, r0
    48c8:	3e720000 	cdpcc	0, 7, cr0, cr2, cr0, {0}
    48cc:	3ea90800 	cdpcc	8, 10, cr0, cr9, cr0, {0}
    48d0:	00010800 	andeq	r0, r1, r0, lsl #16
    48d4:	003eac50 	eorseq	sl, lr, r0, asr ip
    48d8:	003eb908 	eorseq	fp, lr, r8, lsl #18
    48dc:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    48e8:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    48ec:	08003ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp}
    48f0:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
    48f4:	3808003e 	stmdacc	r8, {r1, r2, r3, r4, r5}
    48f8:	0108003f 	tsteq	r8, pc, lsr r0
    48fc:	3f385400 	svccc	0x00385400
    4900:	3f400800 	svccc	0x00400800
    4904:	00010800 	andeq	r0, r1, r0, lsl #16
    4908:	003f4050 	eorseq	r4, pc, r0, asr r0	; <UNPREDICTABLE>
    490c:	003f4408 	eorseq	r4, pc, r8, lsl #8
    4910:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4914:	08003f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, sp}
    4918:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    491c:	50500001 	subspl	r0, r0, r1
    4920:	f208003f 	vqadd.s8	d0, d8, d31
    4924:	0108003f 	tsteq	r8, pc, lsr r0
    4928:	3ff25400 	svccc	0x00f25400
    492c:	40000800 	andmi	r0, r0, r0, lsl #16
    4930:	00010800 	andeq	r0, r1, r0, lsl #16
    4934:	00400050 	subeq	r0, r0, r0, asr r0
    4938:	00415408 	subeq	r5, r1, r8, lsl #8
    493c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    4948:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    494c:	08003f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp}
    4950:	9f300002 	svcls	0x00300002
    4954:	08003f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp}
    4958:	08003f2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, fp, ip, sp}
    495c:	38500001 	ldmdacc	r0, {r0}^
    4960:	6008003f 	andvs	r0, r8, pc, lsr r0
    4964:	0208003f 	andeq	r0, r8, #63	; 0x3f
    4968:	f29f3000 	vaddl.s16	<illegal reg q1.5>, d15, d0
    496c:	0008003f 	andeq	r0, r8, pc, lsr r0
    4970:	02080040 	andeq	r0, r8, #64	; 0x40
    4974:	3a9f3000 	bcc	fe7d097c <_estack+0xde7a097c>
    4978:	44080040 	strmi	r0, [r8], #-64	; 0xffffffc0
    497c:	01080040 	tsteq	r8, r0, asr #32
    4980:	40525000 	subsmi	r5, r2, r0
    4984:	40880800 	addmi	r0, r8, r0, lsl #16
    4988:	00010800 	andeq	r0, r1, r0, lsl #16
    498c:	00411450 	subeq	r1, r1, r0, asr r4
    4990:	00413808 	subeq	r3, r1, r8, lsl #16
    4994:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    49a0:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    49a4:	08003f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, sp}
    49a8:	9f300002 	svcls	0x00300002
    49ac:	08003f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, sp}
    49b0:	08003f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip, sp}
    49b4:	00720007 	rsbseq	r0, r2, r7
    49b8:	1affff0a 	bne	45e8 <_Min_Stack_Size+0x41e8>
    49bc:	003f389f 	mlaseq	pc, pc, r8, r3	; <UNPREDICTABLE>
    49c0:	003f6008 	eorseq	r6, pc, r8
    49c4:	30000208 	andcc	r0, r0, r8, lsl #4
    49c8:	003ff29f 	mlaseq	pc, pc, r2, pc	; <UNPREDICTABLE>
    49cc:	00400008 	subeq	r0, r0, r8
    49d0:	30000208 	andcc	r0, r0, r8, lsl #4
    49d4:	0040529f 	umaaleq	r5, r0, pc, r2	; <UNPREDICTABLE>
    49d8:	00405c08 	subeq	r5, r0, r8, lsl #24
    49dc:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    49e0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    49e4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    49e8:	00000000 	andeq	r0, r0, r0
    49ec:	3ebc0000 	cdpcc	0, 11, cr0, cr12, cr0, {0}
    49f0:	3f0e0800 	svccc	0x000e0800
    49f4:	00020800 	andeq	r0, r2, r0, lsl #16
    49f8:	3f0e9f30 	svccc	0x000e9f30
    49fc:	3f240800 	svccc	0x00240800
    4a00:	00060800 	andeq	r0, r6, r0, lsl #16
    4a04:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    4a08:	3f389f1a 	svccc	0x00389f1a
    4a0c:	3f600800 	svccc	0x00600800
    4a10:	00020800 	andeq	r0, r2, r0, lsl #16
    4a14:	3ff29f30 	svccc	0x00f29f30
    4a18:	40000800 	andmi	r0, r0, r0, lsl #16
    4a1c:	00020800 	andeq	r0, r2, r0, lsl #16
    4a20:	403a9f30 	eorsmi	r9, sl, r0, lsr pc
    4a24:	40440800 	submi	r0, r4, r0, lsl #16
    4a28:	00060800 	andeq	r0, r6, r0, lsl #16
    4a2c:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    4a30:	40529f1a 	subsmi	r9, r2, sl, lsl pc
    4a34:	40720800 	rsbsmi	r0, r2, r0, lsl #16
    4a38:	00060800 	andeq	r0, r6, r0, lsl #16
    4a3c:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    4a40:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4a44:	00000000 	andeq	r0, r0, r0
    4a48:	3ebc0000 	cdpcc	0, 11, cr0, cr12, cr0, {0}
    4a4c:	3f080800 	svccc	0x00080800
    4a50:	00020800 	andeq	r0, r2, r0, lsl #16
    4a54:	3f0e9f30 	svccc	0x000e9f30
    4a58:	3f2a0800 	svccc	0x002a0800
    4a5c:	00010800 	andeq	r0, r1, r0, lsl #16
    4a60:	003f3856 	eorseq	r3, pc, r6, asr r8	; <UNPREDICTABLE>
    4a64:	003f6008 	eorseq	r6, pc, r8
    4a68:	30000208 	andcc	r0, r0, r8, lsl #4
    4a6c:	003ff29f 	mlaseq	pc, pc, r2, pc	; <UNPREDICTABLE>
    4a70:	00400008 	subeq	r0, r0, r8
    4a74:	30000208 	andcc	r0, r0, r8, lsl #4
    4a78:	00403a9f 	umaaleq	r3, r0, pc, sl	; <UNPREDICTABLE>
    4a7c:	00404408 	subeq	r4, r0, r8, lsl #8
    4a80:	56000108 	strpl	r0, [r0], -r8, lsl #2
    4a84:	08004052 	stmdaeq	r0, {r1, r4, r6, lr}
    4a88:	080040b0 	stmdaeq	r0, {r4, r5, r7, lr}
    4a8c:	14560001 	ldrbne	r0, [r6], #-1
    4a90:	34080041 	strcc	r0, [r8], #-65	; 0xffffffbf
    4a94:	01080041 	tsteq	r8, r1, asr #32
    4a98:	00005600 	andeq	r5, r0, r0, lsl #12
    4a9c:	00000000 	andeq	r0, r0, r0
    4aa0:	3ec40000 	cdpcc	0, 12, cr0, cr4, cr0, {0}
    4aa4:	3f360800 	svccc	0x00360800
    4aa8:	00010800 	andeq	r0, r1, r0, lsl #16
    4aac:	003f3855 	eorseq	r3, pc, r5, asr r8	; <UNPREDICTABLE>
    4ab0:	003f8c08 	eorseq	r8, pc, r8, lsl #24
    4ab4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    4ab8:	08003ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    4abc:	08004000 	stmdaeq	r0, {lr}
    4ac0:	36550001 	ldrbcc	r0, [r5], -r1
    4ac4:	b0080040 	andlt	r0, r8, r0, asr #32
    4ac8:	01080040 	tsteq	r8, r0, asr #32
    4acc:	41145500 	tstmi	r4, r0, lsl #10
    4ad0:	41540800 	cmpmi	r4, r0, lsl #16
    4ad4:	00010800 	andeq	r0, r1, r0, lsl #16
    4ad8:	00000055 	andeq	r0, r0, r5, asr r0
    4adc:	00000000 	andeq	r0, r0, r0
    4ae0:	003ec600 	eorseq	ip, lr, r0, lsl #12
    4ae4:	003f0608 	eorseq	r0, pc, r8, lsl #12
    4ae8:	51000108 	tstpl	r0, r8, lsl #2
    4aec:	08003f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp}
    4af0:	08003f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, sp}
    4af4:	f2510001 	vhadd.s16	d16, d1, d1
    4af8:	0008003f 	andeq	r0, r8, pc, lsr r0
    4afc:	01080040 	tsteq	r8, r0, asr #32
    4b00:	00005100 	andeq	r5, r0, r0, lsl #2
    4b04:	00000000 	andeq	r0, r0, r0
    4b08:	3f740000 	svccc	0x00740000
    4b0c:	3ff20800 	svccc	0x00f20800
    4b10:	00010800 	andeq	r0, r1, r0, lsl #16
    4b14:	00400054 	subeq	r0, r0, r4, asr r0
    4b18:	00403608 	subeq	r3, r0, r8, lsl #12
    4b1c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    4b20:	08004044 	stmdaeq	r0, {r2, r6, lr}
    4b24:	08004052 	stmdaeq	r0, {r1, r4, r6, lr}
    4b28:	b0540001 	subslt	r0, r4, r1
    4b2c:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
    4b30:	01080041 	tsteq	r8, r1, asr #32
    4b34:	00005400 	andeq	r5, r0, r0, lsl #8
    4b38:	00000000 	andeq	r0, r0, r0
    4b3c:	3f780000 	svccc	0x00780000
    4b40:	3f7a0800 	svccc	0x007a0800
    4b44:	00010800 	andeq	r0, r1, r0, lsl #16
    4b48:	003f7a53 	eorseq	r7, pc, r3, asr sl	; <UNPREDICTABLE>
    4b4c:	003f8208 	eorseq	r8, pc, r8, lsl #4
    4b50:	73000308 	movwvc	r0, #776	; 0x308
    4b54:	40449f29 	submi	r9, r4, r9, lsr #30
    4b58:	40460800 	submi	r0, r6, r0, lsl #16
    4b5c:	00030800 	andeq	r0, r3, r0, lsl #16
    4b60:	009f2973 	addseq	r2, pc, r3, ror r9	; <UNPREDICTABLE>
    4b64:	00000000 	andeq	r0, r0, r0
    4b68:	6c000000 	stcvs	0, cr0, [r0], {-0}
    4b6c:	b0080040 	andlt	r0, r8, r0, asr #32
    4b70:	01080040 	tsteq	r8, r0, asr #32
    4b74:	41145400 	tstmi	r4, r0, lsl #8
    4b78:	41540800 	cmpmi	r4, r0, lsl #16
    4b7c:	00010800 	andeq	r0, r1, r0, lsl #16
    4b80:	00000054 	andeq	r0, r0, r4, asr r0
    4b84:	00000000 	andeq	r0, r0, r0
    4b88:	00407600 	subeq	r7, r0, r0, lsl #12
    4b8c:	00409608 	subeq	r9, r0, r8, lsl #12
    4b90:	52000108 	andpl	r0, r0, #8, 2
    4b94:	08004114 	stmdaeq	r0, {r2, r4, r8, lr}
    4b98:	0800411a 	stmdaeq	r0, {r1, r3, r4, r8, lr}
    4b9c:	00520001 	subseq	r0, r2, r1
    4ba0:	00000000 	andeq	r0, r0, r0
    4ba4:	76000000 	strvc	r0, [r0], -r0
    4ba8:	84080040 	strhi	r0, [r8], #-64	; 0xffffffc0
    4bac:	01080040 	tsteq	r8, r0, asr #32
    4bb0:	41145100 	tstmi	r4, r0, lsl #2
    4bb4:	41220800 			; <UNDEFINED> instruction: 0x41220800
    4bb8:	00010800 	andeq	r0, r1, r0, lsl #16
    4bbc:	00000051 	andeq	r0, r0, r1, asr r0
    4bc0:	00000000 	andeq	r0, r0, r0
    4bc4:	00415400 	subeq	r5, r1, r0, lsl #8
    4bc8:	00415808 	subeq	r5, r1, r8, lsl #16
    4bcc:	50000108 	andpl	r0, r0, r8, lsl #2
    4bd0:	08004158 	stmdaeq	r0, {r3, r4, r6, r8, lr}
    4bd4:	0800415a 	stmdaeq	r0, {r1, r3, r4, r6, r8, lr}
    4bd8:	01f30004 	mvnseq	r0, r4
    4bdc:	00009f50 	andeq	r9, r0, r0, asr pc
    4be0:	00000000 	andeq	r0, r0, r0
    4be4:	415c0000 	cmpmi	ip, r0
    4be8:	41600800 	cmnmi	r0, r0, lsl #16
    4bec:	00010800 	andeq	r0, r1, r0, lsl #16
    4bf0:	00416050 	subeq	r6, r1, r0, asr r0
    4bf4:	00416208 	subeq	r6, r1, r8, lsl #4
    4bf8:	f3000408 	vshl.u8	d0, d8, d0
    4bfc:	009f5001 	addseq	r5, pc, r1
    4c00:	00000000 	andeq	r0, r0, r0
    4c04:	64000000 	strvs	r0, [r0], #-0
    4c08:	66080041 	strvs	r0, [r8], -r1, asr #32
    4c0c:	01080041 	tsteq	r8, r1, asr #32
    4c10:	41665000 	cmnmi	r6, r0
    4c14:	41680800 	cmnmi	r8, r0, lsl #16
    4c18:	00040800 	andeq	r0, r4, r0, lsl #16
    4c1c:	9f5001f3 	svcls	0x005001f3
	...
    4c28:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
    4c2c:	08004173 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, lr}
    4c30:	73500001 	cmpvc	r0, #1
    4c34:	b8080041 	stmdalt	r8, {r0, r6}
    4c38:	01080042 	tsteq	r8, r2, asr #32
    4c3c:	00005700 	andeq	r5, r0, r0, lsl #14
    4c40:	00000000 	andeq	r0, r0, r0
    4c44:	41680000 	cmnmi	r8, r0
    4c48:	41ba0800 			; <UNDEFINED> instruction: 0x41ba0800
    4c4c:	00020800 	andeq	r0, r2, r0, lsl #16
    4c50:	41ba9f30 			; <UNDEFINED> instruction: 0x41ba9f30
    4c54:	41d80800 	bicsmi	r0, r8, r0, lsl #16
    4c58:	00010800 	andeq	r0, r1, r0, lsl #16
    4c5c:	0041d85a 	subeq	sp, r1, sl, asr r8
    4c60:	0041de08 	subeq	sp, r1, r8, lsl #28
    4c64:	5e000108 	adfpls	f0, f0, #0.0
    4c68:	080041de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, lr}
    4c6c:	080041f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, lr}
    4c70:	f6510001 			; <UNDEFINED> instruction: 0xf6510001
    4c74:	fe080041 	cdp2	0, 0, cr0, cr8, cr1, {2}
    4c78:	02080041 	andeq	r0, r8, #65	; 0x41
    4c7c:	26147300 	ldrcs	r7, [r4], -r0, lsl #6
    4c80:	38080042 	stmdacc	r8, {r1, r6}
    4c84:	02080042 	andeq	r0, r8, #66	; 0x42
    4c88:	389f3000 	ldmcc	pc, {ip, sp}	; <UNPREDICTABLE>
    4c8c:	46080042 	strmi	r0, [r8], -r2, asr #32
    4c90:	01080042 	tsteq	r8, r2, asr #32
    4c94:	42465100 	submi	r5, r6, #0, 2
    4c98:	424e0800 	submi	r0, lr, #0, 16
    4c9c:	00010800 	andeq	r0, r1, r0, lsl #16
    4ca0:	00424e52 	subeq	r4, r2, r2, asr lr
    4ca4:	00425008 	subeq	r5, r2, r8
    4ca8:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
    4cac:	9f213400 	svcls	0x00213400
    4cb0:	08004250 	stmdaeq	r0, {r4, r6, r9, lr}
    4cb4:	08004272 	stmdaeq	r0, {r1, r4, r5, r6, r9, lr}
    4cb8:	72510001 	subsvc	r0, r1, #1
    4cbc:	7a080042 	bvc	204dcc <_Min_Stack_Size+0x2049cc>
    4cc0:	02080042 	andeq	r0, r8, #66	; 0x42
    4cc4:	7a9f3000 	bvc	fe7d0ccc <_estack+0xde7a0ccc>
    4cc8:	b8080042 	stmdalt	r8, {r1, r6}
    4ccc:	01080042 	tsteq	r8, r2, asr #32
    4cd0:	00005100 	andeq	r5, r0, r0, lsl #2
    4cd4:	00000000 	andeq	r0, r0, r0
    4cd8:	41740000 	cmnmi	r4, r0
    4cdc:	418e0800 	orrmi	r0, lr, r0, lsl #16
    4ce0:	00010800 	andeq	r0, r1, r0, lsl #16
    4ce4:	00427254 	subeq	r7, r2, r4, asr r2
    4ce8:	00427a08 	subeq	r7, r2, r8, lsl #20
    4cec:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    4cf8:	08004216 	stmdaeq	r0, {r1, r2, r4, r9, lr}
    4cfc:	08004220 	stmdaeq	r0, {r5, r9, lr}
    4d00:	00530001 	subseq	r0, r3, r1
    4d04:	00000000 	andeq	r0, r0, r0
    4d08:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    4d0c:	20080041 	andcs	r0, r8, r1, asr #32
    4d10:	01080042 	tsteq	r8, r2, asr #32
    4d14:	00005700 	andeq	r5, r0, r0, lsl #14
    4d18:	00000000 	andeq	r0, r0, r0
    4d1c:	41f80000 	mvnsmi	r0, r0
    4d20:	420e0800 	andmi	r0, lr, #0, 16
    4d24:	00010800 	andeq	r0, r1, r0, lsl #16
    4d28:	00000052 	andeq	r0, r0, r2, asr r0
    4d2c:	00000000 	andeq	r0, r0, r0
    4d30:	00425000 	subeq	r5, r2, r0
    4d34:	00427208 	subeq	r7, r2, r8, lsl #4
    4d38:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    4d3c:	0800427a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, lr}
    4d40:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
    4d44:	00570001 	subseq	r0, r7, r1
    4d48:	00000000 	andeq	r0, r0, r0
    4d4c:	50000000 	andpl	r0, r0, r0
    4d50:	64080042 	strvs	r0, [r8], #-66	; 0xffffffbe
    4d54:	02080042 	andeq	r0, r8, #66	; 0x42
    4d58:	649f3000 	ldrvs	r3, [pc], #0	; 4d60 <_Min_Stack_Size+0x4960>
    4d5c:	72080042 	andvc	r0, r8, #66	; 0x42
    4d60:	02080042 	andeq	r0, r8, #66	; 0x42
    4d64:	7a9f3100 	bvc	fe7d116c <_estack+0xde7a116c>
    4d68:	b8080042 	stmdalt	r8, {r1, r6}
    4d6c:	02080042 	andeq	r0, r8, #66	; 0x42
    4d70:	009f3000 	addseq	r3, pc, r0
    4d74:	00000000 	andeq	r0, r0, r0
    4d78:	50000000 	andpl	r0, r0, r0
    4d7c:	6c080042 	stcvs	0, cr0, [r8], {66}	; 0x42
    4d80:	01080042 	tsteq	r8, r2, asr #32
    4d84:	426c5000 	rsbmi	r5, ip, #0
    4d88:	42720800 	rsbsmi	r0, r2, #0, 16
    4d8c:	00020800 	andeq	r0, r2, r0, lsl #16
    4d90:	427a2877 	rsbsmi	r2, sl, #7798784	; 0x770000
    4d94:	42b80800 	adcsmi	r0, r8, #0, 16
    4d98:	00010800 	andeq	r0, r1, r0, lsl #16
    4d9c:	00000050 	andeq	r0, r0, r0, asr r0
    4da0:	00000000 	andeq	r0, r0, r0
    4da4:	0042b800 	subeq	fp, r2, r0, lsl #16
    4da8:	0042cc08 	subeq	ip, r2, r8, lsl #24
    4dac:	50000108 	andpl	r0, r0, r8, lsl #2
    4db0:	080042cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, lr}
    4db4:	0800431e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, lr}
    4db8:	1e520001 	cdpne	0, 5, cr0, cr2, cr1, {0}
    4dbc:	20080043 	andcs	r0, r8, r3, asr #32
    4dc0:	01080043 	tsteq	r8, r3, asr #32
    4dc4:	43205000 	nopmi	{0}	; <UNPREDICTABLE>
    4dc8:	43220800 			; <UNDEFINED> instruction: 0x43220800
    4dcc:	00010800 	andeq	r0, r1, r0, lsl #16
    4dd0:	00432252 	subeq	r2, r3, r2, asr r2
    4dd4:	00432408 	subeq	r2, r3, r8, lsl #8
    4dd8:	50000108 	andpl	r0, r0, r8, lsl #2
    4ddc:	08004324 	stmdaeq	r0, {r2, r5, r8, r9, lr}
    4de0:	08004330 	stmdaeq	r0, {r4, r5, r8, r9, lr}
    4de4:	00520001 	subseq	r0, r2, r1
    4de8:	00000000 	andeq	r0, r0, r0
    4dec:	0c000000 	stceq	0, cr0, [r0], {-0}
    4df0:	1e080043 	cdpne	0, 0, cr0, cr8, cr3, {2}
    4df4:	01080043 	tsteq	r8, r3, asr #32
    4df8:	00005300 	andeq	r5, r0, r0, lsl #6
    4dfc:	00000000 	andeq	r0, r0, r0
    4e00:	42f20000 	rscsmi	r0, r2, #0
    4e04:	431e0800 	tstmi	lr, #0, 16
    4e08:	00010800 	andeq	r0, r1, r0, lsl #16
    4e0c:	00000052 	andeq	r0, r0, r2, asr r0
    4e10:	00000000 	andeq	r0, r0, r0
    4e14:	0042f200 	subeq	pc, r2, r0, lsl #4
    4e18:	00430808 	subeq	r0, r3, r8, lsl #16
    4e1c:	51000108 	tstpl	r0, r8, lsl #2
    4e20:	08004308 	stmdaeq	r0, {r3, r8, r9, lr}
    4e24:	0800431e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, lr}
    4e28:	00720023 	rsbseq	r0, r2, r3, lsr #32
    4e2c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    4e30:	f71c401a 			; <UNDEFINED> instruction: 0xf71c401a
    4e34:	f42cf725 	vld1.8	{d15}, [ip :128], r5
    4e38:	aaab082c 	bge	feac6ef0 <_estack+0xdea96ef0>
    4e3c:	0000aaaa 	andeq	sl, r0, sl, lsr #21
    4e40:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    4e44:	252cf720 	strcs	pc, [ip, #-1824]!	; 0xfffff8e0
    4e48:	253425f7 	ldrcs	r2, [r4, #-1527]!	; 0xfffffa09
    4e4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e50:	00000000 	andeq	r0, r0, r0
    4e54:	00433000 	subeq	r3, r3, r0
    4e58:	00435208 	subeq	r5, r3, r8, lsl #4
    4e5c:	50000108 	andpl	r0, r0, r8, lsl #2
    4e60:	08004352 	stmdaeq	r0, {r1, r4, r6, r8, r9, lr}
    4e64:	08004354 	stmdaeq	r0, {r2, r4, r6, r8, r9, lr}
    4e68:	01f30004 	mvnseq	r0, r4
    4e6c:	43549f50 	cmpmi	r4, #80, 30	; 0x140
    4e70:	43560800 	cmpmi	r6, #0, 16
    4e74:	00010800 	andeq	r0, r1, r0, lsl #16
    4e78:	00435650 	subeq	r5, r3, r0, asr r6
    4e7c:	00435a08 	subeq	r5, r3, r8, lsl #20
    4e80:	f3000408 	vshl.u8	d0, d8, d0
    4e84:	5a9f5001 	bpl	fe7d8e90 <_estack+0xde7a8e90>
    4e88:	6e080043 	cdpvs	0, 0, cr0, cr8, cr3, {2}
    4e8c:	01080043 	tsteq	r8, r3, asr #32
    4e90:	436e5000 	cmnmi	lr, #0
    4e94:	438c0800 	orrmi	r0, ip, #0, 16
    4e98:	00040800 	andeq	r0, r4, r0, lsl #16
    4e9c:	9f5001f3 	svcls	0x005001f3
	...
    4ea8:	08004330 	stmdaeq	r0, {r4, r5, r8, r9, lr}
    4eac:	0800434a 	stmdaeq	r0, {r1, r3, r6, r8, r9, lr}
    4eb0:	4a530001 	bmi	14c4ebc <_Min_Stack_Size+0x14c4abc>
    4eb4:	54080043 	strpl	r0, [r8], #-67	; 0xffffffbd
    4eb8:	04080043 	streq	r0, [r8], #-67	; 0xffffffbd
    4ebc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4ec0:	0043549f 	umaaleq	r5, r3, pc, r4	; <UNPREDICTABLE>
    4ec4:	00438008 	subeq	r8, r3, r8
    4ec8:	53000108 	movwpl	r0, #264	; 0x108
    4ecc:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
    4ed0:	08004386 	stmdaeq	r0, {r1, r2, r7, r8, r9, lr}
    4ed4:	04740002 	ldrbteq	r0, [r4], #-2
    4ed8:	08004386 	stmdaeq	r0, {r1, r2, r7, r8, r9, lr}
    4edc:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
    4ee0:	01f30004 	mvnseq	r0, r4
    4ee4:	00009f53 	andeq	r9, r0, r3, asr pc
    4ee8:	00000000 	andeq	r0, r0, r0
    4eec:	43300000 	teqmi	r0, #0
    4ef0:	434e0800 	movtmi	r0, #59392	; 0xe800
    4ef4:	00020800 	andeq	r0, r2, r0, lsl #16
    4ef8:	434e9f30 	movtmi	r9, #61232	; 0xef30
    4efc:	43540800 	cmpmi	r4, #0, 16
    4f00:	00020800 	andeq	r0, r2, r0, lsl #16
    4f04:	43549f32 	cmpmi	r4, #50, 30	; 0xc8
    4f08:	438c0800 	orrmi	r0, ip, #0, 16
    4f0c:	00020800 	andeq	r0, r2, r0, lsl #16
    4f10:	00009f30 	andeq	r9, r0, r0, lsr pc
    4f14:	00000000 	andeq	r0, r0, r0
    4f18:	43660000 	cmnmi	r6, #0
    4f1c:	43800800 	orrmi	r0, r0, #0, 16
    4f20:	00010800 	andeq	r0, r1, r0, lsl #16
    4f24:	00438053 	subeq	r8, r3, r3, asr r0
    4f28:	00438608 	subeq	r8, r3, r8, lsl #12
    4f2c:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    4f30:	00438604 	subeq	r8, r3, r4, lsl #12
    4f34:	00438c08 	subeq	r8, r3, r8, lsl #24
    4f38:	f3000408 	vshl.u8	d0, d8, d0
    4f3c:	009f5301 	addseq	r5, pc, r1, lsl #6
    4f40:	00000000 	andeq	r0, r0, r0
    4f44:	66000000 	strvs	r0, [r0], -r0
    4f48:	6e080043 	cdpvs	0, 0, cr0, cr8, cr3, {2}
    4f4c:	01080043 	tsteq	r8, r3, asr #32
    4f50:	436e5000 	cmnmi	lr, #0
    4f54:	438c0800 	orrmi	r0, ip, #0, 16
    4f58:	00040800 	andeq	r0, r4, r0, lsl #16
    4f5c:	9f5001f3 	svcls	0x005001f3
	...
    4f68:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
    4f6c:	080043b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, lr}
    4f70:	b0500001 	subslt	r0, r0, r1
    4f74:	b2080043 	andlt	r0, r8, #67	; 0x43
    4f78:	04080043 	streq	r0, [r8], #-67	; 0xffffffbd
    4f7c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4f80:	0043b29f 	umaaleq	fp, r3, pc, r2	; <UNPREDICTABLE>
    4f84:	0043b408 	subeq	fp, r3, r8, lsl #8
    4f88:	50000108 	andpl	r0, r0, r8, lsl #2
    4f8c:	080043b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, lr}
    4f90:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
    4f94:	01f30004 	mvnseq	r0, r4
    4f98:	43b89f50 			; <UNDEFINED> instruction: 0x43b89f50
    4f9c:	440c0800 	strmi	r0, [ip], #-2048	; 0xfffff800
    4fa0:	00010800 	andeq	r0, r1, r0, lsl #16
    4fa4:	00440c50 	subeq	r0, r4, r0, asr ip
    4fa8:	00441008 	subeq	r1, r4, r8
    4fac:	f3000408 	vshl.u8	d0, d8, d0
    4fb0:	009f5001 	addseq	r5, pc, r1
    4fb4:	00000000 	andeq	r0, r0, r0
    4fb8:	8c000000 	stchi	0, cr0, [r0], {-0}
    4fbc:	dc080043 	stcle	0, cr0, [r8], {67}	; 0x43
    4fc0:	01080043 	tsteq	r8, r3, asr #32
    4fc4:	43dc5100 	bicsmi	r5, ip, #0, 2
    4fc8:	44100800 	ldrmi	r0, [r0], #-2048	; 0xfffff800
    4fcc:	00040800 	andeq	r0, r4, r0, lsl #16
    4fd0:	9f5101f3 	svcls	0x005101f3
	...
    4fdc:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
    4fe0:	080043e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, lr}
    4fe4:	e6520001 	ldrb	r0, [r2], -r1
    4fe8:	10080043 	andne	r0, r8, r3, asr #32
    4fec:	04080044 	streq	r0, [r8], #-68	; 0xffffffbc
    4ff0:	5201f300 	andpl	pc, r1, #0, 6
    4ff4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ff8:	00000000 	andeq	r0, r0, r0
    4ffc:	00438c00 	subeq	r8, r3, r0, lsl #24
    5000:	0043a808 	subeq	sl, r3, r8, lsl #16
    5004:	53000108 	movwpl	r0, #264	; 0x108
    5008:	080043a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, lr}
    500c:	080043b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, lr}
    5010:	01f30004 	mvnseq	r0, r4
    5014:	43b29f53 			; <UNDEFINED> instruction: 0x43b29f53
    5018:	43e20800 	mvnmi	r0, #0, 16
    501c:	00010800 	andeq	r0, r1, r0, lsl #16
    5020:	0043e253 	subeq	lr, r3, r3, asr r2
    5024:	0043e808 	subeq	lr, r3, r8, lsl #16
    5028:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    502c:	0043e804 	subeq	lr, r3, r4, lsl #16
    5030:	00441008 	subeq	r1, r4, r8
    5034:	f3000408 	vshl.u8	d0, d8, d0
    5038:	009f5301 	addseq	r5, pc, r1, lsl #6
    503c:	00000000 	andeq	r0, r0, r0
    5040:	8c000000 	stchi	0, cr0, [r0], {-0}
    5044:	ac080043 	stcge	0, cr0, [r8], {67}	; 0x43
    5048:	02080043 	andeq	r0, r8, #67	; 0x43
    504c:	ac9f3000 	ldcge	0, cr3, [pc], {0}
    5050:	b2080043 	andlt	r0, r8, #67	; 0x43
    5054:	02080043 	andeq	r0, r8, #67	; 0x43
    5058:	b29f3200 	addslt	r3, pc, #0, 4
    505c:	10080043 	andne	r0, r8, r3, asr #32
    5060:	02080044 	andeq	r0, r8, #68	; 0x44
    5064:	009f3000 	addseq	r3, pc, r0
    5068:	00000000 	andeq	r0, r0, r0
    506c:	94000000 	strls	r0, [r0], #-0
    5070:	ae080043 	cdpge	0, 0, cr0, cr8, cr3, {2}
    5074:	01080043 	tsteq	r8, r3, asr #32
    5078:	43ae5500 			; <UNDEFINED> instruction: 0x43ae5500
    507c:	43b00800 	movsmi	r0, #0, 16
    5080:	00030800 	andeq	r0, r3, r0, lsl #16
    5084:	b000d870 	andlt	sp, r0, r0, ror r8
    5088:	b2080043 	andlt	r0, r8, #67	; 0x43
    508c:	05080043 	streq	r0, [r8, #-67]	; 0xffffffbd
    5090:	5001f300 	andpl	pc, r1, r0, lsl #6
    5094:	43b25823 			; <UNDEFINED> instruction: 0x43b25823
    5098:	43b60800 			; <UNDEFINED> instruction: 0x43b60800
    509c:	00010800 	andeq	r0, r1, r0, lsl #16
    50a0:	0043b655 	subeq	fp, r3, r5, asr r6
    50a4:	0043b808 	subeq	fp, r3, r8, lsl #16
    50a8:	f3000508 	vrshl.u8	d0, d8, d0
    50ac:	58235001 	stmdapl	r3!, {r0, ip, lr}
    50b0:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
    50b4:	0800440e 	stmdaeq	r0, {r1, r2, r3, sl, lr}
    50b8:	0e550001 	cdpeq	0, 5, cr0, cr5, cr1, {0}
    50bc:	10080044 	andne	r0, r8, r4, asr #32
    50c0:	05080044 	streq	r0, [r8, #-68]	; 0xffffffbc
    50c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    50c8:	00005823 	andeq	r5, r0, r3, lsr #16
    50cc:	00000000 	andeq	r0, r0, r0
    50d0:	43c40000 	bicmi	r0, r4, #0
    50d4:	43e20800 	mvnmi	r0, #0, 16
    50d8:	00010800 	andeq	r0, r1, r0, lsl #16
    50dc:	0043e253 	subeq	lr, r3, r3, asr r2
    50e0:	0043e808 	subeq	lr, r3, r8, lsl #16
    50e4:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    50e8:	0043e804 	subeq	lr, r3, r4, lsl #16
    50ec:	00441008 	subeq	r1, r4, r8
    50f0:	f3000408 	vshl.u8	d0, d8, d0
    50f4:	009f5301 	addseq	r5, pc, r1, lsl #6
    50f8:	00000000 	andeq	r0, r0, r0
    50fc:	c4000000 	strgt	r0, [r0], #-0
    5100:	e6080043 	str	r0, [r8], -r3, asr #32
    5104:	01080043 	tsteq	r8, r3, asr #32
    5108:	43e65200 	mvnmi	r5, #0, 4
    510c:	44100800 	ldrmi	r0, [r0], #-2048	; 0xfffff800
    5110:	00040800 	andeq	r0, r4, r0, lsl #16
    5114:	9f5201f3 	svcls	0x005201f3
	...
    5120:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
    5124:	080043dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, lr}
    5128:	dc510001 	mrrcle	0, 0, r0, r1, cr1
    512c:	10080043 	andne	r0, r8, r3, asr #32
    5130:	04080044 	streq	r0, [r8], #-68	; 0xffffffbc
    5134:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5138:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    513c:	00000000 	andeq	r0, r0, r0
    5140:	0043c400 	subeq	ip, r3, r0, lsl #8
    5144:	00440c08 	subeq	r0, r4, r8, lsl #24
    5148:	50000108 	andpl	r0, r0, r8, lsl #2
    514c:	0800440c 	stmdaeq	r0, {r2, r3, sl, lr}
    5150:	08004410 	stmdaeq	r0, {r4, sl, lr}
    5154:	01f30004 	mvnseq	r0, r4
    5158:	00009f50 	andeq	r9, r0, r0, asr pc
    515c:	00000000 	andeq	r0, r0, r0
    5160:	44100000 	ldrmi	r0, [r0], #-0
    5164:	44190800 	ldrmi	r0, [r9], #-2048	; 0xfffff800
    5168:	00010800 	andeq	r0, r1, r0, lsl #16
    516c:	00441950 	subeq	r1, r4, r0, asr r9
    5170:	00449e08 	subeq	r9, r4, r8, lsl #28
    5174:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    5180:	0800441a 	stmdaeq	r0, {r1, r3, r4, sl, lr}
    5184:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    5188:	00550001 	subseq	r0, r5, r1
    518c:	00000000 	andeq	r0, r0, r0
    5190:	a0000000 	andge	r0, r0, r0
    5194:	ae080044 	cdpge	0, 0, cr0, cr8, cr4, {2}
    5198:	01080044 	tsteq	r8, r4, asr #32
    519c:	44ae5000 	strtmi	r5, [lr], #0
    51a0:	44b00800 	ldrtmi	r0, [r0], #2048	; 0x800
    51a4:	00040800 	andeq	r0, r4, r0, lsl #16
    51a8:	9f5001f3 	svcls	0x005001f3
    51ac:	080044b0 	stmdaeq	r0, {r4, r5, r7, sl, lr}
    51b0:	080044c2 	stmdaeq	r0, {r1, r6, r7, sl, lr}
    51b4:	c2500001 	subsgt	r0, r0, #1
    51b8:	c4080044 	strgt	r0, [r8], #-68	; 0xffffffbc
    51bc:	04080044 	streq	r0, [r8], #-68	; 0xffffffbc
    51c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    51c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51c8:	00000000 	andeq	r0, r0, r0
    51cc:	0044c400 	subeq	ip, r4, r0, lsl #8
    51d0:	0044d308 	subeq	sp, r4, r8, lsl #6
    51d4:	50000108 	andpl	r0, r0, r8, lsl #2
    51d8:	080044d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, sl, lr}
    51dc:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
    51e0:	00540001 	subseq	r0, r4, r1
    51e4:	00000000 	andeq	r0, r0, r0
    51e8:	c4000000 	strgt	r0, [r0], #-0
    51ec:	d3080044 	movwle	r0, #32836	; 0x8044
    51f0:	01080044 	tsteq	r8, r4, asr #32
    51f4:	44d35100 	ldrbmi	r5, [r3], #256	; 0x100
    51f8:	46e00800 	strbtmi	r0, [r0], r0, lsl #16
    51fc:	00040800 	andeq	r0, r4, r0, lsl #16
    5200:	9f5101f3 	svcls	0x005101f3
	...
    520c:	080044c4 	stmdaeq	r0, {r2, r6, r7, sl, lr}
    5210:	080044d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, sl, lr}
    5214:	d3520001 	cmple	r2, #1
    5218:	e8080044 	stmda	r8, {r2, r6}
    521c:	01080044 	tsteq	r8, r4, asr #32
    5220:	44e85500 	strbtmi	r5, [r8], #1280	; 0x500
    5224:	44ee0800 	strbtmi	r0, [lr], #2048	; 0x800
    5228:	00040800 	andeq	r0, r4, r0, lsl #16
    522c:	9f5201f3 	svcls	0x005201f3
    5230:	080044ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, lr}
    5234:	0800458a 	stmdaeq	r0, {r1, r3, r7, r8, sl, lr}
    5238:	8a550001 	bhi	1545244 <_Min_Stack_Size+0x1544e44>
    523c:	a6080045 	strge	r0, [r8], -r5, asr #32
    5240:	04080045 	streq	r0, [r8], #-69	; 0xffffffbb
    5244:	5201f300 	andpl	pc, r1, #0, 6
    5248:	0045a69f 	umaaleq	sl, r5, pc, r6	; <UNPREDICTABLE>
    524c:	0045e208 	subeq	lr, r5, r8, lsl #4
    5250:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5254:	080045e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, lr}
    5258:	080045ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, lr}
    525c:	7f710003 	svcvc	0x00710003
    5260:	0045ea9f 	umaaleq	lr, r5, pc, sl	; <UNPREDICTABLE>
    5264:	0046e008 	subeq	lr, r6, r8
    5268:	f3000408 	vshl.u8	d0, d8, d0
    526c:	009f5201 	addseq	r5, pc, r1, lsl #4
    5270:	00000000 	andeq	r0, r0, r0
    5274:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5278:	a6080045 	strge	r0, [r8], -r5, asr #32
    527c:	01080045 	tsteq	r8, r5, asr #32
    5280:	45ae5b00 	strmi	r5, [lr, #2816]!	; 0xb00
    5284:	45b00800 	ldrmi	r0, [r0, #2048]!	; 0x800
    5288:	00010800 	andeq	r0, r1, r0, lsl #16
    528c:	0045be5b 	subeq	fp, r5, fp, asr lr
    5290:	0046e008 	subeq	lr, r6, r8
    5294:	5b000108 	blpl	56bc <_Min_Stack_Size+0x52bc>
	...
    52a0:	080044d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr}
    52a4:	080044e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, lr}
    52a8:	ee560001 	cdp	0, 5, cr0, cr6, cr1, {0}
    52ac:	f4080044 	vst4.16	{d0-d3}, [r8], r4
    52b0:	01080044 	tsteq	r8, r4, asr #32
    52b4:	00005600 	andeq	r5, r0, r0, lsl #12
    52b8:	00000000 	andeq	r0, r0, r0
    52bc:	45120000 	ldrmi	r0, [r2, #-0]
    52c0:	452a0800 	strmi	r0, [sl, #-2048]!	; 0xfffff800
    52c4:	00010800 	andeq	r0, r1, r0, lsl #16
    52c8:	00453e53 	subeq	r3, r5, r3, asr lr
    52cc:	00458a08 	subeq	r8, r5, r8, lsl #20
    52d0:	53000108 	movwpl	r0, #264	; 0x108
    52d4:	080045be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, lr}
    52d8:	080045c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, lr}
    52dc:	de530001 	cdple	0, 5, cr0, cr3, cr1, {0}
    52e0:	f2080045 	vhadd.s8	q0, q4, <illegal reg q2.5>
    52e4:	01080045 	tsteq	r8, r5, asr #32
    52e8:	45fa5300 	ldrbmi	r5, [sl, #768]!	; 0x300
    52ec:	46320800 	ldrtmi	r0, [r2], -r0, lsl #16
    52f0:	00010800 	andeq	r0, r1, r0, lsl #16
    52f4:	00000053 	andeq	r0, r0, r3, asr r0
    52f8:	00000000 	andeq	r0, r0, r0
    52fc:	00450c00 	subeq	r0, r5, r0, lsl #24
    5300:	0045a608 	subeq	sl, r5, r8, lsl #12
    5304:	5a000108 	bpl	572c <_Min_Stack_Size+0x532c>
    5308:	080045be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, lr}
    530c:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
    5310:	005a0001 	subseq	r0, sl, r1
    5314:	00000000 	andeq	r0, r0, r0
    5318:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    531c:	60080046 	andvs	r0, r8, r6, asr #32
    5320:	01080046 	tsteq	r8, r6, asr #32
    5324:	46605000 	strbtmi	r5, [r0], -r0
    5328:	46780800 	ldrbtmi	r0, [r8], -r0, lsl #16
    532c:	00010800 	andeq	r0, r1, r0, lsl #16
    5330:	00467855 	subeq	r7, r6, r5, asr r8
    5334:	0046a008 	subeq	sl, r6, r8
    5338:	50000108 	andpl	r0, r0, r8, lsl #2
    533c:	080046a0 	stmdaeq	r0, {r5, r7, r9, sl, lr}
    5340:	080046d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, lr}
    5344:	d0550001 	subsle	r0, r5, r1
    5348:	e0080046 	and	r0, r8, r6, asr #32
    534c:	01080046 	tsteq	r8, r6, asr #32
    5350:	00005000 	andeq	r5, r0, r0
    5354:	00000000 	andeq	r0, r0, r0
    5358:	46e00000 	strbtmi	r0, [r0], r0
    535c:	47000800 	strmi	r0, [r0, -r0, lsl #16]
    5360:	00010800 	andeq	r0, r1, r0, lsl #16
    5364:	00470050 	subeq	r0, r7, r0, asr r0
    5368:	00488808 	subeq	r8, r8, r8, lsl #16
    536c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    5378:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
    537c:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
    5380:	98500001 	ldmdals	r0, {r0}^
    5384:	ae080048 	cdpge	0, 0, cr0, cr8, cr8, {2}
    5388:	01080048 	tsteq	r8, r8, asr #32
    538c:	48ae5400 	stmiami	lr!, {sl, ip, lr}
    5390:	48b00800 	ldmmi	r0!, {fp}
    5394:	00040800 	andeq	r0, r4, r0, lsl #16
    5398:	9f5001f3 	svcls	0x005001f3
    539c:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    53a0:	080048b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, lr}
    53a4:	b2500001 	subslt	r0, r0, #1
    53a8:	b6080048 	strlt	r0, [r8], -r8, asr #32
    53ac:	01080048 	tsteq	r8, r8, asr #32
    53b0:	48b65400 	ldmmi	r6!, {sl, ip, lr}
    53b4:	48b80800 	ldmmi	r8!, {fp}
    53b8:	00040800 	andeq	r0, r4, r0, lsl #16
    53bc:	9f5001f3 	svcls	0x005001f3
    53c0:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
    53c4:	080048ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, lr}
    53c8:	00540001 	subseq	r0, r4, r1
    53cc:	00000000 	andeq	r0, r0, r0
    53d0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    53d4:	a4080048 	strge	r0, [r8], #-72	; 0xffffffb8
    53d8:	01080048 	tsteq	r8, r8, asr #32
    53dc:	48a45200 	stmiami	r4!, {r9, ip, lr}
    53e0:	48b00800 	ldmmi	r0!, {fp}
    53e4:	00040800 	andeq	r0, r4, r0, lsl #16
    53e8:	9f5201f3 	svcls	0x005201f3
    53ec:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    53f0:	080048ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, lr}
    53f4:	00520001 	subseq	r0, r2, r1
    53f8:	00000000 	andeq	r0, r0, r0
    53fc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    5400:	a2080048 	andge	r0, r8, #72	; 0x48
    5404:	02080048 	andeq	r0, r8, #72	; 0x48
    5408:	a29f3000 	addsge	r3, pc, #0
    540c:	b0080048 	andlt	r0, r8, r8, asr #32
    5410:	01080048 	tsteq	r8, r8, asr #32
    5414:	48b05300 	ldmmi	r0!, {r8, r9, ip, lr}
    5418:	48ee0800 	stmiami	lr!, {fp}^
    541c:	00020800 	andeq	r0, r2, r0, lsl #16
    5420:	00009f30 	andeq	r9, r0, r0, lsr pc
    5424:	00000000 	andeq	r0, r0, r0
    5428:	48f00000 	ldmmi	r0!, {}^	; <UNPREDICTABLE>
    542c:	48fe0800 	ldmmi	lr!, {fp}^
    5430:	00010800 	andeq	r0, r1, r0, lsl #16
    5434:	0048fe50 	subeq	pc, r8, r0, asr lr	; <UNPREDICTABLE>
    5438:	00491208 	subeq	r1, r9, r8, lsl #4
    543c:	52000108 	andpl	r0, r0, #8, 2
    5440:	08004912 	stmdaeq	r0, {r1, r4, r8, fp, lr}
    5444:	08004914 	stmdaeq	r0, {r2, r4, r8, fp, lr}
    5448:	14500001 	ldrbne	r0, [r0], #-1
    544c:	5e080049 	cdppl	0, 0, cr0, cr8, cr9, {2}
    5450:	01080049 	tsteq	r8, r9, asr #32
    5454:	00005200 	andeq	r5, r0, r0, lsl #4
    5458:	00000000 	andeq	r0, r0, r0
    545c:	48f00000 	ldmmi	r0!, {}^	; <UNPREDICTABLE>
    5460:	490a0800 	stmdbmi	sl, {fp}
    5464:	00010800 	andeq	r0, r1, r0, lsl #16
    5468:	00490a51 	subeq	r0, r9, r1, asr sl
    546c:	00491208 	subeq	r1, r9, r8, lsl #4
    5470:	f3000408 	vshl.u8	d0, d8, d0
    5474:	129f5101 	addsne	r5, pc, #1073741824	; 0x40000000
    5478:	5e080049 	cdppl	0, 0, cr0, cr8, cr9, {2}
    547c:	01080049 	tsteq	r8, r9, asr #32
    5480:	00005100 	andeq	r5, r0, r0, lsl #2
    5484:	00000000 	andeq	r0, r0, r0
    5488:	48f00000 	ldmmi	r0!, {}^	; <UNPREDICTABLE>
    548c:	49080800 	stmdbmi	r8, {fp}
    5490:	00020800 	andeq	r0, r2, r0, lsl #16
    5494:	49089f30 	stmdbmi	r8, {r4, r5, r8, r9, sl, fp, ip, pc}
    5498:	49120800 	ldmdbmi	r2, {fp}
    549c:	00010800 	andeq	r0, r1, r0, lsl #16
    54a0:	00491253 	subeq	r1, r9, r3, asr r2
    54a4:	00495e08 	subeq	r5, r9, r8, lsl #28
    54a8:	30000208 	andcc	r0, r0, r8, lsl #4
    54ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    54b0:	00000000 	andeq	r0, r0, r0
    54b4:	00496000 	subeq	r6, r9, r0
    54b8:	00496408 	subeq	r6, r9, r8, lsl #8
    54bc:	50000108 	andpl	r0, r0, r8, lsl #2
    54c0:	08004964 	stmdaeq	r0, {r2, r5, r6, r8, fp, lr}
    54c4:	08004966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, lr}
    54c8:	01f30004 	mvnseq	r0, r4
    54cc:	00009f50 	andeq	r9, r0, r0, asr pc
    54d0:	00000000 	andeq	r0, r0, r0
    54d4:	49680000 	stmdbmi	r8!, {}^	; <UNPREDICTABLE>
    54d8:	496a0800 	stmdbmi	sl!, {fp}^
    54dc:	00010800 	andeq	r0, r1, r0, lsl #16
    54e0:	00496a50 	subeq	r6, r9, r0, asr sl
    54e4:	00496c08 	subeq	r6, r9, r8, lsl #24
    54e8:	f3000408 	vshl.u8	d0, d8, d0
    54ec:	009f5001 	addseq	r5, pc, r1
    54f0:	00000000 	andeq	r0, r0, r0
    54f4:	70000000 	andvc	r0, r0, r0
    54f8:	96080049 	strls	r0, [r8], -r9, asr #32
    54fc:	01080049 	tsteq	r8, r9, asr #32
    5500:	49965000 	ldmibmi	r6, {ip, lr}
    5504:	4a4a0800 	bmi	128750c <_Min_Stack_Size+0x128710c>
    5508:	00010800 	andeq	r0, r1, r0, lsl #16
    550c:	004a4a54 	subeq	r4, sl, r4, asr sl
    5510:	004a6808 	subeq	r6, sl, r8, lsl #16
    5514:	f3000408 	vshl.u8	d0, d8, d0
    5518:	689f5001 	ldmvs	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    551c:	f808004a 			; <UNDEFINED> instruction: 0xf808004a
    5520:	0108004a 	tsteq	r8, sl, asr #32
    5524:	4af85400 	bmi	ffe1a52c <_estack+0xdfdea52c>
    5528:	4afe0800 	bmi	fff87530 <_estack+0xdff57530>
    552c:	00040800 	andeq	r0, r4, r0, lsl #16
    5530:	9f5001f3 	svcls	0x005001f3
    5534:	08004afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, lr}
    5538:	08004b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, lr}
    553c:	56540001 	ldrbpl	r0, [r4], -r1
    5540:	5a08004b 	bpl	205674 <_Min_Stack_Size+0x205274>
    5544:	0108004b 	tsteq	r8, fp, asr #32
    5548:	4b5a5000 	blmi	1699550 <_Min_Stack_Size+0x1699150>
    554c:	4c0a0800 	stcmi	8, cr0, [sl], {-0}
    5550:	00010800 	andeq	r0, r1, r0, lsl #16
    5554:	004c0a54 	subeq	r0, ip, r4, asr sl
    5558:	004c5c08 	subeq	r5, ip, r8, lsl #24
    555c:	f3000408 	vshl.u8	d0, d8, d0
    5560:	5c9f5001 	ldcpl	0, cr5, [pc], {1}
    5564:	8008004c 	andhi	r0, r8, ip, asr #32
    5568:	0108004c 	tsteq	r8, ip, asr #32
    556c:	00005400 	andeq	r5, r0, r0, lsl #8
    5570:	00000000 	andeq	r0, r0, r0
    5574:	49700000 	ldmdbmi	r0!, {}^	; <UNPREDICTABLE>
    5578:	49ac0800 	stmibmi	ip!, {fp}
    557c:	00020800 	andeq	r0, r2, r0, lsl #16
    5580:	49ac9f30 	stmibmi	ip!, {r4, r5, r8, r9, sl, fp, ip, pc}
    5584:	49ae0800 	stmibmi	lr!, {fp}
    5588:	00010800 	andeq	r0, r1, r0, lsl #16
    558c:	0049ae50 	subeq	sl, r9, r0, asr lr
    5590:	0049c208 	subeq	ip, r9, r8, lsl #4
    5594:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5598:	080049f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, lr}
    559c:	080049f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, fp, lr}
    55a0:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    55a4:	22080049 	andcs	r0, r8, #73	; 0x49
    55a8:	0108004a 	tsteq	r8, sl, asr #32
    55ac:	4a505600 	bmi	141adb4 <_Min_Stack_Size+0x141a9b4>
    55b0:	4a520800 	bmi	14875b8 <_Min_Stack_Size+0x14871b8>
    55b4:	00010800 	andeq	r0, r1, r0, lsl #16
    55b8:	004a5250 	subeq	r5, sl, r0, asr r2
    55bc:	004a6208 	subeq	r6, sl, r8, lsl #4
    55c0:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    55c4:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
    55c8:	08004a7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, fp, lr}
    55cc:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
    55d0:	9408004a 	strls	r0, [r8], #-74	; 0xffffffb6
    55d4:	0108004a 	tsteq	r8, sl, asr #32
    55d8:	4abc5600 	bmi	fef1ade0 <_estack+0xdeeeade0>
    55dc:	4abe0800 	bmi	fef875e4 <_estack+0xdef575e4>
    55e0:	00010800 	andeq	r0, r1, r0, lsl #16
    55e4:	004abe50 	subeq	fp, sl, r0, asr lr
    55e8:	004ae408 	subeq	lr, sl, r8, lsl #8
    55ec:	56000108 	strpl	r0, [r0], -r8, lsl #2
    55f0:	08004ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, lr}
    55f4:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
    55f8:	e8500001 	ldmda	r0, {r0}^
    55fc:	f808004a 			; <UNDEFINED> instruction: 0xf808004a
    5600:	0108004a 	tsteq	r8, sl, asr #32
    5604:	4b265700 	blmi	99b20c <_Min_Stack_Size+0x99ae0c>
    5608:	4b280800 	blmi	a07610 <_Min_Stack_Size+0xa07210>
    560c:	00010800 	andeq	r0, r1, r0, lsl #16
    5610:	004b2850 	subeq	r2, fp, r0, asr r8
    5614:	004b3a08 	subeq	r3, fp, r8, lsl #20
    5618:	56000108 	strpl	r0, [r0], -r8, lsl #2
    561c:	08004b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, lr}
    5620:	08004b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, lr}
    5624:	9f300002 	svcls	0x00300002
    5628:	08004b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, lr}
    562c:	08004b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, lr}
    5630:	44500001 	ldrbmi	r0, [r0], #-1
    5634:	5608004b 	strpl	r0, [r8], -fp, asr #32
    5638:	0108004b 	tsteq	r8, fp, asr #32
    563c:	4b565600 	blmi	159ae44 <_Min_Stack_Size+0x159aa44>
    5640:	4b720800 	blmi	1c87648 <_Min_Stack_Size+0x1c87248>
    5644:	00020800 	andeq	r0, r2, r0, lsl #16
    5648:	4ba09f30 	blmi	fe82d310 <_estack+0xde7fd310>
    564c:	4ba20800 	blmi	fe887654 <_estack+0xde857654>
    5650:	00010800 	andeq	r0, r1, r0, lsl #16
    5654:	004ba250 	subeq	sl, fp, r0, asr r2
    5658:	004bb608 	subeq	fp, fp, r8, lsl #12
    565c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5660:	08004bbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, fp, lr}
    5664:	08004bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, lr}
    5668:	c0500001 	subsgt	r0, r0, r1
    566c:	de08004b 	cdple	0, 0, cr0, cr8, cr11, {2}
    5670:	0108004b 	tsteq	r8, fp, asr #32
    5674:	4c2a5600 	stcmi	6, cr5, [sl], #-0
    5678:	4c480800 	mcrrmi	8, 0, r0, r8, cr0
    567c:	00010800 	andeq	r0, r1, r0, lsl #16
    5680:	004c4850 	subeq	r4, ip, r0, asr r8
    5684:	004c5c08 	subeq	r5, ip, r8, lsl #24
    5688:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    568c:	08004c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, lr}
    5690:	08004c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, lr}
    5694:	64560001 	ldrbvs	r0, [r6], #-1
    5698:	6808004c 	stmdavs	r8, {r2, r3, r6}
    569c:	0108004c 	tsteq	r8, ip, asr #32
    56a0:	4c685000 	stclmi	0, cr5, [r8], #-0
    56a4:	4c800800 	stcmi	8, cr0, [r0], {0}
    56a8:	00010800 	andeq	r0, r1, r0, lsl #16
    56ac:	00000057 	andeq	r0, r0, r7, asr r0
    56b0:	00000000 	andeq	r0, r0, r0
    56b4:	004a0a00 	subeq	r0, sl, r0, lsl #20
    56b8:	004a2208 	subeq	r2, sl, r8, lsl #4
    56bc:	08000308 	stmdaeq	r0, {r3, r8, r9}
    56c0:	00009ff8 	strdeq	r9, [r0], -r8
    56c4:	00000000 	andeq	r0, r0, r0
    56c8:	4a100000 	bmi	4056d0 <_Min_Stack_Size+0x4052d0>
    56cc:	4a160800 	bmi	5876d4 <_Min_Stack_Size+0x5872d4>
    56d0:	00010800 	andeq	r0, r1, r0, lsl #16
    56d4:	00000050 	andeq	r0, r0, r0, asr r0
    56d8:	00000000 	andeq	r0, r0, r0
    56dc:	004b7800 	subeq	r7, fp, r0, lsl #16
    56e0:	004b9408 	subeq	r9, fp, r8, lsl #8
    56e4:	08000308 	stmdaeq	r0, {r3, r8, r9}
    56e8:	00009ff8 	strdeq	r9, [r0], -r8
    56ec:	00000000 	andeq	r0, r0, r0
    56f0:	4b7c0000 	blmi	1f056f8 <_Min_Stack_Size+0x1f052f8>
    56f4:	4b820800 	blmi	fe0876fc <_estack+0xde0576fc>
    56f8:	00010800 	andeq	r0, r1, r0, lsl #16
    56fc:	00000050 	andeq	r0, r0, r0, asr r0
    5700:	00000000 	andeq	r0, r0, r0
    5704:	004bd200 	subeq	sp, fp, r0, lsl #4
    5708:	004c5c08 	subeq	r5, ip, r8, lsl #24
    570c:	0a000408 	beq	6734 <_Min_Stack_Size+0x6334>
    5710:	009f7fc0 	addseq	r7, pc, r0, asr #31
    5714:	00000000 	andeq	r0, r0, r0
    5718:	da000000 	ble	5720 <_Min_Stack_Size+0x5320>
    571c:	e208004b 	and	r0, r8, #75	; 0x4b
    5720:	0108004b 	tsteq	r8, fp, asr #32
    5724:	00005700 	andeq	r5, r0, r0, lsl #14
    5728:	00000000 	andeq	r0, r0, r0
    572c:	4be20000 	blmi	ff885734 <_estack+0xdf855734>
    5730:	4c5c0800 	mrrcmi	8, 0, r0, ip, cr0
    5734:	00040800 	andeq	r0, r4, r0, lsl #16
    5738:	9f243d48 	svcls	0x00243d48
	...
    5744:	08004be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp, lr}
    5748:	08004bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, lr}
    574c:	00560001 	subseq	r0, r6, r1
    5750:	00000000 	andeq	r0, r0, r0
    5754:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    5758:	5c08004b 	stcpl	0, cr0, [r8], {75}	; 0x4b
    575c:	0408004c 	streq	r0, [r8], #-76	; 0xffffffb4
    5760:	24474e00 	strbcs	r4, [r7], #-3584	; 0xfffff200
    5764:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5768:	00000000 	andeq	r0, r0, r0
    576c:	004bf200 	subeq	pc, fp, r0, lsl #4
    5770:	004c0408 	subeq	r0, ip, r8, lsl #8
    5774:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5780:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    5784:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
    5788:	90500001 	subsls	r0, r0, r1
    578c:	9208004c 	andls	r0, r8, #76	; 0x4c
    5790:	0108004c 	tsteq	r8, ip, asr #32
    5794:	4c925300 	ldcmi	3, cr5, [r2], {0}
    5798:	4cd40800 	ldclmi	8, cr0, [r4], {0}
    579c:	00040800 	andeq	r0, r4, r0, lsl #16
    57a0:	9f5001f3 	svcls	0x005001f3
    57a4:	08004cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, lr}
    57a8:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
    57ac:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    57b0:	0708004c 	streq	r0, [r8, -ip, asr #32]
    57b4:	0108004d 	tsteq	r8, sp, asr #32
    57b8:	4d075300 	stcmi	3, cr5, [r7, #-0]
    57bc:	4d280800 	stcmi	8, cr0, [r8, #-0]
    57c0:	00040800 	andeq	r0, r4, r0, lsl #16
    57c4:	9f5001f3 	svcls	0x005001f3
	...
    57d0:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    57d4:	08004c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, lr}
    57d8:	96510001 	ldrbls	r0, [r1], -r1
    57dc:	d408004c 	strle	r0, [r8], #-76	; 0xffffffb4
    57e0:	0108004c 	tsteq	r8, ip, asr #32
    57e4:	4cd45500 	cfldr64mi	mvdx5, [r4], {0}
    57e8:	4cf60800 	ldclmi	8, cr0, [r6]
    57ec:	00010800 	andeq	r0, r1, r0, lsl #16
    57f0:	004cf651 	subeq	pc, ip, r1, asr r6	; <UNPREDICTABLE>
    57f4:	004d1408 	subeq	r1, sp, r8, lsl #8
    57f8:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    57fc:	08004d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, lr}
    5800:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
    5804:	01f30004 	mvnseq	r0, r4
    5808:	00009f51 	andeq	r9, r0, r1, asr pc
    580c:	00000000 	andeq	r0, r0, r0
    5810:	4c800000 	stcmi	0, cr0, [r0], {0}
    5814:	4cac0800 	stcmi	8, cr0, [ip]
    5818:	00010800 	andeq	r0, r1, r0, lsl #16
    581c:	004cac52 	subeq	sl, ip, r2, asr ip
    5820:	004cd408 	subeq	sp, ip, r8, lsl #8
    5824:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5828:	08004cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, lr}
    582c:	08004cda 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, fp, lr}
    5830:	da520001 	ble	148583c <_Min_Stack_Size+0x148543c>
    5834:	1a08004c 	bne	20596c <_Min_Stack_Size+0x20556c>
    5838:	0108004d 	tsteq	r8, sp, asr #32
    583c:	4d1a5600 	ldcmi	6, cr5, [sl, #-0]
    5840:	4d280800 	stcmi	8, cr0, [r8, #-0]
    5844:	00040800 	andeq	r0, r4, r0, lsl #16
    5848:	9f5201f3 	svcls	0x005201f3
	...
    5854:	08004d40 	stmdaeq	r0, {r6, r8, sl, fp, lr}
    5858:	08004daa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, fp, lr}
    585c:	9f300002 	svcls	0x00300002
    5860:	08004daa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, fp, lr}
    5864:	08004dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, lr}
    5868:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    586c:	c008004d 	andgt	r0, r8, sp, asr #32
    5870:	0208004d 	andeq	r0, r8, #77	; 0x4d
    5874:	009f3000 	addseq	r3, pc, r0
    5878:	00000000 	andeq	r0, r0, r0
    587c:	5a000000 	bpl	5884 <_Min_Stack_Size+0x5484>
    5880:	a608004d 	strge	r0, [r8], -sp, asr #32
    5884:	0108004d 	tsteq	r8, sp, asr #32
    5888:	00005400 	andeq	r5, r0, r0, lsl #8
    588c:	00000000 	andeq	r0, r0, r0
    5890:	4d8c0000 	stcmi	0, cr0, [ip]
    5894:	4dac0800 	stcmi	8, cr0, [ip]
    5898:	00010800 	andeq	r0, r1, r0, lsl #16
    589c:	00000053 	andeq	r0, r0, r3, asr r0
    58a0:	00000000 	andeq	r0, r0, r0
    58a4:	004daa00 	subeq	sl, sp, r0, lsl #20
    58a8:	004dac08 	subeq	sl, sp, r8, lsl #24
    58ac:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    58b8:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    58bc:	08004dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, lr}
    58c0:	c00a0004 	andgt	r0, sl, r4
    58c4:	00009f7f 	andeq	r9, r0, pc, ror pc
    58c8:	00000000 	andeq	r0, r0, r0
    58cc:	4d660000 	stclmi	0, cr0, [r6, #-0]
    58d0:	4d7e0800 	ldclmi	8, cr0, [lr, #-0]
    58d4:	00010800 	andeq	r0, r1, r0, lsl #16
    58d8:	00000053 	andeq	r0, r0, r3, asr r0
    58dc:	00000000 	andeq	r0, r0, r0
    58e0:	004d9200 	subeq	r9, sp, r0, lsl #4
    58e4:	004dac08 	subeq	sl, sp, r8, lsl #24
    58e8:	48000408 	stmdami	r0, {r3, sl}
    58ec:	009f243d 	addseq	r2, pc, sp, lsr r4	; <UNPREDICTABLE>
    58f0:	00000000 	andeq	r0, r0, r0
    58f4:	96000000 	strls	r0, [r0], -r0
    58f8:	9e08004d 	cdpls	0, 0, cr0, cr8, cr13, {2}
    58fc:	0108004d 	tsteq	r8, sp, asr #32
    5900:	00005200 	andeq	r5, r0, r0, lsl #4
    5904:	00000000 	andeq	r0, r0, r0
    5908:	4dc00000 	stclmi	0, cr0, [r0]
    590c:	4de20800 	stclmi	8, cr0, [r2]
    5910:	00010800 	andeq	r0, r1, r0, lsl #16
    5914:	004de250 	subeq	lr, sp, r0, asr r2
    5918:	004de808 	subeq	lr, sp, r8, lsl #16
    591c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5920:	08004de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, lr}
    5924:	08004df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, lr}
    5928:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    592c:	2c08004d 	stccs	0, cr0, [r8], {77}	; 0x4d
    5930:	0108004f 	tsteq	r8, pc, asr #32
    5934:	00005600 	andeq	r5, r0, r0, lsl #12
    5938:	00000000 	andeq	r0, r0, r0
    593c:	4dc00000 	stclmi	0, cr0, [r0]
    5940:	4de20800 	stclmi	8, cr0, [r2]
    5944:	00010800 	andeq	r0, r1, r0, lsl #16
    5948:	004de251 	subeq	lr, sp, r1, asr r2
    594c:	004de808 	subeq	lr, sp, r8, lsl #16
    5950:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    5954:	08004de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, lr}
    5958:	08004df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, lr}
    595c:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
    5960:	ac08004d 	stcge	0, cr0, [r8], {77}	; 0x4d
    5964:	0108004e 	tsteq	r8, lr, asr #32
    5968:	4eac5400 	cdpmi	4, 10, cr5, cr12, cr0, {0}
    596c:	4ec20800 	cdpmi	8, 12, cr0, cr2, cr0, {0}
    5970:	00040800 	andeq	r0, r4, r0, lsl #16
    5974:	9f5101f3 	svcls	0x005101f3
    5978:	08004ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp, lr}
    597c:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
    5980:	00540001 	subseq	r0, r4, r1
    5984:	00000000 	andeq	r0, r0, r0
    5988:	c0000000 	andgt	r0, r0, r0
    598c:	e208004d 	and	r0, r8, #77	; 0x4d
    5990:	0208004d 	andeq	r0, r8, #77	; 0x4d
    5994:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    5998:	2c08004d 	stccs	0, cr0, [r8], {77}	; 0x4d
    599c:	0208004e 	andeq	r0, r8, #78	; 0x4e
    59a0:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    59a4:	3c08004e 	stccc	0, cr0, [r8], {78}	; 0x4e
    59a8:	0108004e 	tsteq	r8, lr, asr #32
    59ac:	4e3c5000 	cdpmi	0, 3, cr5, cr12, cr0, {0}
    59b0:	4e4e0800 	cdpmi	8, 4, cr0, cr14, cr0, {0}
    59b4:	00010800 	andeq	r0, r1, r0, lsl #16
    59b8:	004ec257 	subeq	ip, lr, r7, asr r2
    59bc:	004f0408 	subeq	r0, pc, r8, lsl #8
    59c0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    59c4:	08004f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, lr}
    59c8:	08004f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, lr}
    59cc:	9f300002 	svcls	0x00300002
    59d0:	08004f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, lr}
    59d4:	08004f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, lr}
    59d8:	10570001 	subsne	r0, r7, r1
    59dc:	2c08004f 	stccs	0, cr0, [r8], {79}	; 0x4f
    59e0:	0208004f 	andeq	r0, r8, #79	; 0x4f
    59e4:	009f3000 	addseq	r3, pc, r0
    59e8:	00000000 	andeq	r0, r0, r0
    59ec:	9c000000 	stcls	0, cr0, [r0], {-0}
    59f0:	c208004e 	andgt	r0, r8, #78	; 0x4e
    59f4:	0308004e 	movweq	r0, #32846	; 0x804e
    59f8:	9ff00800 	svcls	0x00f00800
	...
    5a04:	08004ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, lr}
    5a08:	08004ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, lr}
    5a0c:	00520001 	subseq	r0, r2, r1
    5a10:	00000000 	andeq	r0, r0, r0
    5a14:	44000000 	strmi	r0, [r0], #-0
    5a18:	4c08004f 	stcmi	0, cr0, [r8], {79}	; 0x4f
    5a1c:	0108004f 	tsteq	r8, pc, asr #32
    5a20:	00005200 	andeq	r5, r0, r0, lsl #4
    5a24:	00000000 	andeq	r0, r0, r0
    5a28:	4f740000 	svcmi	0x00740000
    5a2c:	4f7c0800 	svcmi	0x007c0800
    5a30:	00010800 	andeq	r0, r1, r0, lsl #16
    5a34:	00000052 	andeq	r0, r0, r2, asr r0
    5a38:	00000000 	andeq	r0, r0, r0
    5a3c:	004fb600 	subeq	fp, pc, r0, lsl #12
    5a40:	00504a08 	subseq	r4, r0, r8, lsl #20
    5a44:	08000308 	stmdaeq	r0, {r3, r8, r9}
    5a48:	50589ff8 	ldrshpl	r9, [r8], #-248	; 0xffffff08
    5a4c:	506c0800 	rsbpl	r0, ip, r0, lsl #16
    5a50:	00030800 	andeq	r0, r3, r0, lsl #16
    5a54:	009ff808 	addseq	pc, pc, r8, lsl #16
    5a58:	00000000 	andeq	r0, r0, r0
    5a5c:	bc000000 	stclt	0, cr0, [r0], {-0}
    5a60:	c408004f 	strgt	r0, [r8], #-79	; 0xffffffb1
    5a64:	0108004f 	tsteq	r8, pc, asr #32
    5a68:	00005200 	andeq	r5, r0, r0, lsl #4
    5a6c:	00000000 	andeq	r0, r0, r0
    5a70:	4ffc0000 	svcmi	0x00fc0000
    5a74:	504a0800 	subpl	r0, sl, r0, lsl #16
    5a78:	00040800 	andeq	r0, r4, r0, lsl #16
    5a7c:	9f7fc00a 	svcls	0x007fc00a
	...
    5a88:	08005004 	stmdaeq	r0, {r2, ip, lr}
    5a8c:	0800500e 	stmdaeq	r0, {r1, r2, r3, ip, lr}
    5a90:	00510001 	subseq	r0, r1, r1
    5a94:	00000000 	andeq	r0, r0, r0
    5a98:	14000000 	strne	r0, [r0], #-0
    5a9c:	4a080050 	bmi	205be4 <_Min_Stack_Size+0x2057e4>
    5aa0:	04080050 	streq	r0, [r8], #-80	; 0xffffffb0
    5aa4:	243d4800 	ldrtcs	r4, [sp], #-2048	; 0xfffff800
    5aa8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5aac:	00000000 	andeq	r0, r0, r0
    5ab0:	00501c00 	subseq	r1, r0, r0, lsl #24
    5ab4:	00502a08 	subseq	r2, r0, r8, lsl #20
    5ab8:	51000108 	tstpl	r0, r8, lsl #2
	...
    5ac4:	08005030 	stmdaeq	r0, {r4, r5, ip, lr}
    5ac8:	0800504a 	stmdaeq	r0, {r1, r3, r6, ip, lr}
    5acc:	474e0004 	strbmi	r0, [lr, -r4]
    5ad0:	00009f24 	andeq	r9, r0, r4, lsr #30
    5ad4:	00000000 	andeq	r0, r0, r0
    5ad8:	50380000 	eorspl	r0, r8, r0
    5adc:	50400800 	subpl	r0, r0, r0, lsl #16
    5ae0:	00010800 	andeq	r0, r1, r0, lsl #16
    5ae4:	00000052 	andeq	r0, r0, r2, asr r0
    5ae8:	00000000 	andeq	r0, r0, r0
    5aec:	0050d400 	subseq	sp, r0, r0, lsl #8
    5af0:	0050f408 	subseq	pc, r0, r8, lsl #8
    5af4:	30000208 	andcc	r0, r0, r8, lsl #4
    5af8:	0050f49f 			; <UNDEFINED> instruction: 0x0050f49f
    5afc:	0050f608 	subseq	pc, r0, r8, lsl #12
    5b00:	50000108 	andpl	r0, r0, r8, lsl #2
    5b04:	080050f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip, lr}
    5b08:	08005110 	stmdaeq	r0, {r4, r8, ip, lr}
    5b0c:	00550001 	subseq	r0, r5, r1
    5b10:	00000000 	andeq	r0, r0, r0
    5b14:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    5b18:	e4080050 	str	r0, [r8], #-80	; 0xffffffb0
    5b1c:	01080050 	qaddeq	r0, r0, r8
    5b20:	00005200 	andeq	r5, r0, r0, lsl #4
    5b24:	00000000 	andeq	r0, r0, r0
    5b28:	51180000 	tstpl	r8, r0
    5b2c:	51380800 	teqpl	r8, r0, lsl #16
    5b30:	00020800 	andeq	r0, r2, r0, lsl #16
    5b34:	51389f30 	teqpl	r8, r0, lsr pc
    5b38:	513a0800 	teqpl	sl, r0, lsl #16
    5b3c:	00010800 	andeq	r0, r1, r0, lsl #16
    5b40:	00513a50 	subseq	r3, r1, r0, asr sl
    5b44:	00515408 	subseq	r5, r1, r8, lsl #8
    5b48:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    5b54:	08005122 	stmdaeq	r0, {r1, r5, r8, ip, lr}
    5b58:	08005128 	stmdaeq	r0, {r3, r5, r8, ip, lr}
    5b5c:	00520001 	subseq	r0, r2, r1
    5b60:	00000000 	andeq	r0, r0, r0
    5b64:	64000000 	strvs	r0, [r0], #-0
    5b68:	68080051 	stmdavs	r8, {r0, r4, r6}
    5b6c:	01080051 	qaddeq	r0, r1, r8
    5b70:	00005300 	andeq	r5, r0, r0, lsl #6
    5b74:	00000000 	andeq	r0, r0, r0
    5b78:	51800000 	orrpl	r0, r0, r0
    5b7c:	51840800 	orrpl	r0, r4, r0, lsl #16
    5b80:	00010800 	andeq	r0, r1, r0, lsl #16
    5b84:	00000053 	andeq	r0, r0, r3, asr r0
    5b88:	00000000 	andeq	r0, r0, r0
    5b8c:	0051a400 	subseq	sl, r1, r0, lsl #8
    5b90:	0051d308 	subseq	sp, r1, r8, lsl #6
    5b94:	50000108 	andpl	r0, r0, r8, lsl #2
    5b98:	080051d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r8, ip, lr}
    5b9c:	080051fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, ip, lr}
    5ba0:	fa560001 	blx	1585bac <_Min_Stack_Size+0x15857ac>
    5ba4:	48080051 	stmdami	r8, {r0, r4, r6}
    5ba8:	04080052 	streq	r0, [r8], #-82	; 0xffffffae
    5bac:	5001f300 	andpl	pc, r1, r0, lsl #6
    5bb0:	0052489f 			; <UNDEFINED> instruction: 0x0052489f
    5bb4:	00524a08 	subseq	r4, r2, r8, lsl #20
    5bb8:	50000108 	andpl	r0, r0, r8, lsl #2
    5bbc:	0800524a 	stmdaeq	r0, {r1, r3, r6, r9, ip, lr}
    5bc0:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    5bc4:	01f30004 	mvnseq	r0, r4
    5bc8:	00009f50 	andeq	r9, r0, r0, asr pc
    5bcc:	00000000 	andeq	r0, r0, r0
    5bd0:	51a40000 			; <UNDEFINED> instruction: 0x51a40000
    5bd4:	51d60800 	bicspl	r0, r6, r0, lsl #16
    5bd8:	00020800 	andeq	r0, r2, r0, lsl #16
    5bdc:	51d69f30 	bicspl	r9, r6, r0, lsr pc
    5be0:	51d80800 	bicspl	r0, r8, r0, lsl #16
    5be4:	00010800 	andeq	r0, r1, r0, lsl #16
    5be8:	0051d850 	subseq	sp, r1, r0, asr r8
    5bec:	00521008 	subseq	r1, r2, r8
    5bf0:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5bf4:	08005210 	stmdaeq	r0, {r4, r9, ip, lr}
    5bf8:	08005212 	stmdaeq	r0, {r1, r4, r9, ip, lr}
    5bfc:	12500001 	subsne	r0, r0, #1
    5c00:	2a080052 	bcs	205d50 <_Min_Stack_Size+0x205950>
    5c04:	01080052 	qaddeq	r0, r2, r8
    5c08:	522a5500 	eorpl	r5, sl, #0, 10
    5c0c:	522c0800 	eorpl	r0, ip, #0, 16
    5c10:	00010800 	andeq	r0, r1, r0, lsl #16
    5c14:	00522c50 	subseq	r2, r2, r0, asr ip
    5c18:	00524808 	subseq	r4, r2, r8, lsl #16
    5c1c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5c20:	08005248 	stmdaeq	r0, {r3, r6, r9, ip, lr}
    5c24:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    5c28:	9f300002 	svcls	0x00300002
	...
    5c34:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    5c38:	0800529a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip, lr}
    5c3c:	9f300002 	svcls	0x00300002
    5c40:	0800529a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip, lr}
    5c44:	0800529c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, lr}
    5c48:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    5c4c:	d0080052 	andle	r0, r8, r2, asr r0
    5c50:	01080052 	qaddeq	r0, r2, r8
    5c54:	52d05500 	sbcspl	r5, r0, #0, 10
    5c58:	52d20800 	sbcspl	r0, r2, #0, 16
    5c5c:	00010800 	andeq	r0, r1, r0, lsl #16
    5c60:	0052d250 	subseq	sp, r2, r0, asr r2
    5c64:	0052f008 	subseq	pc, r2, r8
    5c68:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    5c74:	08005280 	stmdaeq	r0, {r7, r9, ip, lr}
    5c78:	08005284 	stmdaeq	r0, {r2, r7, r9, ip, lr}
    5c7c:	00530001 	subseq	r0, r3, r1
    5c80:	00000000 	andeq	r0, r0, r0
    5c84:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    5c88:	ea080052 	b	205dd8 <_Min_Stack_Size+0x2059d8>
    5c8c:	04080052 	streq	r0, [r8], #-82	; 0xffffffae
    5c90:	243d4000 	ldrtcs	r4, [sp], #-0
    5c94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5c98:	00000000 	andeq	r0, r0, r0
    5c9c:	0052b600 	subseq	fp, r2, r0, lsl #12
    5ca0:	0052ba08 	subseq	fp, r2, r8, lsl #20
    5ca4:	53000108 	movwpl	r0, #264	; 0x108
	...
    5cb0:	080052f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, lr}
    5cb4:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    5cb8:	9f300002 	svcls	0x00300002
    5cbc:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    5cc0:	08005336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, ip, lr}
    5cc4:	36500001 	ldrbcc	r0, [r0], -r1
    5cc8:	6a080053 	bvs	205e1c <_Min_Stack_Size+0x205a1c>
    5ccc:	01080053 	qaddeq	r0, r3, r8
    5cd0:	536a5500 	cmnpl	sl, #0, 10
    5cd4:	536c0800 	cmnpl	ip, #0, 16
    5cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    5cdc:	00536c50 	subseq	r6, r3, r0, asr ip
    5ce0:	00538a08 	subseq	r8, r3, r8, lsl #20
    5ce4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    5cf0:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}
    5cf4:	08005320 	stmdaeq	r0, {r5, r8, r9, ip, lr}
    5cf8:	00530001 	subseq	r0, r3, r1
    5cfc:	00000000 	andeq	r0, r0, r0
    5d00:	4a000000 	bmi	5d08 <_Min_Stack_Size+0x5908>
    5d04:	84080053 	strhi	r0, [r8], #-83	; 0xffffffad
    5d08:	04080053 	streq	r0, [r8], #-83	; 0xffffffad
    5d0c:	243c4000 	ldrtcs	r4, [ip], #-0
    5d10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5d14:	00000000 	andeq	r0, r0, r0
    5d18:	00535200 	subseq	r5, r3, r0, lsl #4
    5d1c:	00535608 	subseq	r5, r3, r8, lsl #12
    5d20:	52000108 	andpl	r0, r0, #8, 2
	...
    5d2c:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
    5d30:	080053c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, ip, lr}
    5d34:	c9500001 	ldmdbgt	r0, {r0}^
    5d38:	f6080053 			; <UNDEFINED> instruction: 0xf6080053
    5d3c:	01080053 	qaddeq	r0, r3, r8
    5d40:	53f65600 	mvnspl	r5, #0, 12
    5d44:	54160800 	ldrpl	r0, [r6], #-2048	; 0xfffff800
    5d48:	00040800 	andeq	r0, r4, r0, lsl #16
    5d4c:	9f5001f3 	svcls	0x005001f3
    5d50:	08005416 	stmdaeq	r0, {r1, r2, r4, sl, ip, lr}
    5d54:	0800541c 	stmdaeq	r0, {r2, r3, r4, sl, ip, lr}
    5d58:	1c560001 	mrrcne	0, 0, r0, r6, cr1
    5d5c:	2c080054 	stccs	0, cr0, [r8], {84}	; 0x54
    5d60:	04080054 	streq	r0, [r8], #-84	; 0xffffffac
    5d64:	5001f300 	andpl	pc, r1, r0, lsl #6
    5d68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5d6c:	00000000 	andeq	r0, r0, r0
    5d70:	00539400 	subseq	r9, r3, r0, lsl #8
    5d74:	0053c908 	subseq	ip, r3, r8, lsl #18
    5d78:	51000108 	tstpl	r0, r8, lsl #2
    5d7c:	080053c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, ip, lr}
    5d80:	0800542c 	stmdaeq	r0, {r2, r3, r5, sl, ip, lr}
    5d84:	01f30004 	mvnseq	r0, r4
    5d88:	00009f51 	andeq	r9, r0, r1, asr pc
    5d8c:	00000000 	andeq	r0, r0, r0
    5d90:	53940000 	orrspl	r0, r4, #0
    5d94:	53ea0800 	mvnpl	r0, #0, 16
    5d98:	00020800 	andeq	r0, r2, r0, lsl #16
    5d9c:	53ea9f30 	mvnpl	r9, #48, 30	; 0xc0
    5da0:	53f00800 	mvnspl	r0, #0, 16
    5da4:	00010800 	andeq	r0, r1, r0, lsl #16
    5da8:	0053f453 	subseq	pc, r3, r3, asr r4	; <UNPREDICTABLE>
    5dac:	0053f608 	subseq	pc, r3, r8, lsl #12
    5db0:	53000108 	movwpl	r0, #264	; 0x108
    5db4:	080053f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, ip, lr}
    5db8:	08005416 	stmdaeq	r0, {r1, r2, r4, sl, ip, lr}
    5dbc:	16560001 	ldrbne	r0, [r6], -r1
    5dc0:	1c080054 	stcne	0, cr0, [r8], {84}	; 0x54
    5dc4:	02080054 	andeq	r0, r8, #84	; 0x54
    5dc8:	1c9f3000 	ldcne	0, cr3, [pc], {0}
    5dcc:	2c080054 	stccs	0, cr0, [r8], {84}	; 0x54
    5dd0:	01080054 	qaddeq	r0, r4, r8
    5dd4:	00005600 	andeq	r5, r0, r0, lsl #12
    5dd8:	00000000 	andeq	r0, r0, r0
    5ddc:	53940000 	orrspl	r0, r4, #0
    5de0:	53cc0800 	bicpl	r0, ip, #0, 16
    5de4:	00020800 	andeq	r0, r2, r0, lsl #16
    5de8:	53cc9f30 	bicpl	r9, ip, #48, 30	; 0xc0
    5dec:	53ce0800 	bicpl	r0, lr, #0, 16
    5df0:	00010800 	andeq	r0, r1, r0, lsl #16
    5df4:	0053ce50 	subseq	ip, r3, r0, asr lr
    5df8:	00542c08 	subseq	r2, r4, r8, lsl #24
    5dfc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    5e08:	08005430 	stmdaeq	r0, {r4, r5, sl, ip, lr}
    5e0c:	08005448 	stmdaeq	r0, {r3, r6, sl, ip, lr}
    5e10:	48500001 	ldmdami	r0, {r0}^
    5e14:	d6080054 			; <UNDEFINED> instruction: 0xd6080054
    5e18:	01080054 	qaddeq	r0, r4, r8
    5e1c:	54d65800 	ldrbpl	r5, [r6], #2048	; 0x800
    5e20:	54dd0800 	ldrbpl	r0, [sp], #2048	; 0x800
    5e24:	00010800 	andeq	r0, r1, r0, lsl #16
    5e28:	0054dd50 	subseq	sp, r4, r0, asr sp
    5e2c:	0054e008 	subseq	lr, r4, r8
    5e30:	58000108 	stmdapl	r0, {r3, r8}
    5e34:	080054e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, lr}
    5e38:	080054e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip, lr}
    5e3c:	e2500001 	subs	r0, r0, #1
    5e40:	e4080054 	str	r0, [r8], #-84	; 0xffffffac
    5e44:	04080054 	streq	r0, [r8], #-84	; 0xffffffac
    5e48:	5001f300 	andpl	pc, r1, r0, lsl #6
    5e4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5e50:	00000000 	andeq	r0, r0, r0
    5e54:	0054e800 	subseq	lr, r4, r0, lsl #16
    5e58:	00550108 	subseq	r0, r5, r8, lsl #2
    5e5c:	50000108 	andpl	r0, r0, r8, lsl #2
    5e60:	08005501 	stmdaeq	r0, {r0, r8, sl, ip, lr}
    5e64:	08005510 	stmdaeq	r0, {r4, r8, sl, ip, lr}
    5e68:	10540001 	subsne	r0, r4, r1
    5e6c:	12080055 	andne	r0, r8, #85	; 0x55
    5e70:	01080055 	qaddeq	r0, r5, r8
    5e74:	55125000 	ldrpl	r5, [r2, #-0]
    5e78:	55140800 	ldrpl	r0, [r4, #-2048]	; 0xfffff800
    5e7c:	00040800 	andeq	r0, r4, r0, lsl #16
    5e80:	9f5001f3 	svcls	0x005001f3
	...
    5e8c:	08005514 	stmdaeq	r0, {r2, r4, r8, sl, ip, lr}
    5e90:	0800551e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, lr}
    5e94:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
    5e98:	3c080055 	stccc	0, cr0, [r8], {85}	; 0x55
    5e9c:	01080058 	qaddeq	r0, r8, r8
    5ea0:	00005400 	andeq	r5, r0, r0, lsl #8
    5ea4:	00000000 	andeq	r0, r0, r0
    5ea8:	55140000 	ldrpl	r0, [r4, #-0]
    5eac:	553b0800 	ldrpl	r0, [fp, #-2048]!	; 0xfffff800
    5eb0:	00010800 	andeq	r0, r1, r0, lsl #16
    5eb4:	00553b51 	subseq	r3, r5, r1, asr fp
    5eb8:	00554a08 	subseq	r4, r5, r8, lsl #20
    5ebc:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5ec0:	0800555c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip, lr}
    5ec4:	080055f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, ip, lr}
    5ec8:	2c550001 	mrrccs	0, 0, r0, r5, cr1
    5ecc:	3e080056 	mcrcc	0, 0, r0, cr8, cr6, {2}
    5ed0:	01080056 	qaddeq	r0, r6, r8
    5ed4:	563e5500 	ldrtpl	r5, [lr], -r0, lsl #10
    5ed8:	56400800 	strbpl	r0, [r0], -r0, lsl #16
    5edc:	00030800 	andeq	r0, r3, r0, lsl #16
    5ee0:	409f7f75 	addsmi	r7, pc, r5, ror pc	; <UNPREDICTABLE>
    5ee4:	66080056 			; <UNDEFINED> instruction: 0x66080056
    5ee8:	01080056 	qaddeq	r0, r6, r8
    5eec:	56665500 	strbtpl	r5, [r6], -r0, lsl #10
    5ef0:	56680800 	strbtpl	r0, [r8], -r0, lsl #16
    5ef4:	00030800 	andeq	r0, r3, r0, lsl #16
    5ef8:	689f7f75 	ldmvs	pc, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    5efc:	80080056 	andhi	r0, r8, r6, asr r0
    5f00:	01080056 	qaddeq	r0, r6, r8
    5f04:	56805500 	strpl	r5, [r0], r0, lsl #10
    5f08:	56820800 	strpl	r0, [r2], r0, lsl #16
    5f0c:	00030800 	andeq	r0, r3, r0, lsl #16
    5f10:	829f7f75 	addshi	r7, pc, #468	; 0x1d4
    5f14:	8e080056 	mcrhi	0, 0, r0, cr8, cr6, {2}
    5f18:	01080056 	qaddeq	r0, r6, r8
    5f1c:	56da5500 	ldrbpl	r5, [sl], r0, lsl #10
    5f20:	56de0800 	ldrbpl	r0, [lr], r0, lsl #16
    5f24:	00010800 	andeq	r0, r1, r0, lsl #16
    5f28:	0056de55 	subseq	sp, r6, r5, asr lr
    5f2c:	0056e008 	subseq	lr, r6, r8
    5f30:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    5f34:	0056e030 	subseq	lr, r6, r0, lsr r0
    5f38:	00573a08 	subseq	r3, r7, r8, lsl #20
    5f3c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5f40:	0800573a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, ip, lr}
    5f44:	0800573c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, lr}
    5f48:	7e750003 	cdpvc	0, 7, cr0, cr5, cr3, {0}
    5f4c:	00573c9f 			; <UNDEFINED> instruction: 0x00573c9f
    5f50:	00576208 	subseq	r6, r7, r8, lsl #4
    5f54:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5f58:	08005762 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, ip, lr}
    5f5c:	08005764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip, lr}
    5f60:	7e750003 	cdpvc	0, 7, cr0, cr5, cr3, {0}
    5f64:	0057649f 			; <UNDEFINED> instruction: 0x0057649f
    5f68:	00577a08 	subseq	r7, r7, r8, lsl #20
    5f6c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5f70:	0800577a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr}
    5f74:	0800577c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, lr}
    5f78:	7e750003 	cdpvc	0, 7, cr0, cr5, cr3, {0}
    5f7c:	00577c9f 			; <UNDEFINED> instruction: 0x00577c9f
    5f80:	00579e08 	subseq	r9, r7, r8, lsl #28
    5f84:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    5f88:	0800579e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, ip, lr}
    5f8c:	080057a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip, lr}
    5f90:	30740002 	rsbscc	r0, r4, r2
    5f94:	080057a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip, lr}
    5f98:	080057aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip, lr}
    5f9c:	00550001 	subseq	r0, r5, r1
    5fa0:	00000000 	andeq	r0, r0, r0
    5fa4:	14000000 	strne	r0, [r0], #-0
    5fa8:	3b080055 	blcc	206104 <_Min_Stack_Size+0x205d04>
    5fac:	01080055 	qaddeq	r0, r5, r8
    5fb0:	553b5200 	ldrpl	r5, [fp, #-512]!	; 0xfffffe00
    5fb4:	583c0800 	ldmdapl	ip!, {fp}
    5fb8:	00040800 	andeq	r0, r4, r0, lsl #16
    5fbc:	9f5201f3 	svcls	0x005201f3
	...
    5fc8:	08005514 	stmdaeq	r0, {r2, r4, r8, sl, ip, lr}
    5fcc:	08005530 	stmdaeq	r0, {r4, r5, r8, sl, ip, lr}
    5fd0:	30530001 	subscc	r0, r3, r1
    5fd4:	3c080055 	stccc	0, cr0, [r8], {85}	; 0x55
    5fd8:	01080058 	qaddeq	r0, r8, r8
    5fdc:	00005600 	andeq	r5, r0, r0, lsl #12
    5fe0:	00000000 	andeq	r0, r0, r0
    5fe4:	551e0000 	ldrpl	r0, [lr, #-0]
    5fe8:	553e0800 	ldrpl	r0, [lr, #-2048]!	; 0xfffff800
    5fec:	00020800 	andeq	r0, r2, r0, lsl #16
    5ff0:	553e9f30 	ldrpl	r9, [lr, #-3888]!	; 0xfffff0d0
    5ff4:	55420800 	strbpl	r0, [r2, #-2048]	; 0xfffff800
    5ff8:	00010800 	andeq	r0, r1, r0, lsl #16
    5ffc:	00554250 	subseq	r4, r5, r0, asr r2
    6000:	00583c08 	subseq	r3, r8, r8, lsl #24
    6004:	58000108 	stmdapl	r0, {r3, r8}
	...
    6010:	0800551e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, lr}
    6014:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    6018:	9f300002 	svcls	0x00300002
    601c:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    6020:	0800555c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip, lr}
    6024:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    6028:	fc080055 	stc2	0, cr0, [r8], {85}	; 0x55
    602c:	02080057 	andeq	r0, r8, #87	; 0x57
    6030:	fc9f3000 	ldc2	0, cr3, [pc], {0}
    6034:	00080057 	andeq	r0, r8, r7, asr r0
    6038:	02080058 	andeq	r0, r8, #88	; 0x58
    603c:	009f3100 	addseq	r3, pc, r0, lsl #2
    6040:	3c080058 	stccc	0, cr0, [r8], {88}	; 0x58
    6044:	02080058 	andeq	r0, r8, #88	; 0x58
    6048:	009f3000 	addseq	r3, pc, r0
    604c:	00000000 	andeq	r0, r0, r0
    6050:	a4000000 	strge	r0, [r0], #-0
    6054:	d6080056 			; <UNDEFINED> instruction: 0xd6080056
    6058:	02080056 	andeq	r0, r8, #86	; 0x56
    605c:	0a9f3200 	beq	fe7d2864 <_estack+0xde7a2864>
    6060:	24080058 	strcs	r0, [r8], #-88	; 0xffffffa8
    6064:	02080058 	andeq	r0, r8, #88	; 0x58
    6068:	009f3200 	addseq	r3, pc, r0, lsl #4
    606c:	00000000 	andeq	r0, r0, r0
    6070:	a4000000 	strge	r0, [r0], #-0
    6074:	d6080056 			; <UNDEFINED> instruction: 0xd6080056
    6078:	02080056 	andeq	r0, r8, #86	; 0x56
    607c:	0a9f3100 	beq	fe7d2484 <_estack+0xde7a2484>
    6080:	24080058 	strcs	r0, [r8], #-88	; 0xffffffa8
    6084:	02080058 	andeq	r0, r8, #88	; 0x58
    6088:	009f3100 	addseq	r3, pc, r0, lsl #2
    608c:	00000000 	andeq	r0, r0, r0
    6090:	a4000000 	strge	r0, [r0], #-0
    6094:	d6080056 			; <UNDEFINED> instruction: 0xd6080056
    6098:	01080056 	qaddeq	r0, r6, r8
    609c:	580a5600 	stmdapl	sl, {r9, sl, ip, lr}
    60a0:	58240800 	stmdapl	r4!, {fp}
    60a4:	00010800 	andeq	r0, r1, r0, lsl #16
    60a8:	00000056 	andeq	r0, r0, r6, asr r0
    60ac:	00000000 	andeq	r0, r0, r0
    60b0:	0056a400 	subseq	sl, r6, r0, lsl #8
    60b4:	0056d608 	subseq	sp, r6, r8, lsl #12
    60b8:	58000108 	stmdapl	r0, {r3, r8}
    60bc:	0800580a 	stmdaeq	r0, {r1, r3, fp, ip, lr}
    60c0:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
    60c4:	00580001 	subseq	r0, r8, r1
    60c8:	00000000 	andeq	r0, r0, r0
    60cc:	a4000000 	strge	r0, [r0], #-0
    60d0:	d6080056 			; <UNDEFINED> instruction: 0xd6080056
    60d4:	01080056 	qaddeq	r0, r6, r8
    60d8:	580a5400 	stmdapl	sl, {sl, ip, lr}
    60dc:	58240800 	stmdapl	r4!, {fp}
    60e0:	00010800 	andeq	r0, r1, r0, lsl #16
    60e4:	00000054 	andeq	r0, r0, r4, asr r0
    60e8:	00000000 	andeq	r0, r0, r0
    60ec:	0057c400 	subseq	ip, r7, r0, lsl #8
    60f0:	00580008 	subseq	r0, r8, r8
    60f4:	08000308 	stmdaeq	r0, {r3, r8, r9}
    60f8:	58249f80 	stmdapl	r4!, {r7, r8, r9, sl, fp, ip, pc}
    60fc:	583c0800 	ldmdapl	ip!, {fp}
    6100:	00030800 	andeq	r0, r3, r0, lsl #16
    6104:	009f8008 	addseq	r8, pc, r8
    6108:	00000000 	andeq	r0, r0, r0
    610c:	c4000000 	strgt	r0, [r0], #-0
    6110:	00080057 	andeq	r0, r8, r7, asr r0
    6114:	02080058 	andeq	r0, r8, #88	; 0x58
    6118:	249f3000 	ldrcs	r3, [pc], #0	; 6120 <_Min_Stack_Size+0x5d20>
    611c:	3c080058 	stccc	0, cr0, [r8], {88}	; 0x58
    6120:	02080058 	andeq	r0, r8, #88	; 0x58
    6124:	009f3000 	addseq	r3, pc, r0
    6128:	00000000 	andeq	r0, r0, r0
    612c:	c4000000 	strgt	r0, [r0], #-0
    6130:	00080057 	andeq	r0, r8, r7, asr r0
    6134:	01080058 	qaddeq	r0, r8, r8
    6138:	58245600 	stmdapl	r4!, {r9, sl, ip, lr}
    613c:	583c0800 	ldmdapl	ip!, {fp}
    6140:	00010800 	andeq	r0, r1, r0, lsl #16
    6144:	00000056 	andeq	r0, r0, r6, asr r0
    6148:	00000000 	andeq	r0, r0, r0
    614c:	0057c400 	subseq	ip, r7, r0, lsl #8
    6150:	00580008 	subseq	r0, r8, r8
    6154:	58000108 	stmdapl	r0, {r3, r8}
    6158:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
    615c:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
    6160:	00580001 	subseq	r0, r8, r1
    6164:	00000000 	andeq	r0, r0, r0
    6168:	c4000000 	strgt	r0, [r0], #-0
    616c:	00080057 	andeq	r0, r8, r7, asr r0
    6170:	01080058 	qaddeq	r0, r8, r8
    6174:	58245400 	stmdapl	r4!, {sl, ip, lr}
    6178:	583c0800 	ldmdapl	ip!, {fp}
    617c:	00010800 	andeq	r0, r1, r0, lsl #16
    6180:	00000054 	andeq	r0, r0, r4, asr r0
    6184:	00000000 	andeq	r0, r0, r0
    6188:	00583c00 	subseq	r3, r8, r0, lsl #24
    618c:	00584608 	subseq	r4, r8, r8, lsl #12
    6190:	50000108 	andpl	r0, r0, r8, lsl #2
    6194:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    6198:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
    619c:	00540001 	subseq	r0, r4, r1
    61a0:	00000000 	andeq	r0, r0, r0
    61a4:	3c000000 	stccc	0, cr0, [r0], {-0}
    61a8:	6b080058 	blvs	206310 <_Min_Stack_Size+0x205f10>
    61ac:	01080058 	qaddeq	r0, r8, r8
    61b0:	586b5100 	stmdapl	fp!, {r8, ip, lr}^
    61b4:	58820800 	stmpl	r2, {fp}
    61b8:	00010800 	andeq	r0, r1, r0, lsl #16
    61bc:	00589655 	subseq	r9, r8, r5, asr r6
    61c0:	00598e08 	subseq	r8, r9, r8, lsl #28
    61c4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    61c8:	08005992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, lr}
    61cc:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
    61d0:	94550001 	ldrbls	r0, [r5], #-1
    61d4:	96080059 			; <UNDEFINED> instruction: 0x96080059
    61d8:	04080059 	streq	r0, [r8], #-89	; 0xffffffa7
    61dc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    61e0:	0059969f 			; <UNDEFINED> instruction: 0x0059969f
    61e4:	0059c408 	subseq	ip, r9, r8, lsl #8
    61e8:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    61ec:	08005a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip, lr}
    61f0:	08005a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, ip, lr}
    61f4:	36550001 	ldrbcc	r0, [r5], -r1
    61f8:	3808005a 	stmdacc	r8, {r1, r3, r4, r6}
    61fc:	0208005a 	andeq	r0, r8, #90	; 0x5a
    6200:	38307400 	ldmdacc	r0!, {sl, ip, sp, lr}
    6204:	4208005a 	andmi	r0, r8, #90	; 0x5a
    6208:	0108005a 	qaddeq	r0, sl, r8
    620c:	5a8c5500 	bpl	fe31b614 <_estack+0xde2eb614>
    6210:	5aba0800 	bpl	fee88218 <_estack+0xdee58218>
    6214:	00010800 	andeq	r0, r1, r0, lsl #16
    6218:	005aba55 	subseq	fp, sl, r5, asr sl
    621c:	005abc08 	subseq	fp, sl, r8, lsl #24
    6220:	75000308 	strvc	r0, [r0, #-776]	; 0xfffffcf8
    6224:	5abc9f7e 	bpl	fef2e024 <_estack+0xdeefe024>
    6228:	5b260800 	blpl	988230 <_Min_Stack_Size+0x987e30>
    622c:	00010800 	andeq	r0, r1, r0, lsl #16
    6230:	005b2a55 	subseq	r2, fp, r5, asr sl
    6234:	005b2e08 	subseq	r2, fp, r8, lsl #28
    6238:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    623c:	08005b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, ip, lr}
    6240:	08005b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, lr}
    6244:	30740002 	rsbscc	r0, r4, r2
    6248:	08005b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, lr}
    624c:	08005b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip, lr}
    6250:	90550001 	subsls	r0, r5, r1
    6254:	9c08005b 	stcls	0, cr0, [r8], {91}	; 0x5b
    6258:	0108005b 	qaddeq	r0, fp, r8
    625c:	00005500 	andeq	r5, r0, r0, lsl #10
    6260:	00000000 	andeq	r0, r0, r0
    6264:	583c0000 	ldmdapl	ip!, {}	; <UNPREDICTABLE>
    6268:	58600800 	stmdapl	r0!, {fp}^
    626c:	00010800 	andeq	r0, r1, r0, lsl #16
    6270:	00586052 	subseq	r6, r8, r2, asr r0
    6274:	00596a08 	subseq	r6, r9, r8, lsl #20
    6278:	58000108 	stmdapl	r0, {r3, r8}
    627c:	0800596a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, ip, lr}
    6280:	0800597a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, ip, lr}
    6284:	01780003 	cmneq	r8, r3
    6288:	00597a9f 			; <UNDEFINED> instruction: 0x00597a9f
    628c:	005c3808 	subseq	r3, ip, r8, lsl #16
    6290:	58000108 	stmdapl	r0, {r3, r8}
	...
    629c:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
    62a0:	0800586b 	stmdaeq	r0, {r0, r1, r3, r5, r6, fp, ip, lr}
    62a4:	6b530001 	blvs	14c62b0 <_Min_Stack_Size+0x14c5eb0>
    62a8:	38080058 	stmdacc	r8, {r3, r4, r6}
    62ac:	0408005c 	streq	r0, [r8], #-92	; 0xffffffa4
    62b0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    62b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    62b8:	00000000 	andeq	r0, r0, r0
    62bc:	00583c00 	subseq	r3, r8, r0, lsl #24
    62c0:	00585c08 	subseq	r5, r8, r8, lsl #24
    62c4:	91000208 	tstls	r0, r8, lsl #4
    62c8:	00585c00 	subseq	r5, r8, r0, lsl #24
    62cc:	005c3808 	subseq	r3, ip, r8, lsl #16
    62d0:	91000208 	tstls	r0, r8, lsl #4
	...
    62dc:	00585000 	subseq	r5, r8, r0
    62e0:	00587808 	subseq	r7, r8, r8, lsl #16
    62e4:	30000208 	andcc	r0, r0, r8, lsl #4
    62e8:	0058789f 			; <UNDEFINED> instruction: 0x0058789f
    62ec:	00588208 	subseq	r8, r8, r8, lsl #4
    62f0:	52000108 	andpl	r0, r0, #8, 2
    62f4:	08005896 	stmdaeq	r0, {r1, r2, r4, r7, fp, ip, lr}
    62f8:	080058ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, ip, lr}
    62fc:	92520001 	subsls	r0, r2, #1
    6300:	96080059 			; <UNDEFINED> instruction: 0x96080059
    6304:	01080059 	qaddeq	r0, r9, r8
    6308:	00005200 	andeq	r5, r0, r0, lsl #4
    630c:	00000000 	andeq	r0, r0, r0
    6310:	58500000 	ldmdapl	r0, {}^	; <UNPREDICTABLE>
    6314:	58780800 	ldmdapl	r8!, {fp}^
    6318:	00020800 	andeq	r0, r2, r0, lsl #16
    631c:	58789f30 	ldmdapl	r8!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    6320:	58820800 	stmpl	r2, {fp}
    6324:	00010800 	andeq	r0, r1, r0, lsl #16
    6328:	00589651 	subseq	r9, r8, r1, asr r6
    632c:	00591208 	subseq	r1, r9, r8, lsl #4
    6330:	51000108 	tstpl	r0, r8, lsl #2
    6334:	08005992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, lr}
    6338:	080059aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp, ip, lr}
    633c:	32510001 	subscc	r0, r1, #1
    6340:	4208005a 	andmi	r0, r8, #90	; 0x5a
    6344:	0108005a 	qaddeq	r0, sl, r8
    6348:	5a8c5100 	bpl	fe31a750 <_estack+0xde2ea750>
    634c:	5aa00800 	bpl	fe808354 <_estack+0xde7d8354>
    6350:	00010800 	andeq	r0, r1, r0, lsl #16
    6354:	005b2a51 	subseq	r2, fp, r1, asr sl
    6358:	005b3a08 	subseq	r3, fp, r8, lsl #20
    635c:	51000108 	tstpl	r0, r8, lsl #2
	...
    6368:	08005850 	stmdaeq	r0, {r4, r6, fp, ip, lr}
    636c:	08005878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, lr}
    6370:	9f300002 	svcls	0x00300002
    6374:	08005878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, lr}
    6378:	08005882 	stmdaeq	r0, {r1, r7, fp, ip, lr}
    637c:	82500001 	subshi	r0, r0, #1
    6380:	96080058 			; <UNDEFINED> instruction: 0x96080058
    6384:	01080058 	qaddeq	r0, r8, r8
    6388:	58965700 	ldmpl	r6, {r8, r9, sl, ip, lr}
    638c:	58e80800 	stmiapl	r8!, {fp}^
    6390:	00010800 	andeq	r0, r1, r0, lsl #16
    6394:	0058e850 	subseq	lr, r8, r0, asr r8
    6398:	00599208 	subseq	r9, r9, r8, lsl #4
    639c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    63a0:	08005992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, lr}
    63a4:	08005996 	stmdaeq	r0, {r1, r2, r4, r7, r8, fp, ip, lr}
    63a8:	96500001 	ldrbls	r0, [r0], -r1
    63ac:	8c080059 	stchi	0, cr0, [r8], {89}	; 0x59
    63b0:	0108005a 	qaddeq	r0, sl, r8
    63b4:	5a8c5700 	bpl	fe31bfbc <_estack+0xde2ebfbc>
    63b8:	5a8e0800 	bpl	fe3883c0 <_estack+0xde3583c0>
    63bc:	00010800 	andeq	r0, r1, r0, lsl #16
    63c0:	005a8e50 	subseq	r8, sl, r0, asr lr
    63c4:	005c3808 	subseq	r3, ip, r8, lsl #16
    63c8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    63d4:	08005850 	stmdaeq	r0, {r4, r6, fp, ip, lr}
    63d8:	08005882 	stmdaeq	r0, {r1, r7, fp, ip, lr}
    63dc:	9f310002 	svcls	0x00310002
    63e0:	08005896 	stmdaeq	r0, {r1, r2, r4, r7, fp, ip, lr}
    63e4:	08005912 	stmdaeq	r0, {r1, r4, r8, fp, ip, lr}
    63e8:	9f310002 	svcls	0x00310002
    63ec:	08005912 	stmdaeq	r0, {r1, r4, r8, fp, ip, lr}
    63f0:	08005946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip, lr}
    63f4:	4c590001 	mrrcmi	0, 0, r0, r9, cr1
    63f8:	5c080059 	stcpl	0, cr0, [r8], {89}	; 0x59
    63fc:	02080059 	andeq	r0, r8, #89	; 0x59
    6400:	5c9f3000 	ldcpl	0, cr3, [pc], {0}
    6404:	7c080059 	stcvc	0, cr0, [r8], {89}	; 0x59
    6408:	01080059 	qaddeq	r0, r9, r8
    640c:	597c5900 	ldmdbpl	ip!, {r8, fp, ip, lr}^
    6410:	59800800 	stmibpl	r0, {fp}
    6414:	00020800 	andeq	r0, r2, r0, lsl #16
    6418:	59809f31 	stmibpl	r0, {r0, r4, r5, r8, r9, sl, fp, ip, pc}
    641c:	59920800 	ldmibpl	r2, {fp}
    6420:	00010800 	andeq	r0, r1, r0, lsl #16
    6424:	00599259 	subseq	r9, r9, r9, asr r2
    6428:	0059aa08 	subseq	sl, r9, r8, lsl #20
    642c:	31000208 	tstcc	r0, r8, lsl #4
    6430:	0059aa9f 			; <UNDEFINED> instruction: 0x0059aa9f
    6434:	005a2a08 	subseq	r2, sl, r8, lsl #20
    6438:	59000108 	stmdbpl	r0, {r3, r8}
    643c:	08005a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, lr}
    6440:	08005a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, ip, lr}
    6444:	9f300002 	svcls	0x00300002
    6448:	08005a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, ip, lr}
    644c:	08005a42 	stmdaeq	r0, {r1, r6, r9, fp, ip, lr}
    6450:	9f310002 	svcls	0x00310002
    6454:	08005a42 	stmdaeq	r0, {r1, r6, r9, fp, ip, lr}
    6458:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    645c:	8c590001 	mrrchi	0, 0, r0, r9, cr1
    6460:	a008005a 	andge	r0, r8, sl, asr r0
    6464:	0208005a 	andeq	r0, r8, #90	; 0x5a
    6468:	a09f3100 	addsge	r3, pc, r0, lsl #2
    646c:	c408005a 	strgt	r0, [r8], #-90	; 0xffffffa6
    6470:	0108005a 	qaddeq	r0, sl, r8
    6474:	5ac45900 	bpl	ff11c87c <_estack+0xdf0ec87c>
    6478:	5ad80800 	bpl	ff608480 <_estack+0xdf5d8480>
    647c:	00020800 	andeq	r0, r2, r0, lsl #16
    6480:	5ad89f30 	bpl	ff62e148 <_estack+0xdf5fe148>
    6484:	5af40800 	bpl	ffd0848c <_estack+0xdfcd848c>
    6488:	00010800 	andeq	r0, r1, r0, lsl #16
    648c:	005af459 	subseq	pc, sl, r9, asr r4	; <UNPREDICTABLE>
    6490:	005af808 	subseq	pc, sl, r8, lsl #16
    6494:	31000208 	tstcc	r0, r8, lsl #4
    6498:	005af89f 			; <UNDEFINED> instruction: 0x005af89f
    649c:	005b1008 	subseq	r1, fp, r8
    64a0:	59000108 	stmdbpl	r0, {r3, r8}
    64a4:	08005b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, ip, lr}
    64a8:	08005b26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp, ip, lr}
    64ac:	9f300002 	svcls	0x00300002
    64b0:	08005b26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp, ip, lr}
    64b4:	08005b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip, lr}
    64b8:	2a590001 	bcs	16464c4 <_Min_Stack_Size+0x16460c4>
    64bc:	3a08005b 	bcc	206630 <_Min_Stack_Size+0x206230>
    64c0:	0208005b 	andeq	r0, r8, #91	; 0x5b
    64c4:	3a9f3100 	bcc	fe7d28cc <_estack+0xde7a28cc>
    64c8:	9008005b 	andls	r0, r8, fp, asr r0
    64cc:	0108005b 	qaddeq	r0, fp, r8
    64d0:	5b905900 	blpl	fe41c8d8 <_estack+0xde3ec8d8>
    64d4:	5b9c0800 	blpl	fe7084dc <_estack+0xde6d84dc>
    64d8:	00020800 	andeq	r0, r2, r0, lsl #16
    64dc:	5b9c9f30 	blpl	fe72e1a4 <_estack+0xde6fe1a4>
    64e0:	5c380800 	ldcpl	8, cr0, [r8], #-0
    64e4:	00010800 	andeq	r0, r1, r0, lsl #16
    64e8:	00000059 	andeq	r0, r0, r9, asr r0
    64ec:	00000000 	andeq	r0, r0, r0
    64f0:	00585000 	subseq	r5, r8, r0
    64f4:	00588208 	subseq	r8, r8, r8, lsl #4
    64f8:	30000208 	andcc	r0, r0, r8, lsl #4
    64fc:	0058829f 			; <UNDEFINED> instruction: 0x0058829f
    6500:	00589608 	subseq	r9, r8, r8, lsl #12
    6504:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    6508:	08005896 	stmdaeq	r0, {r1, r2, r4, r7, fp, ip, lr}
    650c:	0800598e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, ip, lr}
    6510:	9f300002 	svcls	0x00300002
    6514:	0800598e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, ip, lr}
    6518:	08005992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, lr}
    651c:	9f330002 	svcls	0x00330002
    6520:	08005992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, lr}
    6524:	080059de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, ip, lr}
    6528:	9f300002 	svcls	0x00300002
    652c:	08005a0a 	stmdaeq	r0, {r1, r3, r9, fp, ip, lr}
    6530:	08005a42 	stmdaeq	r0, {r1, r6, r9, fp, ip, lr}
    6534:	9f300002 	svcls	0x00300002
    6538:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    653c:	08005b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, ip, lr}
    6540:	9f300002 	svcls	0x00300002
    6544:	08005b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, ip, lr}
    6548:	08005b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip, lr}
    654c:	2a550001 	bcs	1546558 <_Min_Stack_Size+0x1546158>
    6550:	3a08005b 	bcc	2066c4 <_Min_Stack_Size+0x2062c4>
    6554:	0208005b 	andeq	r0, r8, #91	; 0x5b
    6558:	8a9f3000 	bhi	fe7d2560 <_estack+0xde7a2560>
    655c:	9008005b 	andls	r0, r8, fp, asr r0
    6560:	0208005b 	andeq	r0, r8, #91	; 0x5b
    6564:	909f3100 	addsls	r3, pc, r0, lsl #2
    6568:	ee08005b 	mcr	0, 0, r0, cr8, cr11, {2}
    656c:	0208005b 	andeq	r0, r8, #91	; 0x5b
    6570:	209f3000 	addscs	r3, pc, r0
    6574:	3808005c 	stmdacc	r8, {r2, r3, r4, r6}
    6578:	0208005c 	andeq	r0, r8, #92	; 0x5c
    657c:	009f3000 	addseq	r3, pc, r0
    6580:	00000000 	andeq	r0, r0, r0
    6584:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6588:	2a08005b 	bcs	2066fc <_Min_Stack_Size+0x2062fc>
    658c:	0108005b 	qaddeq	r0, fp, r8
    6590:	00005700 	andeq	r5, r0, r0, lsl #14
    6594:	00000000 	andeq	r0, r0, r0
    6598:	5b280000 	blpl	a065a0 <_Min_Stack_Size+0xa061a0>
    659c:	5b2a0800 	blpl	a885a4 <_Min_Stack_Size+0xa881a4>
    65a0:	00010800 	andeq	r0, r1, r0, lsl #16
    65a4:	00000056 	andeq	r0, r0, r6, asr r0
    65a8:	00000000 	andeq	r0, r0, r0
    65ac:	005b2800 	subseq	r2, fp, r0, lsl #16
    65b0:	005b2a08 	subseq	r2, fp, r8, lsl #20
    65b4:	31000208 	tstcc	r0, r8, lsl #4
    65b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    65bc:	00000000 	andeq	r0, r0, r0
    65c0:	005b2800 	subseq	r2, fp, r0, lsl #16
    65c4:	005b2a08 	subseq	r2, fp, r8, lsl #20
    65c8:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    65cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    65d0:	00000000 	andeq	r0, r0, r0
    65d4:	005b2800 	subseq	r2, fp, r0, lsl #16
    65d8:	005b2a08 	subseq	r2, fp, r8, lsl #20
    65dc:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    65e8:	08005a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, ip, lr}
    65ec:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    65f0:	9f320002 	svcls	0x00320002
    65f4:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    65f8:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
    65fc:	9f320002 	svcls	0x00320002
	...
    6608:	08005a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, ip, lr}
    660c:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    6610:	9f310002 	svcls	0x00310002
    6614:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    6618:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
    661c:	9f310002 	svcls	0x00310002
	...
    6628:	08005a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, ip, lr}
    662c:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    6630:	ee560001 	cdp	0, 5, cr0, cr6, cr1, {0}
    6634:	0808005b 	stmdaeq	r8, {r0, r1, r3, r4, r6}
    6638:	0108005c 	qaddeq	r0, ip, r8
    663c:	00005600 	andeq	r5, r0, r0, lsl #12
    6640:	00000000 	andeq	r0, r0, r0
    6644:	5a560000 	bpl	158664c <_Min_Stack_Size+0x158624c>
    6648:	5a8c0800 	bpl	fe308650 <_estack+0xde2d8650>
    664c:	00010800 	andeq	r0, r1, r0, lsl #16
    6650:	005bee57 	subseq	lr, fp, r7, asr lr
    6654:	005c0808 	subseq	r0, ip, r8, lsl #16
    6658:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    6664:	08005a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, ip, lr}
    6668:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    666c:	ee540001 	cdp	0, 5, cr0, cr4, cr1, {0}
    6670:	0808005b 	stmdaeq	r8, {r0, r1, r3, r4, r6}
    6674:	0108005c 	qaddeq	r0, ip, r8
    6678:	00005400 	andeq	r5, r0, r0, lsl #8
    667c:	00000000 	andeq	r0, r0, r0
    6680:	5b520000 	blpl	1486688 <_Min_Stack_Size+0x1486288>
    6684:	5b900800 	blpl	fe40868c <_estack+0xde3d868c>
    6688:	00030800 	andeq	r0, r3, r0, lsl #16
    668c:	089f8008 	ldmeq	pc, {r3, pc}	; <UNPREDICTABLE>
    6690:	2008005c 	andcs	r0, r8, ip, asr r0
    6694:	0308005c 	movweq	r0, #32860	; 0x805c
    6698:	9f800800 	svcls	0x00800800
	...
    66a4:	08005b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp, ip, lr}
    66a8:	08005b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, lr}
    66ac:	9f300002 	svcls	0x00300002
    66b0:	08005c08 	stmdaeq	r0, {r3, sl, fp, ip, lr}
    66b4:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
    66b8:	9f300002 	svcls	0x00300002
	...
    66c4:	08005b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp, ip, lr}
    66c8:	08005b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, lr}
    66cc:	08560001 	ldmdaeq	r6, {r0}^
    66d0:	2008005c 	andcs	r0, r8, ip, asr r0
    66d4:	0108005c 	qaddeq	r0, ip, r8
    66d8:	00005600 	andeq	r5, r0, r0, lsl #12
    66dc:	00000000 	andeq	r0, r0, r0
    66e0:	5b520000 	blpl	14866e8 <_Min_Stack_Size+0x14862e8>
    66e4:	5b900800 	blpl	fe4086ec <_estack+0xde3d86ec>
    66e8:	00010800 	andeq	r0, r1, r0, lsl #16
    66ec:	005c0857 	subseq	r0, ip, r7, asr r8
    66f0:	005c2008 	subseq	r2, ip, r8
    66f4:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    6700:	08005b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp, ip, lr}
    6704:	08005b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, lr}
    6708:	08540001 	ldmdaeq	r4, {r0}^
    670c:	2008005c 	andcs	r0, r8, ip, asr r0
    6710:	0108005c 	qaddeq	r0, ip, r8
    6714:	00005400 	andeq	r5, r0, r0, lsl #8
    6718:	00000000 	andeq	r0, r0, r0
    671c:	5bb40000 	blpl	fed06724 <_estack+0xdecd6724>
    6720:	5bee0800 	blpl	ffb88728 <_estack+0xdfb58728>
    6724:	00020800 	andeq	r0, r2, r0, lsl #16
    6728:	5c209f31 	stcpl	15, cr9, [r0], #-196	; 0xffffff3c
    672c:	5c380800 	ldcpl	8, cr0, [r8], #-0
    6730:	00020800 	andeq	r0, r2, r0, lsl #16
    6734:	00009f31 	andeq	r9, r0, r1, lsr pc
    6738:	00000000 	andeq	r0, r0, r0
    673c:	5bb40000 	blpl	fed06744 <_estack+0xdecd6744>
    6740:	5bee0800 	blpl	ffb88748 <_estack+0xdfb58748>
    6744:	00010800 	andeq	r0, r1, r0, lsl #16
    6748:	005c2056 	subseq	r2, ip, r6, asr r0
    674c:	005c3808 	subseq	r3, ip, r8, lsl #16
    6750:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    675c:	08005bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, lr}
    6760:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    6764:	20570001 	subscs	r0, r7, r1
    6768:	3808005c 	stmdacc	r8, {r2, r3, r4, r6}
    676c:	0108005c 	qaddeq	r0, ip, r8
    6770:	00005700 	andeq	r5, r0, r0, lsl #14
    6774:	00000000 	andeq	r0, r0, r0
    6778:	5bb40000 	blpl	fed06780 <_estack+0xdecd6780>
    677c:	5bee0800 	blpl	ffb88784 <_estack+0xdfb58784>
    6780:	00010800 	andeq	r0, r1, r0, lsl #16
    6784:	005c2054 	subseq	r2, ip, r4, asr r0
    6788:	005c3808 	subseq	r3, ip, r8, lsl #16
    678c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    6798:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
    679c:	08005c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip, lr}
    67a0:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    67a4:	6408005c 	strvs	r0, [r8], #-92	; 0xffffffa4
    67a8:	0108005c 	qaddeq	r0, ip, r8
    67ac:	5c645400 	cfstrdpl	mvd5, [r4], #-0
    67b0:	5c6d0800 	stclpl	8, cr0, [sp], #-0
    67b4:	00010800 	andeq	r0, r1, r0, lsl #16
    67b8:	005c6d50 	subseq	r6, ip, r0, asr sp
    67bc:	005c8e08 	subseq	r8, ip, r8, lsl #28
    67c0:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    67c4:	08005c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, lr}
    67c8:	08005ca3 	stmdaeq	r0, {r0, r1, r5, r7, sl, fp, ip, lr}
    67cc:	a3500001 	cmpge	r0, #1
    67d0:	8a08005c 	bhi	206948 <_Min_Stack_Size+0x206548>
    67d4:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    67d8:	00005400 	andeq	r5, r0, r0, lsl #8
    67dc:	00000000 	andeq	r0, r0, r0
    67e0:	5c380000 	ldcpl	0, cr0, [r8], #-0
    67e4:	5c580800 	mrrcpl	8, 0, r0, r8, cr0
    67e8:	00010800 	andeq	r0, r1, r0, lsl #16
    67ec:	005c5851 	subseq	r5, ip, r1, asr r8
    67f0:	005c7c08 	subseq	r7, ip, r8, lsl #24
    67f4:	56000108 	strpl	r0, [r0], -r8, lsl #2
    67f8:	08005c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, lr}
    67fc:	08005ca3 	stmdaeq	r0, {r0, r1, r5, r7, sl, fp, ip, lr}
    6800:	a3510001 	cmpge	r1, #1
    6804:	2c08005c 	stccs	0, cr0, [r8], {92}	; 0x5c
    6808:	0108005d 	qaddeq	r0, sp, r8
    680c:	5d545600 	ldclpl	6, cr5, [r4, #-0]
    6810:	5e3e0800 	cdppl	8, 3, cr0, cr14, cr0, {0}
    6814:	00010800 	andeq	r0, r1, r0, lsl #16
    6818:	005e7e56 	subseq	r7, lr, r6, asr lr
    681c:	005ea408 	subseq	sl, lr, r8, lsl #8
    6820:	56000108 	strpl	r0, [r0], -r8, lsl #2
    6824:	08005ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, ip, lr}
    6828:	08005ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
    682c:	f6560001 			; <UNDEFINED> instruction: 0xf6560001
    6830:	5c08005e 	stcpl	0, cr0, [r8], {94}	; 0x5e
    6834:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    6838:	00005600 	andeq	r5, r0, r0, lsl #12
    683c:	00000000 	andeq	r0, r0, r0
    6840:	5c380000 	ldcpl	0, cr0, [r8], #-0
    6844:	5c5e0800 	mrrcpl	8, 0, r0, lr, cr0
    6848:	00010800 	andeq	r0, r1, r0, lsl #16
    684c:	005c5e52 	subseq	r5, ip, r2, asr lr
    6850:	005c6408 	subseq	r6, ip, r8, lsl #8
    6854:	f3000408 	vshl.u8	d0, d8, d0
    6858:	649f5201 	ldrvs	r5, [pc], #513	; 6860 <_Min_Stack_Size+0x6460>
    685c:	6d08005c 	stcvs	0, cr0, [r8, #-368]	; 0xfffffe90
    6860:	0108005c 	qaddeq	r0, ip, r8
    6864:	5c6d5200 	sfmpl	f5, 2, [sp], #-0
    6868:	5c8e0800 	stcpl	8, cr0, [lr], {0}
    686c:	00040800 	andeq	r0, r4, r0, lsl #16
    6870:	9f5201f3 	svcls	0x005201f3
    6874:	08005c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, lr}
    6878:	08005c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, ip, lr}
    687c:	9a520001 	bls	1486888 <_Min_Stack_Size+0x1486488>
    6880:	8a08005c 	bhi	2069f8 <_Min_Stack_Size+0x2065f8>
    6884:	0408005f 	streq	r0, [r8], #-95	; 0xffffffa1
    6888:	5201f300 	andpl	pc, r1, #0, 6
    688c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6890:	00000000 	andeq	r0, r0, r0
    6894:	005c3800 	subseq	r3, ip, r0, lsl #16
    6898:	005c5408 	subseq	r5, ip, r8, lsl #8
    689c:	53000108 	movwpl	r0, #264	; 0x108
    68a0:	08005c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip, lr}
    68a4:	08005c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, lr}
    68a8:	8e570001 	cdphi	0, 5, cr0, cr7, cr1, {0}
    68ac:	9008005c 	andls	r0, r8, ip, asr r0
    68b0:	0108005c 	qaddeq	r0, ip, r8
    68b4:	5c905300 	ldcpl	3, cr5, [r0], {0}
    68b8:	5f8a0800 	svcpl	0x008a0800
    68bc:	00010800 	andeq	r0, r1, r0, lsl #16
    68c0:	00000057 	andeq	r0, r0, r7, asr r0
    68c4:	00000000 	andeq	r0, r0, r0
    68c8:	005c4e00 	subseq	r4, ip, r0, lsl #28
    68cc:	005c7008 	subseq	r7, ip, r8
    68d0:	30000208 	andcc	r0, r0, r8, lsl #4
    68d4:	005c709f 			; <UNDEFINED> instruction: 0x005c709f
    68d8:	005c7408 	subseq	r7, ip, r8, lsl #8
    68dc:	50000108 	andpl	r0, r0, r8, lsl #2
    68e0:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
    68e4:	08005c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, lr}
    68e8:	8e550001 	cdphi	0, 5, cr0, cr5, cr1, {0}
    68ec:	a608005c 			; <UNDEFINED> instruction: 0xa608005c
    68f0:	0208005c 	andeq	r0, r8, #92	; 0x5c
    68f4:	a69f3000 	ldrge	r3, [pc], r0
    68f8:	8a08005c 	bhi	206a70 <_Min_Stack_Size+0x206670>
    68fc:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    6900:	00005500 	andeq	r5, r0, r0, lsl #10
    6904:	00000000 	andeq	r0, r0, r0
    6908:	5c4e0000 	marpl	acc0, r0, lr
    690c:	5c7c0800 	ldclpl	8, cr0, [ip], #-0
    6910:	00020800 	andeq	r0, r2, r0, lsl #16
    6914:	5c7c9f30 	ldclpl	15, cr9, [ip], #-192	; 0xffffff40
    6918:	5c8e0800 	stcpl	8, cr0, [lr], {0}
    691c:	00010800 	andeq	r0, r1, r0, lsl #16
    6920:	005c8e50 	subseq	r8, ip, r0, asr lr
    6924:	005e7a08 	subseq	r7, lr, r8, lsl #20
    6928:	30000208 	andcc	r0, r0, r8, lsl #4
    692c:	005e7a9f 			; <UNDEFINED> instruction: 0x005e7a9f
    6930:	005e7e08 	subseq	r7, lr, r8, lsl #28
    6934:	33000208 	movwcc	r0, #520	; 0x208
    6938:	005e7e9f 			; <UNDEFINED> instruction: 0x005e7e9f
    693c:	005f8a08 	subseq	r8, pc, r8, lsl #20
    6940:	30000208 	andcc	r0, r0, r8, lsl #4
    6944:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6948:	00000000 	andeq	r0, r0, r0
    694c:	005e5200 	subseq	r5, lr, r0, lsl #4
    6950:	005e7a08 	subseq	r7, lr, r8, lsl #20
    6954:	31000208 	tstcc	r0, r8, lsl #4
    6958:	005f5c9f 			; <UNDEFINED> instruction: 0x005f5c9f
    695c:	005f8a08 	subseq	r8, pc, r8, lsl #20
    6960:	31000208 	tstcc	r0, r8, lsl #4
    6964:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6968:	00000000 	andeq	r0, r0, r0
    696c:	005e5200 	subseq	r5, lr, r0, lsl #4
    6970:	005e7a08 	subseq	r7, lr, r8, lsl #20
    6974:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    6978:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    697c:	08005f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, lr}
    6980:	00570001 	subseq	r0, r7, r1
    6984:	00000000 	andeq	r0, r0, r0
    6988:	52000000 	andpl	r0, r0, #0
    698c:	7a08005e 	bvc	206b0c <_Min_Stack_Size+0x20670c>
    6990:	0108005e 	qaddeq	r0, lr, r8
    6994:	5f5c5500 	svcpl	0x005c5500
    6998:	5f8a0800 	svcpl	0x008a0800
    699c:	00010800 	andeq	r0, r1, r0, lsl #16
    69a0:	00000055 	andeq	r0, r0, r5, asr r0
    69a4:	00000000 	andeq	r0, r0, r0
    69a8:	005e5200 	subseq	r5, lr, r0, lsl #4
    69ac:	005e7a08 	subseq	r7, lr, r8, lsl #20
    69b0:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    69b4:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    69b8:	08005f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, lr}
    69bc:	00540001 	subseq	r0, r4, r1
    69c0:	00000000 	andeq	r0, r0, r0
    69c4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    69c8:	7a08005e 	bvc	206b48 <_Min_Stack_Size+0x206748>
    69cc:	0108005e 	qaddeq	r0, lr, r8
    69d0:	5ec65500 	cdppl	5, 12, cr5, cr6, cr0, {0}
    69d4:	5f8a0800 	svcpl	0x008a0800
    69d8:	00010800 	andeq	r0, r1, r0, lsl #16
    69dc:	00000055 	andeq	r0, r0, r5, asr r0
    69e0:	00000000 	andeq	r0, r0, r0
    69e4:	005e3e00 	subseq	r3, lr, r0, lsl #28
    69e8:	005e7a08 	subseq	r7, lr, r8, lsl #20
    69ec:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    69f0:	08005ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, ip, lr}
    69f4:	08005f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, lr}
    69f8:	00570001 	subseq	r0, r7, r1
    69fc:	00000000 	andeq	r0, r0, r0
    6a00:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    6a04:	7a08005e 	bvc	206b84 <_Min_Stack_Size+0x206784>
    6a08:	0208005e 	andeq	r0, r8, #94	; 0x5e
    6a0c:	c69f3100 	ldrgt	r3, [pc], r0, lsl #2
    6a10:	8a08005e 	bhi	206b90 <_Min_Stack_Size+0x206790>
    6a14:	0208005f 	andeq	r0, r8, #95	; 0x5f
    6a18:	009f3100 	addseq	r3, pc, r0, lsl #2
    6a1c:	00000000 	andeq	r0, r0, r0
    6a20:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    6a24:	7a08005e 	bvc	206ba4 <_Min_Stack_Size+0x2067a4>
    6a28:	0108005e 	qaddeq	r0, lr, r8
    6a2c:	5ec65400 	cdppl	4, 12, cr5, cr6, cr0, {0}
    6a30:	5f8a0800 	svcpl	0x008a0800
    6a34:	00010800 	andeq	r0, r1, r0, lsl #16
    6a38:	00000054 	andeq	r0, r0, r4, asr r0
    6a3c:	00000000 	andeq	r0, r0, r0
    6a40:	005f0a00 	subseq	r0, pc, r0, lsl #20
    6a44:	005f3e08 	subseq	r3, pc, r8, lsl #28
    6a48:	31000208 	tstcc	r0, r8, lsl #4
    6a4c:	005f449f 			; <UNDEFINED> instruction: 0x005f449f
    6a50:	005f5c08 	subseq	r5, pc, r8, lsl #24
    6a54:	31000208 	tstcc	r0, r8, lsl #4
    6a58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6a5c:	00000000 	andeq	r0, r0, r0
    6a60:	005f0a00 	subseq	r0, pc, r0, lsl #20
    6a64:	005f3e08 	subseq	r3, pc, r8, lsl #28
    6a68:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    6a6c:	08005f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, lr}
    6a70:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    6a74:	00570001 	subseq	r0, r7, r1
    6a78:	00000000 	andeq	r0, r0, r0
    6a7c:	0a000000 	beq	6a84 <_Min_Stack_Size+0x6684>
    6a80:	3e08005f 	mcrcc	0, 0, r0, cr8, cr15, {2}
    6a84:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    6a88:	5f445500 	svcpl	0x00445500
    6a8c:	5f5c0800 	svcpl	0x005c0800
    6a90:	00010800 	andeq	r0, r1, r0, lsl #16
    6a94:	00000055 	andeq	r0, r0, r5, asr r0
    6a98:	00000000 	andeq	r0, r0, r0
    6a9c:	005f0a00 	subseq	r0, pc, r0, lsl #20
    6aa0:	005f3e08 	subseq	r3, pc, r8, lsl #28
    6aa4:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    6aa8:	08005f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, lr}
    6aac:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    6ab0:	00540001 	subseq	r0, r4, r1
    6ab4:	00000000 	andeq	r0, r0, r0
    6ab8:	8c000000 	stchi	0, cr0, [r0], {-0}
    6abc:	ac08005f 	stcge	0, cr0, [r8], {95}	; 0x5f
    6ac0:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    6ac4:	5fac5000 	svcpl	0x00ac5000
    6ac8:	5fb60800 	svcpl	0x00b60800
    6acc:	00010800 	andeq	r0, r1, r0, lsl #16
    6ad0:	005fb654 	subseq	fp, pc, r4, asr r6	; <UNPREDICTABLE>
    6ad4:	005fb808 	subseq	fp, pc, r8, lsl #16
    6ad8:	f3000408 	vshl.u8	d0, d8, d0
    6adc:	b89f5001 	ldmlt	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    6ae0:	ba08005f 	blt	206c64 <_Min_Stack_Size+0x206864>
    6ae4:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    6ae8:	5fba5000 	svcpl	0x00ba5000
    6aec:	5fbc0800 	svcpl	0x00bc0800
    6af0:	00010800 	andeq	r0, r1, r0, lsl #16
    6af4:	005fbc54 	subseq	fp, pc, r4, asr ip	; <UNPREDICTABLE>
    6af8:	005fbe08 	subseq	fp, pc, r8, lsl #28
    6afc:	f3000408 	vshl.u8	d0, d8, d0
    6b00:	be9f5001 	cdplt	0, 9, cr5, cr15, cr1, {0}
    6b04:	c008005f 	andgt	r0, r8, pc, asr r0
    6b08:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    6b0c:	5fc05000 	svcpl	0x00c05000
    6b10:	60540800 	subsvs	r0, r4, r0, lsl #16
    6b14:	00010800 	andeq	r0, r1, r0, lsl #16
    6b18:	00000054 	andeq	r0, r0, r4, asr r0
    6b1c:	00000000 	andeq	r0, r0, r0
    6b20:	005f8c00 	subseq	r8, pc, r0, lsl #24
    6b24:	005fac08 	subseq	sl, pc, r8, lsl #24
    6b28:	51000108 	tstpl	r0, r8, lsl #2
    6b2c:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    6b30:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    6b34:	01f30004 	mvnseq	r0, r4
    6b38:	5fb89f51 	svcpl	0x00b89f51
    6b3c:	5fc80800 	svcpl	0x00c80800
    6b40:	00010800 	andeq	r0, r1, r0, lsl #16
    6b44:	005fc851 	subseq	ip, pc, r1, asr r8	; <UNPREDICTABLE>
    6b48:	00605408 	rsbeq	r5, r0, r8, lsl #8
    6b4c:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    6b50:	00000030 	andeq	r0, r0, r0, lsr r0
    6b54:	00000000 	andeq	r0, r0, r0
    6b58:	005f8c00 	subseq	r8, pc, r0, lsl #24
    6b5c:	005fac08 	subseq	sl, pc, r8, lsl #24
    6b60:	52000108 	andpl	r0, r0, #8, 2
    6b64:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    6b68:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    6b6c:	01f30004 	mvnseq	r0, r4
    6b70:	5fb89f52 	svcpl	0x00b89f52
    6b74:	5ff20800 	svcpl	0x00f20800
    6b78:	00010800 	andeq	r0, r1, r0, lsl #16
    6b7c:	005ff252 	subseq	pc, pc, r2, asr r2	; <UNPREDICTABLE>
    6b80:	00601e08 	rsbeq	r1, r0, r8, lsl #28
    6b84:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    6b88:	00601e34 	rsbeq	r1, r0, r4, lsr lr
    6b8c:	00602008 	rsbeq	r2, r0, r8
    6b90:	52000108 	andpl	r0, r0, #8, 2
    6b94:	08006020 	stmdaeq	r0, {r5, sp, lr}
    6b98:	08006054 	stmdaeq	r0, {r2, r4, r6, sp, lr}
    6b9c:	34740002 	ldrbtcc	r0, [r4], #-2
	...
    6ba8:	08005f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
    6bac:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    6bb0:	9f300002 	svcls	0x00300002
    6bb4:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    6bb8:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    6bbc:	b8530001 	ldmdalt	r3, {r0}^
    6bc0:	5408005f 	strpl	r0, [r8], #-95	; 0xffffffa1
    6bc4:	02080060 	andeq	r0, r8, #96	; 0x60
    6bc8:	009f3000 	addseq	r3, pc, r0
    6bcc:	00000000 	andeq	r0, r0, r0
    6bd0:	54000000 	strpl	r0, [r0], #-0
    6bd4:	5e080060 	cdppl	0, 0, cr0, cr8, cr0, {3}
    6bd8:	01080060 	tsteq	r8, r0, rrx
    6bdc:	605e5000 	subsvs	r5, lr, r0
    6be0:	61c00800 	bicvs	r0, r0, r0, lsl #16
    6be4:	00010800 	andeq	r0, r1, r0, lsl #16
    6be8:	00000053 	andeq	r0, r0, r3, asr r0
    6bec:	00000000 	andeq	r0, r0, r0
    6bf0:	00605400 	rsbeq	r5, r0, r0, lsl #8
    6bf4:	00607e08 	rsbeq	r7, r0, r8, lsl #28
    6bf8:	51000108 	tstpl	r0, r8, lsl #2
    6bfc:	0800607e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sp, lr}
    6c00:	08006088 	stmdaeq	r0, {r3, r7, sp, lr}
    6c04:	01f30004 	mvnseq	r0, r4
    6c08:	60889f51 	addvs	r9, r8, r1, asr pc
    6c0c:	60f80800 	rscsvs	r0, r8, r0, lsl #16
    6c10:	00010800 	andeq	r0, r1, r0, lsl #16
    6c14:	0060f851 	rsbeq	pc, r0, r1, asr r8	; <UNPREDICTABLE>
    6c18:	00611408 	rsbeq	r1, r1, r8, lsl #8
    6c1c:	73000208 	movwvc	r0, #520	; 0x208
    6c20:	00611430 	rsbeq	r1, r1, r0, lsr r4
    6c24:	00612808 	rsbeq	r2, r1, r8, lsl #16
    6c28:	51000108 	tstpl	r0, r8, lsl #2
    6c2c:	08006128 	stmdaeq	r0, {r3, r5, r8, sp, lr}
    6c30:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    6c34:	38730002 	ldmdacc	r3!, {r1}^
    6c38:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    6c3c:	0800617c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp, lr}
    6c40:	01f30004 	mvnseq	r0, r4
    6c44:	617c9f51 	cmnvs	ip, r1, asr pc
    6c48:	61900800 	orrsvs	r0, r0, r0, lsl #16
    6c4c:	00020800 	andeq	r0, r2, r0, lsl #16
    6c50:	61903873 	orrsvs	r3, r0, r3, ror r8
    6c54:	61940800 	orrsvs	r0, r4, r0, lsl #16
    6c58:	00010800 	andeq	r0, r1, r0, lsl #16
    6c5c:	00619451 	rsbeq	r9, r1, r1, asr r4
    6c60:	0061c008 	rsbeq	ip, r1, r8
    6c64:	73000208 	movwvc	r0, #520	; 0x208
    6c68:	00000030 	andeq	r0, r0, r0, lsr r0
    6c6c:	00000000 	andeq	r0, r0, r0
    6c70:	00605400 	rsbeq	r5, r0, r0, lsl #8
    6c74:	00607e08 	rsbeq	r7, r0, r8, lsl #28
    6c78:	52000108 	andpl	r0, r0, #8, 2
    6c7c:	0800607e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sp, lr}
    6c80:	08006088 	stmdaeq	r0, {r3, r7, sp, lr}
    6c84:	01f30004 	mvnseq	r0, r4
    6c88:	60889f52 	addvs	r9, r8, r2, asr pc
    6c8c:	60e40800 	rscvs	r0, r4, r0, lsl #16
    6c90:	00010800 	andeq	r0, r1, r0, lsl #16
    6c94:	0060e452 	rsbeq	lr, r0, r2, asr r4
    6c98:	00611408 	rsbeq	r1, r1, r8, lsl #8
    6c9c:	73000208 	movwvc	r0, #520	; 0x208
    6ca0:	00611434 	rsbeq	r1, r1, r4, lsr r4
    6ca4:	00613408 	rsbeq	r3, r1, r8, lsl #8
    6ca8:	52000108 	andpl	r0, r0, #8, 2
    6cac:	08006134 	stmdaeq	r0, {r2, r4, r5, r8, sp, lr}
    6cb0:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    6cb4:	3c730002 	ldclcc	0, cr0, [r3], #-8
    6cb8:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    6cbc:	0800617c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp, lr}
    6cc0:	01f30004 	mvnseq	r0, r4
    6cc4:	617c9f52 	cmnvs	ip, r2, asr pc
    6cc8:	61900800 	orrsvs	r0, r0, r0, lsl #16
    6ccc:	00020800 	andeq	r0, r2, r0, lsl #16
    6cd0:	61903c73 	orrsvs	r3, r0, r3, ror ip
    6cd4:	61940800 	orrsvs	r0, r4, r0, lsl #16
    6cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    6cdc:	00619452 	rsbeq	r9, r1, r2, asr r4
    6ce0:	0061c008 	rsbeq	ip, r1, r8
    6ce4:	73000208 	movwvc	r0, #520	; 0x208
    6ce8:	00000034 	andeq	r0, r0, r4, lsr r0
    6cec:	00000000 	andeq	r0, r0, r0
    6cf0:	00605400 	rsbeq	r5, r0, r0, lsl #8
    6cf4:	00607e08 	rsbeq	r7, r0, r8, lsl #28
    6cf8:	30000208 	andcc	r0, r0, r8, lsl #4
    6cfc:	00607e9f 	mlseq	r0, pc, lr, r7	; <UNPREDICTABLE>
    6d00:	00608808 	rsbeq	r8, r0, r8, lsl #16
    6d04:	50000108 	andpl	r0, r0, r8, lsl #2
    6d08:	08006088 	stmdaeq	r0, {r3, r7, sp, lr}
    6d0c:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    6d10:	9f300002 	svcls	0x00300002
	...
    6d1c:	0800609a 	stmdaeq	r0, {r1, r3, r4, r7, sp, lr}
    6d20:	080060e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, lr}
    6d24:	e4520001 	ldrb	r0, [r2], #-1
    6d28:	14080060 	strne	r0, [r8], #-96	; 0xffffffa0
    6d2c:	02080061 	andeq	r0, r8, #97	; 0x61
    6d30:	90347300 	eorsls	r7, r4, r0, lsl #6
    6d34:	94080061 	strls	r0, [r8], #-97	; 0xffffff9f
    6d38:	01080061 	tsteq	r8, r1, rrx
    6d3c:	61945200 	orrsvs	r5, r4, r0, lsl #4
    6d40:	61c00800 	bicvs	r0, r0, r0, lsl #16
    6d44:	00020800 	andeq	r0, r2, r0, lsl #16
    6d48:	00003473 	andeq	r3, r0, r3, ror r4
    6d4c:	00000000 	andeq	r0, r0, r0
    6d50:	609a0000 	addsvs	r0, sl, r0
    6d54:	60f80800 	rscsvs	r0, r8, r0, lsl #16
    6d58:	00010800 	andeq	r0, r1, r0, lsl #16
    6d5c:	0060f851 	rsbeq	pc, r0, r1, asr r8	; <UNPREDICTABLE>
    6d60:	00611408 	rsbeq	r1, r1, r8, lsl #8
    6d64:	73000208 	movwvc	r0, #520	; 0x208
    6d68:	00619030 	rsbeq	r9, r1, r0, lsr r0
    6d6c:	00619408 	rsbeq	r9, r1, r8, lsl #8
    6d70:	51000108 	tstpl	r0, r8, lsl #2
    6d74:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    6d78:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    6d7c:	30730002 	rsbscc	r0, r3, r2
	...
    6d88:	0800609a 	stmdaeq	r0, {r1, r3, r4, r7, sp, lr}
    6d8c:	08006114 	stmdaeq	r0, {r2, r4, r8, sp, lr}
    6d90:	90530001 	subsls	r0, r3, r1
    6d94:	c0080061 	andgt	r0, r8, r1, rrx
    6d98:	01080061 	tsteq	r8, r1, rrx
    6d9c:	00005300 	andeq	r5, r0, r0, lsl #6
    6da0:	00000000 	andeq	r0, r0, r0
    6da4:	609a0000 	addsvs	r0, sl, r0
    6da8:	61140800 	tstvs	r4, r0, lsl #16
    6dac:	00020800 	andeq	r0, r2, r0, lsl #16
    6db0:	61909f30 	orrsvs	r9, r0, r0, lsr pc
    6db4:	61c00800 	bicvs	r0, r0, r0, lsl #16
    6db8:	00020800 	andeq	r0, r2, r0, lsl #16
    6dbc:	00009f30 	andeq	r9, r0, r0, lsr pc
    6dc0:	00000000 	andeq	r0, r0, r0
    6dc4:	609c0000 	addsvs	r0, ip, r0
    6dc8:	60e40800 	rscvs	r0, r4, r0, lsl #16
    6dcc:	00010800 	andeq	r0, r1, r0, lsl #16
    6dd0:	0060e452 	rsbeq	lr, r0, r2, asr r4
    6dd4:	00611408 	rsbeq	r1, r1, r8, lsl #8
    6dd8:	73000208 	movwvc	r0, #520	; 0x208
    6ddc:	00619034 	rsbeq	r9, r1, r4, lsr r0
    6de0:	00619408 	rsbeq	r9, r1, r8, lsl #8
    6de4:	52000108 	andpl	r0, r0, #8, 2
    6de8:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    6dec:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    6df0:	34730002 	ldrbtcc	r0, [r3], #-2
	...
    6dfc:	0800609c 	stmdaeq	r0, {r2, r3, r4, r7, sp, lr}
    6e00:	080060f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp, lr}
    6e04:	f8510001 			; <UNDEFINED> instruction: 0xf8510001
    6e08:	14080060 	strne	r0, [r8], #-96	; 0xffffffa0
    6e0c:	02080061 	andeq	r0, r8, #97	; 0x61
    6e10:	90307300 	eorsls	r7, r0, r0, lsl #6
    6e14:	94080061 	strls	r0, [r8], #-97	; 0xffffff9f
    6e18:	01080061 	tsteq	r8, r1, rrx
    6e1c:	61945100 	orrsvs	r5, r4, r0, lsl #2
    6e20:	61c00800 	bicvs	r0, r0, r0, lsl #16
    6e24:	00020800 	andeq	r0, r2, r0, lsl #16
    6e28:	00003073 	andeq	r3, r0, r3, ror r0
    6e2c:	00000000 	andeq	r0, r0, r0
    6e30:	609c0000 	addsvs	r0, ip, r0
    6e34:	61140800 	tstvs	r4, r0, lsl #16
    6e38:	00010800 	andeq	r0, r1, r0, lsl #16
    6e3c:	00619053 	rsbeq	r9, r1, r3, asr r0
    6e40:	0061c008 	rsbeq	ip, r1, r8
    6e44:	53000108 	movwpl	r0, #264	; 0x108
	...
    6e50:	080060a4 	stmdaeq	r0, {r2, r5, r7, sp, lr}
    6e54:	080060bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, lr}
    6e58:	90500001 	subsls	r0, r0, r1
    6e5c:	92080061 	andls	r0, r8, #97	; 0x61
    6e60:	01080061 	tsteq	r8, r1, rrx
    6e64:	00005000 	andeq	r5, r0, r0
    6e68:	00000000 	andeq	r0, r0, r0
    6e6c:	60a40000 	adcvs	r0, r4, r0
    6e70:	61140800 	tstvs	r4, r0, lsl #16
    6e74:	00040800 	andeq	r0, r4, r0, lsl #16
    6e78:	9f01040a 	svcls	0x0001040a
    6e7c:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
    6e80:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    6e84:	040a0004 	streq	r0, [sl], #-4
    6e88:	00009f01 	andeq	r9, r0, r1, lsl #30
    6e8c:	00000000 	andeq	r0, r0, r0
    6e90:	61920000 	orrsvs	r0, r2, r0
    6e94:	61940800 	orrsvs	r0, r4, r0, lsl #16
    6e98:	00010800 	andeq	r0, r1, r0, lsl #16
    6e9c:	00000050 	andeq	r0, r0, r0, asr r0
    6ea0:	00000000 	andeq	r0, r0, r0
    6ea4:	0061c000 	rsbeq	ip, r1, r0
    6ea8:	0061c808 	rsbeq	ip, r1, r8, lsl #16
    6eac:	50000108 	andpl	r0, r0, r8, lsl #2
    6eb0:	080061c8 	stmdaeq	r0, {r3, r6, r7, r8, sp, lr}
    6eb4:	080061ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sp, lr}
    6eb8:	ee540001 	cdp	0, 5, cr0, cr4, cr1, {0}
    6ebc:	f0080061 			; <UNDEFINED> instruction: 0xf0080061
    6ec0:	04080061 	streq	r0, [r8], #-97	; 0xffffff9f
    6ec4:	5001f300 	andpl	pc, r1, r0, lsl #6
    6ec8:	0061f09f 	mlseq	r1, pc, r0, pc	; <UNPREDICTABLE>
    6ecc:	0061f408 	rsbeq	pc, r1, r8, lsl #8
    6ed0:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    6ed4:	080061f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sp, lr}
    6ed8:	080061f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sp, lr}
    6edc:	01f30004 	mvnseq	r0, r4
    6ee0:	61f69f50 	mvnsvs	r9, r0, asr pc
    6ee4:	62980800 	addsvs	r0, r8, #0, 16
    6ee8:	00010800 	andeq	r0, r1, r0, lsl #16
    6eec:	00000054 	andeq	r0, r0, r4, asr r0
    6ef0:	00000000 	andeq	r0, r0, r0
    6ef4:	0061c000 	rsbeq	ip, r1, r0
    6ef8:	0061e608 	rsbeq	lr, r1, r8, lsl #12
    6efc:	51000108 	tstpl	r0, r8, lsl #2
    6f00:	080061e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sp, lr}
    6f04:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    6f08:	01f30004 	mvnseq	r0, r4
    6f0c:	61f09f51 	mvnsvs	r9, r1, asr pc
    6f10:	62160800 	andsvs	r0, r6, #0, 16
    6f14:	00010800 	andeq	r0, r1, r0, lsl #16
    6f18:	00621651 	rsbeq	r1, r2, r1, asr r6
    6f1c:	00626a08 	rsbeq	r6, r2, r8, lsl #20
    6f20:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    6f24:	00626a30 	rsbeq	r6, r2, r0, lsr sl
    6f28:	00626e08 	rsbeq	r6, r2, r8, lsl #28
    6f2c:	51000108 	tstpl	r0, r8, lsl #2
    6f30:	0800626e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sp, lr}
    6f34:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    6f38:	30740002 	rsbscc	r0, r4, r2
	...
    6f44:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    6f48:	080061e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sp, lr}
    6f4c:	e6520001 	ldrb	r0, [r2], -r1
    6f50:	f0080061 			; <UNDEFINED> instruction: 0xf0080061
    6f54:	04080061 	streq	r0, [r8], #-97	; 0xffffff9f
    6f58:	5201f300 	andpl	pc, r1, #0, 6
    6f5c:	0061f09f 	mlseq	r1, pc, r0, pc	; <UNPREDICTABLE>
    6f60:	00625008 	rsbeq	r5, r2, r8
    6f64:	52000108 	andpl	r0, r0, #8, 2
    6f68:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
    6f6c:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    6f70:	38740002 	ldmdacc	r4!, {r1}^
    6f74:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    6f78:	0800626e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sp, lr}
    6f7c:	6e520001 	cdpvs	0, 5, cr0, cr2, cr1, {0}
    6f80:	72080062 	andvc	r0, r8, #98	; 0x62
    6f84:	02080062 	andeq	r0, r8, #98	; 0x62
    6f88:	72387400 	eorsvc	r7, r8, #0, 8
    6f8c:	78080062 	stmdavc	r8, {r1, r5, r6}
    6f90:	01080062 	tsteq	r8, r2, rrx
    6f94:	62785200 	rsbsvs	r5, r8, #0, 4
    6f98:	62980800 	addsvs	r0, r8, #0, 16
    6f9c:	00020800 	andeq	r0, r2, r0, lsl #16
    6fa0:	00003874 	andeq	r3, r0, r4, ror r8
    6fa4:	00000000 	andeq	r0, r0, r0
    6fa8:	61c00000 	bicvs	r0, r0, r0
    6fac:	61e60800 	mvnvs	r0, r0, lsl #16
    6fb0:	00010800 	andeq	r0, r1, r0, lsl #16
    6fb4:	0061e653 	rsbeq	lr, r1, r3, asr r6
    6fb8:	0061f008 	rsbeq	pc, r1, r8
    6fbc:	f3000408 	vshl.u8	d0, d8, d0
    6fc0:	f09f5301 			; <UNDEFINED> instruction: 0xf09f5301
    6fc4:	3a080061 	bcc	207150 <_Min_Stack_Size+0x206d50>
    6fc8:	01080062 	tsteq	r8, r2, rrx
    6fcc:	623a5300 	eorsvs	r5, sl, #0, 6
    6fd0:	626a0800 	rsbvs	r0, sl, #0, 16
    6fd4:	00020800 	andeq	r0, r2, r0, lsl #16
    6fd8:	626a3474 	rsbvs	r3, sl, #116, 8	; 0x74000000
    6fdc:	626e0800 	rsbvs	r0, lr, #0, 16
    6fe0:	00010800 	andeq	r0, r1, r0, lsl #16
    6fe4:	00626e53 	rsbeq	r6, r2, r3, asr lr
    6fe8:	00629808 	rsbeq	r9, r2, r8, lsl #16
    6fec:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    6ff0:	00000034 	andeq	r0, r0, r4, lsr r0
    6ff4:	00000000 	andeq	r0, r0, r0
    6ff8:	0061cc00 	rsbeq	ip, r1, r0, lsl #24
    6ffc:	0061e608 	rsbeq	lr, r1, r8, lsl #12
    7000:	53000108 	movwpl	r0, #264	; 0x108
    7004:	080061e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sp, lr}
    7008:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    700c:	01f30004 	mvnseq	r0, r4
    7010:	61f69f53 	mvnsvs	r9, r3, asr pc
    7014:	623a0800 	eorsvs	r0, sl, #0, 16
    7018:	00010800 	andeq	r0, r1, r0, lsl #16
    701c:	00623a53 	rsbeq	r3, r2, r3, asr sl
    7020:	00626a08 	rsbeq	r6, r2, r8, lsl #20
    7024:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    7028:	00626a34 	rsbeq	r6, r2, r4, lsr sl
    702c:	00626e08 	rsbeq	r6, r2, r8, lsl #28
    7030:	53000108 	movwpl	r0, #264	; 0x108
    7034:	0800626e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sp, lr}
    7038:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    703c:	34740002 	ldrbtcc	r0, [r4], #-2
	...
    7048:	080061cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp, lr}
    704c:	080061e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sp, lr}
    7050:	e6520001 	ldrb	r0, [r2], -r1
    7054:	f0080061 			; <UNDEFINED> instruction: 0xf0080061
    7058:	04080061 	streq	r0, [r8], #-97	; 0xffffff9f
    705c:	5201f300 	andpl	pc, r1, #0, 6
    7060:	0061f69f 	mlseq	r1, pc, r6, pc	; <UNPREDICTABLE>
    7064:	00625008 	rsbeq	r5, r2, r8
    7068:	52000108 	andpl	r0, r0, #8, 2
    706c:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
    7070:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    7074:	38740002 	ldmdacc	r4!, {r1}^
    7078:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    707c:	0800626e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sp, lr}
    7080:	6e520001 	cdpvs	0, 5, cr0, cr2, cr1, {0}
    7084:	72080062 	andvc	r0, r8, #98	; 0x62
    7088:	02080062 	andeq	r0, r8, #98	; 0x62
    708c:	72387400 	eorsvc	r7, r8, #0, 8
    7090:	78080062 	stmdavc	r8, {r1, r5, r6}
    7094:	01080062 	tsteq	r8, r2, rrx
    7098:	62785200 	rsbsvs	r5, r8, #0, 4
    709c:	62980800 	addsvs	r0, r8, #0, 16
    70a0:	00020800 	andeq	r0, r2, r0, lsl #16
    70a4:	00003874 	andeq	r3, r0, r4, ror r8
    70a8:	00000000 	andeq	r0, r0, r0
    70ac:	61cc0000 	bicvs	r0, ip, r0
    70b0:	61e60800 	mvnvs	r0, r0, lsl #16
    70b4:	00010800 	andeq	r0, r1, r0, lsl #16
    70b8:	0061e651 	rsbeq	lr, r1, r1, asr r6
    70bc:	0061f008 	rsbeq	pc, r1, r8
    70c0:	f3000408 	vshl.u8	d0, d8, d0
    70c4:	f69f5101 			; <UNDEFINED> instruction: 0xf69f5101
    70c8:	16080061 	strne	r0, [r8], -r1, rrx
    70cc:	01080062 	tsteq	r8, r2, rrx
    70d0:	62165100 	andsvs	r5, r6, #0, 2
    70d4:	626a0800 	rsbvs	r0, sl, #0, 16
    70d8:	00020800 	andeq	r0, r2, r0, lsl #16
    70dc:	626a3074 	rsbvs	r3, sl, #116	; 0x74
    70e0:	626e0800 	rsbvs	r0, lr, #0, 16
    70e4:	00010800 	andeq	r0, r1, r0, lsl #16
    70e8:	00626e51 	rsbeq	r6, r2, r1, asr lr
    70ec:	00629808 	rsbeq	r9, r2, r8, lsl #16
    70f0:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    70f4:	00000030 	andeq	r0, r0, r0, lsr r0
    70f8:	00000000 	andeq	r0, r0, r0
    70fc:	0061cc00 	rsbeq	ip, r1, r0, lsl #24
    7100:	0061ee08 	rsbeq	lr, r1, r8, lsl #28
    7104:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    7108:	080061ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sp, lr}
    710c:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    7110:	01f30004 	mvnseq	r0, r4
    7114:	61f69f50 	mvnsvs	r9, r0, asr pc
    7118:	62980800 	addsvs	r0, r8, #0, 16
    711c:	00010800 	andeq	r0, r1, r0, lsl #16
    7120:	00000054 	andeq	r0, r0, r4, asr r0
    7124:	00000000 	andeq	r0, r0, r0
    7128:	0061d600 	rsbeq	sp, r1, r0, lsl #12
    712c:	0061e608 	rsbeq	lr, r1, r8, lsl #12
    7130:	50000108 	andpl	r0, r0, r8, lsl #2
    7134:	080061f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sp, lr}
    7138:	08006210 	stmdaeq	r0, {r4, r9, sp, lr}
    713c:	6a500001 	bvs	1407148 <_Min_Stack_Size+0x1406d48>
    7140:	6c080062 	stcvs	0, cr0, [r8], {98}	; 0x62
    7144:	01080062 	tsteq	r8, r2, rrx
    7148:	00005000 	andeq	r5, r0, r0
    714c:	00000000 	andeq	r0, r0, r0
    7150:	61d60000 	bicsvs	r0, r6, r0
    7154:	61e60800 	mvnvs	r0, r0, lsl #16
    7158:	00010800 	andeq	r0, r1, r0, lsl #16
    715c:	0061e656 	rsbeq	lr, r1, r6, asr r6
    7160:	0061ee08 	rsbeq	lr, r1, r8, lsl #28
    7164:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    7168:	0061ee04 	rsbeq	lr, r1, r4, lsl #28
    716c:	0061f008 	rsbeq	pc, r1, r8
    7170:	f3000508 	vrshl.u8	d0, d8, d0
    7174:	04235001 	strteq	r5, [r3], #-1
    7178:	080061f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sp, lr}
    717c:	0800621a 	stmdaeq	r0, {r1, r3, r4, r9, sp, lr}
    7180:	1a560001 	bne	158718c <_Min_Stack_Size+0x1586d8c>
    7184:	6a080062 	bvs	207314 <_Min_Stack_Size+0x206f14>
    7188:	02080062 	andeq	r0, r8, #98	; 0x62
    718c:	6a047400 	bvs	124194 <_Min_Stack_Size+0x123d94>
    7190:	6e080062 	cdpvs	0, 0, cr0, cr8, cr2, {3}
    7194:	01080062 	tsteq	r8, r2, rrx
    7198:	626e5600 	rsbvs	r5, lr, #0, 12
    719c:	62980800 	addsvs	r0, r8, #0, 16
    71a0:	00020800 	andeq	r0, r2, r0, lsl #16
    71a4:	00000474 	andeq	r0, r0, r4, ror r4
    71a8:	00000000 	andeq	r0, r0, r0
    71ac:	61e60000 	mvnvs	r0, r0
    71b0:	61f00800 	mvnsvs	r0, r0, lsl #16
    71b4:	00010800 	andeq	r0, r1, r0, lsl #16
    71b8:	00000050 	andeq	r0, r0, r0, asr r0
    71bc:	00000000 	andeq	r0, r0, r0
    71c0:	00629800 	rsbeq	r9, r2, r0, lsl #16
    71c4:	0062a808 	rsbeq	sl, r2, r8, lsl #16
    71c8:	50000108 	andpl	r0, r0, r8, lsl #2
    71cc:	080062a8 	stmdaeq	r0, {r3, r5, r7, r9, sp, lr}
    71d0:	080062be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sp, lr}
    71d4:	be540001 	cdplt	0, 5, cr0, cr4, cr1, {0}
    71d8:	c0080062 	andgt	r0, r8, r2, rrx
    71dc:	01080062 	tsteq	r8, r2, rrx
    71e0:	62c05000 	sbcvs	r5, r0, #0
    71e4:	63600800 	cmnvs	r0, #0, 16
    71e8:	00010800 	andeq	r0, r1, r0, lsl #16
    71ec:	00000054 	andeq	r0, r0, r4, asr r0
    71f0:	00000000 	andeq	r0, r0, r0
    71f4:	00629800 	rsbeq	r9, r2, r0, lsl #16
    71f8:	0062b608 	rsbeq	fp, r2, r8, lsl #12
    71fc:	51000108 	tstpl	r0, r8, lsl #2
    7200:	080062b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sp, lr}
    7204:	080062be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sp, lr}
    7208:	01f30004 	mvnseq	r0, r4
    720c:	62be9f51 	adcsvs	r9, lr, #324	; 0x144
    7210:	631b0800 	tstvs	fp, #0, 16
    7214:	00010800 	andeq	r0, r1, r0, lsl #16
    7218:	00631b51 	rsbeq	r1, r3, r1, asr fp
    721c:	00634008 	rsbeq	r4, r3, r8
    7220:	f3000408 	vshl.u8	d0, d8, d0
    7224:	409f5101 	addsmi	r5, pc, r1, lsl #2
    7228:	60080063 	andvs	r0, r8, r3, rrx
    722c:	01080063 	tsteq	r8, r3, rrx
    7230:	00005100 	andeq	r5, r0, r0, lsl #2
    7234:	00000000 	andeq	r0, r0, r0
    7238:	62980000 	addsvs	r0, r8, #0
    723c:	62b60800 	adcsvs	r0, r6, #0, 16
    7240:	00010800 	andeq	r0, r1, r0, lsl #16
    7244:	0062b652 	rsbeq	fp, r2, r2, asr r6
    7248:	0062be08 	rsbeq	fp, r2, r8, lsl #28
    724c:	f3000408 	vshl.u8	d0, d8, d0
    7250:	be9f5201 	cdplt	2, 9, cr5, cr15, cr1, {0}
    7254:	dc080062 	stcle	0, cr0, [r8], {98}	; 0x62
    7258:	01080062 	tsteq	r8, r2, rrx
    725c:	62dc5200 	sbcsvs	r5, ip, #0, 4
    7260:	631b0800 	tstvs	fp, #0, 16
    7264:	00020800 	andeq	r0, r2, r0, lsl #16
    7268:	631b3474 	tstvs	fp, #116, 8	; 0x74000000
    726c:	63400800 	movtvs	r0, #2048	; 0x800
    7270:	00040800 	andeq	r0, r4, r0, lsl #16
    7274:	9f5201f3 	svcls	0x005201f3
    7278:	08006340 	stmdaeq	r0, {r6, r8, r9, sp, lr}
    727c:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
    7280:	34740002 	ldrbtcc	r0, [r4], #-2
	...
    728c:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    7290:	080062b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sp, lr}
    7294:	9f300002 	svcls	0x00300002
    7298:	080062b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sp, lr}
    729c:	080062be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sp, lr}
    72a0:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
    72a4:	60080062 	andvs	r0, r8, r2, rrx
    72a8:	02080063 	andeq	r0, r8, #99	; 0x63
    72ac:	009f3000 	addseq	r3, pc, r0
    72b0:	00000000 	andeq	r0, r0, r0
    72b4:	60000000 	andvs	r0, r0, r0
    72b8:	7e080063 	cdpvc	0, 0, cr0, cr8, cr3, {3}
    72bc:	01080063 	tsteq	r8, r3, rrx
    72c0:	637e5000 	cmnvs	lr, #0
    72c4:	63940800 	orrsvs	r0, r4, #0, 16
    72c8:	00010800 	andeq	r0, r1, r0, lsl #16
    72cc:	00639454 	rsbeq	r9, r3, r4, asr r4
    72d0:	00639608 	rsbeq	r9, r3, r8, lsl #12
    72d4:	50000108 	andpl	r0, r0, r8, lsl #2
    72d8:	08006396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp, lr}
    72dc:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
    72e0:	98540001 	ldmdals	r4, {r0}^
    72e4:	fa080063 	blx	207478 <_Min_Stack_Size+0x207078>
    72e8:	01080063 	tsteq	r8, r3, rrx
    72ec:	63fa5000 	mvnsvs	r5, #0
    72f0:	64f60800 	ldrbtvs	r0, [r6], #2048	; 0x800
    72f4:	00010800 	andeq	r0, r1, r0, lsl #16
    72f8:	0064f654 	rsbeq	pc, r4, r4, asr r6	; <UNPREDICTABLE>
    72fc:	0064f808 	rsbeq	pc, r4, r8, lsl #16
    7300:	50000108 	andpl	r0, r0, r8, lsl #2
    7304:	080064f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp, lr}
    7308:	080064fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, sp, lr}
    730c:	fa540001 	blx	1507318 <_Min_Stack_Size+0x1506f18>
    7310:	24080064 	strcs	r0, [r8], #-100	; 0xffffff9c
    7314:	01080065 	tsteq	r8, r5, rrx
    7318:	00005000 	andeq	r5, r0, r0
    731c:	00000000 	andeq	r0, r0, r0
    7320:	63600000 	cmnvs	r0, #0
    7324:	636c0800 	cmnvs	ip, #0, 16
    7328:	00010800 	andeq	r0, r1, r0, lsl #16
    732c:	00636c51 	rsbeq	r6, r3, r1, asr ip
    7330:	00652408 	rsbeq	r2, r5, r8, lsl #8
    7334:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    7340:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
    7344:	0800638c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp, lr}
    7348:	8c520001 	mrrchi	0, 0, r0, r2, cr1
    734c:	94080063 	strls	r0, [r8], #-99	; 0xffffff9d
    7350:	04080063 	streq	r0, [r8], #-99	; 0xffffff9d
    7354:	5201f300 	andpl	pc, r1, #0, 6
    7358:	0063949f 	mlseq	r3, pc, r4, r9	; <UNPREDICTABLE>
    735c:	0063f408 	rsbeq	pc, r3, r8, lsl #8
    7360:	52000108 	andpl	r0, r0, #8, 2
    7364:	080063f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp, lr}
    7368:	080063fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    736c:	34700002 	ldrbtcc	r0, [r0], #-2
    7370:	080063fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    7374:	0800641d 	stmdaeq	r0, {r0, r2, r3, r4, sl, sp, lr}
    7378:	34740002 	ldrbtcc	r0, [r4], #-2
    737c:	0800641d 	stmdaeq	r0, {r0, r2, r3, r4, sl, sp, lr}
    7380:	08006462 	stmdaeq	r0, {r1, r5, r6, sl, sp, lr}
    7384:	01f30004 	mvnseq	r0, r4
    7388:	64629f52 	strbtvs	r9, [r2], #-3922	; 0xfffff0ae
    738c:	649c0800 	ldrvs	r0, [ip], #2048	; 0x800
    7390:	00010800 	andeq	r0, r1, r0, lsl #16
    7394:	00649c52 	rsbeq	r9, r4, r2, asr ip
    7398:	0064bd08 	rsbeq	fp, r4, r8, lsl #26
    739c:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    73a0:	0064bd3c 	rsbeq	fp, r4, ip, lsr sp
    73a4:	0064e208 	rsbeq	lr, r4, r8, lsl #4
    73a8:	f3000408 	vshl.u8	d0, d8, d0
    73ac:	e29f5201 	adds	r5, pc, #268435456	; 0x10000000
    73b0:	e4080064 	str	r0, [r8], #-100	; 0xffffff9c
    73b4:	01080064 	tsteq	r8, r4, rrx
    73b8:	64e45200 	strbtvs	r5, [r4], #512	; 0x200
    73bc:	64f60800 	ldrbtvs	r0, [r6], #2048	; 0x800
    73c0:	00020800 	andeq	r0, r2, r0, lsl #16
    73c4:	64f63c74 	ldrbtvs	r3, [r6], #3188	; 0xc74
    73c8:	64fc0800 	ldrbtvs	r0, [ip], #2048	; 0x800
    73cc:	00010800 	andeq	r0, r1, r0, lsl #16
    73d0:	0064fc52 	rsbeq	pc, r4, r2, asr ip	; <UNPREDICTABLE>
    73d4:	00652408 	rsbeq	r2, r5, r8, lsl #8
    73d8:	70000208 	andvc	r0, r0, r8, lsl #4
    73dc:	00000034 	andeq	r0, r0, r4, lsr r0
    73e0:	00000000 	andeq	r0, r0, r0
    73e4:	00636000 	rsbeq	r6, r3, r0
    73e8:	00638c08 	rsbeq	r8, r3, r8, lsl #24
    73ec:	30000208 	andcc	r0, r0, r8, lsl #4
    73f0:	00638c9f 	mlseq	r3, pc, ip, r8	; <UNPREDICTABLE>
    73f4:	00639408 	rsbeq	r9, r3, r8, lsl #8
    73f8:	50000108 	andpl	r0, r0, r8, lsl #2
    73fc:	08006394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp, lr}
    7400:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
    7404:	9f300002 	svcls	0x00300002
	...
    7410:	080063a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp, lr}
    7414:	080063f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp, lr}
    7418:	f4520001 			; <UNDEFINED> instruction: 0xf4520001
    741c:	fa080063 	blx	2075b0 <_Min_Stack_Size+0x2071b0>
    7420:	02080063 	andeq	r0, r8, #99	; 0x63
    7424:	fa347000 	blx	d2342c <_Min_Stack_Size+0xd2302c>
    7428:	1d080063 	stcne	0, cr0, [r8, #-396]	; 0xfffffe74
    742c:	02080064 	andeq	r0, r8, #100	; 0x64
    7430:	1d347400 	cfldrsne	mvf7, [r4, #-0]
    7434:	62080064 	andvs	r0, r8, #100	; 0x64
    7438:	04080064 	streq	r0, [r8], #-100	; 0xffffff9c
    743c:	5201f300 	andpl	pc, r1, #0, 6
    7440:	0064f69f 	mlseq	r4, pc, r6, pc	; <UNPREDICTABLE>
    7444:	0064fc08 	rsbeq	pc, r4, r8, lsl #24
    7448:	52000108 	andpl	r0, r0, #8, 2
    744c:	080064fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, sp, lr}
    7450:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
    7454:	34700002 	ldrbtcc	r0, [r0], #-2
	...
    7460:	080063a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp, lr}
    7464:	08006462 	stmdaeq	r0, {r1, r5, r6, sl, sp, lr}
    7468:	f6550001 			; <UNDEFINED> instruction: 0xf6550001
    746c:	24080064 	strcs	r0, [r8], #-100	; 0xffffff9c
    7470:	01080065 	tsteq	r8, r5, rrx
    7474:	00005500 	andeq	r5, r0, r0, lsl #10
    7478:	00000000 	andeq	r0, r0, r0
    747c:	63a40000 			; <UNDEFINED> instruction: 0x63a40000
    7480:	63fa0800 	mvnsvs	r0, #0, 16
    7484:	00010800 	andeq	r0, r1, r0, lsl #16
    7488:	0063fa50 	rsbeq	pc, r3, r0, asr sl	; <UNPREDICTABLE>
    748c:	00646208 	rsbeq	r6, r4, r8, lsl #4
    7490:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    7494:	080064f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp, lr}
    7498:	080064f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp, lr}
    749c:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    74a0:	fa080064 	blx	207638 <_Min_Stack_Size+0x207238>
    74a4:	01080064 	tsteq	r8, r4, rrx
    74a8:	64fa5400 	ldrbtvs	r5, [sl], #1024	; 0x400
    74ac:	65240800 	strvs	r0, [r4, #-2048]!	; 0xfffff800
    74b0:	00010800 	andeq	r0, r1, r0, lsl #16
    74b4:	00000050 	andeq	r0, r0, r0, asr r0
    74b8:	00000000 	andeq	r0, r0, r0
    74bc:	0063a400 	rsbeq	sl, r3, r0, lsl #8
    74c0:	00646208 	rsbeq	r6, r4, r8, lsl #4
    74c4:	30000208 	andcc	r0, r0, r8, lsl #4
    74c8:	0064f69f 	mlseq	r4, pc, r6, pc	; <UNPREDICTABLE>
    74cc:	00652408 	rsbeq	r2, r5, r8, lsl #8
    74d0:	30000208 	andcc	r0, r0, r8, lsl #4
    74d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    74d8:	00000000 	andeq	r0, r0, r0
    74dc:	0063a600 	rsbeq	sl, r3, r0, lsl #12
    74e0:	0063f408 	rsbeq	pc, r3, r8, lsl #8
    74e4:	52000108 	andpl	r0, r0, #8, 2
    74e8:	080063f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp, lr}
    74ec:	080063fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    74f0:	34700002 	ldrbtcc	r0, [r0], #-2
    74f4:	080063fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    74f8:	0800641d 	stmdaeq	r0, {r0, r2, r3, r4, sl, sp, lr}
    74fc:	34740002 	ldrbtcc	r0, [r4], #-2
    7500:	0800641d 	stmdaeq	r0, {r0, r2, r3, r4, sl, sp, lr}
    7504:	08006462 	stmdaeq	r0, {r1, r5, r6, sl, sp, lr}
    7508:	01f30004 	mvnseq	r0, r4
    750c:	64f69f52 	ldrbtvs	r9, [r6], #3922	; 0xf52
    7510:	64fc0800 	ldrbtvs	r0, [ip], #2048	; 0x800
    7514:	00010800 	andeq	r0, r1, r0, lsl #16
    7518:	0064fc52 	rsbeq	pc, r4, r2, asr ip	; <UNPREDICTABLE>
    751c:	00652408 	rsbeq	r2, r5, r8, lsl #8
    7520:	70000208 	andvc	r0, r0, r8, lsl #4
    7524:	00000034 	andeq	r0, r0, r4, lsr r0
    7528:	00000000 	andeq	r0, r0, r0
    752c:	0063a600 	rsbeq	sl, r3, r0, lsl #12
    7530:	00646208 	rsbeq	r6, r4, r8, lsl #4
    7534:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    7538:	080064f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp, lr}
    753c:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
    7540:	00550001 	subseq	r0, r5, r1
    7544:	00000000 	andeq	r0, r0, r0
    7548:	a6000000 	strge	r0, [r0], -r0
    754c:	fa080063 	blx	2076e0 <_Min_Stack_Size+0x2072e0>
    7550:	01080063 	tsteq	r8, r3, rrx
    7554:	63fa5000 	mvnsvs	r5, #0
    7558:	64620800 	strbtvs	r0, [r2], #-2048	; 0xfffff800
    755c:	00010800 	andeq	r0, r1, r0, lsl #16
    7560:	0064f654 	rsbeq	pc, r4, r4, asr r6	; <UNPREDICTABLE>
    7564:	0064f808 	rsbeq	pc, r4, r8, lsl #16
    7568:	50000108 	andpl	r0, r0, r8, lsl #2
    756c:	080064f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp, lr}
    7570:	080064fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, sp, lr}
    7574:	fa540001 	blx	1507580 <_Min_Stack_Size+0x1507180>
    7578:	24080064 	strcs	r0, [r8], #-100	; 0xffffff9c
    757c:	01080065 	tsteq	r8, r5, rrx
    7580:	00005000 	andeq	r5, r0, r0
    7584:	00000000 	andeq	r0, r0, r0
    7588:	63ae0000 			; <UNDEFINED> instruction: 0x63ae0000
    758c:	63ca0800 	bicvs	r0, sl, #0, 16
    7590:	00010800 	andeq	r0, r1, r0, lsl #16
    7594:	0064f653 	rsbeq	pc, r4, r3, asr r6	; <UNPREDICTABLE>
    7598:	0064fa08 	rsbeq	pc, r4, r8, lsl #20
    759c:	53000108 	movwpl	r0, #264	; 0x108
	...
    75a8:	080063ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sp, lr}
    75ac:	08006462 	stmdaeq	r0, {r1, r5, r6, sl, sp, lr}
    75b0:	040a0004 	streq	r0, [sl], #-4
    75b4:	64f69f01 	ldrbtvs	r9, [r6], #3841	; 0xf01
    75b8:	65240800 	strvs	r0, [r4, #-2048]!	; 0xfffff800
    75bc:	00040800 	andeq	r0, r4, r0, lsl #16
    75c0:	9f01040a 	svcls	0x0001040a
	...
    75cc:	080064f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp, lr}
    75d0:	080064fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, sp, lr}
    75d4:	00500001 	subseq	r0, r0, r1
    75d8:	00000000 	andeq	r0, r0, r0
    75dc:	24000000 	strcs	r0, [r0], #-0
    75e0:	2c080065 	stccs	0, cr0, [r8], {101}	; 0x65
    75e4:	01080065 	tsteq	r8, r5, rrx
    75e8:	652c5000 	strvs	r5, [ip, #-0]!
    75ec:	66380800 	ldrtvs	r0, [r8], -r0, lsl #16
    75f0:	00010800 	andeq	r0, r1, r0, lsl #16
    75f4:	00000054 	andeq	r0, r0, r4, asr r0
    75f8:	00000000 	andeq	r0, r0, r0
    75fc:	00652400 	rsbeq	r2, r5, r0, lsl #8
    7600:	00654a08 	rsbeq	r4, r5, r8, lsl #20
    7604:	51000108 	tstpl	r0, r8, lsl #2
    7608:	0800654a 	stmdaeq	r0, {r1, r3, r6, r8, sl, sp, lr}
    760c:	08006552 	stmdaeq	r0, {r1, r4, r6, r8, sl, sp, lr}
    7610:	01f30004 	mvnseq	r0, r4
    7614:	65529f51 	ldrbvs	r9, [r2, #-3921]	; 0xfffff0af
    7618:	65820800 	strvs	r0, [r2, #2048]	; 0x800
    761c:	00010800 	andeq	r0, r1, r0, lsl #16
    7620:	00658251 	rsbeq	r8, r5, r1, asr r2
    7624:	0065ac08 	rsbeq	sl, r5, r8, lsl #24
    7628:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    762c:	0065ac30 	rsbeq	sl, r5, r0, lsr ip
    7630:	00660408 	rsbeq	r0, r6, r8, lsl #8
    7634:	f3000408 	vshl.u8	d0, d8, d0
    7638:	049f5101 	ldreq	r5, [pc], #257	; 7640 <_Min_Stack_Size+0x7240>
    763c:	0e080066 	cdpeq	0, 0, cr0, cr8, cr6, {3}
    7640:	01080066 	tsteq	r8, r6, rrx
    7644:	660e5100 	strvs	r5, [lr], -r0, lsl #2
    7648:	66380800 	ldrtvs	r0, [r8], -r0, lsl #16
    764c:	00020800 	andeq	r0, r2, r0, lsl #16
    7650:	00003074 	andeq	r3, r0, r4, ror r0
    7654:	00000000 	andeq	r0, r0, r0
    7658:	65240000 	strvs	r0, [r4, #-0]!
    765c:	654a0800 	strbvs	r0, [sl, #-2048]	; 0xfffff800
    7660:	00010800 	andeq	r0, r1, r0, lsl #16
    7664:	00654a52 	rsbeq	r4, r5, r2, asr sl
    7668:	00655208 	rsbeq	r5, r5, r8, lsl #4
    766c:	f3000408 	vshl.u8	d0, d8, d0
    7670:	529f5201 	addspl	r5, pc, #268435456	; 0x10000000
    7674:	bf080065 	svclt	0x00080065
    7678:	01080065 	tsteq	r8, r5, rrx
    767c:	65bf5200 	ldrvs	r5, [pc, #512]!	; 7884 <_Min_Stack_Size+0x7484>
    7680:	66040800 	strvs	r0, [r4], -r0, lsl #16
    7684:	00040800 	andeq	r0, r4, r0, lsl #16
    7688:	9f5201f3 	svcls	0x005201f3
    768c:	08006604 	stmdaeq	r0, {r2, r9, sl, sp, lr}
    7690:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
    7694:	00520001 	subseq	r0, r2, r1
    7698:	00000000 	andeq	r0, r0, r0
    769c:	24000000 	strcs	r0, [r0], #-0
    76a0:	4a080065 	bmi	20783c <_Min_Stack_Size+0x20743c>
    76a4:	01080065 	tsteq	r8, r5, rrx
    76a8:	654a5300 	strbvs	r5, [sl, #-768]	; 0xfffffd00
    76ac:	65520800 	ldrbvs	r0, [r2, #-2048]	; 0xfffff800
    76b0:	00040800 	andeq	r0, r4, r0, lsl #16
    76b4:	9f5301f3 	svcls	0x005301f3
    76b8:	08006552 	stmdaeq	r0, {r1, r4, r6, r8, sl, sp, lr}
    76bc:	08006598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, lr}
    76c0:	98530001 	ldmdals	r3, {r0}^
    76c4:	bf080065 	svclt	0x00080065
    76c8:	02080065 	andeq	r0, r8, #101	; 0x65
    76cc:	bf347400 	svclt	0x00347400
    76d0:	04080065 	streq	r0, [r8], #-101	; 0xffffff9b
    76d4:	04080066 	streq	r0, [r8], #-102	; 0xffffff9a
    76d8:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    76dc:	0066049f 	mlseq	r6, pc, r4, r0	; <UNPREDICTABLE>
    76e0:	00660608 	rsbeq	r0, r6, r8, lsl #12
    76e4:	53000108 	movwpl	r0, #264	; 0x108
    76e8:	08006606 	stmdaeq	r0, {r1, r2, r9, sl, sp, lr}
    76ec:	0800660e 	stmdaeq	r0, {r1, r2, r3, r9, sl, sp, lr}
    76f0:	01f30004 	mvnseq	r0, r4
    76f4:	660e9f53 			; <UNDEFINED> instruction: 0x660e9f53
    76f8:	66140800 	ldrvs	r0, [r4], -r0, lsl #16
    76fc:	00010800 	andeq	r0, r1, r0, lsl #16
    7700:	00661453 	rsbeq	r1, r6, r3, asr r4
    7704:	00663808 	rsbeq	r3, r6, r8, lsl #16
    7708:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    770c:	00000034 	andeq	r0, r0, r4, lsr r0
    7710:	00000000 	andeq	r0, r0, r0
    7714:	00653000 	rsbeq	r3, r5, r0
    7718:	00654a08 	rsbeq	r4, r5, r8, lsl #20
    771c:	53000108 	movwpl	r0, #264	; 0x108
    7720:	0800654a 	stmdaeq	r0, {r1, r3, r6, r8, sl, sp, lr}
    7724:	08006552 	stmdaeq	r0, {r1, r4, r6, r8, sl, sp, lr}
    7728:	01f30004 	mvnseq	r0, r4
    772c:	65569f53 	ldrbvs	r9, [r6, #-3923]	; 0xfffff0ad
    7730:	65980800 	ldrvs	r0, [r8, #2048]	; 0x800
    7734:	00010800 	andeq	r0, r1, r0, lsl #16
    7738:	00659853 	rsbeq	r9, r5, r3, asr r8
    773c:	0065bf08 	rsbeq	fp, r5, r8, lsl #30
    7740:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    7744:	0065bf34 	rsbeq	fp, r5, r4, lsr pc
    7748:	00660408 	rsbeq	r0, r6, r8, lsl #8
    774c:	f3000408 	vshl.u8	d0, d8, d0
    7750:	049f5301 	ldreq	r5, [pc], #769	; 7758 <_Min_Stack_Size+0x7358>
    7754:	06080066 	streq	r0, [r8], -r6, rrx
    7758:	01080066 	tsteq	r8, r6, rrx
    775c:	66065300 	strvs	r5, [r6], -r0, lsl #6
    7760:	660e0800 	strvs	r0, [lr], -r0, lsl #16
    7764:	00040800 	andeq	r0, r4, r0, lsl #16
    7768:	9f5301f3 	svcls	0x005301f3
    776c:	0800660e 	stmdaeq	r0, {r1, r2, r3, r9, sl, sp, lr}
    7770:	08006614 	stmdaeq	r0, {r2, r4, r9, sl, sp, lr}
    7774:	14530001 	ldrbne	r0, [r3], #-1
    7778:	38080066 	stmdacc	r8, {r1, r2, r5, r6}
    777c:	02080066 	andeq	r0, r8, #102	; 0x66
    7780:	00347400 	eorseq	r7, r4, r0, lsl #8
    7784:	00000000 	andeq	r0, r0, r0
    7788:	30000000 	andcc	r0, r0, r0
    778c:	4a080065 	bmi	207928 <_Min_Stack_Size+0x207528>
    7790:	01080065 	tsteq	r8, r5, rrx
    7794:	654a5200 	strbvs	r5, [sl, #-512]	; 0xfffffe00
    7798:	65520800 	ldrbvs	r0, [r2, #-2048]	; 0xfffff800
    779c:	00040800 	andeq	r0, r4, r0, lsl #16
    77a0:	9f5201f3 	svcls	0x005201f3
    77a4:	08006556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, sp, lr}
    77a8:	080065bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, sl, sp, lr}
    77ac:	bf520001 	svclt	0x00520001
    77b0:	04080065 	streq	r0, [r8], #-101	; 0xffffff9b
    77b4:	04080066 	streq	r0, [r8], #-102	; 0xffffff9a
    77b8:	5201f300 	andpl	pc, r1, #0, 6
    77bc:	0066049f 	mlseq	r6, pc, r4, r0	; <UNPREDICTABLE>
    77c0:	00663808 	rsbeq	r3, r6, r8, lsl #16
    77c4:	52000108 	andpl	r0, r0, #8, 2
	...
    77d0:	08006530 	stmdaeq	r0, {r4, r5, r8, sl, sp, lr}
    77d4:	0800654a 	stmdaeq	r0, {r1, r3, r6, r8, sl, sp, lr}
    77d8:	4a510001 	bmi	14477e4 <_Min_Stack_Size+0x14473e4>
    77dc:	52080065 	andpl	r0, r8, #101	; 0x65
    77e0:	04080065 	streq	r0, [r8], #-101	; 0xffffff9b
    77e4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    77e8:	0065569f 	mlseq	r5, pc, r6, r5	; <UNPREDICTABLE>
    77ec:	00658208 	rsbeq	r8, r5, r8, lsl #4
    77f0:	51000108 	tstpl	r0, r8, lsl #2
    77f4:	08006582 	stmdaeq	r0, {r1, r7, r8, sl, sp, lr}
    77f8:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
    77fc:	30740002 	rsbscc	r0, r4, r2
    7800:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
    7804:	08006604 	stmdaeq	r0, {r2, r9, sl, sp, lr}
    7808:	01f30004 	mvnseq	r0, r4
    780c:	66049f51 			; <UNDEFINED> instruction: 0x66049f51
    7810:	660e0800 	strvs	r0, [lr], -r0, lsl #16
    7814:	00010800 	andeq	r0, r1, r0, lsl #16
    7818:	00660e51 	rsbeq	r0, r6, r1, asr lr
    781c:	00663808 	rsbeq	r3, r6, r8, lsl #16
    7820:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    7824:	00000030 	andeq	r0, r0, r0, lsr r0
    7828:	00000000 	andeq	r0, r0, r0
    782c:	00653000 	rsbeq	r3, r5, r0
    7830:	00655208 	rsbeq	r5, r5, r8, lsl #4
    7834:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    7838:	08006556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, sp, lr}
    783c:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
    7840:	00540001 	subseq	r0, r4, r1
    7844:	00000000 	andeq	r0, r0, r0
    7848:	3a000000 	bcc	7850 <_Min_Stack_Size+0x7450>
    784c:	4a080065 	bmi	2079e8 <_Min_Stack_Size+0x2075e8>
    7850:	01080065 	tsteq	r8, r5, rrx
    7854:	65565000 	ldrbvs	r5, [r6, #-0]
    7858:	65700800 	ldrbvs	r0, [r0, #-2048]!	; 0xfffff800
    785c:	00010800 	andeq	r0, r1, r0, lsl #16
    7860:	00660450 	rsbeq	r0, r6, r0, asr r4
    7864:	00660808 	rsbeq	r0, r6, r8, lsl #16
    7868:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    7874:	0800653a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, sp, lr}
    7878:	08006552 	stmdaeq	r0, {r1, r4, r6, r8, sl, sp, lr}
    787c:	56560001 	ldrbpl	r0, [r6], -r1
    7880:	38080065 	stmdacc	r8, {r0, r2, r5, r6}
    7884:	01080066 	tsteq	r8, r6, rrx
    7888:	00005600 	andeq	r5, r0, r0, lsl #12
    788c:	00000000 	andeq	r0, r0, r0
    7890:	654a0000 	strbvs	r0, [sl, #-0]
    7894:	65520800 	ldrbvs	r0, [r2, #-2048]	; 0xfffff800
    7898:	00010800 	andeq	r0, r1, r0, lsl #16
    789c:	00660850 	rsbeq	r0, r6, r0, asr r8
    78a0:	00660e08 	rsbeq	r0, r6, r8, lsl #28
    78a4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    78b0:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
    78b4:	08006644 	stmdaeq	r0, {r2, r6, r9, sl, sp, lr}
    78b8:	44500001 	ldrbmi	r0, [r0], #-1
    78bc:	56080066 	strpl	r0, [r8], -r6, rrx
    78c0:	01080066 	tsteq	r8, r6, rrx
    78c4:	66565300 	ldrbvs	r5, [r6], -r0, lsl #6
    78c8:	66580800 	ldrbvs	r0, [r8], -r0, lsl #16
    78cc:	00010800 	andeq	r0, r1, r0, lsl #16
    78d0:	00665850 	rsbeq	r5, r6, r0, asr r8
    78d4:	00665a08 	rsbeq	r5, r6, r8, lsl #20
    78d8:	53000108 	movwpl	r0, #264	; 0x108
	...
    78e4:	0800665c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp, lr}
    78e8:	08006668 	stmdaeq	r0, {r3, r5, r6, r9, sl, sp, lr}
    78ec:	68500001 	ldmdavs	r0, {r0}^
    78f0:	7a080066 	bvc	207a90 <_Min_Stack_Size+0x207690>
    78f4:	01080066 	tsteq	r8, r6, rrx
    78f8:	667a5300 	ldrbtvs	r5, [sl], -r0, lsl #6
    78fc:	667c0800 	ldrbtvs	r0, [ip], -r0, lsl #16
    7900:	00010800 	andeq	r0, r1, r0, lsl #16
    7904:	00667c50 	rsbeq	r7, r6, r0, asr ip
    7908:	00667e08 	rsbeq	r7, r6, r8, lsl #28
    790c:	53000108 	movwpl	r0, #264	; 0x108
	...
    7918:	08006680 	stmdaeq	r0, {r7, r9, sl, sp, lr}
    791c:	08006686 	stmdaeq	r0, {r1, r2, r7, r9, sl, sp, lr}
    7920:	86500001 	ldrbhi	r0, [r0], -r1
    7924:	a8080066 	stmdage	r8, {r1, r2, r5, r6}
    7928:	01080066 	tsteq	r8, r6, rrx
    792c:	00005400 	andeq	r5, r0, r0, lsl #8
    7930:	00000000 	andeq	r0, r0, r0
    7934:	66b80000 	ldrtvs	r0, [r8], r0
    7938:	66bc0800 	ldrtvs	r0, [ip], r0, lsl #16
    793c:	00010800 	andeq	r0, r1, r0, lsl #16
    7940:	0066bc50 	rsbeq	fp, r6, r0, asr ip
    7944:	0066c208 	rsbeq	ip, r6, r8, lsl #4
    7948:	f3000408 	vshl.u8	d0, d8, d0
    794c:	009f5001 	addseq	r5, pc, r1
    7950:	00000000 	andeq	r0, r0, r0
    7954:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    7958:	bc080066 	stclt	0, cr0, [r8], {102}	; 0x66
    795c:	02080066 	andeq	r0, r8, #102	; 0x66
    7960:	bc387000 	ldclt	0, cr7, [r8], #-0
    7964:	bf080066 	svclt	0x00080066
    7968:	05080066 	streq	r0, [r8, #-102]	; 0xffffff9a
    796c:	5001f300 	andpl	pc, r1, r0, lsl #6
    7970:	00003823 	andeq	r3, r0, r3, lsr #16
    7974:	00000000 	andeq	r0, r0, r0
    7978:	66c80000 	strbvs	r0, [r8], r0
    797c:	66cc0800 	strbvs	r0, [ip], r0, lsl #16
    7980:	00010800 	andeq	r0, r1, r0, lsl #16
    7984:	0066cc50 	rsbeq	ip, r6, r0, asr ip
    7988:	0066d208 	rsbeq	sp, r6, r8, lsl #4
    798c:	f3000408 	vshl.u8	d0, d8, d0
    7990:	009f5001 	addseq	r5, pc, r1
    7994:	00000000 	andeq	r0, r0, r0
    7998:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    799c:	cc080066 	stcgt	0, cr0, [r8], {102}	; 0x66
    79a0:	02080066 	andeq	r0, r8, #102	; 0x66
    79a4:	cc387000 	ldcgt	0, cr7, [r8], #-0
    79a8:	cf080066 	svcgt	0x00080066
    79ac:	05080066 	streq	r0, [r8, #-102]	; 0xffffff9a
    79b0:	5001f300 	andpl	pc, r1, r0, lsl #6
    79b4:	00003823 	andeq	r3, r0, r3, lsr #16
    79b8:	00000000 	andeq	r0, r0, r0
    79bc:	66d80000 	ldrbvs	r0, [r8], r0
    79c0:	66dc0800 	ldrbvs	r0, [ip], r0, lsl #16
    79c4:	00010800 	andeq	r0, r1, r0, lsl #16
    79c8:	0066dc50 	rsbeq	sp, r6, r0, asr ip
    79cc:	0066e208 	rsbeq	lr, r6, r8, lsl #4
    79d0:	f3000408 	vshl.u8	d0, d8, d0
    79d4:	009f5001 	addseq	r5, pc, r1
    79d8:	00000000 	andeq	r0, r0, r0
    79dc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    79e0:	dc080066 	stcle	0, cr0, [r8], {102}	; 0x66
    79e4:	02080066 	andeq	r0, r8, #102	; 0x66
    79e8:	dc387000 	ldcle	0, cr7, [r8], #-0
    79ec:	df080066 	svcle	0x00080066
    79f0:	05080066 	streq	r0, [r8, #-102]	; 0xffffff9a
    79f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    79f8:	00003823 	andeq	r3, r0, r3, lsr #16
    79fc:	00000000 	andeq	r0, r0, r0
    7a00:	66e80000 	strbtvs	r0, [r8], r0
    7a04:	67050800 	strvs	r0, [r5, -r0, lsl #16]
    7a08:	00010800 	andeq	r0, r1, r0, lsl #16
    7a0c:	00670550 	rsbeq	r0, r7, r0, asr r5
    7a10:	00674e08 	rsbeq	r4, r7, r8, lsl #28
    7a14:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    7a18:	0800674e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, sp, lr}
    7a1c:	08006751 	stmdaeq	r0, {r0, r4, r6, r8, r9, sl, sp, lr}
    7a20:	51500001 	cmppl	r0, r1
    7a24:	ac080067 	stcge	0, cr0, [r8], {103}	; 0x67
    7a28:	01080067 	tsteq	r8, r7, rrx
    7a2c:	67ac5400 	strvs	r5, [ip, r0, lsl #8]!
    7a30:	67af0800 	strvs	r0, [pc, r0, lsl #16]!
    7a34:	00010800 	andeq	r0, r1, r0, lsl #16
    7a38:	0067af50 	rsbeq	sl, r7, r0, asr pc
    7a3c:	0067d408 	rsbeq	sp, r7, r8, lsl #8
    7a40:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    7a4c:	080066e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, lr}
    7a50:	0800670a 	stmdaeq	r0, {r1, r3, r8, r9, sl, sp, lr}
    7a54:	9f300002 	svcls	0x00300002
    7a58:	0800670a 	stmdaeq	r0, {r1, r3, r8, r9, sl, sp, lr}
    7a5c:	0800672c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, sp, lr}
    7a60:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    7a64:	d4080067 	strle	r0, [r8], #-103	; 0xffffff99
    7a68:	01080067 	tsteq	r8, r7, rrx
    7a6c:	00005500 	andeq	r5, r0, r0, lsl #10
    7a70:	00000000 	andeq	r0, r0, r0
    7a74:	672c0000 	strvs	r0, [ip, -r0]!
    7a78:	674e0800 	strbvs	r0, [lr, -r0, lsl #16]
    7a7c:	00010800 	andeq	r0, r1, r0, lsl #16
    7a80:	00674e54 	rsbeq	r4, r7, r4, asr lr
    7a84:	00675108 	rsbeq	r5, r7, r8, lsl #2
    7a88:	50000108 	andpl	r0, r0, r8, lsl #2
    7a8c:	08006751 	stmdaeq	r0, {r0, r4, r6, r8, r9, sl, sp, lr}
    7a90:	080067ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp, lr}
    7a94:	ac540001 	mrrcge	0, 0, r0, r4, cr1
    7a98:	af080067 	svcge	0x00080067
    7a9c:	01080067 	tsteq	r8, r7, rrx
    7aa0:	67af5000 	strvs	r5, [pc, r0]!
    7aa4:	67d40800 	ldrbvs	r0, [r4, r0, lsl #16]
    7aa8:	00010800 	andeq	r0, r1, r0, lsl #16
    7aac:	00000054 	andeq	r0, r0, r4, asr r0
    7ab0:	00000000 	andeq	r0, r0, r0
    7ab4:	00676200 	rsbeq	r6, r7, r0, lsl #4
    7ab8:	0067ac08 	rsbeq	sl, r7, r8, lsl #24
    7abc:	08000308 	stmdaeq	r0, {r3, r8, r9}
    7ac0:	67b49f80 	ldrvs	r9, [r4, r0, lsl #31]!
    7ac4:	67d40800 	ldrbvs	r0, [r4, r0, lsl #16]
    7ac8:	00030800 	andeq	r0, r3, r0, lsl #16
    7acc:	009f8008 	addseq	r8, pc, r8
    7ad0:	00000000 	andeq	r0, r0, r0
    7ad4:	62000000 	andvs	r0, r0, #0
    7ad8:	ac080067 	stcge	0, cr0, [r8], {103}	; 0x67
    7adc:	02080067 	andeq	r0, r8, #103	; 0x67
    7ae0:	b49f3000 	ldrlt	r3, [pc], #0	; 7ae8 <_Min_Stack_Size+0x76e8>
    7ae4:	d4080067 	strle	r0, [r8], #-103	; 0xffffff99
    7ae8:	02080067 	andeq	r0, r8, #103	; 0x67
    7aec:	009f3000 	addseq	r3, pc, r0
    7af0:	00000000 	andeq	r0, r0, r0
    7af4:	62000000 	andvs	r0, r0, #0
    7af8:	ac080067 	stcge	0, cr0, [r8], {103}	; 0x67
    7afc:	03080067 	movweq	r0, #32871	; 0x8067
    7b00:	9f640800 	svcls	0x00640800
    7b04:	080067b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
    7b08:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
    7b0c:	64080003 	strvs	r0, [r8], #-3
    7b10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7b14:	00000000 	andeq	r0, r0, r0
    7b18:	00676200 	rsbeq	r6, r7, r0, lsl #4
    7b1c:	0067ac08 	rsbeq	sl, r7, r8, lsl #24
    7b20:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    7b24:	080067b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
    7b28:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
    7b2c:	00550001 	subseq	r0, r5, r1
    7b30:	00000000 	andeq	r0, r0, r0
    7b34:	62000000 	andvs	r0, r0, #0
    7b38:	ac080067 	stcge	0, cr0, [r8], {103}	; 0x67
    7b3c:	01080067 	tsteq	r8, r7, rrx
    7b40:	67b45400 	ldrvs	r5, [r4, r0, lsl #8]!
    7b44:	67d40800 	ldrbvs	r0, [r4, r0, lsl #16]
    7b48:	00010800 	andeq	r0, r1, r0, lsl #16
    7b4c:	00000054 	andeq	r0, r0, r4, asr r0
    7b50:	00000000 	andeq	r0, r0, r0
    7b54:	0067d400 	rsbeq	sp, r7, r0, lsl #8
    7b58:	0067f908 	rsbeq	pc, r7, r8, lsl #18
    7b5c:	50000108 	andpl	r0, r0, r8, lsl #2
    7b60:	080067f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    7b64:	080067fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    7b68:	01f30004 	mvnseq	r0, r4
    7b6c:	67fa9f50 	ubfxvs	r9, r0, #30, #27
    7b70:	68090800 	stmdavs	r9, {fp}
    7b74:	00010800 	andeq	r0, r1, r0, lsl #16
    7b78:	00680950 	rsbeq	r0, r8, r0, asr r9
    7b7c:	00680a08 	rsbeq	r0, r8, r8, lsl #20
    7b80:	f3000408 	vshl.u8	d0, d8, d0
    7b84:	009f5001 	addseq	r5, pc, r1
    7b88:	00000000 	andeq	r0, r0, r0
    7b8c:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    7b90:	f9080067 			; <UNDEFINED> instruction: 0xf9080067
    7b94:	01080067 	tsteq	r8, r7, rrx
    7b98:	67f95000 	ldrbvs	r5, [r9, r0]!
    7b9c:	67fa0800 	ldrbvs	r0, [sl, r0, lsl #16]!
    7ba0:	00040800 	andeq	r0, r4, r0, lsl #16
    7ba4:	9f5001f3 	svcls	0x005001f3
    7ba8:	080067fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    7bac:	08006809 	stmdaeq	r0, {r0, r3, fp, sp, lr}
    7bb0:	09500001 	ldmdbeq	r0, {r0}^
    7bb4:	0a080068 	beq	207d5c <_Min_Stack_Size+0x20795c>
    7bb8:	04080068 	streq	r0, [r8], #-104	; 0xffffff98
    7bbc:	5001f300 	andpl	pc, r1, r0, lsl #6
    7bc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7bc4:	00000000 	andeq	r0, r0, r0
    7bc8:	00680c00 	rsbeq	r0, r8, r0, lsl #24
    7bcc:	00683108 	rsbeq	r3, r8, r8, lsl #2
    7bd0:	50000108 	andpl	r0, r0, r8, lsl #2
    7bd4:	08006831 	stmdaeq	r0, {r0, r4, r5, fp, sp, lr}
    7bd8:	08006832 	stmdaeq	r0, {r1, r4, r5, fp, sp, lr}
    7bdc:	01f30004 	mvnseq	r0, r4
    7be0:	68329f50 	ldmdavs	r2!, {r4, r6, r8, r9, sl, fp, ip, pc}
    7be4:	683f0800 	ldmdavs	pc!, {fp}	; <UNPREDICTABLE>
    7be8:	00010800 	andeq	r0, r1, r0, lsl #16
    7bec:	00683f50 	rsbeq	r3, r8, r0, asr pc
    7bf0:	00684008 	rsbeq	r4, r8, r8
    7bf4:	f3000408 	vshl.u8	d0, d8, d0
    7bf8:	009f5001 	addseq	r5, pc, r1
    7bfc:	00000000 	andeq	r0, r0, r0
    7c00:	40000000 	andmi	r0, r0, r0
    7c04:	97080068 	strls	r0, [r8, -r8, rrx]
    7c08:	01080068 	tsteq	r8, r8, rrx
    7c0c:	68975000 	ldmvs	r7, {ip, lr}
    7c10:	689e0800 	ldmvs	lr, {fp}
    7c14:	00040800 	andeq	r0, r4, r0, lsl #16
    7c18:	9f5001f3 	svcls	0x005001f3
    7c1c:	0800689e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, sp, lr}
    7c20:	080068e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, fp, sp, lr}
    7c24:	e5500001 	ldrb	r0, [r0, #-1]
    7c28:	ec080068 	stc	0, cr0, [r8], {104}	; 0x68
    7c2c:	04080068 	streq	r0, [r8], #-104	; 0xffffff98
    7c30:	5001f300 	andpl	pc, r1, r0, lsl #6
    7c34:	0068ec9f 	mlseq	r8, pc, ip, lr	; <UNPREDICTABLE>
    7c38:	0068fb08 	rsbeq	pc, r8, r8, lsl #22
    7c3c:	50000108 	andpl	r0, r0, r8, lsl #2
    7c40:	080068fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, fp, sp, lr}
    7c44:	080068fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, sp, lr}
    7c48:	01f30004 	mvnseq	r0, r4
    7c4c:	68fe9f50 	ldmvs	lr!, {r4, r6, r8, r9, sl, fp, ip, pc}^
    7c50:	690c0800 	stmdbvs	ip, {fp}
    7c54:	00010800 	andeq	r0, r1, r0, lsl #16
    7c58:	00000050 	andeq	r0, r0, r0, asr r0
    7c5c:	00000000 	andeq	r0, r0, r0
    7c60:	00686600 	rsbeq	r6, r8, r0, lsl #12
    7c64:	00689708 	rsbeq	r9, r8, r8, lsl #14
    7c68:	50000108 	andpl	r0, r0, r8, lsl #2
    7c6c:	08006897 	stmdaeq	r0, {r0, r1, r2, r4, r7, fp, sp, lr}
    7c70:	08006898 	stmdaeq	r0, {r3, r4, r7, fp, sp, lr}
    7c74:	01f30004 	mvnseq	r0, r4
    7c78:	689e9f50 	ldmvs	lr, {r4, r6, r8, r9, sl, fp, ip, pc}
    7c7c:	68a80800 	stmiavs	r8!, {fp}
    7c80:	00010800 	andeq	r0, r1, r0, lsl #16
    7c84:	0068ba50 	rsbeq	fp, r8, r0, asr sl
    7c88:	0068e508 	rsbeq	lr, r8, r8, lsl #10
    7c8c:	50000108 	andpl	r0, r0, r8, lsl #2
    7c90:	080068e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, fp, sp, lr}
    7c94:	080068ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, sp, lr}
    7c98:	01f30004 	mvnseq	r0, r4
    7c9c:	68ec9f50 	stmiavs	ip!, {r4, r6, r8, r9, sl, fp, ip, pc}^
    7ca0:	68fb0800 	ldmvs	fp!, {fp}^
    7ca4:	00010800 	andeq	r0, r1, r0, lsl #16
    7ca8:	0068fb50 	rsbeq	pc, r8, r0, asr fp	; <UNPREDICTABLE>
    7cac:	0068fe08 	rsbeq	pc, r8, r8, lsl #28
    7cb0:	f3000408 	vshl.u8	d0, d8, d0
    7cb4:	009f5001 	addseq	r5, pc, r1
    7cb8:	00000000 	andeq	r0, r0, r0
    7cbc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    7cc0:	97080068 	strls	r0, [r8, -r8, rrx]
    7cc4:	01080068 	tsteq	r8, r8, rrx
    7cc8:	68975000 	ldmvs	r7, {ip, lr}
    7ccc:	68980800 	ldmvs	r8, {fp}
    7cd0:	00040800 	andeq	r0, r4, r0, lsl #16
    7cd4:	9f5001f3 	svcls	0x005001f3
    7cd8:	080068ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, sp, lr}
    7cdc:	080068e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, fp, sp, lr}
    7ce0:	e5500001 	ldrb	r0, [r0, #-1]
    7ce4:	ec080068 	stc	0, cr0, [r8], {104}	; 0x68
    7ce8:	04080068 	streq	r0, [r8], #-104	; 0xffffff98
    7cec:	5001f300 	andpl	pc, r1, r0, lsl #6
    7cf0:	0068ec9f 	mlseq	r8, pc, ip, lr	; <UNPREDICTABLE>
    7cf4:	0068fb08 	rsbeq	pc, r8, r8, lsl #22
    7cf8:	50000108 	andpl	r0, r0, r8, lsl #2
    7cfc:	080068fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, fp, sp, lr}
    7d00:	080068fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, sp, lr}
    7d04:	01f30004 	mvnseq	r0, r4
    7d08:	00009f50 	andeq	r9, r0, r0, asr pc
    7d0c:	00000000 	andeq	r0, r0, r0
    7d10:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    7d14:	69290800 	stmdbvs	r9!, {fp}
    7d18:	00010800 	andeq	r0, r1, r0, lsl #16
    7d1c:	00692950 	rsbeq	r2, r9, r0, asr r9
    7d20:	00698408 	rsbeq	r8, r9, r8, lsl #8
    7d24:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    7d28:	08006984 	stmdaeq	r0, {r2, r7, r8, fp, sp, lr}
    7d2c:	08006987 	stmdaeq	r0, {r0, r1, r2, r7, r8, fp, sp, lr}
    7d30:	87500001 	ldrbhi	r0, [r0, -r1]
    7d34:	10080069 	andne	r0, r8, r9, rrx
    7d38:	0108006a 	tsteq	r8, sl, rrx
    7d3c:	6a105400 	bvs	41cd44 <_Min_Stack_Size+0x41c944>
    7d40:	6a130800 	bvs	4c9d48 <_Min_Stack_Size+0x4c9948>
    7d44:	00010800 	andeq	r0, r1, r0, lsl #16
    7d48:	006a1350 	rsbeq	r1, sl, r0, asr r3
    7d4c:	006a3808 	rsbeq	r3, sl, r8, lsl #16
    7d50:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    7d5c:	0800690c 	stmdaeq	r0, {r2, r3, r8, fp, sp, lr}
    7d60:	08006934 	stmdaeq	r0, {r2, r4, r5, r8, fp, sp, lr}
    7d64:	9f300002 	svcls	0x00300002
    7d68:	08006934 	stmdaeq	r0, {r2, r4, r5, r8, fp, sp, lr}
    7d6c:	08006938 	stmdaeq	r0, {r3, r4, r5, r8, fp, sp, lr}
    7d70:	38500001 	ldmdacc	r0, {r0}^
    7d74:	38080069 	stmdacc	r8, {r0, r3, r5, r6}
    7d78:	0108006a 	tsteq	r8, sl, rrx
    7d7c:	00005500 	andeq	r5, r0, r0, lsl #10
    7d80:	00000000 	andeq	r0, r0, r0
    7d84:	69980000 	ldmibvs	r8, {}	; <UNPREDICTABLE>
    7d88:	69e20800 	stmibvs	r2!, {fp}^
    7d8c:	00030800 	andeq	r0, r3, r0, lsl #16
    7d90:	189f8008 	ldmne	pc, {r3, pc}	; <UNPREDICTABLE>
    7d94:	3808006a 	stmdacc	r8, {r1, r3, r5, r6}
    7d98:	0308006a 	movweq	r0, #32874	; 0x806a
    7d9c:	9f800800 	svcls	0x00800800
	...
    7da8:	08006998 	stmdaeq	r0, {r3, r4, r7, r8, fp, sp, lr}
    7dac:	080069e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp, lr}
    7db0:	9f300002 	svcls	0x00300002
    7db4:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
    7db8:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
    7dbc:	9f300002 	svcls	0x00300002
	...
    7dc8:	08006998 	stmdaeq	r0, {r3, r4, r7, r8, fp, sp, lr}
    7dcc:	080069e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp, lr}
    7dd0:	64080003 	strvs	r0, [r8], #-3
    7dd4:	006a189f 	mlseq	sl, pc, r8, r1	; <UNPREDICTABLE>
    7dd8:	006a3808 	rsbeq	r3, sl, r8, lsl #16
    7ddc:	08000308 	stmdaeq	r0, {r3, r8, r9}
    7de0:	00009f64 	andeq	r9, r0, r4, ror #30
    7de4:	00000000 	andeq	r0, r0, r0
    7de8:	69980000 	ldmibvs	r8, {}	; <UNPREDICTABLE>
    7dec:	69e20800 	stmibvs	r2!, {fp}^
    7df0:	00010800 	andeq	r0, r1, r0, lsl #16
    7df4:	006a1855 	rsbeq	r1, sl, r5, asr r8
    7df8:	006a3808 	rsbeq	r3, sl, r8, lsl #16
    7dfc:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    7e08:	08006998 	stmdaeq	r0, {r3, r4, r7, r8, fp, sp, lr}
    7e0c:	080069e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp, lr}
    7e10:	18540001 	ldmdane	r4, {r0}^
    7e14:	3808006a 	stmdacc	r8, {r1, r3, r5, r6}
    7e18:	0108006a 	tsteq	r8, sl, rrx
    7e1c:	00005400 	andeq	r5, r0, r0, lsl #8
    7e20:	00000000 	andeq	r0, r0, r0
    7e24:	6a380000 	bvs	e07e2c <_Min_Stack_Size+0xe07a2c>
    7e28:	6a790800 	bvs	1e49e30 <_Min_Stack_Size+0x1e49a30>
    7e2c:	00010800 	andeq	r0, r1, r0, lsl #16
    7e30:	006a7950 	rsbeq	r7, sl, r0, asr r9
    7e34:	006a7a08 	rsbeq	r7, sl, r8, lsl #20
    7e38:	f3000408 	vshl.u8	d0, d8, d0
    7e3c:	7a9f5001 	bvc	fe7dbe48 <_estack+0xde7abe48>
    7e40:	9208006a 	andls	r0, r8, #106	; 0x6a
    7e44:	0108006a 	tsteq	r8, sl, rrx
    7e48:	00005000 	andeq	r5, r0, r0
    7e4c:	00000000 	andeq	r0, r0, r0
    7e50:	6a940000 	bvs	fe507e58 <_estack+0xde4d7e58>
    7e54:	6ad50800 	bvs	ff549e5c <_estack+0xdf519e5c>
    7e58:	00010800 	andeq	r0, r1, r0, lsl #16
    7e5c:	006ad550 	rsbeq	sp, sl, r0, asr r5
    7e60:	006ad608 	rsbeq	sp, sl, r8, lsl #12
    7e64:	f3000408 	vshl.u8	d0, d8, d0
    7e68:	d69f5001 	ldrle	r5, [pc], r1
    7e6c:	e408006a 	str	r0, [r8], #-106	; 0xffffff96
    7e70:	0108006a 	tsteq	r8, sl, rrx
    7e74:	00005000 	andeq	r5, r0, r0
    7e78:	00000000 	andeq	r0, r0, r0
    7e7c:	6ab80000 	bvs	fee07e84 <_estack+0xdedd7e84>
    7e80:	6ac80800 	bvs	ff209e88 <_estack+0xdf1d9e88>
    7e84:	00010800 	andeq	r0, r1, r0, lsl #16
    7e88:	006ace50 	rsbeq	ip, sl, r0, asr lr
    7e8c:	006ad508 	rsbeq	sp, sl, r8, lsl #10
    7e90:	50000108 	andpl	r0, r0, r8, lsl #2
    7e94:	08006ad5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp, sp, lr}
    7e98:	08006ad6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, fp, sp, lr}
    7e9c:	01f30004 	mvnseq	r0, r4
    7ea0:	00009f50 	andeq	r9, r0, r0, asr pc
    7ea4:	00000000 	andeq	r0, r0, r0
    7ea8:	6ae40000 	bvs	ff907eb0 <_estack+0xdf8d7eb0>
    7eac:	6b0d0800 	blvs	349eb4 <_Min_Stack_Size+0x349ab4>
    7eb0:	00010800 	andeq	r0, r1, r0, lsl #16
    7eb4:	006b0d50 	rsbeq	r0, fp, r0, asr sp
    7eb8:	006b1408 	rsbeq	r1, fp, r8, lsl #8
    7ebc:	f3000408 	vshl.u8	d0, d8, d0
    7ec0:	009f5001 	addseq	r5, pc, r1
    7ec4:	00000000 	andeq	r0, r0, r0
    7ec8:	14000000 	strne	r0, [r0], #-0
    7ecc:	5308006b 	movwpl	r0, #32875	; 0x806b
    7ed0:	0108006b 	tsteq	r8, fp, rrx
    7ed4:	6b535000 	blvs	14dbedc <_Min_Stack_Size+0x14dbadc>
    7ed8:	6b540800 	blvs	1509ee0 <_Min_Stack_Size+0x1509ae0>
    7edc:	00040800 	andeq	r0, r4, r0, lsl #16
    7ee0:	9f5001f3 	svcls	0x005001f3
    7ee4:	08006b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, sp, lr}
    7ee8:	08006b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp, sp, lr}
    7eec:	00500001 	subseq	r0, r0, r1
    7ef0:	00000000 	andeq	r0, r0, r0
    7ef4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    7ef8:	ab08006b 	blge	2080ac <_Min_Stack_Size+0x207cac>
    7efc:	0108006b 	tsteq	r8, fp, rrx
    7f00:	6bab5000 	blvs	feadbf08 <_estack+0xdeaabf08>
    7f04:	6bac0800 	blvs	feb09f0c <_estack+0xdead9f0c>
    7f08:	00040800 	andeq	r0, r4, r0, lsl #16
    7f0c:	9f5001f3 	svcls	0x005001f3
    7f10:	08006bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, sp, lr}
    7f14:	08006bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
    7f18:	00500001 	subseq	r0, r0, r1
    7f1c:	00000000 	andeq	r0, r0, r0
    7f20:	bc000000 	stclt	0, cr0, [r0], {-0}
    7f24:	df08006b 	svcle	0x0008006b
    7f28:	0108006b 	tsteq	r8, fp, rrx
    7f2c:	6bdf5000 	blvs	ff7dbf34 <_estack+0xdf7abf34>
    7f30:	6be60800 	blvs	ff989f38 <_estack+0xdf959f38>
    7f34:	00040800 	andeq	r0, r4, r0, lsl #16
    7f38:	9f5001f3 	svcls	0x005001f3
	...
    7f44:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
    7f48:	08006c02 	stmdaeq	r0, {r1, sl, fp, sp, lr}
    7f4c:	02500001 	subseq	r0, r0, #1
    7f50:	0c08006c 	stceq	0, cr0, [r8], {108}	; 0x6c
    7f54:	0408006c 	streq	r0, [r8], #-108	; 0xffffff94
    7f58:	5001f300 	andpl	pc, r1, r0, lsl #6
    7f5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7f60:	00000000 	andeq	r0, r0, r0
    7f64:	006bec00 	rsbeq	lr, fp, r0, lsl #24
    7f68:	006c0908 	rsbeq	r0, ip, r8, lsl #18
    7f6c:	53000108 	movwpl	r0, #264	; 0x108
	...
    7f78:	08006c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp, lr}
    7f7c:	08006c17 	stmdaeq	r0, {r0, r1, r2, r4, sl, fp, sp, lr}
    7f80:	17500001 	ldrbne	r0, [r0, -r1]
    7f84:	d608006c 	strle	r0, [r8], -ip, rrx
    7f88:	0108006c 	tsteq	r8, ip, rrx
    7f8c:	00005600 	andeq	r5, r0, r0, lsl #12
    7f90:	00000000 	andeq	r0, r0, r0
    7f94:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    7f98:	6c180800 	ldcvs	8, cr0, [r8], {-0}
    7f9c:	00020800 	andeq	r0, r2, r0, lsl #16
    7fa0:	6c189f30 	ldcvs	15, cr9, [r8], {48}	; 0x30
    7fa4:	6c2c0800 	stcvs	8, cr0, [ip], #-0
    7fa8:	00010800 	andeq	r0, r1, r0, lsl #16
    7fac:	006c2c50 	rsbeq	r2, ip, r0, asr ip
    7fb0:	006c5208 	rsbeq	r5, ip, r8, lsl #4
    7fb4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    7fb8:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
    7fbc:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    7fc0:	00550001 	subseq	r0, r5, r1
    7fc4:	00000000 	andeq	r0, r0, r0
    7fc8:	2c000000 	stccs	0, cr0, [r0], {-0}
    7fcc:	5208006c 	andpl	r0, r8, #108	; 0x6c
    7fd0:	0308006c 	movweq	r0, #32876	; 0x806c
    7fd4:	9f640800 	svcls	0x00640800
    7fd8:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
    7fdc:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    7fe0:	64080003 	strvs	r0, [r8], #-3
    7fe4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7fe8:	00000000 	andeq	r0, r0, r0
    7fec:	006c2c00 	rsbeq	r2, ip, r0, lsl #24
    7ff0:	006c5208 	rsbeq	r5, ip, r8, lsl #4
    7ff4:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    7ff8:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
    7ffc:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    8000:	00550001 	subseq	r0, r5, r1
    8004:	00000000 	andeq	r0, r0, r0
    8008:	2c000000 	stccs	0, cr0, [r0], {-0}
    800c:	5208006c 	andpl	r0, r8, #108	; 0x6c
    8010:	0108006c 	tsteq	r8, ip, rrx
    8014:	6c5c5400 	cfldrdvs	mvd5, [ip], {-0}
    8018:	6cd60800 	ldclvs	8, cr0, [r6], {0}
    801c:	00010800 	andeq	r0, r1, r0, lsl #16
    8020:	00000054 	andeq	r0, r0, r4, asr r0
    8024:	00000000 	andeq	r0, r0, r0
    8028:	006c6800 	rsbeq	r6, ip, r0, lsl #16
    802c:	006cb608 	rsbeq	fp, ip, r8, lsl #12
    8030:	08000308 	stmdaeq	r0, {r3, r8, r9}
    8034:	6cc09f80 	stclvs	15, cr9, [r0], {128}	; 0x80
    8038:	6cd60800 	ldclvs	8, cr0, [r6], {0}
    803c:	00030800 	andeq	r0, r3, r0, lsl #16
    8040:	009f8008 	addseq	r8, pc, r8
    8044:	00000000 	andeq	r0, r0, r0
    8048:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    804c:	b608006c 	strlt	r0, [r8], -ip, rrx
    8050:	0208006c 	andeq	r0, r8, #108	; 0x6c
    8054:	c09f3000 	addsgt	r3, pc, r0
    8058:	d608006c 	strle	r0, [r8], -ip, rrx
    805c:	0208006c 	andeq	r0, r8, #108	; 0x6c
    8060:	009f3000 	addseq	r3, pc, r0
    8064:	00000000 	andeq	r0, r0, r0
    8068:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    806c:	b608006c 	strlt	r0, [r8], -ip, rrx
    8070:	0308006c 	movweq	r0, #32876	; 0x806c
    8074:	9f640800 	svcls	0x00640800
    8078:	08006cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp, lr}
    807c:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    8080:	64080003 	strvs	r0, [r8], #-3
    8084:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8088:	00000000 	andeq	r0, r0, r0
    808c:	006c6800 	rsbeq	r6, ip, r0, lsl #16
    8090:	006cb608 	rsbeq	fp, ip, r8, lsl #12
    8094:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    8098:	08006cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp, lr}
    809c:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    80a0:	00550001 	subseq	r0, r5, r1
    80a4:	00000000 	andeq	r0, r0, r0
    80a8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    80ac:	b608006c 	strlt	r0, [r8], -ip, rrx
    80b0:	0108006c 	tsteq	r8, ip, rrx
    80b4:	6cc05400 	cfstrdvs	mvd5, [r0], {0}
    80b8:	6cd60800 	ldclvs	8, cr0, [r6], {0}
    80bc:	00010800 	andeq	r0, r1, r0, lsl #16
    80c0:	00000054 	andeq	r0, r0, r4, asr r0
    80c4:	00000000 	andeq	r0, r0, r0
    80c8:	006cd800 	rsbeq	sp, ip, r0, lsl #16
    80cc:	006ce908 	rsbeq	lr, ip, r8, lsl #18
    80d0:	50000108 	andpl	r0, r0, r8, lsl #2
    80d4:	08006ce9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, fp, sp, lr}
    80d8:	08006cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, lr}
    80dc:	f0550001 			; <UNDEFINED> instruction: 0xf0550001
    80e0:	de08006c 	cdple	0, 0, cr0, cr8, cr12, {3}
    80e4:	0408006d 	streq	r0, [r8], #-109	; 0xffffff93
    80e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    80ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    80f0:	00000000 	andeq	r0, r0, r0
    80f4:	006ce600 	rsbeq	lr, ip, r0, lsl #12
    80f8:	006cea08 	rsbeq	lr, ip, r8, lsl #20
    80fc:	30000208 	andcc	r0, r0, r8, lsl #4
    8100:	006cea9f 	mlseq	ip, pc, sl, lr	; <UNPREDICTABLE>
    8104:	006d0008 	rsbeq	r0, sp, r8
    8108:	50000108 	andpl	r0, r0, r8, lsl #2
    810c:	08006d00 	stmdaeq	r0, {r8, sl, fp, sp, lr}
    8110:	08006d22 	stmdaeq	r0, {r1, r5, r8, sl, fp, sp, lr}
    8114:	2c560001 	mrrccs	0, 0, r0, r6, cr1
    8118:	de08006d 	cdple	0, 0, cr0, cr8, cr13, {3}
    811c:	0108006d 	tsteq	r8, sp, rrx
    8120:	00005600 	andeq	r5, r0, r0, lsl #12
    8124:	00000000 	andeq	r0, r0, r0
    8128:	6de00000 	stclvs	0, cr0, [r0]
    812c:	6df10800 	ldclvs	8, cr0, [r1]
    8130:	00010800 	andeq	r0, r1, r0, lsl #16
    8134:	006df150 	rsbeq	pc, sp, r0, asr r1	; <UNPREDICTABLE>
    8138:	006f3c08 	rsbeq	r3, pc, r8, lsl #24
    813c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    8148:	08006dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp, sp, lr}
    814c:	08006df2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, fp, sp, lr}
    8150:	9f300002 	svcls	0x00300002
    8154:	08006df2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, fp, sp, lr}
    8158:	08006e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp, lr}
    815c:	06500001 	ldrbeq	r0, [r0], -r1
    8160:	2c08006e 	stccs	0, cr0, [r8], {110}	; 0x6e
    8164:	0108006e 	tsteq	r8, lr, rrx
    8168:	6e365500 	cfabs32vs	mvfx5, mvfx6
    816c:	6f3c0800 	svcvs	0x003c0800
    8170:	00010800 	andeq	r0, r1, r0, lsl #16
    8174:	00000055 	andeq	r0, r0, r5, asr r0
    8178:	00000000 	andeq	r0, r0, r0
    817c:	006e6200 	rsbeq	r6, lr, r0, lsl #4
    8180:	006e9808 	rsbeq	r9, lr, r8, lsl #16
    8184:	08000308 	stmdaeq	r0, {r3, r8, r9}
    8188:	6eb69f80 	cdpvs	15, 11, cr9, cr6, cr0, {4}
    818c:	6ee20800 	cdpvs	8, 14, cr0, cr2, cr0, {0}
    8190:	00030800 	andeq	r0, r3, r0, lsl #16
    8194:	009f8008 	addseq	r8, pc, r8
    8198:	00000000 	andeq	r0, r0, r0
    819c:	62000000 	andvs	r0, r0, #0
    81a0:	9808006e 	stmdals	r8, {r1, r2, r3, r5, r6}
    81a4:	0208006e 	andeq	r0, r8, #110	; 0x6e
    81a8:	b69f3000 	ldrlt	r3, [pc], r0
    81ac:	e208006e 	and	r0, r8, #110	; 0x6e
    81b0:	0208006e 	andeq	r0, r8, #110	; 0x6e
    81b4:	009f3000 	addseq	r3, pc, r0
    81b8:	00000000 	andeq	r0, r0, r0
    81bc:	62000000 	andvs	r0, r0, #0
    81c0:	9808006e 	stmdals	r8, {r1, r2, r3, r5, r6}
    81c4:	0308006e 	movweq	r0, #32878	; 0x806e
    81c8:	9f640800 	svcls	0x00640800
    81cc:	08006eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, sp, lr}
    81d0:	08006ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
    81d4:	64080003 	strvs	r0, [r8], #-3
    81d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    81dc:	00000000 	andeq	r0, r0, r0
    81e0:	006e6200 	rsbeq	r6, lr, r0, lsl #4
    81e4:	006e9808 	rsbeq	r9, lr, r8, lsl #16
    81e8:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    81ec:	08006eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, sp, lr}
    81f0:	08006ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
    81f4:	00550001 	subseq	r0, r5, r1
    81f8:	00000000 	andeq	r0, r0, r0
    81fc:	62000000 	andvs	r0, r0, #0
    8200:	9808006e 	stmdals	r8, {r1, r2, r3, r5, r6}
    8204:	0108006e 	tsteq	r8, lr, rrx
    8208:	6eb65400 	cdpvs	4, 11, cr5, cr6, cr0, {0}
    820c:	6ee20800 	cdpvs	8, 14, cr0, cr2, cr0, {0}
    8210:	00010800 	andeq	r0, r1, r0, lsl #16
    8214:	00000054 	andeq	r0, r0, r4, asr r0
    8218:	00000000 	andeq	r0, r0, r0
    821c:	006f3c00 	rsbeq	r3, pc, r0, lsl #24
    8220:	006f5408 	rsbeq	r5, pc, r8, lsl #8
    8224:	50000108 	andpl	r0, r0, r8, lsl #2
    8228:	08006f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, sp, lr}
    822c:	08006fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    8230:	ee540001 	cdp	0, 5, cr0, cr4, cr1, {0}
    8234:	f008006f 			; <UNDEFINED> instruction: 0xf008006f
    8238:	0108006f 	tsteq	r8, pc, rrx
    823c:	6ff05000 	svcvs	0x00f05000
    8240:	6ffa0800 	svcvs	0x00fa0800
    8244:	00010800 	andeq	r0, r1, r0, lsl #16
    8248:	006ffa54 	rsbeq	pc, pc, r4, asr sl	; <UNPREDICTABLE>
    824c:	00700108 	rsbseq	r0, r0, r8, lsl #2
    8250:	50000108 	andpl	r0, r0, r8, lsl #2
    8254:	08007001 	stmdaeq	r0, {r0, ip, sp, lr}
    8258:	08007020 	stmdaeq	r0, {r5, ip, sp, lr}
    825c:	00540001 	subseq	r0, r4, r1
    8260:	00000000 	andeq	r0, r0, r0
    8264:	42000000 	andmi	r0, r0, #0
    8268:	dd08006f 	stcle	0, cr0, [r8, #-444]	; 0xfffffe44
    826c:	0108006f 	tsteq	r8, pc, rrx
    8270:	6fee5100 	svcvs	0x00ee5100
    8274:	6ff70800 	svcvs	0x00f70800
    8278:	00010800 	andeq	r0, r1, r0, lsl #16
    827c:	006ffa51 	rsbeq	pc, pc, r1, asr sl	; <UNPREDICTABLE>
    8280:	00700108 	rsbseq	r0, r0, r8, lsl #2
    8284:	51000108 	tstpl	r0, r8, lsl #2
    8288:	08007004 	stmdaeq	r0, {r2, ip, sp, lr}
    828c:	08007009 	stmdaeq	r0, {r0, r3, ip, sp, lr}
    8290:	0c510001 	mrrceq	0, 0, r0, r1, cr1
    8294:	20080070 	andcs	r0, r8, r0, ror r0
    8298:	01080070 	tsteq	r8, r0, ror r0
    829c:	00005100 	andeq	r5, r0, r0, lsl #2
    82a0:	00000000 	andeq	r0, r0, r0
    82a4:	6f440000 	svcvs	0x00440000
    82a8:	6fa40800 	svcvs	0x00a40800
    82ac:	00010800 	andeq	r0, r1, r0, lsl #16
    82b0:	006fee53 	rsbeq	lr, pc, r3, asr lr	; <UNPREDICTABLE>
    82b4:	006ff408 	rsbeq	pc, pc, r8, lsl #8
    82b8:	53000108 	movwpl	r0, #264	; 0x108
    82bc:	08006ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    82c0:	08007000 	stmdaeq	r0, {ip, sp, lr}
    82c4:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    82c8:	0e080070 	mcreq	0, 0, r0, cr8, cr0, {3}
    82cc:	01080070 	tsteq	r8, r0, ror r0
    82d0:	00005300 	andeq	r5, r0, r0, lsl #6
    82d4:	00000000 	andeq	r0, r0, r0
    82d8:	70200000 	eorvc	r0, r0, r0
    82dc:	702a0800 	eorvc	r0, sl, r0, lsl #16
    82e0:	00010800 	andeq	r0, r1, r0, lsl #16
    82e4:	00702a50 	rsbseq	r2, r0, r0, asr sl
    82e8:	00703208 	rsbseq	r3, r0, r8, lsl #4
    82ec:	f3000408 	vshl.u8	d0, d8, d0
    82f0:	009f5001 	addseq	r5, pc, r1
    82f4:	00000000 	andeq	r0, r0, r0
    82f8:	24000000 	strcs	r0, [r0], #-0
    82fc:	2f080070 	svccs	0x00080070
    8300:	01080070 	tsteq	r8, r0, ror r0
    8304:	00005300 	andeq	r5, r0, r0, lsl #6
    8308:	00000000 	andeq	r0, r0, r0
    830c:	70340000 	eorsvc	r0, r4, r0
    8310:	707f0800 	rsbsvc	r0, pc, r0, lsl #16
    8314:	00010800 	andeq	r0, r1, r0, lsl #16
    8318:	00707f50 	rsbseq	r7, r0, r0, asr pc
    831c:	00708608 	rsbseq	r8, r0, r8, lsl #12
    8320:	f3000408 	vshl.u8	d0, d8, d0
    8324:	869f5001 	ldrhi	r5, [pc], r1
    8328:	89080070 	stmdbhi	r8, {r4, r5, r6}
    832c:	01080070 	tsteq	r8, r0, ror r0
    8330:	70895000 	addvc	r5, r9, r0
    8334:	70900800 	addsvc	r0, r0, r0, lsl #16
    8338:	00040800 	andeq	r0, r4, r0, lsl #16
    833c:	9f5001f3 	svcls	0x005001f3
    8340:	08007090 	stmdaeq	r0, {r4, r7, ip, sp, lr}
    8344:	080070b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, ip, sp, lr}
    8348:	b7500001 	ldrblt	r0, [r0, -r1]
    834c:	be080070 	mcrlt	0, 0, r0, cr8, cr0, {3}
    8350:	04080070 	streq	r0, [r8], #-112	; 0xffffff90
    8354:	5001f300 	andpl	pc, r1, r0, lsl #6
    8358:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    835c:	00000000 	andeq	r0, r0, r0
    8360:	00704e00 	rsbseq	r4, r0, r0, lsl #28
    8364:	00707f08 	rsbseq	r7, r0, r8, lsl #30
    8368:	50000108 	andpl	r0, r0, r8, lsl #2
    836c:	0800707f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, ip, sp, lr}
    8370:	08007086 	stmdaeq	r0, {r1, r2, r7, ip, sp, lr}
    8374:	01f30004 	mvnseq	r0, r4
    8378:	70869f50 	addvc	r9, r6, r0, asr pc
    837c:	70890800 	addvc	r0, r9, r0, lsl #16
    8380:	00010800 	andeq	r0, r1, r0, lsl #16
    8384:	00708950 	rsbseq	r8, r0, r0, asr r9
    8388:	00709008 	rsbseq	r9, r0, r8
    838c:	f3000408 	vshl.u8	d0, d8, d0
    8390:	909f5001 	addsls	r5, pc, r1
    8394:	b7080070 	smlsdxlt	r8, r0, r0, r0
    8398:	01080070 	tsteq	r8, r0, ror r0
    839c:	70b75000 	adcsvc	r5, r7, r0
    83a0:	70be0800 	adcsvc	r0, lr, r0, lsl #16
    83a4:	00040800 	andeq	r0, r4, r0, lsl #16
    83a8:	9f5001f3 	svcls	0x005001f3
	...
    83b4:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
    83b8:	08007113 	stmdaeq	r0, {r0, r1, r4, r8, ip, sp, lr}
    83bc:	13500001 	cmpne	r0, #1
    83c0:	1a080071 	bne	20858c <_Min_Stack_Size+0x20818c>
    83c4:	04080071 	streq	r0, [r8], #-113	; 0xffffff8f
    83c8:	5001f300 	andpl	pc, r1, r0, lsl #6
    83cc:	00711a9f 			; <UNDEFINED> instruction: 0x00711a9f
    83d0:	00711d08 	rsbseq	r1, r1, r8, lsl #26
    83d4:	50000108 	andpl	r0, r0, r8, lsl #2
    83d8:	0800711d 	stmdaeq	r0, {r0, r2, r3, r4, r8, ip, sp, lr}
    83dc:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    83e0:	01f30004 	mvnseq	r0, r4
    83e4:	71249f50 			; <UNDEFINED> instruction: 0x71249f50
    83e8:	714b0800 	cmpvc	fp, r0, lsl #16
    83ec:	00010800 	andeq	r0, r1, r0, lsl #16
    83f0:	00714b50 	rsbseq	r4, r1, r0, asr fp
    83f4:	00715208 	rsbseq	r5, r1, r8, lsl #4
    83f8:	f3000408 	vshl.u8	d0, d8, d0
    83fc:	009f5001 	addseq	r5, pc, r1
    8400:	00000000 	andeq	r0, r0, r0
    8404:	e2000000 	and	r0, r0, #0
    8408:	13080070 	movwne	r0, #32880	; 0x8070
    840c:	01080071 	tsteq	r8, r1, ror r0
    8410:	71135000 	tstvc	r3, r0
    8414:	711a0800 	tstvc	sl, r0, lsl #16
    8418:	00040800 	andeq	r0, r4, r0, lsl #16
    841c:	9f5001f3 	svcls	0x005001f3
    8420:	0800711a 	stmdaeq	r0, {r1, r3, r4, r8, ip, sp, lr}
    8424:	0800711d 	stmdaeq	r0, {r0, r2, r3, r4, r8, ip, sp, lr}
    8428:	1d500001 	ldclne	0, cr0, [r0, #-4]
    842c:	24080071 	strcs	r0, [r8], #-113	; 0xffffff8f
    8430:	04080071 	streq	r0, [r8], #-113	; 0xffffff8f
    8434:	5001f300 	andpl	pc, r1, r0, lsl #6
    8438:	0071249f 			; <UNDEFINED> instruction: 0x0071249f
    843c:	00714b08 	rsbseq	r4, r1, r8, lsl #22
    8440:	50000108 	andpl	r0, r0, r8, lsl #2
    8444:	0800714b 	stmdaeq	r0, {r0, r1, r3, r6, r8, ip, sp, lr}
    8448:	08007152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp, lr}
    844c:	01f30004 	mvnseq	r0, r4
    8450:	00009f50 	andeq	r9, r0, r0, asr pc
    8454:	00000000 	andeq	r0, r0, r0
    8458:	71540000 	cmpvc	r4, r0
    845c:	71ab0800 			; <UNDEFINED> instruction: 0x71ab0800
    8460:	00010800 	andeq	r0, r1, r0, lsl #16
    8464:	0071ab50 	rsbseq	sl, r1, r0, asr fp
    8468:	0071b208 	rsbseq	fp, r1, r8, lsl #4
    846c:	f3000408 	vshl.u8	d0, d8, d0
    8470:	b29f5001 	addslt	r5, pc, #1
    8474:	f9080071 			; <UNDEFINED> instruction: 0xf9080071
    8478:	01080071 	tsteq	r8, r1, ror r0
    847c:	71f95000 	mvnsvc	r5, r0
    8480:	72000800 	andvc	r0, r0, #0, 16
    8484:	00040800 	andeq	r0, r4, r0, lsl #16
    8488:	9f5001f3 	svcls	0x005001f3
    848c:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    8490:	08007211 	stmdaeq	r0, {r0, r4, r9, ip, sp, lr}
    8494:	11500001 	cmpne	r0, r1
    8498:	14080072 	strne	r0, [r8], #-114	; 0xffffff8e
    849c:	04080072 	streq	r0, [r8], #-114	; 0xffffff8e
    84a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    84a4:	0072149f 			; <UNDEFINED> instruction: 0x0072149f
    84a8:	00722408 	rsbseq	r2, r2, r8, lsl #8
    84ac:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    84b8:	0800717a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    84bc:	080071ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, ip, sp, lr}
    84c0:	ab500001 	blge	14084cc <_Min_Stack_Size+0x14080cc>
    84c4:	ac080071 	stcge	0, cr0, [r8], {113}	; 0x71
    84c8:	04080071 	streq	r0, [r8], #-113	; 0xffffff8f
    84cc:	5001f300 	andpl	pc, r1, r0, lsl #6
    84d0:	0071b29f 			; <UNDEFINED> instruction: 0x0071b29f
    84d4:	0071bc08 	rsbseq	fp, r1, r8, lsl #24
    84d8:	50000108 	andpl	r0, r0, r8, lsl #2
    84dc:	080071ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, ip, sp, lr}
    84e0:	080071f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, ip, sp, lr}
    84e4:	f9500001 			; <UNDEFINED> instruction: 0xf9500001
    84e8:	00080071 	andeq	r0, r8, r1, ror r0
    84ec:	04080072 	streq	r0, [r8], #-114	; 0xffffff8e
    84f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    84f4:	0072009f 			; <UNDEFINED> instruction: 0x0072009f
    84f8:	00721108 	rsbseq	r1, r2, r8, lsl #2
    84fc:	50000108 	andpl	r0, r0, r8, lsl #2
    8500:	08007211 	stmdaeq	r0, {r0, r4, r9, ip, sp, lr}
    8504:	08007214 	stmdaeq	r0, {r2, r4, r9, ip, sp, lr}
    8508:	01f30004 	mvnseq	r0, r4
    850c:	00009f50 	andeq	r9, r0, r0, asr pc
    8510:	00000000 	andeq	r0, r0, r0
    8514:	71820000 	orrvc	r0, r2, r0
    8518:	71ab0800 			; <UNDEFINED> instruction: 0x71ab0800
    851c:	00010800 	andeq	r0, r1, r0, lsl #16
    8520:	0071ab50 	rsbseq	sl, r1, r0, asr fp
    8524:	0071ac08 	rsbseq	sl, r1, r8, lsl #24
    8528:	f3000408 	vshl.u8	d0, d8, d0
    852c:	ce9f5001 	cdpgt	0, 9, cr5, cr15, cr1, {0}
    8530:	f9080071 			; <UNDEFINED> instruction: 0xf9080071
    8534:	01080071 	tsteq	r8, r1, ror r0
    8538:	71f95000 	mvnsvc	r5, r0
    853c:	72000800 	andvc	r0, r0, #0, 16
    8540:	00040800 	andeq	r0, r4, r0, lsl #16
    8544:	9f5001f3 	svcls	0x005001f3
    8548:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    854c:	08007211 	stmdaeq	r0, {r0, r4, r9, ip, sp, lr}
    8550:	11500001 	cmpne	r0, r1
    8554:	14080072 	strne	r0, [r8], #-114	; 0xffffff8e
    8558:	04080072 	streq	r0, [r8], #-114	; 0xffffff8e
    855c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8560:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8564:	00000000 	andeq	r0, r0, r0
    8568:	00722400 	rsbseq	r2, r2, r0, lsl #8
    856c:	00722808 	rsbseq	r2, r2, r8, lsl #16
    8570:	50000108 	andpl	r0, r0, r8, lsl #2
    8574:	08007228 	stmdaeq	r0, {r3, r5, r9, ip, sp, lr}
    8578:	0800722a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp, lr}
    857c:	01f30004 	mvnseq	r0, r4
    8580:	00009f50 	andeq	r9, r0, r0, asr pc
    8584:	00000000 	andeq	r0, r0, r0
    8588:	722c0000 	eorvc	r0, ip, #0
    858c:	722e0800 	eorvc	r0, lr, #0, 16
    8590:	00010800 	andeq	r0, r1, r0, lsl #16
    8594:	00722e50 	rsbseq	r2, r2, r0, asr lr
    8598:	00723008 	rsbseq	r3, r2, r8
    859c:	f3000408 	vshl.u8	d0, d8, d0
    85a0:	009f5001 	addseq	r5, pc, r1
    85a4:	00000000 	andeq	r0, r0, r0
    85a8:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    85ac:	c2080072 	andgt	r0, r8, #114	; 0x72
    85b0:	06080072 			; <UNDEFINED> instruction: 0x06080072
    85b4:	002c0300 	eoreq	r0, ip, r0, lsl #6
    85b8:	009f2000 	addseq	r2, pc, r0
    85bc:	00000000 	andeq	r0, r0, r0
    85c0:	e0000000 	and	r0, r0, r0
    85c4:	f8080072 			; <UNDEFINED> instruction: 0xf8080072
    85c8:	01080072 	tsteq	r8, r2, ror r0
    85cc:	72f85000 	rscsvc	r5, r8, #0
    85d0:	731a0800 	tstvc	sl, #0, 16
    85d4:	00040800 	andeq	r0, r4, r0, lsl #16
    85d8:	9f5001f3 	svcls	0x005001f3
    85dc:	0800731a 	stmdaeq	r0, {r1, r3, r4, r8, r9, ip, sp, lr}
    85e0:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
    85e4:	00500001 	subseq	r0, r0, r1
    85e8:	00000000 	andeq	r0, r0, r0
    85ec:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    85f0:	62080073 	andvs	r0, r8, #115	; 0x73
    85f4:	01080073 	tsteq	r8, r3, ror r0
    85f8:	73625000 	cmnvc	r2, #0
    85fc:	73740800 	cmnvc	r4, #0, 16
    8600:	00040800 	andeq	r0, r4, r0, lsl #16
    8604:	9f5001f3 	svcls	0x005001f3
	...
    8610:	08007374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    8614:	0800737e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    8618:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
    861c:	90080073 	andls	r0, r8, r3, ror r0
    8620:	04080073 	streq	r0, [r8], #-115	; 0xffffff8d
    8624:	5001f300 	andpl	pc, r1, r0, lsl #6
    8628:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    862c:	00000000 	andeq	r0, r0, r0
    8630:	00739000 	rsbseq	r9, r3, r0
    8634:	00739a08 	rsbseq	r9, r3, r8, lsl #20
    8638:	50000108 	andpl	r0, r0, r8, lsl #2
    863c:	0800739a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, ip, sp, lr}
    8640:	080073ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr}
    8644:	01f30004 	mvnseq	r0, r4
    8648:	00009f50 	andeq	r9, r0, r0, asr pc
    864c:	00000000 	andeq	r0, r0, r0
    8650:	73ac0000 			; <UNDEFINED> instruction: 0x73ac0000
    8654:	73da0800 	bicsvc	r0, sl, #0, 16
    8658:	00010800 	andeq	r0, r1, r0, lsl #16
    865c:	0073da50 	rsbseq	sp, r3, r0, asr sl
    8660:	0073ee08 	rsbseq	lr, r3, r8, lsl #28
    8664:	f3000408 	vshl.u8	d0, d8, d0
    8668:	ee9f5001 	cdp	0, 9, cr5, cr15, cr1, {0}
    866c:	f6080073 			; <UNDEFINED> instruction: 0xf6080073
    8670:	01080073 	tsteq	r8, r3, ror r0
    8674:	73f65000 	mvnsvc	r5, #0
    8678:	74240800 	strtvc	r0, [r4], #-2048	; 0xfffff800
    867c:	00040800 	andeq	r0, r4, r0, lsl #16
    8680:	9f5001f3 	svcls	0x005001f3
	...
    868c:	080073ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr}
    8690:	080073e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr}
    8694:	e0510001 	subs	r0, r1, r1
    8698:	ee080073 	mcr	0, 0, r0, cr8, cr3, {3}
    869c:	04080073 	streq	r0, [r8], #-115	; 0xffffff8d
    86a0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    86a4:	0073ee9f 			; <UNDEFINED> instruction: 0x0073ee9f
    86a8:	0073fc08 	rsbseq	pc, r3, r8, lsl #24
    86ac:	51000108 	tstpl	r0, r8, lsl #2
    86b0:	080073fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
    86b4:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
    86b8:	01f30004 	mvnseq	r0, r4
    86bc:	00009f51 	andeq	r9, r0, r1, asr pc
    86c0:	00000000 	andeq	r0, r0, r0
    86c4:	74240000 	strtvc	r0, [r4], #-0
    86c8:	742e0800 	strtvc	r0, [lr], #-2048	; 0xfffff800
    86cc:	00010800 	andeq	r0, r1, r0, lsl #16
    86d0:	00742e50 	rsbseq	r2, r4, r0, asr lr
    86d4:	00743808 	rsbseq	r3, r4, r8, lsl #16
    86d8:	f3000408 	vshl.u8	d0, d8, d0
    86dc:	009f5001 	addseq	r5, pc, r1
    86e0:	00000000 	andeq	r0, r0, r0
    86e4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    86e8:	fe080074 	mcr2	0, 0, r0, cr8, cr4, {3}
    86ec:	01080074 	tsteq	r8, r4, ror r0
    86f0:	74fe5000 	ldrbtvc	r5, [lr], #0
    86f4:	75480800 	strbvc	r0, [r8, #-2048]	; 0xfffff800
    86f8:	00040800 	andeq	r0, r4, r0, lsl #16
    86fc:	9f5001f3 	svcls	0x005001f3
	...
    8708:	08007514 	stmdaeq	r0, {r2, r4, r8, sl, ip, sp, lr}
    870c:	08007538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, sp, lr}
    8710:	76910002 	ldrvc	r0, [r1], r2
    8714:	08007538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, sp, lr}
    8718:	08007548 	stmdaeq	r0, {r3, r6, r8, sl, ip, sp, lr}
    871c:	767d0002 	ldrbtvc	r0, [sp], -r2
	...
    8728:	08007514 	stmdaeq	r0, {r2, r4, r8, sl, ip, sp, lr}
    872c:	0800751e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, sp, lr}
    8730:	9f300002 	svcls	0x00300002
    8734:	0800751e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, sp, lr}
    8738:	08007522 	stmdaeq	r0, {r1, r5, r8, sl, ip, sp, lr}
    873c:	00500001 	subseq	r0, r0, r1
    8740:	00000000 	andeq	r0, r0, r0
    8744:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    8748:	56080075 			; <UNDEFINED> instruction: 0x56080075
    874c:	01080075 	tsteq	r8, r5, ror r0
    8750:	75565000 	ldrbvc	r5, [r6, #-0]
    8754:	75a00800 	strvc	r0, [r0, #2048]!	; 0x800
    8758:	00040800 	andeq	r0, r4, r0, lsl #16
    875c:	9f5001f3 	svcls	0x005001f3
	...
    8768:	0800756c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp, lr}
    876c:	08007590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp, lr}
    8770:	76910002 	ldrvc	r0, [r1], r2
    8774:	08007590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp, lr}
    8778:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
    877c:	767d0002 	ldrbtvc	r0, [sp], -r2
	...
    8788:	0800756c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp, lr}
    878c:	08007576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp, lr}
    8790:	9f300002 	svcls	0x00300002
    8794:	08007576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp, lr}
    8798:	0800757a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, sl, ip, sp, lr}
    879c:	00500001 	subseq	r0, r0, r1
    87a0:	00000000 	andeq	r0, r0, r0
    87a4:	a0000000 	andge	r0, r0, r0
    87a8:	ac080075 	stcge	0, cr0, [r8], {117}	; 0x75
    87ac:	01080075 	tsteq	r8, r5, ror r0
    87b0:	75ac5000 	strvc	r5, [ip, #0]!
    87b4:	76240800 	strtvc	r0, [r4], -r0, lsl #16
    87b8:	00040800 	andeq	r0, r4, r0, lsl #16
    87bc:	9f5001f3 	svcls	0x005001f3
	...
    87c8:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
    87cc:	080075b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, ip, sp, lr}
    87d0:	b0510001 	subslt	r0, r1, r1
    87d4:	24080075 	strcs	r0, [r8], #-117	; 0xffffff8b
    87d8:	04080076 	streq	r0, [r8], #-118	; 0xffffff8a
    87dc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    87e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    87e4:	00000000 	andeq	r0, r0, r0
    87e8:	0075a000 	rsbseq	sl, r5, r0
    87ec:	0075f808 	rsbseq	pc, r5, r8, lsl #16
    87f0:	30000208 	andcc	r0, r0, r8, lsl #4
    87f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    87f8:	00000000 	andeq	r0, r0, r0
    87fc:	0075c800 	rsbseq	ip, r5, r0, lsl #16
    8800:	00761208 	rsbseq	r1, r6, r8, lsl #4
    8804:	91000208 	tstls	r0, r8, lsl #4
    8808:	0076126a 	rsbseq	r1, r6, sl, ror #4
    880c:	00762408 	rsbseq	r2, r6, r8, lsl #8
    8810:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    8814:	0000006a 	andeq	r0, r0, sl, rrx
    8818:	00000000 	andeq	r0, r0, r0
    881c:	0075c800 	rsbseq	ip, r5, r0, lsl #16
    8820:	0075d008 	rsbseq	sp, r5, r8
    8824:	30000208 	andcc	r0, r0, r8, lsl #4
    8828:	0075d09f 			; <UNDEFINED> instruction: 0x0075d09f
    882c:	0075d408 	rsbseq	sp, r5, r8, lsl #8
    8830:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    883c:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
    8840:	08007612 	stmdaeq	r0, {r1, r4, r9, sl, ip, sp, lr}
    8844:	00550001 	subseq	r0, r5, r1
    8848:	00000000 	andeq	r0, r0, r0
    884c:	dc000000 	stcle	0, cr0, [r0], {-0}
    8850:	e8080075 	stmda	r8, {r0, r2, r4, r5, r6}
    8854:	02080075 	andeq	r0, r8, #117	; 0x75
    8858:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    885c:	ec080075 	stc	0, cr0, [r8], {117}	; 0x75
    8860:	01080075 	tsteq	r8, r5, ror r0
    8864:	00005000 	andeq	r5, r0, r0
    8868:	00000000 	andeq	r0, r0, r0
    886c:	76240000 	strtvc	r0, [r4], -r0
    8870:	76270800 	strtvc	r0, [r7], -r0, lsl #16
    8874:	00010800 	andeq	r0, r1, r0, lsl #16
    8878:	00762750 	rsbseq	r2, r6, r0, asr r7
    887c:	00762808 	rsbseq	r2, r6, r8, lsl #16
    8880:	f3000408 	vshl.u8	d0, d8, d0
    8884:	009f5001 	addseq	r5, pc, r1
    8888:	00000000 	andeq	r0, r0, r0
    888c:	96000000 	strls	r0, [r0], -r0
    8890:	fe080076 	mcr2	0, 0, r0, cr8, cr6, {3}
    8894:	06080076 			; <UNDEFINED> instruction: 0x06080076
    8898:	00880300 	addeq	r0, r8, r0, lsl #6
    889c:	009f2000 	addseq	r2, pc, r0
    88a0:	00000000 	andeq	r0, r0, r0
    88a4:	70000000 	andvc	r0, r0, r0
    88a8:	90080077 	andls	r0, r8, r7, ror r0
    88ac:	01080077 	tsteq	r8, r7, ror r0
    88b0:	77905000 	ldrvc	r5, [r0, r0]
    88b4:	78940800 	ldmvc	r4, {fp}
    88b8:	00040800 	andeq	r0, r4, r0, lsl #16
    88bc:	9f5001f3 	svcls	0x005001f3
	...
    88c8:	08007770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, ip, sp, lr}
    88cc:	0800778c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, ip, sp, lr}
    88d0:	8c510001 	mrrchi	0, 0, r0, r1, cr1
    88d4:	94080077 	strls	r0, [r8], #-119	; 0xffffff89
    88d8:	04080078 	streq	r0, [r8], #-120	; 0xffffff88
    88dc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    88e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    88e4:	00000000 	andeq	r0, r0, r0
    88e8:	00777000 	rsbseq	r7, r7, r0
    88ec:	00778808 	rsbseq	r8, r7, r8, lsl #16
    88f0:	52000108 	andpl	r0, r0, #8, 2
    88f4:	08007788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, sp, lr}
    88f8:	08007793 	stmdaeq	r0, {r0, r1, r4, r7, r8, r9, sl, ip, sp, lr}
    88fc:	007d0003 	rsbseq	r0, sp, r3
    8900:	00779306 	rsbseq	r9, r7, r6, lsl #6
    8904:	00789408 	rsbseq	r9, r8, r8, lsl #8
    8908:	f3000408 	vshl.u8	d0, d8, d0
    890c:	009f5201 	addseq	r5, pc, r1, lsl #4
    8910:	00000000 	andeq	r0, r0, r0
    8914:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    8918:	76080077 			; <UNDEFINED> instruction: 0x76080077
    891c:	03080078 	movweq	r0, #32888	; 0x8078
    8920:	7fbf9100 	svcvc	0x00bf9100
    8924:	08007876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, sp, lr}
    8928:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
    892c:	bf7d0003 	svclt	0x007d0003
    8930:	0000007f 	andeq	r0, r0, pc, ror r0
    8934:	00000000 	andeq	r0, r0, r0
    8938:	00777e00 	rsbseq	r7, r7, r0, lsl #28
    893c:	00779408 	rsbseq	r9, r7, r8, lsl #8
    8940:	30000208 	andcc	r0, r0, r8, lsl #4
    8944:	0077949f 			; <UNDEFINED> instruction: 0x0077949f
    8948:	00779608 	rsbseq	r9, r7, r8, lsl #12
    894c:	50000108 	andpl	r0, r0, r8, lsl #2
    8950:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
    8954:	0800779e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
    8958:	00500001 	subseq	r0, r0, r1
    895c:	00000000 	andeq	r0, r0, r0
    8960:	94000000 	strls	r0, [r0], #-0
    8964:	b6080078 			; <UNDEFINED> instruction: 0xb6080078
    8968:	01080078 	tsteq	r8, r8, ror r0
    896c:	78b65000 	ldmvc	r6!, {ip, lr}
    8970:	79c00800 	stmibvc	r0, {fp}^
    8974:	00040800 	andeq	r0, r4, r0, lsl #16
    8978:	9f5001f3 	svcls	0x005001f3
	...
    8984:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
    8988:	080078b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, ip, sp, lr}
    898c:	b2510001 	subslt	r0, r1, #1
    8990:	c0080078 	andgt	r0, r8, r8, ror r0
    8994:	04080079 	streq	r0, [r8], #-121	; 0xffffff87
    8998:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    899c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    89a0:	00000000 	andeq	r0, r0, r0
    89a4:	00789400 	rsbseq	r9, r8, r0, lsl #8
    89a8:	0078ba08 	rsbseq	fp, r8, r8, lsl #20
    89ac:	30000208 	andcc	r0, r0, r8, lsl #4
    89b0:	0078ba9f 			; <UNDEFINED> instruction: 0x0078ba9f
    89b4:	0078bc08 	rsbseq	fp, r8, r8, lsl #24
    89b8:	50000108 	andpl	r0, r0, r8, lsl #2
    89bc:	080078c6 	stmdaeq	r0, {r1, r2, r6, r7, fp, ip, sp, lr}
    89c0:	080078c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp, lr}
    89c4:	00500001 	subseq	r0, r0, r1
    89c8:	00000000 	andeq	r0, r0, r0
    89cc:	c0000000 	andgt	r0, r0, r0
    89d0:	da080079 	ble	208bbc <_Min_Stack_Size+0x2087bc>
    89d4:	01080079 	tsteq	r8, r9, ror r0
    89d8:	79da5000 	ldmibvc	sl, {ip, lr}^
    89dc:	7adc0800 	bvc	ff70a9e4 <_estack+0xdf6da9e4>
    89e0:	00040800 	andeq	r0, r4, r0, lsl #16
    89e4:	9f5001f3 	svcls	0x005001f3
	...
    89f0:	080079c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, lr}
    89f4:	080079d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, ip, sp, lr}
    89f8:	d6510001 	ldrble	r0, [r1], -r1
    89fc:	dc080079 	stcle	0, cr0, [r8], {121}	; 0x79
    8a00:	0408007a 	streq	r0, [r8], #-122	; 0xffffff86
    8a04:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8a08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8a0c:	00000000 	andeq	r0, r0, r0
    8a10:	0079c000 	rsbseq	ip, r9, r0
    8a14:	0079d208 	rsbseq	sp, r9, r8, lsl #4
    8a18:	52000108 	andpl	r0, r0, #8, 2
    8a1c:	080079d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, ip, sp, lr}
    8a20:	080079dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}
    8a24:	007d0002 	rsbseq	r0, sp, r2
    8a28:	080079dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}
    8a2c:	08007adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
    8a30:	01f30004 	mvnseq	r0, r4
    8a34:	00009f52 	andeq	r9, r0, r2, asr pc
    8a38:	00000000 	andeq	r0, r0, r0
    8a3c:	79c00000 	stmibvc	r0, {}^	; <UNPREDICTABLE>
    8a40:	79d80800 	ldmibvc	r8, {fp}^
    8a44:	00010800 	andeq	r0, r1, r0, lsl #16
    8a48:	0079d853 	rsbseq	sp, r9, r3, asr r8
    8a4c:	007adc08 	rsbseq	sp, sl, r8, lsl #24
    8a50:	f3000408 	vshl.u8	d0, d8, d0
    8a54:	009f5301 	addseq	r5, pc, r1, lsl #6
    8a58:	00000000 	andeq	r0, r0, r0
    8a5c:	c0000000 	andgt	r0, r0, r0
    8a60:	de080079 	mcrle	0, 0, r0, cr8, cr9, {3}
    8a64:	02080079 	andeq	r0, r8, #121	; 0x79
    8a68:	de9f3000 	cdple	0, 9, cr3, cr15, cr0, {0}
    8a6c:	e0080079 	and	r0, r8, r9, ror r0
    8a70:	01080079 	tsteq	r8, r9, ror r0
    8a74:	79e65000 	stmibvc	r6!, {ip, lr}^
    8a78:	79e80800 	stmibvc	r8!, {fp}^
    8a7c:	00010800 	andeq	r0, r1, r0, lsl #16
    8a80:	00000050 	andeq	r0, r0, r0, asr r0
    8a84:	00000000 	andeq	r0, r0, r0
    8a88:	007adc00 	rsbseq	sp, sl, r0, lsl #24
    8a8c:	007af608 	rsbseq	pc, sl, r8, lsl #12
    8a90:	50000108 	andpl	r0, r0, r8, lsl #2
    8a94:	08007af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, ip, sp, lr}
    8a98:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
    8a9c:	01f30004 	mvnseq	r0, r4
    8aa0:	00009f50 	andeq	r9, r0, r0, asr pc
    8aa4:	00000000 	andeq	r0, r0, r0
    8aa8:	7adc0000 	bvc	ff708ab0 <_estack+0xdf6d8ab0>
    8aac:	7af20800 	bvc	ffc8aab4 <_estack+0xdfc5aab4>
    8ab0:	00010800 	andeq	r0, r1, r0, lsl #16
    8ab4:	007af251 	rsbseq	pc, sl, r1, asr r2	; <UNPREDICTABLE>
    8ab8:	007c0008 	rsbseq	r0, ip, r8
    8abc:	f3000408 	vshl.u8	d0, d8, d0
    8ac0:	009f5101 	addseq	r5, pc, r1, lsl #2
    8ac4:	00000000 	andeq	r0, r0, r0
    8ac8:	dc000000 	stcle	0, cr0, [r0], {-0}
    8acc:	ee08007a 	mcr	0, 0, r0, cr8, cr10, {3}
    8ad0:	0108007a 	tsteq	r8, sl, ror r0
    8ad4:	7aee5200 	bvc	ffb9d2dc <_estack+0xdfb6d2dc>
    8ad8:	7af90800 	bvc	ffe4aae0 <_estack+0xdfe1aae0>
    8adc:	00020800 	andeq	r0, r2, r0, lsl #16
    8ae0:	7af9007d 	bvc	ffe48cdc <_estack+0xdfe18cdc>
    8ae4:	7c000800 	stcvc	8, cr0, [r0], {-0}
    8ae8:	00040800 	andeq	r0, r4, r0, lsl #16
    8aec:	9f5201f3 	svcls	0x005201f3
	...
    8af8:	08007adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
    8afc:	08007af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp, lr}
    8b00:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    8b04:	0008007a 	andeq	r0, r8, sl, ror r0
    8b08:	0408007c 	streq	r0, [r8], #-124	; 0xffffff84
    8b0c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    8b10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8b14:	00000000 	andeq	r0, r0, r0
    8b18:	007adc00 	rsbseq	sp, sl, r0, lsl #24
    8b1c:	007afa08 	rsbseq	pc, sl, r8, lsl #20
    8b20:	30000208 	andcc	r0, r0, r8, lsl #4
    8b24:	007afa9f 			; <UNDEFINED> instruction: 0x007afa9f
    8b28:	007b0408 	rsbseq	r0, fp, r8, lsl #8
    8b2c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    8b38:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
    8b3c:	08007c03 	stmdaeq	r0, {r0, r1, sl, fp, ip, sp, lr}
    8b40:	03500001 	cmpeq	r0, #1
    8b44:	0408007c 	streq	r0, [r8], #-124	; 0xffffff84
    8b48:	0408007c 	streq	r0, [r8], #-124	; 0xffffff84
    8b4c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8b50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8b54:	00000000 	andeq	r0, r0, r0
    8b58:	007ce400 	rsbseq	lr, ip, r0, lsl #8
    8b5c:	007cf208 	rsbseq	pc, ip, r8, lsl #4
    8b60:	03000608 	movweq	r0, #1544	; 0x608
    8b64:	2000002c 	andcs	r0, r0, ip, lsr #32
    8b68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8b6c:	00000000 	andeq	r0, r0, r0
    8b70:	007d1000 	rsbseq	r1, sp, r0
    8b74:	007d2c08 	rsbseq	r2, sp, r8, lsl #24
    8b78:	50000108 	andpl	r0, r0, r8, lsl #2
    8b7c:	08007d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, ip, sp, lr}
    8b80:	08007d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, sp, lr}
    8b84:	60540001 	subsvs	r0, r4, r1
    8b88:	6808007d 	stmdavs	r8, {r0, r2, r3, r4, r5, r6}
    8b8c:	0308007d 	movweq	r0, #32893	; 0x807d
    8b90:	9f017400 	svcls	0x00017400
    8b94:	08007d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp, lr}
    8b98:	08007d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, sp, lr}
    8b9c:	8c540001 	mrrchi	0, 0, r0, r4, cr1
    8ba0:	9008007d 	andls	r0, r8, sp, ror r0
    8ba4:	0308007d 	movweq	r0, #32893	; 0x807d
    8ba8:	9f017400 	svcls	0x00017400
    8bac:	08007da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip, sp, lr}
    8bb0:	08007db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    8bb4:	00540001 	subseq	r0, r4, r1
    8bb8:	00000000 	andeq	r0, r0, r0
    8bbc:	10000000 	andne	r0, r0, r0
    8bc0:	2408007d 	strcs	r0, [r8], #-125	; 0xffffff83
    8bc4:	0108007d 	tsteq	r8, sp, ror r0
    8bc8:	7d245100 	stfvcs	f5, [r4, #-0]
    8bcc:	7d600800 	stclvc	8, cr0, [r0, #-0]
    8bd0:	00010800 	andeq	r0, r1, r0, lsl #16
    8bd4:	007da055 	rsbseq	sl, sp, r5, asr r0
    8bd8:	007db808 	rsbseq	fp, sp, r8, lsl #16
    8bdc:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
    8be8:	08007d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, sp, lr}
    8bec:	08007d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, ip, sp, lr}
    8bf0:	26520001 	ldrbcs	r0, [r2], -r1
    8bf4:	5208007d 	andpl	r0, r8, #125	; 0x7d
    8bf8:	0408007d 	streq	r0, [r8], #-125	; 0xffffff83
    8bfc:	5201f300 	andpl	pc, r1, #0, 6
    8c00:	007d529f 			; <UNDEFINED> instruction: 0x007d529f
    8c04:	007d5608 	rsbseq	r5, sp, r8, lsl #12
    8c08:	56000108 	strpl	r0, [r0], -r8, lsl #2
    8c0c:	08007d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp, ip, sp, lr}
    8c10:	08007d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip, sp, lr}
    8c14:	01760003 	cmneq	r6, r3
    8c18:	007da09f 			; <UNDEFINED> instruction: 0x007da09f
    8c1c:	007db808 	rsbseq	fp, sp, r8, lsl #16
    8c20:	f3000408 	vshl.u8	d0, d8, d0
    8c24:	009f5201 	addseq	r5, pc, r1, lsl #4
    8c28:	00000000 	andeq	r0, r0, r0
    8c2c:	42000000 	andmi	r0, r0, #0
    8c30:	6008007d 	andvs	r0, r8, sp, ror r0
    8c34:	0108007d 	tsteq	r8, sp, ror r0
    8c38:	7d605500 	cfstr64vc	mvdx5, [r0, #-0]
    8c3c:	7db80800 	ldcvc	8, cr0, [r8]
    8c40:	00020800 	andeq	r0, r2, r0, lsl #16
    8c44:	00006591 	muleq	r0, r1, r5
    8c48:	00000000 	andeq	r0, r0, r0
    8c4c:	7d7c0000 	ldclvc	0, cr0, [ip, #-0]
    8c50:	7d900800 	ldcvc	8, cr0, [r0]
    8c54:	00010800 	andeq	r0, r1, r0, lsl #16
    8c58:	00000055 	andeq	r0, r0, r5, asr r0
    8c5c:	00000000 	andeq	r0, r0, r0
    8c60:	007db800 	rsbseq	fp, sp, r0, lsl #16
    8c64:	007dd408 	rsbseq	sp, sp, r8, lsl #8
    8c68:	50000108 	andpl	r0, r0, r8, lsl #2
    8c6c:	08007dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp, lr}
    8c70:	08007e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, sp, lr}
    8c74:	00540001 	subseq	r0, r4, r1
    8c78:	00000000 	andeq	r0, r0, r0
    8c7c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    8c80:	ce08007d 	mcrgt	0, 0, r0, cr8, cr13, {3}
    8c84:	0108007d 	tsteq	r8, sp, ror r0
    8c88:	7dce5100 	stfvce	f5, [lr]
    8c8c:	7dd20800 	ldclvc	8, cr0, [r2]
    8c90:	00040800 	andeq	r0, r4, r0, lsl #16
    8c94:	9f5101f3 	svcls	0x005101f3
    8c98:	08007dd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, fp, ip, sp, lr}
    8c9c:	08007dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    8ca0:	48560001 	ldmdami	r6, {r0}^
    8ca4:	6008007e 	andvs	r0, r8, lr, ror r0
    8ca8:	0108007e 	tsteq	r8, lr, ror r0
    8cac:	00005600 	andeq	r5, r0, r0, lsl #12
    8cb0:	00000000 	andeq	r0, r0, r0
    8cb4:	7db80000 	ldcvc	0, cr0, [r8]
    8cb8:	7dd00800 	ldclvc	8, cr0, [r0]
    8cbc:	00010800 	andeq	r0, r1, r0, lsl #16
    8cc0:	007dd052 	rsbseq	sp, sp, r2, asr r0
    8cc4:	007dfa08 	rsbseq	pc, sp, r8, lsl #20
    8cc8:	f3000408 	vshl.u8	d0, d8, d0
    8ccc:	fa9f5201 	blx	fe7dd4d8 <_estack+0xde7ad4d8>
    8cd0:	0608007d 			; <UNDEFINED> instruction: 0x0608007d
    8cd4:	0108007e 	tsteq	r8, lr, ror r0
    8cd8:	7e485500 	cdpvc	5, 4, cr5, cr8, cr0, {0}
    8cdc:	7e600800 	cdpvc	8, 6, cr0, cr0, cr0, {0}
    8ce0:	00040800 	andeq	r0, r4, r0, lsl #16
    8ce4:	9f5201f3 	svcls	0x005201f3
	...
    8cf0:	08007dea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    8cf4:	08007dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    8cf8:	fe560001 	cdp2	0, 5, cr0, cr6, cr1, {0}
    8cfc:	6008007d 	andvs	r0, r8, sp, ror r0
    8d00:	0208007e 	andeq	r0, r8, #126	; 0x7e
    8d04:	00659100 	rsbeq	r9, r5, r0, lsl #2
    8d08:	00000000 	andeq	r0, r0, r0
    8d0c:	10000000 	andne	r0, r0, r0
    8d10:	3a08007e 	bcc	208f10 <_Min_Stack_Size+0x208b10>
    8d14:	0108007e 	tsteq	r8, lr, ror r0
    8d18:	00005500 	andeq	r5, r0, r0, lsl #10
    8d1c:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
       4:	41480052 	qdaddmi	r0, r2, r8
       8:	564e5f4c 	strbpl	r5, [lr], -ip, asr #30
       c:	455f4349 	ldrbmi	r4, [pc, #-841]	; fffffccb <_estack+0xdffcfccb>
      10:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
      14:	51524965 	cmppl	r2, r5, ror #18
      18:	4b434c00 	blmi	10d3020 <_Min_Stack_Size+0x10d2c20>
      1c:	41430052 	qdaddmi	r0, r2, r3
      20:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
      24:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
      28:	006e5152 	rsbeq	r5, lr, r2, asr r1
      2c:	5f445650 	svcpl	0x00445650
      30:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      34:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
      38:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      3c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
      40:	43006e51 	movwmi	r6, #3665	; 0xe51
      44:	5f314e41 	svcpl	0x00314e41
      48:	5f315852 	svcpl	0x00315852
      4c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      50:	414d4400 	cmpmi	sp, r0, lsl #8
      54:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
      58:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
      5c:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
      60:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
      64:	5f334332 	svcpl	0x00334332
      68:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
      6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
      70:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
      74:	52495f38 	subpl	r5, r9, #56, 30	; 0xe0
      78:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
      7c:	5f314332 	svcpl	0x00314332
      80:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
      84:	006e5152 	rsbeq	r5, lr, r2, asr r1
      88:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      8c:	5f38746e 	svcpl	0x0038746e
      90:	544f0074 	strbpl	r0, [pc], #-116	; 98 <_Min_Heap_Size-0x168>
      94:	52455059 	subpl	r5, r5, #89	; 0x59
      98:	414d4400 	cmpmi	sp, r0, lsl #8
      9c:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
      a0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
      a4:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
      a8:	50006e51 	andpl	r6, r0, r1, asr lr
      ac:	004d4c4c 	subeq	r4, sp, ip, asr #24
      b0:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
      b4:	4c4c5000 	marmi	acc0, r5, ip
      b8:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
      bc:	4d00514c 	stfmis	f5, [r0, #-304]	; 0xfffffed0
      c0:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
      c4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      c8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
      cc:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
      d0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      d4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      d8:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      dc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      e0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      e4:	50470074 	subpl	r0, r7, r4, ror r0
      e8:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
      ec:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
      f0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
      f4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
      f8:	43545200 	cmpmi	r4, #0, 4
      fc:	616c415f 	cmnvs	ip, pc, asr r1
     100:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     104:	006e5152 	rsbeq	r5, lr, r2, asr r1
     108:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     10c:	5f52455f 	svcpl	0x0052455f
     110:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     114:	45534c00 	ldrbmi	r4, [r3, #-3072]	; 0xfffff400
     118:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     11c:	43520065 	cmpmi	r2, #101	; 0x65
     120:	734f5f43 	movtvc	r5, #65347	; 0xff43
     124:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     128:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     12c:	00746375 	rsbseq	r6, r4, r5, ror r3
     130:	5f435452 	svcpl	0x00435452
     134:	50554b57 	subspl	r4, r5, r7, asr fp
     138:	5152495f 	cmppl	r2, pc, asr r9
     13c:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     140:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     144:	006e5152 	rsbeq	r5, lr, r2, asr r1
     148:	4f494453 	svcmi	0x00494453
     14c:	5152495f 	cmppl	r2, pc, asr r9
     150:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     154:	504c3142 	subpl	r3, ip, r2, asr #2
     158:	00524e45 	subseq	r4, r2, r5, asr #28
     15c:	65746c41 	ldrbvs	r6, [r4, #-3137]!	; 0xfffff3bf
     160:	74616e72 	strbtvc	r6, [r1], #-3698	; 0xfffff18e
     164:	53550065 	cmppl	r5, #101	; 0x65
     168:	31545241 	cmpcc	r4, r1, asr #4
     16c:	5152495f 	cmppl	r2, pc, asr r9
     170:	4344006e 	movtmi	r0, #16494	; 0x406e
     174:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     178:	43520052 	cmpmi	r2, #82	; 0x52
     17c:	734f5f43 	movtvc	r5, #65347	; 0xff43
     180:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     184:	70795474 	rsbsvc	r5, r9, r4, ror r4
     188:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     18c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     190:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     194:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     198:	42006e51 	andmi	r6, r0, #1296	; 0x510
     19c:	00525253 	subseq	r5, r2, r3, asr r2
     1a0:	31424841 	cmpcc	r2, r1, asr #16
     1a4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     1a8:	52575000 	subspl	r5, r7, #0
     1ac:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     1b0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     1b4:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     1b8:	00676572 	rsbeq	r6, r7, r2, ror r5
     1bc:	5f434352 	svcpl	0x00434352
     1c0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     1c4:	00666544 	rsbeq	r6, r6, r4, asr #10
     1c8:	32425041 	subcc	r5, r2, #65	; 0x41
     1cc:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     1d0:	49534c00 	ldmdbmi	r3, {sl, fp, lr}^
     1d4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     1d8:	50530065 	subspl	r0, r3, r5, rrx
     1dc:	495f3549 	ldmdbmi	pc, {r0, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     1e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1e4:	31414d44 	cmpcc	r1, r4, asr #26
     1e8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     1ec:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     1f0:	5152495f 	cmppl	r2, pc, asr r9
     1f4:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     1f8:	5f394954 	svcpl	0x00394954
     1fc:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     200:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     204:	74534953 	ldrbvc	r4, [r3], #-2387	; 0xfffff6ad
     208:	00657461 	rsbeq	r7, r5, r1, ror #8
     20c:	5f485445 	svcpl	0x00485445
     210:	50554b57 	subspl	r4, r5, r7, asr fp
     214:	5152495f 	cmppl	r2, pc, asr r9
     218:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
     21c:	6174534c 	cmnvs	r4, ip, asr #6
     220:	48006574 	stmdami	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     224:	61434953 	cmpvs	r3, r3, asr r9
     228:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
     22c:	6f697461 	svcvs	0x00697461
     230:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
     234:	54006575 	strpl	r6, [r0], #-1397	; 0xfffffa8b
     238:	5f364d49 	svcpl	0x00364d49
     23c:	5f434144 	svcpl	0x00434144
     240:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     244:	4c4c5000 	marmi	acc0, r5, ip
     248:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     24c:	52415500 	subpl	r5, r1, #0, 10
     250:	495f3454 	ldmdbmi	pc, {r2, r4, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     254:	006e5152 	rsbeq	r5, lr, r2, asr r1
     258:	5f47544f 	svcpl	0x0047544f
     25c:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
     260:	5f50554b 	svcpl	0x0050554b
     264:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     268:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     26c:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     270:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     274:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     278:	555f384d 	ldrbpl	r3, [pc, #-2125]	; fffffa33 <_estack+0xdffcfa33>
     27c:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     280:	5f33314d 	svcpl	0x0033314d
     284:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     288:	42504100 	subsmi	r4, r0, #0, 2
     28c:	4b4c4331 	blmi	1310f58 <_Min_Stack_Size+0x1310b58>
     290:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
     294:	00726564 	rsbseq	r6, r2, r4, ror #10
     298:	20554e47 	subscs	r4, r5, r7, asr #28
     29c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     2a0:	20332e39 	eorscs	r2, r3, r9, lsr lr
     2a4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
     2a8:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
     2ac:	72702820 	rsbsvc	r2, r0, #32, 16	; 0x200000
     2b0:	6c657265 	sfmvs	f7, 2, [r5], #-404	; 0xfffffe6c
     2b4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     2b8:	6d2d2029 	stcvs	0, cr2, [sp, #-164]!	; 0xffffff5c
     2bc:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     2c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
     2c4:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     2c8:	6d2d2034 	stcvs	0, cr2, [sp, #-208]!	; 0xffffff30
     2cc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     2d0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     2d4:	2d653776 	stclcs	7, cr3, [r5, #-472]!	; 0xfffffe28
     2d8:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
     2dc:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
     2e0:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     2e4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     2e8:	2d20346d 	cfstrscs	mvf3, [r0, #-436]!	; 0xfffffe4c
     2ec:	74696c6d 	strbtvc	r6, [r9], #-3181	; 0xfffff393
     2f0:	2d656c74 	stclcs	12, cr6, [r5, #-464]!	; 0xfffffe30
     2f4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     2f8:	2d206e61 	stccs	14, cr6, [r0, #-388]!	; 0xfffffe7c
     2fc:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     300:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     304:	7570666d 	ldrbvc	r6, [r0, #-1645]!	; 0xfffff993
     308:	7670663d 			; <UNDEFINED> instruction: 0x7670663d
     30c:	70732d34 	rsbsvc	r2, r3, r4, lsr sp
     310:	3631642d 	ldrtcc	r6, [r1], -sp, lsr #8
     314:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     318:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     31c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     320:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     324:	20706674 	rsbscs	r6, r0, r4, ror r6
     328:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     32c:	4f2d2067 	svcmi	0x002d2067
     330:	4f2d2030 	svcmi	0x002d2030
     334:	732d2033 			; <UNDEFINED> instruction: 0x732d2033
     338:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     33c:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
     340:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     344:	20393963 	eorscs	r3, r9, r3, ror #18
     348:	6166662d 	cmnvs	r6, sp, lsr #12
     34c:	6d2d7473 	cfstrsvs	mvf7, [sp, #-460]!	; 0xfffffe34
     350:	20687461 	rsbcs	r7, r8, r1, ror #8
     354:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
     358:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     35c:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
     360:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     364:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     368:	6164662d 	cmnvs	r4, sp, lsr #12
     36c:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     370:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     374:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     378:	6f6e662d 	svcvs	0x006e662d
     37c:	6d6f632d 	stclvs	3, cr6, [pc, #-180]!	; 2d0 <_Min_Heap_Size+0xd0>
     380:	206e6f6d 	rsbcs	r6, lr, sp, ror #30
     384:	61702d2d 	cmnvs	r0, sp, lsr #26
     388:	206d6172 	rsbcs	r6, sp, r2, ror r1
     38c:	2d78616d 	ldfcse	f6, [r8, #-436]!	; 0xfffffe4c
     390:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     394:	692d656e 	pushvs	{r1, r2, r3, r5, r6, r8, sl, sp, lr}
     398:	736e736e 	cmnvc	lr, #-1207959551	; 0xb8000001
     39c:	6e69732d 	cdpvs	3, 6, cr7, cr9, cr13, {1}
     3a0:	3d656c67 	stclcc	12, cr6, [r5, #-412]!	; 0xfffffe64
     3a4:	30303031 	eorscc	r3, r0, r1, lsr r0
     3a8:	50534f00 	subspl	r4, r3, r0, lsl #30
     3ac:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     3b0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff4b8 <_estack+0xdffcf4b8>
     3b4:	33746e69 	cmncc	r4, #1680	; 0x690
     3b8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     3bc:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     3c0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     3c4:	5152495f 	cmppl	r2, pc, asr r9
     3c8:	682f006e 	stmdavs	pc!, {r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
     3cc:	2f656d6f 	svccs	0x00656d6f
     3d0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     3d4:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
     3d8:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
     3dc:	6170736b 	cmnvs	r0, fp, ror #6
     3e0:	502f6563 	eorpl	r6, pc, r3, ror #10
     3e4:	4b2e452e 	blmi	b918a4 <_Min_Stack_Size+0xb914a4>
     3e8:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
     3ec:	6f72502f 	svcvs	0x0072502f
     3f0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     3f4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     3f8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     3fc:	685f3932 	ldmdavs	pc, {r1, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     400:	6f6c6c65 	svcvs	0x006c6c65
     404:	6c726f77 	ldclvs	15, cr6, [r2], #-476	; 0xfffffe24
     408:	72532f64 	subsvc	r2, r3, #100, 30	; 0x190
     40c:	616d2f63 	cmnvs	sp, r3, ror #30
     410:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
     414:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     418:	43435f38 	movtmi	r5, #16184	; 0x3f38
     41c:	5152495f 	cmppl	r2, pc, asr r9
     420:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
     424:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     428:	5152495f 	cmppl	r2, pc, asr r9
     42c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     430:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     434:	61657274 	smcvs	22308	; 0x5724
     438:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     43c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     440:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     444:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     448:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     44c:	43520074 	cmpmi	r2, #116	; 0x74
     450:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     454:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
     458:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     45c:	00746375 	rsbseq	r6, r4, r5, ror r3
     460:	53455348 	movtpl	r5, #21320	; 0x5348
     464:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     468:	414d4400 	cmpmi	sp, r0, lsl #8
     46c:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     470:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     474:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     478:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     47c:	5f31414d 	svcpl	0x0031414d
     480:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     484:	5f366d61 	svcpl	0x00366d61
     488:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     48c:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     490:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     494:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     498:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     49c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     4a0:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     4a4:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 4ac <_Min_Stack_Size+0xac>
     4a8:	4f454d49 	svcmi	0x00454d49
     4ac:	49005455 	stmdbmi	r0, {r0, r2, r4, r6, sl, ip, lr}
     4b0:	5f334332 	svcpl	0x00334332
     4b4:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     4b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4bc:	31494153 	cmpcc	r9, r3, asr r1
     4c0:	5152495f 	cmppl	r2, pc, asr r9
     4c4:	5053006e 	subspl	r0, r3, lr, rrx
     4c8:	495f3649 	ldmdbmi	pc, {r0, r3, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     4cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4d0:	5f4c4148 	svcpl	0x004c4148
     4d4:	4f004b4f 	svcmi	0x00004b4f
     4d8:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     4dc:	50455f53 	subpl	r5, r5, r3, asr pc
     4e0:	554f5f31 	strbpl	r5, [pc, #-3889]	; fffff5b7 <_estack+0xdffcf5b7>
     4e4:	52495f54 	subpl	r5, r9, #84, 30	; 0x150
     4e8:	53006e51 	movwpl	r6, #3665	; 0xe51
     4ec:	6c614356 	stclvs	3, cr4, [r1], #-344	; 0xfffffea8
     4f0:	52495f6c 	subpl	r5, r9, #108, 30	; 0x1b0
     4f4:	73006e51 	movwvc	r6, #3665	; 0xe51
     4f8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     4fc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     500:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     504:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     508:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
     50c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     510:	61657274 	smcvs	22308	; 0x5724
     514:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     518:	006e5152 	rsbeq	r5, lr, r2, asr r1
     51c:	31425041 	cmpcc	r2, r1, asr #32
     520:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     524:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
     528:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     52c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     530:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     534:	58545f31 	ldmdapl	r4, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     538:	5152495f 	cmppl	r2, pc, asr r9
     53c:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     540:	53523342 	cmppl	r2, #134217729	; 0x8000001
     544:	45005254 	strmi	r5, [r0, #-596]	; 0xfffffdac
     548:	31495458 	cmpcc	r9, r8, asr r4
     54c:	30315f35 	eorscc	r5, r1, r5, lsr pc
     550:	5152495f 	cmppl	r2, pc, asr r9
     554:	734f006e 	movtvc	r0, #61550	; 0xf06e
     558:	6c6c6963 	stclvs	9, cr6, [ip], #-396	; 0xfffffe74
     55c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
     560:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     564:	4c4c5000 	marmi	acc0, r5, ip
     568:	43494153 	movtmi	r4, #37203	; 0x9153
     56c:	00524746 	subseq	r4, r2, r6, asr #14
     570:	31495053 	qdaddcc	r5, r3, r9
     574:	5152495f 	cmppl	r2, pc, asr r9
     578:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     57c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     580:	61657274 	smcvs	22308	; 0x5724
     584:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     588:	006e5152 	rsbeq	r5, lr, r2, asr r1
     58c:	5f4c4148 	svcpl	0x004c4148
     590:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     594:	79547375 	ldmdbvc	r4, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
     598:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     59c:	50410066 	subpl	r0, r1, r6, rrx
     5a0:	504c3242 	subpl	r3, ip, r2, asr #4
     5a4:	00524e45 	subseq	r4, r2, r5, asr #28
     5a8:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
     5ac:	5f323374 	svcpl	0x00323374
     5b0:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
     5b4:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     5b8:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 5c0 <_Min_Stack_Size+0x1c0>
     5bc:	32314d49 	eorscc	r4, r1, #4672	; 0x1240
     5c0:	5152495f 	cmppl	r2, pc, asr r9
     5c4:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     5c8:	4b4c4342 	blmi	13112d8 <_Min_Stack_Size+0x1310ed8>
     5cc:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
     5d0:	00726564 	rsbseq	r6, r2, r4, ror #10
     5d4:	6f727245 	svcvs	0x00727245
     5d8:	61485f72 	hvcvs	34290	; 0x85f2
     5dc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     5e0:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
     5e4:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     5e8:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
     5ec:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     5f0:	5f314d49 	svcpl	0x00314d49
     5f4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5f8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5fc:	5f505342 	svcpl	0x00505342
     600:	5f44454c 	svcpl	0x0044454c
     604:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     608:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     60c:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
     610:	4f435f47 	svcmi	0x00435f47
     614:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     618:	5f34314d 	svcpl	0x0034314d
     61c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     620:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
     624:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     628:	58455f4f 	stmdapl	r5, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     62c:	435f4954 	cmpmi	pc, #84, 18	; 0x150000
     630:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
     634:	006b6361 	rsbeq	r6, fp, r1, ror #6
     638:	5f4c4148 	svcpl	0x004c4148
     63c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     640:	414d4400 	cmpmi	sp, r0, lsl #8
     644:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
     648:	006e5152 	rsbeq	r5, lr, r2, asr r1
     64c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     650:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     654:	48544500 	ldmdami	r4, {r8, sl, lr}^
     658:	5152495f 	cmppl	r2, pc, asr r9
     65c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     660:	555f314d 	ldrbpl	r3, [pc, #-333]	; 51b <_Min_Stack_Size+0x11b>
     664:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     668:	5f30314d 	svcpl	0x0030314d
     66c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     670:	414d4400 	cmpmi	sp, r0, lsl #8
     674:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     678:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     67c:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     680:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     684:	5f324332 	svcpl	0x00324332
     688:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     68c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     690:	31414d44 	cmpcc	r1, r4, asr #26
     694:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     698:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     69c:	5152495f 	cmppl	r2, pc, asr r9
     6a0:	654c006e 	strbvs	r0, [ip, #-110]	; 0xffffff92
     6a4:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     6a8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     6ac:	53550066 	cmppl	r5, #102	; 0x66
     6b0:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     6b4:	5152495f 	cmppl	r2, pc, asr r9
     6b8:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     6bc:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     6c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6c4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     6c8:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     6cc:	53006e51 	movwpl	r6, #3665	; 0xe51
     6d0:	5f324950 	svcpl	0x00324950
     6d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6d8:	414d4400 	cmpmi	sp, r0, lsl #8
     6dc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     6e0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     6e4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     6e8:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     6ec:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
     6f0:	5f4f4950 	svcpl	0x004f4950
     6f4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     6f8:	52415500 	subpl	r5, r1, #0, 10
     6fc:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     700:	006e5152 	rsbeq	r5, lr, r2, asr r1
     704:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     708:	5f58545f 	svcpl	0x0058545f
     70c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     710:	42484100 	submi	r4, r8, #0, 2
     714:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     718:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     71c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     720:	6e496b6c 	vmlsvs.f64	d22, d9, d28
     724:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     728:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     72c:	50410066 	subpl	r0, r1, r6, rrx
     730:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     734:	43005254 	movwmi	r5, #596	; 0x254
     738:	6b636f6c 	blvs	18dc4f0 <_Min_Stack_Size+0x18dc0f0>
     73c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     740:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     744:	5f53485f 	svcpl	0x0053485f
     748:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     74c:	414d4400 	cmpmi	sp, r0, lsl #8
     750:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     754:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     758:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     75c:	4c006e51 	stcmi	14, cr6, [r0], {81}	; 0x51
     760:	5f434454 	svcpl	0x00434454
     764:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     768:	53455200 	movtpl	r5, #20992	; 0x5200
     76c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     770:	52003044 	andpl	r3, r0, #68	; 0x44
     774:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     778:	31444556 	cmpcc	r4, r6, asr r5
     77c:	53455200 	movtpl	r5, #20992	; 0x5200
     780:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     784:	47003244 	strmi	r3, [r0, -r4, asr #4]
     788:	5f4f4950 	svcpl	0x004f4950
     78c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     790:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     794:	00666544 	rsbeq	r6, r6, r4, asr #10
     798:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     79c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     7a0:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
     7a4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     7a8:	00354445 	eorseq	r4, r5, r5, asr #8
     7ac:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     7b0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     7b4:	50530036 	subspl	r0, r3, r6, lsr r0
     7b8:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     7bc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7c0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     7c4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     7c8:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     7cc:	5152495f 	cmppl	r2, pc, asr r9
     7d0:	6e75006e 	cdpvs	0, 7, cr0, cr5, cr14, {3}
     7d4:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     7d8:	63206465 			; <UNDEFINED> instruction: 0x63206465
     7dc:	00726168 	rsbseq	r6, r2, r8, ror #2
     7e0:	314d4954 	cmpcc	sp, r4, asr r9
     7e4:	4b52425f 	blmi	1491168 <_Min_Stack_Size+0x1490d68>
     7e8:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     7ec:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
     7f0:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     7f4:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
     7f8:	66754278 			; <UNDEFINED> instruction: 0x66754278
     7fc:	00726566 	rsbseq	r6, r2, r6, ror #10
     800:	5f4c4148 	svcpl	0x004c4148
     804:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
     808:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     80c:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     810:	006e5152 	rsbeq	r5, lr, r2, asr r1
     814:	48534148 	ldmdami	r3, {r3, r6, r8, lr}^
     818:	474e525f 	smlsldmi	r5, lr, pc, r2	; <UNPREDICTABLE>
     81c:	5152495f 	cmppl	r2, pc, asr r9
     820:	6873006e 	ldmdavs	r3!, {r1, r2, r3, r5, r6}^
     824:	2074726f 	rsbscs	r7, r4, pc, ror #4
     828:	00746e69 	rsbseq	r6, r4, r9, ror #28
     82c:	5f505342 	svcpl	0x00505342
     830:	5f44454c 	svcpl	0x0044454c
     834:	4c006e4f 	stcmi	14, cr6, [r0], {79}	; 0x4f
     838:	00344445 	eorseq	r4, r4, r5, asr #8
     83c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     840:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     844:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     848:	545f314d 	ldrbpl	r3, [pc], #-333	; 850 <_Min_Stack_Size+0x450>
     84c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     850:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 858 <_Min_Stack_Size+0x458>
     854:	31314d49 	teqcc	r1, r9, asr #26
     858:	5152495f 	cmppl	r2, pc, asr r9
     85c:	4d46006e 	stclmi	0, cr0, [r6, #-440]	; 0xfffffe48
     860:	52495f43 	subpl	r5, r9, #268	; 0x10c
     864:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     868:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
     86c:	5152495f 	cmppl	r2, pc, asr r9
     870:	5041006e 	subpl	r0, r1, lr, rrx
     874:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     878:	682f0052 	stmdavs	pc!, {r1, r4, r6}	; <UNPREDICTABLE>
     87c:	2f656d6f 	svccs	0x00656d6f
     880:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     884:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
     888:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
     88c:	6170736b 	cmnvs	r0, fp, ror #6
     890:	502f6563 	eorpl	r6, pc, r3, ror #10
     894:	4b2e452e 	blmi	b91d54 <_Min_Stack_Size+0xb91954>
     898:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
     89c:	6f72502f 	svcvs	0x0072502f
     8a0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     8a4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     8a8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     8ac:	685f3932 	ldmdavs	pc, {r1, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     8b0:	6f6c6c65 	svcvs	0x006c6c65
     8b4:	6c726f77 	ldclvs	15, cr6, [r2], #-476	; 0xfffffe24
     8b8:	48410064 	stmdami	r1, {r2, r5, r6}^
     8bc:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
     8c0:	4c460052 	mcrrmi	0, 5, r0, r6, cr2
     8c4:	5f485341 	svcpl	0x00485341
     8c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8cc:	53455200 	movtpl	r5, #20992	; 0x5200
     8d0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     8d4:	49003344 	stmdbmi	r0, {r2, r6, r8, r9, ip, sp}
     8d8:	5f6e5152 	svcpl	0x006e5152
     8dc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     8e0:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     8e4:	5f53465f 	svcpl	0x0053465f
     8e8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8ec:	41535500 	cmpmi	r3, r0, lsl #10
     8f0:	5f325452 	svcpl	0x00325452
     8f4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8f8:	61735500 	cmnvs	r3, r0, lsl #10
     8fc:	61466567 	cmpvs	r6, r7, ror #10
     900:	5f746c75 	svcpl	0x00746c75
     904:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     908:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
     90c:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     910:	4c00524f 	sfmmi	f5, 4, [r0], {79}	; 0x4f
     914:	00334445 	eorseq	r4, r3, r5, asr #8
     918:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     91c:	5152495f 	cmppl	r2, pc, asr r9
     920:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     924:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     928:	61657274 	smcvs	22308	; 0x5724
     92c:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     930:	006e5152 	rsbeq	r5, lr, r2, asr r1
     934:	5f4c4148 	svcpl	0x004c4148
     938:	5f434352 	svcpl	0x00434352
     93c:	4363734f 	cmnmi	r3, #1006632961	; 0x3c000001
     940:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     944:	41480067 	cmpmi	r8, r7, rrx
     948:	564e5f4c 	strbpl	r5, [lr], -ip, asr #30
     94c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     950:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
     954:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     958:	5f007974 	svcpl	0x00007974
     95c:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     960:	5f363174 	svcpl	0x00363174
     964:	48410074 	stmdami	r1, {r2, r4, r5, r6}^
     968:	53523242 	cmppl	r2, #536870916	; 0x20000004
     96c:	54005254 	strpl	r5, [r0], #-596	; 0xfffffdac
     970:	5f374d49 	svcpl	0x00374d49
     974:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     978:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     97c:	5f53485f 	svcpl	0x0053485f
     980:	5f315045 	svcpl	0x00315045
     984:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     988:	006e5152 	rsbeq	r5, lr, r2, asr r1
     98c:	5f505342 	svcpl	0x00505342
     990:	5f44454c 	svcpl	0x0044454c
     994:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     998:	4e00656c 	cfsh32mi	mvfx6, mvfx0, #60
     99c:	614d6e6f 	cmpvs	sp, pc, ror #28
     9a0:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
     9a4:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
     9a8:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     9ac:	41006e51 	tstmi	r0, r1, asr lr
     9b0:	43324250 	teqmi	r2, #80, 4
     9b4:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
     9b8:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     9bc:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
     9c0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     9c4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     9c8:	6f435f6b 	svcvs	0x00435f6b
     9cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     9d0:	42504100 	subsmi	r4, r0, #0, 2
     9d4:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     9d8:	42484100 	submi	r4, r8, #0, 2
     9dc:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     9e0:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
     9e4:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xfffff0b0
     9e8:	5f504d41 	svcpl	0x00504d41
     9ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9f0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xfffff400
     9f4:	52455f43 	subpl	r5, r5, #268	; 0x10c
     9f8:	5152495f 	cmppl	r2, pc, asr r9
     9fc:	6544006e 	strbvs	r0, [r4, #-110]	; 0xffffff92
     a00:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     a04:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     a08:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     a0c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a10:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     a14:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     a18:	306d6165 	rsbcc	r6, sp, r5, ror #2
     a1c:	5152495f 	cmppl	r2, pc, asr r9
     a20:	5355006e 	cmppl	r5, #110	; 0x6e
     a24:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     a28:	5152495f 	cmppl	r2, pc, asr r9
     a2c:	5353006e 	cmppl	r3, #110	; 0x6e
     a30:	00524743 	subseq	r4, r2, r3, asr #14
     a34:	33424841 	movtcc	r4, #10305	; 0x2841
     a38:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     a3c:	49540052 	ldmdbmi	r4, {r1, r4, r6}^
     a40:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     a44:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a48:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     a4c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     a50:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     a54:	525f4c41 	subspl	r4, pc, #16640	; 0x4100
     a58:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     a5c:	6b636f6c 	blvs	18dc814 <_Min_Stack_Size+0x18dc414>
     a60:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a64:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     a68:	00524344 	subseq	r4, r2, r4, asr #6
     a6c:	4f495047 	svcmi	0x00495047
     a70:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     a74:	43435200 	movtmi	r5, #12800	; 0x3200
     a78:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     a7c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a80:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     a84:	00666544 	rsbeq	r6, r6, r4, asr #10
     a88:	494d4344 	stmdbmi	sp, {r2, r6, r8, r9, lr}^
     a8c:	5152495f 	cmppl	r2, pc, asr r9
     a90:	4155006e 	cmpmi	r5, lr, rrx
     a94:	5f375452 	svcpl	0x00375452
     a98:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a9c:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
     aa0:	5257505f 	subspl	r5, r7, #95	; 0x5f
     aa4:	455f7845 	ldrbmi	r7, [pc, #-2117]	; 267 <_Min_Heap_Size+0x67>
     aa8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     aac:	65764f65 	ldrbvs	r4, [r6, #-3941]!	; 0xfffff09b
     ab0:	69724472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, lr}^
     ab4:	41006576 	tstmi	r0, r6, ror r5
     ab8:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
     abc:	5000524e 	andpl	r5, r0, lr, asr #4
     ac0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
     ac4:	5f555046 	svcpl	0x00555046
     ac8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     acc:	43324900 	teqmi	r2, #0, 18
     ad0:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     ad4:	5152495f 	cmppl	r2, pc, asr r9
     ad8:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     adc:	52495f43 	subpl	r5, r9, #268	; 0x10c
     ae0:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     ae4:	5f32414d 	svcpl	0x0032414d
     ae8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     aec:	5f316d61 	svcpl	0x00316d61
     af0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     af4:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     af8:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     afc:	694c4954 	stmdbvs	ip, {r2, r4, r6, r8, fp, lr}^
     b00:	5f30656e 	svcpl	0x0030656e
     b04:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     b08:	43006769 	movwmi	r6, #1897	; 0x769
     b0c:	5f314e41 	svcpl	0x00314e41
     b10:	5f454353 	svcpl	0x00454353
     b14:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b18:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     b1c:	43535f32 	cmpmi	r3, #50, 30	; 0xc8
     b20:	52495f45 	subpl	r5, r9, #276	; 0x114
     b24:	52006e51 	andpl	r6, r0, #1296	; 0x510
     b28:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     b2c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b30:	5f47544f 	svcpl	0x0047544f
     b34:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
     b38:	5f50554b 	svcpl	0x0050554b
     b3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b40:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     b44:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     b48:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     b4c:	31495458 	cmpcc	r9, r8, asr r4
     b50:	5152495f 	cmppl	r2, pc, asr r9
     b54:	5953006e 	ldmdbpl	r3, {r1, r2, r3, r5, r6}^
     b58:	4b4c4353 	blmi	13118ac <_Min_Stack_Size+0x13114ac>
     b5c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     b60:	45006563 	strmi	r6, [r0, #-1379]	; 0xfffffa9d
     b64:	30495458 	subcc	r5, r9, r8, asr r4
     b68:	5152495f 	cmppl	r2, pc, asr r9
     b6c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     b70:	0072656c 	rsbseq	r6, r2, ip, ror #10
     b74:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
     b78:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     b7c:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     b80:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     b84:	73795300 	cmnvc	r9, #0, 6
     b88:	6b636954 	blvs	18db0e0 <_Min_Stack_Size+0x18dace0>
     b8c:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     b90:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     b94:	6f682f00 	svcvs	0x00682f00
     b98:	662f656d 	strtvs	r6, [pc], -sp, ror #10
     b9c:	72656572 	rsbvc	r6, r5, #478150656	; 0x1c800000
     ba0:	2f736f74 	svccs	0x00736f74
     ba4:	6b726f57 	blvs	1c9c908 <_Min_Stack_Size+0x1c9c508>
     ba8:	63617073 	cmnvs	r1, #115	; 0x73
     bac:	2e502f65 	cdpcs	15, 5, cr2, cr0, cr5, {3}
     bb0:	2e4b2e45 	cdpcs	14, 4, cr2, cr11, cr5, {2}
     bb4:	2f412e4b 	svccs	0x00412e4b
     bb8:	6a6f7250 	bvs	1bdd500 <_Min_Stack_Size+0x1bdd100>
     bbc:	2f746365 	svccs	0x00746365
     bc0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bc4:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     bc8:	65685f39 	strbvs	r5, [r8, #-3897]!	; 0xfffff0c7
     bcc:	776f6c6c 	strbvc	r6, [pc, -ip, ror #24]!
     bd0:	646c726f 	strbtvs	r7, [ip], #-623	; 0xfffffd91
     bd4:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
     bd8:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     bdc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     be0:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     be4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     be8:	5f4c4148 	svcpl	0x004c4148
     bec:	54636e49 	strbtpl	r6, [r3], #-3657	; 0xfffff1b7
     bf0:	006b6369 	rsbeq	r6, fp, r9, ror #6
     bf4:	5f435653 	svcpl	0x00435653
     bf8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     bfc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c00:	5f494d4e 	svcpl	0x00494d4e
     c04:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     c08:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c0c:	67617355 			; <UNDEFINED> instruction: 0x67617355
     c10:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
     c14:	485f746c 	ldmdami	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     c18:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     c1c:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     c20:	46647261 	strbtmi	r7, [r4], -r1, ror #4
     c24:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     c28:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     c2c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     c30:	73754200 	cmnvc	r5, #0, 4
     c34:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     c38:	61485f74 	hvcvs	34292	; 0x85f4
     c3c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     c40:	65500072 	ldrbvs	r0, [r0, #-114]	; 0xffffff8e
     c44:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     c48:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     c4c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     c50:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     c54:	616e614d 	cmnvs	lr, sp, asr #2
     c58:	485f6567 	ldmdami	pc, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     c5c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     c60:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     c64:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
     c68:	5f4f4950 	svcpl	0x004f4950
     c6c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     c70:	5152495f 	cmppl	r2, pc, asr r9
     c74:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     c78:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c7c:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     c80:	43530044 	cmpmi	r3, #68	; 0x44
     c84:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     c88:	49006570 	stmdbmi	r0, {r4, r5, r6, r8, sl, sp, lr}
     c8c:	00525343 	subseq	r5, r2, r3, asr #6
     c90:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     c94:	53464300 	movtpl	r4, #25344	; 0x6300
     c98:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
     c9c:	756f736c 	strbvc	r7, [pc, #-876]!	; 938 <_Min_Stack_Size+0x538>
     ca0:	00656372 	rsbeq	r6, r5, r2, ror r3
     ca4:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
     ca8:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     cac:	49410070 	stmdbmi	r1, {r4, r5, r6}^
     cb0:	00524352 	subseq	r4, r2, r2, asr r3
     cb4:	53434853 	movtpl	r4, #14419	; 0x3853
     cb8:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     cbc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     cc0:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     cc4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     cc8:	6470556b 	ldrbtvs	r5, [r0], #-1387	; 0xfffffa95
     ccc:	00657461 	rsbeq	r7, r5, r1, ror #8
     cd0:	41464d4d 	cmpmi	r6, sp, asr #26
     cd4:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     cd8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     cdc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     ce0:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     ce4:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     ce8:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
     cec:	41534900 	cmpmi	r3, r0, lsl #18
     cf0:	46440052 			; <UNDEFINED> instruction: 0x46440052
     cf4:	53005253 	movwpl	r5, #595	; 0x253
     cf8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     cfc:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     d00:	6f6c4365 	svcvs	0x006c4365
     d04:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     d08:	00525346 	subseq	r5, r2, r6, asr #6
     d0c:	52464d4d 	subpl	r4, r6, #4928	; 0x1340
     d10:	53464100 	movtpl	r4, #24832	; 0x6100
     d14:	682f0052 	stmdavs	pc!, {r1, r4, r6}	; <UNPREDICTABLE>
     d18:	2f656d6f 	svccs	0x00656d6f
     d1c:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     d20:	736f7472 	cmnvc	pc, #1912602624	; 0x72000000
     d24:	726f572f 	rsbvc	r5, pc, #12320768	; 0xbc0000
     d28:	6170736b 	cmnvs	r0, fp, ror #6
     d2c:	502f6563 	eorpl	r6, pc, r3, ror #10
     d30:	4b2e452e 	blmi	b921f0 <_Min_Stack_Size+0xb91df0>
     d34:	412e4b2e 			; <UNDEFINED> instruction: 0x412e4b2e
     d38:	6f72502f 	svcvs	0x0072502f
     d3c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     d40:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     d44:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     d48:	685f3932 	ldmdavs	pc, {r1, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     d4c:	6f6c6c65 	svcvs	0x006c6c65
     d50:	6c726f77 	ldclvs	15, cr6, [r2], #-476	; 0xfffffe24
     d54:	72532f64 	subsvc	r2, r3, #100, 30	; 0x190
     d58:	79732f63 	ldmdbvc	r3!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     d5c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     d60:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     d64:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     d68:	632e7878 			; <UNDEFINED> instruction: 0x632e7878
     d6c:	41504300 	cmpmi	r0, r0, lsl #6
     d70:	48005243 	stmdami	r0, {r0, r1, r6, r9, ip, lr}
     d74:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
     d78:	61487465 	cmpvs	r8, r5, ror #8
     d7c:	7265566c 	rsbvc	r5, r5, #108, 12	; 0x6c00000
     d80:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     d84:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
     d88:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
     d8c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     d90:	6f6d654d 	svcvs	0x006d654d
     d94:	77537972 			; <UNDEFINED> instruction: 0x77537972
     d98:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
     d9c:	6142676e 	cmpvs	r2, lr, ror #14
     da0:	54006b6e 	strpl	r6, [r0], #-2926	; 0xfffff492
     da4:	506b6369 	rsbpl	r6, fp, r9, ror #6
     da8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     dac:	00797469 	rsbseq	r7, r9, r9, ror #8
     db0:	5f4c4148 	svcpl	0x004c4148
     db4:	54535953 	ldrbpl	r5, [r3], #-2387	; 0xfffff6ad
     db8:	5f4b4349 	svcpl	0x004b4349
     dbc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     dc0:	4f006769 	svcmi	0x00006769
     dc4:	52435450 	subpl	r5, r3, #80, 8	; 0x50000000
     dc8:	53494400 	movtpl	r4, #37888	; 0x9400
     dcc:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     dd0:	43444900 	movtmi	r4, #18688	; 0x4900
     dd4:	0045444f 	subeq	r4, r5, pc, asr #8
     dd8:	5f4c4148 	svcpl	0x004c4148
     ddc:	4d474244 	sfmmi	f4, 2, [r7, #-272]	; 0xfffffef0
     de0:	455f5543 	ldrbmi	r5, [pc, #-1347]	; 8a5 <_Min_Stack_Size+0x4a5>
     de4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     de8:	47424465 	strbmi	r4, [r2, -r5, ror #8]
     dec:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     df0:	4d796264 	lfmmi	f6, 2, [r9, #-400]!	; 0xfffffe70
     df4:	0065646f 	rsbeq	r6, r5, pc, ror #8
     df8:	42414e45 	submi	r4, r1, #1104	; 0x450
     dfc:	4f00454c 	svcmi	0x0000454c
     e00:	454b5450 	strbmi	r5, [fp, #-1104]	; 0xfffffbb0
     e04:	5f005259 	svcpl	0x00005259
     e08:	4942525f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, ip, lr}^
     e0c:	79530054 	ldmdbvc	r3, {r2, r4, r6}^
     e10:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     e14:	79545f6b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     e18:	48006570 	stmdami	r0, {r4, r5, r6, r8, sl, sp, lr}
     e1c:	4d5f4c41 	ldclmi	12, cr4, [pc, #-260]	; d20 <_Min_Stack_Size+0x920>
     e20:	65447073 	strbvs	r7, [r4, #-115]	; 0xffffff8d
     e24:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     e28:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
     e2c:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
     e30:	5f55434d 	svcpl	0x0055434d
     e34:	61736944 	cmnvs	r3, r4, asr #18
     e38:	44656c62 	strbtmi	r6, [r5], #-3170	; 0xfffff39e
     e3c:	6c534742 	mrrcvs	7, 4, r4, r3, cr2
     e40:	4d706565 	cfldr64mi	mvdx6, [r0, #-404]!	; 0xfffffe6c
     e44:	0065646f 	rsbeq	r6, r5, pc, ror #8
     e48:	31425041 	cmpcc	r2, r1, asr #32
     e4c:	48005a46 	stmdami	r0, {r1, r2, r6, r9, fp, ip, lr}
     e50:	445f4c41 	ldrbmi	r4, [pc], #-3137	; e58 <_Min_Stack_Size+0xa58>
     e54:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     e58:	504f0074 	subpl	r0, pc, r4, ror r0	; <UNPREDICTABLE>
     e5c:	31524354 	cmpcc	r2, r4, asr r3
     e60:	54777500 	ldrbtpl	r7, [r7], #-1280	; 0xfffffb00
     e64:	006b6369 	rsbeq	r6, fp, r9, ror #6
     e68:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
     e6c:	41480042 	cmpmi	r8, r2, asr #32
     e70:	42445f4c 	submi	r5, r4, #76, 30	; 0x130
     e74:	55434d47 	strbpl	r4, [r3, #-3399]	; 0xfffff2b9
     e78:	616e455f 	cmnvs	lr, pc, asr r5
     e7c:	44656c62 	strbtmi	r6, [r5], #-3170	; 0xfffff39e
     e80:	74534742 	ldrbvc	r4, [r3], #-1858	; 0xfffff8be
     e84:	6f4d706f 	svcvs	0x004d706f
     e88:	48006564 	stmdami	r0, {r2, r5, r6, r8, sl, sp, lr}
     e8c:	4d5f4c41 	ldclmi	12, cr4, [pc, #-260]	; d90 <_Min_Stack_Size+0x990>
     e90:	6e497073 	mcrvs	0, 2, r7, cr9, cr3, {3}
     e94:	41007469 	tstmi	r0, r9, ror #8
     e98:	46324250 			; <UNDEFINED> instruction: 0x46324250
     e9c:	4f4c005a 	svcmi	0x004c005a
     ea0:	48004441 	stmdami	r0, {r0, r6, sl, lr}
     ea4:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
     ea8:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     eac:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     eb0:	525f4c41 	subspl	r4, pc, #16640	; 0x4100
     eb4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     eb8:	63695465 	cmnvs	r9, #1694498816	; 0x65000000
     ebc:	4148006b 	cmpmi	r8, fp, rrx
     ec0:	6e495f4c 	cdpvs	15, 4, cr5, cr9, cr12, {2}
     ec4:	69547469 	ldmdbvs	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ec8:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     ecc:	445f4c41 	ldrbmi	r4, [pc], #-3137	; ed4 <_Min_Stack_Size+0xad4>
     ed0:	434d4742 	movtmi	r4, #55106	; 0xd742
     ed4:	69445f55 	stmdbvs	r4, {r0, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     ed8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     edc:	47424465 	strbmi	r4, [r2, -r5, ror #8]
     ee0:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     ee4:	4d796264 	lfmmi	f6, 2, [r9, #-400]!	; 0xfffffe70
     ee8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     eec:	6b636974 	blvs	18db4c4 <_Min_Stack_Size+0x18db0c4>
     ef0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     ef4:	41480074 	hvcmi	32772	; 0x8004
     ef8:	75535f4c 	ldrbvc	r5, [r3, #-3916]	; 0xfffff0b4
     efc:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     f00:	63695464 	cmnvs	r9, #100, 8	; 0x64000000
     f04:	4148006b 	cmpmi	r8, fp, rrx
     f08:	42445f4c 	submi	r5, r4, #76, 30	; 0x130
     f0c:	55434d47 	strbpl	r4, [r3, #-3399]	; 0xfffff2b9
     f10:	616e455f 	cmnvs	lr, pc, asr r5
     f14:	44656c62 	strbtmi	r6, [r5], #-3170	; 0xfffff39e
     f18:	6c534742 	mrrcvs	7, 4, r4, r3, cr2
     f1c:	4d706565 	cfldr64mi	mvdx6, [r0, #-404]!	; 0xfffffe6c
     f20:	0065646f 	rsbeq	r6, r5, pc, ror #8
     f24:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; e70 <_Min_Stack_Size+0xa70>
     f28:	72662f65 	rsbvc	r2, r6, #404	; 0x194
     f2c:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
     f30:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
     f34:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
     f38:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
     f3c:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
     f40:	4b2e4b2e 	blmi	b93c00 <_Min_Stack_Size+0xb93800>
     f44:	502f412e 	eorpl	r4, pc, lr, lsr #2
     f48:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     f4c:	2f6d726f 	svccs	0x006d726f
     f50:	334d5453 	movtcc	r5, #54355	; 0xd453
     f54:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
     f58:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
     f5c:	2f34465f 	svccs	0x0034465f
     f60:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     f64:	2f737265 	svccs	0x00737265
     f68:	334d5453 	movtcc	r5, #54355	; 0xd453
     f6c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     f70:	41485f78 	hvcmi	34296	; 0x85f8
     f74:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
     f78:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     f7c:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
     f80:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     f84:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     f88:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     f8c:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
     f90:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
     f94:	5f55434d 	svcpl	0x0055434d
     f98:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     f9c:	00666544 	rsbeq	r6, r6, r4, asr #10
     fa0:	5f4c4148 	svcpl	0x004c4148
     fa4:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
     fa8:	44495645 	strbmi	r5, [r9], #-1605	; 0xfffff9bb
     fac:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
     fb0:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
     fb4:	5f55434d 	svcpl	0x0055434d
     fb8:	61736944 	cmnvs	r3, r4, asr #18
     fbc:	44656c62 	strbtmi	r6, [r5], #-3170	; 0xfffff39e
     fc0:	74534742 	ldrbvc	r4, [r3], #-1858	; 0xfffff8be
     fc4:	6f4d706f 	svcvs	0x004d706f
     fc8:	48006564 	stmdami	r0, {r2, r5, r6, r8, sl, sp, lr}
     fcc:	445f4c41 	ldrbmi	r4, [pc], #-3137	; fd4 <_Min_Stack_Size+0xbd4>
     fd0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     fd4:	52544300 	subspl	r4, r4, #0, 6
     fd8:	4148004c 	cmpmi	r8, ip, asr #32
     fdc:	564e5f4c 	strbpl	r5, [lr], -ip, asr #30
     fe0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     fe4:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
     fe8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     fec:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     ff0:	6970756f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     ff4:	4800676e 	stmdami	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     ff8:	455f4c41 	ldrbmi	r4, [pc, #-3137]	; 3bf <_Min_Heap_Size+0x1bf>
     ffc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1000:	6d6f4365 	stclvs	3, cr4, [pc, #-404]!	; e74 <_Min_Stack_Size+0xa74>
    1004:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    1008:	6f697461 	svcvs	0x00697461
    100c:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    1010:	4148006c 	cmpmi	r8, ip, rrx
    1014:	69445f4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1018:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    101c:	6d6f4365 	stclvs	3, cr4, [pc, #-404]!	; e90 <_Min_Stack_Size+0xa90>
    1020:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    1024:	6f697461 	svcvs	0x00697461
    1028:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    102c:	4148006c 	cmpmi	r8, ip, rrx
    1030:	65475f4c 	strbvs	r5, [r7, #-3916]	; 0xfffff0b4
    1034:	56454474 			; <UNDEFINED> instruction: 0x56454474
    1038:	46004449 	strmi	r4, [r0], -r9, asr #8
    103c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1040:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1044:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1048:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    104c:	616e455f 	cmnvs	lr, pc, asr r5
    1050:	4d656c62 	stclmi	12, cr6, [r5, #-392]!	; 0xfffffe78
    1054:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1058:	61775379 	cmnvs	r7, r9, ror r3
    105c:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
    1060:	6e614267 	cdpvs	2, 6, cr4, cr1, cr7, {3}
    1064:	6572006b 	ldrbvs	r0, [r2, #-107]!	; 0xffffff95
    1068:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
    106c:	50434900 	subpl	r4, r3, r0, lsl #18
    1070:	79540052 	ldmdbvc	r4, {r1, r4, r6}^
    1074:	78456570 	stmdavc	r5, {r4, r5, r6, r8, sl, sp, lr}^
    1078:	65694674 	strbvs	r4, [r9, #-1652]!	; 0xfffff98c
    107c:	5000646c 	andpl	r6, r0, ip, ror #8
    1080:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1084:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1088:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    108c:	53415200 	movtpl	r5, #4608	; 0x1200
    1090:	33415f52 	movtcc	r5, #8018	; 0x1f52
    1094:	50534900 	subspl	r4, r3, r0, lsl #18
    1098:	73490052 	movtvc	r0, #36946	; 0x9052
    109c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    10a0:	62617265 	rsbvs	r7, r1, #1342177286	; 0x50000006
    10a4:	5f00656c 	svcpl	0x0000656c
    10a8:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
    10ac:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    10b0:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    10b4:	4b434954 	blmi	10d360c <_Min_Stack_Size+0x10d320c>
    10b8:	5152495f 	cmppl	r2, pc, asr r9
    10bc:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    10c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    10c4:	5f4c4148 	svcpl	0x004c4148
    10c8:	4349564e 	movtmi	r5, #38478	; 0x964e
    10cc:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    10d0:	65507261 	ldrbvs	r7, [r0, #-609]	; 0xfffffd9f
    10d4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    10d8:	51524967 	cmppl	r2, r7, ror #18
    10dc:	53415200 	movtpl	r5, #4608	; 0x1200
    10e0:	31415f52 	cmpcc	r1, r2, asr pc
    10e4:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    10e8:	49564e5f 	ldmdbmi	r6, {r0, r1, r2, r3, r4, r6, r9, sl, fp, lr}^
    10ec:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    10f0:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    10f4:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    10f8:	42520079 	subsmi	r0, r2, #121	; 0x79
    10fc:	415f5241 	cmpmi	pc, r1, asr #4
    1100:	42520031 	subsmi	r0, r2, #49	; 0x31
    1104:	415f5241 	cmpmi	pc, r1, asr #4
    1108:	42520032 	subsmi	r0, r2, #50	; 0x32
    110c:	415f5241 	cmpmi	pc, r1, asr #4
    1110:	504d0033 	subpl	r0, sp, r3, lsr r0
    1114:	6e495f55 	mcrvs	15, 2, r5, cr9, cr5, {2}
    1118:	50007469 	andpl	r7, r0, r9, ror #8
    111c:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    1120:	72507470 	subsvc	r7, r0, #112, 8	; 0x70000000
    1124:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1128:	69427974 	stmdbvs	r2, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    112c:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
    1130:	5f525341 	svcpl	0x00525341
    1134:	4d003241 	sfmmi	f3, 4, [r0, #-260]	; 0xfffffefc
    1138:	525f5550 	subspl	r5, pc, #80, 10	; 0x14000000
    113c:	6f696765 	svcvs	0x00696765
    1140:	6e495f6e 	cdpvs	15, 4, cr5, cr9, cr14, {3}
    1144:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1148:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    114c:	73490066 	movtvc	r0, #36966	; 0x9066
    1150:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    1154:	6c626165 	stfvse	f6, [r2], #-404	; 0xfffffe6c
    1158:	41480065 	cmpmi	r8, r5, rrx
    115c:	564e5f4c 	strbpl	r5, [lr], -ip, asr #30
    1160:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1164:	65507465 	ldrbvs	r7, [r0, #-1125]	; 0xfffffb9b
    1168:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    116c:	51524967 	cmppl	r2, r7, ror #18
    1170:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1174:	49564e5f 	ldmdbmi	r6, {r0, r1, r2, r3, r4, r6, r9, sl, fp, lr}^
    1178:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    117c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1180:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1184:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
    1188:	61765f67 	cmnvs	r6, r7, ror #30
    118c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1190:	5f4c4148 	svcpl	0x004c4148
    1194:	4349564e 	movtmi	r5, #38478	; 0x964e
    1198:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    119c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    11a0:	00515249 	subseq	r5, r1, r9, asr #4
    11a4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 10f0 <_Min_Stack_Size+0xcf0>
    11a8:	72662f65 	rsbvc	r2, r6, #404	; 0x194
    11ac:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
    11b0:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
    11b4:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    11b8:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    11bc:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
    11c0:	4b2e4b2e 	blmi	b93e80 <_Min_Stack_Size+0xb93a80>
    11c4:	502f412e 	eorpl	r4, pc, lr, lsr #2
    11c8:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    11cc:	2f6d726f 	svccs	0x006d726f
    11d0:	334d5453 	movtcc	r5, #54355	; 0xd453
    11d4:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    11d8:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    11dc:	2f34465f 	svccs	0x0034465f
    11e0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    11e4:	2f737265 	svccs	0x00737265
    11e8:	334d5453 	movtcc	r5, #54355	; 0xd453
    11ec:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    11f0:	41485f78 	hvcmi	34296	; 0x85f8
    11f4:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
    11f8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    11fc:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1200:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1204:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1208:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    120c:	635f6c61 	cmpvs	pc, #24832	; 0x6100
    1210:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1214:	00632e78 	rsbeq	r2, r3, r8, ror lr
    1218:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
    121c:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    1220:	6f697250 	svcvs	0x00697250
    1224:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1228:	73694400 	cmnvc	r9, #0, 8
    122c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1230:	63657845 	cmnvs	r5, #4521984	; 0x450000
    1234:	63634100 	cmnvs	r3, #0, 2
    1238:	50737365 	rsbspl	r7, r3, r5, ror #6
    123c:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1240:	6f697373 	svcvs	0x00697373
    1244:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
    1248:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    124c:	48007974 	stmdami	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    1250:	4e5f4c41 	cdpmi	12, 5, cr4, cr15, cr1, {2}
    1254:	5f434956 	svcpl	0x00434956
    1258:	41746547 	cmnmi	r4, r7, asr #10
    125c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1260:	5f5f0065 	svcpl	0x005f0065
    1264:	00425344 	subeq	r5, r2, r4, asr #6
    1268:	62755370 	rsbsvs	r5, r5, #112, 6	; 0xc0000001
    126c:	6f697250 	svcvs	0x00697250
    1270:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1274:	6d754e00 	ldclvs	14, cr4, [r5, #-0]
    1278:	00726562 	rsbseq	r6, r2, r2, ror #10
    127c:	6f697270 	svcvs	0x00697270
    1280:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1284:	756f7267 	strbvc	r7, [pc, #-615]!	; 1025 <_Min_Stack_Size+0xc25>
    1288:	69740070 	ldmdbvs	r4!, {r4, r5, r6}^
    128c:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1290:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
    1294:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1298:	6e455f43 	cdpvs	15, 4, cr5, cr5, cr3, {2}
    129c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    12a0:	6f697250 	svcvs	0x00697250
    12a4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    12a8:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
    12ac:	75530052 	ldrbvc	r0, [r3, #-82]	; 0xffffffae
    12b0:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    12b4:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    12b8:	74694279 	strbtvc	r4, [r9], #-633	; 0xfffffd87
    12bc:	564e0073 			; <UNDEFINED> instruction: 0x564e0073
    12c0:	445f4349 	ldrbmi	r4, [pc], #-841	; 12c8 <_Min_Stack_Size+0xec8>
    12c4:	646f6365 	strbtvs	r6, [pc], #-869	; 12cc <_Min_Stack_Size+0xecc>
    12c8:	69725065 	ldmdbvs	r2!, {r0, r2, r5, r6, ip, lr}^
    12cc:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    12d0:	41480079 	hvcmi	32777	; 0x8009
    12d4:	59535f4c 	ldmdbpl	r3, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    12d8:	43495453 	movtmi	r5, #37971	; 0x9453
    12dc:	61435f4b 	cmpvs	r3, fp, asr #30
    12e0:	61626c6c 	cmnvs	r2, ip, ror #24
    12e4:	53006b63 	movwpl	r6, #2915	; 0xb63
    12e8:	65526275 	ldrbvs	r6, [r2, #-629]	; 0xfffffd8b
    12ec:	6e6f6967 	cdpvs	9, 6, cr6, cr15, cr7, {3}
    12f0:	61736944 	cmnvs	r3, r4, asr #18
    12f4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    12f8:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    12fc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1300:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1304:	52006570 	andpl	r6, r0, #112, 10	; 0x1c000000
    1308:	00524142 	subseq	r4, r2, r2, asr #2
    130c:	6f697250 	svcvs	0x00697250
    1310:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1314:	756f7247 	strbvc	r7, [pc, #-583]!	; 10d5 <_Min_Stack_Size+0xcd5>
    1318:	706d5470 	rsbvc	r5, sp, r0, ror r4
    131c:	63695400 	cmnvs	r9, #0, 8
    1320:	754e736b 	strbvc	r7, [lr, #-875]	; 0xfffffc95
    1324:	5200626d 	andpl	r6, r0, #-805306362	; 0xd0000006
    1328:	00525341 	subseq	r5, r2, r1, asr #6
    132c:	5f4c4148 	svcpl	0x004c4148
    1330:	54535953 	ldrbpl	r5, [r3], #-2387	; 0xfffff6ad
    1334:	5f4b4349 	svcpl	0x004b4349
    1338:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    133c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1340:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1344:	00676966 	rsbeq	r6, r7, r6, ror #18
    1348:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    134c:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1350:	55504d5f 	ldrbpl	r4, [r0, #-3423]	; 0xfffff2a1
    1354:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1358:	52676966 	rsbpl	r6, r7, #1671168	; 0x198000
    135c:	6f696765 	svcvs	0x00696765
    1360:	7953006e 	ldmdbvc	r3, {r1, r2, r3, r5, r6}^
    1364:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1368:	6f435f6b 	svcvs	0x00435f6b
    136c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1370:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1374:	49564e5f 	ldmdbmi	r6, {r0, r1, r2, r3, r4, r6, r9, sl, fp, lr}^
    1378:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    137c:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1380:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1384:	6f724779 	svcvs	0x00724779
    1388:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
    138c:	6e450067 	cdpvs	0, 4, cr0, cr5, cr7, {3}
    1390:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1394:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
    1398:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    139c:	54530031 	ldrbpl	r0, [r3], #-49	; 0xffffffcf
    13a0:	49005249 	stmdbmi	r0, {r0, r3, r6, r9, ip, lr}
    13a4:	61685373 	smcvs	34099	; 0x8533
    13a8:	62616572 	rsbvs	r6, r1, #478150656	; 0x1c800000
    13ac:	4800656c 	stmdami	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    13b0:	4e5f4c41 	cdpmi	12, 5, cr4, cr15, cr1, {2}
    13b4:	5f434956 	svcpl	0x00434956
    13b8:	50746553 	rsbspl	r6, r4, r3, asr r5
    13bc:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    13c0:	5249676e 	subpl	r6, r9, #28835840	; 0x1b80000
    13c4:	504d0051 	subpl	r0, sp, r1, asr r0
    13c8:	79545f55 	ldmdbvc	r4, {r0, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    13cc:	48006570 	stmdami	r0, {r4, r5, r6, r8, sl, sp, lr}
    13d0:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
    13d4:	5f4f4950 	svcpl	0x004f4950
    13d8:	6b636f4c 	blvs	18dd110 <_Min_Stack_Size+0x18dcd10>
    13dc:	006e6950 	rsbeq	r6, lr, r0, asr r9
    13e0:	6f706f69 	svcvs	0x00706f69
    13e4:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    13e8:	4d006e6f 	stcmi	14, cr6, [r0, #-444]	; 0xfffffe44
    13ec:	4d524d45 	ldclmi	13, cr4, [r2, #-276]	; 0xfffffeec
    13f0:	58450050 	stmdapl	r5, {r4, r6}^
    13f4:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    13f8:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    13fc:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    1400:	6f545f4f 	svcvs	0x00545f4f
    1404:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
    1408:	006e6950 	rsbeq	r6, lr, r0, asr r9
    140c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1410:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1414:	49505f4f 	ldmdbmi	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1418:	45535f4e 	ldrbmi	r5, [r3, #-3918]	; 0xfffff0b2
    141c:	58450054 	stmdapl	r5, {r2, r4, r6}^
    1420:	545f4954 	ldrbpl	r4, [pc], #-2388	; 1428 <_Min_Stack_Size+0x1028>
    1424:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1428:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    142c:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
    1430:	5f4f4950 	svcpl	0x004f4950
    1434:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1438:	006e6950 	rsbeq	r6, lr, r0, asr r9
    143c:	43504d43 	cmpmi	r0, #4288	; 0x10c0
    1440:	69620052 	stmdbvs	r2!, {r1, r4, r6}^
    1444:	61747374 	cmnvs	r4, r4, ror r3
    1448:	00737574 	rsbseq	r7, r3, r4, ror r5
    144c:	4f495047 	svcmi	0x00495047
    1450:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    1454:	5345525f 	movtpl	r5, #21087	; 0x525f
    1458:	48005445 	stmdami	r0, {r0, r2, r6, sl, ip, lr}
    145c:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
    1460:	5f4f4950 	svcpl	0x004f4950
    1464:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1468:	6e695065 	cdpvs	0, 6, cr5, cr9, cr5, {3}
    146c:	53544600 	cmppl	r4, #0, 12
    1470:	6f690052 	svcvs	0x00690052
    1474:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1478:	00746e65 	rsbseq	r6, r4, r5, ror #28
    147c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1480:	545f4746 	ldrbpl	r4, [pc], #-1862	; 1488 <_Min_Stack_Size+0x1088>
    1484:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1488:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    148c:	00525354 	subseq	r5, r2, r4, asr r3
    1490:	4f495047 	svcmi	0x00495047
    1494:	45520078 	ldrbmi	r0, [r2, #-120]	; 0xffffff88
    1498:	56524553 			; <UNDEFINED> instruction: 0x56524553
    149c:	48004445 	stmdami	r0, {r0, r2, r6, sl, lr}
    14a0:	475f4c41 	ldrbmi	r4, [pc, -r1, asr #24]
    14a4:	5f4f4950 	svcpl	0x004f4950
    14a8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    14ac:	47007469 	strmi	r7, [r0, -r9, ror #8]
    14b0:	5f4f4950 	svcpl	0x004f4950
    14b4:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    14b8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    14bc:	6f682f00 	svcvs	0x00682f00
    14c0:	662f656d 	strtvs	r6, [pc], -sp, ror #10
    14c4:	72656572 	rsbvc	r6, r5, #478150656	; 0x1c800000
    14c8:	2f736f74 	svccs	0x00736f74
    14cc:	6b726f57 	blvs	1c9d230 <_Min_Stack_Size+0x1c9ce30>
    14d0:	63617073 	cmnvs	r1, #115	; 0x73
    14d4:	2e502f65 	cdpcs	15, 5, cr2, cr0, cr5, {3}
    14d8:	2e4b2e45 	cdpcs	14, 4, cr2, cr11, cr5, {2}
    14dc:	2f412e4b 	svccs	0x00412e4b
    14e0:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
    14e4:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    14e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    14ec:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    14f0:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
    14f4:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
    14f8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    14fc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1500:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1504:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1508:	485f7878 	ldmdami	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    150c:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 1514 <_Min_Stack_Size+0x1114>
    1510:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1514:	72532f72 	subsvc	r2, r3, #456	; 0x1c8
    1518:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    151c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1520:	5f787834 	svcpl	0x00787834
    1524:	5f6c6168 	svcpl	0x006c6168
    1528:	6f697067 	svcvs	0x00697067
    152c:	5300632e 	movwpl	r6, #814	; 0x32e
    1530:	52454957 	subpl	r4, r5, #1425408	; 0x15c000
    1534:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1538:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    153c:	4154535f 	cmpmi	r4, pc, asr r3
    1540:	525f4554 	subspl	r4, pc, #84, 10	; 0x15000000
    1544:	59444145 	stmdbpl	r4, {r0, r2, r6, r8, lr}^
    1548:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    154c:	4343525f 	movtmi	r5, #12895	; 0x325f
    1550:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1554:	4b4c4350 	blmi	131229c <_Min_Stack_Size+0x1311e9c>
    1558:	65724631 	ldrbvs	r4, [r2, #-1585]!	; 0xfffff9cf
    155c:	41480071 	hvcmi	32769	; 0x8001
    1560:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1564:	614d5f43 	cmpvs	sp, r3, asr #30
    1568:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    156c:	6172545f 	cmnvs	r2, pc, asr r4
    1570:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1574:	4d445f74 	stclmi	15, cr5, [r4, #-464]	; 0xfffffe30
    1578:	41480041 	cmpmi	r8, r1, asr #32
    157c:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1580:	614d5f43 	cmpvs	sp, r3, asr #30
    1584:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1588:	6172545f 	cmnvs	r2, pc, asr r4
    158c:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1590:	41480074 	hvcmi	32772	; 0x8004
    1594:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1598:	62415f43 	subvs	r5, r1, #268	; 0x10c
    159c:	4374726f 	cmnmi	r4, #-268435450	; 0xf0000006
    15a0:	43746c70 	cmnmi	r4, #112, 24	; 0x7000
    15a4:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    15a8:	006b6361 	rsbeq	r6, fp, r1, ror #6
    15ac:	5f433249 	svcpl	0x00433249
    15b0:	63417349 	movtvs	r7, #4937	; 0x1349
    15b4:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    15b8:	6764656c 	strbvs	r6, [r4, -ip, ror #10]!
    15bc:	69614665 	stmdbvs	r1!, {r0, r2, r5, r6, r9, sl, lr}^
    15c0:	0064656c 	rsbeq	r6, r4, ip, ror #10
    15c4:	5241304d 	subpl	r3, r1, #77	; 0x4d
    15c8:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    15cc:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    15d0:	616c535f 	cmnvs	ip, pc, asr r3
    15d4:	525f6576 	subspl	r6, pc, #494927872	; 0x1d800000
    15d8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    15dc:	445f6576 	ldrbmi	r6, [pc], #-1398	; 15e4 <_Min_Stack_Size+0x11e4>
    15e0:	4600414d 	strmi	r4, [r0], -sp, asr #2
    15e4:	5367616c 	cmnpl	r7, #108, 2
    15e8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    15ec:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    15f0:	6e495f41 	cdpvs	15, 4, cr5, cr9, cr1, {2}
    15f4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    15f8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    15fc:	41480066 	cmpmi	r8, r6, rrx
    1600:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1604:	614d5f43 	cmpvs	sp, r3, asr #30
    1608:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    160c:	7165535f 	cmnvc	r5, pc, asr r3
    1610:	746e6575 	strbtvc	r6, [lr], #-1397	; 0xfffffa8b
    1614:	5f6c6169 	svcpl	0x006c6169
    1618:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    161c:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    1620:	0054495f 	subseq	r4, r4, pc, asr r9
    1624:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1628:	4d746e65 	ldclmi	14, cr6, [r4, #-404]!	; 0xfffffe6c
    162c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1630:	5f433249 	svcpl	0x00433249
    1634:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    1638:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
    163c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1640:	4654425f 			; <UNDEFINED> instruction: 0x4654425f
    1644:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1648:	414d445f 	cmpmi	sp, pc, asr r4
    164c:	4154535f 	cmpmi	r4, pc, asr r3
    1650:	525f4554 	subspl	r4, pc, #84, 10	; 0x15000000
    1654:	59444145 	stmdbpl	r4, {r0, r2, r6, r8, lr}^
    1658:	43324900 	teqmi	r2, #0, 18
    165c:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1660:	536e4f74 	cmnpl	lr, #116, 30	; 0x1d0
    1664:	46504f54 	usaxmi	r4, r0, r4
    1668:	5567616c 	strbpl	r6, [r7, #-364]!	; 0xfffffe94
    166c:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    1670:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1674:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1678:	5f4c4148 	svcpl	0x004c4148
    167c:	5f433249 	svcpl	0x00433249
    1680:	4d746547 	cfldr64mi	mvdx6, [r4, #-284]!	; 0xfffffee4
    1684:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1688:	5f433249 	svcpl	0x00433249
    168c:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    1690:	614d6e4f 	cmpvs	sp, pc, asr #28
    1694:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1698:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    169c:	46737365 	ldrbtmi	r7, [r3], -r5, ror #6
    16a0:	5567616c 	strbpl	r6, [r7, #-364]!	; 0xfffffe94
    16a4:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    16a8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    16ac:	0074756f 	rsbseq	r7, r4, pc, ror #10
    16b0:	53495254 	movtpl	r5, #37460	; 0x9254
    16b4:	72500045 	subsvc	r0, r0, #69	; 0x45
    16b8:	6f697665 	svcvs	0x00697665
    16bc:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
    16c0:	00657461 	rsbeq	r7, r5, r1, ror #8
    16c4:	5f4c4148 	svcpl	0x004c4148
    16c8:	5f433249 	svcpl	0x00433249
    16cc:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    16d0:	49545f45 	ldmdbmi	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    16d4:	554f454d 	strbpl	r4, [pc, #-1357]	; 118f <_Min_Stack_Size+0xd8f>
    16d8:	41480054 	qdaddmi	r0, r4, r8
    16dc:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    16e0:	654d5f43 	strbvs	r5, [sp, #-3907]	; 0xfffff0bd
    16e4:	65525f6d 	ldrbvs	r5, [r2, #-3949]	; 0xfffff093
    16e8:	445f6461 	ldrbmi	r6, [pc], #-1121	; 16f0 <_Min_Stack_Size+0x12f0>
    16ec:	4900414d 	stmdbmi	r0, {r0, r2, r3, r6, r8, lr}
    16f0:	575f4332 	smmlarpl	pc, r2, r3, r4	; <UNPREDICTABLE>
    16f4:	4f746961 	svcmi	0x00746961
    16f8:	4e58526e 	cdpmi	2, 5, cr5, cr8, cr14, {3}
    16fc:	616c4645 	cmnvs	ip, r5, asr #12
    1700:	746e5567 	strbtvc	r5, [lr], #-1383	; 0xfffffa99
    1704:	69546c69 	ldmdbvs	r4, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1708:	756f656d 	strbvc	r6, [pc, #-1389]!	; 11a3 <_Min_Stack_Size+0xda3>
    170c:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    1710:	49003170 	stmdbmi	r0, {r4, r5, r6, r8, ip, sp}
    1714:	445f4332 	ldrbmi	r4, [pc], #-818	; 171c <_Min_Stack_Size+0x131c>
    1718:	6241414d 	subvs	r4, r1, #1073741843	; 0x40000013
    171c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    1720:	5f433249 	svcpl	0x00433249
    1724:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    1728:	415f7265 	cmpmi	pc, r5, ror #4
    172c:	30314444 	eorscc	r4, r1, r4, asr #8
    1730:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1734:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1738:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1740 <_Min_Stack_Size+0x1340>
    173c:	4c535f45 	mrrcmi	15, 4, r5, r3, cr5
    1740:	00455641 	subeq	r5, r5, r1, asr #12
    1744:	32706d74 	rsbscc	r6, r0, #116, 26	; 0x1d00
    1748:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    174c:	6d740033 	ldclvs	0, cr0, [r4, #-204]!	; 0xffffff34
    1750:	49003470 	stmdbmi	r0, {r4, r5, r6, sl, ip, sp}
    1754:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1694 <_Min_Stack_Size+0x1294>
    1758:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    175c:	63655272 	cmnvs	r5, #536870919	; 0x20000007
    1760:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1764:	4e58525f 	mrcmi	2, 2, r5, cr8, cr15, {2}
    1768:	66580045 	ldrbvs	r0, [r8], -r5, asr #32
    176c:	61487265 	cmpvs	r8, r5, ror #4
    1770:	7043666c 	subvc	r6, r3, ip, ror #12
    1774:	6143746c 	cmpvs	r3, ip, ror #8
    1778:	61626c6c 	cmnvs	r2, ip, ror #24
    177c:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1780:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1784:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1788:	74537465 	ldrbvc	r7, [r3], #-1125	; 0xfffffb9b
    178c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1790:	5f4c4148 	svcpl	0x004c4148
    1794:	5f433249 	svcpl	0x00433249
    1798:	4970734d 	ldmdbmi	r0!, {r0, r2, r3, r6, r8, r9, ip, sp, lr}^
    179c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    17a0:	5f4c4148 	svcpl	0x004c4148
    17a4:	5f433249 	svcpl	0x00433249
    17a8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    17ac:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
    17b0:	6e617271 	mcrvs	2, 3, r7, cr1, cr1, {3}
    17b4:	48006567 	stmdami	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    17b8:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    17bc:	4c5f4332 	mrrcmi	3, 3, r4, pc, cr2	; <UNPREDICTABLE>
    17c0:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    17c4:	6c70436e 	ldclvs	3, cr4, [r0], #-440	; 0xfffffe48
    17c8:	6c614374 	stclvs	3, cr4, [r1], #-464	; 0xfffffe30
    17cc:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
    17d0:	6658006b 	ldrbvs	r0, [r8], -fp, rrx
    17d4:	314d7265 	cmpcc	sp, r5, ror #4
    17d8:	746c7043 	strbtvc	r7, [ip], #-67	; 0xffffffbd
    17dc:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    17e0:	6b636162 	blvs	18d9d70 <_Min_Stack_Size+0x18d9970>
    17e4:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    17e8:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    17ec:	4473495f 	ldrbtmi	r4, [r3], #-2399	; 0xfffff6a1
    17f0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    17f4:	61655265 	cmnvs	r5, r5, ror #4
    17f8:	48007964 	stmdami	r0, {r2, r5, r6, r8, fp, ip, sp, lr}
    17fc:	4c5f4c41 	mrrcmi	12, 4, r4, pc, cr1	; <UNPREDICTABLE>
    1800:	546b636f 	strbtpl	r6, [fp], #-879	; 0xfffffc91
    1804:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1808:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    180c:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1810:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1750 <_Min_Stack_Size+0x1350>
    1814:	78526d65 	ldmdavc	r2, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1818:	746c7043 	strbtvc	r7, [ip], #-67	; 0xffffffbd
    181c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    1820:	6b636162 	blvs	18d9db0 <_Min_Stack_Size+0x18d99b0>
    1824:	72655000 	rsbvc	r5, r5, #0
    1828:	49687069 	stmdbmi	r8!, {r0, r3, r5, r6, ip, sp, lr}^
    182c:	4600636e 	strmi	r6, [r0], -lr, ror #6
    1830:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1834:	416d654d 	cmnmi	sp, sp, asr #10
    1838:	69536464 	ldmdbvs	r3, {r2, r5, r6, sl, sp, lr}^
    183c:	4d00657a 	cfstr32mi	mvfx6, [r0, #-488]	; 0xfffffe18
    1840:	75426d65 	strbvc	r6, [r2, #-3429]	; 0xfffff29b
    1844:	00747372 	rsbseq	r7, r4, r2, ror r3
    1848:	5f4c4148 	svcpl	0x004c4148
    184c:	5f433249 	svcpl	0x00433249
    1850:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1854:	48007469 	stmdami	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1858:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 1860 <_Min_Stack_Size+0x1460>
    185c:	535f414d 	cmppl	pc, #1073741843	; 0x40000013
    1860:	45544154 	ldrbmi	r4, [r4, #-340]	; 0xfffffeac
    1864:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1868:	4800524f 	stmdami	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    186c:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1870:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 17b0 <_Min_Stack_Size+0x13b0>
    1874:	5f45444f 	svcpl	0x0045444f
    1878:	004d454d 	subeq	r4, sp, sp, asr #10
    187c:	5f433249 	svcpl	0x00433249
    1880:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    1884:	72547265 	subsvc	r7, r4, #1342177286	; 0x50000006
    1888:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    188c:	425f7469 	subsmi	r7, pc, #1761607680	; 0x69000000
    1890:	48004654 	stmdami	r0, {r2, r4, r6, r9, sl, lr}
    1894:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1898:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    189c:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    18a0:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    18a4:	006b6361 	rsbeq	r6, fp, r1, ror #6
    18a8:	52544c46 	subspl	r4, r4, #17920	; 0x4600
    18ac:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    18b0:	4c4e555f 	cfstr64mi	mvdx5, [lr], {95}	; 0x5f
    18b4:	454b434f 	strbmi	r4, [fp, #-847]	; 0xfffffcb1
    18b8:	6f4e0044 	svcvs	0x004e0044
    18bc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    18c0:	4d686374 	stclmi	3, cr6, [r8, #-464]!	; 0xfffffe30
    18c4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    18c8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    18cc:	61426d61 	cmpvs	r2, r1, ror #26
    18d0:	64416573 	strbvs	r6, [r1], #-1395	; 0xfffffa8d
    18d4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    18d8:	41480073 	hvcmi	32771	; 0x8003
    18dc:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    18e0:	614d5f43 	cmpvs	sp, r3, asr #30
    18e4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    18e8:	70437854 	subvc	r7, r3, r4, asr r8
    18ec:	6143746c 	cmpvs	r3, ip, ror #8
    18f0:	61626c6c 	cmnvs	r2, ip, ror #24
    18f4:	50006b63 	andpl	r6, r0, r3, ror #22
    18f8:	6e657261 	cdpvs	2, 6, cr7, cr5, cr1, {3}
    18fc:	6f630074 	svcvs	0x00630074
    1900:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1904:	5f4c4148 	svcpl	0x004c4148
    1908:	5f433249 	svcpl	0x00433249
    190c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1910:	70795465 	rsbsvc	r5, r9, r5, ror #8
    1914:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1918:	636f4c00 	cmnvs	pc, #0, 24
    191c:	3249006b 	subcc	r0, r9, #107	; 0x6b
    1920:	614d5f43 	cmpvs	sp, r3, asr #30
    1924:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1928:	0042535f 	subeq	r5, r2, pc, asr r3
    192c:	616d654d 	cmnvs	sp, sp, asr #10
    1930:	69536464 	ldmdbvs	r3, {r2, r5, r6, sl, sp, lr}^
    1934:	6800657a 	stmdavs	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    1938:	72616d64 	rsbvc	r6, r1, #100, 26	; 0x1900
    193c:	41480078 	hvcmi	32776	; 0x8008
    1940:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1944:	6c535f43 	mrrcvs	15, 4, r5, r3, cr3
    1948:	52657661 	rsbpl	r7, r5, #101711872	; 0x6100000
    194c:	6c704378 	ldclvs	3, cr4, [r0], #-480	; 0xfffffe20
    1950:	6c614374 	stclvs	3, cr4, [r1], #-464	; 0xfffffe30
    1954:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
    1958:	4148006b 	cmpmi	r8, fp, rrx
    195c:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1960:	56455f43 	strbpl	r5, [r5], -r3, asr #30
    1964:	5152495f 	cmppl	r2, pc, asr r9
    1968:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    196c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1970:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1974:	6374614d 	cmnvs	r4, #1073741843	; 0x40000013
    1978:	646f4368 	strbtvs	r4, [pc], #-872	; 1980 <_Min_Stack_Size+0x1580>
    197c:	41480065 	cmpmi	r8, r5, rrx
    1980:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1984:	614d5f43 	cmpvs	sp, r3, asr #30
    1988:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    198c:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1990:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1994:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1998:	414d445f 	cmpmi	sp, pc, asr r4
    199c:	4154535f 	cmpmi	r4, pc, asr r3
    19a0:	525f4554 	subspl	r4, pc, #84, 10	; 0x15000000
    19a4:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    19a8:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    19ac:	414d445f 	cmpmi	sp, pc, asr r4
    19b0:	6f62415f 	svcvs	0x0062415f
    19b4:	495f7472 	ldmdbmi	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    19b8:	74530054 	ldrbvc	r0, [r3], #-84	; 0xffffffac
    19bc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    19c0:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    19c4:	32490078 	subcc	r0, r9, #120	; 0x78
    19c8:	6c535f43 	mrrcvs	15, 4, r5, r3, cr3
    19cc:	52657661 	rsbpl	r7, r5, #101711872	; 0x6100000
    19d0:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    19d4:	525f6576 	subspl	r6, pc, #494927872	; 0x1d800000
    19d8:	00454e58 	subeq	r4, r5, r8, asr lr
    19dc:	5f433249 	svcpl	0x00433249
    19e0:	61697254 	cmnvs	r9, r4, asr r2
    19e4:	4900736c 	stmdbmi	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
    19e8:	575f4332 	smmlarpl	pc, r2, r3, r4	; <UNPREDICTABLE>
    19ec:	4f746961 	svcmi	0x00746961
    19f0:	4558546e 	ldrbmi	r5, [r8, #-1134]	; 0xfffffb92
    19f4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    19f8:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    19fc:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
    1a00:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    1a04:	72754300 	rsbsvc	r4, r5, #0, 6
    1a08:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1a0c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1a10:	32490065 	subcc	r0, r9, #101	; 0x65
    1a14:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xfffff0bd
    1a18:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    1a1c:	6d654d74 	stclvs	13, cr4, [r5, #-464]!	; 0xfffffe30
    1a20:	5779726f 	ldrbpl	r7, [r9, -pc, ror #4]!
    1a24:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1a28:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1a2c:	414d445f 	cmpmi	sp, pc, asr r4
    1a30:	4154535f 	cmpmi	r4, pc, asr r3
    1a34:	415f4554 	cmpmi	pc, r4, asr r5	; <UNPREDICTABLE>
    1a38:	54524f42 	ldrbpl	r4, [r2], #-3906	; 0xfffff0be
    1a3c:	43324900 	teqmi	r2, #0, 18
    1a40:	414d445f 	cmpmi	sp, pc, asr r4
    1a44:	72656658 	rsbvc	r6, r5, #88, 12	; 0x5800000
    1a48:	746c7043 	strbtvc	r7, [ip], #-67	; 0xffffffbd
    1a4c:	72724500 	rsbsvc	r4, r2, #0, 10
    1a50:	6f43726f 	svcvs	0x0043726f
    1a54:	41006564 	tstmi	r0, r4, ror #10
    1a58:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1a5c:	6e697373 	mcrvs	3, 3, r7, cr9, cr3, {3}
    1a60:	646f4d67 	strbtvs	r4, [pc], #-3431	; 1a68 <_Min_Stack_Size+0x1668>
    1a64:	32490065 	subcc	r0, r9, #101	; 0x65
    1a68:	614d5f43 	cmpvs	sp, r3, asr #30
    1a6c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1a70:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    1a74:	52747365 	rsbspl	r7, r4, #-1811939327	; 0x94000001
    1a78:	00646165 	rsbeq	r6, r4, r5, ror #2
    1a7c:	5f4c4148 	svcpl	0x004c4148
    1a80:	5f433249 	svcpl	0x00433249
    1a84:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    1a88:	65535f65 	ldrbvs	r5, [r3, #-3941]	; 0xfffff09b
    1a8c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1a90:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    1a94:	6172545f 	cmnvs	r2, pc, asr r4
    1a98:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1a9c:	54495f74 	strbpl	r5, [r9], #-3956	; 0xfffff08c
    1aa0:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1aa4:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1aa8:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    1aac:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1ab0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1ab4:	495f6e65 	ldmdbmi	pc, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1ab8:	32490054 	subcc	r0, r9, #84	; 0x54
    1abc:	614d5f43 	cmpvs	sp, r3, asr #30
    1ac0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1ac4:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    1ac8:	57747365 	ldrbpl	r7, [r4, -r5, ror #6]!
    1acc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1ad0:	43324900 	teqmi	r2, #0, 18
    1ad4:	616c535f 	cmnvs	ip, pc, asr r3
    1ad8:	72546576 	subsvc	r6, r4, #494927872	; 0x1d800000
    1adc:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    1ae0:	425f7469 	subsmi	r7, pc, #1761607680	; 0x69000000
    1ae4:	49004654 	stmdbmi	r0, {r2, r4, r6, r9, sl, lr}
    1ae8:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    1aec:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0xfffffe94
    1af0:	4f54535f 	svcmi	0x0054535f
    1af4:	49004650 	stmdbmi	r0, {r4, r6, r9, sl, lr}
    1af8:	575f4332 	smmlarpl	pc, r2, r3, r4	; <UNPREDICTABLE>
    1afc:	4f746961 	svcmi	0x00746961
    1b00:	616c466e 	cmnvs	ip, lr, ror #12
    1b04:	746e5567 	strbtvc	r5, [lr], #-1383	; 0xfffffa99
    1b08:	69546c69 	ldmdbvs	r4, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1b0c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 15a7 <_Min_Stack_Size+0x11a7>
    1b10:	41480074 	hvcmi	32772	; 0x8004
    1b14:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1b18:	6c535f43 	mrrcvs	15, 4, r5, r3, cr3
    1b1c:	5f657661 	svcpl	0x00657661
    1b20:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1b24:	5f657669 	svcpl	0x00657669
    1b28:	48005449 	stmdami	r0, {r0, r3, r6, sl, ip, lr}
    1b2c:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1b30:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1a70 <_Min_Stack_Size+0x1670>
    1b34:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    1b38:	62415f72 	subvs	r5, r1, #456	; 0x1c8
    1b3c:	5f74726f 	svcpl	0x0074726f
    1b40:	4d005449 	cfstrsmi	mvf5, [r0, #-292]	; 0xfffffedc
    1b44:	61446d65 	cmpvs	r4, r5, ror #26
    1b48:	6c416174 	stfvse	f6, [r1], {116}	; 0x74
    1b4c:	6d6e6769 	stclvs	7, cr6, [lr, #-420]!	; 0xfffffe5c
    1b50:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1b54:	616d6468 	cmnvs	sp, r8, ror #8
    1b58:	43324900 	teqmi	r2, #0, 18
    1b5c:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
    1b60:	54726574 	ldrbtpl	r6, [r2], #-1396	; 0xfffffa8c
    1b64:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    1b68:	5f74696d 	svcpl	0x0074696d
    1b6c:	00455854 	subeq	r5, r5, r4, asr r8
    1b70:	5f433249 	svcpl	0x00433249
    1b74:	45414d44 	strbmi	r4, [r1, #-3396]	; 0xfffff2bc
    1b78:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1b7c:	616c5300 	cmnvs	ip, r0, lsl #6
    1b80:	64416576 	strbvs	r6, [r1], #-1398	; 0xfffffa8a
    1b84:	6f437264 	svcvs	0x00437264
    1b88:	48006564 	stmdami	r0, {r2, r5, r6, r8, sl, sp, lr}
    1b8c:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1b90:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1ad0 <_Min_Stack_Size+0x16d0>
    1b94:	575f6d65 	ldrbpl	r6, [pc, -r5, ror #26]
    1b98:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1b9c:	0054495f 	subseq	r4, r4, pc, asr r9
    1ba0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1ba4:	58746e65 	ldmdapl	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1ba8:	4f726566 	svcmi	0x00726566
    1bac:	6f697470 	svcvs	0x00697470
    1bb0:	4800736e 	stmdami	r0, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
    1bb4:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1bb8:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    1bbc:	45544154 	ldrbmi	r4, [r4, #-340]	; 0xfffffeac
    1bc0:	5355425f 	cmppl	r5, #-268435451	; 0xf0000005
    1bc4:	58545f59 	ldmdapl	r4, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1bc8:	53494c5f 	movtpl	r4, #40031	; 0x9c5f
    1bcc:	004e4554 	subeq	r4, lr, r4, asr r5
    1bd0:	5f4c4148 	svcpl	0x004c4148
    1bd4:	4b434f4c 	blmi	10d590c <_Min_Stack_Size+0x10d550c>
    1bd8:	48004445 	stmdami	r0, {r0, r2, r6, sl, lr}
    1bdc:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1be0:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    1be4:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0xfffffe94
    1be8:	6172545f 	cmnvs	r2, pc, asr r4
    1bec:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1bf0:	54495f74 	strbpl	r5, [r9], #-3956	; 0xfffff08c
    1bf4:	74754400 	ldrbtvc	r4, [r5], #-1024	; 0xfffffc00
    1bf8:	63794379 	cmnvs	r9, #-469762047	; 0xe4000001
    1bfc:	5800656c 	stmdapl	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    1c00:	45726566 	ldrbmi	r6, [r2, #-1382]!	; 0xfffffa9a
    1c04:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1c08:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    1c0c:	6b636162 	blvs	18da19c <_Min_Stack_Size+0x18d9d9c>
    1c10:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    1c14:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1c18:	00737365 	rsbseq	r7, r3, r5, ror #6
    1c1c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1c20:	6570536b 	ldrbvs	r5, [r0, #-875]!	; 0xfffffc95
    1c24:	48006465 	stmdami	r0, {r0, r2, r5, r6, sl, sp, lr}
    1c28:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1c2c:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1b6c <_Min_Stack_Size+0x176c>
    1c30:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    1c34:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xfffff08e
    1c38:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1c3c:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    1c40:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1c44:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1c48:	0054495f 	subseq	r4, r4, pc, asr r9
    1c4c:	69317273 	ldmdbvs	r1!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}
    1c50:	616c6674 	smcvs	50788	; 0xc664
    1c54:	68007367 	stmdavs	r0, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    1c58:	74616d64 	strbtvc	r6, [r1], #-3428	; 0xfffff29c
    1c5c:	32490078 	subcc	r0, r9, #120	; 0x78
    1c60:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1c64:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1c68:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1c6c:	72500066 	subsvc	r0, r0, #102	; 0x66
    1c70:	535f7665 	cmppl	pc, #105906176	; 0x6500000
    1c74:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1c78:	6c637000 	stclvs	0, cr7, [r3], #-0
    1c7c:	4800316b 	stmdami	r0, {r0, r1, r3, r5, r6, r8, ip, sp}
    1c80:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1c84:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1bc4 <_Min_Stack_Size+0x17c4>
    1c88:	575f6d65 	ldrbpl	r6, [pc, -r5, ror #26]
    1c8c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1c90:	736e4900 	cmnvc	lr, #0, 18
    1c94:	636e6174 	cmnvs	lr, #116, 2
    1c98:	69540065 	ldmdbvs	r4, {r0, r2, r5, r6}^
    1c9c:	74736b63 	ldrbtvc	r6, [r3], #-2915	; 0xfffff49d
    1ca0:	00747261 	rsbseq	r7, r4, r1, ror #4
    1ca4:	5f4c4148 	svcpl	0x004c4148
    1ca8:	5f433249 	svcpl	0x00433249
    1cac:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1cb0:	55425f45 	strbpl	r5, [r2, #-3909]	; 0xfffff0bb
    1cb4:	4f005953 	svcmi	0x00005953
    1cb8:	64416e77 	strbvs	r6, [r1], #-3703	; 0xfffff189
    1cbc:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1cc0:	48003273 	stmdami	r0, {r0, r1, r4, r5, r6, r9, ip, sp}
    1cc4:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1cc8:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1c08 <_Min_Stack_Size+0x1808>
    1ccc:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    1cd0:	72545f72 	subsvc	r5, r4, #456	; 0x1c8
    1cd4:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    1cd8:	495f7469 	ldmdbmi	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1cdc:	32490054 	subcc	r0, r9, #84	; 0x54
    1ce0:	6c535f43 	mrrcvs	15, 4, r5, r3, cr3
    1ce4:	5f657661 	svcpl	0x00657661
    1ce8:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    1cec:	65665800 	strbvs	r5, [r6, #-2048]!	; 0xfffff800
    1cf0:	48314d72 	ldmdami	r1!, {r1, r4, r5, r6, r8, sl, fp, lr}
    1cf4:	43666c61 	cmnmi	r6, #24832	; 0x6100
    1cf8:	43746c70 	cmnmi	r4, #112, 24	; 0x7000
    1cfc:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    1d00:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1d04:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1d08:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1d0c:	5f433249 	svcpl	0x00433249
    1d10:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    1d14:	4d747365 	ldclmi	3, cr7, [r4, #-404]!	; 0xfffffe6c
    1d18:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1d1c:	61655279 	smcvs	21801	; 0x5529
    1d20:	32490064 	subcc	r0, r9, #100	; 0x64
    1d24:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1d28:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1d2c:	42700066 	rsbsmi	r0, r0, #102	; 0x66
    1d30:	50666675 	rsbpl	r6, r6, r5, ror r6
    1d34:	48007274 	stmdami	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    1d38:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1d3c:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    1d40:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0xfffffe94
    1d44:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1d48:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1d4c:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    1d50:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1d54:	00737365 	rsbseq	r7, r3, r5, ror #6
    1d58:	5f4c4148 	svcpl	0x004c4148
    1d5c:	5f414d44 	svcpl	0x00414d44
    1d60:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1d64:	54495f74 	strbpl	r5, [r9], #-3956	; 0xfffff08c
    1d68:	6e774f00 	cdpvs	15, 7, cr4, cr7, cr0, {0}
    1d6c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1d70:	31737365 	cmncc	r3, r5, ror #6
    1d74:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1d78:	414d445f 	cmpmi	sp, pc, asr r4
    1d7c:	6174535f 	cmnvs	r4, pc, asr r3
    1d80:	79546574 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1d84:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1d88:	41480066 	cmpmi	r8, r6, rrx
    1d8c:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    1d90:	54535f41 	ldrbpl	r5, [r3], #-3905	; 0xfffff0bf
    1d94:	5f455441 	svcpl	0x00455441
    1d98:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
    1d9c:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1da0:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1da4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1dac <_Min_Stack_Size+0x19ac>
    1da8:	70795465 	rsbsvc	r5, r9, r5, ror #8
    1dac:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1db0:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1db4:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1db8:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1dc0 <_Min_Stack_Size+0x19c0>
    1dbc:	4f4e5f45 	svcmi	0x004e5f45
    1dc0:	4d00454e 	cfstr32mi	mvfx4, [r0, #-312]	; 0xfffffec8
    1dc4:	6e496d65 	cdpvs	13, 4, cr6, cr9, cr5, {3}
    1dc8:	32490063 	subcc	r0, r9, #99	; 0x63
    1dcc:	614d5f43 	cmpvs	sp, r3, asr #30
    1dd0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1dd4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1dd8:	5f657669 	svcpl	0x00657669
    1ddc:	00465442 	subeq	r5, r6, r2, asr #8
    1de0:	69327273 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}
    1de4:	616c6674 	smcvs	50788	; 0xc664
    1de8:	4d007367 	stcmi	3, cr7, [r0, #-412]	; 0xfffffe64
    1dec:	64616d65 	strbtvs	r6, [r1], #-3429	; 0xfffff29b
    1df0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1df4:	41480073 	hvcmi	32771	; 0x8003
    1df8:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1dfc:	6c535f43 	mrrcvs	15, 4, r5, r3, cr3
    1e00:	54657661 	strbtpl	r7, [r5], #-1633	; 0xfffff99f
    1e04:	6c704378 	ldclvs	3, cr4, [r0], #-480	; 0xfffffe20
    1e08:	6c614374 	stclvs	3, cr4, [r1], #-464	; 0xfffffe30
    1e0c:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
    1e10:	4148006b 	cmpmi	r8, fp, rrx
    1e14:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1e18:	6c535f43 	mrrcvs	15, 4, r5, r3, cr3
    1e1c:	5f657661 	svcpl	0x00657661
    1e20:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    1e24:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    1e28:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1e2c:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1e30:	4154535f 	cmpmi	r4, pc, asr r3
    1e34:	415f4554 	cmpmi	pc, r4, asr r5	; <UNPREDICTABLE>
    1e38:	54524f42 	ldrbpl	r4, [r2], #-3906	; 0xfffff0be
    1e3c:	43324900 	teqmi	r2, #0, 18
    1e40:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0xfffff6a1
    1e44:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1e48:	43324900 	teqmi	r2, #0, 18
    1e4c:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    1e50:	54656c64 	strbtpl	r6, [r5], #-3172	; 0xfffff39c
    1e54:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1e58:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    1e5c:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1e60:	455f4332 	ldrbmi	r4, [pc, #-818]	; 1b36 <_Min_Stack_Size+0x1736>
    1e64:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1e68:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    1e6c:	6b636162 	blvs	18da3fc <_Min_Stack_Size+0x18d9ffc>
    1e70:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1e74:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1e78:	4154535f 	cmpmi	r4, pc, asr r3
    1e7c:	425f4554 	subsmi	r4, pc, #84, 10	; 0x15000000
    1e80:	5f595355 	svcpl	0x00595355
    1e84:	46005854 			; <UNDEFINED> instruction: 0x46005854
    1e88:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 1d6c <_Min_Stack_Size+0x196c>
    1e8c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1e90:	6f737469 	svcvs	0x00737469
    1e94:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1e98:	49460073 	stmdbmi	r6, {r0, r1, r4, r5, r6}^
    1e9c:	68544f46 	ldmdavs	r4, {r1, r2, r6, r8, r9, sl, fp, lr}^
    1ea0:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1ea4:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    1ea8:	5f4c4148 	svcpl	0x004c4148
    1eac:	5f433249 	svcpl	0x00433249
    1eb0:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1eb4:	52455f45 	subpl	r5, r5, #276	; 0x114
    1eb8:	00524f52 	subseq	r4, r2, r2, asr pc
    1ebc:	5f433249 	svcpl	0x00433249
    1ec0:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    1ec4:	61725465 	cmnvs	r2, r5, ror #8
    1ec8:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1ecc:	58545f74 	ldmdapl	r4, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ed0:	41480045 	cmpmi	r8, r5, asr #32
    1ed4:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1ed8:	52455f43 	subpl	r5, r5, #268	; 0x10c
    1edc:	5152495f 	cmppl	r2, pc, asr r9
    1ee0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1ee4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1ee8:	5f4c4148 	svcpl	0x004c4148
    1eec:	5f433249 	svcpl	0x00433249
    1ef0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1ef4:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1ef8:	6e657473 	mcrvs	4, 3, r7, cr5, cr3, {3}
    1efc:	0054495f 	subseq	r4, r4, pc, asr r9
    1f00:	5f4c4148 	svcpl	0x004c4148
    1f04:	5f433249 	svcpl	0x00433249
    1f08:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    1f0c:	525f7265 	subspl	r7, pc, #1342177286	; 0x50000006
    1f10:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1f14:	445f6576 	ldrbmi	r6, [pc], #-1398	; 1f1c <_Min_Stack_Size+0x1b1c>
    1f18:	4800414d 	stmdami	r0, {r0, r2, r3, r6, r8, lr}
    1f1c:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    1f20:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1e60 <_Min_Stack_Size+0x1a60>
    1f24:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    1f28:	65525f72 	ldrbvs	r5, [r2, #-3954]	; 0xfffff08e
    1f2c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    1f30:	54495f65 	strbpl	r5, [r9], #-3941	; 0xfffff09b
    1f34:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1f38:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1f3c:	4154535f 	cmpmi	r4, pc, asr r3
    1f40:	425f4554 	subsmi	r4, pc, #84, 10	; 0x15000000
    1f44:	5f595355 	svcpl	0x00595355
    1f48:	4c5f5852 	mrrcmi	8, 5, r5, pc, cr2	; <UNPREDICTABLE>
    1f4c:	45545349 	ldrbmi	r5, [r4, #-841]	; 0xfffffcb7
    1f50:	4148004e 	cmpmi	r8, lr, asr #32
    1f54:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    1f58:	734d5f43 	movtvc	r5, #57155	; 0xdf43
    1f5c:	49654470 	stmdbmi	r5!, {r4, r5, r6, sl, lr}^
    1f60:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1f64:	5254444e 	subspl	r4, r4, #1308622848	; 0x4e000000
    1f68:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    1f6c:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1f70:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1f78 <_Min_Stack_Size+0x1b78>
    1f74:	414d5f45 	cmpmi	sp, r5, asr #30
    1f78:	52455453 	subpl	r5, r5, #1392508928	; 0x53000000
    1f7c:	32696800 	rsbcc	r6, r9, #0, 16
    1f80:	4d440063 	stclmi	0, cr0, [r4, #-396]	; 0xfffffe74
    1f84:	74535f41 	ldrbvc	r5, [r3], #-3905	; 0xfffff0bf
    1f88:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1f8c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1f90:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1f94:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
    1f98:	6f43746e 	svcvs	0x0043746e
    1f9c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1fa0:	5f4c4148 	svcpl	0x004c4148
    1fa4:	5f433249 	svcpl	0x00433249
    1fa8:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    1fac:	78527265 	ldmdavc	r2, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1fb0:	746c7043 	strbtvc	r7, [ip], #-67	; 0xffffffbd
    1fb4:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    1fb8:	6b636162 	blvs	18da548 <_Min_Stack_Size+0x18da148>
    1fbc:	61725400 	cmnvs	r2, r0, lsl #8
    1fc0:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    1fc4:	72694472 	rsbvc	r4, r9, #1912602624	; 0x72000000
    1fc8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1fcc:	4d006e6f 	stcmi	14, cr6, [r0, #-444]	; 0xfffffe44
    1fd0:	00524131 	subseq	r4, r2, r1, lsr r1
    1fd4:	6c617544 	cfstr64vs	mvdx7, [r1], #-272	; 0xfffffef0
    1fd8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1fdc:	4d737365 	ldclmi	3, cr7, [r3, #-404]!	; 0xfffffe6c
    1fe0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1fe4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1fe8:	61446870 	hvcvs	18048	; 0x4680
    1fec:	6c416174 	stfvse	f6, [r1], {116}	; 0x74
    1ff0:	6d6e6769 	stclvs	7, cr6, [lr, #-420]!	; 0xfffffe5c
    1ff4:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1ff8:	5f4c4148 	svcpl	0x004c4148
    1ffc:	5f433249 	svcpl	0x00433249
    2000:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2004:	65535f65 	ldrbvs	r5, [r3, #-3941]	; 0xfffff09b
    2008:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    200c:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    2010:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2014:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    2018:	0054495f 	subseq	r4, r4, pc, asr r9
    201c:	5f4c4148 	svcpl	0x004c4148
    2020:	5f433249 	svcpl	0x00433249
    2024:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    2028:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xfffff0bb
    202c:	00544553 	subseq	r4, r4, r3, asr r5
    2030:	5f4c4148 	svcpl	0x004c4148
    2034:	5f433249 	svcpl	0x00433249
    2038:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    203c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    2040:	43324900 	teqmi	r2, #0, 18
    2044:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2048:	426e4f74 	rsbmi	r4, lr, #116, 30	; 0x1d0
    204c:	6c464654 	mcrrvs	6, 5, r4, r6, cr4
    2050:	6e556761 	cdpvs	7, 5, cr6, cr5, cr1, {3}
    2054:	546c6974 	strbtpl	r6, [ip], #-2420	; 0xfffff68c
    2058:	6f656d69 	svcvs	0x00656d69
    205c:	48007475 	stmdami	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
    2060:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    2064:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1fa4 <_Min_Stack_Size+0x1ba4>
    2068:	78546d65 	ldmdavc	r4, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    206c:	746c7043 	strbtvc	r7, [ip], #-67	; 0xffffffbd
    2070:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    2074:	6b636162 	blvs	18da604 <_Min_Stack_Size+0x18da204>
    2078:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    207c:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    2080:	4154535f 	cmpmi	r4, pc, asr r3
    2084:	425f4554 	subsmi	r4, pc, #84, 10	; 0x15000000
    2088:	5f595355 	svcpl	0x00595355
    208c:	48005852 	stmdami	r0, {r1, r4, r6, fp, ip, lr}
    2090:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 2098 <_Min_Stack_Size+0x1c98>
    2094:	535f414d 	cmppl	pc, #1073741843	; 0x40000013
    2098:	45544154 	ldrbmi	r4, [r4, #-340]	; 0xfffffeac
    209c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    20a0:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xfffff0bb
    20a4:	445f5f00 	ldrbmi	r5, [pc], #-3840	; 20ac <_Min_Stack_Size+0x1cac>
    20a8:	485f414d 	ldmdami	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    20ac:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    20b0:	70795465 	rsbsvc	r5, r9, r5, ror #8
    20b4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    20b8:	43324900 	teqmi	r2, #0, 18
    20bc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
    20c0:	5f726574 	svcpl	0x00726574
    20c4:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    20c8:	52414f00 	subpl	r4, r1, #0, 30
    20cc:	414f0031 	cmpmi	pc, r1, lsr r0	; <UNPREDICTABLE>
    20d0:	2f003252 	svccs	0x00003252
    20d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    20d8:	6572662f 	ldrbvs	r6, [r2, #-1583]!	; 0xfffff9d1
    20dc:	6f747265 	svcvs	0x00747265
    20e0:	6f572f73 	svcvs	0x00572f73
    20e4:	70736b72 	rsbsvc	r6, r3, r2, ror fp
    20e8:	2f656361 	svccs	0x00656361
    20ec:	2e452e50 	mcrcs	14, 2, r2, cr5, cr0, {2}
    20f0:	2e4b2e4b 	cdpcs	14, 4, cr2, cr11, cr11, {2}
    20f4:	6c502f41 	mrrcvs	15, 4, r2, r0, cr1
    20f8:	6f667461 	svcvs	0x00667461
    20fc:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    2100:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2104:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    2108:	5f57465f 	svcpl	0x0057465f
    210c:	442f3446 	strtmi	r3, [pc], #-1094	; 2114 <_Min_Stack_Size+0x1d14>
    2110:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2114:	532f7372 			; <UNDEFINED> instruction: 0x532f7372
    2118:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    211c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2120:	4c41485f 	mcrrmi	8, 5, r4, r1, cr15
    2124:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2128:	2f726576 	svccs	0x00726576
    212c:	2f637253 	svccs	0x00637253
    2130:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2134:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2138:	61685f78 	smcvs	34296	; 0x85f8
    213c:	32695f6c 	rsbcc	r5, r9, #108, 30	; 0x1b0
    2140:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2144:	5f4c4148 	svcpl	0x004c4148
    2148:	5f433249 	svcpl	0x00433249
    214c:	5f6d654d 	svcpl	0x006d654d
    2150:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    2154:	4d445f65 	stclmi	15, cr5, [r4, #-404]	; 0xfffffe6c
    2158:	41480041 	cmpmi	r8, r1, asr #32
    215c:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    2160:	654d5f43 	strbvs	r5, [sp, #-3907]	; 0xfffff0bd
    2164:	65525f6d 	ldrbvs	r5, [r2, #-3949]	; 0xfffff093
    2168:	495f6461 	ldmdbmi	pc, {r0, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    216c:	65470054 	strbvs	r0, [r7, #-84]	; 0xffffffac
    2170:	6172656e 	cmnvs	r2, lr, ror #10
    2174:	6c61436c 	stclvs	3, cr4, [r1], #-432	; 0xfffffe50
    2178:	646f4d6c 	strbtvs	r4, [pc], #-3436	; 2180 <_Min_Stack_Size+0x1d80>
    217c:	41480065 	cmpmi	r8, r5, rrx
    2180:	32495f4c 	subcc	r5, r9, #76, 30	; 0x130
    2184:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
    2188:	5f455441 	svcpl	0x00455441
    218c:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
    2190:	48004e45 	stmdami	r0, {r0, r2, r6, r9, sl, fp, lr}
    2194:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    2198:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 20d8 <_Min_Stack_Size+0x1cd8>
    219c:	525f6d65 	subspl	r6, pc, #6464	; 0x1940
    21a0:	00646165 	rsbeq	r6, r4, r5, ror #2
    21a4:	416d654d 	cmnmi	sp, sp, asr #10
    21a8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    21ac:	48007373 	stmdami	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    21b0:	495f4c41 	ldmdbmi	pc, {r0, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    21b4:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    21b8:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0xfffffe94
    21bc:	6172545f 	cmnvs	r2, pc, asr r4
    21c0:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    21c4:	4d445f74 	stclmi	15, cr5, [r4, #-464]	; 0xfffffe30
    21c8:	32490041 	subcc	r0, r9, #65	; 0x41
    21cc:	6c535f43 	mrrcvs	15, 4, r5, r3, cr3
    21d0:	5f657661 	svcpl	0x00657661
    21d4:	70004641 	andvc	r4, r0, r1, asr #12
    21d8:	61746144 	cmnvs	r4, r4, asr #2
    21dc:	65665800 	strbvs	r5, [r6, #-2048]!	; 0xfffff800
    21e0:	6f624172 	svcvs	0x00624172
    21e4:	61437472 	hvcvs	14146	; 0x3742
    21e8:	61626c6c 	cmnvs	r2, ip, ror #24
    21ec:	58006b63 	stmdapl	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    21f0:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    21f4:	43746c70 	cmnmi	r4, #112, 24	; 0x7000
    21f8:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    21fc:	006b6361 	rsbeq	r6, fp, r1, ror #6
    2200:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2204:	75426870 	strbvc	r6, [r2, #-2160]	; 0xfffff790
    2208:	00747372 	rsbseq	r7, r4, r2, ror r3
    220c:	5f4c4148 	svcpl	0x004c4148
    2210:	5f414d44 	svcpl	0x00414d44
    2214:	52454658 	subpl	r4, r5, #88, 12	; 0x5800000
    2218:	4f42415f 	svcmi	0x0042415f
    221c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2220:	44495f42 	strbmi	r5, [r9], #-3906	; 0xfffff0be
    2224:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2228:	414d445f 	cmpmi	sp, pc, asr r4
    222c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2230:	41480074 	hvcmi	32772	; 0x8004
    2234:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    2238:	65525f41 	ldrbvs	r5, [r2, #-3905]	; 0xfffff0bf
    223c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    2240:	61437265 	cmpvs	r3, r5, ror #4
    2244:	61626c6c 	cmnvs	r2, ip, ror #24
    2248:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
    224c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2250:	30646576 	rsbcc	r6, r4, r6, ror r5
    2254:	616c6600 	cmnvs	ip, r0, lsl #12
    2258:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    225c:	66696873 			; <UNDEFINED> instruction: 0x66696873
    2260:	66664f74 	uqsub16vs	r4, r6, r4
    2264:	00746573 	rsbseq	r6, r4, r3, ror r5
    2268:	69706d74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    226c:	48007273 	stmdami	r0, {r0, r1, r4, r5, r6, r9, ip, sp, lr}
    2270:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 2278 <_Min_Stack_Size+0x1e78>
    2274:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    2278:	72457465 	subvc	r7, r5, #1694498816	; 0x65000000
    227c:	00726f72 	rsbseq	r6, r2, r2, ror pc
    2280:	5f4c4148 	svcpl	0x004c4148
    2284:	5f414d44 	svcpl	0x00414d44
    2288:	52454658 	subpl	r4, r5, #88, 12	; 0x5800000
    228c:	4c50435f 	mrrcmi	3, 5, r4, r0, cr15
    2290:	42435f54 	submi	r5, r3, #84, 30	; 0x150
    2294:	0044495f 	subeq	r4, r4, pc, asr r9
    2298:	5f4c4148 	svcpl	0x004c4148
    229c:	5f414d44 	svcpl	0x00414d44
    22a0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    22a4:	41480074 	hvcmi	32772	; 0x8004
    22a8:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    22ac:	46585f41 	ldrbmi	r5, [r8], -r1, asr #30
    22b0:	4d5f5245 	lfmmi	f5, 2, [pc, #-276]	; 21a4 <_Min_Stack_Size+0x1da4>
    22b4:	4c504331 	mrrcmi	3, 3, r4, r0, cr1
    22b8:	42435f54 	submi	r5, r3, #84, 30	; 0x150
    22bc:	0044495f 	subeq	r4, r4, pc, asr r9
    22c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 220c <_Min_Stack_Size+0x1e0c>
    22c4:	72662f65 	rsbvc	r2, r6, #404	; 0x194
    22c8:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
    22cc:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
    22d0:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    22d4:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    22d8:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
    22dc:	4b2e4b2e 	blmi	b94f9c <_Min_Stack_Size+0xb94b9c>
    22e0:	502f412e 	eorpl	r4, pc, lr, lsr #2
    22e4:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    22e8:	2f6d726f 	svccs	0x006d726f
    22ec:	334d5453 	movtcc	r5, #54355	; 0xd453
    22f0:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    22f4:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    22f8:	2f34465f 	svccs	0x0034465f
    22fc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2300:	2f737265 	svccs	0x00737265
    2304:	334d5453 	movtcc	r5, #54355	; 0xd453
    2308:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    230c:	41485f78 	hvcmi	34296	; 0x85f8
    2310:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
    2314:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2318:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
    231c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    2320:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    2324:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    2328:	645f6c61 	ldrbvs	r6, [pc], #-3169	; 2330 <_Min_Stack_Size+0x1f30>
    232c:	632e616d 			; <UNDEFINED> instruction: 0x632e616d
    2330:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2334:	414d445f 	cmpmi	sp, pc, asr r4
    2338:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    233c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2340:	5f4c4148 	svcpl	0x004c4148
    2344:	5f414d44 	svcpl	0x00414d44
    2348:	52454658 	subpl	r4, r5, #88, 12	; 0x5800000
    234c:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    2350:	435f524f 	cmpmi	pc, #-268435452	; 0xf0000004
    2354:	44495f42 	strbmi	r5, [r9], #-3906	; 0xfffff0be
    2358:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    235c:	414d445f 	cmpmi	sp, pc, asr r4
    2360:	4c41485f 	mcrrmi	8, 5, r4, r1, cr15
    2364:	52545f46 	subspl	r5, r4, #280	; 0x118
    2368:	46534e41 	ldrbmi	r4, [r3], -r1, asr #28
    236c:	44005245 	strmi	r5, [r0], #-581	; 0xfffffdbb
    2370:	535f414d 	cmppl	pc, #1073741843	; 0x40000013
    2374:	6f437465 	svcvs	0x00437465
    2378:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    237c:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2380:	414d445f 	cmpmi	sp, pc, asr r4
    2384:	76654c5f 			; <UNDEFINED> instruction: 0x76654c5f
    2388:	6f436c65 	svcvs	0x00436c65
    238c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    2390:	79546574 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2394:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    2398:	41480066 	cmpmi	r8, r6, rrx
    239c:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    23a0:	55465f41 	strbpl	r5, [r6, #-3905]	; 0xfffff0bf
    23a4:	545f4c4c 	ldrbpl	r4, [pc], #-3148	; 23ac <_Min_Stack_Size+0x1fac>
    23a8:	534e4152 	movtpl	r4, #57682	; 0xe152
    23ac:	00524546 	subseq	r4, r2, r6, asr #10
    23b0:	65727473 	ldrbvs	r7, [r2, #-1139]!	; 0xfffffb8d
    23b4:	6e5f6d61 	cdpvs	13, 5, cr6, cr15, cr1, {3}
    23b8:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    23bc:	41480072 	hvcmi	32770	; 0x8002
    23c0:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    23c4:	61435f41 	cmpvs	r3, r1, asr #30
    23c8:	61626c6c 	cmnvs	r2, ip, ror #24
    23cc:	44496b63 	strbmi	r6, [r9], #-2915	; 0xfffff49d
    23d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    23d4:	00666544 	rsbeq	r6, r6, r4, asr #10
    23d8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    23dc:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    23e0:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    23e4:	4148006c 	cmpmi	r8, ip, rrx
    23e8:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    23ec:	62415f41 	subvs	r5, r1, #260	; 0x104
    23f0:	0074726f 	rsbseq	r7, r4, pc, ror #4
    23f4:	52434649 	subpl	r4, r3, #76546048	; 0x4900000
    23f8:	74734400 	ldrbtvc	r4, [r3], #-1024	; 0xfffffc00
    23fc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2400:	00737365 	rsbseq	r7, r3, r5, ror #6
    2404:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    2408:	6b636162 	blvs	18da998 <_Min_Stack_Size+0x18da598>
    240c:	44004449 	strmi	r4, [r0], #-1097	; 0xfffffbb7
    2410:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    2414:	6b636568 	blvs	18db9bc <_Min_Stack_Size+0x18db5bc>
    2418:	6f666946 	svcvs	0x00666946
    241c:	61726150 	cmnvs	r2, r0, asr r1
    2420:	4148006d 	cmpmi	r8, sp, rrx
    2424:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    2428:	6e555f41 	cdpvs	15, 5, cr5, cr5, cr1, {2}
    242c:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    2430:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2434:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    2438:	6b636162 	blvs	18da9c8 <_Min_Stack_Size+0x18da5c8>
    243c:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2440:	414d445f 	cmpmi	sp, pc, asr r4
    2444:	5152495f 	cmppl	r2, pc, asr r9
    2448:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    244c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2450:	5f4c4148 	svcpl	0x004c4148
    2454:	5f414d44 	svcpl	0x00414d44
    2458:	52454658 	subpl	r4, r5, #88, 12	; 0x5800000
    245c:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
    2460:	5f42435f 	svcpl	0x0042435f
    2464:	44004449 	strmi	r4, [r0], #-1097	; 0xfffffbb7
    2468:	425f414d 	subsmi	r4, pc, #1073741843	; 0x40000013
    246c:	5f657361 	svcpl	0x00657361
    2470:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    2474:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2478:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    247c:	61435f41 	cmpvs	r3, r1, asr #30
    2480:	6142636c 	cmpvs	r2, ip, ror #6
    2484:	6e416573 	mcrvs	5, 2, r6, cr1, cr3, {3}
    2488:	74694264 	strbtvc	r4, [r9], #-612	; 0xfffffd9c
    248c:	66696873 			; <UNDEFINED> instruction: 0x66696873
    2490:	41480074 	hvcmi	32772	; 0x8004
    2494:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    2498:	46585f41 	ldrbmi	r5, [r8], -r1, asr #30
    249c:	485f5245 	ldmdami	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    24a0:	43464c41 	movtmi	r4, #27713	; 0x6c41
    24a4:	5f544c50 	svcpl	0x00544c50
    24a8:	495f4243 	ldmdbmi	pc, {r0, r1, r6, r9, lr}^	; <UNPREDICTABLE>
    24ac:	41480044 	cmpmi	r8, r4, asr #32
    24b0:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    24b4:	46585f41 	ldrbmi	r5, [r8], -r1, asr #30
    24b8:	4d5f5245 	lfmmi	f5, 2, [pc, #-276]	; 23ac <_Min_Stack_Size+0x1fac>
    24bc:	4c414831 	mcrrmi	8, 3, r4, r1, cr1
    24c0:	4c504346 	mrrcmi	3, 4, r4, r0, cr6
    24c4:	42435f54 	submi	r5, r3, #84, 30	; 0x150
    24c8:	0044495f 	subeq	r4, r4, pc, asr r9
    24cc:	41637253 	cmnmi	r3, r3, asr r2
    24d0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    24d4:	44007373 	strmi	r7, [r0], #-883	; 0xfffffc8d
    24d8:	4c617461 	cfstrdmi	mvd7, [r1], #-388	; 0xfffffe7c
    24dc:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    24e0:	41480068 	cmpmi	r8, r8, rrx
    24e4:	4d445f4c 	stclmi	15, cr5, [r4, #-304]	; 0xfffffed0
    24e8:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xfffff0bf
    24ec:	61745374 	cmnvs	r4, r4, ror r3
    24f0:	70006574 	andvc	r6, r0, r4, ror r5
    24f4:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    24f8:	6b636162 	blvs	18daa88 <_Min_Stack_Size+0x18da688>
    24fc:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2500:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    2504:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
    2508:	616d0073 	smcvs	53251	; 0xd003
    250c:	635f6b73 	cmpvs	pc, #117760	; 0x1cc00
    2510:	6c746c70 	ldclvs	12, cr6, [r4], #-448	; 0xfffffe40
    2514:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    2518:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    251c:	414d445f 	cmpmi	sp, pc, asr r4
    2520:	6c6f505f 	stclvs	0, cr5, [pc], #-380	; 23ac <_Min_Stack_Size+0x1fac>
    2524:	726f466c 	rsbvc	r4, pc, #108, 12	; 0x6c00000
    2528:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    252c:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    2530:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2534:	4343525f 	movtmi	r5, #12895	; 0x325f
    2538:	5353435f 	cmppl	r3, #2080374785	; 0x7c000001
    253c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    2540:	6b636162 	blvs	18daad0 <_Min_Stack_Size+0x18da6d0>
    2544:	6f682f00 	svcvs	0x00682f00
    2548:	662f656d 	strtvs	r6, [pc], -sp, ror #10
    254c:	72656572 	rsbvc	r6, r5, #478150656	; 0x1c800000
    2550:	2f736f74 	svccs	0x00736f74
    2554:	6b726f57 	blvs	1c9e2b8 <_Min_Stack_Size+0x1c9deb8>
    2558:	63617073 	cmnvs	r1, #115	; 0x73
    255c:	2e502f65 	cdpcs	15, 5, cr2, cr0, cr5, {3}
    2560:	2e4b2e45 	cdpcs	14, 4, cr2, cr11, cr5, {2}
    2564:	2f412e4b 	svccs	0x00412e4b
    2568:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
    256c:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    2570:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2574:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2578:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
    257c:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
    2580:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    2584:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2588:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    258c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    2590:	485f7878 	ldmdami	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    2594:	445f4c41 	ldrbmi	r4, [pc], #-3137	; 259c <_Min_Stack_Size+0x219c>
    2598:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    259c:	72532f72 	subsvc	r2, r3, #456	; 0x1c8
    25a0:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    25a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    25a8:	5f787834 	svcpl	0x00787834
    25ac:	5f6c6168 	svcpl	0x006c6168
    25b0:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    25b4:	50470063 	subpl	r0, r7, r3, rrx
    25b8:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    25bc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    25c0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    25c4:	43520074 	cmpmi	r2, #116	; 0x74
    25c8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    25cc:	7669444f 	strbtvc	r4, [r9], -pc, asr #8
    25d0:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    25d4:	4343525f 	movtmi	r5, #12895	; 0x325f
    25d8:	616e455f 	cmnvs	lr, pc, asr r5
    25dc:	43656c62 	cmnmi	r5, #25088	; 0x6200
    25e0:	73005353 	movwvc	r5, #851	; 0x353
    25e4:	6c637379 	stclvs	3, cr7, [r3], #-484	; 0xfffffe1c
    25e8:	666b636f 	strbtvs	r6, [fp], -pc, ror #6
    25ec:	00716572 	rsbseq	r6, r1, r2, ror r5
    25f0:	5f4c4148 	svcpl	0x004c4148
    25f4:	5f434352 	svcpl	0x00434352
    25f8:	61736944 	cmnvs	r3, r4, asr #18
    25fc:	43656c62 	cmnmi	r5, #25088	; 0x6200
    2600:	48005353 	stmdami	r0, {r0, r1, r4, r6, r8, r9, ip, lr}
    2604:	525f4c41 	subspl	r4, pc, #16640	; 0x4100
    2608:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2504 <_Min_Stack_Size+0x2104>
    260c:	6f434f43 	svcvs	0x00434f43
    2610:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2614:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2618:	4343525f 	movtmi	r5, #12895	; 0x325f
    261c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2620:	4b4c4350 	blmi	1313368 <_Min_Stack_Size+0x1312f68>
    2624:	65724632 	ldrbvs	r4, [r2, #-1586]!	; 0xfffff9ce
    2628:	50410071 	subpl	r0, r1, r1, ror r0
    262c:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    2630:	73657250 	cmnvc	r5, #80, 4
    2634:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    2638:	4800656c 	stmdami	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    263c:	525f4c41 	subspl	r4, pc, #16640	; 0x4100
    2640:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2644:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2648:	6f6c4373 	svcvs	0x006c4373
    264c:	72466b63 	subvc	r6, r6, #101376	; 0x18c00
    2650:	48007165 	stmdami	r0, {r0, r2, r5, r6, r8, ip, sp, lr}
    2654:	525f4c41 	subspl	r4, pc, #16640	; 0x4100
    2658:	445f4343 	ldrbmi	r4, [pc], #-835	; 2660 <_Min_Stack_Size+0x2260>
    265c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2660:	43520074 	cmpmi	r2, #116	; 0x74
    2664:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    2668:	756f534f 	strbvc	r5, [pc, #-847]!	; 2321 <_Min_Stack_Size+0x1f21>
    266c:	00656372 	rsbeq	r6, r5, r2, ror r3
    2670:	5f4c4148 	svcpl	0x004c4148
    2674:	5f434352 	svcpl	0x00434352
    2678:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    267c:	6b636f6c 	blvs	18de434 <_Min_Stack_Size+0x18de034>
    2680:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2684:	48006769 	stmdami	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2688:	525f4c41 	subspl	r4, pc, #16640	; 0x4100
    268c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2690:	43487465 	movtmi	r7, #33893	; 0x8465
    2694:	72464b4c 	subvc	r4, r6, #76, 22	; 0x13000
    2698:	52007165 	andpl	r7, r0, #1073741849	; 0x40000019
    269c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2598 <_Min_Stack_Size+0x2198>
    26a0:	00784f43 	rsbseq	r4, r8, r3, asr #30
    26a4:	614c4670 	hvcvs	50272	; 0xc460
    26a8:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
    26ac:	41480079 	hvcmi	32777	; 0x8009
    26b0:	43525f4c 	cmpmi	r2, #76, 30	; 0x130
    26b4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    26b8:	63734f74 	cmnvs	r3, #116, 30	; 0x1d0
    26bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    26c0:	48006769 	stmdami	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    26c4:	525f4c41 	subspl	r4, pc, #16640	; 0x4100
    26c8:	4e5f4343 	cdpmi	3, 5, cr4, cr15, cr3, {2}
    26cc:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    26d0:	61485152 	cmpvs	r8, r2, asr r1
    26d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    26d8:	65520072 	ldrbvs	r0, [r2, #-114]	; 0xffffff8e
    26dc:	616c7567 	cmnvs	ip, r7, ror #10
    26e0:	00726f74 	rsbseq	r6, r2, r4, ror pc
    26e4:	5f4c4148 	svcpl	0x004c4148
    26e8:	45525750 	ldrbmi	r5, [r2, #-1872]	; 0xfffff8b0
    26ec:	65475f78 	strbvs	r5, [r7, #-3960]	; 0xfffff088
    26f0:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 2528 <_Min_Stack_Size+0x2128>
    26f4:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    26f8:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
    26fc:	41480065 	cmpmi	r8, r5, rrx
    2700:	57505f4c 	ldrbpl	r5, [r0, -ip, asr #30]
    2704:	5f784552 	svcpl	0x00784552
    2708:	61736944 	cmnvs	r3, r4, asr #18
    270c:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    2710:	5270556b 	rsbspl	r5, r0, #448790528	; 0x1ac00000
    2714:	2f006765 	svccs	0x00006765
    2718:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    271c:	6572662f 	ldrbvs	r6, [r2, #-1583]!	; 0xfffff9d1
    2720:	6f747265 	svcvs	0x00747265
    2724:	6f572f73 	svcvs	0x00572f73
    2728:	70736b72 	rsbsvc	r6, r3, r2, ror fp
    272c:	2f656361 	svccs	0x00656361
    2730:	2e452e50 	mcrcs	14, 2, r2, cr5, cr0, {2}
    2734:	2e4b2e4b 	cdpcs	14, 4, cr2, cr11, cr11, {2}
    2738:	6c502f41 	mrrcvs	15, 4, r2, r0, cr1
    273c:	6f667461 	svcvs	0x00667461
    2740:	532f6d72 			; <UNDEFINED> instruction: 0x532f6d72
    2744:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2748:	65627543 	strbvs	r7, [r2, #-1347]!	; 0xfffffabd
    274c:	5f57465f 	svcpl	0x0057465f
    2750:	442f3446 	strtmi	r3, [pc], #-1094	; 2758 <_Min_Stack_Size+0x2358>
    2754:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2758:	532f7372 			; <UNDEFINED> instruction: 0x532f7372
    275c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2760:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2764:	4c41485f 	mcrrmi	8, 5, r4, r1, cr15
    2768:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    276c:	2f726576 	svccs	0x00726576
    2770:	2f637253 	svccs	0x00637253
    2774:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2778:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    277c:	61685f78 	smcvs	34296	; 0x85f8
    2780:	77705f6c 	ldrbvc	r5, [r0, -ip, ror #30]!
    2784:	78655f72 	stmdavc	r5!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2788:	5300632e 	movwpl	r6, #814	; 0x32e
    278c:	45504f54 	ldrbmi	r4, [r0, #-3924]	; 0xfffff0ac
    2790:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    2794:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2798:	5257505f 	subspl	r5, r7, #95	; 0x5f
    279c:	445f7845 	ldrbmi	r7, [pc], #-2117	; 27a4 <_Min_Stack_Size+0x23a4>
    27a0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    27a4:	6c46656c 	cfstr64vs	mvdx6, [r6], {108}	; 0x6c
    27a8:	50687361 	rsbpl	r7, r8, r1, ror #6
    27ac:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    27b0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    27b4:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    27b8:	31676572 	smccc	30290	; 0x7652
    27bc:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    27c0:	5257505f 	subspl	r5, r7, #95	; 0x5f
    27c4:	445f7845 	ldrbmi	r7, [pc], #-2117	; 27cc <_Min_Stack_Size+0x23cc>
    27c8:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    27cc:	764f656c 	strbvc	r6, [pc], -ip, ror #10
    27d0:	72447265 	subvc	r7, r4, #1342177286	; 0x50000006
    27d4:	00657669 	rsbeq	r7, r5, r9, ror #12
    27d8:	5f4c4148 	svcpl	0x004c4148
    27dc:	45525750 	ldrbmi	r5, [r2, #-1872]	; 0xfffff8b0
    27e0:	6f435f78 	svcvs	0x00435f78
    27e4:	6f72746e 	svcvs	0x0072746e
    27e8:	6c6f566c 	stclvs	6, cr5, [pc], #-432	; 2640 <_Min_Stack_Size+0x2240>
    27ec:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    27f0:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
    27f4:	00676e69 	rsbeq	r6, r7, r9, ror #28
    27f8:	46575f5f 	usaxmi	r5, r7, pc	; <UNPREDICTABLE>
    27fc:	41480045 	cmpmi	r8, r5, asr #32
    2800:	57505f4c 	ldrbpl	r5, [r0, -ip, asr #30]
    2804:	5f784552 	svcpl	0x00784552
    2808:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    280c:	6b42656c 	blvs	109bdc4 <_Min_Stack_Size+0x109b9c4>
    2810:	65527055 	ldrbvs	r7, [r2, #-85]	; 0xffffffab
    2814:	5f5f0067 	svcpl	0x005f0067
    2818:	00494657 	subeq	r4, r9, r7, asr r6
    281c:	5f4c4148 	svcpl	0x004c4148
    2820:	45525750 	ldrbmi	r5, [r2, #-1872]	; 0xfffff8b0
    2824:	6e455f78 	mcrvs	15, 2, r5, cr5, cr8, {3}
    2828:	55726574 	ldrbpl	r6, [r2, #-1396]!	; 0xfffffa8c
    282c:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
    2830:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2834:	4f545365 	svcmi	0x00545365
    2838:	646f4d50 	strbtvs	r4, [pc], #-3408	; 2840 <_Min_Stack_Size+0x2440>
    283c:	41480065 	cmpmi	r8, r5, rrx
    2840:	57505f4c 	ldrbpl	r5, [r0, -ip, asr #30]
    2844:	5f784552 	svcpl	0x00784552
    2848:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    284c:	6c46656c 	cfstr64vs	mvdx6, [r6], {108}	; 0x6c
    2850:	50687361 	rsbpl	r7, r8, r1, ror #6
    2854:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    2858:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    285c:	43585200 	cmpmi	r8, #0, 4
    2860:	00524352 	subseq	r4, r2, r2, asr r3
    2864:	5f495053 	svcpl	0x00495053
    2868:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    286c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2870:	00666544 	rsbeq	r6, r6, r4, asr #10
    2874:	5f4c4148 	svcpl	0x004c4148
    2878:	5f495053 	svcpl	0x00495053
    287c:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    2880:	55425f45 	strbpl	r5, [r2, #-3909]	; 0xfffff0bb
    2884:	525f5953 	subspl	r5, pc, #1359872	; 0x14c000
    2888:	50530058 	subspl	r0, r3, r8, asr r0
    288c:	6c325f49 	ldcvs	15, cr5, [r2], #-292	; 0xfffffedc
    2890:	73656e69 	cmnvc	r5, #1680	; 0x690
    2894:	53497854 	movtpl	r7, #38996	; 0x9854
    2898:	36315f52 	shsaxcc	r5, r1, r2
    289c:	00544942 	subseq	r4, r4, r2, asr #18
    28a0:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    28a4:	665f6765 	ldrbvs	r6, [pc], -r5, ror #14
    28a8:	48006572 	stmdami	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
    28ac:	535f4c41 	cmppl	pc, #16640	; 0x4100
    28b0:	4d5f4950 	ldclmi	9, cr4, [pc, #-320]	; 2778 <_Min_Stack_Size+0x2378>
    28b4:	6e497073 	mcrvs	0, 2, r7, cr9, cr3, {3}
    28b8:	53007469 	movwpl	r7, #1129	; 0x469
    28bc:	445f4950 	ldrbmi	r4, [pc], #-2384	; 28c4 <_Min_Stack_Size+0x24c4>
    28c0:	6148414d 	cmpvs	r8, sp, asr #2
    28c4:	7254666c 	subsvc	r6, r4, #108, 12	; 0x6c00000
    28c8:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    28cc:	70437469 	subvc	r7, r3, r9, ror #8
    28d0:	4300746c 	movwmi	r7, #1132	; 0x46c
    28d4:	6f504352 	svcvs	0x00504352
    28d8:	6f6e796c 	svcvs	0x006e796c
    28dc:	6c61696d 	stclvs	9, cr6, [r1], #-436	; 0xfffffe4c
    28e0:	49785200 	ldmdbmi	r8!, {r9, ip, lr}^
    28e4:	43005253 	movwmi	r5, #595	; 0x253
    28e8:	52504352 	subspl	r4, r0, #1207959553	; 0x48000001
    28ec:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    28f0:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    28f4:	4378525f 	cmnmi	r8, #-268435451	; 0xf0000005
    28f8:	43746c70 	cmnmi	r4, #112, 24	; 0x7000
    28fc:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    2900:	006b6361 	rsbeq	r6, fp, r1, ror #6
    2904:	5f4c4148 	svcpl	0x004c4148
    2908:	5f495053 	svcpl	0x00495053
    290c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    2910:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    2914:	414d445f 	cmpmi	sp, pc, asr r4
    2918:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    291c:	414d445f 	cmpmi	sp, pc, asr r4
    2920:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    2924:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2928:	43657669 	cmnmi	r5, #110100480	; 0x6900000
    292c:	00746c70 	rsbseq	r6, r4, r0, ror ip
    2930:	5f4c4148 	svcpl	0x004c4148
    2934:	5f495053 	svcpl	0x00495053
    2938:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    293c:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    2940:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2944:	414d445f 	cmpmi	sp, pc, asr r4
    2948:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    294c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    2950:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    2954:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2958:	43657669 	cmnmi	r5, #110100480	; 0x6900000
    295c:	00746c70 	rsbseq	r6, r4, r0, ror ip
    2960:	5f495053 	svcpl	0x00495053
    2964:	6e696c32 	mcrvs	12, 3, r6, cr9, cr2, {1}
    2968:	78527365 	ldmdavc	r2, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    296c:	5f525349 	svcpl	0x00525349
    2970:	49423631 	stmdbmi	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2974:	41480054 	qdaddmi	r0, r4, r8
    2978:	50535f4c 	subspl	r5, r3, ip, asr #30
    297c:	78525f49 	ldmdavc	r2, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    2980:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    2984:	746c7043 	strbtvc	r7, [ip], #-67	; 0xffffffbd
    2988:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    298c:	6b636162 	blvs	18daf1c <_Min_Stack_Size+0x18dab1c>
    2990:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2994:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2998:	5152495f 	cmppl	r2, pc, asr r9
    299c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    29a0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    29a4:	6f737469 	svcvs	0x00737469
    29a8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    29ac:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    29b0:	414d445f 	cmpmi	sp, pc, asr r4
    29b4:	6f727245 	svcvs	0x00727245
    29b8:	73680072 	cmnvc	r8, #114	; 0x72
    29bc:	49006970 	stmdbmi	r0, {r4, r5, r6, r8, fp, sp, lr}
    29c0:	52505332 	subspl	r5, r0, #-939524096	; 0xc8000000
    29c4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    29c8:	696c325f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
    29cc:	5273656e 	rsbspl	r6, r3, #461373440	; 0x1b800000
    29d0:	52534978 	subspl	r4, r3, #120, 18	; 0x1e0000
    29d4:	4942385f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, fp, ip, sp}^
    29d8:	54700054 	ldrbtpl	r0, [r0], #-84	; 0xffffffac
    29dc:	66754278 			; <UNDEFINED> instruction: 0x66754278
    29e0:	72745066 	rsbsvc	r5, r4, #102	; 0x66
    29e4:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    29e8:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    29ec:	4154535f 	cmpmi	r4, pc, asr r3
    29f0:	425f4554 	subsmi	r4, pc, #84, 10	; 0x15000000
    29f4:	5f595355 	svcpl	0x00595355
    29f8:	53005854 	movwpl	r5, #2132	; 0x854
    29fc:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2a04 <_Min_Stack_Size+0x2604>
    2a00:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    2a04:	53006665 	movwpl	r6, #1637	; 0x665
    2a08:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2a10 <_Min_Stack_Size+0x2610>
    2a0c:	52534978 	subspl	r4, r3, #120, 18	; 0x1e0000
    2a10:	4942385f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, fp, ip, sp}^
    2a14:	78740054 	ldmdavc	r4!, {r2, r4, r6}^
    2a18:	6f6c6c61 	svcvs	0x006c6c61
    2a1c:	00646577 	rsbeq	r6, r4, r7, ror r5
    2a20:	52435854 	subpl	r5, r3, #84, 16	; 0x540000
    2a24:	70005243 	andvc	r5, r0, r3, asr #4
    2a28:	61447852 	cmpvs	r4, r2, asr r8
    2a2c:	5f006174 	svcpl	0x00006174
    2a30:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2a34:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2a3c <_Min_Stack_Size+0x263c>
    2a38:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2a3c:	414d445f 	cmpmi	sp, pc, asr r4
    2a40:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2a44:	43657669 	cmnmi	r5, #110100480	; 0x6900000
    2a48:	00746c70 	rsbseq	r6, r4, r0, ror ip
    2a4c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2998 <_Min_Stack_Size+0x2598>
    2a50:	72662f65 	rsbvc	r2, r6, #404	; 0x194
    2a54:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0xfffffa9b
    2a58:	572f736f 	strpl	r7, [pc, -pc, ror #6]!
    2a5c:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    2a60:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    2a64:	452e502f 	strmi	r5, [lr, #-47]!	; 0xffffffd1
    2a68:	4b2e4b2e 	blmi	b95728 <_Min_Stack_Size+0xb95328>
    2a6c:	502f412e 	eorpl	r4, pc, lr, lsr #2
    2a70:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
    2a74:	2f6d726f 	svccs	0x006d726f
    2a78:	334d5453 	movtcc	r5, #54355	; 0xd453
    2a7c:	62754332 	rsbsvs	r4, r5, #-939524096	; 0xc8000000
    2a80:	57465f65 	strbpl	r5, [r6, -r5, ror #30]
    2a84:	2f34465f 	svccs	0x0034465f
    2a88:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2a8c:	2f737265 	svccs	0x00737265
    2a90:	334d5453 	movtcc	r5, #54355	; 0xd453
    2a94:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2a98:	41485f78 	hvcmi	34296	; 0x85f8
    2a9c:	72445f4c 	subvc	r5, r4, #76, 30	; 0x130
    2aa0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2aa4:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2aa8:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    2aac:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    2ab0:	685f7878 	ldmdavs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    2ab4:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    2ab8:	632e6970 			; <UNDEFINED> instruction: 0x632e6970
    2abc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2ac0:	696c325f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
    2ac4:	5473656e 	ldrbtpl	r6, [r3], #-1390	; 0xfffffa92
    2ac8:	52534978 	subspl	r4, r3, #120, 18	; 0x1e0000
    2acc:	4942385f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, fp, ip, sp}^
    2ad0:	6d740054 	ldclvs	0, cr0, [r4, #-336]!	; 0xfffffeb0
    2ad4:	67657270 			; <UNDEFINED> instruction: 0x67657270
    2ad8:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 2ae0 <_Min_Stack_Size+0x26e0>
    2adc:	41480066 	cmpmi	r8, r6, rrx
    2ae0:	50535f4c 	subspl	r5, r3, ip, asr #30
    2ae4:	78545f49 	ldmdavc	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    2ae8:	61487852 	cmpvs	r8, r2, asr r8
    2aec:	7043666c 	subvc	r6, r3, ip, ror #12
    2af0:	6143746c 	cmpvs	r3, ip, ror #8
    2af4:	61626c6c 	cmnvs	r2, ip, ror #24
    2af8:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    2afc:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2b00:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2b08 <_Min_Stack_Size+0x2708>
    2b04:	43785278 	cmnmi	r8, #120, 4	; 0x80000007
    2b08:	43746c70 	cmnmi	r4, #112, 24	; 0x7000
    2b0c:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    2b10:	006b6361 	rsbeq	r6, fp, r1, ror #6
    2b14:	504b4c43 	subpl	r4, fp, r3, asr #24
    2b18:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2b1c:	00797469 	rsbseq	r7, r9, r9, ror #8
    2b20:	50535f5f 	subspl	r5, r3, pc, asr pc
    2b24:	61485f49 	cmpvs	r8, r9, asr #30
    2b28:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    2b2c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2b30:	00666544 	rsbeq	r6, r6, r4, asr #10
    2b34:	5f495053 	svcpl	0x00495053
    2b38:	736f6c43 	cmnvc	pc, #17152	; 0x4300
    2b3c:	5f785265 	svcpl	0x00785265
    2b40:	00525349 	subseq	r5, r2, r9, asr #6
    2b44:	66587852 			; <UNDEFINED> instruction: 0x66587852
    2b48:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2b4c:	4800657a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    2b50:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2b54:	475f4950 			; <UNDEFINED> instruction: 0x475f4950
    2b58:	74537465 	ldrbvc	r7, [r3], #-1125	; 0xfffffb9b
    2b5c:	00657461 	rsbeq	r7, r5, r1, ror #8
    2b60:	66587854 			; <UNDEFINED> instruction: 0x66587854
    2b64:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2b68:	5300657a 	movwpl	r6, #1402	; 0x57a
    2b6c:	325f4950 	subscc	r4, pc, #80, 18	; 0x140000
    2b70:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    2b74:	49785273 	ldmdbmi	r8!, {r0, r1, r4, r5, r6, r9, ip, lr}^
    2b78:	315f5253 	cmpcc	pc, r3, asr r2	; <UNPREDICTABLE>
    2b7c:	54494236 	strbpl	r4, [r9], #-566	; 0xfffffdca
    2b80:	00435243 	subeq	r5, r3, r3, asr #4
    2b84:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
    2b88:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
    2b8c:	73657250 	cmnvc	r5, #80, 4
    2b90:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    2b94:	41480072 	hvcmi	32770	; 0x8002
    2b98:	50535f4c 	subspl	r5, r3, ip, asr #30
    2b9c:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    2ba0:	48007469 	stmdami	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2ba4:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2ba8:	525f4950 	subspl	r4, pc, #80, 18	; 0x140000
    2bac:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2bb0:	445f6576 	ldrbmi	r6, [pc], #-1398	; 2bb8 <_Min_Stack_Size+0x27b8>
    2bb4:	4800414d 	stmdami	r0, {r0, r2, r3, r6, r8, lr}
    2bb8:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2bbc:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2bc4 <_Min_Stack_Size+0x27c4>
    2bc0:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    2bc4:	5274696d 	rsbspl	r6, r4, #1785856	; 0x1b4000
    2bc8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2bcc:	445f6576 	ldrbmi	r6, [pc], #-1398	; 2bd4 <_Min_Stack_Size+0x27d4>
    2bd0:	4800414d 	stmdami	r0, {r0, r2, r3, r6, r8, lr}
    2bd4:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2bd8:	535f4950 	cmppl	pc, #80, 18	; 0x140000
    2bdc:	45544154 	ldrbmi	r4, [r4, #-340]	; 0xfffffeac
    2be0:	5355425f 	cmppl	r5, #-268435451	; 0xf0000005
    2be4:	58545f59 	ldmdapl	r4, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2be8:	0058525f 	subseq	r5, r8, pc, asr r2
    2bec:	5f4c4148 	svcpl	0x004c4148
    2bf0:	5f495053 	svcpl	0x00495053
    2bf4:	6f727245 	svcvs	0x00727245
    2bf8:	6c614372 	stclvs	3, cr4, [r1], #-456	; 0xfffffe38
    2bfc:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
    2c00:	5053006b 	subspl	r0, r3, fp, rrx
    2c04:	61575f49 	cmpvs	r7, r9, asr #30
    2c08:	6c467469 	cfstrdvs	mvd7, [r6], {105}	; 0x69
    2c0c:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
    2c10:	55657461 	strbpl	r7, [r5, #-1121]!	; 0xfffffb9f
    2c14:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    2c18:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2c1c:	0074756f 	rsbseq	r7, r4, pc, ror #10
    2c20:	44785470 	ldrbtmi	r5, [r8], #-1136	; 0xfffffb90
    2c24:	00617461 	rsbeq	r7, r1, r1, ror #8
    2c28:	5f495053 	svcpl	0x00495053
    2c2c:	53497852 	movtpl	r7, #38994	; 0x9852
    2c30:	42385f52 	eorsmi	r5, r8, #328	; 0x148
    2c34:	53005449 	movwpl	r5, #1097	; 0x449
    2c38:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    2c3c:	6b636568 	blvs	18dc1e4 <_Min_Stack_Size+0x18dbde4>
    2c40:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2c44:	5953425f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r9, lr}^
    2c48:	4b4c4300 	blmi	1313850 <_Min_Stack_Size+0x1313450>
    2c4c:	73616850 	cmnvc	r1, #80, 16	; 0x500000
    2c50:	69460065 	stmdbvs	r6, {r0, r2, r5, r6}^
    2c54:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
    2c58:	53007469 	movwpl	r7, #1129	; 0x469
    2c5c:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2c64 <_Min_Stack_Size+0x2864>
    2c60:	52534978 	subspl	r4, r3, #120, 18	; 0x1e0000
    2c64:	4236315f 	eorsmi	r3, r6, #-1073741801	; 0xc0000017
    2c68:	65005449 	strvs	r5, [r0, #-1097]	; 0xfffffbb7
    2c6c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    2c70:	58785400 	ldmdapl	r8!, {sl, ip, lr}^
    2c74:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    2c78:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2c7c:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2c80:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2c84:	4154535f 	cmpmi	r4, pc, asr r3
    2c88:	455f4554 	ldrbmi	r4, [pc, #-1364]	; 273c <_Min_Stack_Size+0x233c>
    2c8c:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    2c90:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2c94:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2c98:	70734d5f 	rsbsvc	r4, r3, pc, asr sp
    2c9c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2ca0:	53007469 	movwpl	r7, #1129	; 0x469
    2ca4:	445f4950 	ldrbmi	r4, [pc], #-2384	; 2cac <_Min_Stack_Size+0x28ac>
    2ca8:	7254414d 	subsvc	r4, r4, #1073741843	; 0x40000013
    2cac:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    2cb0:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    2cb4:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    2cb8:	6c704365 	ldclvs	3, cr4, [r0], #-404	; 0xfffffe6c
    2cbc:	50530074 	subspl	r0, r3, r4, ror r0
    2cc0:	4d445f49 	stclmi	15, cr5, [r4, #-292]	; 0xfffffedc
    2cc4:	61725441 	cmnvs	r2, r1, asr #8
    2cc8:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    2ccc:	6c704374 	ldclvs	3, cr4, [r0], #-464	; 0xfffffe30
    2cd0:	72650074 	rsbvc	r0, r5, #116	; 0x74
    2cd4:	63726f72 	cmnvs	r2, #456	; 0x1c8
    2cd8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2cdc:	5f495053 	svcpl	0x00495053
    2ce0:	53497852 	movtpl	r7, #38994	; 0x9852
    2ce4:	36315f52 	shsaxcc	r5, r1, r2
    2ce8:	00544942 	subseq	r4, r4, r2, asr #18
    2cec:	5f4c4148 	svcpl	0x004c4148
    2cf0:	5f495053 	svcpl	0x00495053
    2cf4:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    2cf8:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xfffff0bb
    2cfc:	00544553 	subseq	r4, r4, r3, asr r5
    2d00:	5f495053 	svcpl	0x00495053
    2d04:	736f6c43 	cmnvc	pc, #17152	; 0x4300
    2d08:	54785265 	ldrbtpl	r5, [r8], #-613	; 0xfffffd9b
    2d0c:	53495f78 	movtpl	r5, #40824	; 0x9f78
    2d10:	41480052 	qdaddmi	r0, r2, r8
    2d14:	50535f4c 	subspl	r5, r3, ip, asr #30
    2d18:	4d445f49 	stclmi	15, cr5, [r4, #-292]	; 0xfffffedc
    2d1c:	75615041 	strbvc	r5, [r1, #-65]!	; 0xffffffbf
    2d20:	48006573 	stmdami	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
    2d24:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2d28:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2d30 <_Min_Stack_Size+0x2930>
    2d2c:	6c614878 	stclvs	8, cr4, [r1], #-480	; 0xfffffe20
    2d30:	6c704366 	ldclvs	3, cr4, [r0], #-408	; 0xfffffe68
    2d34:	6c614374 	stclvs	3, cr4, [r1], #-464	; 0xfffffe30
    2d38:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
    2d3c:	6144006b 	cmpvs	r4, fp, rrx
    2d40:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    2d44:	4800657a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    2d48:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2d4c:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2d54 <_Min_Stack_Size+0x2954>
    2d50:	6c704378 	ldclvs	3, cr4, [r0], #-480	; 0xfffffe20
    2d54:	6c614374 	stclvs	3, cr4, [r1], #-464	; 0xfffffe30
    2d58:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
    2d5c:	4148006b 	cmpmi	r8, fp, rrx
    2d60:	50535f4c 	subspl	r5, r3, ip, asr #30
    2d64:	72545f49 	subsvc	r5, r4, #292	; 0x124
    2d68:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    2d6c:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    2d70:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    2d74:	54495f65 	strbpl	r5, [r9], #-3941	; 0xfffff09b
    2d78:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2d7c:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2d80:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2d84:	6f727245 	svcvs	0x00727245
    2d88:	41480072 	hvcmi	32770	; 0x8002
    2d8c:	50535f4c 	subspl	r5, r3, ip, asr #30
    2d90:	4d445f49 	stclmi	15, cr5, [r4, #-292]	; 0xfffffedc
    2d94:	6f745341 	svcvs	0x00745341
    2d98:	41480070 	hvcmi	32768	; 0x8000
    2d9c:	50535f4c 	subspl	r5, r3, ip, asr #30
    2da0:	74535f49 	ldrbvc	r5, [r3], #-3913	; 0xfffff0b7
    2da4:	54657461 	strbtpl	r7, [r5], #-1121	; 0xfffffb9f
    2da8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    2dac:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    2db0:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2db4:	535f4950 	cmppl	pc, #80, 18	; 0x140000
    2db8:	45544154 	ldrbmi	r4, [r4, #-340]	; 0xfffffeac
    2dbc:	5355425f 	cmppl	r5, #-268435451	; 0xf0000005
    2dc0:	41480059 	qdaddmi	r0, r9, r8
    2dc4:	50535f4c 	subspl	r5, r3, ip, asr #30
    2dc8:	65525f49 	ldrbvs	r5, [r2, #-3913]	; 0xfffff0b7
    2dcc:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    2dd0:	54495f65 	strbpl	r5, [r9], #-3941	; 0xfffff09b
    2dd4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2dd8:	4978525f 	ldmdbmi	r8!, {r0, r1, r2, r3, r4, r6, r9, ip, lr}^
    2ddc:	385f5253 	ldmdacc	pc, {r0, r1, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    2de0:	43544942 	cmpmi	r4, #1081344	; 0x108000
    2de4:	53004352 	movwpl	r4, #850	; 0x352
    2de8:	525f4950 	subspl	r4, pc, #80, 18	; 0x140000
    2dec:	52534978 	subspl	r4, r3, #120, 18	; 0x1e0000
    2df0:	4236315f 	eorsmi	r3, r6, #-1073741801	; 0xc0000017
    2df4:	52435449 	subpl	r5, r3, #1224736768	; 0x49000000
    2df8:	41480043 	cmpmi	r8, r3, asr #32
    2dfc:	50535f4c 	subspl	r5, r3, ip, asr #30
    2e00:	54535f49 	ldrbpl	r5, [r3], #-3913	; 0xfffff0b7
    2e04:	5f455441 	svcpl	0x00455441
    2e08:	44414552 	strbmi	r4, [r1], #-1362	; 0xfffffaae
    2e0c:	49540059 	ldmdbmi	r4, {r0, r3, r4, r6}^
    2e10:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2e14:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2e18:	696c325f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
    2e1c:	5273656e 	rsbspl	r6, r3, #461373440	; 0x1b800000
    2e20:	52534978 	subspl	r4, r3, #120, 18	; 0x1e0000
    2e24:	4942385f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, fp, ip, sp}^
    2e28:	43524354 	cmpmi	r2, #84, 6	; 0x50000001
    2e2c:	78527000 	ldmdavc	r2, {ip, sp, lr}^
    2e30:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    2e34:	00727450 	rsbseq	r7, r2, r0, asr r4
    2e38:	43435243 	movtmi	r5, #12867	; 0x3243
    2e3c:	75636c61 	strbvc	r6, [r3, #-3169]!	; 0xfffff39f
    2e40:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2e44:	48006e6f 	stmdami	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    2e48:	535f4c41 	cmppl	pc, #16640	; 0x4100
    2e4c:	445f4950 	ldrbmi	r4, [pc], #-2384	; 2e54 <_Min_Stack_Size+0x2a54>
    2e50:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0xfffffeb3
    2e54:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    2e58:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
    2e5c:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2e60:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2e64:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2e68:	5f495053 	svcpl	0x00495053
    2e6c:	736f6c43 	cmnvc	pc, #17152	; 0x4300
    2e70:	5f785465 	svcpl	0x00785465
    2e74:	00525349 	subseq	r5, r2, r9, asr #6
    2e78:	66587852 			; <UNDEFINED> instruction: 0x66587852
    2e7c:	6f437265 	svcvs	0x00437265
    2e80:	00746e75 	rsbseq	r6, r4, r5, ror lr
    2e84:	53497854 	movtpl	r7, #38996	; 0x9854
    2e88:	41480052 	qdaddmi	r0, r2, r8
    2e8c:	50535f4c 	subspl	r5, r3, ip, asr #30
    2e90:	65525f49 	ldrbvs	r5, [r2, #-3913]	; 0xfffff0b7
    2e94:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    2e98:	41480065 	cmpmi	r8, r5, rrx
    2e9c:	50535f4c 	subspl	r5, r3, ip, asr #30
    2ea0:	72545f49 	subsvc	r5, r4, #292	; 0x124
    2ea4:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    2ea8:	495f7469 	ldmdbmi	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2eac:	6d740054 	ldclvs	0, cr0, [r4, #-336]!	; 0xfffffeb0
    2eb0:	67657270 			; <UNDEFINED> instruction: 0x67657270
    2eb4:	72766f5f 	rsbsvc	r6, r6, #380	; 0x17c
    2eb8:	66746900 	ldrbtvs	r6, [r4], -r0, lsl #18
    2ebc:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2ec0:	5f495053 	svcpl	0x00495053
    2ec4:	41414d44 	cmpmi	r1, r4, asr #26
    2ec8:	74726f62 	ldrbtvc	r6, [r2], #-3938	; 0xfffff09e
    2ecc:	72456e4f 	subvc	r6, r5, #1264	; 0x4f0
    2ed0:	00726f72 	rsbseq	r6, r2, r2, ror pc
    2ed4:	5f4c4148 	svcpl	0x004c4148
    2ed8:	5f495053 	svcpl	0x00495053
    2edc:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    2ee0:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    2ee4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2ee8:	00657669 	rsbeq	r7, r5, r9, ror #12
    2eec:	78433249 	stmdavc	r3, {r0, r3, r6, r9, ip, sp}^
    2ef0:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2ef4:	61446574 	hvcvs	18004	; 0x4654
    2ef8:	49006174 	stmdbmi	r0, {r2, r4, r5, r6, r8, sp, lr}
    2efc:	5f784332 	svcpl	0x00784332
    2f00:	4970734d 	ldmdbmi	r0!, {r0, r2, r3, r6, r8, r9, ip, sp, lr}^
    2f04:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2f08:	5f454f49 	svcpl	0x00454f49
    2f0c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2f10:	746c754d 	strbtvc	r7, [ip], #-1357	; 0xfffffab3
    2f14:	656c7069 	strbvs	r7, [ip, #-105]!	; 0xffffff97
    2f18:	454f4900 	strbmi	r4, [pc, #-2304]	; 2620 <_Min_Stack_Size+0x2220>
    2f1c:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2f20:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    2f24:	5f784332 	svcpl	0x00784332
    2f28:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2f2c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    2f30:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
    2f34:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    2f38:	6f546574 	svcvs	0x00546574
    2f3c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2f40:	454f4900 	strbmi	r4, [pc, #-2304]	; 2648 <_Min_Stack_Size+0x2248>
    2f44:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2f48:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
    2f4c:	69536461 	ldmdbvs	r3, {r0, r5, r6, sl, sp, lr}^
    2f50:	4900657a 	stmdbmi	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    2f54:	525f454f 	subspl	r4, pc, #331350016	; 0x13c00000
    2f58:	00646165 	rsbeq	r6, r4, r5, ror #2
    2f5c:	78433249 	stmdavc	r3, {r0, r3, r6, r9, ip, sp}^
    2f60:	7272455f 	rsbsvc	r4, r2, #398458880	; 0x17c00000
    2f64:	5200726f 	andpl	r7, r0, #-268435450	; 0xf0000006
    2f68:	61566765 	cmpvs	r6, r5, ror #14
    2f6c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2f70:	48633249 	stmdami	r3!, {r0, r3, r6, r9, ip, sp}^
    2f74:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2f78:	32490065 	subcc	r0, r9, #101	; 0x65
    2f7c:	575f7843 	ldrbpl	r7, [pc, -r3, asr #16]
    2f80:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2f84:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    2f88:	4c007265 	sfmmi	f7, 4, [r0], {101}	; 0x65
    2f8c:	495f4443 	ldmdbmi	pc, {r0, r1, r6, sl, lr}^	; <UNPREDICTABLE>
    2f90:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    2f94:	47007469 	strmi	r7, [r0, -r9, ror #8]
    2f98:	5f4f4950 	svcpl	0x004f4950
    2f9c:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xfffff0b0
    2fa0:	74754200 	ldrbtvc	r4, [r5], #-512	; 0xfffffe00
    2fa4:	5f6e6f74 	svcpl	0x006e6f74
    2fa8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2fac:	00666544 	rsbeq	r6, r6, r4, asr #10
    2fb0:	78495053 	stmdavc	r9, {r0, r1, r4, r6, ip, lr}^
    2fb4:	6165525f 	cmnvs	r5, pc, asr r2
    2fb8:	434c0064 	movtmi	r0, #49252	; 0xc064
    2fbc:	4f495f44 	svcmi	0x00495f44
    2fc0:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2fc4:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
    2fc8:	75420067 	strbvc	r0, [r2, #-103]	; 0xffffff99
    2fcc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    2fd0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2fd4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2fd8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2fdc:	454f4900 	strbmi	r4, [pc, #-2304]	; 26e4 <_Min_Stack_Size+0x22e4>
    2fe0:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2fe4:	754d6574 	strbvc	r6, [sp, #-1396]	; 0xfffffa8c
    2fe8:	7069746c 	rsbvc	r7, r9, ip, ror #8
    2fec:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    2ff0:	41646165 	cmnmi	r4, r5, ror #2
    2ff4:	00726464 	rsbseq	r6, r2, r4, ror #8
    2ff8:	78433249 	stmdavc	r3, {r0, r3, r6, r9, ip, sp}^
    2ffc:	6165525f 	cmnvs	r5, pc, asr r2
    3000:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    3004:	59470061 	stmdbpl	r7, {r0, r5, r6}^
    3008:	495f4f52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    300c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    3010:	70006461 	andvc	r6, r0, r1, ror #8
    3014:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    3018:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
    301c:	505f5053 	subspl	r5, pc, r3, asr r0	; <UNPREDICTABLE>
    3020:	6e495f42 	cdpvs	15, 4, cr5, cr9, cr2, {2}
    3024:	53007469 	movwpl	r7, #1129	; 0x469
    3028:	5f784950 	svcpl	0x00784950
    302c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    3030:	61655265 	cmnvs	r5, r5, ror #4
    3034:	434c0064 	movtmi	r0, #49252	; 0xc064
    3038:	4f495f44 	svcmi	0x00495f44
    303c:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3040:	61446574 	hvcvs	18004	; 0x4654
    3044:	42006174 	andmi	r6, r0, #116, 2
    3048:	505f5053 	subspl	r5, pc, r3, asr r0	; <UNPREDICTABLE>
    304c:	65475f42 	strbvs	r5, [r7, #-3906]	; 0xfffff0be
    3050:	61745374 	cmnvs	r4, r4, ror r3
    3054:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    3058:	445f454f 	ldrbmi	r4, [pc], #-1359	; 3060 <_Min_Stack_Size+0x2c60>
    305c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    3060:	54554200 	ldrbpl	r4, [r5], #-512	; 0xfffffe00
    3064:	5f4e4f54 	svcpl	0x004e4f54
    3068:	0059454b 	subseq	r4, r9, fp, asr #10
    306c:	54545542 	ldrbpl	r5, [r4], #-1346	; 0xfffffabe
    3070:	4d5f4e4f 	ldclmi	14, cr4, [pc, #-316]	; 2f3c <_Min_Stack_Size+0x2b3c>
    3074:	5f45444f 	svcpl	0x0045444f
    3078:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    307c:	50534200 	subspl	r4, r3, r0, lsl #4
    3080:	44454c5f 	strbmi	r4, [r5], #-3167	; 0xfffff3a1
    3084:	66664f5f 	uqsaxvs	r4, r6, pc	; <UNPREDICTABLE>
    3088:	44434c00 	strbmi	r4, [r3], #-3072	; 0xfffff400
    308c:	5f4f495f 	svcpl	0x004f495f
    3090:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    3094:	61746144 	cmnvs	r4, r4, asr #2
    3098:	43324900 	teqmi	r2, #0, 18
    309c:	54495f78 	strbpl	r5, [r9], #-3960	; 0xfffff088
    30a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    30a4:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
    30a8:	4f545455 	svcmi	0x00545455
    30ac:	4f4d5f4e 	svcmi	0x004d5f4e
    30b0:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
    30b4:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
    30b8:	426d754e 	rsbmi	r7, sp, #327155712	; 0x13800000
    30bc:	54657479 	strbtpl	r7, [r5], #-1145	; 0xfffffb87
    30c0:	6972576f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
    30c4:	42006574 	andmi	r6, r0, #116, 10	; 0x1d000000
    30c8:	475f5053 			; <UNDEFINED> instruction: 0x475f5053
    30cc:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    30d0:	6f697372 	svcvs	0x00697372
    30d4:	5542006e 	strbpl	r0, [r2, #-110]	; 0xffffff92
    30d8:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    30dc:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    30e0:	74754200 	ldrbtvc	r4, [r5], #-512	; 0xfffffe00
    30e4:	4d6e6f74 	stclmi	15, cr6, [lr, #-464]!	; 0xfffffe30
    30e8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    30ec:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0xfffffabe
    30f0:	42006e6f 	andmi	r6, r0, #1776	; 0x6f0
    30f4:	00657479 	rsbeq	r7, r5, r9, ror r4
    30f8:	4f495047 	svcmi	0x00495047
    30fc:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    3100:	69705300 	ldmdbvs	r0!, {r8, r9, ip, lr}^
    3104:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    3108:	5300656c 	movwpl	r6, #1388	; 0x56c
    310c:	5f784950 	svcpl	0x00784950
    3110:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    3114:	55420065 	strbpl	r0, [r2, #-101]	; 0xffffff9b
    3118:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    311c:	524f505f 	subpl	r5, pc, #95	; 0x5f
    3120:	434c0054 	movtmi	r0, #49236	; 0xc054
    3124:	65445f44 	strbvs	r5, [r4, #-3908]	; 0xfffff0bc
    3128:	0079616c 	rsbseq	r6, r9, ip, ror #2
    312c:	4c5f7349 	mrrcmi	3, 4, r7, pc, cr9	; <UNPREDICTABLE>
    3130:	495f4443 	ldmdbmi	pc, {r0, r1, r6, sl, lr}^	; <UNPREDICTABLE>
    3134:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    3138:	61697469 	cmnvs	r9, r9, ror #8
    313c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
    3140:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    3144:	61766461 	cmnvs	r6, r1, ror #8
    3148:	0065756c 	rsbeq	r7, r5, ip, ror #10
    314c:	78495053 	stmdavc	r9, {r0, r1, r4, r6, ip, lr}^
    3150:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3154:	55420074 	strbpl	r0, [r2, #-116]	; 0xffffff8c
    3158:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    315c:	5152495f 	cmppl	r2, pc, asr r9
    3160:	5053006e 	subspl	r0, r3, lr, rrx
    3164:	455f7849 	ldrbmi	r7, [pc, #-2121]	; 2923 <_Min_Stack_Size+0x2523>
    3168:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    316c:	6f682f00 	svcvs	0x00682f00
    3170:	662f656d 	strtvs	r6, [pc], -sp, ror #10
    3174:	72656572 	rsbvc	r6, r5, #478150656	; 0x1c800000
    3178:	2f736f74 	svccs	0x00736f74
    317c:	6b726f57 	blvs	1c9eee0 <_Min_Stack_Size+0x1c9eae0>
    3180:	63617073 	cmnvs	r1, #115	; 0x73
    3184:	2e502f65 	cdpcs	15, 5, cr2, cr0, cr5, {3}
    3188:	2e4b2e45 	cdpcs	14, 4, cr2, cr11, cr5, {2}
    318c:	2f412e4b 	svccs	0x00412e4b
    3190:	74616c50 	strbtvc	r6, [r1], #-3152	; 0xfffff3b0
    3194:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    3198:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    319c:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    31a0:	465f6562 	ldrbmi	r6, [pc], -r2, ror #10
    31a4:	34465f57 	strbcc	r5, [r6], #-3927	; 0xfffff0a9
    31a8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    31ac:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    31b0:	5053422f 	subspl	r4, r3, pc, lsr #4
    31b4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    31b8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    31bc:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    31c0:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    31c4:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    31c8:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
    31cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    31d0:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    31d4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    31d8:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
    31dc:	632e7972 			; <UNDEFINED> instruction: 0x632e7972
    31e0:	52594700 	subspl	r4, r9, #0, 14
    31e4:	4f495f4f 	svcmi	0x00495f4f
    31e8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    31ec:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
    31f0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    31f4:	79626465 	stmdbvc	r2!, {r0, r2, r5, r6, sl, sp, lr}^
    31f8:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    31fc:	54786332 	ldrbtpl	r6, [r8], #-818	; 0xfffffcce
    3200:	6f656d69 	svcvs	0x00656d69
    3204:	49007475 	stmdbmi	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
    3208:	5f784332 	svcpl	0x00784332
    320c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    3210:	69725700 	ldmdbvs	r2!, {r8, r9, sl, ip, lr}^
    3214:	64416574 	strbvs	r6, [r1], #-1396	; 0xfffffa8c
    3218:	53007264 	movwpl	r7, #612	; 0x264
    321c:	5f784950 	svcpl	0x00784950
    3220:	4970734d 	ldmdbmi	r0!, {r0, r2, r3, r6, r8, r9, ip, sp, lr}^
    3224:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3228:	4f525947 	svcmi	0x00525947
    322c:	5f4f495f 	svcpl	0x004f495f
    3230:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    3234:	70530065 	subsvc	r0, r3, r5, rrx
    3238:	69547869 	ldmdbvs	r4, {r0, r3, r5, r6, fp, ip, sp, lr}^
    323c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 2cd7 <_Min_Stack_Size+0x28d7>
    3240:	4f490074 	svcmi	0x00490074
    3244:	54495f45 	strbpl	r5, [r9], #-3909	; 0xfffff0bb
    3248:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    324c:	Address 0x000000000000324c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	392e343a 	stmdbcc	lr!, {r1, r3, r4, r5, sl, ip, sp}
   c:	732b332e 			; <UNDEFINED> instruction: 0x732b332e
  10:	33326e76 	teqcc	r2, #1888	; 0x760
  14:	37373131 			; <UNDEFINED> instruction: 0x37373131
  18:	2029312d 	eorcs	r3, r9, sp, lsr #2
  1c:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
  20:	30322033 	eorscc	r2, r2, r3, lsr r0
  24:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
  28:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
  2c:	72657270 	rsbvc	r7, r5, #112, 4
  30:	61656c65 	cmnvs	r5, r5, ror #24
  34:	00296573 	eoreq	r6, r9, r3, ror r5

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08000210 	stmdaeq	r0, {r4, r9}
      1c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      24:	41018e02 	tstmi	r1, r2, lsl #28
      28:	0000580e 	andeq	r5, r0, lr, lsl #16
      2c:	0000000c 	andeq	r0, r0, ip
      30:	00000000 	andeq	r0, r0, r0
      34:	08000300 	stmdaeq	r0, {r8, r9}
      38:	0000000c 	andeq	r0, r0, ip
      3c:	0000000c 	andeq	r0, r0, ip
      40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      44:	7c020001 	stcvc	0, cr0, [r2], {1}
      48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      4c:	0000000c 	andeq	r0, r0, ip
      50:	0000003c 	andeq	r0, r0, ip, lsr r0
      54:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
      58:	00000002 	andeq	r0, r0, r2
      5c:	0000000c 	andeq	r0, r0, ip
      60:	0000003c 	andeq	r0, r0, ip, lsr r0
      64:	08000310 	stmdaeq	r0, {r4, r8, r9}
      68:	00000002 	andeq	r0, r0, r2
      6c:	0000000c 	andeq	r0, r0, ip
      70:	0000003c 	andeq	r0, r0, ip, lsr r0
      74:	08000314 	stmdaeq	r0, {r2, r4, r8, r9}
      78:	00000002 	andeq	r0, r0, r2
      7c:	0000000c 	andeq	r0, r0, ip
      80:	0000003c 	andeq	r0, r0, ip, lsr r0
      84:	08000318 	stmdaeq	r0, {r3, r4, r8, r9}
      88:	00000002 	andeq	r0, r0, r2
      8c:	0000000c 	andeq	r0, r0, ip
      90:	0000003c 	andeq	r0, r0, ip, lsr r0
      94:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
      98:	00000002 	andeq	r0, r0, r2
      9c:	0000000c 	andeq	r0, r0, ip
      a0:	0000003c 	andeq	r0, r0, ip, lsr r0
      a4:	08000320 	stmdaeq	r0, {r5, r8, r9}
      a8:	00000002 	andeq	r0, r0, r2
      ac:	0000000c 	andeq	r0, r0, ip
      b0:	0000003c 	andeq	r0, r0, ip, lsr r0
      b4:	08000324 	stmdaeq	r0, {r2, r5, r8, r9}
      b8:	00000002 	andeq	r0, r0, r2
      bc:	0000000c 	andeq	r0, r0, ip
      c0:	0000003c 	andeq	r0, r0, ip, lsr r0
      c4:	08000328 	stmdaeq	r0, {r3, r5, r8, r9}
      c8:	00000002 	andeq	r0, r0, r2
      cc:	0000000c 	andeq	r0, r0, ip
      d0:	0000003c 	andeq	r0, r0, ip, lsr r0
      d4:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
      d8:	00000004 	andeq	r0, r0, r4
      dc:	0000000c 	andeq	r0, r0, ip
      e0:	0000003c 	andeq	r0, r0, ip, lsr r0
      e4:	08000330 	stmdaeq	r0, {r4, r5, r8, r9}
      e8:	00000006 	andeq	r0, r0, r6
      ec:	0000000c 	andeq	r0, r0, ip
      f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      f4:	7c020001 	stcvc	0, cr0, [r2], {1}
      f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      fc:	00000018 	andeq	r0, r0, r8, lsl r0
     100:	000000ec 	andeq	r0, r0, ip, ror #1
     104:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
     108:	00000050 	andeq	r0, r0, r0, asr r0
     10c:	84040e47 	strhi	r0, [r4], #-3655	; 0xfffff1b9
     110:	0ec45a01 	vdiveq.f32	s11, s8, s2
     114:	00000000 	andeq	r0, r0, r0
     118:	0000000c 	andeq	r0, r0, ip
     11c:	000000ec 	andeq	r0, r0, ip, ror #1
     120:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
     124:	00000078 	andeq	r0, r0, r8, ror r0
     128:	0000000c 	andeq	r0, r0, ip
     12c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     130:	7c020001 	stcvc	0, cr0, [r2], {1}
     134:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     138:	0000000c 	andeq	r0, r0, ip
     13c:	00000128 	andeq	r0, r0, r8, lsr #2
     140:	08000400 	stmdaeq	r0, {sl}
     144:	00000002 	andeq	r0, r0, r2
     148:	0000000c 	andeq	r0, r0, ip
     14c:	00000128 	andeq	r0, r0, r8, lsr #2
     150:	08000404 	stmdaeq	r0, {r2, sl}
     154:	00000002 	andeq	r0, r0, r2
     158:	00000014 	andeq	r0, r0, r4, lsl r0
     15c:	00000128 	andeq	r0, r0, r8, lsr #2
     160:	08000408 	stmdaeq	r0, {r3, sl}
     164:	0000002c 	andeq	r0, r0, ip, lsr #32
     168:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     16c:	00018e02 	andeq	r8, r1, r2, lsl #28
     170:	00000014 	andeq	r0, r0, r4, lsl r0
     174:	00000128 	andeq	r0, r0, r8, lsr #2
     178:	08000434 	stmdaeq	r0, {r2, r4, r5, sl}
     17c:	0000002c 	andeq	r0, r0, ip, lsr #32
     180:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     184:	00018e02 	andeq	r8, r1, r2, lsl #28
     188:	00000014 	andeq	r0, r0, r4, lsl r0
     18c:	00000128 	andeq	r0, r0, r8, lsr #2
     190:	08000460 	stmdaeq	r0, {r5, r6, sl}
     194:	00000034 	andeq	r0, r0, r4, lsr r0
     198:	83080e41 	movwhi	r0, #36417	; 0x8e41
     19c:	00018e02 	andeq	r8, r1, r2, lsl #28
     1a0:	0000000c 	andeq	r0, r0, ip
     1a4:	00000128 	andeq	r0, r0, r8, lsr #2
     1a8:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
     1ac:	00000010 	andeq	r0, r0, r0, lsl r0
     1b0:	0000000c 	andeq	r0, r0, ip
     1b4:	00000128 	andeq	r0, r0, r8, lsr #2
     1b8:	080004a4 	stmdaeq	r0, {r2, r5, r7, sl}
     1bc:	0000000c 	andeq	r0, r0, ip
     1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c4:	00000128 	andeq	r0, r0, r8, lsr #2
     1c8:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
     1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     1d4:	41018e02 	tstmi	r1, r2, lsl #28
     1d8:	0e4b100e 	cdpeq	0, 4, cr1, cr11, cr14, {0}
     1dc:	00000008 	andeq	r0, r0, r8
     1e0:	0000000c 	andeq	r0, r0, ip
     1e4:	00000128 	andeq	r0, r0, r8, lsr #2
     1e8:	080004cc 	stmdaeq	r0, {r2, r3, r6, r7, sl}
     1ec:	00000010 	andeq	r0, r0, r0, lsl r0
     1f0:	0000000c 	andeq	r0, r0, ip
     1f4:	00000128 	andeq	r0, r0, r8, lsr #2
     1f8:	080004dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl}
     1fc:	00000010 	andeq	r0, r0, r0, lsl r0
     200:	0000000c 	andeq	r0, r0, ip
     204:	00000128 	andeq	r0, r0, r8, lsr #2
     208:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
     20c:	00000008 	andeq	r0, r0, r8
     210:	0000000c 	andeq	r0, r0, ip
     214:	00000128 	andeq	r0, r0, r8, lsr #2
     218:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
     21c:	0000000c 	andeq	r0, r0, ip
     220:	0000000c 	andeq	r0, r0, ip
     224:	00000128 	andeq	r0, r0, r8, lsr #2
     228:	08000500 	stmdaeq	r0, {r8, sl}
     22c:	00000010 	andeq	r0, r0, r0, lsl r0
     230:	0000000c 	andeq	r0, r0, ip
     234:	00000128 	andeq	r0, r0, r8, lsr #2
     238:	08000510 	stmdaeq	r0, {r4, r8, sl}
     23c:	00000010 	andeq	r0, r0, r0, lsl r0
     240:	0000000c 	andeq	r0, r0, ip
     244:	00000128 	andeq	r0, r0, r8, lsr #2
     248:	08000520 	stmdaeq	r0, {r5, r8, sl}
     24c:	00000010 	andeq	r0, r0, r0, lsl r0
     250:	0000000c 	andeq	r0, r0, ip
     254:	00000128 	andeq	r0, r0, r8, lsr #2
     258:	08000530 	stmdaeq	r0, {r4, r5, r8, sl}
     25c:	00000010 	andeq	r0, r0, r0, lsl r0
     260:	0000000c 	andeq	r0, r0, ip
     264:	00000128 	andeq	r0, r0, r8, lsr #2
     268:	08000540 	stmdaeq	r0, {r6, r8, sl}
     26c:	00000010 	andeq	r0, r0, r0, lsl r0
     270:	0000000c 	andeq	r0, r0, ip
     274:	00000128 	andeq	r0, r0, r8, lsr #2
     278:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
     27c:	00000010 	andeq	r0, r0, r0, lsl r0
     280:	0000000c 	andeq	r0, r0, ip
     284:	00000128 	andeq	r0, r0, r8, lsr #2
     288:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
     28c:	00000010 	andeq	r0, r0, r0, lsl r0
     290:	0000000c 	andeq	r0, r0, ip
     294:	00000128 	andeq	r0, r0, r8, lsr #2
     298:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
     29c:	00000018 	andeq	r0, r0, r8, lsl r0
     2a0:	0000000c 	andeq	r0, r0, ip
     2a4:	00000128 	andeq	r0, r0, r8, lsr #2
     2a8:	08000588 	stmdaeq	r0, {r3, r7, r8, sl}
     2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     2b0:	0000000c 	andeq	r0, r0, ip
     2b4:	00000128 	andeq	r0, r0, r8, lsr #2
     2b8:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
     2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c0:	0000000c 	andeq	r0, r0, ip
     2c4:	00000128 	andeq	r0, r0, r8, lsr #2
     2c8:	080005c0 	stmdaeq	r0, {r6, r7, r8, sl}
     2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2d0:	0000000c 	andeq	r0, r0, ip
     2d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	7c020001 	stcvc	0, cr0, [r2], {1}
     2dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2e0:	0000000c 	andeq	r0, r0, ip
     2e4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2e8:	080005dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl}
     2ec:	00000024 	andeq	r0, r0, r4, lsr #32
     2f0:	00000020 	andeq	r0, r0, r0, lsr #32
     2f4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2f8:	08000600 	stmdaeq	r0, {r9, sl}
     2fc:	0000006c 	andeq	r0, r0, ip, rrx
     300:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     304:	60018502 	andvs	r8, r1, r2, lsl #10
     308:	0ec4c50a 	cdpeq	5, 12, cr12, cr4, cr10, {0}
     30c:	4b0b4100 	blmi	2d0714 <_Min_Stack_Size+0x2d0314>
     310:	000ec5c4 	andeq	ip, lr, r4, asr #11
     314:	0000000c 	andeq	r0, r0, ip
     318:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     31c:	0800066c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl}
     320:	00000018 	andeq	r0, r0, r8, lsl r0
     324:	0000000c 	andeq	r0, r0, ip
     328:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     32c:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     330:	00000018 	andeq	r0, r0, r8, lsl r0
     334:	0000000c 	andeq	r0, r0, ip
     338:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     33c:	0800069c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl}
     340:	00000024 	andeq	r0, r0, r4, lsr #32
     344:	00000018 	andeq	r0, r0, r8, lsl r0
     348:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     34c:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     350:	00000034 	andeq	r0, r0, r4, lsr r0
     354:	84040e46 	strhi	r0, [r4], #-3654	; 0xfffff1ba
     358:	0ec44c01 	cdpeq	12, 12, cr4, cr4, cr1, {0}
     35c:	00000000 	andeq	r0, r0, r0
     360:	0000001c 	andeq	r0, r0, ip, lsl r0
     364:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     368:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
     36c:	0000005c 	andeq	r0, r0, ip, asr r0
     370:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     374:	86058506 	strhi	r8, [r5], -r6, lsl #10
     378:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     37c:	00018e02 	andeq	r8, r1, r2, lsl #28
     380:	0000000c 	andeq	r0, r0, ip
     384:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     388:	08000750 	stmdaeq	r0, {r4, r6, r8, r9, sl}
     38c:	00000010 	andeq	r0, r0, r0, lsl r0
     390:	00000020 	andeq	r0, r0, r0, lsr #32
     394:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     398:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
     39c:	00000060 	andeq	r0, r0, r0, rrx
     3a0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     3a4:	86028503 	strhi	r8, [r2], -r3, lsl #10
     3a8:	c60a6101 	strgt	r6, [sl], -r1, lsl #2
     3ac:	000ec4c5 	andeq	ip, lr, r5, asr #9
     3b0:	00000b41 	andeq	r0, r0, r1, asr #22
     3b4:	0000000c 	andeq	r0, r0, ip
     3b8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3bc:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     3c0:	00000018 	andeq	r0, r0, r8, lsl r0
     3c4:	0000000c 	andeq	r0, r0, ip
     3c8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3cc:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
     3d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d4:	0000000c 	andeq	r0, r0, ip
     3d8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3dc:	080007f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl}
     3e0:	00000018 	andeq	r0, r0, r8, lsl r0
     3e4:	0000000c 	andeq	r0, r0, ip
     3e8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3ec:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     3f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f4:	0000000c 	andeq	r0, r0, ip
     3f8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3fc:	08000828 	stmdaeq	r0, {r3, r5, fp}
     400:	00000018 	andeq	r0, r0, r8, lsl r0
     404:	0000000c 	andeq	r0, r0, ip
     408:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     40c:	08000840 	stmdaeq	r0, {r6, fp}
     410:	00000002 	andeq	r0, r0, r2
     414:	00000014 	andeq	r0, r0, r4, lsl r0
     418:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     41c:	08000844 	stmdaeq	r0, {r2, r6, fp}
     420:	00000008 	andeq	r0, r0, r8
     424:	83080e41 	movwhi	r0, #36417	; 0x8e41
     428:	00018e02 	andeq	r8, r1, r2, lsl #28
     42c:	0000000c 	andeq	r0, r0, ip
     430:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     434:	7c020001 	stcvc	0, cr0, [r2], {1}
     438:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     43c:	0000002c 	andeq	r0, r0, ip, lsr #32
     440:	0000042c 	andeq	r0, r0, ip, lsr #8
     444:	0800084c 	stmdaeq	r0, {r2, r3, r6, fp}
     448:	0000027c 	andeq	r0, r0, ip, ror r2
     44c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     450:	86088509 	strhi	r8, [r8], -r9, lsl #10
     454:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     458:	8a048905 	bhi	122874 <_Min_Stack_Size+0x122474>
     45c:	8e028b03 	vmlahi.f64	d8, d2, d3
     460:	380e4101 	stmdacc	lr, {r0, r8, lr}
     464:	0e0ab802 	cdpeq	8, 0, cr11, cr10, cr2, {0}
     468:	000b4224 	andeq	r4, fp, r4, lsr #4
     46c:	00000024 	andeq	r0, r0, r4, lsr #32
     470:	0000042c 	andeq	r0, r0, ip, lsr #8
     474:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
     478:	00000164 	andeq	r0, r0, r4, ror #2
     47c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     480:	86088509 	strhi	r8, [r8], -r9, lsl #10
     484:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     488:	8a048905 	bhi	1228a4 <_Min_Stack_Size+0x1224a4>
     48c:	8e028b03 	vmlahi.f64	d8, d2, d3
     490:	00000001 	andeq	r0, r0, r1
     494:	0000000c 	andeq	r0, r0, ip
     498:	0000042c 	andeq	r0, r0, ip, lsr #8
     49c:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     4a0:	0000000c 	andeq	r0, r0, ip
     4a4:	0000000c 	andeq	r0, r0, ip
     4a8:	0000042c 	andeq	r0, r0, ip, lsr #8
     4ac:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
     4b0:	00000008 	andeq	r0, r0, r8
     4b4:	0000000c 	andeq	r0, r0, ip
     4b8:	0000042c 	andeq	r0, r0, ip, lsr #8
     4bc:	08000c40 	stmdaeq	r0, {r6, sl, fp}
     4c0:	00000008 	andeq	r0, r0, r8
     4c4:	00000014 	andeq	r0, r0, r4, lsl r0
     4c8:	0000042c 	andeq	r0, r0, ip, lsr #8
     4cc:	08000c48 	stmdaeq	r0, {r3, r6, sl, fp}
     4d0:	0000002a 	andeq	r0, r0, sl, lsr #32
     4d4:	53080e41 	movwpl	r0, #36417	; 0x8e41
     4d8:	0000000e 	andeq	r0, r0, lr
     4dc:	0000000c 	andeq	r0, r0, ip
     4e0:	0000042c 	andeq	r0, r0, ip, lsr #8
     4e4:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
     4e8:	00000002 	andeq	r0, r0, r2
     4ec:	00000014 	andeq	r0, r0, r4, lsl r0
     4f0:	0000042c 	andeq	r0, r0, ip, lsr #8
     4f4:	08000c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp}
     4f8:	00000018 	andeq	r0, r0, r8, lsl r0
     4fc:	83080e44 	movwhi	r0, #36420	; 0x8e44
     500:	00018e02 	andeq	r8, r1, r2, lsl #28
     504:	0000000c 	andeq	r0, r0, ip
     508:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     50c:	7c020001 	stcvc	0, cr0, [r2], {1}
     510:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     514:	0000001c 	andeq	r0, r0, ip, lsl r0
     518:	00000504 	andeq	r0, r0, r4, lsl #10
     51c:	08000c90 	stmdaeq	r0, {r4, r7, sl, fp}
     520:	00000074 	andeq	r0, r0, r4, ror r0
     524:	83180e41 	tsthi	r8, #1040	; 0x410
     528:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     52c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     530:	00018e02 	andeq	r8, r1, r2, lsl #28
     534:	00000028 	andeq	r0, r0, r8, lsr #32
     538:	00000504 	andeq	r0, r0, r4, lsl #10
     53c:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
     540:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     544:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     548:	86058506 	strhi	r8, [r5], -r6, lsl #10
     54c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     550:	43018e02 	movwmi	r8, #7682	; 0x1e02
     554:	6d02200e 	stcvs	0, cr2, [r2, #-56]	; 0xffffffc8
     558:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
     55c:	0000000b 	andeq	r0, r0, fp
     560:	00000024 	andeq	r0, r0, r4, lsr #32
     564:	00000504 	andeq	r0, r0, r4, lsl #10
     568:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
     56c:	00000240 	andeq	r0, r0, r0, asr #4
     570:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     574:	86058506 	strhi	r8, [r5], -r6, lsl #10
     578:	89038704 	stmdbhi	r3, {r2, r8, r9, sl, pc}
     57c:	49018e02 	stmdbmi	r1, {r1, r9, sl, fp, pc}
     580:	0a7b200e 	beq	1ec85c0 <_Min_Stack_Size+0x1ec81c0>
     584:	0b42180e 	bleq	10865c4 <_Min_Stack_Size+0x10861c4>
     588:	0000000c 	andeq	r0, r0, ip
     58c:	00000504 	andeq	r0, r0, r4, lsl #10
     590:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
     594:	00000002 	andeq	r0, r0, r2
     598:	00000028 	andeq	r0, r0, r8, lsr #32
     59c:	00000504 	andeq	r0, r0, r4, lsl #10
     5a0:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
     5a4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5a8:	83180e43 	tsthi	r8, #1072	; 0x430
     5ac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     5b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     5b4:	02018e02 	andeq	r8, r1, #2, 28
     5b8:	c3000e6c 	movwgt	r0, #3692	; 0xe6c
     5bc:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
     5c0:	000000ce 	andeq	r0, r0, lr, asr #1
     5c4:	0000000c 	andeq	r0, r0, ip
     5c8:	00000504 	andeq	r0, r0, r4, lsl #10
     5cc:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
     5d0:	00000002 	andeq	r0, r0, r2
     5d4:	00000018 	andeq	r0, r0, r8, lsl r0
     5d8:	00000504 	andeq	r0, r0, r4, lsl #10
     5dc:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
     5e0:	00000034 	andeq	r0, r0, r4, lsr r0
     5e4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     5e8:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
     5ec:	cec4000e 	cdpgt	0, 12, cr0, cr4, cr14, {0}
     5f0:	00000028 	andeq	r0, r0, r8, lsr #32
     5f4:	00000504 	andeq	r0, r0, r4, lsl #10
     5f8:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     5fc:	00000320 	andeq	r0, r0, r0, lsr #6
     600:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
     604:	86068507 	strhi	r8, [r6], -r7, lsl #10
     608:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     60c:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
     610:	280e4201 	stmdacs	lr, {r0, r9, lr}
     614:	1c0e0a4c 	stcne	10, cr0, [lr], {76}	; 0x4c
     618:	00000b42 	andeq	r0, r0, r2, asr #22
     61c:	00000028 	andeq	r0, r0, r8, lsr #32
     620:	00000504 	andeq	r0, r0, r4, lsl #10
     624:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
     628:	000004f4 	strdeq	r0, [r0], -r4
     62c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     630:	86078508 	strhi	r8, [r7], -r8, lsl #10
     634:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     638:	8a038904 	bhi	e2a50 <_Min_Stack_Size+0xe2650>
     63c:	42018e02 	andmi	r8, r1, #2, 28
     640:	0a4d380e 	beq	134e680 <_Min_Stack_Size+0x134e280>
     644:	0b42200e 	bleq	1088684 <_Min_Stack_Size+0x1088284>
     648:	00000024 	andeq	r0, r0, r4, lsr #32
     64c:	00000504 	andeq	r0, r0, r4, lsl #10
     650:	08001a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip}
     654:	000001fc 	strdeq	r0, [r0], -ip
     658:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     65c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     660:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     664:	42018e02 	andmi	r8, r1, #2, 28
     668:	0a4b200e 	beq	12c86a8 <_Min_Stack_Size+0x12c82a8>
     66c:	0b42180e 	bleq	10866ac <_Min_Stack_Size+0x10862ac>
     670:	00000030 	andeq	r0, r0, r0, lsr r0
     674:	00000504 	andeq	r0, r0, r4, lsl #10
     678:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
     67c:	0000022c 	andeq	r0, r0, ip, lsr #4
     680:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
     684:	86068507 	strhi	r8, [r6], -r7, lsl #10
     688:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     68c:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
     690:	280e4201 	stmdacs	lr, {r0, r9, lr}
     694:	1c0e0a4b 	stcne	10, cr0, [lr], {75}	; 0x4b
     698:	8b020b42 	blhi	833a8 <_Min_Stack_Size+0x82fa8>
     69c:	421c0e0a 	andsmi	r0, ip, #10, 28	; 0xa0
     6a0:	0000000b 	andeq	r0, r0, fp
     6a4:	00000024 	andeq	r0, r0, r4, lsr #32
     6a8:	00000504 	andeq	r0, r0, r4, lsl #10
     6ac:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
     6b0:	000000bc 	strheq	r0, [r0], -ip
     6b4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     6b8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     6bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     6c0:	200e4101 	andcs	r4, lr, r1, lsl #2
     6c4:	140e0a48 	strne	r0, [lr], #-2632	; 0xfffff5b8
     6c8:	00000b41 	andeq	r0, r0, r1, asr #22
     6cc:	00000024 	andeq	r0, r0, r4, lsr #32
     6d0:	00000504 	andeq	r0, r0, r4, lsl #10
     6d4:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
     6d8:	000000c4 	andeq	r0, r0, r4, asr #1
     6dc:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     6e0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     6e4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     6e8:	200e4101 	andcs	r4, lr, r1, lsl #2
     6ec:	140e0a48 	strne	r0, [lr], #-2632	; 0xfffff5b8
     6f0:	00000b41 	andeq	r0, r0, r1, asr #22
     6f4:	00000024 	andeq	r0, r0, r4, lsr #32
     6f8:	00000504 	andeq	r0, r0, r4, lsl #10
     6fc:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
     700:	000000e4 	andeq	r0, r0, r4, ror #1
     704:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     708:	86048505 	strhi	r8, [r4], -r5, lsl #10
     70c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     710:	200e4101 	andcs	r4, lr, r1, lsl #2
     714:	140e0a49 	strne	r0, [lr], #-2633	; 0xfffff5b7
     718:	00000b41 	andeq	r0, r0, r1, asr #22
     71c:	00000024 	andeq	r0, r0, r4, lsr #32
     720:	00000504 	andeq	r0, r0, r4, lsl #10
     724:	080020c4 	stmdaeq	r0, {r2, r6, r7, sp}
     728:	000000ec 	andeq	r0, r0, ip, ror #1
     72c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     730:	86048505 	strhi	r8, [r4], -r5, lsl #10
     734:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     738:	200e4101 	andcs	r4, lr, r1, lsl #2
     73c:	140e0a48 	strne	r0, [lr], #-2632	; 0xfffff5b8
     740:	00000b41 	andeq	r0, r0, r1, asr #22
     744:	00000024 	andeq	r0, r0, r4, lsr #32
     748:	00000504 	andeq	r0, r0, r4, lsl #10
     74c:	080021b0 	stmdaeq	r0, {r4, r5, r7, r8, sp}
     750:	000000c0 	andeq	r0, r0, r0, asr #1
     754:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     758:	86048505 	strhi	r8, [r4], -r5, lsl #10
     75c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     760:	200e4101 	andcs	r4, lr, r1, lsl #2
     764:	140e0a48 	strne	r0, [lr], #-2632	; 0xfffff5b8
     768:	00000b41 	andeq	r0, r0, r1, asr #22
     76c:	00000024 	andeq	r0, r0, r4, lsr #32
     770:	00000504 	andeq	r0, r0, r4, lsl #10
     774:	08002270 	stmdaeq	r0, {r4, r5, r6, r9, sp}
     778:	000000bc 	strheq	r0, [r0], -ip
     77c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     780:	86048505 	strhi	r8, [r4], -r5, lsl #10
     784:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     788:	200e4101 	andcs	r4, lr, r1, lsl #2
     78c:	140e0a48 	strne	r0, [lr], #-2632	; 0xfffff5b8
     790:	00000b41 	andeq	r0, r0, r1, asr #22
     794:	00000024 	andeq	r0, r0, r4, lsr #32
     798:	00000504 	andeq	r0, r0, r4, lsl #10
     79c:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
     7a0:	0000007a 	andeq	r0, r0, sl, ror r0
     7a4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     7a8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     7ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     7b0:	200e4401 	andcs	r4, lr, r1, lsl #8
     7b4:	140e0a43 	strne	r0, [lr], #-2627	; 0xfffff5bd
     7b8:	00000b41 	andeq	r0, r0, r1, asr #22
     7bc:	00000024 	andeq	r0, r0, r4, lsr #32
     7c0:	00000504 	andeq	r0, r0, r4, lsl #10
     7c4:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
     7c8:	0000007a 	andeq	r0, r0, sl, ror r0
     7cc:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     7d0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     7d4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     7d8:	200e4401 	andcs	r4, lr, r1, lsl #8
     7dc:	140e0a43 	strne	r0, [lr], #-2627	; 0xfffff5bd
     7e0:	00000b41 	andeq	r0, r0, r1, asr #22
     7e4:	0000000c 	andeq	r0, r0, ip
     7e8:	00000504 	andeq	r0, r0, r4, lsl #10
     7ec:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
     7f0:	00000036 	andeq	r0, r0, r6, lsr r0
     7f4:	00000018 	andeq	r0, r0, r8, lsl r0
     7f8:	00000504 	andeq	r0, r0, r4, lsl #10
     7fc:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
     800:	00000044 	andeq	r0, r0, r4, asr #32
     804:	84040e4e 	strhi	r0, [r4], #-3662	; 0xfffff1b2
     808:	0ec44b01 	vdiveq.f64	d20, d4, d1
     80c:	00000000 	andeq	r0, r0, r0
     810:	00000024 	andeq	r0, r0, r4, lsr #32
     814:	00000504 	andeq	r0, r0, r4, lsl #10
     818:	080024a0 	stmdaeq	r0, {r5, r7, sl, sp}
     81c:	0000011c 	andeq	r0, r0, ip, lsl r1
     820:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     824:	86048505 	strhi	r8, [r4], -r5, lsl #10
     828:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     82c:	200e4101 	andcs	r4, lr, r1, lsl #2
     830:	140e0a49 	strne	r0, [lr], #-2633	; 0xfffff5b7
     834:	00000b41 	andeq	r0, r0, r1, asr #22
     838:	00000024 	andeq	r0, r0, r4, lsr #32
     83c:	00000504 	andeq	r0, r0, r4, lsl #10
     840:	080025bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp}
     844:	00000118 	andeq	r0, r0, r8, lsl r1
     848:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     84c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     850:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     854:	200e4101 	andcs	r4, lr, r1, lsl #2
     858:	140e0a49 	strne	r0, [lr], #-2633	; 0xfffff5b7
     85c:	00000b41 	andeq	r0, r0, r1, asr #22
     860:	00000024 	andeq	r0, r0, r4, lsr #32
     864:	00000504 	andeq	r0, r0, r4, lsl #10
     868:	080026d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp}
     86c:	000000fc 	strdeq	r0, [r0], -ip
     870:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     874:	86058506 	strhi	r8, [r5], -r6, lsl #10
     878:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     87c:	41018e02 	tstmi	r1, r2, lsl #28
     880:	0a49200e 	beq	12488c0 <_Min_Stack_Size+0x12484c0>
     884:	0b42180e 	bleq	10868c4 <_Min_Stack_Size+0x10864c4>
     888:	00000024 	andeq	r0, r0, r4, lsr #32
     88c:	00000504 	andeq	r0, r0, r4, lsl #10
     890:	080027d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp}
     894:	000000fc 	strdeq	r0, [r0], -ip
     898:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     89c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     8a0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     8a4:	41018e02 	tstmi	r1, r2, lsl #28
     8a8:	0a49200e 	beq	12488e8 <_Min_Stack_Size+0x12484e8>
     8ac:	0b42180e 	bleq	10868ec <_Min_Stack_Size+0x10864ec>
     8b0:	00000028 	andeq	r0, r0, r8, lsr #32
     8b4:	00000504 	andeq	r0, r0, r4, lsl #10
     8b8:	080028cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, sp}
     8bc:	000001d4 	ldrdeq	r0, [r0], -r4
     8c0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     8c4:	86078508 	strhi	r8, [r7], -r8, lsl #10
     8c8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     8cc:	8a038904 	bhi	e2ce4 <_Min_Stack_Size+0xe28e4>
     8d0:	42018e02 	andmi	r8, r1, #2, 28
     8d4:	0a4f280e 	beq	13ca914 <_Min_Stack_Size+0x13ca514>
     8d8:	0b42200e 	bleq	1088918 <_Min_Stack_Size+0x1088518>
     8dc:	0000002c 	andeq	r0, r0, ip, lsr #32
     8e0:	00000504 	andeq	r0, r0, r4, lsl #10
     8e4:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
     8e8:	0000035a 	andeq	r0, r0, sl, asr r3
     8ec:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     8f0:	86088509 	strhi	r8, [r8], -r9, lsl #10
     8f4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     8f8:	8a048905 	bhi	122d14 <_Min_Stack_Size+0x122914>
     8fc:	8e028b03 	vmlahi.f64	d8, d2, d3
     900:	400e4201 	andmi	r4, lr, r1, lsl #4
     904:	240e0a50 	strcs	r0, [lr], #-2640	; 0xfffff5b0
     908:	00000b42 	andeq	r0, r0, r2, asr #22
     90c:	00000024 	andeq	r0, r0, r4, lsr #32
     910:	00000504 	andeq	r0, r0, r4, lsl #10
     914:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
     918:	000000cc 	andeq	r0, r0, ip, asr #1
     91c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     920:	86058506 	strhi	r8, [r5], -r6, lsl #10
     924:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     928:	41018e02 	tstmi	r1, r2, lsl #28
     92c:	0a4a200e 	beq	128896c <_Min_Stack_Size+0x128856c>
     930:	0b42180e 	bleq	1086970 <_Min_Stack_Size+0x1086570>
     934:	00000024 	andeq	r0, r0, r4, lsr #32
     938:	00000504 	andeq	r0, r0, r4, lsl #10
     93c:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
     940:	000000dc 	ldrdeq	r0, [r0], -ip
     944:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     948:	86058506 	strhi	r8, [r5], -r6, lsl #10
     94c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     950:	41018e02 	tstmi	r1, r2, lsl #28
     954:	0a4a200e 	beq	1288994 <_Min_Stack_Size+0x1288594>
     958:	0b42180e 	bleq	1086998 <_Min_Stack_Size+0x1086598>
     95c:	00000028 	andeq	r0, r0, r8, lsr #32
     960:	00000504 	andeq	r0, r0, r4, lsl #10
     964:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
     968:	00000138 	andeq	r0, r0, r8, lsr r1
     96c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     970:	86078508 	strhi	r8, [r7], -r8, lsl #10
     974:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     978:	8a038904 	bhi	e2d90 <_Min_Stack_Size+0xe2990>
     97c:	42018e02 	andmi	r8, r1, #2, 28
     980:	0a4f300e 	beq	13cc9c0 <_Min_Stack_Size+0x13cc5c0>
     984:	0b42200e 	bleq	10889c4 <_Min_Stack_Size+0x10885c4>
     988:	00000028 	andeq	r0, r0, r8, lsr #32
     98c:	00000504 	andeq	r0, r0, r4, lsl #10
     990:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
     994:	00000188 	andeq	r0, r0, r8, lsl #3
     998:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
     99c:	86068507 	strhi	r8, [r6], -r7, lsl #10
     9a0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     9a4:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
     9a8:	380e4101 	stmdacc	lr, {r0, r8, lr}
     9ac:	1c0e0a50 	stcne	10, cr0, [lr], {80}	; 0x50
     9b0:	00000b42 	andeq	r0, r0, r2, asr #22
     9b4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9b8:	00000504 	andeq	r0, r0, r4, lsl #10
     9bc:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
     9c0:	000001d8 	ldrdeq	r0, [r0], -r8
     9c4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9c8:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9cc:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9d0:	8a048905 	bhi	122dec <_Min_Stack_Size+0x1229ec>
     9d4:	8e028b03 	vmlahi.f64	d8, d2, d3
     9d8:	300e4201 	andcc	r4, lr, r1, lsl #4
     9dc:	240e0a4c 	strcs	r0, [lr], #-2636	; 0xfffff5b4
     9e0:	00000b42 	andeq	r0, r0, r2, asr #22
     9e4:	0000000c 	andeq	r0, r0, ip
     9e8:	00000504 	andeq	r0, r0, r4, lsl #10
     9ec:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
     9f0:	00000002 	andeq	r0, r0, r2
     9f4:	0000000c 	andeq	r0, r0, ip
     9f8:	00000504 	andeq	r0, r0, r4, lsl #10
     9fc:	08003440 	stmdaeq	r0, {r6, sl, ip, sp}
     a00:	00000002 	andeq	r0, r0, r2
     a04:	0000000c 	andeq	r0, r0, ip
     a08:	00000504 	andeq	r0, r0, r4, lsl #10
     a0c:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
     a10:	00000002 	andeq	r0, r0, r2
     a14:	0000000c 	andeq	r0, r0, ip
     a18:	00000504 	andeq	r0, r0, r4, lsl #10
     a1c:	08003448 	stmdaeq	r0, {r3, r6, sl, ip, sp}
     a20:	00000002 	andeq	r0, r0, r2
     a24:	0000000c 	andeq	r0, r0, ip
     a28:	00000504 	andeq	r0, r0, r4, lsl #10
     a2c:	0800344c 	stmdaeq	r0, {r2, r3, r6, sl, ip, sp}
     a30:	00000002 	andeq	r0, r0, r2
     a34:	0000000c 	andeq	r0, r0, ip
     a38:	00000504 	andeq	r0, r0, r4, lsl #10
     a3c:	08003450 	stmdaeq	r0, {r4, r6, sl, ip, sp}
     a40:	00000002 	andeq	r0, r0, r2
     a44:	0000000c 	andeq	r0, r0, ip
     a48:	00000504 	andeq	r0, r0, r4, lsl #10
     a4c:	08003454 	stmdaeq	r0, {r2, r4, r6, sl, ip, sp}
     a50:	00000002 	andeq	r0, r0, r2
     a54:	0000000c 	andeq	r0, r0, ip
     a58:	00000504 	andeq	r0, r0, r4, lsl #10
     a5c:	08003458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp}
     a60:	00000002 	andeq	r0, r0, r2
     a64:	0000000c 	andeq	r0, r0, ip
     a68:	00000504 	andeq	r0, r0, r4, lsl #10
     a6c:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
     a70:	00000002 	andeq	r0, r0, r2
     a74:	00000014 	andeq	r0, r0, r4, lsl r0
     a78:	00000504 	andeq	r0, r0, r4, lsl #10
     a7c:	08003460 	stmdaeq	r0, {r5, r6, sl, ip, sp}
     a80:	0000002a 	andeq	r0, r0, sl, lsr #32
     a84:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     a88:	00018e02 	andeq	r8, r1, r2, lsl #28
     a8c:	00000014 	andeq	r0, r0, r4, lsl r0
     a90:	00000504 	andeq	r0, r0, r4, lsl #10
     a94:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     a98:	00000082 	andeq	r0, r0, r2, lsl #1
     a9c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     aa0:	00018e02 	andeq	r8, r1, r2, lsl #28
     aa4:	0000000c 	andeq	r0, r0, ip
     aa8:	00000504 	andeq	r0, r0, r4, lsl #10
     aac:	08003510 	stmdaeq	r0, {r4, r8, sl, ip, sp}
     ab0:	00000002 	andeq	r0, r0, r2
     ab4:	00000018 	andeq	r0, r0, r8, lsl r0
     ab8:	00000504 	andeq	r0, r0, r4, lsl #10
     abc:	08003514 	stmdaeq	r0, {r2, r4, r8, sl, ip, sp}
     ac0:	0000013c 	andeq	r0, r0, ip, lsr r1
     ac4:	83100e41 	tsthi	r0, #1040	; 0x410
     ac8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     acc:	00018e02 	andeq	r8, r1, r2, lsl #28
     ad0:	00000014 	andeq	r0, r0, r4, lsl r0
     ad4:	00000504 	andeq	r0, r0, r4, lsl #10
     ad8:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
     adc:	0000004c 	andeq	r0, r0, ip, asr #32
     ae0:	84080e4d 	strhi	r0, [r8], #-3661	; 0xfffff1b3
     ae4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ae8:	00000024 	andeq	r0, r0, r4, lsr #32
     aec:	00000504 	andeq	r0, r0, r4, lsl #10
     af0:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     af4:	000007d2 	ldrdeq	r0, [r0], -r2
     af8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     afc:	86048505 	strhi	r8, [r4], -r5, lsl #10
     b00:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     b04:	480e4a01 	stmdami	lr, {r0, r9, fp, lr}
     b08:	0e0aa602 	cfmadd32eq	mvax0, mvfx10, mvfx10, mvfx2
     b0c:	000b4114 	andeq	r4, fp, r4, lsl r1
     b10:	00000018 	andeq	r0, r0, r8, lsl r0
     b14:	00000504 	andeq	r0, r0, r4, lsl #10
     b18:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
     b1c:	0000004c 	andeq	r0, r0, ip, asr #32
     b20:	83100e44 	tsthi	r0, #68, 28	; 0x440
     b24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b28:	00018e02 	andeq	r8, r1, r2, lsl #28
     b2c:	00000018 	andeq	r0, r0, r8, lsl r0
     b30:	00000504 	andeq	r0, r0, r4, lsl #10
     b34:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     b38:	00000298 	muleq	r0, r8, r2
     b3c:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
     b40:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b44:	00018e02 	andeq	r8, r1, r2, lsl #28
     b48:	0000000c 	andeq	r0, r0, ip
     b4c:	00000504 	andeq	r0, r0, r4, lsl #10
     b50:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
     b54:	00000006 	andeq	r0, r0, r6
     b58:	0000000c 	andeq	r0, r0, ip
     b5c:	00000504 	andeq	r0, r0, r4, lsl #10
     b60:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
     b64:	00000006 	andeq	r0, r0, r6
     b68:	0000000c 	andeq	r0, r0, ip
     b6c:	00000504 	andeq	r0, r0, r4, lsl #10
     b70:	08004164 	stmdaeq	r0, {r2, r5, r6, r8, lr}
     b74:	00000004 	andeq	r0, r0, r4
     b78:	0000000c 	andeq	r0, r0, ip
     b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b80:	7c020001 	stcvc	0, cr0, [r2], {1}
     b84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b88:	00000034 	andeq	r0, r0, r4, lsr r0
     b8c:	00000b78 	andeq	r0, r0, r8, ror fp
     b90:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
     b94:	00000150 	andeq	r0, r0, r0, asr r1
     b98:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     b9c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     ba0:	8a038704 	bhi	e27b8 <_Min_Stack_Size+0xe23b8>
     ba4:	42018e02 	andmi	r8, r1, #2, 28
     ba8:	5902200e 	stmdbpl	r2, {r1, r2, r3, sp}
     bac:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
     bb0:	0e0a470b 	cdpeq	7, 0, cr4, cr10, cr11, {0}
     bb4:	5f0b4218 	svcpl	0x000b4218
     bb8:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
     bbc:	0000000b 	andeq	r0, r0, fp
     bc0:	0000001c 	andeq	r0, r0, ip, lsl r0
     bc4:	00000b78 	andeq	r0, r0, r8, ror fp
     bc8:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
     bcc:	00000078 	andeq	r0, r0, r8, ror r0
     bd0:	840c0e4c 	strhi	r0, [ip], #-3660	; 0xfffff1b4
     bd4:	86028503 	strhi	r8, [r2], -r3, lsl #10
     bd8:	c5c66601 	strbgt	r6, [r6, #1537]	; 0x601
     bdc:	00000ec4 	andeq	r0, r0, r4, asr #29
     be0:	00000030 	andeq	r0, r0, r0, lsr r0
     be4:	00000b78 	andeq	r0, r0, r8, ror fp
     be8:	08004330 	stmdaeq	r0, {r4, r5, r8, r9, lr}
     bec:	0000005c 	andeq	r0, r0, ip, asr r0
     bf0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     bf4:	86028503 	strhi	r8, [r2], -r3, lsl #10
     bf8:	c60a4f01 	strgt	r4, [sl], -r1, lsl #30
     bfc:	000ec4c5 	andeq	ip, lr, r5, asr #9
     c00:	0a420b42 	beq	1083910 <_Min_Stack_Size+0x1083510>
     c04:	0ec6c5c4 	cdpeq	5, 12, cr12, cr6, cr4, {6}
     c08:	580b4100 	stmdapl	fp, {r8, lr}
     c0c:	0ec6c5c4 	cdpeq	5, 12, cr12, cr6, cr4, {6}
     c10:	00000000 	andeq	r0, r0, r0
     c14:	00000034 	andeq	r0, r0, r4, lsr r0
     c18:	00000b78 	andeq	r0, r0, r8, ror fp
     c1c:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
     c20:	00000084 	andeq	r0, r0, r4, lsl #1
     c24:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     c28:	86038504 	strhi	r8, [r3], -r4, lsl #10
     c2c:	50018702 	andpl	r8, r1, r2, lsl #14
     c30:	c5c6c70a 	strbgt	ip, [r6, #1802]	; 0x70a
     c34:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
     c38:	c40a420b 	strgt	r4, [sl], #-523	; 0xfffffdf5
     c3c:	0ec7c6c5 	cdpeq	6, 12, cr12, cr7, cr5, {6}
     c40:	6b0b4100 	blvs	2d1048 <_Min_Stack_Size+0x2d0c48>
     c44:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
     c48:	0000000e 	andeq	r0, r0, lr
     c4c:	00000018 	andeq	r0, r0, r8, lsl r0
     c50:	00000b78 	andeq	r0, r0, r8, ror fp
     c54:	08004410 	stmdaeq	r0, {r4, sl, lr}
     c58:	0000008e 	andeq	r0, r0, lr, lsl #1
     c5c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     c60:	86038504 	strhi	r8, [r3], -r4, lsl #10
     c64:	00018e02 	andeq	r8, r1, r2, lsl #28
     c68:	0000000c 	andeq	r0, r0, ip
     c6c:	00000b78 	andeq	r0, r0, r8, ror fp
     c70:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
     c74:	00000024 	andeq	r0, r0, r4, lsr #32
     c78:	00000034 	andeq	r0, r0, r4, lsr r0
     c7c:	00000b78 	andeq	r0, r0, r8, ror fp
     c80:	080044c4 	stmdaeq	r0, {r2, r6, r7, sl, lr}
     c84:	0000021c 	andeq	r0, r0, ip, lsl r2
     c88:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     c8c:	86088509 	strhi	r8, [r8], -r9, lsl #10
     c90:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     c94:	8a048905 	bhi	1230b0 <_Min_Stack_Size+0x122cb0>
     c98:	8e028b03 	vmlahi.f64	d8, d2, d3
     c9c:	300e4201 	andcc	r4, lr, r1, lsl #4
     ca0:	240e0a4f 	strcs	r0, [lr], #-2639	; 0xfffff5b1
     ca4:	66020b42 	strvs	r0, [r2], -r2, asr #22
     ca8:	42240e0a 	eormi	r0, r4, #10, 28	; 0xa0
     cac:	0000000b 	andeq	r0, r0, fp
     cb0:	00000024 	andeq	r0, r0, r4, lsr #32
     cb4:	00000b78 	andeq	r0, r0, r8, ror fp
     cb8:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
     cbc:	000001a8 	andeq	r0, r0, r8, lsr #3
     cc0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     cc4:	86048505 	strhi	r8, [r4], -r5, lsl #10
     cc8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     ccc:	200e4101 	andcs	r4, lr, r1, lsl #2
     cd0:	0e0a5502 	cfsh32eq	mvfx5, mvfx10, #2
     cd4:	000b4114 	andeq	r4, fp, r4, lsl r1
     cd8:	00000020 	andeq	r0, r0, r0, lsr #32
     cdc:	00000b78 	andeq	r0, r0, r8, ror fp
     ce0:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
     ce4:	00000066 	andeq	r0, r0, r6, rrx
     ce8:	84040e44 	strhi	r0, [r4], #-3652	; 0xfffff1bc
     cec:	c40a4f01 	strgt	r4, [sl], #-3841	; 0xfffff0ff
     cf0:	0b41000e 	bleq	1040d30 <_Min_Stack_Size+0x1040930>
     cf4:	0ec40a43 	cdpeq	10, 12, cr0, cr4, cr3, {2}
     cf8:	000b4100 	andeq	r4, fp, r0, lsl #2
     cfc:	0000000c 	andeq	r0, r0, ip
     d00:	00000b78 	andeq	r0, r0, r8, ror fp
     d04:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
     d08:	0000006e 	andeq	r0, r0, lr, rrx
     d0c:	0000000c 	andeq	r0, r0, ip
     d10:	00000b78 	andeq	r0, r0, r8, ror fp
     d14:	08004960 	stmdaeq	r0, {r5, r6, r8, fp, lr}
     d18:	00000006 	andeq	r0, r0, r6
     d1c:	0000000c 	andeq	r0, r0, ip
     d20:	00000b78 	andeq	r0, r0, r8, ror fp
     d24:	08004968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr}
     d28:	00000004 	andeq	r0, r0, r4
     d2c:	0000000c 	andeq	r0, r0, ip
     d30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d34:	7c020001 	stcvc	0, cr0, [r2], {1}
     d38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d3c:	0000000c 	andeq	r0, r0, ip
     d40:	00000d2c 	andeq	r0, r0, ip, lsr #26
     d44:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
     d48:	00000002 	andeq	r0, r0, r2
     d4c:	00000030 	andeq	r0, r0, r0, lsr r0
     d50:	00000d2c 	andeq	r0, r0, ip, lsr #26
     d54:	08004970 	stmdaeq	r0, {r4, r5, r6, r8, fp, lr}
     d58:	00000310 	andeq	r0, r0, r0, lsl r3
     d5c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     d60:	86048505 	strhi	r8, [r4], -r5, lsl #10
     d64:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     d68:	200e4301 	andcs	r4, lr, r1, lsl #6
     d6c:	0e0a7702 	cdpeq	7, 0, cr7, cr10, cr2, {0}
     d70:	020b4114 	andeq	r4, fp, #20, 2
     d74:	140e0a4a 	strne	r0, [lr], #-2634	; 0xfffff5b6
     d78:	0a4d0b41 	beq	1343a84 <_Min_Stack_Size+0x1343684>
     d7c:	0b41140e 	bleq	1045dbc <_Min_Stack_Size+0x10459bc>
     d80:	00000028 	andeq	r0, r0, r8, lsr #32
     d84:	00000d2c 	andeq	r0, r0, ip, lsr #26
     d88:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
     d8c:	000000a8 	andeq	r0, r0, r8, lsr #1
     d90:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     d94:	86048505 	strhi	r8, [r4], -r5, lsl #10
     d98:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     d9c:	380e4201 	stmdacc	lr, {r0, r9, lr}
     da0:	140e0a66 	strne	r0, [lr], #-2662	; 0xfffff59a
     da4:	0e620b41 	vnmuleq.f64	d16, d2, d1
     da8:	00000014 	andeq	r0, r0, r4, lsl r0
     dac:	0000000c 	andeq	r0, r0, ip
     db0:	00000d2c 	andeq	r0, r0, ip, lsr #26
     db4:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
     db8:	0000000c 	andeq	r0, r0, ip
     dbc:	0000000c 	andeq	r0, r0, ip
     dc0:	00000d2c 	andeq	r0, r0, ip, lsr #26
     dc4:	08004d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, lr}
     dc8:	0000000c 	andeq	r0, r0, ip
     dcc:	00000018 	andeq	r0, r0, r8, lsl r0
     dd0:	00000d2c 	andeq	r0, r0, ip, lsr #26
     dd4:	08004d40 	stmdaeq	r0, {r6, r8, sl, fp, lr}
     dd8:	00000080 	andeq	r0, r0, r0, lsl #1
     ddc:	84080e4a 	strhi	r0, [r8], #-3658	; 0xfffff1b6
     de0:	69018502 	stmdbvs	r1, {r1, r8, sl, pc}
     de4:	000ec4c5 	andeq	ip, lr, r5, asr #9
     de8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dec:	00000d2c 	andeq	r0, r0, ip, lsr #26
     df0:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
     df4:	0000016c 	andeq	r0, r0, ip, ror #2
     df8:	84180e47 	ldrhi	r0, [r8], #-3655	; 0xfffff1b9
     dfc:	86058506 	strhi	r8, [r5], -r6, lsl #10
     e00:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     e04:	00018e02 	andeq	r8, r1, r2, lsl #28
     e08:	0000000c 	andeq	r0, r0, ip
     e0c:	00000d2c 	andeq	r0, r0, ip, lsr #26
     e10:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
     e14:	0000000c 	andeq	r0, r0, ip
     e18:	0000000c 	andeq	r0, r0, ip
     e1c:	00000d2c 	andeq	r0, r0, ip, lsr #26
     e20:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
     e24:	00000030 	andeq	r0, r0, r0, lsr r0
     e28:	0000000c 	andeq	r0, r0, ip
     e2c:	00000d2c 	andeq	r0, r0, ip, lsr #26
     e30:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
     e34:	00000030 	andeq	r0, r0, r0, lsr r0
     e38:	0000001c 	andeq	r0, r0, ip, lsl r0
     e3c:	00000d2c 	andeq	r0, r0, ip, lsr #26
     e40:	08004f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, lr}
     e44:	000000d4 	ldrdeq	r0, [r0], -r4
     e48:	84040e46 	strhi	r0, [r4], #-3654	; 0xfffff1ba
     e4c:	0a520201 	beq	1481658 <_Min_Stack_Size+0x1481258>
     e50:	41000ec4 	smlabtmi	r0, r4, lr, r0
     e54:	0000000b 	andeq	r0, r0, fp
     e58:	00000018 	andeq	r0, r0, r8, lsl r0
     e5c:	00000d2c 	andeq	r0, r0, ip, lsr #26
     e60:	0800506c 	stmdaeq	r0, {r2, r3, r5, r6, ip, lr}
     e64:	00000044 	andeq	r0, r0, r4, asr #32
     e68:	84040e53 	strhi	r0, [r4], #-3667	; 0xfffff1ad
     e6c:	0ec44601 	cdpeq	6, 12, cr4, cr4, cr1, {0}
     e70:	00000000 	andeq	r0, r0, r0
     e74:	0000000c 	andeq	r0, r0, ip
     e78:	00000d2c 	andeq	r0, r0, ip, lsr #26
     e7c:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
     e80:	00000002 	andeq	r0, r0, r2
     e84:	00000014 	andeq	r0, r0, r4, lsl r0
     e88:	00000d2c 	andeq	r0, r0, ip, lsr #26
     e8c:	080050b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, lr}
     e90:	00000020 	andeq	r0, r0, r0, lsr #32
     e94:	83080e41 	movwhi	r0, #36417	; 0x8e41
     e98:	00018e02 	andeq	r8, r1, r2, lsl #28
     e9c:	0000000c 	andeq	r0, r0, ip
     ea0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ea4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ea8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     eac:	00000018 	andeq	r0, r0, r8, lsl r0
     eb0:	00000e9c 	muleq	r0, ip, lr
     eb4:	080050d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, lr}
     eb8:	00000044 	andeq	r0, r0, r4, asr #32
     ebc:	83100e41 	tsthi	r0, #1040	; 0x410
     ec0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     ec4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ec8:	00000018 	andeq	r0, r0, r8, lsl r0
     ecc:	00000e9c 	muleq	r0, ip, lr
     ed0:	08005118 	stmdaeq	r0, {r3, r4, r8, ip, lr}
     ed4:	00000044 	andeq	r0, r0, r4, asr #32
     ed8:	83100e41 	tsthi	r0, #1040	; 0x410
     edc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     ee0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ee4:	0000000c 	andeq	r0, r0, ip
     ee8:	00000e9c 	muleq	r0, ip, lr
     eec:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
     ef0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef4:	0000000c 	andeq	r0, r0, ip
     ef8:	00000e9c 	muleq	r0, ip, lr
     efc:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
     f00:	0000001c 	andeq	r0, r0, ip, lsl r0
     f04:	0000000c 	andeq	r0, r0, ip
     f08:	00000e9c 	muleq	r0, ip, lr
     f0c:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
     f10:	00000010 	andeq	r0, r0, r0, lsl r0
     f14:	00000024 	andeq	r0, r0, r4, lsr #32
     f18:	00000e9c 	muleq	r0, ip, lr
     f1c:	080051a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, lr}
     f20:	000000b8 	strheq	r0, [r0], -r8
     f24:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f28:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f2c:	41018e02 	tstmi	r1, r2, lsl #28
     f30:	4f02180e 	svcmi	0x0002180e
     f34:	41100e0a 	tstmi	r0, sl, lsl #28
     f38:	100e420b 	andne	r4, lr, fp, lsl #4
     f3c:	00000024 	andeq	r0, r0, r4, lsr #32
     f40:	00000e9c 	muleq	r0, ip, lr
     f44:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
     f48:	0000009c 	muleq	r0, ip, r0
     f4c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     f50:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f54:	180e4101 	stmdane	lr, {r0, r8, lr}
     f58:	0e0a4402 	cdpeq	4, 0, cr4, cr10, cr2, {0}
     f5c:	420b410c 	andmi	r4, fp, #12, 2
     f60:	00000c0e 	andeq	r0, r0, lr, lsl #24
     f64:	00000024 	andeq	r0, r0, r4, lsr #32
     f68:	00000e9c 	muleq	r0, ip, lr
     f6c:	080052f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, lr}
     f70:	0000009c 	muleq	r0, ip, r0
     f74:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     f78:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f7c:	180e4101 	stmdane	lr, {r0, r8, lr}
     f80:	0e0a4302 	cdpeq	3, 0, cr4, cr10, cr2, {0}
     f84:	420b410c 	andmi	r4, fp, #12, 2
     f88:	00000c0e 	andeq	r0, r0, lr, lsl #24
     f8c:	00000028 	andeq	r0, r0, r8, lsr #32
     f90:	00000e9c 	muleq	r0, ip, lr
     f94:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
     f98:	00000098 	muleq	r0, r8, r0
     f9c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     fa0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     fa4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     fa8:	200e4101 	andcs	r4, lr, r1, lsl #2
     fac:	140e0a7e 	strne	r0, [lr], #-2686	; 0xfffff582
     fb0:	0a420b41 	beq	1083cbc <_Min_Stack_Size+0x10838bc>
     fb4:	0b41140e 	bleq	1045ff4 <_Min_Stack_Size+0x1045bf4>
     fb8:	0000000c 	andeq	r0, r0, ip
     fbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fc0:	7c020001 	stcvc	0, cr0, [r2], {1}
     fc4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fc8:	0000000c 	andeq	r0, r0, ip
     fcc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
     fd0:	0800542c 	stmdaeq	r0, {r2, r3, r5, sl, ip, lr}
     fd4:	00000002 	andeq	r0, r0, r2
     fd8:	00000030 	andeq	r0, r0, r0, lsr r0
     fdc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
     fe0:	08005430 	stmdaeq	r0, {r4, r5, sl, ip, lr}
     fe4:	000000b4 	strheq	r0, [r0], -r4
     fe8:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
     fec:	86058506 	strhi	r8, [r5], -r6, lsl #10
     ff0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     ff4:	43018e02 	movwmi	r8, #7682	; 0x1e02
     ff8:	4a02200e 	bmi	89038 <_Min_Stack_Size+0x88c38>
     ffc:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
    1000:	000e450b 	andeq	r4, lr, fp, lsl #10
    1004:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
    1008:	0000cec8 	andeq	ip, r0, r8, asr #29
    100c:	0000000c 	andeq	r0, r0, ip
    1010:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1014:	080054e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, lr}
    1018:	00000002 	andeq	r0, r0, r2
    101c:	00000018 	andeq	r0, r0, r8, lsl r0
    1020:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1024:	080054e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, lr}
    1028:	0000002c 	andeq	r0, r0, ip, lsr #32
    102c:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1030:	50018e02 	andpl	r8, r1, r2, lsl #28
    1034:	cec4000e 	cdpgt	0, 12, cr0, cr4, cr14, {0}
    1038:	0000002c 	andeq	r0, r0, ip, lsr #32
    103c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1040:	08005514 	stmdaeq	r0, {r2, r4, r8, sl, ip, lr}
    1044:	00000328 	andeq	r0, r0, r8, lsr #6
    1048:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    104c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1050:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1054:	45018e02 	strmi	r8, [r1, #-3586]	; 0xfffff1fe
    1058:	0a43200e 	beq	10c9098 <_Min_Stack_Size+0x10c8c98>
    105c:	0b42180e 	bleq	108709c <_Min_Stack_Size+0x1086c9c>
    1060:	180e0a56 	stmdane	lr, {r1, r2, r4, r6, r9, fp}
    1064:	00000b42 	andeq	r0, r0, r2, asr #22
    1068:	0000002c 	andeq	r0, r0, ip, lsr #32
    106c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1070:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
    1074:	000003fc 	strdeq	r0, [r0], -ip
    1078:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    107c:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1080:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1084:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    1088:	280e4401 	stmdacs	lr, {r0, sl, lr}
    108c:	1c0e0a48 	stcne	10, cr0, [lr], {72}	; 0x48
    1090:	0a5b0b42 	beq	16c3da0 <_Min_Stack_Size+0x16c39a0>
    1094:	0b421c0e 	bleq	10880d4 <_Min_Stack_Size+0x1087cd4>
    1098:	0000002c 	andeq	r0, r0, ip, lsr #32
    109c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    10a0:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
    10a4:	00000352 	andeq	r0, r0, r2, asr r3
    10a8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    10ac:	86058506 	strhi	r8, [r5], -r6, lsl #10
    10b0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    10b4:	42018e02 	andmi	r8, r1, #2, 28
    10b8:	0a50280e 	beq	140b0f8 <_Min_Stack_Size+0x140acf8>
    10bc:	0b42180e 	bleq	10870fc <_Min_Stack_Size+0x1086cfc>
    10c0:	180e0a53 	stmdane	lr, {r0, r1, r4, r6, r9, fp}
    10c4:	00000b42 	andeq	r0, r0, r2, asr #22
    10c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    10cc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    10d0:	08005f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
    10d4:	000000c8 	andeq	r0, r0, r8, asr #1
    10d8:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
    10dc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10e0:	51018702 	tstpl	r1, r2, lsl #14
    10e4:	c5c6c70a 	strbgt	ip, [r6, #1802]	; 0x70a
    10e8:	41000ec4 	smlabtmi	r0, r4, lr, r0
    10ec:	c40a420b 	strgt	r4, [sl], #-523	; 0xfffffdf5
    10f0:	0ec7c6c5 	cdpeq	6, 12, cr12, cr7, cr5, {6}
    10f4:	000b4100 	andeq	r4, fp, r0, lsl #2
    10f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    10fc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1100:	08006054 	stmdaeq	r0, {r2, r4, r6, sp, lr}
    1104:	0000016c 	andeq	r0, r0, ip, ror #2
    1108:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    110c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1110:	58018702 	stmdapl	r1, {r1, r8, r9, sl, pc}
    1114:	c5c6c70a 	strbgt	ip, [r6, #1802]	; 0x70a
    1118:	41000ec4 	smlabtmi	r0, r4, lr, r0
    111c:	c40a420b 	strgt	r4, [sl], #-523	; 0xfffffdf5
    1120:	0ec7c6c5 	cdpeq	6, 12, cr12, cr7, cr5, {6}
    1124:	000b4100 	andeq	r4, fp, r0, lsl #2
    1128:	0000002c 	andeq	r0, r0, ip, lsr #32
    112c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1130:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    1134:	000000d8 	ldrdeq	r0, [r0], -r8
    1138:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    113c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1140:	56018702 	strpl	r8, [r1], -r2, lsl #14
    1144:	c5c6c70a 	strbgt	ip, [r6, #1802]	; 0x70a
    1148:	41000ec4 	smlabtmi	r0, r4, lr, r0
    114c:	c40a420b 	strgt	r4, [sl], #-523	; 0xfffffdf5
    1150:	0ec7c6c5 	cdpeq	6, 12, cr12, cr7, cr5, {6}
    1154:	000b4100 	andeq	r4, fp, r0, lsl #2
    1158:	0000001c 	andeq	r0, r0, ip, lsl r0
    115c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1160:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    1164:	000000c8 	andeq	r0, r0, r8, asr #1
    1168:	83180e41 	tsthi	r8, #1040	; 0x410
    116c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1170:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1174:	00018e02 	andeq	r8, r1, r2, lsl #28
    1178:	0000001c 	andeq	r0, r0, ip, lsl r0
    117c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1180:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
    1184:	000001c4 	andeq	r0, r0, r4, asr #3
    1188:	83180e41 	tsthi	r8, #1040	; 0x410
    118c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1190:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1194:	00018e02 	andeq	r8, r1, r2, lsl #28
    1198:	00000018 	andeq	r0, r0, r8, lsl r0
    119c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    11a0:	08006524 	stmdaeq	r0, {r2, r5, r8, sl, sp, lr}
    11a4:	00000114 	andeq	r0, r0, r4, lsl r1
    11a8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    11ac:	86038504 	strhi	r8, [r3], -r4, lsl #10
    11b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    11b4:	0000000c 	andeq	r0, r0, ip
    11b8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    11bc:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
    11c0:	00000022 	andeq	r0, r0, r2, lsr #32
    11c4:	0000000c 	andeq	r0, r0, ip
    11c8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    11cc:	0800665c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp, lr}
    11d0:	00000022 	andeq	r0, r0, r2, lsr #32
    11d4:	00000014 	andeq	r0, r0, r4, lsl r0
    11d8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    11dc:	08006680 	stmdaeq	r0, {r7, r9, sl, sp, lr}
    11e0:	00000028 	andeq	r0, r0, r8, lsr #32
    11e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    11f4:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
    11f8:	00000002 	andeq	r0, r0, r2
    11fc:	0000000c 	andeq	r0, r0, ip
    1200:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1204:	080066ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, sp, lr}
    1208:	00000002 	andeq	r0, r0, r2
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1214:	080066b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, sp, lr}
    1218:	00000002 	andeq	r0, r0, r2
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1224:	080066b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp, lr}
    1228:	00000002 	andeq	r0, r0, r2
    122c:	00000014 	andeq	r0, r0, r4, lsl r0
    1230:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1234:	080066b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, sp, lr}
    1238:	0000000a 	andeq	r0, r0, sl
    123c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1240:	00018e02 	andeq	r8, r1, r2, lsl #28
    1244:	0000000c 	andeq	r0, r0, ip
    1248:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    124c:	080066c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, sp, lr}
    1250:	00000002 	andeq	r0, r0, r2
    1254:	00000014 	andeq	r0, r0, r4, lsl r0
    1258:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    125c:	080066c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, sp, lr}
    1260:	0000000a 	andeq	r0, r0, sl
    1264:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1268:	00018e02 	andeq	r8, r1, r2, lsl #28
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1274:	080066d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp, lr}
    1278:	00000002 	andeq	r0, r0, r2
    127c:	00000014 	andeq	r0, r0, r4, lsl r0
    1280:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1284:	080066d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, sp, lr}
    1288:	0000000a 	andeq	r0, r0, sl
    128c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1290:	00018e02 	andeq	r8, r1, r2, lsl #28
    1294:	0000000c 	andeq	r0, r0, ip
    1298:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    129c:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
    12a0:	00000002 	andeq	r0, r0, r2
    12a4:	00000024 	andeq	r0, r0, r4, lsr #32
    12a8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    12ac:	080066e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, lr}
    12b0:	000000ec 	andeq	r0, r0, ip, ror #1
    12b4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    12b8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    12bc:	180e4601 	stmdane	lr, {r0, r9, sl, lr}
    12c0:	0c0e0a6f 	stceq	10, cr0, [lr], {111}	; 0x6f
    12c4:	0a6e0b41 	beq	1b83fd0 <_Min_Stack_Size+0x1b83bd0>
    12c8:	0b410c0e 	bleq	1044308 <_Min_Stack_Size+0x1043f08>
    12cc:	0000000c 	andeq	r0, r0, ip
    12d0:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    12d4:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
    12d8:	00000036 	andeq	r0, r0, r6, lsr r0
    12dc:	0000000c 	andeq	r0, r0, ip
    12e0:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    12e4:	0800680c 	stmdaeq	r0, {r2, r3, fp, sp, lr}
    12e8:	00000034 	andeq	r0, r0, r4, lsr r0
    12ec:	00000028 	andeq	r0, r0, r8, lsr #32
    12f0:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    12f4:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    12f8:	000000cc 	andeq	r0, r0, ip, asr #1
    12fc:	8e040e44 	cdphi	14, 0, cr0, cr4, cr4, {2}
    1300:	100e4b01 	andne	r4, lr, r1, lsl #22
    1304:	040e0a5e 	streq	r0, [lr], #-2654	; 0xfffff5a2
    1308:	0a430b42 	beq	10c4018 <_Min_Stack_Size+0x10c3c18>
    130c:	0b42040e 	bleq	108234c <_Min_Stack_Size+0x1081f4c>
    1310:	040e0a60 	streq	r0, [lr], #-2656	; 0xfffff5a0
    1314:	00000b42 	andeq	r0, r0, r2, asr #22
    1318:	00000030 	andeq	r0, r0, r0, lsr r0
    131c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1320:	0800690c 	stmdaeq	r0, {r2, r3, r8, fp, sp, lr}
    1324:	0000012c 	andeq	r0, r0, ip, lsr #2
    1328:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    132c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1330:	180e4601 	stmdane	lr, {r0, r9, sl, lr}
    1334:	0c0e0a78 	stceq	10, cr0, [lr], {120}	; 0x78
    1338:	0a720b41 	beq	1c84044 <_Min_Stack_Size+0x1c83c44>
    133c:	0b410c0e 	bleq	104437c <_Min_Stack_Size+0x1043f7c>
    1340:	0c0e0a4e 	stceq	10, cr0, [lr], {78}	; 0x4e
    1344:	0a430b41 	beq	10c4050 <_Min_Stack_Size+0x10c3c50>
    1348:	0b410c0e 	bleq	1044388 <_Min_Stack_Size+0x1043f88>
    134c:	00000024 	andeq	r0, r0, r4, lsr #32
    1350:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1354:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
    1358:	0000005a 	andeq	r0, r0, sl, asr r0
    135c:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
    1360:	c40a5b01 	strgt	r5, [sl], #-2817	; 0xfffff4ff
    1364:	0b41000e 	bleq	10413a4 <_Min_Stack_Size+0x1040fa4>
    1368:	0ec40a42 	cdpeq	10, 12, cr0, cr4, cr2, {2}
    136c:	430b4200 	movwmi	r4, #45568	; 0xb200
    1370:	00000ec4 	andeq	r0, r0, r4, asr #29
    1374:	00000024 	andeq	r0, r0, r4, lsr #32
    1378:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    137c:	08006a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, sp, lr}
    1380:	00000050 	andeq	r0, r0, r0, asr r0
    1384:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
    1388:	c40a5b01 	strgt	r5, [sl], #-2817	; 0xfffff4ff
    138c:	0b41000e 	bleq	10413cc <_Min_Stack_Size+0x1040fcc>
    1390:	0ec40a42 	cdpeq	10, 12, cr0, cr4, cr2, {2}
    1394:	440b4200 	strmi	r4, [fp], #-512	; 0xfffffe00
    1398:	00000ec4 	andeq	r0, r0, r4, asr #29
    139c:	00000018 	andeq	r0, r0, r8, lsl r0
    13a0:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    13a4:	08006ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp, lr}
    13a8:	00000030 	andeq	r0, r0, r0, lsr r0
    13ac:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
    13b0:	100e4101 	andne	r4, lr, r1, lsl #2
    13b4:	00040e54 	andeq	r0, r4, r4, asr lr
    13b8:	00000024 	andeq	r0, r0, r4, lsr #32
    13bc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    13c0:	08006b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, sp, lr}
    13c4:	00000056 	andeq	r0, r0, r6, asr r0
    13c8:	84040e42 	strhi	r0, [r4], #-3650	; 0xfffff1be
    13cc:	c40a5901 	strgt	r5, [sl], #-2305	; 0xfffff6ff
    13d0:	0b41000e 	bleq	1041410 <_Min_Stack_Size+0x1041010>
    13d4:	0ec40a42 	cdpeq	10, 12, cr0, cr4, cr2, {2}
    13d8:	4a0b4200 	bmi	2d1be0 <_Min_Stack_Size+0x2d17e0>
    13dc:	00000ec4 	andeq	r0, r0, r4, asr #29
    13e0:	00000024 	andeq	r0, r0, r4, lsr #32
    13e4:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    13e8:	08006b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
    13ec:	00000050 	andeq	r0, r0, r0, asr r0
    13f0:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
    13f4:	c40a5a01 	strgt	r5, [sl], #-2561	; 0xfffff5ff
    13f8:	0b41000e 	bleq	1041438 <_Min_Stack_Size+0x1041038>
    13fc:	0ec40a42 	cdpeq	10, 12, cr0, cr4, cr2, {2}
    1400:	440b4200 	strmi	r4, [fp], #-512	; 0xfffffe00
    1404:	00000ec4 	andeq	r0, r0, r4, asr #29
    1408:	00000018 	andeq	r0, r0, r8, lsl r0
    140c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1410:	08006bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
    1414:	0000002a 	andeq	r0, r0, sl, lsr #32
    1418:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
    141c:	100e4101 	andne	r4, lr, r1, lsl #2
    1420:	00040e51 	andeq	r0, r4, r1, asr lr
    1424:	00000014 	andeq	r0, r0, r4, lsl r0
    1428:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    142c:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
    1430:	00000024 	andeq	r0, r0, r4, lsr #32
    1434:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1438:	00018e02 	andeq	r8, r1, r2, lsl #28
    143c:	00000028 	andeq	r0, r0, r8, lsr #32
    1440:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1444:	08006c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp, lr}
    1448:	000000ca 	andeq	r0, r0, sl, asr #1
    144c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1450:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1454:	42018e02 	andmi	r8, r1, #2, 28
    1458:	0a64180e 	beq	1907498 <_Min_Stack_Size+0x1907098>
    145c:	0b41100e 	bleq	104549c <_Min_Stack_Size+0x104509c>
    1460:	100e0a71 	andne	r0, lr, r1, ror sl
    1464:	00000b41 	andeq	r0, r0, r1, asr #22
    1468:	00000028 	andeq	r0, r0, r8, lsr #32
    146c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1470:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
    1474:	00000106 	andeq	r0, r0, r6, lsl #2
    1478:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    147c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1480:	42018e02 	andmi	r8, r1, #2, 28
    1484:	0a66180e 	beq	19874c4 <_Min_Stack_Size+0x19870c4>
    1488:	0b41100e 	bleq	10454c8 <_Min_Stack_Size+0x10450c8>
    148c:	100e0a5f 	andne	r0, lr, pc, asr sl
    1490:	00000b41 	andeq	r0, r0, r1, asr #22
    1494:	00000028 	andeq	r0, r0, r8, lsr #32
    1498:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    149c:	08006de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp, lr}
    14a0:	0000015c 	andeq	r0, r0, ip, asr r1
    14a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    14a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    14ac:	42018e02 	andmi	r8, r1, #2, 28
    14b0:	0a67180e 	beq	19c74f0 <_Min_Stack_Size+0x19c70f0>
    14b4:	0b41100e 	bleq	10454f4 <_Min_Stack_Size+0x10450f4>
    14b8:	100e0a7f 	andne	r0, lr, pc, ror sl
    14bc:	00000b41 	andeq	r0, r0, r1, asr #22
    14c0:	00000020 	andeq	r0, r0, r0, lsr #32
    14c4:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    14c8:	08006f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
    14cc:	000000e4 	andeq	r0, r0, r4, ror #1
    14d0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    14d4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    14d8:	200e4601 	andcs	r4, lr, r1, lsl #12
    14dc:	0e0a5002 	cdpeq	0, 0, cr5, cr10, cr2, {0}
    14e0:	000b410c 	andeq	r4, fp, ip, lsl #2
    14e4:	00000014 	andeq	r0, r0, r4, lsl r0
    14e8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    14ec:	08007020 	stmdaeq	r0, {r5, ip, sp, lr}
    14f0:	00000012 	andeq	r0, r0, r2, lsl r0
    14f4:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14f8:	00018e02 	andeq	r8, r1, r2, lsl #28
    14fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1500:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1504:	08007034 	stmdaeq	r0, {r2, r4, r5, ip, sp, lr}
    1508:	0000008a 	andeq	r0, r0, sl, lsl #1
    150c:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
    1510:	100e4101 	andne	r4, lr, r1, lsl #2
    1514:	040e0a65 	streq	r0, [lr], #-2661	; 0xfffff59b
    1518:	0a430b42 	beq	10c4228 <_Min_Stack_Size+0x10c3e28>
    151c:	0b42040e 	bleq	108255c <_Min_Stack_Size+0x108215c>
    1520:	00040e55 	andeq	r0, r4, r5, asr lr
    1524:	00000024 	andeq	r0, r0, r4, lsr #32
    1528:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    152c:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
    1530:	00000092 	muleq	r0, r2, r0
    1534:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
    1538:	100e4101 	andne	r4, lr, r1, lsl #2
    153c:	040e0a69 	streq	r0, [lr], #-2665	; 0xfffff597
    1540:	0a430b42 	beq	10c4250 <_Min_Stack_Size+0x10c3e50>
    1544:	0b42040e 	bleq	1082584 <_Min_Stack_Size+0x1082184>
    1548:	00040e55 	andeq	r0, r4, r5, asr lr
    154c:	00000028 	andeq	r0, r0, r8, lsr #32
    1550:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1554:	08007154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp, lr}
    1558:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    155c:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
    1560:	100e4e01 	andne	r4, lr, r1, lsl #28
    1564:	040e0a5e 	streq	r0, [lr], #-2654	; 0xfffff5a2
    1568:	0a430b42 	beq	10c4278 <_Min_Stack_Size+0x10c3e78>
    156c:	0b42040e 	bleq	10825ac <_Min_Stack_Size+0x10821ac>
    1570:	040e0a60 	streq	r0, [lr], #-2656	; 0xfffff5a0
    1574:	00000b42 	andeq	r0, r0, r2, asr #22
    1578:	0000000c 	andeq	r0, r0, ip
    157c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1580:	08007224 	stmdaeq	r0, {r2, r5, r9, ip, sp, lr}
    1584:	00000006 	andeq	r0, r0, r6
    1588:	0000000c 	andeq	r0, r0, ip
    158c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1590:	0800722c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp, lr}
    1594:	00000004 	andeq	r0, r0, r4
    1598:	0000000c 	andeq	r0, r0, ip
    159c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15a8:	00000024 	andeq	r0, r0, r4, lsr #32
    15ac:	00001598 	muleq	r0, r8, r5
    15b0:	08007230 	stmdaeq	r0, {r4, r5, r9, ip, sp, lr}
    15b4:	000000a8 	andeq	r0, r0, r8, lsr #1
    15b8:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    15bc:	86068507 	strhi	r8, [r6], -r7, lsl #10
    15c0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    15c4:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    15c8:	400e4201 	andmi	r4, lr, r1, lsl #4
    15cc:	1c0e4602 	stcne	6, cr4, [lr], {2}
    15d0:	0000000c 	andeq	r0, r0, ip
    15d4:	00001598 	muleq	r0, r8, r5
    15d8:	080072d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp, lr}
    15dc:	00000008 	andeq	r0, r0, r8
    15e0:	00000020 	andeq	r0, r0, r0, lsr #32
    15e4:	00001598 	muleq	r0, r8, r5
    15e8:	080072e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp, lr}
    15ec:	00000078 	andeq	r0, r0, r8, ror r0
    15f0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    15f4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15f8:	42018e02 	andmi	r8, r1, #2, 28
    15fc:	0a59300e 	beq	164d63c <_Min_Stack_Size+0x164d23c>
    1600:	0b41100e 	bleq	1045640 <_Min_Stack_Size+0x1045240>
    1604:	0000000c 	andeq	r0, r0, ip
    1608:	00001598 	muleq	r0, r8, r5
    160c:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
    1610:	0000001c 	andeq	r0, r0, ip, lsl r0
    1614:	0000000c 	andeq	r0, r0, ip
    1618:	00001598 	muleq	r0, r8, r5
    161c:	08007374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1620:	0000001c 	andeq	r0, r0, ip, lsl r0
    1624:	0000000c 	andeq	r0, r0, ip
    1628:	00001598 	muleq	r0, r8, r5
    162c:	08007390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp, lr}
    1630:	0000001c 	andeq	r0, r0, ip, lsl r0
    1634:	00000028 	andeq	r0, r0, r8, lsr #32
    1638:	00001598 	muleq	r0, r8, r5
    163c:	080073ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr}
    1640:	00000078 	andeq	r0, r0, r8, ror r0
    1644:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1648:	41018e02 	tstmi	r1, r2, lsl #28
    164c:	0a50200e 	beq	140968c <_Min_Stack_Size+0x140928c>
    1650:	0b41080e 	bleq	1043690 <_Min_Stack_Size+0x1043290>
    1654:	080e0a4d 	stmdaeq	lr, {r0, r2, r3, r6, r9, fp}
    1658:	0e540b41 	vnmlaeq.f64	d16, d4, d1
    165c:	00000008 	andeq	r0, r0, r8
    1660:	00000014 	andeq	r0, r0, r4, lsl r0
    1664:	00001598 	muleq	r0, r8, r5
    1668:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
    166c:	00000014 	andeq	r0, r0, r4, lsl r0
    1670:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1674:	00018e02 	andeq	r8, r1, r2, lsl #28
    1678:	00000020 	andeq	r0, r0, r0, lsr #32
    167c:	00001598 	muleq	r0, r8, r5
    1680:	08007438 	stmdaeq	r0, {r3, r4, r5, sl, ip, sp, lr}
    1684:	000000b8 	strheq	r0, [r0], -r8
    1688:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    168c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1690:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1694:	380e4301 	stmdacc	lr, {r0, r8, r9, lr}
    1698:	140e4e02 	strne	r4, [lr], #-3586	; 0xfffff1fe
    169c:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a0:	00001598 	muleq	r0, r8, r5
    16a4:	080074f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, sp, lr}
    16a8:	00000058 	andeq	r0, r0, r8, asr r0
    16ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    16b0:	43018e02 	movwmi	r8, #7682	; 0x1e02
    16b4:	0e5f100e 	cdpeq	0, 5, cr1, cr15, cr14, {0}
    16b8:	00000008 	andeq	r0, r0, r8
    16bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c0:	00001598 	muleq	r0, r8, r5
    16c4:	08007548 	stmdaeq	r0, {r3, r6, r8, sl, ip, sp, lr}
    16c8:	00000058 	andeq	r0, r0, r8, asr r0
    16cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    16d0:	43018e02 	movwmi	r8, #7682	; 0x1e02
    16d4:	0e5f100e 	cdpeq	0, 5, cr1, cr15, cr14, {0}
    16d8:	00000008 	andeq	r0, r0, r8
    16dc:	00000020 	andeq	r0, r0, r0, lsr #32
    16e0:	00001598 	muleq	r0, r8, r5
    16e4:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
    16e8:	00000084 	andeq	r0, r0, r4, lsl #1
    16ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    16f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    16f4:	42018e02 	andmi	r8, r1, #2, 28
    16f8:	0e75180e 	cdpeq	8, 7, cr1, cr5, cr14, {0}
    16fc:	00000010 	andeq	r0, r0, r0, lsl r0
    1700:	0000000c 	andeq	r0, r0, ip
    1704:	00001598 	muleq	r0, r8, r5
    1708:	08007624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp, lr}
    170c:	00000004 	andeq	r0, r0, r4
    1710:	00000024 	andeq	r0, r0, r4, lsr #32
    1714:	00001598 	muleq	r0, r8, r5
    1718:	08007628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp, lr}
    171c:	000000f4 	strdeq	r0, [r0], -r4
    1720:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    1724:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1728:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    172c:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    1730:	400e4201 	andmi	r4, lr, r1, lsl #4
    1734:	1c0e6802 	stcne	8, cr6, [lr], {2}
    1738:	00000020 	andeq	r0, r0, r0, lsr #32
    173c:	00001598 	muleq	r0, r8, r5
    1740:	0800771c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp, lr}
    1744:	00000054 	andeq	r0, r0, r4, asr r0
    1748:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    174c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1750:	41018e02 	tstmi	r1, r2, lsl #28
    1754:	0e61280e 	cdpeq	8, 6, cr2, cr1, cr14, {0}
    1758:	00000010 	andeq	r0, r0, r0, lsl r0
    175c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1760:	00001598 	muleq	r0, r8, r5
    1764:	08007770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, ip, sp, lr}
    1768:	00000124 	andeq	r0, r0, r4, lsr #2
    176c:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    1770:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1774:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1778:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    177c:	580e4101 	stmdapl	lr, {r0, r8, lr}
    1780:	1c0e0a51 	stcne	10, cr0, [lr], {81}	; 0x51
    1784:	6b020b42 	blvs	84494 <_Min_Stack_Size+0x84094>
    1788:	00001c0e 	andeq	r1, r0, lr, lsl #24
    178c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1790:	00001598 	muleq	r0, r8, r5
    1794:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
    1798:	0000012c 	andeq	r0, r0, ip, lsr #2
    179c:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    17a0:	86068507 	strhi	r8, [r6], -r7, lsl #10
    17a4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    17a8:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    17ac:	580e4101 	stmdapl	lr, {r0, r8, lr}
    17b0:	1c0e0a54 	stcne	10, cr0, [lr], {84}	; 0x54
    17b4:	6d020b42 	vstrvs	d0, [r2, #-264]	; 0xfffffef8
    17b8:	00001c0e 	andeq	r1, r0, lr, lsl #24
    17bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    17c0:	00001598 	muleq	r0, r8, r5
    17c4:	080079c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, lr}
    17c8:	0000011c 	andeq	r0, r0, ip, lsl r1
    17cc:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    17d0:	86068507 	strhi	r8, [r6], -r7, lsl #10
    17d4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    17d8:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    17dc:	500e4401 	andpl	r4, lr, r1, lsl #8
    17e0:	1c0e0a4b 	stcne	10, cr0, [lr], {75}	; 0x4b
    17e4:	6b020b42 	blvs	844f4 <_Min_Stack_Size+0x840f4>
    17e8:	00001c0e 	andeq	r1, r0, lr, lsl #24
    17ec:	00000030 	andeq	r0, r0, r0, lsr r0
    17f0:	00001598 	muleq	r0, r8, r5
    17f4:	08007adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
    17f8:	00000124 	andeq	r0, r0, r4, lsr #2
    17fc:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    1800:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1804:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1808:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    180c:	500e4401 	andpl	r4, lr, r1, lsl #8
    1810:	1c0e0a4b 	stcne	10, cr0, [lr], {75}	; 0x4b
    1814:	0a4a0b42 	beq	1284524 <_Min_Stack_Size+0x1284124>
    1818:	0b421c0e 	bleq	1088858 <_Min_Stack_Size+0x1088458>
    181c:	1c0e6302 	stcne	3, cr6, [lr], {2}
    1820:	0000000c 	andeq	r0, r0, ip
    1824:	00001598 	muleq	r0, r8, r5
    1828:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
    182c:	00000004 	andeq	r0, r0, r4
    1830:	00000024 	andeq	r0, r0, r4, lsr #32
    1834:	00001598 	muleq	r0, r8, r5
    1838:	08007c04 	stmdaeq	r0, {r2, sl, fp, ip, sp, lr}
    183c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1840:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    1844:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1848:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    184c:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    1850:	580e4101 	stmdapl	lr, {r0, r8, lr}
    1854:	1c0e7502 	cfstr32ne	mvfx7, [lr], {2}
    1858:	00000028 	andeq	r0, r0, r8, lsr #32
    185c:	00001598 	muleq	r0, r8, r5
    1860:	08007d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, sp, lr}
    1864:	000000a8 	andeq	r0, r0, r8, lsr #1
    1868:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    186c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1870:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1874:	43018e02 	movwmi	r8, #7682	; 0x1e02
    1878:	4102280e 	tstmi	r2, lr, lsl #16
    187c:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
    1880:	0000000b 	andeq	r0, r0, fp
    1884:	00000024 	andeq	r0, r0, r4, lsr #32
    1888:	00001598 	muleq	r0, r8, r5
    188c:	08007db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    1890:	000000a8 	andeq	r0, r0, r8, lsr #1
    1894:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1898:	86048505 	strhi	r8, [r4], -r5, lsl #10
    189c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18a0:	280e4301 	stmdacs	lr, {r0, r8, r9, lr}
    18a4:	0e0a4302 	cdpeq	3, 0, cr4, cr10, cr2, {0}
    18a8:	000b4114 	andeq	r4, fp, r4, lsl r1
